\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Fri Apr 15 23:47:31 CEST 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , finalFields-finalFields\\:immutable , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_COMPLETION
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../src";

\proofObligation "#Proof Obligation Settings
#Fri Apr 15 23:47:31 CEST 2022
contract=de.wiesler.Tree[de.wiesler.Tree\\:\\:classOfFirstSplitters()].JML model_behavior operation contract.0
name=de.wiesler.Tree[de.wiesler.Tree\\:\\:classOfFirstSplitters()].JML model_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "802059dea3"))
(keyLog "1" (keyUser "Julian" ) (keyVersion "82c4308ea5"))
(keyLog "2" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))

(autoModeTime "101749")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "heapAtPre,heapBefore,o,f"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
 (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "6")) (userinteraction))
(rule "notRight" (formula "8") (userinteraction))
 (builtin "Evaluate Query" (formula "1") (term "0") (newnames "value,callee,queryResult,res_classify") (userinteraction))
(rule "notLeft" (formula "1") (userinteraction))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "queryResult") (userinteraction))
 (builtin "Use Operation Contract" (formula "8") (newnames "heapBefore_classify,result_21,exc_25") (contract "de.wiesler.Tree[de.wiesler.Tree::classify(int)].JML normal_behavior operation contract.0") (userinteraction))
(branch "Post (classify)"
   (rule "hide_right" (formula "9") (userinteraction))
    (builtin "Evaluate Query" (formula "1") (term "1") (newnames "value_0,callee,queryResult_0,res_classify_0") (userinteraction))
   (rule "notLeft" (formula "1") (userinteraction))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "queryResult_0") (userinteraction))
    (builtin "Use Operation Contract" (formula "9") (newnames "heapBefore_classify_0,result_22,exc_26") (contract "de.wiesler.Tree[de.wiesler.Tree::classify(int)].JML normal_behavior operation contract.0") (userinteraction))
   (branch "Post (classify)"
       (builtin "One Step Simplification" (formula "10") (userinteraction))
      (rule "hide_right" (formula "10") (userinteraction))
       (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "7")) (userinteraction))
       (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "7")) (userinteraction))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "11"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "12"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "13"))
      (rule "andLeft" (formula "9"))
      (rule "eqTermCut" (formula "11") (term "0,3,0") (inst "s=Z(0(#))") (userinteraction))
      (branch "Assume result_21 = 0"
         (rule "replaceKnownQuery_0" (formula "8") (term "1"))
         (rule "replaceKnownQuery0_2" (formula "14") (term "1"))
         (rule "replaceKnownQuery_0" (formula "1") (term "0"))
         (rule "replaceKnownQuery0_2" (formula "1") (term "1"))
         (rule "translateJavaMulInt" (formula "16") (term "1"))
         (rule "translateJavaSubInt" (formula "12") (term "3,0"))
         (rule "translateJavaMulInt" (formula "10") (term "1"))
         (rule "translateJavaSubInt" (formula "17") (term "3,0"))
         (rule "eqSymm" (formula "1"))
         (rule "polySimp_elimSub" (formula "12") (term "3,0"))
         (rule "polySimp_elimSub" (formula "17") (term "3,0"))
         (rule "polySimp_mulComm0" (formula "16") (term "1"))
         (rule "polySimp_mulComm0" (formula "10") (term "1"))
         (rule "inEqSimp_ltToLeq" (formula "6"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "6") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "16"))
         (rule "polySimp_mulAssoc" (formula "16") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "16") (term "0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "16") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "10"))
         (rule "polySimp_mulAssoc" (formula "10") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "10") (term "0"))
         (rule "applyEq" (formula "9") (term "1") (ifseqformula "8"))
         (rule "applyEq" (formula "15") (term "1") (ifseqformula "14"))
         (rule "applyEq" (formula "8") (term "0") (ifseqformula "11"))
         (rule "eqSymm" (formula "8"))
         (rule "applyEqRigid" (formula "9") (term "1") (ifseqformula "8"))
         (rule "applyEqRigid" (formula "15") (term "1") (ifseqformula "1"))
         (rule "applyEq" (formula "14") (term "1") (ifseqformula "1"))
         (rule "applyEq" (formula "12") (term "0,3,0") (ifseqformula "11"))
         (rule "add_zero_left" (formula "12") (term "3,0"))
         (rule "applyEq" (formula "15") (term "1") (ifseqformula "8"))
         (rule "applyEqRigid" (formula "1") (term "1") (ifseqformula "8"))
         (rule "applyEq" (formula "10") (term "1,0,0") (ifseqformula "11"))
         (rule "add_zero_right" (formula "10") (term "0,0"))
         (rule "applyEq" (formula "15") (term "1,0,0") (ifseqformula "14"))
         (rule "applyEq" (formula "16") (term "0,3,0") (ifseqformula "14"))
         (rule "applyEq" (formula "14") (term "1") (ifseqformula "8"))
         (rule "applyEq" (formula "15") (term "1,0,0") (ifseqformula "8"))
         (rule "add_zero_right" (formula "15") (term "0,0"))
         (rule "applyEq" (formula "15") (term "0,3,0") (ifseqformula "8"))
         (rule "add_zero_left" (formula "15") (term "3,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "6"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0"))
         (rule "polySimp_elimOne" (formula "6") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "10"))
         (rule "polySimp_mulLiterals" (formula "10") (term "0"))
         (rule "inEqSimp_contradInEq3" (formula "10") (ifseqformula "9"))
         (rule "times_zero_1" (formula "10") (term "0,1,0"))
         (rule "greater_literals" (formula "10") (term "0,0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "qeq_literals" (formula "10") (term "0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "closeFalse" (formula "10"))
      )
      (branch "Assume result_21 != 0"
         (rule "Definition_axiom_for_isClassifiedAs_in_de_wiesler_Tree" (formula "17") (term "0") (userinteraction))
          (builtin "One Step Simplification" (formula "17") (userinteraction))
         (rule "andLeft" (formula "17"))
         (rule "Definition_axiom_for_isClassifiedAs_in_de_wiesler_Tree" (formula "12") (term "0") (userinteraction))
          (builtin "One Step Simplification" (formula "12") (userinteraction))
         (rule "andLeft" (formula "12"))
         (rule "impLeft" (formula "12") (userinteraction))
         (branch "Case 1"
            (rule "Partial_inv_axiom_for_JML_class_invariant_nr_61_in_Tree" (formula "7") (userinteraction))
            (rule "Partial_inv_axiom_for_JML_class_invariant_nr_59_in_Tree" (formula "8") (userinteraction))
            (rule "Partial_inv_axiom_for_JML_class_invariant_nr_57_in_Tree" (formula "9") (userinteraction))
            (rule "hide_left" (formula "10") (userinteraction))
            (rule "replaceKnownQuery0_2" (formula "16") (term "1"))
            (rule "replaceKnownQuery_0" (formula "1") (term "0"))
            (rule "replaceKnownQuery0_2" (formula "1") (term "1"))
            (rule "replaceKnownQuery_0" (formula "10") (term "1"))
            (rule "translateJavaSubInt" (formula "14") (term "0,0"))
            (rule "translateJavaSubInt" (formula "20") (term "0,0"))
            (rule "translateJavaSubInt" (formula "20") (term "1,0"))
            (rule "translateJavaSubInt" (formula "22") (term "1"))
            (rule "translateJavaSubInt" (formula "20") (term "0,2,1,1"))
            (rule "translateJavaSubInt" (formula "19") (term "1,0"))
            (rule "translateJavaSubInt" (formula "14") (term "1,0"))
            (rule "translateJavaSubInt" (formula "14") (term "0,2,1,1"))
            (rule "translateJavaMulInt" (formula "12") (term "1"))
            (rule "translateJavaSubInt" (formula "19") (term "0,2,0,1"))
            (rule "translateJavaMulInt" (formula "18") (term "1"))
            (rule "translateJavaSubInt" (formula "19") (term "0,0,2,0,1"))
            (rule "notLeft" (formula "13"))
            (rule "andLeft" (formula "9"))
            (rule "eqSymm" (formula "1"))
            (rule "polySimp_elimSub" (formula "14") (term "0,0"))
            (rule "polySimp_elimSub" (formula "20") (term "0,0"))
            (rule "polySimp_elimSub" (formula "20") (term "1,0"))
            (rule "mul_literals" (formula "20") (term "1,1,0"))
            (rule "polySimp_elimSub" (formula "23") (term "1"))
            (rule "polySimp_elimSub" (formula "20") (term "0,2,1,1"))
            (rule "polySimp_elimSub" (formula "19") (term "1,0"))
            (rule "polySimp_elimSub" (formula "14") (term "1,0"))
            (rule "mul_literals" (formula "14") (term "1,1,0"))
            (rule "polySimp_elimSub" (formula "14") (term "0,2,1,1"))
            (rule "polySimp_elimSub" (formula "19") (term "0,0,2,0,1"))
            (rule "polySimp_elimSub" (formula "19") (term "0,2,0,1"))
            (rule "mul_literals" (formula "19") (term "1,0,2,0,1"))
            (rule "polySimp_mulComm0" (formula "13") (term "1"))
            (rule "polySimp_mulComm0" (formula "18") (term "1"))
            (rule "polySimp_addComm0" (formula "20") (term "1,0"))
            (rule "polySimp_addComm0" (formula "14") (term "1,0"))
            (rule "polySimp_addComm1" (formula "19") (term "0,2,0,1"))
            (rule "polySimp_addComm0" (formula "19") (term "0,0,2,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "6"))
            (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "6") (term "0"))
            (rule "inEqSimp_ltRight" (formula "23"))
            (rule "add_zero_right" (formula "1") (term "0"))
            (rule "polySimp_rightDist" (formula "1") (term "0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
            (rule "polySimp_elimOne" (formula "1") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
            (rule "inEqSimp_ltToLeq" (formula "20") (term "0"))
            (rule "add_zero_right" (formula "20") (term "0,0"))
            (rule "polySimp_rightDist" (formula "20") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
            (rule "polySimp_mulComm0" (formula "20") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "20") (term "0,0"))
            (rule "inEqSimp_ltToLeq" (formula "14"))
            (rule "polySimp_mulAssoc" (formula "14") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "14") (term "0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "14") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "19"))
            (rule "polySimp_mulAssoc" (formula "19") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "19") (term "0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "19") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "19") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "21") (term "0"))
            (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0"))
            (rule "mul_literals" (formula "21") (term "0,1,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "15") (term "0"))
            (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0"))
            (rule "mul_literals" (formula "15") (term "0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "21") (term "0,0,0"))
            (rule "add_literals" (formula "21") (term "0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "20") (term "1"))
            (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "9"))
            (rule "polySimp_addAssoc" (formula "15") (term "0,0,0"))
            (rule "add_literals" (formula "15") (term "0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "21") (term "0,0"))
            (rule "polySimp_addComm1" (formula "21") (term "0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "21") (term "0,0"))
            (rule "add_literals" (formula "21") (term "1,1,0,0"))
            (rule "polySimp_addAssoc" (formula "15") (term "0,0"))
            (rule "polySimp_addComm1" (formula "15") (term "0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "15") (term "0,0"))
            (rule "add_literals" (formula "15") (term "1,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "10"))
            (rule "inEqSimp_commuteLeq" (formula "11"))
            (rule "inEqSimp_commuteLeq" (formula "21") (term "1"))
            (rule "inEqSimp_commuteLeq" (formula "15") (term "1"))
            (rule "applyEq" (formula "18") (term "1") (ifseqformula "17"))
            (rule "applyEq" (formula "13") (term "1") (ifseqformula "12"))
            (rule "applyEq" (formula "23") (term "0") (ifseqformula "12"))
            (rule "applyEq" (formula "18") (term "1") (ifseqformula "2"))
            (rule "applyEq" (formula "17") (term "1") (ifseqformula "2"))
            (rule "applyEq" (formula "1") (term "0,0,0") (ifseqformula "12"))
            (rule "applyEq" (formula "14") (term "1,0,0") (ifseqformula "12"))
            (rule "applyEq" (formula "15") (term "1,0,0,0") (ifseqformula "12"))
            (rule "applyEq" (formula "15") (term "0,0,2,0,1") (ifseqformula "12"))
            (rule "apply_eq_monomials" (formula "19") (term "1,0,0,0") (ifseqformula "17"))
            (rule "polySimp_rightDist" (formula "19") (term "0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "19") (term "1,0,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "19") (term "1,0,1,0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "19") (term "1,0,0,0"))
            (rule "add_literals" (formula "19") (term "1,1,1,0,0,0"))
            (rule "times_zero_1" (formula "19") (term "1,1,0,0,0"))
            (rule "add_zero_right" (formula "19") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0"))
            (rule "applyEq" (formula "18") (term "1,0,0") (ifseqformula "17"))
            (rule "applyEq" (formula "18") (term "1,0,0,2,1,0,1") (ifseqformula "17"))
            (rule "applyEq" (formula "19") (term "1,0,0,0") (ifseqformula "17"))
            (rule "applyEq" (formula "19") (term "0,0,2,0,1") (ifseqformula "17"))
            (rule "inEqSimp_sepNegMonomial0" (formula "7"))
            (rule "polySimp_mulLiterals" (formula "7") (term "0"))
            (rule "polySimp_elimOne" (formula "7") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1"))
            (rule "polySimp_elimOne" (formula "1") (term "1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "14"))
            (rule "polySimp_mulLiterals" (formula "14") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0"))
            (rule "polySimp_mulLiterals" (formula "15") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
            (rule "polySimp_rightDist" (formula "18") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0"))
            (rule "mul_literals" (formula "18") (term "0,1,0"))
            (rule "polySimp_elimOne" (formula "18") (term "1,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,1"))
            (rule "polySimp_rightDist" (formula "18") (term "1,1"))
            (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1"))
            (rule "mul_literals" (formula "18") (term "0,1,1"))
            (rule "polySimp_elimOne" (formula "18") (term "1,1,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0"))
            (rule "polySimp_mulLiterals" (formula "19") (term "0,0"))
            (rule "inEqSimp_contradInEq1" (formula "18") (term "0") (ifseqformula "1"))
            (rule "inEqSimp_homoInEq1" (formula "18") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0"))
            (rule "mul_literals" (formula "18") (term "0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "18") (term "0,0,0"))
            (rule "polySimp_addComm0" (formula "18") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,0"))
            (rule "add_literals" (formula "18") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "18") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "18") (term "0,0,0"))
            (rule "leq_literals" (formula "18") (term "0,0"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "true_left" (formula "18"))
            (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "13"))
            (rule "applyEq" (formula "19") (term "0,0,0") (ifseqformula "1"))
            (rule "inEqSimp_homoInEq1" (formula "19") (term "0"))
            (rule "polySimp_mulLiterals" (formula "19") (term "1,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0"))
            (rule "add_literals" (formula "19") (term "1,1,0,0"))
            (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "1"))
            (rule "inEqSimp_homoInEq1" (formula "15"))
            (rule "polySimp_mulLiterals" (formula "15") (term "1,0"))
            (rule "polySimp_pullOutFactor1b" (formula "15") (term "0"))
            (rule "add_literals" (formula "15") (term "1,1,0"))
            (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
            (rule "inEqSimp_homoInEq1" (formula "2"))
            (rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
            (rule "add_literals" (formula "2") (term "1,0"))
            (rule "times_zero_1" (formula "2") (term "0"))
            (rule "leq_literals" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "applyEq" (formula "15") (term "0,1,0,2,0,1") (ifseqformula "1"))
            (rule "polySimp_pullOutFactor1" (formula "15") (term "0,2,0,1"))
            (rule "add_literals" (formula "15") (term "1,0,2,0,1"))
            (rule "times_zero_1" (formula "15") (term "0,2,0,1"))
            (rule "inEqSimp_homoInEq1" (formula "15") (term "1"))
            (rule "polySimp_pullOutFactor1" (formula "15") (term "0,1"))
            (rule "add_literals" (formula "15") (term "1,0,1"))
            (rule "times_zero_1" (formula "15") (term "0,1"))
            (rule "leq_literals" (formula "15") (term "1"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "true_left" (formula "15"))
            (rule "applyEq" (formula "11") (term "1") (ifseqformula "1"))
            (rule "applyEq" (formula "13") (term "0") (ifseqformula "1"))
            (rule "inEqSimp_homoInEq0" (formula "13"))
            (rule "polySimp_pullOutFactor1" (formula "13") (term "0"))
            (rule "add_literals" (formula "13") (term "1,0"))
            (rule "times_zero_1" (formula "13") (term "0"))
            (rule "qeq_literals" (formula "13"))
            (rule "true_left" (formula "13"))
            (rule "applyEq" (formula "16") (term "0,1,0,2,0,1") (ifseqformula "1"))
            (rule "polySimp_pullOutFactor1" (formula "16") (term "0,2,0,1"))
            (rule "add_literals" (formula "16") (term "1,0,2,0,1"))
            (rule "times_zero_1" (formula "16") (term "0,2,0,1"))
            (rule "inEqSimp_commuteGeq" (formula "16") (term "1"))
            (rule "applyEq" (formula "10") (term "0") (ifseqformula "1"))
            (rule "applyEq" (formula "9") (term "1") (ifseqformula "1"))
            (rule "translateJavaSubInt" (formula "8") (term "3,0"))
            (rule "polySimp_elimSub" (formula "8") (term "3,0"))
            (rule "mul_literals" (formula "8") (term "1,3,0"))
            (rule "polySimp_addComm0" (formula "8") (term "3,0"))
            (rule "applyEq" (formula "8") (term "1,3,0") (ifseqformula "1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0"))
            (rule "polySimp_mulLiterals" (formula "16") (term "0,0"))
            (rule "polySimp_elimOne" (formula "16") (term "0,0"))
            (rule "replace_known_left" (formula "16") (term "0") (ifseqformula "10"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "inEqSimp_sepNegMonomial0" (formula "13"))
            (rule "polySimp_mulLiterals" (formula "13") (term "0"))
            (rule "polySimp_elimOne" (formula "13") (term "0"))
            (rule "inEqSimp_contradEq7" (formula "18") (ifseqformula "13"))
            (rule "times_zero_1" (formula "18") (term "1,0,0"))
            (rule "add_zero_right" (formula "18") (term "0,0"))
            (rule "leq_literals" (formula "18") (term "0"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "false_right" (formula "18"))
            (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "16"))
            (rule "andLeft" (formula "7"))
            (rule "inEqSimp_homoInEq1" (formula "7"))
            (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
            (rule "add_literals" (formula "7") (term "1,1,0"))
            (rule "times_zero_1" (formula "7") (term "1,0"))
            (rule "add_zero_right" (formula "7") (term "0"))
            (rule "leq_literals" (formula "7"))
            (rule "closeFalse" (formula "7"))
         )
         (branch "Case 2"
            (rule "Partial_inv_axiom_for_JML_class_invariant_nr_61_in_Tree" (formula "7") (userinteraction))
            (rule "impLeft" (formula "14") (userinteraction))
            (branch "Case 1"
               (rule "replaceKnownQuery_0" (formula "9") (term "1"))
               (rule "replaceKnownQuery0_2" (formula "15") (term "1"))
               (rule "replaceKnownQuery_0" (formula "1") (term "0"))
               (rule "replaceKnownQuery0_2" (formula "1") (term "1"))
               (rule "translateJavaSubInt" (formula "21") (term "0"))
               (rule "translateJavaSubInt" (formula "18") (term "0,2,0,1"))
               (rule "translateJavaSubInt" (formula "7") (term "3,0"))
               (rule "translateJavaMulInt" (formula "11") (term "1"))
               (rule "translateJavaSubInt" (formula "21") (term "1"))
               (rule "translateJavaSubInt" (formula "13") (term "0,2,0"))
               (rule "translateJavaSubInt" (formula "19") (term "0,0"))
               (rule "translateJavaSubInt" (formula "19") (term "1,0"))
               (rule "translateJavaSubInt" (formula "19") (term "0,2,1,1"))
               (rule "translateJavaSubInt" (formula "18") (term "1,0"))
               (rule "translateJavaMulInt" (formula "17") (term "1"))
               (rule "translateJavaSubInt" (formula "18") (term "0,0,2,0,1"))
               (rule "translateJavaSubInt" (formula "13") (term "0,0,2,0"))
               (rule "notLeft" (formula "12"))
               (rule "eqSymm" (formula "1"))
               (rule "polySimp_elimSub" (formula "21") (term "0"))
               (rule "polySimp_elimSub" (formula "7") (term "3,0"))
               (rule "mul_literals" (formula "7") (term "1,3,0"))
               (rule "polySimp_elimSub" (formula "21") (term "1"))
               (rule "mul_literals" (formula "21") (term "1,1"))
               (rule "polySimp_elimSub" (formula "18") (term "0,0"))
               (rule "polySimp_elimSub" (formula "18") (term "1,0"))
               (rule "mul_literals" (formula "18") (term "1,1,0"))
               (rule "polySimp_elimSub" (formula "18") (term "0,2,1,1"))
               (rule "polySimp_elimSub" (formula "17") (term "1,0"))
               (rule "polySimp_elimSub" (formula "17") (term "0,0,2,0,1"))
               (rule "polySimp_elimSub" (formula "12") (term "0,2,0"))
               (rule "mul_literals" (formula "12") (term "1,0,2,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1"))
               (rule "polySimp_elimSub" (formula "17") (term "0,2,0,1"))
               (rule "mul_literals" (formula "17") (term "1,0,2,0,1"))
               (rule "polySimp_elimSub" (formula "12") (term "0,0,2,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "1"))
               (rule "polySimp_addComm0" (formula "7") (term "3,0"))
               (rule "polySimp_addComm0" (formula "21") (term "1"))
               (rule "polySimp_addComm0" (formula "18") (term "1,0"))
               (rule "polySimp_addComm1" (formula "17") (term "0,2,0,1"))
               (rule "polySimp_addComm1" (formula "12") (term "0,2,0"))
               (rule "polySimp_addComm0" (formula "17") (term "0,0,2,0,1"))
               (rule "polySimp_addComm0" (formula "12") (term "0,0,2,0"))
               (rule "inEqSimp_ltToLeq" (formula "6"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "6") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "17") (term "0"))
               (rule "add_zero_right" (formula "17") (term "0,0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "17") (term "0,0"))
               (rule "inEqSimp_ltRight" (formula "21"))
               (rule "polySimp_rightDist" (formula "1") (term "0,0"))
               (rule "mul_literals" (formula "1") (term "0,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0"))
               (rule "polySimp_addComm1" (formula "1") (term "0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "1,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "12"))
               (rule "polySimp_mulAssoc" (formula "12") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "12") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "17"))
               (rule "polySimp_mulAssoc" (formula "17") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "17") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "19") (term "0"))
               (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0"))
               (rule "mul_literals" (formula "19") (term "0,1,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "18") (term "1"))
               (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "13"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
               (rule "polySimp_addAssoc" (formula "19") (term "0,0,0"))
               (rule "add_literals" (formula "19") (term "0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "19") (term "0,0"))
               (rule "polySimp_addComm1" (formula "19") (term "0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "19") (term "0,0"))
               (rule "add_literals" (formula "19") (term "1,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "19") (term "1"))
               (rule "applyEq" (formula "11") (term "1") (ifseqformula "10"))
               (rule "applyEq" (formula "16") (term "1") (ifseqformula "15"))
               (rule "applyEq" (formula "21") (term "0") (ifseqformula "10"))
               (rule "applyEqRigid" (formula "16") (term "1") (ifseqformula "2"))
               (rule "applyEq" (formula "16") (term "1,0,0") (ifseqformula "15"))
               (rule "applyEq" (formula "1") (term "1,0,0") (ifseqformula "10"))
               (rule "applyEq" (formula "17") (term "0,1,0,0,0") (ifseqformula "15"))
               (rule "applyEq" (formula "13") (term "1,0,0,2,1,0") (ifseqformula "10"))
               (rule "applyEqRigid" (formula "15") (term "1") (ifseqformula "2"))
               (rule "applyEq" (formula "12") (term "1,0,0") (ifseqformula "10"))
               (rule "applyEq" (formula "16") (term "1,0,0") (ifseqformula "2"))
               (rule "applyEq" (formula "16") (term "1,0,0,2,1,0,1") (ifseqformula "15"))
               (rule "applyEq" (formula "16") (term "0,1,0,0,0") (ifseqformula "2"))
               (rule "applyEq" (formula "17") (term "0,0,2,0,1") (ifseqformula "15"))
               (rule "applyEq" (formula "17") (term "1,0,0,0") (ifseqformula "15"))
               (rule "inEqSimp_sepNegMonomial0" (formula "7"))
               (rule "polySimp_mulLiterals" (formula "7") (term "0"))
               (rule "polySimp_elimOne" (formula "7") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "13"))
               (rule "polySimp_mulComm0" (formula "13") (term "1"))
               (rule "polySimp_rightDist" (formula "13") (term "1"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,1"))
               (rule "mul_literals" (formula "13") (term "0,1"))
               (rule "polySimp_elimOne" (formula "13") (term "1,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "12"))
               (rule "polySimp_mulLiterals" (formula "12") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,1"))
               (rule "polySimp_rightDist" (formula "16") (term "1,1"))
               (rule "mul_literals" (formula "16") (term "0,1,1"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1"))
               (rule "polySimp_elimOne" (formula "16") (term "1,1,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
               (rule "polySimp_rightDist" (formula "16") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0"))
               (rule "mul_literals" (formula "16") (term "0,1,0"))
               (rule "polySimp_elimOne" (formula "16") (term "1,1,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "0,0"))
               (rule "inEqSimp_contradInEq0" (formula "17") (term "0") (ifseqformula "1"))
               (rule "inEqSimp_homoInEq1" (formula "17") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0"))
               (rule "mul_literals" (formula "17") (term "0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "17") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "17") (term "0,0,0,0"))
               (rule "add_literals" (formula "17") (term "0,0,0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,0"))
               (rule "add_literals" (formula "17") (term "1,1,0,0,0"))
               (rule "times_zero_1" (formula "17") (term "1,0,0,0"))
               (rule "add_zero_right" (formula "17") (term "0,0,0"))
               (rule "leq_literals" (formula "17") (term "0,0"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "true_left" (formula "17"))
               (rule "inEqSimp_antiSymm" (formula "12") (ifseqformula "1"))
               (rule "applyEq" (formula "13") (term "0") (ifseqformula "12"))
               (rule "inEqSimp_homoInEq1" (formula "13"))
               (rule "polySimp_pullOutFactor1" (formula "13") (term "0"))
               (rule "add_literals" (formula "13") (term "1,0"))
               (rule "times_zero_1" (formula "13") (term "0"))
               (rule "leq_literals" (formula "13"))
               (rule "true_left" (formula "13"))
               (rule "applyEq" (formula "1") (term "0") (ifseqformula "12"))
               (rule "inEqSimp_homoInEq0" (formula "1"))
               (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "1,0"))
               (rule "times_zero_1" (formula "1") (term "0"))
               (rule "qeq_literals" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "newSym_eq" (formula "11") (inst "newSymDef=add(Z(0(#)), mul(res_classify, Z(0(#))))") (inst "l=l_0"))
               (rule "add_zero_left" (formula "11") (term "1,1"))
               (rule "times_zero_1" (formula "11") (term "1,1"))
               (rule "add_zero_right" (formula "11") (term "1"))
               (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "11"))
               (rule "polySimp_homoEq" (formula "12"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,0"))
               (rule "polySimp_addComm1" (formula "12") (term "0"))
               (rule "applyEq" (formula "10") (term "0") (ifseqformula "11"))
               (rule "inEqSimp_commuteLeq" (formula "10"))
               (rule "applyEq" (formula "16") (term "0,1,0,2,0,1") (ifseqformula "11"))
               (rule "polySimp_addComm1" (formula "16") (term "0,2,0,1"))
               (rule "applyEq" (formula "13") (term "0,1,0,2,0") (ifseqformula "11"))
               (rule "polySimp_addComm1" (formula "13") (term "0,2,0"))
               (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "11"))
               (rule "inEqSimp_homoInEq0" (formula "16") (term "0"))
               (rule "polySimp_addComm1" (formula "16") (term "0,0"))
               (rule "applyEq" (formula "7") (term "1,3,0") (ifseqformula "11"))
               (rule "polySimp_sepPosMonomial" (formula "12"))
               (rule "polySimp_mulComm0" (formula "12") (term "1"))
               (rule "polySimp_rightDist" (formula "12") (term "1"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
               (rule "mul_literals" (formula "12") (term "0,1"))
               (rule "applyEqRigid" (formula "13") (term "1,0,2,0") (ifseqformula "12"))
               (rule "polySimp_addAssoc" (formula "13") (term "0,2,0"))
               (rule "polySimp_addComm1" (formula "13") (term "0,0,2,0"))
               (rule "add_literals" (formula "13") (term "0,0,0,2,0"))
               (rule "polySimp_pullOutFactor0b" (formula "13") (term "0,2,0"))
               (rule "add_literals" (formula "13") (term "1,1,0,2,0"))
               (rule "polySimp_elimOne" (formula "13") (term "1,0,2,0"))
               (rule "applyEqRigid" (formula "16") (term "1,0,2,0,1") (ifseqformula "12"))
               (rule "polySimp_addAssoc" (formula "16") (term "0,2,0,1"))
               (rule "polySimp_addComm1" (formula "16") (term "0,0,2,0,1"))
               (rule "add_literals" (formula "16") (term "0,0,0,2,0,1"))
               (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,2,0,1"))
               (rule "add_literals" (formula "16") (term "1,1,0,2,0,1"))
               (rule "polySimp_elimOne" (formula "16") (term "1,0,2,0,1"))
               (rule "applyEqRigid" (formula "10") (term "0") (ifseqformula "12"))
               (rule "inEqSimp_homoInEq1" (formula "10"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0"))
               (rule "mul_literals" (formula "10") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "10") (term "0"))
               (rule "polySimp_addComm0" (formula "10") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
               (rule "add_literals" (formula "10") (term "1,1,0"))
               (rule "applyEq" (formula "16") (term "1,0,0") (ifseqformula "12"))
               (rule "polySimp_addAssoc" (formula "16") (term "0,0"))
               (rule "polySimp_addComm1" (formula "16") (term "0,0,0"))
               (rule "add_literals" (formula "16") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,0"))
               (rule "add_literals" (formula "16") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "16") (term "1,0,0"))
               (rule "applyEqRigid" (formula "18") (term "0") (ifseqformula "12"))
               (rule "applyEqRigid" (formula "9") (term "1") (ifseqformula "12"))
               (rule "applyEq" (formula "1") (term "1") (ifseqformula "12"))
               (rule "applyEqRigid" (formula "15") (term "1") (ifseqformula "12"))
               (rule "polySimp_sepPosMonomial" (formula "18"))
               (rule "mul_literals" (formula "18") (term "1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "10"))
               (rule "polySimp_mulLiterals" (formula "10") (term "0"))
               (rule "polySimp_elimOne" (formula "10") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0"))
               (rule "mul_literals" (formula "16") (term "1,0"))
               (rule "elimGcdEq" (formula "18") (inst "elimGcd=Z(2(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcdRightDiv=Z(0(#))"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "times_zero_1" (formula "18") (term "1,0,0,1"))
               (rule "times_zero_1" (formula "18") (term "1,0,1,0"))
               (rule "mul_literals" (formula "18") (term "0,1,0,0,0"))
               (rule "add_literals" (formula "18") (term "1,0,0"))
               (rule "add_zero_right" (formula "18") (term "0,0,1"))
               (rule "add_zero_right" (formula "18") (term "0,1,0"))
               (rule "times_zero_1" (formula "18") (term "1,0,0,0"))
               (rule "equal_literals" (formula "18") (term "0,1"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "add_zero_right" (formula "18") (term "0,0,0"))
               (rule "qeq_literals" (formula "18") (term "1,0"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "leq_literals" (formula "18") (term "0"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "false_right" (formula "18"))
               (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "8"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "translateJavaSubInt" (formula "8") (term "3,0,1"))
               (rule "andLeft" (formula "8"))
               (rule "andLeft" (formula "8"))
               (rule "andLeft" (formula "8"))
               (rule "andLeft" (formula "8"))
               (rule "andLeft" (formula "10"))
               (rule "andLeft" (formula "8"))
               (rule "andLeft" (formula "8"))
               (rule "andLeft" (formula "10"))
               (rule "notLeft" (formula "9"))
               (rule "notLeft" (formula "8"))
               (rule "polySimp_elimSub" (formula "14") (term "3,0"))
               (rule "mul_literals" (formula "14") (term "1,3,0"))
               (rule "polySimp_addComm0" (formula "14") (term "3,0"))
               (rule "inEqSimp_commuteLeq" (formula "13"))
               (rule "inEqSimp_commuteLeq" (formula "11"))
               (rule "inEqSimp_commuteLeq" (formula "12"))
               (rule "inEqSimp_commuteLeq" (formula "8"))
               (rule "applyEq" (formula "12") (term "1") (ifseqformula "17"))
               (rule "applyEq" (formula "14") (term "1,3,0") (ifseqformula "10"))
               (rule "applyEq" (formula "13") (term "1") (ifseqformula "10"))
               (rule "applyEq" (formula "10") (term "0") (ifseqformula "17"))
               (rule "eqSymm" (formula "10"))
               (rule "applyEq" (formula "11") (term "0") (ifseqformula "17"))
               (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "11"))
                (builtin "One Step Simplification" (formula "22"))
               (rule "applyEq" (formula "13") (term "1") (ifseqformula "10"))
               (rule "applyEq" (formula "14") (term "1,3,0") (ifseqformula "10"))
               (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "11"))
               (rule "leq_literals" (formula "15") (term "0"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "true_left" (formula "15"))
               (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "7") (term "0"))
               (rule "replace_known_left" (formula "7") (term "0,1") (ifseqformula "8"))
                (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "23")) (ifInst ""  (formula "2")))
               (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "8") (term "0") (inst "i=i") (inst "j=j"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0,1,0"))
               (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0,1,0"))
               (rule "add_literals" (formula "8") (term "0,0,0,1,0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "8") (term "1,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0,1,0"))
               (rule "mul_literals" (formula "8") (term "0,1,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
               (rule "nnf_imp2or" (formula "8") (term "0"))
               (rule "nnf_notAnd" (formula "8") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
               (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
               (rule "mul_literals" (formula "8") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
               (rule "nnf_imp2or" (formula "8") (term "0,1,0"))
               (rule "nnf_notAnd" (formula "8") (term "0,0,1,0"))
               (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0,1,0"))
               (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0,1,0"))
               (rule "add_literals" (formula "8") (term "0,0,0,1,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0,1,0"))
               (rule "mul_literals" (formula "8") (term "0,1,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0,1,0"))
               (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0,1,0"))
               (rule "mul_literals" (formula "8") (term "0,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0,1,0"))
               (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "7") (term "0") (inst "i=i"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "translateJavaSubInt" (formula "7") (term "1,1,0,0"))
               (rule "translateJavaAddInt" (formula "7") (term "0,2,1,1,0"))
               (rule "polySimp_elimSub" (formula "7") (term "1,1,0,0"))
               (rule "mul_literals" (formula "7") (term "1,1,1,0,0"))
               (rule "polySimp_addComm0" (formula "7") (term "0,2,1,1,0"))
               (rule "polySimp_addComm1" (formula "7") (term "1,1,0,0"))
               (rule "add_literals" (formula "7") (term "0,1,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "7") (term "1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
               (rule "nnf_imp2or" (formula "7") (term "0"))
               (rule "nnf_notAnd" (formula "7") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
               (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
               (rule "mul_literals" (formula "7") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
               (rule "commute_or" (formula "8") (term "0,0,1,0"))
               (rule "all_pull_out3" (formula "8") (term "0"))
               (rule "shift_paren_or" (formula "8") (term "0,0"))
               (rule "shift_paren_or" (formula "8") (term "0,0,0"))
               (rule "arrayLengthIsAShort" (formula "13") (term "0"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "true_left" (formula "13"))
               (rule "arrayLengthIsAShort" (formula "14") (term "0"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "true_left" (formula "14"))
               (rule "arrayLengthNotNegative" (formula "14") (term "0"))
               (rule "arrayLengthNotNegative" (formula "13") (term "0"))
               (rule "allLeft" (formula "8") (inst "t=Z(0(#))"))
               (rule "leq_literals" (formula "8") (term "0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "add_zero_right" (formula "8") (term "1,1,0,0"))
               (rule "inEqSimp_homoInEq1" (formula "8") (term "0,0,0,0"))
               (rule "times_zero_2" (formula "8") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,0"))
               (rule "mul_literals" (formula "8") (term "1,0,0,0,0"))
               (rule "inEqSimp_contradInEq1" (formula "8") (term "0,0,0,0") (ifseqformula "13"))
               (rule "qeq_literals" (formula "8") (term "0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "commute_or" (formula "8") (term "0,0"))
               (rule "allLeft" (formula "8") (inst "t=add(Z(neglit(2(#))), l_0)"))
               (rule "inEqSimp_homoInEq1" (formula "8") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,0,1,0"))
               (rule "polySimp_rightDist" (formula "8") (term "1,0,1,0"))
               (rule "mul_literals" (formula "8") (term "0,1,0,1,0"))
               (rule "polySimp_addAssoc" (formula "8") (term "0,1,0"))
               (rule "polySimp_addComm1" (formula "8") (term "0,0,1,0"))
               (rule "add_literals" (formula "8") (term "0,0,0,1,0"))
               (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,1,0"))
               (rule "add_literals" (formula "8") (term "1,1,0,1,0"))
               (rule "times_zero_1" (formula "8") (term "1,0,1,0"))
               (rule "add_zero_right" (formula "8") (term "0,1,0"))
               (rule "leq_literals" (formula "8") (term "1,0"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "inEqSimp_homoInEq0" (formula "8") (term "0"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "8") (term "1,0,0"))
               (rule "mul_literals" (formula "8") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
               (rule "add_literals" (formula "8") (term "0,0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "8") (term "0"))
               (rule "polySimp_mulLiterals" (formula "8") (term "0,0"))
               (rule "polySimp_elimOne" (formula "8") (term "0,0"))
               (rule "inEqSimp_contradInEq1" (formula "8") (term "0") (ifseqformula "14"))
               (rule "qeq_literals" (formula "8") (term "0,0"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "inEqSimp_contradInEq1" (formula "22") (ifseqformula "8"))
               (rule "andLeft" (formula "22"))
               (rule "inEqSimp_homoInEq1" (formula "22"))
               (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
               (rule "polySimp_rightDist" (formula "22") (term "1,0"))
               (rule "mul_literals" (formula "22") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "22") (term "0"))
               (rule "polySimp_addComm0" (formula "22") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "22") (term "0"))
               (rule "add_literals" (formula "22") (term "1,1,0"))
               (rule "times_zero_1" (formula "22") (term "1,0"))
               (rule "add_zero_right" (formula "22") (term "0"))
               (rule "leq_literals" (formula "22"))
               (rule "closeFalse" (formula "22"))
            )
            (branch "Case 2"
               (rule "impLeft" (formula "20") (userinteraction))
               (branch "Case 1"
                  (rule "replaceKnownQuery_0" (formula "9") (term "1"))
                  (rule "replaceKnownQuery0_2" (formula "16") (term "1"))
                  (rule "replaceKnownQuery_0" (formula "1") (term "0"))
                  (rule "replaceKnownQuery0_2" (formula "1") (term "1"))
                  (rule "translateJavaSubInt" (formula "7") (term "3,0"))
                  (rule "translateJavaMulInt" (formula "11") (term "1"))
                  (rule "translateJavaSubInt" (formula "14") (term "0,2,1"))
                  (rule "translateJavaSubInt" (formula "21") (term "0"))
                  (rule "translateJavaSubInt" (formula "21") (term "1"))
                  (rule "translateJavaSubInt" (formula "13") (term "0,2,0"))
                  (rule "translateJavaMulInt" (formula "18") (term "1"))
                  (rule "translateJavaSubInt" (formula "19") (term "1,0"))
                  (rule "translateJavaSubInt" (formula "19") (term "0,2,0,1"))
                  (rule "translateJavaSubInt" (formula "13") (term "0,0,2,0"))
                  (rule "translateJavaSubInt" (formula "19") (term "0,0,2,0,1"))
                  (rule "notLeft" (formula "12"))
                  (rule "eqSymm" (formula "1"))
                  (rule "polySimp_elimSub" (formula "7") (term "3,0"))
                  (rule "mul_literals" (formula "7") (term "1,3,0"))
                  (rule "polySimp_elimSub" (formula "13") (term "0,2,1"))
                  (rule "polySimp_elimSub" (formula "21") (term "0"))
                  (rule "polySimp_elimSub" (formula "21") (term "1"))
                  (rule "mul_literals" (formula "21") (term "1,1"))
                  (rule "polySimp_elimSub" (formula "18") (term "1,0"))
                  (rule "polySimp_elimSub" (formula "12") (term "0,2,0"))
                  (rule "mul_literals" (formula "12") (term "1,0,2,0"))
                  (rule "polySimp_elimSub" (formula "18") (term "0,0,2,0,1"))
                  (rule "polySimp_elimSub" (formula "12") (term "0,0,2,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1"))
                  (rule "polySimp_elimSub" (formula "18") (term "0,2,0,1"))
                  (rule "mul_literals" (formula "18") (term "1,0,2,0,1"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1"))
                  (rule "polySimp_addComm0" (formula "7") (term "3,0"))
                  (rule "polySimp_addComm0" (formula "21") (term "1"))
                  (rule "polySimp_addComm1" (formula "12") (term "0,2,0"))
                  (rule "polySimp_addComm1" (formula "18") (term "0,2,0,1"))
                  (rule "polySimp_addComm0" (formula "12") (term "0,0,2,0"))
                  (rule "polySimp_addComm0" (formula "18") (term "0,0,2,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "6"))
                  (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "6") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "18") (term "0"))
                  (rule "add_zero_right" (formula "18") (term "0,0"))
                  (rule "polySimp_rightDist" (formula "18") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "18") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "18") (term "0,0"))
                  (rule "inEqSimp_ltRight" (formula "21"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                  (rule "mul_literals" (formula "1") (term "0,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "1,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "12"))
                  (rule "polySimp_mulAssoc" (formula "12") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "12") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "18"))
                  (rule "polySimp_mulAssoc" (formula "18") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "18") (term "0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "18") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "13"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "19") (term "1"))
                  (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "14"))
                  (rule "applyEq" (formula "11") (term "1") (ifseqformula "10"))
                  (rule "applyEq" (formula "21") (term "0") (ifseqformula "10"))
                  (rule "applyEq" (formula "17") (term "1") (ifseqformula "16"))
                  (rule "applyEqRigid" (formula "17") (term "1") (ifseqformula "2"))
                  (rule "applyEq" (formula "13") (term "1,0,0,2,1,0") (ifseqformula "10"))
                  (rule "applyEq" (formula "18") (term "0,1,0,0,0") (ifseqformula "16"))
                  (rule "applyEq" (formula "1") (term "1,0,0") (ifseqformula "16"))
                  (rule "applyEq" (formula "12") (term "1,0,0") (ifseqformula "10"))
                  (rule "applyEqRigid" (formula "16") (term "1") (ifseqformula "2"))
                  (rule "applyEq" (formula "14") (term "0,0,2,0") (ifseqformula "10"))
                  (rule "applyEq" (formula "18") (term "1,0,0,2,1,0,1") (ifseqformula "16"))
                  (rule "applyEq" (formula "17") (term "1,0,0") (ifseqformula "16"))
                  (rule "applyEq" (formula "17") (term "0,1,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "1,0,0") (ifseqformula "2"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                  (rule "polySimp_elimOne" (formula "7") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "13"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1"))
                  (rule "polySimp_rightDist" (formula "13") (term "1"))
                  (rule "mul_literals" (formula "13") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "13") (term "1,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "12"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "17") (term "1,1"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1"))
                  (rule "mul_literals" (formula "17") (term "0,1,1"))
                  (rule "polySimp_elimOne" (formula "17") (term "1,1,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "17") (term "1,0"))
                  (rule "mul_literals" (formula "17") (term "0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0"))
                  (rule "polySimp_elimOne" (formula "17") (term "1,1,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "inEqSimp_antiSymm" (formula "12") (ifseqformula "1"))
                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "12"))
                  (rule "inEqSimp_homoInEq0" (formula "1"))
                  (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "1,0"))
                  (rule "times_zero_1" (formula "1") (term "0"))
                  (rule "qeq_literals" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "applyEq" (formula "12") (term "0") (ifseqformula "11"))
                  (rule "inEqSimp_homoInEq1" (formula "12"))
                  (rule "polySimp_pullOutFactor1" (formula "12") (term "0"))
                  (rule "add_literals" (formula "12") (term "1,0"))
                  (rule "times_zero_1" (formula "12") (term "0"))
                  (rule "leq_literals" (formula "12"))
                  (rule "true_left" (formula "12"))
                  (rule "newSym_eq" (formula "11") (inst "newSymDef=add(Z(0(#)), mul(res_classify, Z(0(#))))") (inst "l=l_0"))
                  (rule "times_zero_1" (formula "11") (term "1,1,1"))
                  (rule "add_zero_left" (formula "11") (term "1,1"))
                  (rule "add_zero_right" (formula "11") (term "1"))
                  (rule "applyEq" (formula "17") (term "0,1,0,2,0,1") (ifseqformula "11"))
                  (rule "polySimp_addComm1" (formula "17") (term "0,2,0,1"))
                  (rule "applyEq" (formula "10") (term "0") (ifseqformula "11"))
                  (rule "inEqSimp_commuteLeq" (formula "10"))
                  (rule "applyEq" (formula "7") (term "1,3,0") (ifseqformula "11"))
                  (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "11"))
                  (rule "inEqSimp_homoInEq0" (formula "17") (term "0"))
                  (rule "polySimp_addComm1" (formula "17") (term "0,0"))
                  (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "11"))
                  (rule "polySimp_homoEq" (formula "12"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "12") (term "0"))
                  (rule "applyEq" (formula "14") (term "0,1,0,2,0") (ifseqformula "11"))
                  (rule "polySimp_addComm0" (formula "14") (term "0,2,0"))
                  (rule "applyEq" (formula "13") (term "0,1,0,2,0") (ifseqformula "11"))
                  (rule "polySimp_addComm1" (formula "13") (term "0,2,0"))
                  (rule "polySimp_sepPosMonomial" (formula "12"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1"))
                  (rule "polySimp_rightDist" (formula "12") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
                  (rule "mul_literals" (formula "12") (term "0,1"))
                  (rule "applyEqRigid" (formula "13") (term "1,0,2,0") (ifseqformula "12"))
                  (rule "polySimp_addAssoc" (formula "13") (term "0,2,0"))
                  (rule "polySimp_addComm1" (formula "13") (term "0,0,2,0"))
                  (rule "add_literals" (formula "13") (term "0,0,0,2,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "13") (term "0,2,0"))
                  (rule "add_literals" (formula "13") (term "1,1,0,2,0"))
                  (rule "polySimp_elimOne" (formula "13") (term "1,0,2,0"))
                  (rule "applyEq" (formula "17") (term "1,0,2,0,1") (ifseqformula "12"))
                  (rule "polySimp_addAssoc" (formula "17") (term "0,2,0,1"))
                  (rule "polySimp_addComm1" (formula "17") (term "0,0,2,0,1"))
                  (rule "add_literals" (formula "17") (term "0,0,0,2,0,1"))
                  (rule "polySimp_pullOutFactor0b" (formula "17") (term "0,2,0,1"))
                  (rule "add_literals" (formula "17") (term "1,1,0,2,0,1"))
                  (rule "polySimp_elimOne" (formula "17") (term "1,0,2,0,1"))
                  (rule "applyEq" (formula "14") (term "1,0,2,0") (ifseqformula "12"))
                  (rule "polySimp_addAssoc" (formula "14") (term "0,2,0"))
                  (rule "polySimp_addComm0" (formula "14") (term "0,0,2,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,2,0"))
                  (rule "add_literals" (formula "14") (term "1,1,0,2,0"))
                  (rule "polySimp_elimOne" (formula "14") (term "1,0,2,0"))
                  (rule "applyEq" (formula "17") (term "1,0,0") (ifseqformula "12"))
                  (rule "polySimp_addAssoc" (formula "17") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "17") (term "0,0,0"))
                  (rule "add_literals" (formula "17") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "17") (term "0,0"))
                  (rule "add_literals" (formula "17") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "17") (term "1,0,0"))
                  (rule "applyEq" (formula "10") (term "0") (ifseqformula "12"))
                  (rule "inEqSimp_homoInEq1" (formula "10"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "10") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0"))
                  (rule "mul_literals" (formula "10") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "10") (term "0"))
                  (rule "polySimp_addComm0" (formula "10") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                  (rule "add_literals" (formula "10") (term "1,1,0"))
                  (rule "applyEqRigid" (formula "19") (term "0") (ifseqformula "12"))
                  (rule "applyEqRigid" (formula "16") (term "1") (ifseqformula "12"))
                  (rule "applyEqRigid" (formula "1") (term "1") (ifseqformula "12"))
                  (rule "applyEqRigid" (formula "9") (term "1") (ifseqformula "12"))
                  (rule "polySimp_sepPosMonomial" (formula "19"))
                  (rule "mul_literals" (formula "19") (term "1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "0"))
                  (rule "mul_literals" (formula "17") (term "1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "10"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                  (rule "polySimp_elimOne" (formula "10") (term "0"))
                  (rule "elimGcdEq" (formula "19") (inst "elimGcd=Z(2(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcdRightDiv=Z(0(#))"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "times_zero_1" (formula "19") (term "1,0,0,0"))
                  (rule "add_literals" (formula "19") (term "1,0,0"))
                  (rule "times_zero_1" (formula "19") (term "1,0,1,0"))
                  (rule "times_zero_1" (formula "19") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "19") (term "0,0,0"))
                  (rule "add_zero_right" (formula "19") (term "0,1,0"))
                  (rule "add_zero_right" (formula "19") (term "0,0,1"))
                  (rule "leq_literals" (formula "19") (term "0,0"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "equal_literals" (formula "19") (term "0,1"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "qeq_literals" (formula "19") (term "0"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "false_right" (formula "19"))
                  (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "8"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "translateJavaSubInt" (formula "8") (term "3,0,1"))
                  (rule "andLeft" (formula "8"))
                  (rule "andLeft" (formula "8"))
                  (rule "andLeft" (formula "8"))
                  (rule "andLeft" (formula "9"))
                  (rule "andLeft" (formula "8"))
                  (rule "andLeft" (formula "8"))
                  (rule "andLeft" (formula "8"))
                  (rule "andLeft" (formula "10"))
                  (rule "notLeft" (formula "9"))
                  (rule "notLeft" (formula "8"))
                  (rule "polySimp_elimSub" (formula "14") (term "3,0"))
                  (rule "mul_literals" (formula "14") (term "1,3,0"))
                  (rule "polySimp_addComm0" (formula "14") (term "3,0"))
                  (rule "inEqSimp_commuteLeq" (formula "13"))
                  (rule "inEqSimp_commuteLeq" (formula "11"))
                  (rule "inEqSimp_commuteLeq" (formula "12"))
                  (rule "inEqSimp_commuteLeq" (formula "8"))
                  (rule "applyEq" (formula "12") (term "1") (ifseqformula "10"))
                  (rule "applyEq" (formula "13") (term "1") (ifseqformula "17"))
                  (rule "applyEq" (formula "11") (term "0") (ifseqformula "10"))
                  (rule "applyEq" (formula "14") (term "1,3,0") (ifseqformula "17"))
                  (rule "applyEq" (formula "10") (term "0") (ifseqformula "16"))
                  (rule "eqSymm" (formula "10"))
                  (rule "applyEq" (formula "11") (term "0") (ifseqformula "10"))
                  (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "11"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "applyEq" (formula "12") (term "1") (ifseqformula "10"))
                  (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "11"))
                  (rule "leq_literals" (formula "15") (term "0"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "true_left" (formula "15"))
                  (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "7") (term "0") (inst "i=i") (inst "j=j"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0,1,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0,1,0"))
                  (rule "add_literals" (formula "7") (term "0,0,0,1,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "7") (term "1,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
                  (rule "nnf_imp2or" (formula "7") (term "0"))
                  (rule "nnf_notAnd" (formula "7") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
                  (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
                  (rule "mul_literals" (formula "7") (term "1,0,0,0"))
                  (rule "nnf_imp2or" (formula "7") (term "0,1,0"))
                  (rule "nnf_notAnd" (formula "7") (term "0,0,1,0"))
                  (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0,1,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0,1,0"))
                  (rule "add_literals" (formula "7") (term "0,0,0,1,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0,1,0"))
                  (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,0,1,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,0,1,0"))
                  (rule "commute_or" (formula "7") (term "0,0,1,0"))
                  (rule "all_pull_out3" (formula "7") (term "0"))
                  (rule "shift_paren_or" (formula "7") (term "0,0"))
                  (rule "shift_paren_or" (formula "7") (term "0,0,0"))
                  (rule "allLeft" (formula "7") (inst "t=Z(0(#))"))
                  (rule "leq_literals" (formula "7") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "add_zero_right" (formula "7") (term "1,1,0,0"))
                  (rule "inEqSimp_homoInEq1" (formula "7") (term "0,0,0,0"))
                  (rule "times_zero_2" (formula "7") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0,0"))
                  (rule "mul_literals" (formula "7") (term "1,0,0,0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "7") (term "0,0,0,0") (ifseqformula "12"))
                  (rule "qeq_literals" (formula "7") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "commute_or" (formula "7") (term "0,0"))
                  (rule "allLeft" (formula "7") (inst "t=add(Z(neglit(2(#))), l_0)"))
                  (rule "inEqSimp_homoInEq0" (formula "7") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0,0,0"))
                  (rule "add_literals" (formula "7") (term "0,0,0,0"))
                  (rule "inEqSimp_homoInEq1" (formula "7") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0,1,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0,1,0"))
                  (rule "polySimp_addComm1" (formula "7") (term "0,0,1,0"))
                  (rule "add_literals" (formula "7") (term "0,0,0,1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,1,0"))
                  (rule "add_literals" (formula "7") (term "1,1,0,1,0"))
                  (rule "times_zero_1" (formula "7") (term "1,0,1,0"))
                  (rule "add_zero_right" (formula "7") (term "0,1,0"))
                  (rule "leq_literals" (formula "7") (term "1,0"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "7") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "0,0"))
                  (rule "polySimp_elimOne" (formula "7") (term "0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "7") (term "0") (ifseqformula "13"))
                  (rule "qeq_literals" (formula "7") (term "0,0"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "inEqSimp_contradInEq1" (formula "19") (ifseqformula "7"))
                  (rule "andLeft" (formula "19"))
                  (rule "inEqSimp_homoInEq1" (formula "19"))
                  (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "19") (term "1,0"))
                  (rule "mul_literals" (formula "19") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "19") (term "0"))
                  (rule "polySimp_addComm0" (formula "19") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "19") (term "0"))
                  (rule "add_literals" (formula "19") (term "1,1,0"))
                  (rule "times_zero_1" (formula "19") (term "1,0"))
                  (rule "add_zero_right" (formula "19") (term "0"))
                  (rule "leq_literals" (formula "19"))
                  (rule "closeFalse" (formula "19"))
               )
               (branch "Case 2"
                  (rule "replaceKnownQuery_0" (formula "9") (term "1"))
                  (rule "replaceKnownQuery0_2" (formula "16") (term "1"))
                  (rule "replaceKnownQuery_0" (formula "1") (term "0"))
                  (rule "replaceKnownQuery0_2" (formula "1") (term "1"))
                  (rule "translateJavaMulInt" (formula "11") (term "1"))
                  (rule "translateJavaSubInt" (formula "7") (term "3,0"))
                  (rule "translateJavaSubInt" (formula "13") (term "0,2,0"))
                  (rule "translateJavaSubInt" (formula "14") (term "0,2,1"))
                  (rule "translateJavaMulInt" (formula "18") (term "1"))
                  (rule "translateJavaSubInt" (formula "19") (term "1,0"))
                  (rule "translateJavaSubInt" (formula "19") (term "0,2,0,1"))
                  (rule "translateJavaSubInt" (formula "20") (term "0,2,1"))
                  (rule "translateJavaSubInt" (formula "13") (term "0,0,2,0"))
                  (rule "translateJavaSubInt" (formula "19") (term "0,0,2,0,1"))
                  (rule "notLeft" (formula "12"))
                  (rule "eqSymm" (formula "1"))
                  (rule "polySimp_elimSub" (formula "7") (term "3,0"))
                  (rule "mul_literals" (formula "7") (term "1,3,0"))
                  (rule "polySimp_elimSub" (formula "13") (term "0,2,1"))
                  (rule "polySimp_elimSub" (formula "18") (term "1,0"))
                  (rule "polySimp_elimSub" (formula "19") (term "0,2,1"))
                  (rule "polySimp_elimSub" (formula "12") (term "0,2,0"))
                  (rule "mul_literals" (formula "12") (term "1,0,2,0"))
                  (rule "polySimp_elimSub" (formula "18") (term "0,2,0,1"))
                  (rule "mul_literals" (formula "18") (term "1,0,2,0,1"))
                  (rule "polySimp_elimSub" (formula "12") (term "0,0,2,0"))
                  (rule "polySimp_elimSub" (formula "18") (term "0,0,2,0,1"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1"))
                  (rule "polySimp_addComm0" (formula "7") (term "3,0"))
                  (rule "polySimp_addComm1" (formula "12") (term "0,2,0"))
                  (rule "polySimp_addComm1" (formula "18") (term "0,2,0,1"))
                  (rule "polySimp_addComm0" (formula "12") (term "0,0,2,0"))
                  (rule "polySimp_addComm0" (formula "18") (term "0,0,2,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "6"))
                  (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "6") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "18") (term "0"))
                  (rule "add_zero_right" (formula "18") (term "0,0"))
                  (rule "polySimp_rightDist" (formula "18") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "18") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "18") (term "0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "11"))
                  (rule "polySimp_mulAssoc" (formula "11") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "11") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "17"))
                  (rule "polySimp_mulAssoc" (formula "17") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "17") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "12"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "18") (term "1"))
                  (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "13"))
                  (rule "inEqSimp_commuteLeq" (formula "19"))
                  (rule "applyEq" (formula "16") (term "1") (ifseqformula "15"))
                  (rule "applyEq" (formula "21") (term "0") (ifseqformula "9"))
                  (rule "applyEq" (formula "10") (term "1") (ifseqformula "9"))
                  (rule "applyEqRigid" (formula "16") (term "1") (ifseqformula "1"))
                  (rule "applyEq" (formula "15") (term "1") (ifseqformula "1"))
                  (rule "applyEq" (formula "12") (term "1,0,0,2,1,0") (ifseqformula "9"))
                  (rule "applyEq" (formula "11") (term "1,0,0") (ifseqformula "9"))
                  (rule "applyEq" (formula "13") (term "0,0,2,0") (ifseqformula "9"))
                  (rule "applyEq" (formula "17") (term "1,0,0,2,1,0,1") (ifseqformula "15"))
                  (rule "apply_eq_monomials" (formula "17") (term "1,0,0,0") (ifseqformula "15"))
                  (rule "polySimp_rightDist" (formula "17") (term "0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,0,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "17") (term "1,0,1,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "17") (term "1,0,0,0"))
                  (rule "add_literals" (formula "17") (term "1,1,1,0,0,0"))
                  (rule "times_zero_1" (formula "17") (term "1,1,0,0,0"))
                  (rule "add_zero_right" (formula "17") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0"))
                  (rule "applyEq" (formula "18") (term "0,0,2,0") (ifseqformula "15"))
                  (rule "applyEq" (formula "16") (term "1,0,0") (ifseqformula "15"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                  (rule "polySimp_elimOne" (formula "6") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "12"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1"))
                  (rule "polySimp_rightDist" (formula "12") (term "1"))
                  (rule "mul_literals" (formula "12") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "12") (term "1,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "11"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "16") (term "1,1"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1"))
                  (rule "mul_literals" (formula "16") (term "0,1,1"))
                  (rule "polySimp_elimOne" (formula "16") (term "1,1,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                  (rule "mul_literals" (formula "16") (term "0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0"))
                  (rule "polySimp_elimOne" (formula "16") (term "1,1,0"))
                  (rule "inEqSimp_exactShadow1" (formula "11") (ifseqformula "10"))
                  (rule "greater_literals" (formula "11") (term "0"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "11") (term "0,0"))
                  (rule "mul_literals" (formula "11") (term "0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "11") (term "0"))
                  (rule "add_literals" (formula "11") (term "1,1,0"))
                  (rule "polySimp_elimOne" (formula "11") (term "1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "11"))
                  (rule "mul_literals" (formula "11") (term "1"))
                  (rule "inEqSimp_contradEq7" (formula "20") (ifseqformula "11"))
                  (rule "times_zero_1" (formula "20") (term "1,0,0"))
                  (rule "add_zero_right" (formula "20") (term "0,0"))
                  (rule "leq_literals" (formula "20") (term "0"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "false_right" (formula "20"))
                  (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "8"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "translateJavaSubInt" (formula "8") (term "3,0,1"))
                  (rule "andLeft" (formula "8"))
                  (rule "andLeft" (formula "8"))
                  (rule "andLeft" (formula "8"))
                  (rule "andLeft" (formula "9"))
                  (rule "andLeft" (formula "8"))
                  (rule "andLeft" (formula "8"))
                  (rule "andLeft" (formula "8"))
                  (rule "andLeft" (formula "10"))
                  (rule "notLeft" (formula "9"))
                  (rule "notLeft" (formula "8"))
                  (rule "polySimp_elimSub" (formula "14") (term "3,0"))
                  (rule "mul_literals" (formula "14") (term "1,3,0"))
                  (rule "polySimp_addComm0" (formula "14") (term "3,0"))
                  (rule "inEqSimp_commuteLeq" (formula "13"))
                  (rule "inEqSimp_commuteLeq" (formula "12"))
                  (rule "inEqSimp_commuteLeq" (formula "11"))
                  (rule "inEqSimp_commuteLeq" (formula "8"))
                  (rule "applyEq" (formula "18") (term "0,1,0,2,0") (ifseqformula "10"))
                  (rule "applyEq" (formula "19") (term "0,1,0,2,0") (ifseqformula "10"))
                  (rule "applyEq" (formula "23") (term "0,1,0,2,0") (ifseqformula "10"))
                  (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "10"))
                  (rule "applyEq" (formula "15") (term "0") (ifseqformula "10"))
                  (rule "applyEq" (formula "7") (term "1,3,0") (ifseqformula "10"))
                  (rule "applyEq" (formula "12") (term "1") (ifseqformula "10"))
                  (rule "applyEq" (formula "11") (term "0") (ifseqformula "10"))
                  (rule "applyEq" (formula "13") (term "1") (ifseqformula "10"))
                  (rule "applyEq" (formula "22") (term "0,0") (ifseqformula "10"))
                  (rule "applyEq" (formula "22") (term "0,1,0,2,0,1") (ifseqformula "10"))
                  (rule "inEqSimp_exactShadow1" (formula "17") (ifseqformula "15"))
                  (rule "greater_literals" (formula "17") (term "0"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "17") (term "0,0"))
                  (rule "mul_literals" (formula "17") (term "0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "17") (term "0"))
                  (rule "add_literals" (formula "17") (term "1,1,0"))
                  (rule "polySimp_elimOne" (formula "17") (term "1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "17"))
                  (rule "mul_literals" (formula "17") (term "1"))
                  (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "15"))
                  (rule "mul_literals" (formula "11") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "11"))
                  (rule "mul_literals" (formula "11") (term "1"))
                  (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "11"))
                  (rule "leq_literals" (formula "17") (term "0"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "true_left" (formula "17"))
                  (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "7") (term "0") (inst "i=i") (inst "j=j"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0,1,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0,1,0"))
                  (rule "add_literals" (formula "7") (term "0,0,0,1,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "7") (term "1,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
                  (rule "nnf_imp2or" (formula "7") (term "0"))
                  (rule "nnf_notAnd" (formula "7") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
                  (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
                  (rule "mul_literals" (formula "7") (term "1,0,0,0"))
                  (rule "nnf_imp2or" (formula "7") (term "0,1,0"))
                  (rule "nnf_notAnd" (formula "7") (term "0,0,1,0"))
                  (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,0,1,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,0,1,0"))
                  (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0,1,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0,1,0"))
                  (rule "add_literals" (formula "7") (term "0,0,0,1,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0,1,0"))
                  (rule "commute_or" (formula "7") (term "0,0,1,0"))
                  (rule "all_pull_out3" (formula "7") (term "0"))
                  (rule "shift_paren_or" (formula "7") (term "0,0"))
                  (rule "shift_paren_or" (formula "7") (term "0,0,0"))
                  (rule "allLeft" (formula "7") (inst "t=Z(0(#))"))
                  (rule "leq_literals" (formula "7") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "add_zero_right" (formula "7") (term "1,1,0,0"))
                  (rule "inEqSimp_homoInEq1" (formula "7") (term "0,0,0,0"))
                  (rule "times_zero_2" (formula "7") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0,0"))
                  (rule "mul_literals" (formula "7") (term "1,0,0,0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "7") (term "0,0,0,0") (ifseqformula "13"))
                  (rule "qeq_literals" (formula "7") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "commute_or" (formula "7") (term "0,0"))
                  (rule "allLeft" (formula "7") (inst "t=add(add(Z(neglit(1(#))), res_classify),
    mul(javaShiftLeftInt(Z(1(#)),
                         int::final(self,
                                    de.wiesler.Tree::$log_buckets)),
        Z(neglit(1(#)))))"))
                  (rule "inEqSimp_homoInEq0" (formula "7") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "0,1,0,0,0"))
                  (rule "mul_literals" (formula "7") (term "0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0,0,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0,0,0,0"))
                  (rule "add_literals" (formula "7") (term "0,0,0,0,0"))
                  (rule "add_zero_left" (formula "7") (term "0,0,0,0"))
                  (rule "inEqSimp_homoInEq1" (formula "7") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,1,0"))
                  (rule "polySimp_elimOne" (formula "7") (term "1,1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "0,1,0,1,0"))
                  (rule "mul_literals" (formula "7") (term "0,0,1,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0,1,0"))
                  (rule "polySimp_addComm1" (formula "7") (term "0,0,1,0"))
                  (rule "polySimp_pullOutFactor3b" (formula "7") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0"))
                  (rule "add_literals" (formula "7") (term "0,0,0,1,0"))
                  (rule "add_zero_left" (formula "7") (term "0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0"))
                  (rule "polySimp_elimOne" (formula "7") (term "1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0"))
                  (rule "polySimp_elimOne" (formula "7") (term "1,1,0"))
                  (rule "inEqSimp_contradInEq1" (formula "7") (term "1,0") (ifseqformula "19"))
                  (rule "inEqSimp_homoInEq1" (formula "7") (term "0,1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,1,0"))
                  (rule "add_literals" (formula "7") (term "1,1,0,0,1,0"))
                  (rule "times_zero_1" (formula "7") (term "1,0,0,1,0"))
                  (rule "add_zero_right" (formula "7") (term "0,0,1,0"))
                  (rule "leq_literals" (formula "7") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "inEqSimp_contradInEq0" (formula "7") (term "1") (ifseqformula "20"))
                  (rule "inEqSimp_homoInEq1" (formula "7") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1"))
                  (rule "mul_literals" (formula "7") (term "0,1,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0,0,1"))
                  (rule "polySimp_addComm0" (formula "7") (term "0,0,0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,1"))
                  (rule "add_literals" (formula "7") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "7") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "7") (term "0,0,1"))
                  (rule "leq_literals" (formula "7") (term "0,1"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "inEqSimp_contradInEq1" (formula "24") (term "0") (ifseqformula "7"))
                  (rule "inEqSimp_homoInEq1" (formula "24") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "24") (term "0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "24") (term "0,0,0"))
                  (rule "polySimp_addComm0" (formula "24") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,0"))
                  (rule "add_literals" (formula "24") (term "1,1,0,0,0"))
                  (rule "times_zero_1" (formula "24") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "24") (term "0,0,0"))
                  (rule "leq_literals" (formula "24") (term "0,0"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "true_left" (formula "24"))
                  (rule "inEqSimp_antiSymm" (formula "7") (ifseqformula "18"))
                  (rule "applyEq" (formula "17") (term "1") (ifseqformula "7"))
                  (rule "applyEq" (formula "15") (term "0") (ifseqformula "7"))
                  (rule "applyEq" (formula "21") (term "0,1,0,2,0") (ifseqformula "7"))
                  (rule "polySimp_pullOutFactor1" (formula "21") (term "0,2,0"))
                  (rule "add_literals" (formula "21") (term "1,0,2,0"))
                  (rule "times_zero_1" (formula "21") (term "0,2,0"))
                  (rule "inEqSimp_homoInEq1" (formula "21"))
                  (rule "polySimp_pullOutFactor1" (formula "21") (term "0"))
                  (rule "add_literals" (formula "21") (term "1,0"))
                  (rule "times_zero_1" (formula "21") (term "0"))
                  (rule "leq_literals" (formula "21"))
                  (rule "true_left" (formula "21"))
                  (rule "applyEq" (formula "18") (term "0") (ifseqformula "7"))
                  (rule "inEqSimp_homoInEq0" (formula "18"))
                  (rule "polySimp_pullOutFactor1" (formula "18") (term "0"))
                  (rule "add_literals" (formula "18") (term "1,0"))
                  (rule "times_zero_1" (formula "18") (term "0"))
                  (rule "qeq_literals" (formula "18"))
                  (rule "true_left" (formula "18"))
                  (rule "applyEq" (formula "15") (term "1") (ifseqformula "7"))
                  (rule "applyEq" (formula "9") (term "1,1,1,0,0") (ifseqformula "7"))
                  (rule "applyEq" (formula "10") (term "1,1,1,0,0,0,0") (ifseqformula "7"))
                  (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "7"))
                  (rule "inEqSimp_homoInEq1" (formula "18"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "18") (term "0"))
                  (rule "add_literals" (formula "18") (term "1,1,0"))
                  (rule "applyEq" (formula "8") (term "0") (ifseqformula "7"))
                  (rule "inEqSimp_homoInEq1" (formula "8"))
                  (rule "polySimp_pullOutFactor1" (formula "8") (term "0"))
                  (rule "add_literals" (formula "8") (term "1,0"))
                  (rule "times_zero_1" (formula "8") (term "0"))
                  (rule "leq_literals" (formula "8"))
                  (rule "true_left" (formula "8"))
                  (rule "applyEq" (formula "18") (term "0,1,0,2,0") (ifseqformula "7"))
                  (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,2,0"))
                  (rule "add_literals" (formula "18") (term "1,1,0,2,0"))
                  (rule "times_zero_1" (formula "18") (term "1,0,2,0"))
                  (rule "add_zero_right" (formula "18") (term "0,2,0"))
                  (rule "applyEq" (formula "21") (term "0,1,0,2,0") (ifseqformula "7"))
                  (rule "polySimp_pullOutFactor1" (formula "21") (term "0,2,0"))
                  (rule "add_literals" (formula "21") (term "1,0,2,0"))
                  (rule "times_zero_1" (formula "21") (term "0,2,0"))
                  (rule "inEqSimp_commuteGeq" (formula "21"))
                  (rule "applyEq" (formula "9") (term "1,1,1,0,0,0,0,0") (ifseqformula "7"))
                  (rule "applyEq" (formula "12") (term "1") (ifseqformula "7"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "17"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "0"))
                  (rule "polySimp_elimOne" (formula "17") (term "0"))
                  (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "13"))
                  (rule "leq_literals" (formula "17") (term "0"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "true_left" (formula "17"))
                  (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "20"))
                  (rule "andLeft" (formula "6"))
                  (rule "inEqSimp_homoInEq1" (formula "6"))
                  (rule "polySimp_pullOutFactor1b" (formula "6") (term "0"))
                  (rule "add_literals" (formula "6") (term "1,1,0"))
                  (rule "times_zero_1" (formula "6") (term "1,0"))
                  (rule "add_zero_right" (formula "6") (term "0"))
                  (rule "leq_literals" (formula "6"))
                  (rule "closeFalse" (formula "6"))
               )
            )
         )
      )
   )
   (branch "Exceptional Post (classify)"
       (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "7")))
       (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "7")))
       (builtin "One Step Simplification" (formula "10"))
      (rule "replaceKnownQuery_0" (formula "1") (term "0"))
      (rule "replaceKnownQuery0_2" (formula "1") (term "1"))
      (rule "replaceKnownQuery_0" (formula "8") (term "1,1,0"))
      (rule "translateJavaMulInt" (formula "9") (term "1,1,0,0,1"))
      (rule "translateJavaSubInt" (formula "9") (term "3,0,1,0,1"))
      (rule "translateJavaMulInt" (formula "8") (term "1,1,0,0,1"))
      (rule "translateJavaSubInt" (formula "8") (term "3,0,1,0,1"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "11"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "13"))
      (rule "notLeft" (formula "11"))
      (rule "close" (formula "15") (ifseqformula "14"))
   )
   (branch "Pre (classify)"
       (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "7")))
       (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "7")) (ifInst ""  (formula "2")) (ifInst ""  (formula "3")))
      (rule "closeTrue" (formula "9"))
   )
   (branch "Null reference (callee = null)"
       (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "7")))
       (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "10")))
      (rule "closeTrue" (formula "9"))
   )
)
(branch "Exceptional Post (classify)"
    (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "7")))
    (builtin "One Step Simplification" (formula "9"))
   (rule "replaceKnownQuery_0" (formula "1") (term "0"))
   (rule "translateJavaMulInt" (formula "8") (term "1,1,0,0,1"))
   (rule "translateJavaSubInt" (formula "8") (term "3,0,1,0,1"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "10"))
   (rule "notLeft" (formula "8"))
   (rule "close" (formula "12") (ifseqformula "11"))
)
(branch "Pre (classify)"
    (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "7")) (ifInst ""  (formula "2")) (ifInst ""  (formula "3")))
   (rule "closeTrue" (formula "8"))
)
(branch "Null reference (callee = null)"
    (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "9")))
   (rule "closeTrue" (formula "8"))
)
)
}
