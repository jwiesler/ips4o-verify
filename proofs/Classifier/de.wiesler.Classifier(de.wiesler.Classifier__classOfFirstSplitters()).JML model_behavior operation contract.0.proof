\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sun Apr 16 15:20:29 CEST 2023
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L , finalFields-finalFields\\:immutable
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_COMPLETION
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../src";

\proofObligation "#Proof Obligation Settings
#Sun Apr 16 15:20:29 CEST 2023
contract=de.wiesler.Classifier[de.wiesler.Classifier\\:\\:classOfFirstSplitters()].JML model_behavior operation contract.0
name=de.wiesler.Classifier[de.wiesler.Classifier\\:\\:classOfFirstSplitters()].JML model_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "802059dea3"))
(keyLog "1" (keyUser "Julian" ) (keyVersion "802059dea3"))
(keyLog "2" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))
(keyLog "3" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))

(autoModeTime "67248")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "heapAtPre,heapBefore,o,f"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
 (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "6")) (userinteraction))
(rule "Definition_axiom_for_classOfFirstSplitters_in_de_wiesler_Tree" (formula "5") (term "0") (userinteraction))
 (builtin "One Step Simplification" (formula "5") (userinteraction))
(rule "notLeft" (formula "5") (userinteraction))
(rule "notRight" (formula "8") (userinteraction))
(rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "1") (term "0") (userinteraction))
(rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "1") (term "1") (userinteraction))
(rule "Query_axiom_for_classify_int__in_de_wiesler_Classifier" (formula "1") (term "0") (inst "#res=x") (inst "#self=c") (inst "#p0=x_1") (inst "classify_sk=classify_sk_0") (ifseqformula "4") (userinteraction))
(rule "Query_axiom_for_classify_int__in_de_wiesler_Classifier" (formula "2") (term "1") (inst "#res=x") (inst "#self=c") (inst "#p0=x_1") (inst "classify_sk=classify_sk_1") (ifseqformula "5") (userinteraction))
 (builtin "One Step Simplification" (formula "2"))
 (builtin "One Step Simplification" (formula "1"))
(rule "eqSymm" (formula "3"))
(rule "eqSymm" (formula "9"))
(rule "eqSymm" (formula "2") (term "0,1"))
(rule "eqSymm" (formula "1") (term "0,1"))
(rule "applyEqRigid" (formula "2") (term "1,0,1") (ifseqformula "3"))
(rule "boxToDiamond" (formula "1") (term "1"))
 (builtin "One Step Simplification" (formula "1"))
(rule "notLeft" (formula "1"))
(rule "boxToDiamond" (formula "1") (term "1"))
 (builtin "One Step Simplification" (formula "1"))
(rule "notLeft" (formula "1"))
(rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_classify,savedHeapBefore_classify"))
 (builtin "One Step Simplification" (formula "8"))
(rule "variableDeclarationAssign" (formula "8") (term "1"))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "index_1"))
(rule "methodBodyExpand" (formula "7") (term "1") (newnames "heapBefore_classify_0,savedHeapBefore_classify_0"))
 (builtin "One Step Simplification" (formula "7"))
(rule "variableDeclarationAssign" (formula "7") (term "1"))
(rule "variableDeclaration" (formula "7") (term "1") (newnames "index_2"))
(rule "methodCallWithAssignmentUnfoldTarget" (formula "8") (term "1") (inst "#v0=t"))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "t"))
(rule "assignment_read_attribute_this_final" (formula "8"))
 (builtin "One Step Simplification" (formula "8"))
 (builtin "Use Operation Contract" (formula "8") (newnames "heapBefore_classify_1,result_21,exc_25") (contract "de.wiesler.Tree[de.wiesler.Tree::classify(int)].JML normal_behavior operation contract.0"))
(branch "Post (classify)"
    (builtin "One Step Simplification" (formula "9"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "translateJavaMulInt" (formula "7") (term "1,1,0,0,1"))
   (rule "translateJavaSubInt" (formula "7") (term "3,0,0,1,0,1"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "9"))
   (rule "eqSymm" (formula "8"))
   (rule "polySimp_elimSub" (formula "11") (term "3,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1"))
   (rule "assignment" (formula "14") (term "1"))
    (builtin "One Step Simplification" (formula "14"))
   (rule "variableDeclaration" (formula "14") (term "1") (newnames "bucket"))
   (rule "methodCallWithAssignmentUnfoldTarget" (formula "13") (term "1") (inst "#v0=t"))
   (rule "variableDeclaration" (formula "13") (term "1") (newnames "t_1"))
   (rule "assignment_read_attribute_this_final" (formula "13"))
    (builtin "One Step Simplification" (formula "13"))
    (builtin "Use Operation Contract" (formula "13") (newnames "heapBefore_classify_2,result_22,exc_26") (contract "de.wiesler.Tree[de.wiesler.Tree::classify(int)].JML normal_behavior operation contract.0"))
   (branch "Post (classify)"
       (builtin "One Step Simplification" (formula "14"))
       (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "12")))
      (rule "translateJavaSubInt" (formula "13") (term "3,0,1,0,1"))
      (rule "translateJavaMulInt" (formula "13") (term "1,1,0,0,1"))
      (rule "andLeft" (formula "13"))
      (rule "andLeft" (formula "13"))
      (rule "andLeft" (formula "15"))
      (rule "andLeft" (formula "15"))
      (rule "andLeft" (formula "15"))
      (rule "eqSymm" (formula "14"))
      (rule "polySimp_elimSub" (formula "17") (term "3,0"))
      (rule "polySimp_mulComm0" (formula "16") (term "1"))
      (rule "assignment" (formula "18") (term "1"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "variableDeclaration" (formula "18") (term "1") (newnames "bucket_1"))
      (rule "ifElseUnfold" (formula "19") (term "1") (inst "#boolv=x_2"))
      (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_2"))
      (rule "assignment_read_attribute_this_final" (formula "19"))
       (builtin "One Step Simplification" (formula "19"))
      (rule "ifElseUnfold" (formula "18") (term "1") (inst "#boolv=x_2"))
      (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_3"))
      (rule "assignment_read_attribute_this_final" (formula "18"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "ifElseSplit" (formula "19"))
      (branch "if x_2 true"
          (builtin "One Step Simplification" (formula "1"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "variableDeclarationAssign" (formula "20") (term "1"))
         (rule "variableDeclaration" (formula "20") (term "1") (newnames "bucket_index"))
         (rule "applyEq" (formula "19") (term "0,1,0") (ifseqformula "1"))
         (rule "compound_subtraction_2" (formula "20") (term "1") (inst "#v0=x_2") (inst "#v1=x_3"))
         (rule "variableDeclarationAssign" (formula "20") (term "1"))
         (rule "variableDeclaration" (formula "20") (term "1") (newnames "x_4"))
         (rule "assignment" (formula "20") (term "1"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "variableDeclarationAssign" (formula "20") (term "1"))
         (rule "variableDeclaration" (formula "20") (term "1") (newnames "x_5"))
         (rule "compound_division_1" (formula "20") (term "1") (inst "#v=x_6"))
         (rule "variableDeclarationAssign" (formula "20") (term "1"))
         (rule "variableDeclaration" (formula "20") (term "1") (newnames "x_6"))
         (rule "assignment_read_attribute_this_final" (formula "20"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "assignmentDivisionInt" (formula "20"))
         (branch "Case 1"
             (builtin "One Step Simplification" (formula "20"))
            (rule "translateJavaDivInt" (formula "20") (term "0,1,0"))
            (rule "assignmentSubtractionInt" (formula "20") (term "1"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "translateJavaSubInt" (formula "20") (term "0,1,0"))
            (rule "polySimp_elimSub" (formula "20") (term "0,1,0"))
            (rule "variableDeclarationAssign" (formula "20") (term "1"))
            (rule "variableDeclaration" (formula "20") (term "1") (newnames "equal_to_splitter"))
            (rule "compound_assignment_2" (formula "20") (term "1") (inst "#v=x_2"))
            (rule "variableDeclarationAssign" (formula "20") (term "1"))
            (rule "variableDeclaration" (formula "20") (term "1") (newnames "x_7"))
            (rule "methodCallWithAssignmentUnfoldArguments" (formula "20") (term "1"))
            (rule "variableDeclarationAssign" (formula "20") (term "1"))
            (rule "variableDeclaration" (formula "20") (term "1") (newnames "var"))
            (rule "assignment" (formula "20") (term "1"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "variableDeclarationAssign" (formula "20") (term "1"))
            (rule "variableDeclaration" (formula "20") (term "1") (newnames "var_1"))
            (rule "eval_order_array_access4" (formula "20") (term "1") (inst "#v0=x_arr"))
            (rule "variableDeclarationAssign" (formula "20") (term "1"))
            (rule "variableDeclaration" (formula "20") (term "1") (newnames "x_arr"))
            (rule "assignment_read_attribute_this_final" (formula "20"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "assignment_array2" (formula "20"))
            (branch "Normal Execution (x_arr != null)"
                (builtin "One Step Simplification" (formula "20"))
               (rule "ifElseSplit" (formula "19"))
               (branch "if x_3 true"
                   (builtin "One Step Simplification" (formula "20"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "variableDeclarationAssign" (formula "19") (term "1"))
                  (rule "variableDeclaration" (formula "19") (term "1") (newnames "bucket_index_1"))
                  (rule "compound_subtraction_2" (formula "19") (term "1") (inst "#v0=x_2") (inst "#v1=x_3"))
                  (rule "variableDeclarationAssign" (formula "19") (term "1"))
                  (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_8"))
                  (rule "assignment" (formula "19") (term "1"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "variableDeclarationAssign" (formula "19") (term "1"))
                  (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_9"))
                  (rule "compound_division_1" (formula "19") (term "1") (inst "#v=x_10"))
                  (rule "variableDeclarationAssign" (formula "19") (term "1"))
                  (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_10"))
                  (rule "assignment_read_attribute_this_final" (formula "19"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "assignmentDivisionInt" (formula "19"))
                  (branch "Case 1"
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "translateJavaDivInt" (formula "19") (term "0,1,0"))
                     (rule "assignmentSubtractionInt" (formula "19") (term "1"))
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "translateJavaSubInt" (formula "19") (term "0,1,0"))
                     (rule "polySimp_elimSub" (formula "19") (term "0,1,0"))
                     (rule "variableDeclarationAssign" (formula "19") (term "1"))
                     (rule "variableDeclaration" (formula "19") (term "1") (newnames "equal_to_splitter_1"))
                     (rule "compound_assignment_2" (formula "19") (term "1") (inst "#v=x_2"))
                     (rule "variableDeclarationAssign" (formula "19") (term "1"))
                     (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_11"))
                     (rule "methodCallWithAssignmentUnfoldArguments" (formula "19") (term "1"))
                     (rule "variableDeclarationAssign" (formula "19") (term "1"))
                     (rule "variableDeclaration" (formula "19") (term "1") (newnames "var_2"))
                     (rule "assignment" (formula "19") (term "1"))
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "variableDeclarationAssign" (formula "19") (term "1"))
                     (rule "variableDeclaration" (formula "19") (term "1") (newnames "var_3"))
                     (rule "eval_order_array_access4" (formula "19") (term "1") (inst "#v0=x_arr"))
                     (rule "variableDeclarationAssign" (formula "19") (term "1"))
                     (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_arr_1"))
                     (rule "assignment_read_attribute_this_final" (formula "19"))
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "assignment_array2" (formula "19"))
                     (branch "Normal Execution (x_arr_1 != null)"
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "21") (term "0,1,2,0") (ifseqformula "3") (ifseqformula "4"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "10") (term "1,2,0") (ifseqformula "4") (ifseqformula "5"))
                        (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "22") (term "1") (inst "#v0=x_8"))
                        (rule "variableDeclaration" (formula "22") (term "1") (newnames "x_12"))
                        (rule "variableDeclarationAssign" (formula "22") (term "1"))
                        (rule "variableDeclaration" (formula "22") (term "1") (newnames "a"))
                        (rule "assignment" (formula "22") (term "1"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "variableDeclarationAssign" (formula "22") (term "1"))
                        (rule "variableDeclaration" (formula "22") (term "1") (newnames "b"))
                        (rule "assignment" (formula "22") (term "1"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "methodBodyExpand" (formula "22") (term "1") (newnames "heapBefore_cmp,savedHeapBefore_cmp"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "returnUnfold" (formula "22") (term "1") (inst "#v0=x_13"))
                        (rule "variableDeclarationAssign" (formula "22") (term "1"))
                        (rule "variableDeclaration" (formula "22") (term "1") (newnames "x_13"))
                        (rule "less_than_comparison_simple" (formula "22") (term "1"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "methodCallReturn" (formula "22") (term "1"))
                        (rule "assignment" (formula "22") (term "1"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "methodCallEmpty" (formula "22") (term "1"))
                        (rule "blockEmpty" (formula "22") (term "1"))
                        (rule "assignment" (formula "22") (term "1"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "blockEmpty" (formula "22") (term "1"))
                        (rule "compound_assignment_1_new" (formula "22") (term "1"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "compound_subtraction_2" (formula "22") (term "1") (inst "#v0=x_1") (inst "#v1=x_2"))
                        (rule "variableDeclarationAssign" (formula "22") (term "1"))
                        (rule "variableDeclaration" (formula "22") (term "1") (newnames "x_1"))
                        (rule "compound_addition_2" (formula "22") (term "1") (inst "#v0=x_3") (inst "#v1=x_4"))
                        (rule "variableDeclarationAssign" (formula "22") (term "1"))
                        (rule "variableDeclaration" (formula "22") (term "1") (newnames "x_14"))
                        (rule "assignmentMultiplicationInt" (formula "22") (term "1"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "translateJavaMulInt" (formula "22") (term "0,1,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "0,1,0"))
                        (rule "variableDeclarationAssign" (formula "22") (term "1"))
                        (rule "variableDeclaration" (formula "22") (term "1") (newnames "x_15"))
                        (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "21") (term "1") (inst "#v0=x_12"))
                        (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_16"))
                        (rule "variableDeclarationAssign" (formula "21") (term "1"))
                        (rule "variableDeclaration" (formula "21") (term "1") (newnames "a_1"))
                        (rule "assignment" (formula "21") (term "1"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "variableDeclarationAssign" (formula "21") (term "1"))
                        (rule "variableDeclaration" (formula "21") (term "1") (newnames "b_1"))
                        (rule "assignment" (formula "21") (term "1"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "methodBodyExpand" (formula "21") (term "1") (newnames "heapBefore_cmp_0,savedHeapBefore_cmp_0"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "returnUnfold" (formula "21") (term "1") (inst "#v0=x_17"))
                        (rule "variableDeclarationAssign" (formula "21") (term "1"))
                        (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_17"))
                        (rule "less_than_comparison_simple" (formula "21") (term "1"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "methodCallReturn" (formula "21") (term "1"))
                        (rule "assignment" (formula "21") (term "1"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "methodCallEmpty" (formula "21") (term "1"))
                        (rule "blockEmpty" (formula "21") (term "1"))
                        (rule "assignment" (formula "21") (term "1"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "blockEmpty" (formula "21") (term "1"))
                        (rule "compound_assignment_1_new" (formula "21") (term "1"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "compound_subtraction_2" (formula "21") (term "1") (inst "#v0=x_1") (inst "#v1=x_2"))
                        (rule "variableDeclarationAssign" (formula "21") (term "1"))
                        (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_18"))
                        (rule "compound_addition_2" (formula "21") (term "1") (inst "#v0=x_19") (inst "#v1=x_20"))
                        (rule "variableDeclarationAssign" (formula "21") (term "1"))
                        (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_19"))
                        (rule "assignmentMultiplicationInt" (formula "21") (term "1"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "translateJavaMulInt" (formula "21") (term "0,1,0"))
                        (rule "polySimp_mulComm0" (formula "21") (term "0,1,0"))
                        (rule "variableDeclarationAssign" (formula "21") (term "1"))
                        (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_20"))
                        (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "22") (term "1") (inst "#v0=x_16"))
                        (rule "variableDeclaration" (formula "22") (term "1") (newnames "x_21"))
                        (rule "variableDeclarationAssign" (formula "22") (term "1"))
                        (rule "variableDeclaration" (formula "22") (term "1") (newnames "b_2"))
                        (rule "assignment" (formula "22") (term "1"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "methodBodyExpand" (formula "22") (term "1") (newnames "heapBefore_toInt,savedHeapBefore_toInt"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "returnUnfold" (formula "22") (term "1") (inst "#v0=x_22"))
                        (rule "variableDeclarationAssign" (formula "22") (term "1"))
                        (rule "variableDeclaration" (formula "22") (term "1") (newnames "x_22"))
                        (rule "condition_simple" (formula "22") (term "1"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "ifthenelse_negated" (formula "22") (term "0,1,0"))
                        (rule "methodCallReturn" (formula "22") (term "1"))
                        (rule "assignment" (formula "22") (term "1"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "methodCallEmpty" (formula "22") (term "1"))
                        (rule "blockEmpty" (formula "22") (term "1"))
                        (rule "assignment" (formula "22") (term "1"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "assignmentAdditionInt" (formula "22") (term "1"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "translateJavaAddInt" (formula "22") (term "0,1,0"))
                        (rule "variableDeclarationAssign" (formula "22") (term "1"))
                        (rule "variableDeclaration" (formula "22") (term "1") (newnames "x_23"))
                        (rule "assignment_read_attribute_this_final" (formula "22"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "assignmentSubtractionInt" (formula "22") (term "1"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "translateJavaSubInt" (formula "22") (term "0,1,0"))
                        (rule "polySimp_elimSub" (formula "22") (term "0,1,0"))
                        (rule "polySimp_addComm1" (formula "22") (term "0,1,0"))
                        (rule "blockEmpty" (formula "22") (term "1"))
                        (rule "methodCallReturn" (formula "22") (term "1"))
                        (rule "assignment" (formula "22") (term "1"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "methodCallEmpty" (formula "22") (term "1"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "emptyModality" (formula "22") (term "1"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "notRight" (formula "22"))
                        (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "22") (term "1") (inst "#v0=x_21"))
                        (rule "variableDeclaration" (formula "22") (term "1") (newnames "x_24"))
                        (rule "variableDeclarationAssign" (formula "22") (term "1"))
                        (rule "variableDeclaration" (formula "22") (term "1") (newnames "b_3"))
                        (rule "assignment" (formula "22") (term "1"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "methodBodyExpand" (formula "22") (term "1") (newnames "heapBefore_toInt_0,savedHeapBefore_toInt_0"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "returnUnfold" (formula "22") (term "1") (inst "#v0=x_25"))
                        (rule "variableDeclarationAssign" (formula "22") (term "1"))
                        (rule "variableDeclaration" (formula "22") (term "1") (newnames "x_25"))
                        (rule "condition_simple" (formula "22") (term "1"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "ifthenelse_negated" (formula "22") (term "0,1,0"))
                        (rule "methodCallReturn" (formula "22") (term "1"))
                        (rule "assignment" (formula "22") (term "1"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "methodCallEmpty" (formula "22") (term "1"))
                        (rule "blockEmpty" (formula "22") (term "1"))
                        (rule "assignment" (formula "22") (term "1"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "assignmentAdditionInt" (formula "22") (term "1"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "translateJavaAddInt" (formula "22") (term "0,1,0"))
                        (rule "variableDeclarationAssign" (formula "22") (term "1"))
                        (rule "variableDeclaration" (formula "22") (term "1") (newnames "x_26"))
                        (rule "assignment_read_attribute_this_final" (formula "22"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "assignmentSubtractionInt" (formula "22") (term "1"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "translateJavaSubInt" (formula "22") (term "0,1,0"))
                        (rule "polySimp_elimSub" (formula "22") (term "0,1,0"))
                        (rule "polySimp_addComm1" (formula "22") (term "0,1,0"))
                        (rule "blockEmpty" (formula "22") (term "1"))
                        (rule "methodCallReturn" (formula "22") (term "1"))
                        (rule "assignment" (formula "22") (term "1"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "methodCallEmpty" (formula "22") (term "1"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "emptyModality" (formula "22") (term "1"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "notRight" (formula "22"))
                        (rule "polySimp_homoEq" (formula "2"))
                        (rule "polySimp_homoEq" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "2") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,0,1,0"))
                        (rule "polySimp_mulAssoc" (formula "2") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,0,1,0"))
                        (rule "polySimp_mulAssoc" (formula "1") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "2") (term "0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0"))
                        (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "21"))
                        (rule "polySimp_mulAssoc" (formula "21") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "21") (term "0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "21") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "21") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "15"))
                        (rule "polySimp_mulAssoc" (formula "15") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "15") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0,1,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,1,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0,0,0,1,0"))
                        (rule "polySimp_sepNegMonomial" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "polySimp_sepNegMonomial" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "21"))
                        (rule "polySimp_mulLiterals" (formula "21") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "15"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                        (rule "inEqSimp_exactShadow1" (formula "21") (ifseqformula "14"))
                        (rule "greater_literals" (formula "21") (term "0"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "polySimp_mulComm0" (formula "21") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "21") (term "0,0"))
                        (rule "mul_literals" (formula "21") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "21") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "21"))
                        (rule "polySimp_mulLiterals" (formula "21") (term "0"))
                        (rule "polySimp_elimOne" (formula "21") (term "0"))
                        (rule "inEqSimp_exactShadow1" (formula "22") (ifseqformula "20"))
                        (rule "greater_literals" (formula "22") (term "0"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "0,0"))
                        (rule "mul_literals" (formula "22") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "22") (term "0"))
                        (rule "add_literals" (formula "22") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "22") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "22"))
                        (rule "mul_literals" (formula "22") (term "1"))
                        (rule "inEqSimp_exactShadow1" (formula "15") (ifseqformula "14"))
                        (rule "greater_literals" (formula "15") (term "0"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "0,0"))
                        (rule "mul_literals" (formula "15") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "15") (term "0"))
                        (rule "add_literals" (formula "15") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                        (rule "mul_literals" (formula "15") (term "1"))
                        (rule "inEqSimp_exactShadow1" (formula "16") (ifseqformula "21"))
                        (rule "greater_literals" (formula "16") (term "0"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "0,0"))
                        (rule "mul_literals" (formula "16") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1"))
                        (rule "polySimp_rightDist" (formula "16") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "1,1"))
                        (rule "mul_literals" (formula "16") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "16") (term "1,1"))
                        (rule "inEqSimp_exactShadow3" (formula "24") (ifseqformula "23"))
                        (rule "mul_literals" (formula "24") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "24") (term "0"))
                        (rule "add_literals" (formula "24") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "24"))
                        (rule "mul_literals" (formula "24") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "24") (ifseqformula "15"))
                        (rule "greater_literals" (formula "24") (term "0,0"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "mul_literals" (formula "24") (term "1,0"))
                        (rule "leq_literals" (formula "24") (term "0"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "true_left" (formula "24"))
                        (rule "inEqSimp_exactShadow1" (formula "16") (ifseqformula "23"))
                        (rule "greater_literals" (formula "16") (term "0"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "polySimp_rightDist" (formula "16") (term "0,0"))
                        (rule "mul_literals" (formula "16") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0"))
                        (rule "polySimp_addComm1" (formula "16") (term "0,0"))
                        (rule "add_literals" (formula "16") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "16") (term "0"))
                        (rule "add_literals" (formula "16") (term "1,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                        (rule "mul_literals" (formula "16") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "16") (ifseqformula "15"))
                        (rule "greater_literals" (formula "16") (term "0,0"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "mul_literals" (formula "16") (term "1,0"))
                        (rule "leq_literals" (formula "16") (term "0"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "true_left" (formula "16"))
                        (rule "Contract_axiom_for_isClassifiedAs_in_Tree" (formula "26") (term "0"))
                        (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "19"))
                         (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "19")) (ifInst ""  (formula "6")))
                        (rule "true_left" (formula "26"))
                        (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "19"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "andLeft" (formula "19"))
                        (rule "andLeft" (formula "19"))
                        (rule "andLeft" (formula "19"))
                        (rule "andLeft" (formula "20"))
                        (rule "andLeft" (formula "19"))
                        (rule "andLeft" (formula "19"))
                        (rule "andLeft" (formula "19"))
                        (rule "andLeft" (formula "21"))
                        (rule "notLeft" (formula "20"))
                        (rule "notLeft" (formula "19"))
                        (rule "inEqSimp_commuteLeq" (formula "24"))
                        (rule "inEqSimp_commuteLeq" (formula "22"))
                        (rule "inEqSimp_commuteLeq" (formula "23"))
                        (rule "inEqSimp_commuteLeq" (formula "19"))
                        (rule "applyEq" (formula "23") (term "1") (ifseqformula "21"))
                        (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "21"))
                        (rule "applyEq" (formula "22") (term "0") (ifseqformula "21"))
                        (rule "applyEq" (formula "14") (term "0") (ifseqformula "21"))
                        (rule "applyEq" (formula "24") (term "1") (ifseqformula "21"))
                        (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "21"))
                        (rule "applyEq" (formula "32") (term "0,1,3,0") (ifseqformula "21"))
                        (rule "applyEq" (formula "28") (term "0") (ifseqformula "21"))
                        (rule "translateJavaSubInt" (formula "25") (term "3,0"))
                        (rule "polySimp_elimSub" (formula "25") (term "3,0"))
                        (rule "mul_literals" (formula "25") (term "1,3,0"))
                        (rule "polySimp_addComm0" (formula "25") (term "3,0"))
                        (rule "applyEq" (formula "25") (term "1,3,0") (ifseqformula "21"))
                        (rule "applyEq" (formula "18") (term "0,1,3,0") (ifseqformula "21"))
                        (rule "inEqSimp_exactShadow1" (formula "31") (ifseqformula "28"))
                        (rule "greater_literals" (formula "31") (term "0"))
                         (builtin "One Step Simplification" (formula "31"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "31") (term "0,0"))
                        (rule "mul_literals" (formula "31") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "31") (term "0"))
                        (rule "add_literals" (formula "31") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "31") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "31"))
                        (rule "mul_literals" (formula "31") (term "1"))
                        (rule "inEqSimp_exactShadow1" (formula "17") (ifseqformula "28"))
                        (rule "greater_literals" (formula "17") (term "0"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "17") (term "0,0"))
                        (rule "mul_literals" (formula "17") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "17"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1"))
                        (rule "polySimp_rightDist" (formula "17") (term "1"))
                        (rule "mul_literals" (formula "17") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "17") (term "1,1"))
                        (rule "inEqSimp_exactShadow3" (formula "22") (ifseqformula "28"))
                        (rule "mul_literals" (formula "22") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "22"))
                        (rule "mul_literals" (formula "22") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "31") (ifseqformula "22"))
                        (rule "leq_literals" (formula "31") (term "0"))
                         (builtin "One Step Simplification" (formula "31"))
                        (rule "true_left" (formula "31"))
                        (rule "inEqSimp_exactShadow1" (formula "17") (ifseqformula "14"))
                        (rule "greater_literals" (formula "17") (term "0"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "17") (term "0,0"))
                        (rule "mul_literals" (formula "17") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "17") (term "0"))
                        (rule "add_literals" (formula "17") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "17") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "17"))
                        (rule "mul_literals" (formula "17") (term "1"))
                        (rule "inEqSimp_exactShadow1" (formula "31") (ifseqformula "14"))
                        (rule "greater_literals" (formula "31") (term "0"))
                         (builtin "One Step Simplification" (formula "31"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "31") (term "0,0"))
                        (rule "mul_literals" (formula "31") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "31") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "31"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "0"))
                        (rule "polySimp_elimOne" (formula "31") (term "0"))
                        (rule "inEqSimp_exactShadow3" (formula "23") (ifseqformula "14"))
                        (rule "mul_literals" (formula "23") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "23"))
                        (rule "mul_literals" (formula "23") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "23"))
                        (rule "leq_literals" (formula "15") (term "0"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "true_left" (formula "15"))
                        (rule "inEqSimp_exactShadow3" (formula "21") (ifseqformula "30"))
                        (rule "mul_literals" (formula "21") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "21") (term "0"))
                        (rule "add_literals" (formula "21") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "21"))
                        (rule "mul_literals" (formula "21") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "21") (ifseqformula "23"))
                        (rule "greater_literals" (formula "21") (term "0,0"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "mul_literals" (formula "21") (term "1,0"))
                        (rule "leq_literals" (formula "21") (term "0"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "true_left" (formula "21"))
                        (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "10"))
                         (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "4")))
                        (rule "translateJavaMulInt" (formula "10") (term "1,1,0,0,0,0"))
                        (rule "translateJavaSubInt" (formula "10") (term "0,2,1,1,0"))
                        (rule "translateJavaSubInt" (formula "10") (term "0,2,0,1,0"))
                        (rule "andLeft" (formula "10"))
                        (rule "andLeft" (formula "10"))
                        (rule "andLeft" (formula "10"))
                        (rule "andLeft" (formula "10"))
                        (rule "andLeft" (formula "10"))
                        (rule "andLeft" (formula "10"))
                        (rule "andLeft" (formula "10"))
                        (rule "andLeft" (formula "12"))
                        (rule "notLeft" (formula "11"))
                        (rule "notLeft" (formula "10"))
                        (rule "eqSymm" (formula "15"))
                        (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "39"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "40"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "polySimp_elimSub" (formula "15") (term "0,2,0"))
                        (rule "mul_literals" (formula "15") (term "1,0,2,0"))
                        (rule "eqSymm" (formula "15"))
                        (rule "polySimp_elimSub" (formula "15") (term "0,2,0"))
                        (rule "mul_literals" (formula "15") (term "1,0,2,0"))
                        (rule "eqSymm" (formula "15"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1"))
                        (rule "eqSymm" (formula "12"))
                        (rule "polySimp_addComm0" (formula "15") (term "0,2,0"))
                        (rule "eqSymm" (formula "15"))
                        (rule "polySimp_addComm0" (formula "15") (term "0,2,0"))
                        (rule "eqSymm" (formula "15"))
                        (rule "inEqSimp_commuteLeq" (formula "10"))
                        (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "13"))
                        (rule "inEqSimp_commuteGeq" (formula "31"))
                        (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "26"))
                        (rule "applyEq" (formula "15") (term "1,0,2,0") (ifseqformula "26"))
                        (rule "eqSymm" (formula "15"))
                        (rule "applyEq" (formula "41") (term "0") (ifseqformula "13"))
                        (rule "applyEq" (formula "42") (term "1,2,0") (ifseqformula "13"))
                        (rule "applyEq" (formula "32") (term "1,0") (ifseqformula "13"))
                        (rule "applyEq" (formula "14") (term "3,0") (ifseqformula "26"))
                        (rule "applyEq" (formula "42") (term "1,2,1") (ifseqformula "13"))
                        (rule "applyEq" (formula "42") (term "0") (ifseqformula "34"))
                        (rule "eqSymm" (formula "42"))
                        (rule "applyEq" (formula "37") (term "0") (ifseqformula "12"))
                        (rule "applyEq" (formula "15") (term "1,0,2,0") (ifseqformula "26"))
                        (rule "eqSymm" (formula "15"))
                        (rule "applyEq" (formula "22") (term "0") (ifseqformula "12"))
                        (rule "applyEq" (formula "42") (term "0") (ifseqformula "19"))
                        (rule "eqSymm" (formula "42"))
                        (rule "newSym_eq" (formula "12") (inst "l=l_0") (inst "newSymDef=mul(int::final(self,
               de.wiesler.Classifier::$num_buckets),
    Z(0(#)))"))
                        (rule "times_zero_1" (formula "12") (term "1,1"))
                        (rule "add_zero_right" (formula "12") (term "1"))
                        (rule "applyEq" (formula "16") (term "1,0,2,0") (ifseqformula "12"))
                        (rule "eqSymm" (formula "16"))
                        (rule "applyEq" (formula "24") (term "0,1,3,0") (ifseqformula "12"))
                        (rule "polySimp_addComm0" (formula "24") (term "3,0"))
                        (rule "applyEq" (formula "39") (term "0,1,3,0") (ifseqformula "12"))
                        (rule "polySimp_addComm0" (formula "39") (term "3,0"))
                        (rule "applyEq" (formula "21") (term "0") (ifseqformula "12"))
                        (rule "inEqSimp_commuteLeq" (formula "21"))
                        (rule "applyEq" (formula "32") (term "0") (ifseqformula "12"))
                        (rule "inEqSimp_commuteLeq" (formula "32"))
                        (rule "applyEq" (formula "13") (term "0,0") (ifseqformula "12"))
                        (rule "eqSymm" (formula "13"))
                        (rule "applyEq" (formula "33") (term "1,3,0") (ifseqformula "12"))
                        (rule "applyEq" (formula "30") (term "0") (ifseqformula "12"))
                        (rule "applyEq" (formula "31") (term "1") (ifseqformula "12"))
                        (rule "applyEq" (formula "36") (term "0") (ifseqformula "12"))
                        (rule "inEqSimp_commuteLeq" (formula "36"))
                        (rule "applyEq" (formula "15") (term "3,0") (ifseqformula "12"))
                        (rule "applyEq" (formula "23") (term "0") (ifseqformula "13"))
                        (rule "inEqSimp_homoInEq1" (formula "23"))
                        (rule "polySimp_mulLiterals" (formula "23") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "23") (term "0"))
                        (rule "applyEq" (formula "16") (term "1,0,2,0") (ifseqformula "12"))
                        (rule "eqSymm" (formula "16"))
                        (rule "applyEq" (formula "11") (term "0") (ifseqformula "13"))
                        (rule "applyEq" (formula "1") (term "0,0,1,0,2,0,0,0") (ifseqformula "13"))
                        (rule "polySimp_addComm0" (formula "1") (term "0,2,0,0,0"))
                        (rule "applyEq" (formula "10") (term "0") (ifseqformula "13"))
                        (rule "applyEq" (formula "2") (term "0,0,1,0,2,0,0,0") (ifseqformula "13"))
                        (rule "polySimp_addComm0" (formula "2") (term "0,2,0,0,0"))
                        (rule "applyEq" (formula "38") (term "0") (ifseqformula "13"))
                        (rule "inEqSimp_homoInEq1" (formula "38"))
                        (rule "polySimp_mulLiterals" (formula "38") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "38") (term "0"))
                        (rule "applyEq" (formula "1") (term "1,1") (ifseqformula "13"))
                        (rule "polySimp_addComm1" (formula "1") (term "1"))
                        (rule "polySimp_addComm0" (formula "1") (term "0,1"))
                        (rule "applyEq" (formula "2") (term "1,1") (ifseqformula "13"))
                        (rule "polySimp_addComm1" (formula "2") (term "1"))
                        (rule "polySimp_addComm0" (formula "2") (term "0,1"))
                        (rule "applyEq" (formula "27") (term "1") (ifseqformula "12"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "23"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1"))
                        (rule "polySimp_rightDist" (formula "23") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "23") (term "1,1"))
                        (rule "mul_literals" (formula "23") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "38"))
                        (rule "polySimp_mulComm0" (formula "38") (term "1"))
                        (rule "polySimp_rightDist" (formula "38") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "38") (term "1,1"))
                        (rule "mul_literals" (formula "38") (term "0,1"))
                        (rule "inEqSimp_subsumption6" (formula "10") (ifseqformula "30"))
                        (rule "greater_literals" (formula "10") (term "0,0"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "mul_literals" (formula "10") (term "1,0"))
                        (rule "leq_literals" (formula "10") (term "0"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "true_left" (formula "10"))
                        (rule "elimGcdLeq_antec" (formula "10") (inst "elimGcdRightDiv=Z(4(6(#)))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0,0,1,0"))
                        (rule "neg_literal" (formula "10") (term "0,0,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0"))
                        (rule "leq_literals" (formula "10") (term "0,0"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "10") (term "0,0,0,0"))
                        (rule "add_literals" (formula "10") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
                        (rule "add_literals" (formula "10") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "10") (term "1,0,0"))
                        (rule "add_zero_right" (formula "10") (term "0,0"))
                        (rule "qeq_literals" (formula "10") (term "0"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "true_left" (formula "10"))
                        (rule "inEqSimp_exactShadow3" (formula "27") (ifseqformula "21"))
                        (rule "mul_literals" (formula "27") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "27") (term "0"))
                        (rule "add_literals" (formula "27") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "27"))
                        (rule "mul_literals" (formula "27") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "27") (ifseqformula "29"))
                        (rule "mul_literals" (formula "27") (term "1,1,0"))
                        (rule "greater_literals" (formula "27") (term "0,0"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "leq_literals" (formula "27") (term "0"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "true_left" (formula "27"))
                        (rule "inEqSimp_exactShadow3" (formula "34") (ifseqformula "35"))
                        (rule "polySimp_mulComm0" (formula "34") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "34") (term "0"))
                        (rule "polySimp_addComm0" (formula "34") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "34"))
                        (rule "polySimp_mulComm0" (formula "34") (term "1"))
                        (rule "polySimp_rightDist" (formula "34") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "34") (term "1,1"))
                        (rule "mul_literals" (formula "34") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "34") (term "1,1"))
                        (rule "inEqSimp_exactShadow3" (formula "35") (ifseqformula "37"))
                        (rule "polySimp_mulComm0" (formula "35") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "35") (term "0"))
                        (rule "polySimp_addComm0" (formula "35") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "35") (term "0"))
                        (rule "add_literals" (formula "35") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "35") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "35"))
                        (rule "mul_literals" (formula "35") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "35") (ifseqformula "28"))
                        (rule "leq_literals" (formula "35") (term "0"))
                         (builtin "One Step Simplification" (formula "35"))
                        (rule "true_left" (formula "35"))
                        (rule "inEqSimp_exactShadow1" (formula "20") (ifseqformula "37"))
                        (rule "greater_literals" (formula "20") (term "0"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "polySimp_rightDist" (formula "20") (term "0,0"))
                        (rule "mul_literals" (formula "20") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0"))
                        (rule "polySimp_addComm1" (formula "20") (term "0"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0,0"))
                        (rule "add_literals" (formula "20") (term "0,0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "20"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "0"))
                        (rule "polySimp_elimOne" (formula "20") (term "0"))
                        (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "22"))
                        (rule "polySimp_mulComm0" (formula "19") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0"))
                        (rule "polySimp_addComm0" (formula "19") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "19") (term "0"))
                        (rule "add_literals" (formula "19") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "19") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "19"))
                        (rule "mul_literals" (formula "19") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "19") (ifseqformula "30"))
                        (rule "leq_literals" (formula "19") (term "0"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "true_left" (formula "19"))
                        (rule "inEqSimp_exactShadow3" (formula "27") (ifseqformula "38"))
                        (rule "mul_literals" (formula "27") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "27") (term "0"))
                        (rule "add_literals" (formula "27") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "27"))
                        (rule "mul_literals" (formula "27") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "27") (ifseqformula "30"))
                        (rule "mul_literals" (formula "27") (term "1,1,0"))
                        (rule "greater_literals" (formula "27") (term "0,0"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "leq_literals" (formula "27") (term "0"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "true_left" (formula "27"))
                        (rule "inEqSimp_exactShadow1" (formula "35") (ifseqformula "22"))
                        (rule "greater_literals" (formula "35") (term "0"))
                         (builtin "One Step Simplification" (formula "35"))
                        (rule "polySimp_rightDist" (formula "35") (term "0,0"))
                        (rule "mul_literals" (formula "35") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "35") (term "1,0"))
                        (rule "mul_literals" (formula "35") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0"))
                        (rule "polySimp_addAssoc" (formula "35") (term "0"))
                        (rule "polySimp_addComm1" (formula "35") (term "0,0"))
                        (rule "add_literals" (formula "35") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "35") (term "0"))
                        (rule "add_literals" (formula "35") (term "1,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "35"))
                        (rule "mul_literals" (formula "35") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "35") (ifseqformula "29"))
                        (rule "greater_literals" (formula "35") (term "0,0"))
                         (builtin "One Step Simplification" (formula "35"))
                        (rule "mul_literals" (formula "35") (term "1,0"))
                        (rule "leq_literals" (formula "35") (term "0"))
                         (builtin "One Step Simplification" (formula "35"))
                        (rule "true_left" (formula "35"))
                        (rule "inEqSimp_exactShadow1" (formula "35") (ifseqformula "20"))
                        (rule "greater_literals" (formula "35") (term "0"))
                         (builtin "One Step Simplification" (formula "35"))
                        (rule "polySimp_rightDist" (formula "35") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0"))
                        (rule "mul_literals" (formula "35") (term "0,1,0"))
                        (rule "polySimp_rightDist" (formula "35") (term "0,0"))
                        (rule "mul_literals" (formula "35") (term "0,0,0"))
                        (rule "polySimp_addAssoc" (formula "35") (term "0"))
                        (rule "polySimp_addComm1" (formula "35") (term "0,0"))
                        (rule "add_literals" (formula "35") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "35") (term "0"))
                        (rule "add_literals" (formula "35") (term "1,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "35"))
                        (rule "mul_literals" (formula "35") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "35") (ifseqformula "29"))
                        (rule "greater_literals" (formula "35") (term "0,0"))
                         (builtin "One Step Simplification" (formula "35"))
                        (rule "mul_literals" (formula "35") (term "1,0"))
                        (rule "leq_literals" (formula "35") (term "0"))
                         (builtin "One Step Simplification" (formula "35"))
                        (rule "true_left" (formula "35"))
                        (rule "inEqSimp_exactShadow3" (formula "28") (ifseqformula "20"))
                        (rule "mul_literals" (formula "28") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "28") (term "0"))
                        (rule "add_literals" (formula "28") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "28"))
                        (rule "mul_literals" (formula "28") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "28") (ifseqformula "30"))
                        (rule "greater_literals" (formula "28") (term "0,0"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "mul_literals" (formula "28") (term "1,0"))
                        (rule "leq_literals" (formula "28") (term "0"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "true_left" (formula "28"))
                        (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "20"))
                        (rule "polySimp_mulComm0" (formula "19") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0"))
                        (rule "polySimp_addComm0" (formula "19") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "19") (term "0"))
                        (rule "add_literals" (formula "19") (term "1,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "19"))
                        (rule "mul_literals" (formula "19") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "19") (ifseqformula "30"))
                        (rule "mul_literals" (formula "19") (term "1,1,0"))
                        (rule "greater_literals" (formula "19") (term "0,0"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "leq_literals" (formula "19") (term "0"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "true_left" (formula "19"))
                        (rule "Contract_axiom_for_isClassifiedAs_in_Tree" (formula "23") (term "0"))
                        (rule "replace_known_left" (formula "23") (term "1,0,0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "15")) (ifInst ""  (formula "6")) (ifInst ""  (formula "41")) (ifInst ""  (formula "15")))
                        (rule "true_left" (formula "23"))
                        (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "32") (term "0") (inst "i=i") (inst "j=j"))
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0,1,0"))
                        (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0,1,0"))
                        (rule "add_literals" (formula "32") (term "0,0,0,1,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "32") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "32") (term "1,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "32") (term "0,1,1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "32") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0"))
                        (rule "nnf_imp2or" (formula "32") (term "0"))
                        (rule "nnf_notAnd" (formula "32") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0"))
                        (rule "mul_literals" (formula "32") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "32") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0"))
                        (rule "mul_literals" (formula "32") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "32") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "32") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0"))
                        (rule "nnf_imp2or" (formula "32") (term "0,1,0"))
                        (rule "nnf_notAnd" (formula "32") (term "0,0,1,0"))
                        (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "32") (term "1,0,0,0,1,0"))
                        (rule "mul_literals" (formula "32") (term "0,1,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0,0,1,0"))
                        (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0,1,0"))
                        (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0,1,0"))
                        (rule "add_literals" (formula "32") (term "0,0,0,1,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "32") (term "0,1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0,1,0"))
                        (rule "Contract_axiom_for_isClassifiedAs_in_Tree" (formula "39") (term "0"))
                        (rule "replace_known_left" (formula "39") (term "1,0,0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "15")) (ifInst ""  (formula "6")) (ifInst ""  (formula "41")) (ifInst ""  (formula "15")))
                        (rule "true_left" (formula "39"))
                        (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "15"))
                         (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "42")) (ifInst ""  (formula "25")))
                        (rule "translateJavaSubInt" (formula "15") (term "3,0,1"))
                        (rule "andLeft" (formula "15"))
                        (rule "andLeft" (formula "15"))
                        (rule "andLeft" (formula "15"))
                        (rule "andLeft" (formula "15"))
                        (rule "andLeft" (formula "17"))
                        (rule "andLeft" (formula "15"))
                        (rule "notLeft" (formula "15"))
                        (rule "polySimp_elimSub" (formula "20") (term "3,0"))
                        (rule "mul_literals" (formula "20") (term "1,3,0"))
                        (rule "polySimp_addComm0" (formula "20") (term "3,0"))
                        (rule "inEqSimp_commuteLeq" (formula "19"))
                        (rule "inEqSimp_commuteLeq" (formula "18"))
                        (rule "inEqSimp_commuteLeq" (formula "17"))
                        (rule "inEqSimp_commuteLeq" (formula "15"))
                        (rule "applyEq" (formula "16") (term "0") (ifseqformula "15"))
                        (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "12"))
                        (rule "inEqSimp_commuteGeq" (formula "18"))
                        (rule "applyEq" (formula "17") (term "1") (ifseqformula "15"))
                        (rule "applyEq" (formula "44") (term "0") (ifseqformula "12"))
                        (rule "applyEq" (formula "15") (term "0") (ifseqformula "30"))
                        (rule "eqSymm" (formula "15"))
                        (rule "applyEq" (formula "18") (term "1,3,0") (ifseqformula "29"))
                        (rule "applyEq" (formula "18") (term "1,0") (ifseqformula "12"))
                        (rule "applyEq" (formula "15") (term "0") (ifseqformula "10"))
                        (rule "applyEq" (formula "15") (term "1") (ifseqformula "10"))
                        (rule "applyEq" (formula "15") (term "0") (ifseqformula "27"))
                        (rule "inEqSimp_commuteLeq" (formula "15"))
                        (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "13") (term "0"))
                        (rule "replace_known_right" (formula "13") (term "0,0,0") (ifseqformula "42"))
                         (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "6")) (ifInst ""  (formula "14")))
                        (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "14") (term "0") (inst "i=i") (inst "j=j"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,1,0"))
                        (rule "Definition_axiom_for_isClassifiedAs_in_de_wiesler_Tree" (formula "24") (term "0"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "translateJavaSubInt" (formula "24") (term "1,0,1"))
                        (rule "translateJavaSubInt" (formula "24") (term "0,2,0,1,0"))
                        (rule "andLeft" (formula "24"))
                        (rule "polySimp_elimSub" (formula "24") (term "0,2,0,1"))
                        (rule "mul_literals" (formula "24") (term "1,0,2,0,1"))
                        (rule "polySimp_elimSub" (formula "25") (term "1,0"))
                        (rule "mul_literals" (formula "25") (term "1,1,0"))
                        (rule "polySimp_addComm1" (formula "24") (term "0,2,0,1"))
                        (rule "polySimp_addComm0" (formula "25") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "24") (term "0,0,2,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "24") (term "0"))
                        (rule "add_zero_right" (formula "24") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "24") (term "1,0,0"))
                        (rule "polySimp_mulAssoc" (formula "24") (term "0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "24") (term "0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "24") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "24") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "25") (term "0"))
                        (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "25") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "25") (term "0,0,0"))
                        (rule "add_literals" (formula "25") (term "0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "25") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "25") (term "0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "24") (term "1"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "25") (term "1"))
                        (rule "applyEq" (formula "24") (term "1,1,0,1") (ifseqformula "12"))
                        (rule "applyEq" (formula "25") (term "1,0,1") (ifseqformula "12"))
                        (rule "applyEq" (formula "25") (term "0,1,0,0") (ifseqformula "28"))
                        (rule "polySimp_addComm1" (formula "25") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "25") (term "0,0,0"))
                        (rule "add_literals" (formula "25") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "0,0"))
                        (rule "polySimp_elimOne" (formula "24") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "24") (term "1,1"))
                        (rule "mul_literals" (formula "24") (term "0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1"))
                        (rule "polySimp_elimOne" (formula "24") (term "1,1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0"))
                        (rule "polySimp_mulComm0" (formula "25") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "25") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0"))
                        (rule "mul_literals" (formula "25") (term "0,1,0"))
                        (rule "Definition_axiom_for_isClassifiedAs_in_de_wiesler_Tree" (formula "41") (term "0"))
                         (builtin "One Step Simplification" (formula "41"))
                        (rule "translateJavaSubInt" (formula "41") (term "0,2,0,1,0"))
                        (rule "translateJavaSubInt" (formula "41") (term "1,0,1"))
                        (rule "andLeft" (formula "41"))
                        (rule "polySimp_elimSub" (formula "42") (term "1,0"))
                        (rule "mul_literals" (formula "42") (term "1,1,0"))
                        (rule "polySimp_elimSub" (formula "41") (term "0,2,0,1"))
                        (rule "mul_literals" (formula "41") (term "1,0,2,0,1"))
                        (rule "polySimp_addComm0" (formula "42") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "41") (term "0,2,0,1"))
                        (rule "polySimp_addComm0" (formula "41") (term "0,0,2,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "41") (term "0"))
                        (rule "add_zero_right" (formula "41") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "41") (term "1,0,0"))
                        (rule "polySimp_mulAssoc" (formula "41") (term "0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "41") (term "0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "41") (term "0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "41") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "41") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "42") (term "0"))
                        (rule "polySimp_rightDist" (formula "42") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "42") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "42") (term "0,0,0"))
                        (rule "add_literals" (formula "42") (term "0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "42") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "42") (term "0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "41") (term "1"))
                        (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "42") (term "1"))
                        (rule "applyEq" (formula "42") (term "0,1,0,0") (ifseqformula "28"))
                        (rule "polySimp_addComm1" (formula "42") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "42") (term "0,0,0"))
                        (rule "add_literals" (formula "42") (term "1,1,0,0,0"))
                        (rule "applyEq" (formula "41") (term "1,1,0,1") (ifseqformula "12"))
                        (rule "applyEq" (formula "42") (term "1,0,1") (ifseqformula "12"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "41") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "41") (term "0,0"))
                        (rule "polySimp_elimOne" (formula "41") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "0"))
                        (rule "polySimp_mulComm0" (formula "42") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "42") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0"))
                        (rule "mul_literals" (formula "42") (term "0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1"))
                        (rule "polySimp_mulComm0" (formula "41") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "41") (term "1,1"))
                        (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1"))
                        (rule "mul_literals" (formula "41") (term "0,1,1"))
                        (rule "polySimp_elimOne" (formula "41") (term "1,1,1"))
                        (rule "nnf_imp2or" (formula "14") (term "0"))
                        (rule "nnf_notAnd" (formula "14") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
                        (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "14") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                        (rule "mul_literals" (formula "14") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "14") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0"))
                        (rule "nnf_imp2or" (formula "14") (term "0,1,0"))
                        (rule "nnf_notAnd" (formula "14") (term "0,0,1,0"))
                        (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,1,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,1,0"))
                        (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,1,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,1,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,1,0"))
                        (rule "add_zero_left" (formula "14") (term "0,0,1,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,1,0"))
                        (rule "jdiv_axiom" (formula "2") (term "0,0,0,2,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0,0,2,1"))
                        (rule "eqSymm" (formula "2"))
                        (rule "inEqSimp_subsumption6" (formula "2") (term "0,0") (ifseqformula "32"))
                        (rule "greater_literals" (formula "2") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "mul_literals" (formula "2") (term "1,0,0,0"))
                        (rule "leq_literals" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2"))
                        (rule "applyEq" (formula "1") (term "0,0,0,2,0,0,0") (ifseqformula "2"))
                        (rule "applyEq" (formula "3") (term "0,0,0,2,0,0,0") (ifseqformula "2"))
                        (rule "polyDiv_pullOut" (formula "3") (term "0,0,0,2,0,0,0") (inst "polyDivCoeff=l_0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,2,0,0,0,2,0,0,0"))
                        (rule "equal_literals" (formula "3") (term "0,0,0,0,2,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "polySimp_pullOutFactor0" (formula "3") (term "0,0,0,0,0,2,0,0,0"))
                        (rule "add_literals" (formula "3") (term "1,0,0,0,0,0,2,0,0,0"))
                        (rule "times_zero_1" (formula "3") (term "0,0,0,0,0,2,0,0,0"))
                        (rule "div_literals" (formula "3") (term "0,0,0,0,2,0,0,0"))
                        (rule "add_zero_left" (formula "3") (term "0,0,0,2,0,0,0"))
                        (rule "polyDiv_pullOut" (formula "1") (term "0,0,0,2,0,0,0") (inst "polyDivCoeff=l_0"))
                        (rule "equal_literals" (formula "1") (term "0,0,0,0,2,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0,0,0,2,0,0,0"))
                        (rule "polySimp_pullOutFactor0" (formula "1") (term "0,0,0,0,0,2,0,0,0"))
                        (rule "add_literals" (formula "1") (term "1,0,0,0,0,0,2,0,0,0"))
                        (rule "times_zero_1" (formula "1") (term "0,0,0,0,0,2,0,0,0"))
                        (rule "div_literals" (formula "1") (term "0,0,0,0,2,0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0,0,2,0,0,0"))
                        (rule "polyDiv_pullOut" (formula "2") (term "1") (inst "polyDivCoeff=l_0"))
                        (rule "equal_literals" (formula "2") (term "0,1"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,1"))
                        (rule "polySimp_pullOutFactor0" (formula "2") (term "0,0,1"))
                        (rule "add_literals" (formula "2") (term "1,0,0,1"))
                        (rule "times_zero_1" (formula "2") (term "0,0,1"))
                        (rule "div_literals" (formula "2") (term "0,1"))
                        (rule "add_zero_left" (formula "2") (term "1"))
                        (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "17") (term "0") (inst "i=i") (inst "j=j"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0,1,0"))
                        (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,1,0"))
                        (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "17") (term "1,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "17") (term "0,1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0,1,0"))
                        (rule "nnf_imp2or" (formula "17") (term "0"))
                        (rule "nnf_notAnd" (formula "17") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
                        (rule "mul_literals" (formula "17") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "17") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
                        (rule "mul_literals" (formula "17") (term "1,0,0,0"))
                        (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "14") (term "0") (inst "i=i"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "translateJavaAddInt" (formula "14") (term "0,2,1,1,0"))
                        (rule "translateJavaSubInt" (formula "14") (term "1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "14") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "14") (term "1,1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "14") (term "0,2,1,1,0"))
                        (rule "polySimp_addComm0" (formula "14") (term "1,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                        (rule "nnf_imp2or" (formula "17") (term "0,1,0"))
                        (rule "nnf_imp2or" (formula "14") (term "0"))
                        (rule "nnf_notAnd" (formula "14") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
                        (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "14") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                        (rule "mul_literals" (formula "14") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                        (rule "commute_or" (formula "35") (term "0,0,1,0"))
                        (rule "nnf_notAnd" (formula "17") (term "0,0,1,0"))
                        (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0,1,0"))
                        (rule "mul_literals" (formula "17") (term "0,1,0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0,1,0"))
                        (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0,1,0"))
                        (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,1,0"))
                        (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "17") (term "0,1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0,1,0"))
                        (rule "arrayLengthIsAShort" (formula "34") (term "0"))
                         (builtin "One Step Simplification" (formula "34"))
                        (rule "true_left" (formula "34"))
                        (rule "arrayLengthIsAShort" (formula "33") (term "0"))
                         (builtin "One Step Simplification" (formula "33"))
                        (rule "true_left" (formula "33"))
                        (rule "arrayLengthNotNegative" (formula "33") (term "0"))
                        (rule "arrayLengthNotNegative" (formula "35") (term "0"))
                        (rule "commute_or" (formula "15") (term "0,0,1,0"))
                        (rule "commute_or" (formula "17") (term "0,0,1,0"))
                        (rule "cut_direct" (formula "24") (term "0"))
                        (branch "CUT: result_21 >= 1 + l_0 TRUE"
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "inEqSimp_subsumption1" (formula "20") (ifseqformula "24"))
                           (rule "inEqSimp_homoInEq0" (formula "20") (term "0"))
                           (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0"))
                           (rule "add_literals" (formula "20") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "20") (term "1,0,0"))
                           (rule "add_zero_right" (formula "20") (term "0,0"))
                           (rule "qeq_literals" (formula "20") (term "0"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "inEqSimp_exactShadow3" (formula "23") (ifseqformula "22"))
                           (rule "polySimp_rightDist" (formula "23") (term "0,0"))
                           (rule "mul_literals" (formula "23") (term "0,0,0"))
                           (rule "polySimp_addAssoc" (formula "23") (term "0"))
                           (rule "polySimp_addComm1" (formula "23") (term "0,0"))
                           (rule "add_literals" (formula "23") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "23") (term "0"))
                           (rule "add_literals" (formula "23") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "23") (term "1,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "23"))
                           (rule "mul_literals" (formula "23") (term "1"))
                           (rule "inEqSimp_exactShadow3" (formula "23") (ifseqformula "20"))
                           (rule "polySimp_rightDist" (formula "23") (term "0,0"))
                           (rule "mul_literals" (formula "23") (term "0,0,0"))
                           (rule "polySimp_addAssoc" (formula "23") (term "0"))
                           (rule "polySimp_addComm1" (formula "23") (term "0,0"))
                           (rule "add_literals" (formula "23") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "23") (term "0"))
                           (rule "add_literals" (formula "23") (term "1,1,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "23"))
                           (rule "mul_literals" (formula "23") (term "1"))
                           (rule "inEqSimp_subsumption6" (formula "23") (ifseqformula "32"))
                           (rule "greater_literals" (formula "23") (term "0,0"))
                            (builtin "One Step Simplification" (formula "23"))
                           (rule "mul_literals" (formula "23") (term "1,0"))
                           (rule "leq_literals" (formula "23") (term "0"))
                            (builtin "One Step Simplification" (formula "23"))
                           (rule "true_left" (formula "23"))
                           (rule "cut_direct" (formula "25") (term "0"))
                           (branch "CUT: result_21 <= -2 + l_0 * 2 TRUE"
                               (builtin "One Step Simplification" (formula "26"))
                              (rule "inEqSimp_subsumption0" (formula "22") (ifseqformula "25"))
                              (rule "inEqSimp_homoInEq0" (formula "22") (term "0"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "22") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "22") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "22") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "22") (term "0,0,0"))
                              (rule "add_literals" (formula "22") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "22") (term "0,0"))
                              (rule "add_literals" (formula "22") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "22") (term "1,0,0"))
                              (rule "add_zero_right" (formula "22") (term "0,0"))
                              (rule "qeq_literals" (formula "22") (term "0"))
                               (builtin "One Step Simplification" (formula "22"))
                              (rule "true_left" (formula "22"))
                              (rule "inEqSimp_exactShadow3" (formula "30") (ifseqformula "24"))
                              (rule "mul_literals" (formula "30") (term "0,0"))
                              (rule "polySimp_addAssoc" (formula "30") (term "0"))
                              (rule "add_literals" (formula "30") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "30"))
                              (rule "mul_literals" (formula "30") (term "1"))
                              (rule "inEqSimp_subsumption6" (formula "30") (ifseqformula "32"))
                              (rule "greater_literals" (formula "30") (term "0,0"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "mul_literals" (formula "30") (term "1,0"))
                              (rule "leq_literals" (formula "30") (term "0"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "true_left" (formula "30"))
                              (rule "inEqSimp_exactShadow1" (formula "39") (ifseqformula "24"))
                              (rule "greater_literals" (formula "39") (term "0"))
                               (builtin "One Step Simplification" (formula "39"))
                              (rule "polySimp_rightDist" (formula "39") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0"))
                              (rule "mul_literals" (formula "39") (term "0,1,0"))
                              (rule "polySimp_rightDist" (formula "39") (term "0,0"))
                              (rule "mul_literals" (formula "39") (term "0,0,0"))
                              (rule "polySimp_addAssoc" (formula "39") (term "0"))
                              (rule "polySimp_addComm1" (formula "39") (term "0,0"))
                              (rule "add_literals" (formula "39") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "39") (term "0"))
                              (rule "add_literals" (formula "39") (term "1,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "39"))
                              (rule "mul_literals" (formula "39") (term "1"))
                              (rule "inEqSimp_subsumption6" (formula "39") (ifseqformula "31"))
                              (rule "mul_literals" (formula "39") (term "1,1,0"))
                              (rule "greater_literals" (formula "39") (term "0,0"))
                               (builtin "One Step Simplification" (formula "39"))
                              (rule "leq_literals" (formula "39") (term "0"))
                               (builtin "One Step Simplification" (formula "39"))
                              (rule "true_left" (formula "39"))
                              (rule "inEqSimp_exactShadow3" (formula "22") (ifseqformula "24"))
                              (rule "polySimp_rightDist" (formula "22") (term "0,0"))
                              (rule "mul_literals" (formula "22") (term "0,0,0"))
                              (rule "polySimp_addAssoc" (formula "22") (term "0"))
                              (rule "polySimp_addComm1" (formula "22") (term "0,0"))
                              (rule "add_literals" (formula "22") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "22") (term "0"))
                              (rule "add_literals" (formula "22") (term "1,1,0"))
                              (rule "polySimp_elimOne" (formula "22") (term "1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "22"))
                              (rule "mul_literals" (formula "22") (term "1"))
                              (rule "inEqSimp_subsumption1" (formula "32") (ifseqformula "22"))
                              (rule "leq_literals" (formula "32") (term "0"))
                               (builtin "One Step Simplification" (formula "32"))
                              (rule "true_left" (formula "32"))
                              (rule "ifthenelse_split" (formula "3") (term "0"))
                              (branch " self.sorted_splitters[l_0 * -1 + result_21] >= 1 + self.sorted_splitters[0] TRUE"
                                 (rule "polySimp_homoEq" (formula "4"))
                                 (rule "times_zero_2" (formula "4") (term "1,0"))
                                 (rule "add_zero_right" (formula "4") (term "0"))
                                 (rule "polySimp_sepNegMonomial" (formula "4"))
                                 (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                 (rule "applyEq" (formula "40") (term "0") (ifseqformula "4"))
                                 (rule "inEqSimp_homoInEq1" (formula "40"))
                                 (rule "polySimp_mulComm0" (formula "40") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "40") (term "1,0"))
                                 (rule "polySimp_mulAssoc" (formula "40") (term "0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "40") (term "0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "40") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "40") (term "0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "40") (term "0,0"))
                                 (rule "add_literals" (formula "40") (term "1,1,0,0"))
                                 (rule "applyEq" (formula "42") (term "1,1") (ifseqformula "4"))
                                 (rule "polySimp_addAssoc" (formula "42") (term "1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "40"))
                                 (rule "polySimp_mulLiterals" (formula "40") (term "0"))
                                 (rule "polySimp_elimOne" (formula "40") (term "0"))
                                 (rule "inEqSimp_subsumption1" (formula "27") (ifseqformula "3"))
                                 (rule "inEqSimp_homoInEq0" (formula "27") (term "0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0"))
                                 (rule "add_literals" (formula "27") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "27") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "27") (term "0,0"))
                                 (rule "qeq_literals" (formula "27") (term "0"))
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "true_left" (formula "27"))
                                 (rule "newSym_eq" (formula "4") (inst "l=l_1") (inst "newSymDef=add(l_0, mul(classify_sk_0, Z(0(#))))"))
                                 (rule "times_zero_1" (formula "4") (term "1,1,1"))
                                 (rule "add_zero_right" (formula "4") (term "1,1"))
                                 (rule "applyEq" (formula "25") (term "0") (ifseqformula "4"))
                                 (rule "inEqSimp_homoInEq1" (formula "25"))
                                 (rule "polySimp_mulComm0" (formula "25") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "25") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "25") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "25") (term "0"))
                                 (rule "polySimp_addComm1" (formula "25") (term "0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "25") (term "0"))
                                 (rule "add_literals" (formula "25") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "25") (term "1,0"))
                                 (rule "add_zero_right" (formula "25") (term "0"))
                                 (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "4"))
                                 (rule "polySimp_mulComm0" (formula "5") (term "0"))
                                 (rule "polySimp_rightDist" (formula "5") (term "0"))
                                 (rule "polySimp_homoEq" (formula "5"))
                                 (rule "polySimp_mulComm0" (formula "5") (term "0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                                 (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0"))
                                 (rule "polySimp_mulAssoc" (formula "5") (term "0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "5") (term "0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "5") (term "0,1,0"))
                                 (rule "polySimp_addComm1" (formula "5") (term "0"))
                                 (rule "polySimp_addAssoc" (formula "5") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "5") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "5") (term "0,0"))
                                 (rule "add_literals" (formula "5") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "5") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "5") (term "0,0"))
                                 (rule "applyEq" (formula "27") (term "0") (ifseqformula "4"))
                                 (rule "inEqSimp_homoInEq0" (formula "27"))
                                 (rule "polySimp_mulComm0" (formula "27") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "27") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "27") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "27") (term "0"))
                                 (rule "polySimp_addComm1" (formula "27") (term "0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "27") (term "0"))
                                 (rule "add_literals" (formula "27") (term "1,1,0"))
                                 (rule "polySimp_elimOne" (formula "27") (term "1,0"))
                                 (rule "applyEq" (formula "32") (term "0") (ifseqformula "4"))
                                 (rule "inEqSimp_homoInEq1" (formula "32"))
                                 (rule "polySimp_mulComm0" (formula "32") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "32") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "32") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "32") (term "0"))
                                 (rule "applyEq" (formula "23") (term "1,1") (ifseqformula "4"))
                                 (rule "polySimp_addAssoc" (formula "23") (term "1"))
                                 (rule "applyEq" (formula "26") (term "1,0,2,0") (ifseqformula "4"))
                                 (rule "polySimp_addAssoc" (formula "26") (term "0,2,0"))
                                 (rule "polySimp_addComm1" (formula "26") (term "0,0,2,0"))
                                 (rule "polySimp_pullOutFactor2b" (formula "26") (term "0,2,0"))
                                 (rule "add_literals" (formula "26") (term "1,1,0,2,0"))
                                 (rule "times_zero_1" (formula "26") (term "1,0,2,0"))
                                 (rule "add_zero_right" (formula "26") (term "0,2,0"))
                                 (rule "applyEq" (formula "22") (term "0") (ifseqformula "4"))
                                 (rule "inEqSimp_homoInEq0" (formula "22"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "22") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "22") (term "0"))
                                 (rule "polySimp_addComm1" (formula "22") (term "0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "22") (term "0"))
                                 (rule "add_literals" (formula "22") (term "1,1,0"))
                                 (rule "applyEq" (formula "3") (term "1,0,2,0") (ifseqformula "4"))
                                 (rule "polySimp_addAssoc" (formula "3") (term "0,2,0"))
                                 (rule "polySimp_addComm0" (formula "3") (term "0,0,2,0"))
                                 (rule "polySimp_pullOutFactor2b" (formula "3") (term "0,2,0"))
                                 (rule "add_literals" (formula "3") (term "1,1,0,2,0"))
                                 (rule "times_zero_1" (formula "3") (term "1,0,2,0"))
                                 (rule "add_zero_right" (formula "3") (term "0,2,0"))
                                 (rule "applyEq" (formula "49") (term "1") (ifseqformula "4"))
                                 (rule "applyEq" (formula "21") (term "1") (ifseqformula "4"))
                                 (rule "polySimp_sepPosMonomial" (formula "5"))
                                 (rule "polySimp_mulLiterals" (formula "5") (term "1"))
                                 (rule "applyEq" (formula "42") (term "1,1") (ifseqformula "5"))
                                 (rule "polySimp_addComm1" (formula "42") (term "1"))
                                 (rule "applyEq" (formula "40") (term "0") (ifseqformula "5"))
                                 (rule "inEqSimp_homoInEq1" (formula "40"))
                                 (rule "polySimp_mulLiterals" (formula "40") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "40") (term "0"))
                                 (rule "applyEq" (formula "8") (term "1") (ifseqformula "5"))
                                 (rule "applyEq" (formula "1") (term "1,0,1") (ifseqformula "5"))
                                 (rule "polySimp_addComm0" (formula "1") (term "0,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "25"))
                                 (rule "polySimp_mulLiterals" (formula "25") (term "0"))
                                 (rule "polySimp_elimOne" (formula "25") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "27"))
                                 (rule "polySimp_mulComm0" (formula "27") (term "1"))
                                 (rule "polySimp_rightDist" (formula "27") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "27") (term "1,1"))
                                 (rule "mul_literals" (formula "27") (term "0,1"))
                                 (rule "polySimp_elimOne" (formula "27") (term "1,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "32"))
                                 (rule "polySimp_mulLiterals" (formula "32") (term "0"))
                                 (rule "polySimp_elimOne" (formula "32") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "22"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "1"))
                                 (rule "polySimp_rightDist" (formula "22") (term "1"))
                                 (rule "mul_literals" (formula "22") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "22") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "22") (term "1,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "40"))
                                 (rule "polySimp_mulLiterals" (formula "40") (term "0"))
                                 (rule "polySimp_elimOne" (formula "40") (term "0"))
                                 (rule "inEqSimp_exactShadow1" (formula "23") (ifseqformula "42"))
                                 (rule "greater_literals" (formula "23") (term "0"))
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "polySimp_rightDist" (formula "23") (term "1,0"))
                                 (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "23") (term "0,0"))
                                 (rule "polySimp_rightDist" (formula "23") (term "0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,0"))
                                 (rule "mul_literals" (formula "23") (term "0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "23") (term "0,0,0"))
                                 (rule "mul_literals" (formula "23") (term "0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "23") (term "0"))
                                 (rule "polySimp_addComm1" (formula "23") (term "0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "23") (term "0"))
                                 (rule "add_literals" (formula "23") (term "1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "23") (term "0,0"))
                                 (rule "polySimp_addComm1" (formula "23") (term "0,0,0"))
                                 (rule "add_literals" (formula "23") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "23") (term "0,0"))
                                 (rule "add_literals" (formula "23") (term "1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "23"))
                                 (rule "polySimp_mulComm0" (formula "23") (term "1"))
                                 (rule "polySimp_rightDist" (formula "23") (term "1"))
                                 (rule "mul_literals" (formula "23") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "23") (term "1,1"))
                                 (rule "inEqSimp_subsumption6" (formula "23") (ifseqformula "33"))
                                 (rule "greater_literals" (formula "23") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "polySimp_rightDist" (formula "23") (term "1,0"))
                                 (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0"))
                                 (rule "mul_literals" (formula "23") (term "0,1,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "23") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "23") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "23") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "23") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "23") (term "0,0"))
                                 (rule "polySimp_addComm1" (formula "23") (term "0,0,0"))
                                 (rule "add_literals" (formula "23") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "23") (term "0,0"))
                                 (rule "add_literals" (formula "23") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "23") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "23") (term "0,0"))
                                 (rule "qeq_literals" (formula "23") (term "0"))
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "true_left" (formula "23"))
                                 (rule "inEqSimp_exactShadow1" (formula "23") (ifseqformula "43"))
                                 (rule "greater_literals" (formula "23") (term "0"))
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "polySimp_rightDist" (formula "23") (term "1,0"))
                                 (rule "mul_literals" (formula "23") (term "0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "23") (term "0,0"))
                                 (rule "polySimp_rightDist" (formula "23") (term "0,0,0"))
                                 (rule "mul_literals" (formula "23") (term "0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "23") (term "0"))
                                 (rule "polySimp_addComm1" (formula "23") (term "0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "23") (term "0"))
                                 (rule "add_literals" (formula "23") (term "1,1,0"))
                                 (rule "polySimp_addComm1" (formula "23") (term "0,0"))
                                 (rule "add_literals" (formula "23") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "23"))
                                 (rule "polySimp_mulComm0" (formula "23") (term "1"))
                                 (rule "polySimp_rightDist" (formula "23") (term "1"))
                                 (rule "mul_literals" (formula "23") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "23") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "23") (term "1,1"))
                                 (rule "inEqSimp_exactShadow3" (formula "41") (ifseqformula "42"))
                                 (rule "polySimp_mulComm0" (formula "41") (term "0,0"))
                                 (rule "polySimp_addAssoc" (formula "41") (term "0"))
                                 (rule "polySimp_addComm0" (formula "41") (term "0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "41") (term "0"))
                                 (rule "add_literals" (formula "41") (term "1,1,0"))
                                 (rule "polySimp_elimOne" (formula "41") (term "1,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "41"))
                                 (rule "polySimp_mulComm0" (formula "41") (term "1"))
                                 (rule "polySimp_rightDist" (formula "41") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "41") (term "1,1"))
                                 (rule "mul_literals" (formula "41") (term "0,1"))
                                 (rule "inEqSimp_exactShadow3" (formula "31") (ifseqformula "42"))
                                 (rule "mul_literals" (formula "31") (term "0,0"))
                                 (rule "polySimp_addAssoc" (formula "31") (term "0"))
                                 (rule "polySimp_addAssoc" (formula "31") (term "0,0"))
                                 (rule "add_literals" (formula "31") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "31"))
                                 (rule "polySimp_mulComm0" (formula "31") (term "1"))
                                 (rule "polySimp_rightDist" (formula "31") (term "1"))
                                 (rule "mul_literals" (formula "31") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "31") (term "1,1"))
                                 (rule "inEqSimp_subsumption6" (formula "31") (ifseqformula "33"))
                                 (rule "greater_literals" (formula "31") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "31"))
                                 (rule "polySimp_rightDist" (formula "31") (term "1,0"))
                                 (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0"))
                                 (rule "mul_literals" (formula "31") (term "0,1,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "31") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "31") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "31") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "31") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "31") (term "0,0"))
                                 (rule "polySimp_addComm1" (formula "31") (term "0,0,0"))
                                 (rule "add_literals" (formula "31") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "31") (term "0,0"))
                                 (rule "add_literals" (formula "31") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "31") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "31") (term "0,0"))
                                 (rule "qeq_literals" (formula "31") (term "0"))
                                  (builtin "One Step Simplification" (formula "31"))
                                 (rule "true_left" (formula "31"))
                                 (rule "cut_direct" (formula "44") (term "0"))
                                 (branch "CUT: result_22 >= 1 + l_0 TRUE"
                                     (builtin "One Step Simplification" (formula "45"))
                                    (rule "inEqSimp_subsumption1" (formula "41") (ifseqformula "44"))
                                    (rule "inEqSimp_homoInEq0" (formula "41") (term "0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "41") (term "0,0"))
                                    (rule "add_literals" (formula "41") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "41") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "41") (term "0,0"))
                                    (rule "qeq_literals" (formula "41") (term "0"))
                                     (builtin "One Step Simplification" (formula "41"))
                                    (rule "true_left" (formula "41"))
                                    (rule "inEqSimp_exactShadow3" (formula "43") (ifseqformula "41"))
                                    (rule "polySimp_rightDist" (formula "43") (term "0,0"))
                                    (rule "mul_literals" (formula "43") (term "0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "43") (term "0"))
                                    (rule "polySimp_addComm1" (formula "43") (term "0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "43") (term "0"))
                                    (rule "add_literals" (formula "43") (term "1,1,0"))
                                    (rule "polySimp_elimOne" (formula "43") (term "1,0"))
                                    (rule "polySimp_addAssoc" (formula "43") (term "0,0"))
                                    (rule "add_literals" (formula "43") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "43"))
                                    (rule "polySimp_mulComm0" (formula "43") (term "1"))
                                    (rule "polySimp_rightDist" (formula "43") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "43") (term "1,1"))
                                    (rule "mul_literals" (formula "43") (term "0,1"))
                                    (rule "inEqSimp_subsumption1" (formula "40") (ifseqformula "43"))
                                    (rule "inEqSimp_homoInEq0" (formula "40") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "40") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "40") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "40") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "40") (term "0,0"))
                                    (rule "polySimp_addComm1" (formula "40") (term "0,0,0"))
                                    (rule "add_literals" (formula "40") (term "0,0,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "40") (term "0,0"))
                                    (rule "add_literals" (formula "40") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "40") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "40") (term "0,0"))
                                    (rule "qeq_literals" (formula "40") (term "0"))
                                     (builtin "One Step Simplification" (formula "40"))
                                    (rule "true_left" (formula "40"))
                                    (rule "inEqSimp_exactShadow3" (formula "43") (ifseqformula "41"))
                                    (rule "polySimp_rightDist" (formula "43") (term "0,0"))
                                    (rule "mul_literals" (formula "43") (term "0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "43") (term "0"))
                                    (rule "polySimp_addComm1" (formula "43") (term "0,0"))
                                    (rule "add_literals" (formula "43") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "43") (term "0"))
                                    (rule "add_literals" (formula "43") (term "1,1,0"))
                                    (rule "polySimp_elimOne" (formula "43") (term "1,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "43"))
                                    (rule "mul_literals" (formula "43") (term "1"))
                                    (rule "inEqSimp_subsumption1" (formula "43") (ifseqformula "24"))
                                    (rule "leq_literals" (formula "43") (term "0"))
                                     (builtin "One Step Simplification" (formula "43"))
                                    (rule "true_left" (formula "43"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " self.sorted_splitters[l_0 * -1 + result_22] >= 1 + self.sorted_splitters[1] TRUE"
                                       (rule "polySimp_homoEq" (formula "2"))
                                       (rule "times_zero_2" (formula "2") (term "1,0"))
                                       (rule "add_zero_right" (formula "2") (term "0"))
                                       (rule "polySimp_sepNegMonomial" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                       (rule "applyEq" (formula "24") (term "0") (ifseqformula "2"))
                                       (rule "inEqSimp_homoInEq1" (formula "24"))
                                       (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "24") (term "1,0"))
                                       (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0"))
                                       (rule "polySimp_mulAssoc" (formula "24") (term "0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "24") (term "0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "24") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "24") (term "0"))
                                       (rule "polySimp_addComm1" (formula "24") (term "0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "24") (term "0"))
                                       (rule "add_literals" (formula "24") (term "1,1,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0"))
                                       (rule "add_literals" (formula "24") (term "1,1,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "24"))
                                       (rule "polySimp_mulLiterals" (formula "24") (term "0"))
                                       (rule "polySimp_elimOne" (formula "24") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "46") (term "1") (ifseqformula "1"))
                                       (rule "inEqSimp_homoInEq0" (formula "46") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "46") (term "0,0,1"))
                                       (rule "add_literals" (formula "46") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "46") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "46") (term "0,0,1"))
                                       (rule "qeq_literals" (formula "46") (term "0,1"))
                                        (builtin "One Step Simplification" (formula "46"))
                                       (rule "true_left" (formula "46"))
                                       (rule "inEqSimp_subsumption1" (formula "24") (ifseqformula "33"))
                                       (rule "inEqSimp_homoInEq0" (formula "24") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "24") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "24") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "24") (term "0,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "24") (term "0,0"))
                                       (rule "polySimp_addComm1" (formula "24") (term "0,0,0"))
                                       (rule "add_literals" (formula "24") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor2b" (formula "24") (term "0,0"))
                                       (rule "add_literals" (formula "24") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "24") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "24") (term "0,0"))
                                       (rule "qeq_literals" (formula "24") (term "0"))
                                        (builtin "One Step Simplification" (formula "24"))
                                       (rule "true_left" (formula "24"))
                                       (rule "elimGcdEq" (formula "2") (inst "elimGcdRightDiv=add(l_1, l_0)") (inst "elimGcdLeftDiv=result_22") (inst "elimGcd=Z(2(#))"))
                                        (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "48")))
                                       (rule "mul_literals" (formula "2") (term "0,1,0,0,0"))
                                       (rule "mul_literals" (formula "2") (term "0,1,0,1,0"))
                                       (rule "add_literals" (formula "2") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "0,1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "2") (term "1,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "0,1,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "2") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor0" (formula "2") (term "0,0,0,0,0"))
                                       (rule "add_literals" (formula "2") (term "1,0,0,0,0,0"))
                                       (rule "times_zero_1" (formula "2") (term "0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "2") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor0" (formula "2") (term "0,0,0"))
                                       (rule "add_literals" (formula "2") (term "1,0,0,0"))
                                       (rule "times_zero_1" (formula "2") (term "0,0,0"))
                                       (rule "leq_literals" (formula "2") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
                                       (rule "add_literals" (formula "2") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "2") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "2") (term "0,0"))
                                       (rule "polySimp_pullOutFactor0" (formula "2") (term "0,0"))
                                       (rule "add_literals" (formula "2") (term "1,0,0"))
                                       (rule "times_zero_1" (formula "2") (term "0,0"))
                                       (rule "qeq_literals" (formula "2") (term "0"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "closeFalse" (formula "2"))
                                    )
                                    (branch " self.sorted_splitters[l_0 * -1 + result_22] >= 1 + self.sorted_splitters[1] FALSE"
                                       (rule "polySimp_homoEq" (formula "1"))
                                       (rule "mul_literals" (formula "1") (term "1,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                                       (rule "polySimp_addComm0" (formula "1") (term "0,0,0"))
                                       (rule "inEqSimp_geqRight" (formula "46"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                       (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0,0"))
                                       (rule "polySimp_sepNegMonomial" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                       (rule "applyEq" (formula "24") (term "0") (ifseqformula "2"))
                                       (rule "inEqSimp_homoInEq1" (formula "24"))
                                       (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "24") (term "1,0"))
                                       (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0"))
                                       (rule "polySimp_rightDist" (formula "24") (term "0,1,0"))
                                       (rule "mul_literals" (formula "24") (term "0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "24") (term "1,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "24") (term "0"))
                                       (rule "polySimp_addComm1" (formula "24") (term "0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "24") (term "0"))
                                       (rule "add_literals" (formula "24") (term "1,1,0"))
                                       (rule "polySimp_addAssoc" (formula "24") (term "0,0"))
                                       (rule "polySimp_addComm1" (formula "24") (term "0,0,0"))
                                       (rule "add_literals" (formula "24") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0"))
                                       (rule "add_literals" (formula "24") (term "1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "24"))
                                       (rule "polySimp_mulLiterals" (formula "24") (term "0"))
                                       (rule "polySimp_elimOne" (formula "24") (term "0"))
                                       (rule "elimGcdEq" (formula "2") (inst "elimGcdRightDiv=add(add(Z(neglit(1(#))), l_1), l_0)") (inst "elimGcdLeftDiv=result_22") (inst "elimGcd=Z(2(#))"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "mul_literals" (formula "2") (term "0,1,0,0,1"))
                                       (rule "mul_literals" (formula "2") (term "0,1,0,0,0"))
                                       (rule "add_literals" (formula "2") (term "1,0,0"))
                                       (rule "mul_literals" (formula "2") (term "0,1,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "2") (term "1,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "2") (term "0,1,0,0,1"))
                                       (rule "mul_literals" (formula "2") (term "0,0,1,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "2") (term "0,1,0,0,0"))
                                       (rule "mul_literals" (formula "2") (term "0,0,1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "2") (term "0,1,0,1,0"))
                                       (rule "mul_literals" (formula "2") (term "0,0,1,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "2") (term "0,0,1"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0,0,0,1"))
                                       (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0,1"))
                                       (rule "add_literals" (formula "2") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "2") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "2") (term "0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "2") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0,0"))
                                       (rule "add_literals" (formula "2") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "2") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "2") (term "0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "2") (term "0,1,0"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0,0,1,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,1,0"))
                                       (rule "add_literals" (formula "2") (term "1,1,0,1,0"))
                                       (rule "times_zero_1" (formula "2") (term "1,0,1,0"))
                                       (rule "add_zero_right" (formula "2") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "2") (term "0,0,1"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0,0,0,1"))
                                       (rule "add_literals" (formula "2") (term "0,0,0,0,1"))
                                       (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0,1"))
                                       (rule "add_literals" (formula "2") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "2") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "2") (term "0,0,1"))
                                       (rule "equal_literals" (formula "2") (term "0,1"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "polySimp_addAssoc" (formula "2") (term "0,1,0"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0,0,1,0"))
                                       (rule "add_literals" (formula "2") (term "0,0,0,1,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,1,0"))
                                       (rule "add_literals" (formula "2") (term "1,1,0,1,0"))
                                       (rule "times_zero_1" (formula "2") (term "1,0,1,0"))
                                       (rule "add_zero_right" (formula "2") (term "0,1,0"))
                                       (rule "qeq_literals" (formula "2") (term "1,0"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0,0,0"))
                                       (rule "add_literals" (formula "2") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
                                       (rule "add_literals" (formula "2") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "2") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "2") (term "0,0"))
                                       (rule "leq_literals" (formula "2") (term "0"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "closeFalse" (formula "2"))
                                    )
                                 )
                                 (branch "CUT: result_22 >= 1 + l_0 FALSE"
                                     (builtin "One Step Simplification" (formula "44"))
                                    (rule "true_left" (formula "44"))
                                    (rule "inEqSimp_geqRight" (formula "45"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1"))
                                    (rule "inEqSimp_antiSymm" (formula "42") (ifseqformula "1"))
                                    (rule "applyEq" (formula "2") (term "1,0,2,0,0,0") (ifseqformula "42"))
                                    (rule "polySimp_pullOutFactor2" (formula "2") (term "0,2,0,0,0"))
                                    (rule "add_literals" (formula "2") (term "1,0,2,0,0,0"))
                                    (rule "times_zero_1" (formula "2") (term "0,2,0,0,0"))
                                    (rule "inEqSimp_homoInEq1" (formula "2") (term "0,0"))
                                    (rule "polySimp_addComm1" (formula "2") (term "0,0,0"))
                                    (rule "applyEq" (formula "46") (term "0,0") (ifseqformula "42"))
                                    (rule "inEqSimp_homoInEq0" (formula "46") (term "0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "46") (term "0,0"))
                                    (rule "add_literals" (formula "46") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "46") (term "1,0,0"))
                                    (rule "applyEq" (formula "45") (term "0") (ifseqformula "42"))
                                    (rule "inEqSimp_homoInEq0" (formula "45"))
                                    (rule "polySimp_pullOutFactor0b" (formula "45") (term "0"))
                                    (rule "add_literals" (formula "45") (term "1,1,0"))
                                    (rule "polySimp_elimOne" (formula "45") (term "1,0"))
                                    (rule "applyEq" (formula "43") (term "0") (ifseqformula "42"))
                                    (rule "inEqSimp_homoInEq1" (formula "43"))
                                    (rule "polySimp_pullOutFactor1" (formula "43") (term "0"))
                                    (rule "add_literals" (formula "43") (term "1,0"))
                                    (rule "times_zero_1" (formula "43") (term "0"))
                                    (rule "leq_literals" (formula "43"))
                                    (rule "true_left" (formula "43"))
                                    (rule "applyEq" (formula "32") (term "0") (ifseqformula "42"))
                                    (rule "applyEq" (formula "45") (term "1,0,2,0,1") (ifseqformula "42"))
                                    (rule "polySimp_pullOutFactor2" (formula "45") (term "0,2,0,1"))
                                    (rule "add_literals" (formula "45") (term "1,0,2,0,1"))
                                    (rule "times_zero_1" (formula "45") (term "0,2,0,1"))
                                    (rule "inEqSimp_commuteGeq" (formula "45") (term "1"))
                                    (rule "applyEq" (formula "24") (term "0,0") (ifseqformula "42"))
                                    (rule "inEqSimp_homoInEq1" (formula "24"))
                                    (rule "polySimp_mulLiterals" (formula "24") (term "1,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "24") (term "0"))
                                    (rule "add_literals" (formula "24") (term "1,1,0"))
                                    (rule "applyEq" (formula "49") (term "0") (ifseqformula "42"))
                                    (rule "polySimp_homoEq" (formula "49"))
                                    (rule "polySimp_pullOutFactor1b" (formula "49") (term "0"))
                                    (rule "add_literals" (formula "49") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "49") (term "1,0"))
                                    (rule "add_zero_right" (formula "49") (term "0"))
                                    (rule "applyEq" (formula "1") (term "0") (ifseqformula "42"))
                                    (rule "inEqSimp_homoInEq0" (formula "1"))
                                    (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                                    (rule "add_literals" (formula "1") (term "1,0"))
                                    (rule "times_zero_1" (formula "1") (term "0"))
                                    (rule "qeq_literals" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "applyEq" (formula "42") (term "0") (ifseqformula "41"))
                                    (rule "inEqSimp_homoInEq0" (formula "42"))
                                    (rule "polySimp_pullOutFactor0b" (formula "42") (term "0"))
                                    (rule "add_literals" (formula "42") (term "1,1,0"))
                                    (rule "polySimp_elimOne" (formula "42") (term "1,0"))
                                    (rule "applyEq" (formula "39") (term "1") (ifseqformula "41"))
                                    (rule "applyEq" (formula "1") (term "0,1,1") (ifseqformula "41"))
                                    (rule "polySimp_pullOutFactor0b" (formula "1") (term "1"))
                                    (rule "add_literals" (formula "1") (term "1,1,1"))
                                    (rule "times_zero_1" (formula "1") (term "1,1"))
                                    (rule "add_zero_right" (formula "1") (term "1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "44") (term "0"))
                                    (rule "mul_literals" (formula "44") (term "1,0"))
                                    (rule "replace_known_left" (formula "44") (term "0") (ifseqformula "31"))
                                     (builtin "One Step Simplification" (formula "44"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "43"))
                                    (rule "mul_literals" (formula "43") (term "1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "23"))
                                    (rule "polySimp_mulLiterals" (formula "23") (term "0"))
                                    (rule "polySimp_elimOne" (formula "23") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "42"))
                                    (rule "polySimp_mulComm0" (formula "42") (term "1"))
                                    (rule "polySimp_rightDist" (formula "42") (term "1"))
                                    (rule "mul_literals" (formula "42") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "42") (term "1,1"))
                                    (rule "inEqSimp_contradEq7" (formula "47") (ifseqformula "25"))
                                    (rule "times_zero_1" (formula "47") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "47") (term "0,0"))
                                    (rule "leq_literals" (formula "47") (term "0"))
                                     (builtin "One Step Simplification" (formula "47"))
                                    (rule "false_right" (formula "47"))
                                    (rule "inEqSimp_subsumption1" (formula "31") (ifseqformula "24"))
                                    (rule "leq_literals" (formula "31") (term "0"))
                                     (builtin "One Step Simplification" (formula "31"))
                                    (rule "true_left" (formula "31"))
                                    (rule "inEqSimp_subsumption1" (formula "41") (ifseqformula "24"))
                                    (rule "leq_literals" (formula "41") (term "0"))
                                     (builtin "One Step Simplification" (formula "41"))
                                    (rule "true_left" (formula "41"))
                                    (rule "inEqSimp_subsumption1" (formula "23") (ifseqformula "27"))
                                    (rule "inEqSimp_homoInEq0" (formula "23") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "23") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "23") (term "1,0,0"))
                                    (rule "mul_literals" (formula "23") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "23") (term "0,0"))
                                    (rule "polySimp_addComm1" (formula "23") (term "0,0,0"))
                                    (rule "add_literals" (formula "23") (term "0,0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0"))
                                    (rule "add_literals" (formula "23") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "23") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "23") (term "0,0"))
                                    (rule "qeq_literals" (formula "23") (term "0"))
                                     (builtin "One Step Simplification" (formula "23"))
                                    (rule "true_left" (formula "23"))
                                    (rule "all_pull_out3" (formula "35") (term "0"))
                                    (rule "all_pull_out3" (formula "17") (term "0"))
                                    (rule "onlyCreatedObjectsAreReferencedFinal" (formula "32") (term "0,0") (ifseqformula "9") (ifseqformula "6"))
                                    (rule "replace_known_right" (formula "32") (term "0") (ifseqformula "44"))
                                     (builtin "One Step Simplification" (formula "32"))
                                    (rule "onlyCreatedObjectsAreReferencedFinal" (formula "15") (term "0") (ifseqformula "9") (ifseqformula "6"))
                                    (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "16"))
                                    (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "44"))
                                     (builtin "One Step Simplification" (formula "15"))
                                    (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "16"))
                                    (rule "shift_paren_or" (formula "36") (term "0,0"))
                                    (rule "shift_paren_or" (formula "17") (term "0,0"))
                                    (rule "shift_paren_or" (formula "36") (term "0,0,0"))
                                    (rule "shift_paren_or" (formula "17") (term "0,0,0"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " self.sorted_splitters[1] <= -1 + self.sorted_splitters[0] TRUE"
                                       (rule "eqSymm" (formula "2"))
                                       (rule "applyEq" (formula "9") (term "1") (ifseqformula "2"))
                                       (rule "applyEqRigid" (formula "6") (term "1") (ifseqformula "2"))
                                       (rule "inEqSimp_subsumption0" (formula "42") (ifseqformula "1"))
                                       (rule "inEqSimp_homoInEq0" (formula "42") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "42") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "42") (term "1,0,0"))
                                       (rule "mul_literals" (formula "42") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "42") (term "0,0"))
                                       (rule "polySimp_addComm0" (formula "42") (term "0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "42") (term "0,0"))
                                       (rule "add_literals" (formula "42") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "42") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "42") (term "0,0"))
                                       (rule "qeq_literals" (formula "42") (term "0"))
                                        (builtin "One Step Simplification" (formula "42"))
                                       (rule "true_left" (formula "42"))
                                       (rule "elimGcdEq" (formula "2") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(2(#))"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "add_zero_left" (formula "2") (term "0,0,0"))
                                       (rule "add_zero_left" (formula "2") (term "0,0,1"))
                                       (rule "times_zero_1" (formula "2") (term "1,0,1,0"))
                                       (rule "add_literals" (formula "2") (term "1,0,0"))
                                       (rule "times_zero_1" (formula "2") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "2") (term "0,0,1"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "leq_literals" (formula "2") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "add_zero_left" (formula "2") (term "0,0"))
                                       (rule "qeq_literals" (formula "2") (term "0"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "applyEq" (formula "31") (term "0,1,1") (ifseqformula "2"))
                                       (rule "times_zero_2" (formula "31") (term "1,1"))
                                       (rule "add_zero_right" (formula "31") (term "1"))
                                       (rule "applyEqRigid" (formula "23") (term "1,1") (ifseqformula "2"))
                                       (rule "add_zero_right" (formula "23") (term "1"))
                                       (rule "applyEqRigid" (formula "4") (term "0,2,0") (ifseqformula "2"))
                                       (rule "inEqSimp_homoInEq1" (formula "4"))
                                       (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
                                       (rule "add_literals" (formula "4") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "4") (term "1,0"))
                                       (rule "add_zero_right" (formula "4") (term "0"))
                                       (rule "leq_literals" (formula "4"))
                                       (rule "closeFalse" (formula "4"))
                                    )
                                    (branch " self.sorted_splitters[1] <= -1 + self.sorted_splitters[0] FALSE"
                                       (rule "eqSymm" (formula "1"))
                                       (rule "inEqSimp_leqRight" (formula "42"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                       (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0,0"))
                                       (rule "applyEq" (formula "9") (term "1") (ifseqformula "2"))
                                       (rule "applyEq" (formula "6") (term "1") (ifseqformula "2"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1"))
                                       (rule "elimGcdEq" (formula "2") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(2(#))"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "times_zero_1" (formula "2") (term "1,0,0,0"))
                                       (rule "times_zero_1" (formula "2") (term "1,0,1,0"))
                                       (rule "times_zero_1" (formula "2") (term "1,0,0,1"))
                                       (rule "add_literals" (formula "2") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "2") (term "0,0,0"))
                                       (rule "add_zero_right" (formula "2") (term "0,1,0"))
                                       (rule "add_zero_right" (formula "2") (term "0,0,1"))
                                       (rule "leq_literals" (formula "2") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "equal_literals" (formula "2") (term "0,1"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "qeq_literals" (formula "2") (term "0"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "closeFalse" (formula "2"))
                                    )
                                 )
                              )
                              (branch " self.sorted_splitters[l_0 * -1 + result_21] >= 1 + self.sorted_splitters[0] FALSE"
                                 (rule "polySimp_homoEq" (formula "3"))
                                 (rule "mul_literals" (formula "3") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "3") (term "0"))
                                 (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "3") (term "0,0,0"))
                                 (rule "inEqSimp_geqRight" (formula "45"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,0"))
                                 (rule "polySimp_sepNegMonomial" (formula "4"))
                                 (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                 (rule "applyEq" (formula "42") (term "1,1") (ifseqformula "4"))
                                 (rule "polySimp_addAssoc" (formula "42") (term "1"))
                                 (rule "polySimp_addAssoc" (formula "42") (term "0,1"))
                                 (rule "add_literals" (formula "42") (term "0,0,1"))
                                 (rule "applyEq" (formula "40") (term "0") (ifseqformula "4"))
                                 (rule "inEqSimp_homoInEq1" (formula "40"))
                                 (rule "polySimp_mulComm0" (formula "40") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "40") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "40") (term "0,1,0"))
                                 (rule "mul_literals" (formula "40") (term "0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "40") (term "1,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "40") (term "0"))
                                 (rule "polySimp_addAssoc" (formula "40") (term "0,0"))
                                 (rule "polySimp_addComm1" (formula "40") (term "0,0,0"))
                                 (rule "add_literals" (formula "40") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "40") (term "0,0"))
                                 (rule "add_literals" (formula "40") (term "1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "40"))
                                 (rule "polySimp_mulLiterals" (formula "40") (term "0"))
                                 (rule "polySimp_elimOne" (formula "40") (term "0"))
                                 (rule "newSym_eq" (formula "4") (inst "l=l_1") (inst "newSymDef=add(add(Z(neglit(1(#))), l_0),
    mul(classify_sk_0, Z(0(#))))"))
                                 (rule "times_zero_1" (formula "4") (term "1,1,1"))
                                 (rule "add_zero_right" (formula "4") (term "1,1"))
                                 (rule "polySimp_addAssoc" (formula "4") (term "1"))
                                 (rule "polySimp_addComm0" (formula "4") (term "0,1"))
                                 (rule "applyEq" (formula "22") (term "0") (ifseqformula "4"))
                                 (rule "inEqSimp_homoInEq0" (formula "22"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "22") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "22") (term "0,1,0"))
                                 (rule "mul_literals" (formula "22") (term "0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "22") (term "0"))
                                 (rule "polySimp_addComm1" (formula "22") (term "0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "22") (term "0"))
                                 (rule "add_literals" (formula "22") (term "1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "22") (term "0,0"))
                                 (rule "add_literals" (formula "22") (term "0,0,0"))
                                 (rule "applyEq" (formula "33") (term "0") (ifseqformula "4"))
                                 (rule "inEqSimp_homoInEq1" (formula "33"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "0,1,0"))
                                 (rule "mul_literals" (formula "33") (term "0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "33") (term "0"))
                                 (rule "polySimp_addAssoc" (formula "33") (term "0,0"))
                                 (rule "add_literals" (formula "33") (term "0,0,0"))
                                 (rule "applyEq" (formula "23") (term "1,1") (ifseqformula "4"))
                                 (rule "polySimp_addAssoc" (formula "23") (term "1"))
                                 (rule "polySimp_addAssoc" (formula "23") (term "0,1"))
                                 (rule "add_literals" (formula "23") (term "0,0,1"))
                                 (rule "add_zero_left" (formula "23") (term "0,1"))
                                 (rule "applyEq" (formula "25") (term "0") (ifseqformula "4"))
                                 (rule "inEqSimp_homoInEq1" (formula "25"))
                                 (rule "polySimp_mulComm0" (formula "25") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "25") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "25") (term "0,1,0"))
                                 (rule "mul_literals" (formula "25") (term "0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "25") (term "0"))
                                 (rule "polySimp_addComm1" (formula "25") (term "0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "25") (term "0"))
                                 (rule "add_literals" (formula "25") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "25") (term "1,0"))
                                 (rule "add_zero_right" (formula "25") (term "0"))
                                 (rule "polySimp_addAssoc" (formula "25") (term "0"))
                                 (rule "add_literals" (formula "25") (term "0,0"))
                                 (rule "applyEq" (formula "26") (term "1,0,2,0") (ifseqformula "4"))
                                 (rule "polySimp_addAssoc" (formula "26") (term "0,2,0"))
                                 (rule "polySimp_addComm1" (formula "26") (term "0,0,2,0"))
                                 (rule "polySimp_pullOutFactor2b" (formula "26") (term "0,2,0"))
                                 (rule "add_literals" (formula "26") (term "1,1,0,2,0"))
                                 (rule "times_zero_1" (formula "26") (term "1,0,2,0"))
                                 (rule "add_zero_right" (formula "26") (term "0,2,0"))
                                 (rule "polySimp_addAssoc" (formula "26") (term "0,2,0"))
                                 (rule "add_literals" (formula "26") (term "0,0,2,0"))
                                 (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "4"))
                                 (rule "polySimp_mulComm0" (formula "5") (term "0"))
                                 (rule "polySimp_rightDist" (formula "5") (term "0"))
                                 (rule "polySimp_homoEq" (formula "5"))
                                 (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "5") (term "0,1,1,0"))
                                 (rule "mul_literals" (formula "5") (term "0,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                                 (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "5") (term "0,1,0"))
                                 (rule "mul_literals" (formula "5") (term "0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "5") (term "1,0,1,0"))
                                 (rule "polySimp_addComm1" (formula "5") (term "0"))
                                 (rule "polySimp_addAssoc" (formula "5") (term "0,0"))
                                 (rule "polySimp_addComm1" (formula "5") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "5") (term "0,0"))
                                 (rule "add_literals" (formula "5") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "5") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "5") (term "0,0"))
                                 (rule "polySimp_addAssoc" (formula "5") (term "0,0"))
                                 (rule "add_literals" (formula "5") (term "0,0,0"))
                                 (rule "applyEq" (formula "28") (term "1,0,2,0") (ifseqformula "4"))
                                 (rule "polySimp_addAssoc" (formula "28") (term "0,2,0"))
                                 (rule "polySimp_addComm0" (formula "28") (term "0,0,2,0"))
                                 (rule "polySimp_pullOutFactor2b" (formula "28") (term "0,2,0"))
                                 (rule "add_literals" (formula "28") (term "1,1,0,2,0"))
                                 (rule "times_zero_1" (formula "28") (term "1,0,2,0"))
                                 (rule "add_zero_right" (formula "28") (term "0,2,0"))
                                 (rule "applyEq" (formula "1") (term "1,0,2,0") (ifseqformula "4"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,2,0"))
                                 (rule "polySimp_addComm0" (formula "1") (term "0,0,2,0"))
                                 (rule "polySimp_pullOutFactor2b" (formula "1") (term "0,2,0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0,2,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,2,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,2,0"))
                                 (rule "applyEq" (formula "27") (term "0") (ifseqformula "4"))
                                 (rule "inEqSimp_homoInEq0" (formula "27"))
                                 (rule "polySimp_mulComm0" (formula "27") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "27") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "27") (term "0,1,0"))
                                 (rule "mul_literals" (formula "27") (term "0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "27") (term "0"))
                                 (rule "polySimp_addComm1" (formula "27") (term "0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "27") (term "0"))
                                 (rule "add_literals" (formula "27") (term "1,1,0"))
                                 (rule "polySimp_elimOne" (formula "27") (term "1,0"))
                                 (rule "polySimp_addAssoc" (formula "27") (term "0,0"))
                                 (rule "add_literals" (formula "27") (term "0,0,0"))
                                 (rule "applyEq" (formula "50") (term "1") (ifseqformula "4"))
                                 (rule "applyEq" (formula "21") (term "1") (ifseqformula "4"))
                                 (rule "polySimp_sepPosMonomial" (formula "5"))
                                 (rule "polySimp_mulComm0" (formula "5") (term "1"))
                                 (rule "polySimp_rightDist" (formula "5") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                                 (rule "mul_literals" (formula "5") (term "0,1"))
                                 (rule "applyEqRigid" (formula "41") (term "0") (ifseqformula "5"))
                                 (rule "inEqSimp_homoInEq1" (formula "41"))
                                 (rule "polySimp_mulComm0" (formula "41") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "41") (term "1,0"))
                                 (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0"))
                                 (rule "mul_literals" (formula "41") (term "0,1,0"))
                                 (rule "polySimp_addComm1" (formula "41") (term "0"))
                                 (rule "polySimp_addAssoc" (formula "41") (term "0,0"))
                                 (rule "add_literals" (formula "41") (term "0,0,0"))
                                 (rule "applyEqRigid" (formula "43") (term "1,1") (ifseqformula "5"))
                                 (rule "polySimp_addComm1" (formula "43") (term "1"))
                                 (rule "polySimp_addAssoc" (formula "43") (term "0,1"))
                                 (rule "add_literals" (formula "43") (term "0,0,1"))
                                 (rule "applyEqRigid" (formula "8") (term "1") (ifseqformula "5"))
                                 (rule "applyEqRigid" (formula "2") (term "1,0,1") (ifseqformula "5"))
                                 (rule "polySimp_addComm0" (formula "2") (term "0,1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "22"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "1"))
                                 (rule "polySimp_rightDist" (formula "22") (term "1"))
                                 (rule "mul_literals" (formula "22") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "22") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "22") (term "1,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "33"))
                                 (rule "polySimp_mulLiterals" (formula "33") (term "0"))
                                 (rule "polySimp_elimOne" (formula "33") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "25"))
                                 (rule "polySimp_mulLiterals" (formula "25") (term "0"))
                                 (rule "polySimp_elimOne" (formula "25") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "27"))
                                 (rule "polySimp_mulComm0" (formula "27") (term "1"))
                                 (rule "polySimp_rightDist" (formula "27") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "27") (term "1,1"))
                                 (rule "mul_literals" (formula "27") (term "0,1"))
                                 (rule "polySimp_elimOne" (formula "27") (term "1,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "41"))
                                 (rule "polySimp_mulLiterals" (formula "41") (term "0"))
                                 (rule "polySimp_elimOne" (formula "41") (term "0"))
                                 (rule "inEqSimp_antiSymm" (formula "28") (ifseqformula "1"))
                                 (rule "applyEq" (formula "29") (term "0") (ifseqformula "28"))
                                 (rule "inEqSimp_homoInEq1" (formula "29"))
                                 (rule "polySimp_pullOutFactor1" (formula "29") (term "0"))
                                 (rule "add_literals" (formula "29") (term "1,0"))
                                 (rule "times_zero_1" (formula "29") (term "0"))
                                 (rule "leq_literals" (formula "29"))
                                 (rule "true_left" (formula "29"))
                                 (rule "applyEq" (formula "1") (term "0") (ifseqformula "28"))
                                 (rule "inEqSimp_homoInEq0" (formula "1"))
                                 (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                                 (rule "add_literals" (formula "1") (term "1,0"))
                                 (rule "times_zero_1" (formula "1") (term "0"))
                                 (rule "qeq_literals" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "inEqSimp_exactShadow1" (formula "22") (ifseqformula "42"))
                                 (rule "greater_literals" (formula "22") (term "0"))
                                  (builtin "One Step Simplification" (formula "22"))
                                 (rule "polySimp_rightDist" (formula "22") (term "1,0"))
                                 (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "22") (term "0,0"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "0,0,0"))
                                 (rule "polySimp_rightDist" (formula "22") (term "0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "22") (term "1,0,1,0"))
                                 (rule "mul_literals" (formula "22") (term "0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "22") (term "0"))
                                 (rule "polySimp_addComm1" (formula "22") (term "0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "22") (term "0"))
                                 (rule "add_literals" (formula "22") (term "1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "22") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "22") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "22") (term "0,0"))
                                 (rule "add_literals" (formula "22") (term "1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "22"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "1"))
                                 (rule "polySimp_rightDist" (formula "22") (term "1"))
                                 (rule "mul_literals" (formula "22") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "22") (term "1,1"))
                                 (rule "inEqSimp_subsumption6" (formula "22") (ifseqformula "33"))
                                 (rule "greater_literals" (formula "22") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "22"))
                                 (rule "polySimp_rightDist" (formula "22") (term "1,0"))
                                 (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0"))
                                 (rule "mul_literals" (formula "22") (term "0,1,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "22") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "22") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "22") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "22") (term "0,0"))
                                 (rule "polySimp_addComm1" (formula "22") (term "0,0,0"))
                                 (rule "add_literals" (formula "22") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "22") (term "0,0"))
                                 (rule "add_literals" (formula "22") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "22") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "22") (term "0,0"))
                                 (rule "qeq_literals" (formula "22") (term "0"))
                                  (builtin "One Step Simplification" (formula "22"))
                                 (rule "true_left" (formula "22"))
                                 (rule "inEqSimp_exactShadow1" (formula "22") (ifseqformula "43"))
                                 (rule "greater_literals" (formula "22") (term "0"))
                                  (builtin "One Step Simplification" (formula "22"))
                                 (rule "polySimp_rightDist" (formula "22") (term "0,0"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "0,0,0"))
                                 (rule "polySimp_rightDist" (formula "22") (term "1,0"))
                                 (rule "mul_literals" (formula "22") (term "0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "22") (term "0"))
                                 (rule "polySimp_addComm1" (formula "22") (term "0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "22") (term "0"))
                                 (rule "add_literals" (formula "22") (term "1,1,0"))
                                 (rule "polySimp_addComm0" (formula "22") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "22"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "1"))
                                 (rule "polySimp_rightDist" (formula "22") (term "1"))
                                 (rule "mul_literals" (formula "22") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "22") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "22") (term "1,1"))
                                 (rule "inEqSimp_exactShadow3" (formula "31") (ifseqformula "42"))
                                 (rule "mul_literals" (formula "31") (term "0,0"))
                                 (rule "polySimp_addAssoc" (formula "31") (term "0"))
                                 (rule "polySimp_addAssoc" (formula "31") (term "0,0"))
                                 (rule "add_literals" (formula "31") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "31"))
                                 (rule "polySimp_mulComm0" (formula "31") (term "1"))
                                 (rule "polySimp_rightDist" (formula "31") (term "1"))
                                 (rule "mul_literals" (formula "31") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "31") (term "1,1"))
                                 (rule "inEqSimp_subsumption6" (formula "31") (ifseqformula "33"))
                                 (rule "greater_literals" (formula "31") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "31"))
                                 (rule "polySimp_rightDist" (formula "31") (term "1,0"))
                                 (rule "mul_literals" (formula "31") (term "0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "31") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "31") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "31") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "31") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "31") (term "0,0"))
                                 (rule "polySimp_addComm1" (formula "31") (term "0,0,0"))
                                 (rule "add_literals" (formula "31") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "31") (term "0,0"))
                                 (rule "add_literals" (formula "31") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "31") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "31") (term "0,0"))
                                 (rule "qeq_literals" (formula "31") (term "0"))
                                  (builtin "One Step Simplification" (formula "31"))
                                 (rule "true_left" (formula "31"))
                                 (rule "inEqSimp_exactShadow3" (formula "41") (ifseqformula "42"))
                                 (rule "polySimp_mulComm0" (formula "41") (term "0,0"))
                                 (rule "polySimp_addAssoc" (formula "41") (term "0"))
                                 (rule "polySimp_addComm0" (formula "41") (term "0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "41") (term "0"))
                                 (rule "add_literals" (formula "41") (term "1,1,0"))
                                 (rule "polySimp_elimOne" (formula "41") (term "1,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "41"))
                                 (rule "polySimp_mulComm0" (formula "41") (term "1"))
                                 (rule "polySimp_rightDist" (formula "41") (term "1"))
                                 (rule "mul_literals" (formula "41") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "41") (term "1,1"))
                                 (rule "cut_direct" (formula "44") (term "0"))
                                 (branch "CUT: result_22 >= 1 + l_0 TRUE"
                                     (builtin "One Step Simplification" (formula "45"))
                                    (rule "inEqSimp_subsumption1" (formula "41") (ifseqformula "44"))
                                    (rule "inEqSimp_homoInEq0" (formula "41") (term "0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "41") (term "0,0"))
                                    (rule "add_literals" (formula "41") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "41") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "41") (term "0,0"))
                                    (rule "qeq_literals" (formula "41") (term "0"))
                                     (builtin "One Step Simplification" (formula "41"))
                                    (rule "true_left" (formula "41"))
                                    (rule "inEqSimp_exactShadow3" (formula "43") (ifseqformula "41"))
                                    (rule "polySimp_rightDist" (formula "43") (term "0,0"))
                                    (rule "mul_literals" (formula "43") (term "0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "43") (term "0"))
                                    (rule "polySimp_addComm1" (formula "43") (term "0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "43") (term "0"))
                                    (rule "add_literals" (formula "43") (term "1,1,0"))
                                    (rule "polySimp_elimOne" (formula "43") (term "1,0"))
                                    (rule "polySimp_addAssoc" (formula "43") (term "0,0"))
                                    (rule "add_literals" (formula "43") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "43"))
                                    (rule "polySimp_mulComm0" (formula "43") (term "1"))
                                    (rule "polySimp_rightDist" (formula "43") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "43") (term "1,1"))
                                    (rule "mul_literals" (formula "43") (term "0,1"))
                                    (rule "inEqSimp_subsumption1" (formula "40") (ifseqformula "43"))
                                    (rule "inEqSimp_homoInEq0" (formula "40") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "40") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "40") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "40") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "40") (term "0,0"))
                                    (rule "polySimp_addComm1" (formula "40") (term "0,0,0"))
                                    (rule "add_literals" (formula "40") (term "0,0,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "40") (term "0,0"))
                                    (rule "add_literals" (formula "40") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "40") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "40") (term "0,0"))
                                    (rule "qeq_literals" (formula "40") (term "0"))
                                     (builtin "One Step Simplification" (formula "40"))
                                    (rule "true_left" (formula "40"))
                                    (rule "inEqSimp_exactShadow3" (formula "43") (ifseqformula "41"))
                                    (rule "polySimp_rightDist" (formula "43") (term "0,0"))
                                    (rule "mul_literals" (formula "43") (term "0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "43") (term "0"))
                                    (rule "polySimp_addComm1" (formula "43") (term "0,0"))
                                    (rule "add_literals" (formula "43") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "43") (term "0"))
                                    (rule "add_literals" (formula "43") (term "1,1,0"))
                                    (rule "polySimp_elimOne" (formula "43") (term "1,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "43"))
                                    (rule "mul_literals" (formula "43") (term "1"))
                                    (rule "inEqSimp_subsumption1" (formula "43") (ifseqformula "23"))
                                    (rule "leq_literals" (formula "43") (term "0"))
                                     (builtin "One Step Simplification" (formula "43"))
                                    (rule "true_left" (formula "43"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " self.sorted_splitters[l_0 * -1 + result_22] >= 1 + self.sorted_splitters[1] TRUE"
                                       (rule "polySimp_homoEq" (formula "2"))
                                       (rule "times_zero_2" (formula "2") (term "1,0"))
                                       (rule "add_zero_right" (formula "2") (term "0"))
                                       (rule "polySimp_sepNegMonomial" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                       (rule "applyEq" (formula "23") (term "0") (ifseqformula "2"))
                                       (rule "inEqSimp_homoInEq1" (formula "23"))
                                       (rule "polySimp_mulComm0" (formula "23") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "23") (term "1,0"))
                                       (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0"))
                                       (rule "polySimp_rightDist" (formula "23") (term "0,1,0"))
                                       (rule "mul_literals" (formula "23") (term "0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "23") (term "0"))
                                       (rule "polySimp_addComm1" (formula "23") (term "0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "23") (term "0"))
                                       (rule "add_literals" (formula "23") (term "1,1,0"))
                                       (rule "polySimp_addAssoc" (formula "23") (term "0,0"))
                                       (rule "polySimp_addComm0" (formula "23") (term "0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0"))
                                       (rule "add_literals" (formula "23") (term "1,1,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "23"))
                                       (rule "polySimp_mulLiterals" (formula "23") (term "0"))
                                       (rule "polySimp_elimOne" (formula "23") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "46") (term "1") (ifseqformula "1"))
                                       (rule "inEqSimp_homoInEq0" (formula "46") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "46") (term "0,0,1"))
                                       (rule "add_literals" (formula "46") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "46") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "46") (term "0,0,1"))
                                       (rule "qeq_literals" (formula "46") (term "0,1"))
                                        (builtin "One Step Simplification" (formula "46"))
                                       (rule "true_left" (formula "46"))
                                       (rule "inEqSimp_subsumption1" (formula "23") (ifseqformula "33"))
                                       (rule "inEqSimp_homoInEq0" (formula "23") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "23") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "23") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "23") (term "0,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "23") (term "0,0"))
                                       (rule "polySimp_addComm1" (formula "23") (term "0,0,0"))
                                       (rule "add_literals" (formula "23") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor2b" (formula "23") (term "0,0"))
                                       (rule "add_literals" (formula "23") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "23") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "23") (term "0,0"))
                                       (rule "qeq_literals" (formula "23") (term "0"))
                                        (builtin "One Step Simplification" (formula "23"))
                                       (rule "true_left" (formula "23"))
                                       (rule "elimGcdEq" (formula "2") (inst "elimGcdRightDiv=add(add(Z(neglit(1(#))), l_1), l_0)") (inst "elimGcdLeftDiv=result_22") (inst "elimGcd=Z(2(#))"))
                                        (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "48")))
                                       (rule "mul_literals" (formula "2") (term "0,1,0,1,0"))
                                       (rule "mul_literals" (formula "2") (term "0,1,0,0,0"))
                                       (rule "add_literals" (formula "2") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "2") (term "1,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "2") (term "0,1,0,1,0"))
                                       (rule "mul_literals" (formula "2") (term "0,0,1,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "2") (term "0,1,0,0,0"))
                                       (rule "mul_literals" (formula "2") (term "0,0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "2") (term "0,1,0"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0,0,1,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,1,0"))
                                       (rule "add_literals" (formula "2") (term "1,1,0,1,0"))
                                       (rule "times_zero_1" (formula "2") (term "1,0,1,0"))
                                       (rule "add_zero_right" (formula "2") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "2") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0,0"))
                                       (rule "add_literals" (formula "2") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "2") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "2") (term "0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "2") (term "0,1,0"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0,0,1,0"))
                                       (rule "add_literals" (formula "2") (term "0,0,0,1,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,1,0"))
                                       (rule "add_literals" (formula "2") (term "1,1,0,1,0"))
                                       (rule "times_zero_1" (formula "2") (term "1,0,1,0"))
                                       (rule "add_zero_right" (formula "2") (term "0,1,0"))
                                       (rule "qeq_literals" (formula "2") (term "1,0"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0,0,0"))
                                       (rule "add_literals" (formula "2") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
                                       (rule "add_literals" (formula "2") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "2") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "2") (term "0,0"))
                                       (rule "leq_literals" (formula "2") (term "0"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "closeFalse" (formula "2"))
                                    )
                                    (branch " self.sorted_splitters[l_0 * -1 + result_22] >= 1 + self.sorted_splitters[1] FALSE"
                                       (rule "polySimp_homoEq" (formula "1"))
                                       (rule "mul_literals" (formula "1") (term "1,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0,0"))
                                       (rule "inEqSimp_geqRight" (formula "46"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                       (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0,0"))
                                       (rule "polySimp_sepNegMonomial" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                       (rule "applyEq" (formula "23") (term "0") (ifseqformula "2"))
                                       (rule "inEqSimp_homoInEq1" (formula "23"))
                                       (rule "polySimp_mulComm0" (formula "23") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "23") (term "1,0"))
                                       (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0"))
                                       (rule "polySimp_rightDist" (formula "23") (term "0,1,0"))
                                       (rule "mul_literals" (formula "23") (term "0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "23") (term "0"))
                                       (rule "polySimp_addComm1" (formula "23") (term "0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "23") (term "0"))
                                       (rule "add_literals" (formula "23") (term "1,1,0"))
                                       (rule "polySimp_addAssoc" (formula "23") (term "0,0"))
                                       (rule "polySimp_addComm0" (formula "23") (term "0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0"))
                                       (rule "add_literals" (formula "23") (term "1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "23"))
                                       (rule "polySimp_mulLiterals" (formula "23") (term "0"))
                                       (rule "polySimp_elimOne" (formula "23") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "23") (ifseqformula "33"))
                                       (rule "inEqSimp_homoInEq0" (formula "23") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "23") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "23") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "23") (term "0,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "23") (term "0,0"))
                                       (rule "polySimp_addComm1" (formula "23") (term "0,0,0"))
                                       (rule "add_literals" (formula "23") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor2b" (formula "23") (term "0,0"))
                                       (rule "add_literals" (formula "23") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "23") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "23") (term "0,0"))
                                       (rule "qeq_literals" (formula "23") (term "0"))
                                        (builtin "One Step Simplification" (formula "23"))
                                       (rule "true_left" (formula "23"))
                                       (rule "elimGcdEq" (formula "2") (inst "elimGcdRightDiv=add(add(Z(neglit(1(#))), l_1), l_0)") (inst "elimGcdLeftDiv=result_22") (inst "elimGcd=Z(2(#))"))
                                        (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "49")))
                                       (rule "mul_literals" (formula "2") (term "0,1,0,1,0"))
                                       (rule "mul_literals" (formula "2") (term "0,1,0,0,0"))
                                       (rule "add_literals" (formula "2") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "2") (term "1,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "2") (term "0,1,0,1,0"))
                                       (rule "mul_literals" (formula "2") (term "0,0,1,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "2") (term "0,1,0,0,0"))
                                       (rule "mul_literals" (formula "2") (term "0,0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "2") (term "0,1,0"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0,0,1,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,1,0"))
                                       (rule "add_literals" (formula "2") (term "1,1,0,1,0"))
                                       (rule "times_zero_1" (formula "2") (term "1,0,1,0"))
                                       (rule "add_zero_right" (formula "2") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "2") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0,0"))
                                       (rule "add_literals" (formula "2") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "2") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "2") (term "0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "2") (term "0,1,0"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0,0,1,0"))
                                       (rule "add_literals" (formula "2") (term "0,0,0,1,0"))
                                       (rule "add_zero_left" (formula "2") (term "0,0,1,0"))
                                       (rule "polySimp_pullOutFactor0" (formula "2") (term "0,1,0"))
                                       (rule "add_literals" (formula "2") (term "1,0,1,0"))
                                       (rule "times_zero_1" (formula "2") (term "0,1,0"))
                                       (rule "qeq_literals" (formula "2") (term "1,0"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0,0,0"))
                                       (rule "add_literals" (formula "2") (term "0,0,0,0"))
                                       (rule "add_zero_left" (formula "2") (term "0,0,0"))
                                       (rule "polySimp_pullOutFactor0" (formula "2") (term "0,0"))
                                       (rule "add_literals" (formula "2") (term "1,0,0"))
                                       (rule "times_zero_1" (formula "2") (term "0,0"))
                                       (rule "leq_literals" (formula "2") (term "0"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "closeFalse" (formula "2"))
                                    )
                                 )
                                 (branch "CUT: result_22 >= 1 + l_0 FALSE"
                                     (builtin "One Step Simplification" (formula "44"))
                                    (rule "true_left" (formula "44"))
                                    (rule "inEqSimp_geqRight" (formula "45"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1"))
                                    (rule "inEqSimp_antiSymm" (formula "42") (ifseqformula "1"))
                                    (rule "applyEq" (formula "46") (term "0,0") (ifseqformula "42"))
                                    (rule "inEqSimp_homoInEq0" (formula "46") (term "0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "46") (term "0,0"))
                                    (rule "add_literals" (formula "46") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "46") (term "1,0,0"))
                                    (rule "applyEq" (formula "2") (term "1,0,2,0,0,0") (ifseqformula "42"))
                                    (rule "polySimp_pullOutFactor2" (formula "2") (term "0,2,0,0,0"))
                                    (rule "add_literals" (formula "2") (term "1,0,2,0,0,0"))
                                    (rule "times_zero_1" (formula "2") (term "0,2,0,0,0"))
                                    (rule "inEqSimp_homoInEq1" (formula "2") (term "0,0"))
                                    (rule "polySimp_addComm1" (formula "2") (term "0,0,0"))
                                    (rule "applyEq" (formula "23") (term "0,0") (ifseqformula "42"))
                                    (rule "inEqSimp_homoInEq1" (formula "23"))
                                    (rule "polySimp_mulLiterals" (formula "23") (term "1,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "23") (term "0"))
                                    (rule "add_literals" (formula "23") (term "1,1,0"))
                                    (rule "applyEq" (formula "1") (term "0") (ifseqformula "42"))
                                    (rule "inEqSimp_homoInEq0" (formula "1"))
                                    (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                                    (rule "add_literals" (formula "1") (term "1,0"))
                                    (rule "times_zero_1" (formula "1") (term "0"))
                                    (rule "qeq_literals" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "applyEq" (formula "45") (term "1,0,2,0,1") (ifseqformula "41"))
                                    (rule "polySimp_pullOutFactor2" (formula "45") (term "0,2,0,1"))
                                    (rule "add_literals" (formula "45") (term "1,0,2,0,1"))
                                    (rule "times_zero_1" (formula "45") (term "0,2,0,1"))
                                    (rule "inEqSimp_commuteGeq" (formula "45") (term "1"))
                                    (rule "applyEq" (formula "44") (term "0") (ifseqformula "41"))
                                    (rule "inEqSimp_homoInEq0" (formula "44"))
                                    (rule "polySimp_pullOutFactor0b" (formula "44") (term "0"))
                                    (rule "add_literals" (formula "44") (term "1,1,0"))
                                    (rule "polySimp_elimOne" (formula "44") (term "1,0"))
                                    (rule "applyEq" (formula "42") (term "0") (ifseqformula "41"))
                                    (rule "inEqSimp_homoInEq1" (formula "42"))
                                    (rule "polySimp_pullOutFactor1" (formula "42") (term "0"))
                                    (rule "add_literals" (formula "42") (term "1,0"))
                                    (rule "times_zero_1" (formula "42") (term "0"))
                                    (rule "leq_literals" (formula "42"))
                                    (rule "true_left" (formula "42"))
                                    (rule "applyEq" (formula "42") (term "0") (ifseqformula "41"))
                                    (rule "inEqSimp_homoInEq0" (formula "42"))
                                    (rule "polySimp_pullOutFactor0b" (formula "42") (term "0"))
                                    (rule "add_literals" (formula "42") (term "1,1,0"))
                                    (rule "polySimp_elimOne" (formula "42") (term "1,0"))
                                    (rule "applyEq" (formula "48") (term "0") (ifseqformula "41"))
                                    (rule "polySimp_homoEq" (formula "48"))
                                    (rule "polySimp_pullOutFactor1b" (formula "48") (term "0"))
                                    (rule "add_literals" (formula "48") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "48") (term "1,0"))
                                    (rule "add_zero_right" (formula "48") (term "0"))
                                    (rule "applyEq" (formula "31") (term "0") (ifseqformula "41"))
                                    (rule "applyEq" (formula "1") (term "0,1,1") (ifseqformula "41"))
                                    (rule "polySimp_pullOutFactor0b" (formula "1") (term "1"))
                                    (rule "add_literals" (formula "1") (term "1,1,1"))
                                    (rule "times_zero_1" (formula "1") (term "1,1"))
                                    (rule "add_zero_right" (formula "1") (term "1"))
                                    (rule "applyEq" (formula "39") (term "1") (ifseqformula "41"))
                                    (rule "polySimp_sepPosMonomial" (formula "48"))
                                    (rule "mul_literals" (formula "48") (term "1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "44") (term "0"))
                                    (rule "mul_literals" (formula "44") (term "1,0"))
                                    (rule "replace_known_left" (formula "44") (term "0") (ifseqformula "31"))
                                     (builtin "One Step Simplification" (formula "44"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "22"))
                                    (rule "polySimp_mulLiterals" (formula "22") (term "0"))
                                    (rule "polySimp_elimOne" (formula "22") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "43"))
                                    (rule "mul_literals" (formula "43") (term "1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "42"))
                                    (rule "polySimp_mulComm0" (formula "42") (term "1"))
                                    (rule "polySimp_rightDist" (formula "42") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "42") (term "1,1"))
                                    (rule "mul_literals" (formula "42") (term "0,1"))
                                    (rule "inEqSimp_contradEq7" (formula "47") (ifseqformula "24"))
                                    (rule "mul_literals" (formula "47") (term "1,0,0"))
                                    (rule "add_literals" (formula "47") (term "0,0"))
                                    (rule "leq_literals" (formula "47") (term "0"))
                                     (builtin "One Step Simplification" (formula "47"))
                                    (rule "false_right" (formula "47"))
                                    (rule "inEqSimp_subsumption1" (formula "42") (ifseqformula "23"))
                                    (rule "leq_literals" (formula "42") (term "0"))
                                     (builtin "One Step Simplification" (formula "42"))
                                    (rule "true_left" (formula "42"))
                                    (rule "inEqSimp_subsumption1" (formula "22") (ifseqformula "26"))
                                    (rule "inEqSimp_homoInEq0" (formula "22") (term "0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0"))
                                    (rule "add_literals" (formula "22") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "22") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "22") (term "0,0"))
                                    (rule "qeq_literals" (formula "22") (term "0"))
                                     (builtin "One Step Simplification" (formula "22"))
                                    (rule "true_left" (formula "22"))
                                    (rule "inEqSimp_subsumption1" (formula "30") (ifseqformula "22"))
                                    (rule "leq_literals" (formula "30") (term "0"))
                                     (builtin "One Step Simplification" (formula "30"))
                                    (rule "true_left" (formula "30"))
                                    (rule "all_pull_out3" (formula "35") (term "0"))
                                    (rule "all_pull_out3" (formula "16") (term "0"))
                                    (rule "onlyCreatedObjectsAreReferencedFinal" (formula "43") (term "0") (ifseqformula "8") (ifseqformula "5"))
                                    (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "44"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "onlyCreatedObjectsAreReferencedFinal" (formula "15") (term "0") (ifseqformula "9") (ifseqformula "6"))
                                    (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "16"))
                                    (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "44"))
                                     (builtin "One Step Simplification" (formula "15"))
                                    (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "16"))
                                    (rule "shift_paren_or" (formula "36") (term "0,0"))
                                    (rule "shift_paren_or" (formula "17") (term "0,0"))
                                    (rule "shift_paren_or" (formula "36") (term "0,0,0"))
                                    (rule "shift_paren_or" (formula "17") (term "0,0,0"))
                                    (rule "ifthenelse_split" (formula "2") (term "0"))
                                    (branch " self.sorted_splitters[1] <= -1 + self.sorted_splitters[0] TRUE"
                                       (rule "polySimp_homoEq" (formula "3"))
                                       (rule "times_zero_2" (formula "3") (term "1,0"))
                                       (rule "add_zero_right" (formula "3") (term "0"))
                                       (rule "polySimp_sepPosMonomial" (formula "3"))
                                       (rule "mul_literals" (formula "3") (term "1"))
                                       (rule "applyEqRigid" (formula "6") (term "1,1") (ifseqformula "3"))
                                       (rule "add_literals" (formula "6") (term "1"))
                                       (rule "applyEqRigid" (formula "9") (term "1,1") (ifseqformula "3"))
                                       (rule "add_literals" (formula "9") (term "1"))
                                       (rule "inEqSimp_subsumption0" (formula "42") (ifseqformula "2"))
                                       (rule "inEqSimp_homoInEq0" (formula "42") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "42") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "42") (term "1,0,0"))
                                       (rule "mul_literals" (formula "42") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "42") (term "0,0"))
                                       (rule "polySimp_addComm0" (formula "42") (term "0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "42") (term "0,0"))
                                       (rule "add_literals" (formula "42") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "42") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "42") (term "0,0"))
                                       (rule "qeq_literals" (formula "42") (term "0"))
                                        (builtin "One Step Simplification" (formula "42"))
                                       (rule "true_left" (formula "42"))
                                       (rule "elimGcdEq" (formula "3") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(2(#))"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "times_zero_1" (formula "3") (term "1,0,0,1"))
                                       (rule "times_zero_1" (formula "3") (term "1,0,0,0"))
                                       (rule "add_literals" (formula "3") (term "1,0,0"))
                                       (rule "times_zero_1" (formula "3") (term "1,0,1,0"))
                                       (rule "add_zero_right" (formula "3") (term "0,0,1"))
                                       (rule "add_zero_right" (formula "3") (term "0,0,0"))
                                       (rule "add_zero_right" (formula "3") (term "0,1,0"))
                                       (rule "equal_literals" (formula "3") (term "0,1"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "leq_literals" (formula "3") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "qeq_literals" (formula "3") (term "0"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "closeFalse" (formula "3"))
                                    )
                                    (branch " self.sorted_splitters[1] <= -1 + self.sorted_splitters[0] FALSE"
                                       (rule "polySimp_homoEq" (formula "2"))
                                       (rule "mul_literals" (formula "2") (term "1,0"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0"))
                                       (rule "add_literals" (formula "2") (term "0,0"))
                                       (rule "inEqSimp_leqRight" (formula "42"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                       (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0,0"))
                                       (rule "polySimp_sepPosMonomial" (formula "3"))
                                       (rule "mul_literals" (formula "3") (term "1"))
                                       (rule "applyEqRigid" (formula "9") (term "1,1") (ifseqformula "3"))
                                       (rule "add_literals" (formula "9") (term "1"))
                                       (rule "applyEqRigid" (formula "6") (term "1,1") (ifseqformula "3"))
                                       (rule "add_literals" (formula "6") (term "1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1"))
                                       (rule "elimGcdEq" (formula "3") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(2(#))"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,0"))
                                       (rule "add_literals" (formula "3") (term "1,0,0"))
                                       (rule "mul_literals" (formula "3") (term "1,0,0,1"))
                                       (rule "mul_literals" (formula "3") (term "1,0,1,0"))
                                       (rule "mul_literals" (formula "3") (term "1,0,0,0"))
                                       (rule "add_literals" (formula "3") (term "0,0,1"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "add_literals" (formula "3") (term "0,0,0"))
                                       (rule "add_literals" (formula "3") (term "0,1,0"))
                                       (rule "leq_literals" (formula "3") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "qeq_literals" (formula "3") (term "0"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "applyEqRigid" (formula "32") (term "0,1,1") (ifseqformula "3"))
                                       (rule "mul_literals" (formula "32") (term "1,1"))
                                       (rule "add_literals" (formula "32") (term "1"))
                                       (rule "applyEq" (formula "25") (term "0") (ifseqformula "3"))
                                       (rule "qeq_literals" (formula "25"))
                                       (rule "closeFalse" (formula "25"))
                                    )
                                 )
                              )
                           )
                           (branch "CUT: result_21 <= -2 + l_0 * 2 FALSE"
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "true_left" (formula "25"))
                              (rule "inEqSimp_leqRight" (formula "44"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1"))
                              (rule "polySimp_rightDist" (formula "1") (term "1"))
                              (rule "mul_literals" (formula "1") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                              (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "23"))
                              (rule "applyEq" (formula "24") (term "0") (ifseqformula "1"))
                              (rule "inEqSimp_homoInEq0" (formula "24"))
                              (rule "polySimp_pullOutFactor1" (formula "24") (term "0"))
                              (rule "add_literals" (formula "24") (term "1,0"))
                              (rule "times_zero_1" (formula "24") (term "0"))
                              (rule "qeq_literals" (formula "24"))
                              (rule "true_left" (formula "24"))
                              (rule "applyEq" (formula "25") (term "1,0,2,0") (ifseqformula "1"))
                              (rule "polySimp_addAssoc" (formula "25") (term "0,2,0"))
                              (rule "polySimp_addComm1" (formula "25") (term "0,0,2,0"))
                              (rule "add_literals" (formula "25") (term "0,0,0,2,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "25") (term "0,2,0"))
                              (rule "add_literals" (formula "25") (term "1,1,0,2,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,0,2,0"))
                              (rule "applyEq" (formula "39") (term "0,0") (ifseqformula "1"))
                              (rule "polySimp_mulComm0" (formula "39") (term "0"))
                              (rule "polySimp_rightDist" (formula "39") (term "0"))
                              (rule "mul_literals" (formula "39") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "39") (term "1,0"))
                              (rule "inEqSimp_homoInEq1" (formula "39"))
                              (rule "polySimp_mulComm0" (formula "39") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "39") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0"))
                              (rule "mul_literals" (formula "39") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "39") (term "0"))
                              (rule "polySimp_addComm1" (formula "39") (term "0,0"))
                              (rule "add_literals" (formula "39") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "39") (term "0"))
                              (rule "add_literals" (formula "39") (term "1,1,0"))
                              (rule "applyEq" (formula "5") (term "1,0,2,0,0,0") (ifseqformula "1"))
                              (rule "polySimp_addAssoc" (formula "5") (term "0,2,0,0,0"))
                              (rule "polySimp_addComm0" (formula "5") (term "0,0,2,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "5") (term "0,2,0,0,0"))
                              (rule "add_literals" (formula "5") (term "1,1,0,2,0,0,0"))
                              (rule "polySimp_elimOne" (formula "5") (term "1,0,2,0,0,0"))
                              (rule "applyEq" (formula "24") (term "0") (ifseqformula "1"))
                              (rule "inEqSimp_homoInEq1" (formula "24"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "24") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0"))
                              (rule "mul_literals" (formula "24") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "24") (term "0"))
                              (rule "polySimp_addComm1" (formula "24") (term "0,0"))
                              (rule "add_literals" (formula "24") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "24") (term "0"))
                              (rule "add_literals" (formula "24") (term "1,1,0"))
                              (rule "applyEq" (formula "22") (term "0") (ifseqformula "1"))
                              (rule "inEqSimp_homoInEq0" (formula "22"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "22") (term "1,0"))
                              (rule "mul_literals" (formula "22") (term "0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0"))
                              (rule "polySimp_addAssoc" (formula "22") (term "0"))
                              (rule "polySimp_addComm1" (formula "22") (term "0,0"))
                              (rule "add_literals" (formula "22") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "22") (term "0"))
                              (rule "add_literals" (formula "22") (term "1,1,0"))
                              (rule "applyEq" (formula "23") (term "1,1") (ifseqformula "1"))
                              (rule "polySimp_addAssoc" (formula "23") (term "1"))
                              (rule "add_literals" (formula "23") (term "0,1"))
                              (rule "add_zero_left" (formula "23") (term "1"))
                              (rule "applyEq" (formula "41") (term "0,1,1") (ifseqformula "1"))
                              (rule "polySimp_mulComm0" (formula "41") (term "1,1"))
                              (rule "polySimp_rightDist" (formula "41") (term "1,1"))
                              (rule "mul_literals" (formula "41") (term "0,1,1"))
                              (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1"))
                              (rule "polySimp_addAssoc" (formula "41") (term "1"))
                              (rule "add_literals" (formula "41") (term "0,1"))
                              (rule "applyEq" (formula "30") (term "0") (ifseqformula "1"))
                              (rule "inEqSimp_homoInEq1" (formula "30"))
                              (rule "polySimp_mulComm0" (formula "30") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "30") (term "1,0"))
                              (rule "mul_literals" (formula "30") (term "0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0"))
                              (rule "polySimp_addAssoc" (formula "30") (term "0"))
                              (rule "add_literals" (formula "30") (term "0,0"))
                              (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                              (rule "inEqSimp_homoInEq1" (formula "2"))
                              (rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
                              (rule "add_literals" (formula "2") (term "1,0"))
                              (rule "times_zero_1" (formula "2") (term "0"))
                              (rule "leq_literals" (formula "2"))
                              (rule "true_left" (formula "2"))
                              (rule "applyEq" (formula "24") (term "0") (ifseqformula "17"))
                              (rule "applyEq" (formula "4") (term "0,1,1") (ifseqformula "1"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1,1"))
                              (rule "polySimp_rightDist" (formula "4") (term "1,1"))
                              (rule "mul_literals" (formula "4") (term "0,1,1"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1"))
                              (rule "polySimp_addComm1" (formula "4") (term "1"))
                              (rule "polySimp_addAssoc" (formula "4") (term "0,1"))
                              (rule "polySimp_addComm0" (formula "4") (term "0,0,1"))
                              (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,1"))
                              (rule "add_literals" (formula "4") (term "1,1,0,1"))
                              (rule "applyEq" (formula "20") (term "1") (ifseqformula "1"))
                              (rule "applyEq" (formula "47") (term "1") (ifseqformula "1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "38"))
                              (rule "polySimp_mulLiterals" (formula "38") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "23"))
                              (rule "polySimp_mulLiterals" (formula "23") (term "0"))
                              (rule "polySimp_elimOne" (formula "23") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "21"))
                              (rule "mul_literals" (formula "21") (term "1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "28"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                              (rule "inEqSimp_strengthen0" (formula "40") (ifseqformula "46"))
                              (rule "polySimp_addAssoc" (formula "40") (term "1"))
                              (rule "add_literals" (formula "40") (term "0,1"))
                              (rule "replace_known_left" (formula "42") (term "0") (ifseqformula "40"))
                               (builtin "One Step Simplification" (formula "42"))
                              (rule "inEqSimp_contradEq3" (formula "46") (ifseqformula "40"))
                              (rule "polySimp_rightDist" (formula "46") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "46") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "46") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "46") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "46") (term "0,0,0"))
                              (rule "add_literals" (formula "46") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "46") (term "0,0"))
                              (rule "add_literals" (formula "46") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "46") (term "1,0,0"))
                              (rule "add_zero_right" (formula "46") (term "0,0"))
                              (rule "qeq_literals" (formula "46") (term "0"))
                               (builtin "One Step Simplification" (formula "46"))
                              (rule "false_right" (formula "46"))
                              (rule "inEqSimp_subsumption6" (formula "22") (ifseqformula "38"))
                              (rule "greater_literals" (formula "22") (term "0,0"))
                               (builtin "One Step Simplification" (formula "22"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
                              (rule "inEqSimp_homoInEq0" (formula "22") (term "0"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "1,0,0"))
                              (rule "polySimp_pullOutFactor0" (formula "22") (term "0,0"))
                              (rule "add_literals" (formula "22") (term "1,0,0"))
                              (rule "times_zero_1" (formula "22") (term "0,0"))
                              (rule "qeq_literals" (formula "22") (term "0"))
                               (builtin "One Step Simplification" (formula "22"))
                              (rule "true_left" (formula "22"))
                              (rule "inEqSimp_contradInEq0" (formula "4") (term "0,0") (ifseqformula "22"))
                              (rule "inEqSimp_homoInEq1" (formula "4") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,0"))
                              (rule "mul_literals" (formula "4") (term "0,1,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,0"))
                              (rule "polySimp_addComm1" (formula "4") (term "0,0,0,0,0"))
                              (rule "add_literals" (formula "4") (term "0,0,0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,0,0"))
                              (rule "add_literals" (formula "4") (term "1,1,0,0,0,0"))
                              (rule "times_zero_1" (formula "4") (term "1,0,0,0,0"))
                              (rule "add_zero_right" (formula "4") (term "0,0,0,0"))
                              (rule "leq_literals" (formula "4") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "polySimp_homoEq" (formula "4"))
                              (rule "mul_literals" (formula "4") (term "1,0"))
                              (rule "polySimp_addComm1" (formula "4") (term "0"))
                              (rule "polySimp_addComm1" (formula "4") (term "0,0"))
                              (rule "add_literals" (formula "4") (term "0,0,0"))
                              (rule "polySimp_sepPosMonomial" (formula "4"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1"))
                              (rule "polySimp_rightDist" (formula "4") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                              (rule "mul_literals" (formula "4") (term "0,1"))
                              (rule "applyEq" (formula "7") (term "1") (ifseqformula "4"))
                              (rule "applyEqRigid" (formula "2") (term "1,0,1") (ifseqformula "4"))
                              (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
                              (rule "polySimp_addComm0" (formula "2") (term "0,0,1"))
                              (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,1"))
                              (rule "add_literals" (formula "2") (term "1,1,0,1"))
                              (rule "inEqSimp_subsumption5" (formula "36") (ifseqformula "27"))
                              (rule "mul_literals" (formula "36") (term "0,1,0"))
                              (rule "greater_literals" (formula "36") (term "1,0,0"))
                               (builtin "One Step Simplification" (formula "36"))
                              (rule "mul_literals" (formula "36") (term "1,1,0"))
                              (rule "greater_literals" (formula "36") (term "0,0"))
                               (builtin "One Step Simplification" (formula "36"))
                              (rule "leq_literals" (formula "36") (term "0"))
                               (builtin "One Step Simplification" (formula "36"))
                              (rule "true_left" (formula "36"))
                              (rule "inEqSimp_subsumption1" (formula "21") (ifseqformula "27"))
                              (rule "leq_literals" (formula "21") (term "0"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "true_left" (formula "21"))
                              (rule "inEqSimp_subsumption6" (formula "26") (ifseqformula "27"))
                              (rule "mul_literals" (formula "26") (term "1,1,0"))
                              (rule "greater_literals" (formula "26") (term "0,0"))
                               (builtin "One Step Simplification" (formula "26"))
                              (rule "leq_literals" (formula "26") (term "0"))
                               (builtin "One Step Simplification" (formula "26"))
                              (rule "true_left" (formula "26"))
                              (rule "inEqSimp_exactShadow3" (formula "34") (ifseqformula "35"))
                              (rule "polySimp_mulComm0" (formula "34") (term "0,0"))
                              (rule "polySimp_addAssoc" (formula "34") (term "0"))
                              (rule "polySimp_addComm0" (formula "34") (term "0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "34") (term "0"))
                              (rule "add_literals" (formula "34") (term "1,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "34"))
                              (rule "mul_literals" (formula "34") (term "1"))
                              (rule "inEqSimp_subsumption6" (formula "34") (ifseqformula "26"))
                              (rule "mul_literals" (formula "34") (term "1,1,0"))
                              (rule "greater_literals" (formula "34") (term "0,0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_exactShadow3" (formula "34") (ifseqformula "36"))
                              (rule "polySimp_mulComm0" (formula "34") (term "0,0"))
                              (rule "polySimp_addAssoc" (formula "34") (term "0"))
                              (rule "polySimp_addComm0" (formula "34") (term "0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "34") (term "0"))
                              (rule "add_literals" (formula "34") (term "1,1,0"))
                              (rule "polySimp_elimOne" (formula "34") (term "1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "34"))
                              (rule "mul_literals" (formula "34") (term "1"))
                              (rule "inEqSimp_exactShadow3" (formula "25") (ifseqformula "36"))
                              (rule "mul_literals" (formula "25") (term "0,0"))
                              (rule "polySimp_addAssoc" (formula "25") (term "0"))
                              (rule "add_literals" (formula "25") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "25"))
                              (rule "mul_literals" (formula "25") (term "1"))
                              (rule "inEqSimp_subsumption6" (formula "25") (ifseqformula "27"))
                              (rule "mul_literals" (formula "25") (term "1,1,0"))
                              (rule "greater_literals" (formula "25") (term "0,0"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "leq_literals" (formula "25") (term "0"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "true_left" (formula "25"))
                              (rule "inEqSimp_exactShadow3" (formula "25") (ifseqformula "35"))
                              (rule "mul_literals" (formula "25") (term "0,0"))
                              (rule "polySimp_addAssoc" (formula "25") (term "0"))
                              (rule "add_literals" (formula "25") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "25"))
                              (rule "mul_literals" (formula "25") (term "1"))
                              (rule "inEqSimp_subsumption6" (formula "25") (ifseqformula "27"))
                              (rule "mul_literals" (formula "25") (term "1,1,0"))
                              (rule "greater_literals" (formula "25") (term "0,0"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "leq_literals" (formula "25") (term "0"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "true_left" (formula "25"))
                              (rule "cut_direct" (formula "37") (term "0"))
                              (branch "CUT: result_22 >= 1 + l_0 TRUE"
                                  (builtin "One Step Simplification" (formula "38"))
                                 (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "37"))
                                 (rule "inEqSimp_homoInEq0" (formula "34") (term "0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0"))
                                 (rule "add_literals" (formula "34") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "34") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "34") (term "0,0"))
                                 (rule "qeq_literals" (formula "34") (term "0"))
                                  (builtin "One Step Simplification" (formula "34"))
                                 (rule "true_left" (formula "34"))
                                 (rule "inEqSimp_exactShadow3" (formula "36") (ifseqformula "35"))
                                 (rule "polySimp_rightDist" (formula "36") (term "0,0"))
                                 (rule "mul_literals" (formula "36") (term "0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "36") (term "0"))
                                 (rule "polySimp_addComm1" (formula "36") (term "0,0"))
                                 (rule "add_literals" (formula "36") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "36") (term "0"))
                                 (rule "add_literals" (formula "36") (term "1,1,0"))
                                 (rule "polySimp_elimOne" (formula "36") (term "1,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "36"))
                                 (rule "mul_literals" (formula "36") (term "1"))
                                 (rule "inEqSimp_subsumption1" (formula "26") (ifseqformula "36"))
                                 (rule "leq_literals" (formula "26") (term "0"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "true_left" (formula "26"))
                                 (rule "inEqSimp_exactShadow3" (formula "36") (ifseqformula "33"))
                                 (rule "polySimp_rightDist" (formula "36") (term "0,0"))
                                 (rule "mul_literals" (formula "36") (term "0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "36") (term "0"))
                                 (rule "polySimp_addComm1" (formula "36") (term "0,0"))
                                 (rule "add_literals" (formula "36") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "36") (term "0"))
                                 (rule "add_literals" (formula "36") (term "1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "36"))
                                 (rule "mul_literals" (formula "36") (term "1"))
                                 (rule "inEqSimp_subsumption6" (formula "36") (ifseqformula "35"))
                                 (rule "greater_literals" (formula "36") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "36"))
                                 (rule "mul_literals" (formula "36") (term "1,0"))
                                 (rule "leq_literals" (formula "36") (term "0"))
                                  (builtin "One Step Simplification" (formula "36"))
                                 (rule "true_left" (formula "36"))
                                 (rule "ifthenelse_split" (formula "2") (term "0"))
                                 (branch " self.sorted_splitters[l_0 * -1 + result_22] >= 1 + self.sorted_splitters[1] TRUE"
                                    (rule "polySimp_homoEq" (formula "3"))
                                    (rule "times_zero_2" (formula "3") (term "1,0"))
                                    (rule "add_zero_right" (formula "3") (term "0"))
                                    (rule "polySimp_sepNegMonomial" (formula "3"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                    (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "2"))
                                    (rule "inEqSimp_homoInEq0" (formula "39") (term "0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0"))
                                    (rule "add_literals" (formula "39") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "39") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "39") (term "0,0"))
                                    (rule "qeq_literals" (formula "39") (term "0"))
                                     (builtin "One Step Simplification" (formula "39"))
                                    (rule "true_left" (formula "39"))
                                    (rule "elimGcdEq" (formula "3") (inst "elimGcdRightDiv=add(Z(neglit(1(#))), mul(l_0, Z(2(#))))") (inst "elimGcdLeftDiv=result_22") (inst "elimGcd=Z(2(#))"))
                                     (builtin "One Step Simplification" (formula "3"))
                                    (rule "mul_literals" (formula "3") (term "0,1,0,0,1"))
                                    (rule "add_literals" (formula "3") (term "1,0,0"))
                                    (rule "mul_literals" (formula "3") (term "0,1,0,0,0"))
                                    (rule "mul_literals" (formula "3") (term "0,1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1"))
                                    (rule "mul_literals" (formula "3") (term "0,1,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,1"))
                                    (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "3") (term "0,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "3") (term "1,0,1,0"))
                                    (rule "mul_literals" (formula "3") (term "0,1,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "3") (term "0,0,1"))
                                    (rule "polySimp_addComm1" (formula "3") (term "0,0,0,1"))
                                    (rule "add_literals" (formula "3") (term "0,0,0,0,1"))
                                    (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0,1"))
                                    (rule "add_literals" (formula "3") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "3") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "3") (term "0,0,1"))
                                    (rule "equal_literals" (formula "3") (term "0,1"))
                                     (builtin "One Step Simplification" (formula "3"))
                                    (rule "polySimp_addAssoc" (formula "3") (term "0,0,0"))
                                    (rule "polySimp_addComm1" (formula "3") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "3") (term "0,0,0,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0,0"))
                                    (rule "add_literals" (formula "3") (term "1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "3") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "3") (term "0,0,0"))
                                    (rule "leq_literals" (formula "3") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "3"))
                                    (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                                    (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                                    (rule "add_literals" (formula "3") (term "0,0,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                                    (rule "add_literals" (formula "3") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "3") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "3") (term "0,0"))
                                    (rule "qeq_literals" (formula "3") (term "0"))
                                     (builtin "One Step Simplification" (formula "3"))
                                    (rule "closeFalse" (formula "3"))
                                 )
                                 (branch " self.sorted_splitters[l_0 * -1 + result_22] >= 1 + self.sorted_splitters[1] FALSE"
                                    (rule "polySimp_homoEq" (formula "2"))
                                    (rule "mul_literals" (formula "2") (term "1,0"))
                                    (rule "polySimp_addComm1" (formula "2") (term "0"))
                                    (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                    (rule "add_literals" (formula "2") (term "0,0,0"))
                                    (rule "inEqSimp_geqRight" (formula "39"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0,0"))
                                    (rule "polySimp_sepNegMonomial" (formula "3"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1"))
                                    (rule "elimGcdEq" (formula "3") (inst "elimGcdRightDiv=add(Z(neglit(1(#))), mul(l_0, Z(2(#))))") (inst "elimGcdLeftDiv=result_22") (inst "elimGcd=Z(2(#))"))
                                     (builtin "One Step Simplification" (formula "3"))
                                    (rule "mul_literals" (formula "3") (term "0,1,0,0,0"))
                                    (rule "add_literals" (formula "3") (term "1,0,0"))
                                    (rule "mul_literals" (formula "3") (term "0,1,0,1,0"))
                                    (rule "mul_literals" (formula "3") (term "0,1,0,0,1"))
                                    (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,0"))
                                    (rule "mul_literals" (formula "3") (term "0,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "3") (term "1,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,1,0"))
                                    (rule "mul_literals" (formula "3") (term "0,1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,1"))
                                    (rule "mul_literals" (formula "3") (term "0,1,0,0,1"))
                                    (rule "polySimp_addAssoc" (formula "3") (term "0,0,0"))
                                    (rule "polySimp_addComm1" (formula "3") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "3") (term "0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "3") (term "0,0,0,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "3") (term "0,0,0"))
                                    (rule "add_literals" (formula "3") (term "1,0,0,0"))
                                    (rule "times_zero_1" (formula "3") (term "0,0,0"))
                                    (rule "leq_literals" (formula "3") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "3"))
                                    (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                                    (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                                    (rule "add_literals" (formula "3") (term "0,0,0,0"))
                                    (rule "add_zero_left" (formula "3") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "3") (term "0,0"))
                                    (rule "add_literals" (formula "3") (term "1,0,0"))
                                    (rule "times_zero_1" (formula "3") (term "0,0"))
                                    (rule "qeq_literals" (formula "3") (term "0"))
                                     (builtin "One Step Simplification" (formula "3"))
                                    (rule "andLeft" (formula "3"))
                                    (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                    (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                    (rule "add_literals" (formula "3") (term "0,0,0"))
                                    (rule "add_zero_left" (formula "3") (term "0,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "3") (term "0"))
                                    (rule "add_literals" (formula "3") (term "1,0"))
                                    (rule "times_zero_1" (formula "3") (term "0"))
                                     (builtin "One Step Simplification" (formula "3"))
                                    (rule "true_left" (formula "3"))
                                    (rule "applyEq" (formula "35") (term "0") (ifseqformula "3"))
                                    (rule "inEqSimp_homoInEq0" (formula "35"))
                                    (rule "polySimp_mulComm0" (formula "35") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "35") (term "1,0"))
                                    (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0"))
                                    (rule "mul_literals" (formula "35") (term "0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "35") (term "0"))
                                    (rule "polySimp_addComm1" (formula "35") (term "0,0"))
                                    (rule "add_literals" (formula "35") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "35") (term "0"))
                                    (rule "add_literals" (formula "35") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "35") (term "1,0"))
                                    (rule "add_literals" (formula "35") (term "0"))
                                    (rule "qeq_literals" (formula "35"))
                                    (rule "closeFalse" (formula "35"))
                                 )
                              )
                              (branch "CUT: result_22 >= 1 + l_0 FALSE"
                                  (builtin "One Step Simplification" (formula "37"))
                                 (rule "true_left" (formula "37"))
                                 (rule "inEqSimp_geqRight" (formula "38"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1"))
                                 (rule "inEqSimp_antiSymm" (formula "35") (ifseqformula "1"))
                                 (rule "applyEq" (formula "1") (term "0") (ifseqformula "35"))
                                 (rule "inEqSimp_homoInEq0" (formula "1"))
                                 (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                                 (rule "add_literals" (formula "1") (term "1,0"))
                                 (rule "times_zero_1" (formula "1") (term "0"))
                                 (rule "qeq_literals" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "applyEq" (formula "37") (term "0") (ifseqformula "34"))
                                 (rule "inEqSimp_homoInEq0" (formula "37"))
                                 (rule "polySimp_pullOutFactor0b" (formula "37") (term "0"))
                                 (rule "add_literals" (formula "37") (term "1,1,0"))
                                 (rule "polySimp_elimOne" (formula "37") (term "1,0"))
                                 (rule "applyEq" (formula "35") (term "0") (ifseqformula "34"))
                                 (rule "inEqSimp_homoInEq1" (formula "35"))
                                 (rule "polySimp_pullOutFactor1" (formula "35") (term "0"))
                                 (rule "add_literals" (formula "35") (term "1,0"))
                                 (rule "times_zero_1" (formula "35") (term "0"))
                                 (rule "leq_literals" (formula "35"))
                                 (rule "true_left" (formula "35"))
                                 (rule "applyEq" (formula "25") (term "0") (ifseqformula "34"))
                                 (rule "applyEq" (formula "2") (term "1,0,2,0,0,0") (ifseqformula "33"))
                                 (rule "polySimp_pullOutFactor2" (formula "2") (term "0,2,0,0,0"))
                                 (rule "add_literals" (formula "2") (term "1,0,2,0,0,0"))
                                 (rule "times_zero_1" (formula "2") (term "0,2,0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "2") (term "0,0"))
                                 (rule "polySimp_addComm1" (formula "2") (term "0,0,0"))
                                 (rule "applyEq" (formula "36") (term "1,0,2,0") (ifseqformula "33"))
                                 (rule "polySimp_pullOutFactor2" (formula "36") (term "0,2,0"))
                                 (rule "add_literals" (formula "36") (term "1,0,2,0"))
                                 (rule "times_zero_1" (formula "36") (term "0,2,0"))
                                 (rule "inEqSimp_commuteGeq" (formula "36"))
                                 (rule "applyEq" (formula "34") (term "0") (ifseqformula "33"))
                                 (rule "inEqSimp_homoInEq0" (formula "34"))
                                 (rule "polySimp_pullOutFactor0b" (formula "34") (term "0"))
                                 (rule "add_literals" (formula "34") (term "1,1,0"))
                                 (rule "applyEq" (formula "2") (term "0,1,1") (ifseqformula "33"))
                                 (rule "polySimp_pullOutFactor0b" (formula "2") (term "1"))
                                 (rule "add_literals" (formula "2") (term "1,1,1"))
                                 (rule "applyEq" (formula "32") (term "1") (ifseqformula "33"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "35"))
                                 (rule "mul_literals" (formula "35") (term "1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "2") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "2") (term "0,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "34"))
                                 (rule "mul_literals" (formula "34") (term "1"))
                                 (rule "inEqSimp_subsumption6" (formula "34") (ifseqformula "25"))
                                 (rule "greater_literals" (formula "34") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "34"))
                                 (rule "mul_literals" (formula "34") (term "1,0"))
                                 (rule "leq_literals" (formula "34") (term "0"))
                                  (builtin "One Step Simplification" (formula "34"))
                                 (rule "true_left" (formula "34"))
                                 (rule "all_pull_out3" (formula "30") (term "0"))
                                 (rule "all_pull_out3" (formula "16") (term "0"))
                                 (rule "onlyCreatedObjectsAreReferencedFinal" (formula "37") (term "0") (ifseqformula "8") (ifseqformula "5"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "38"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferencedFinal" (formula "15") (term "0") (ifseqformula "9") (ifseqformula "6"))
                                 (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "16"))
                                 (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "38"))
                                  (builtin "One Step Simplification" (formula "15"))
                                 (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "16"))
                                 (rule "shift_paren_or" (formula "31") (term "0,0"))
                                 (rule "shift_paren_or" (formula "17") (term "0,0"))
                                 (rule "shift_paren_or" (formula "31") (term "0,0,0"))
                                 (rule "shift_paren_or" (formula "17") (term "0,0,0"))
                                 (rule "allLeft" (formula "16") (inst "t=Z(0(#))"))
                                 (rule "leq_literals" (formula "16") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "16"))
                                 (rule "add_zero_right" (formula "16") (term "0,2,0,1"))
                                 (rule "inEqSimp_homoInEq1" (formula "16") (term "0"))
                                 (rule "times_zero_2" (formula "16") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "16") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0"))
                                 (rule "mul_literals" (formula "16") (term "1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "16") (term "0") (ifseqformula "27"))
                                 (rule "qeq_literals" (formula "16") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "16"))
                                 (rule "inEqSimp_contradInEq1" (formula "3") (term "0,0") (ifseqformula "16"))
                                 (rule "inEqSimp_homoInEq1" (formula "3") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0,0"))
                                 (rule "mul_literals" (formula "3") (term "0,1,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "3") (term "0,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "3") (term "0,0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "3") (term "1,1,0,0,0,0"))
                                 (rule "times_zero_1" (formula "3") (term "1,0,0,0,0"))
                                 (rule "add_zero_right" (formula "3") (term "0,0,0,0"))
                                 (rule "leq_literals" (formula "3") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "3"))
                                 (rule "polySimp_homoEq" (formula "3"))
                                 (rule "mul_literals" (formula "3") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "3") (term "0"))
                                 (rule "add_literals" (formula "3") (term "0,0"))
                                 (rule "polySimp_sepPosMonomial" (formula "3"))
                                 (rule "mul_literals" (formula "3") (term "1"))
                                 (rule "applyEqRigid" (formula "4") (term "0,0") (ifseqformula "3"))
                                 (rule "jdiv_axiom_inline" (formula "4") (term "0"))
                                 (rule "mul_literals" (formula "4") (term "0,0,2,0"))
                                 (rule "div_literals" (formula "4") (term "1,0"))
                                 (rule "qeq_literals" (formula "4") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "eqSymm" (formula "4"))
                                 (rule "applyEqRigid" (formula "27") (term "0") (ifseqformula "4"))
                                 (rule "qeq_literals" (formula "27"))
                                 (rule "closeFalse" (formula "27"))
                              )
                           )
                        )
                        (branch "CUT: result_21 >= 1 + l_0 FALSE"
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "true_left" (formula "24"))
                           (rule "inEqSimp_geqRight" (formula "44"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1"))
                           (rule "inEqSimp_antiSymm" (formula "21") (ifseqformula "1"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "21"))
                           (rule "inEqSimp_homoInEq0" (formula "1"))
                           (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "1,0"))
                           (rule "times_zero_1" (formula "1") (term "0"))
                           (rule "qeq_literals" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "applyEq" (formula "23") (term "1,1") (ifseqformula "20"))
                           (rule "applyEq" (formula "25") (term "1,0,2,0,1") (ifseqformula "20"))
                           (rule "polySimp_pullOutFactor2" (formula "25") (term "0,2,0,1"))
                           (rule "add_literals" (formula "25") (term "1,0,2,0,1"))
                           (rule "times_zero_1" (formula "25") (term "0,2,0,1"))
                           (rule "inEqSimp_homoInEq1" (formula "25") (term "1"))
                           (rule "polySimp_pullOutFactor1" (formula "25") (term "0,1"))
                           (rule "add_literals" (formula "25") (term "1,0,1"))
                           (rule "times_zero_1" (formula "25") (term "0,1"))
                           (rule "leq_literals" (formula "25") (term "1"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "true_left" (formula "25"))
                           (rule "applyEq" (formula "22") (term "0") (ifseqformula "20"))
                           (rule "inEqSimp_homoInEq0" (formula "22"))
                           (rule "polySimp_pullOutFactor0b" (formula "22") (term "0"))
                           (rule "add_literals" (formula "22") (term "1,1,0"))
                           (rule "applyEq" (formula "3") (term "1,0,2,0,0,0") (ifseqformula "20"))
                           (rule "polySimp_pullOutFactor2" (formula "3") (term "0,2,0,0,0"))
                           (rule "add_literals" (formula "3") (term "1,0,2,0,0,0"))
                           (rule "times_zero_1" (formula "3") (term "0,2,0,0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "3") (term "0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,0"))
                           (rule "add_literals" (formula "3") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "3") (term "1,0,0,0"))
                           (rule "add_zero_right" (formula "3") (term "0,0,0"))
                           (rule "leq_literals" (formula "3") (term "0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "polySimp_homoEq" (formula "3"))
                           (rule "mul_literals" (formula "3") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "3") (term "0,0,0"))
                           (rule "applyEq" (formula "24") (term "0") (ifseqformula "20"))
                           (rule "inEqSimp_homoInEq0" (formula "24"))
                           (rule "polySimp_pullOutFactor0b" (formula "24") (term "0"))
                           (rule "add_literals" (formula "24") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "24") (term "1,0"))
                           (rule "applyEq" (formula "29") (term "0") (ifseqformula "20"))
                           (rule "applyEq" (formula "39") (term "0,1,1") (ifseqformula "20"))
                           (rule "applyEq" (formula "37") (term "0,0") (ifseqformula "20"))
                           (rule "inEqSimp_homoInEq1" (formula "37"))
                           (rule "polySimp_mulLiterals" (formula "37") (term "1,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "37") (term "0"))
                           (rule "add_literals" (formula "37") (term "1,1,0"))
                           (rule "applyEq" (formula "21") (term "0") (ifseqformula "20"))
                           (rule "inEqSimp_homoInEq1" (formula "21"))
                           (rule "polySimp_pullOutFactor1" (formula "21") (term "0"))
                           (rule "add_literals" (formula "21") (term "1,0"))
                           (rule "times_zero_1" (formula "21") (term "0"))
                           (rule "leq_literals" (formula "21"))
                           (rule "true_left" (formula "21"))
                           (rule "applyEq" (formula "3") (term "0,1,0") (ifseqformula "20"))
                           (rule "polySimp_addComm1" (formula "3") (term "0"))
                           (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                           (rule "add_literals" (formula "3") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "3") (term "1,0,0"))
                           (rule "add_zero_right" (formula "3") (term "0,0"))
                           (rule "applyEq" (formula "19") (term "1") (ifseqformula "20"))
                           (rule "applyEq" (formula "44") (term "1") (ifseqformula "20"))
                           (rule "polySimp_sepPosMonomial" (formula "3"))
                           (rule "mul_literals" (formula "3") (term "1"))
                           (rule "applyEq" (formula "6") (term "1") (ifseqformula "3"))
                           (rule "applyEq" (formula "1") (term "1,0,1") (ifseqformula "3"))
                           (rule "polySimp_addComm0" (formula "1") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "21"))
                           (rule "mul_literals" (formula "21") (term "1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "23"))
                           (rule "mul_literals" (formula "23") (term "1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "36"))
                           (rule "polySimp_mulLiterals" (formula "36") (term "0"))
                           (rule "polySimp_elimOne" (formula "36") (term "0"))
                           (rule "inEqSimp_strengthen1" (formula "36") (ifseqformula "43"))
                           (rule "replace_known_left" (formula "38") (term "0") (ifseqformula "36"))
                            (builtin "One Step Simplification" (formula "38"))
                           (rule "inEqSimp_contradEq7" (formula "43") (ifseqformula "36"))
                           (rule "polySimp_mulComm0" (formula "43") (term "1,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "43") (term "0,0"))
                           (rule "add_literals" (formula "43") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "43") (term "1,0,0"))
                           (rule "add_zero_right" (formula "43") (term "0,0"))
                           (rule "leq_literals" (formula "43") (term "0"))
                            (builtin "One Step Simplification" (formula "43"))
                           (rule "false_right" (formula "43"))
                           (rule "inEqSimp_subsumption6" (formula "21") (ifseqformula "23"))
                           (rule "mul_literals" (formula "21") (term "1,1,0"))
                           (rule "greater_literals" (formula "21") (term "0,0"))
                            (builtin "One Step Simplification" (formula "21"))
                           (rule "leq_literals" (formula "21") (term "0"))
                            (builtin "One Step Simplification" (formula "21"))
                           (rule "true_left" (formula "21"))
                           (rule "inEqSimp_subsumption1" (formula "22") (ifseqformula "27"))
                           (rule "leq_literals" (formula "22") (term "0"))
                            (builtin "One Step Simplification" (formula "22"))
                           (rule "true_left" (formula "22"))
                           (rule "inEqSimp_exactShadow3" (formula "34") (ifseqformula "35"))
                           (rule "polySimp_rightDist" (formula "34") (term "0,0"))
                           (rule "mul_literals" (formula "34") (term "0,0,0"))
                           (rule "polySimp_addAssoc" (formula "34") (term "0"))
                           (rule "polySimp_addComm1" (formula "34") (term "0,0"))
                           (rule "add_literals" (formula "34") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "34") (term "0"))
                           (rule "add_literals" (formula "34") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "34") (term "1,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "34"))
                           (rule "mul_literals" (formula "34") (term "1"))
                           (rule "inEqSimp_exactShadow1" (formula "21") (ifseqformula "35"))
                           (rule "greater_literals" (formula "21") (term "0"))
                            (builtin "One Step Simplification" (formula "21"))
                           (rule "polySimp_rightDist" (formula "21") (term "0,0"))
                           (rule "mul_literals" (formula "21") (term "0,0,0"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0"))
                           (rule "mul_literals" (formula "21") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "21") (term "0"))
                           (rule "polySimp_addComm1" (formula "21") (term "0,0"))
                           (rule "add_literals" (formula "21") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "21") (term "0"))
                           (rule "add_literals" (formula "21") (term "1,1,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "21"))
                           (rule "mul_literals" (formula "21") (term "1"))
                           (rule "inEqSimp_subsumption6" (formula "21") (ifseqformula "27"))
                           (rule "mul_literals" (formula "21") (term "1,1,0"))
                           (rule "greater_literals" (formula "21") (term "0,0"))
                            (builtin "One Step Simplification" (formula "21"))
                           (rule "leq_literals" (formula "21") (term "0"))
                            (builtin "One Step Simplification" (formula "21"))
                           (rule "true_left" (formula "21"))
                           (rule "ifthenelse_split" (formula "1") (term "0"))
                           (branch " self.sorted_splitters[l_0 * -1 + result_22] >= 1 + self.sorted_splitters[1] TRUE"
                              (rule "polySimp_homoEq" (formula "2"))
                              (rule "times_zero_2" (formula "2") (term "1,0"))
                              (rule "add_zero_right" (formula "2") (term "0"))
                              (rule "polySimp_sepNegMonomial" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "applyEq" (formula "22") (term "0") (ifseqformula "2"))
                              (rule "inEqSimp_homoInEq1" (formula "22"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "22") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0"))
                              (rule "mul_literals" (formula "22") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "22") (term "0"))
                              (rule "polySimp_addComm1" (formula "22") (term "0,0"))
                              (rule "add_literals" (formula "22") (term "0,0,0"))
                              (rule "add_zero_left" (formula "22") (term "0,0"))
                              (rule "polySimp_pullOutFactor1" (formula "22") (term "0"))
                              (rule "add_literals" (formula "22") (term "1,0"))
                              (rule "inEqSimp_invertInEq0" (formula "22"))
                              (rule "times_zero_2" (formula "22") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "0"))
                              (rule "polySimp_elimOne" (formula "22") (term "0"))
                              (rule "inEqSimp_subsumption1" (formula "22") (ifseqformula "27"))
                              (rule "leq_literals" (formula "22") (term "0"))
                               (builtin "One Step Simplification" (formula "22"))
                              (rule "true_left" (formula "22"))
                              (rule "inEqSimp_subsumption1" (formula "37") (term "1") (ifseqformula "1"))
                              (rule "inEqSimp_homoInEq0" (formula "37") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                              (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "37") (term "0,0,1"))
                              (rule "qeq_literals" (formula "37") (term "0,1"))
                               (builtin "One Step Simplification" (formula "37"))
                              (rule "true_left" (formula "37"))
                              (rule "elimGcdEq" (formula "2") (inst "elimGcdRightDiv=add(Z(0(#)), l_0)") (inst "elimGcdLeftDiv=result_22") (inst "elimGcd=Z(2(#))"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "mul_literals" (formula "2") (term "0,1,0,0,1"))
                              (rule "add_zero_left" (formula "2") (term "1,1,0,0,1"))
                              (rule "add_literals" (formula "2") (term "1,0,0"))
                              (rule "mul_literals" (formula "2") (term "0,1,0,0,0"))
                              (rule "add_zero_left" (formula "2") (term "1,1,0,0,0"))
                              (rule "add_zero_left" (formula "2") (term "1,1,1"))
                              (rule "add_zero_left" (formula "2") (term "1,1,0,1,0"))
                              (rule "mul_literals" (formula "2") (term "0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1"))
                              (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0,1"))
                              (rule "add_literals" (formula "2") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "2") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "2") (term "0,0,1"))
                              (rule "equal_literals" (formula "2") (term "0,1"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0,0"))
                              (rule "add_literals" (formula "2") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "2") (term "1,0,0,0"))
                              (rule "add_zero_right" (formula "2") (term "0,0,0"))
                              (rule "leq_literals" (formula "2") (term "0,0"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
                              (rule "add_literals" (formula "2") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "2") (term "1,0,0"))
                              (rule "add_zero_right" (formula "2") (term "0,0"))
                              (rule "qeq_literals" (formula "2") (term "0"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "closeFalse" (formula "2"))
                           )
                           (branch " self.sorted_splitters[l_0 * -1 + result_22] >= 1 + self.sorted_splitters[1] FALSE"
                              (rule "polySimp_homoEq" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0"))
                              (rule "inEqSimp_geqRight" (formula "38"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0"))
                              (rule "polySimp_sepNegMonomial" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "applyEq" (formula "22") (term "0") (ifseqformula "2"))
                              (rule "inEqSimp_homoInEq1" (formula "22"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "1,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "22") (term "0"))
                              (rule "add_literals" (formula "22") (term "1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                              (rule "polySimp_elimOne" (formula "1") (term "1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "22"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "0"))
                              (rule "polySimp_elimOne" (formula "22") (term "0"))
                              (rule "inEqSimp_subsumption1" (formula "22") (ifseqformula "27"))
                              (rule "leq_literals" (formula "22") (term "0"))
                               (builtin "One Step Simplification" (formula "22"))
                              (rule "true_left" (formula "22"))
                              (rule "elimGcdEq" (formula "2") (inst "elimGcdRightDiv=l_0") (inst "elimGcdLeftDiv=result_22") (inst "elimGcd=Z(2(#))"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "mul_literals" (formula "2") (term "0,1,0,1,0"))
                              (rule "add_literals" (formula "2") (term "1,0,0"))
                              (rule "mul_literals" (formula "2") (term "0,1,0,0,1"))
                              (rule "mul_literals" (formula "2") (term "0,1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,0,1,0"))
                              (rule "polySimp_pullOutFactor0" (formula "2") (term "0,1,0"))
                              (rule "add_literals" (formula "2") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "2") (term "0,1,0"))
                              (rule "qeq_literals" (formula "2") (term "1,0"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1"))
                              (rule "polySimp_pullOutFactor0" (formula "2") (term "0,0,1"))
                              (rule "add_literals" (formula "2") (term "1,0,0,1"))
                              (rule "times_zero_1" (formula "2") (term "0,0,1"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                              (rule "polySimp_pullOutFactor0" (formula "2") (term "0,0"))
                              (rule "add_literals" (formula "2") (term "1,0,0"))
                              (rule "times_zero_1" (formula "2") (term "0,0"))
                              (rule "leq_literals" (formula "2") (term "0"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "applyEq" (formula "35") (term "0") (ifseqformula "2"))
                              (rule "inEqSimp_homoInEq0" (formula "35"))
                              (rule "polySimp_pullOutFactor0b" (formula "35") (term "0"))
                              (rule "add_literals" (formula "35") (term "1,1,0"))
                              (rule "polySimp_elimOne" (formula "35") (term "1,0"))
                              (rule "applyEq" (formula "25") (term "0") (ifseqformula "2"))
                              (rule "applyEq" (formula "33") (term "0") (ifseqformula "2"))
                              (rule "inEqSimp_homoInEq1" (formula "33"))
                              (rule "polySimp_pullOutFactor1b" (formula "33") (term "0"))
                              (rule "add_literals" (formula "33") (term "1,1,0"))
                              (rule "times_zero_1" (formula "33") (term "1,0"))
                              (rule "add_literals" (formula "33") (term "0"))
                              (rule "leq_literals" (formula "33"))
                              (rule "closeFalse" (formula "33"))
                           )
                        )
                     )
                     (branch "Null Reference (x_arr_1 = null)"
                         (builtin "One Step Simplification" (formula "20"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "false_right" (formula "20"))
                        (rule "applyEq" (formula "10") (term "1,2,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "19") (term "1,2,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "20") (term "1,0,1,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "13") (term "1,2,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "16") (term "1,2,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "20") (term "1,0,1,0") (ifseqformula "1"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "21") (term "1,0") (ifseqformula "4") (ifseqformula "5"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "2") (term "0") (ifseqformula "5") (ifseqformula "6"))
                        (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "21") (term "1") (inst "#v0=x_8"))
                        (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_12"))
                        (rule "variableDeclarationAssign" (formula "21") (term "1"))
                        (rule "variableDeclaration" (formula "21") (term "1") (newnames "a"))
                        (rule "assignment" (formula "21") (term "1"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "variableDeclarationAssign" (formula "21") (term "1"))
                        (rule "variableDeclaration" (formula "21") (term "1") (newnames "b"))
                        (rule "assignment" (formula "21") (term "1"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "methodBodyExpand" (formula "21") (term "1") (newnames "heapBefore_cmp,savedHeapBefore_cmp"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "returnUnfold" (formula "21") (term "1") (inst "#v0=x_13"))
                        (rule "variableDeclarationAssign" (formula "21") (term "1"))
                        (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_13"))
                        (rule "less_than_comparison_simple" (formula "21") (term "1"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "methodCallReturn" (formula "21") (term "1"))
                        (rule "assignment" (formula "21") (term "1"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "methodCallEmpty" (formula "21") (term "1"))
                        (rule "blockEmpty" (formula "21") (term "1"))
                        (rule "assignment" (formula "21") (term "1"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "blockEmpty" (formula "21") (term "1"))
                        (rule "compound_assignment_1_new" (formula "21") (term "1"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "compound_subtraction_2" (formula "21") (term "1") (inst "#v0=x_1") (inst "#v1=x_2"))
                        (rule "variableDeclarationAssign" (formula "21") (term "1"))
                        (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_1"))
                        (rule "compound_addition_2" (formula "21") (term "1") (inst "#v0=x_3") (inst "#v1=x_4"))
                        (rule "variableDeclarationAssign" (formula "21") (term "1"))
                        (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_14"))
                        (rule "assignmentMultiplicationInt" (formula "21") (term "1"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "translateJavaMulInt" (formula "21") (term "0,1,0"))
                        (rule "polySimp_mulComm0" (formula "21") (term "0,1,0"))
                        (rule "variableDeclarationAssign" (formula "21") (term "1"))
                        (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_15"))
                        (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "21") (term "1") (inst "#v0=x_16"))
                        (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_16"))
                        (rule "variableDeclarationAssign" (formula "21") (term "1"))
                        (rule "variableDeclaration" (formula "21") (term "1") (newnames "b_1"))
                        (rule "assignment" (formula "21") (term "1"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "methodBodyExpand" (formula "21") (term "1") (newnames "heapBefore_toInt,savedHeapBefore_toInt"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "returnUnfold" (formula "21") (term "1") (inst "#v0=x_17"))
                        (rule "variableDeclarationAssign" (formula "21") (term "1"))
                        (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_17"))
                        (rule "condition_simple" (formula "21") (term "1"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "ifthenelse_negated" (formula "21") (term "0,1,0"))
                        (rule "methodCallReturn" (formula "21") (term "1"))
                        (rule "assignment" (formula "21") (term "1"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "methodCallEmpty" (formula "21") (term "1"))
                        (rule "blockEmpty" (formula "21") (term "1"))
                        (rule "assignment" (formula "21") (term "1"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "assignmentAdditionInt" (formula "21") (term "1"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "translateJavaAddInt" (formula "21") (term "0,1,0"))
                        (rule "variableDeclarationAssign" (formula "21") (term "1"))
                        (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_18"))
                        (rule "assignment_read_attribute_this_final" (formula "21"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "assignmentSubtractionInt" (formula "21") (term "1"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "translateJavaSubInt" (formula "21") (term "0,1,0"))
                        (rule "polySimp_elimSub" (formula "21") (term "0,1,0"))
                        (rule "polySimp_addComm1" (formula "21") (term "0,1,0"))
                        (rule "blockEmpty" (formula "21") (term "1"))
                        (rule "methodCallReturn" (formula "21") (term "1"))
                        (rule "assignment" (formula "21") (term "1"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "methodCallEmpty" (formula "21") (term "1"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "emptyModality" (formula "21") (term "1"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "notRight" (formula "21"))
                        (rule "polySimp_homoEq" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,0,1,0"))
                        (rule "polySimp_mulAssoc" (formula "1") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "14"))
                        (rule "polySimp_mulAssoc" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "14") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "20"))
                        (rule "polySimp_mulAssoc" (formula "20") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "20") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,1,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0,0,0,1,0"))
                        (rule "polySimp_sepNegMonomial" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "14"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "20"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                        (rule "inEqSimp_exactShadow1" (formula "14") (ifseqformula "13"))
                        (rule "greater_literals" (formula "14") (term "0"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "0,0"))
                        (rule "mul_literals" (formula "14") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "14") (term "0"))
                        (rule "add_literals" (formula "14") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                        (rule "mul_literals" (formula "14") (term "1"))
                        (rule "inEqSimp_exactShadow1" (formula "15") (ifseqformula "20"))
                        (rule "greater_literals" (formula "15") (term "0"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "0,0"))
                        (rule "mul_literals" (formula "15") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1"))
                        (rule "polySimp_rightDist" (formula "15") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
                        (rule "mul_literals" (formula "15") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "15") (term "1,1"))
                        (rule "inEqSimp_exactShadow1" (formula "22") (ifseqformula "13"))
                        (rule "greater_literals" (formula "22") (term "0"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "0,0"))
                        (rule "mul_literals" (formula "22") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "22") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "22"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "0"))
                        (rule "polySimp_elimOne" (formula "22") (term "0"))
                        (rule "inEqSimp_exactShadow1" (formula "23") (ifseqformula "21"))
                        (rule "greater_literals" (formula "23") (term "0"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "23") (term "0,0"))
                        (rule "mul_literals" (formula "23") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "23") (term "0"))
                        (rule "add_literals" (formula "23") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "23") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "23"))
                        (rule "mul_literals" (formula "23") (term "1"))
                        (rule "inEqSimp_exactShadow1" (formula "15") (ifseqformula "22"))
                        (rule "greater_literals" (formula "15") (term "0"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "0,0"))
                        (rule "mul_literals" (formula "15") (term "0,0,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0"))
                        (rule "polySimp_addComm1" (formula "15") (term "0,0"))
                        (rule "add_literals" (formula "15") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "15") (term "0"))
                        (rule "add_literals" (formula "15") (term "1,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                        (rule "mul_literals" (formula "15") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "15") (ifseqformula "14"))
                        (rule "mul_literals" (formula "15") (term "1,1,0"))
                        (rule "greater_literals" (formula "15") (term "0,0"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "leq_literals" (formula "15") (term "0"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "true_left" (formula "15"))
                        (rule "inEqSimp_exactShadow3" (formula "23") (ifseqformula "22"))
                        (rule "mul_literals" (formula "23") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "23") (term "0"))
                        (rule "add_literals" (formula "23") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "23"))
                        (rule "mul_literals" (formula "23") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "23") (ifseqformula "14"))
                        (rule "mul_literals" (formula "23") (term "1,1,0"))
                        (rule "greater_literals" (formula "23") (term "0,0"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "leq_literals" (formula "23") (term "0"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "true_left" (formula "23"))
                        (rule "Definition_axiom_for_isClassifiedAs_in_de_wiesler_Tree" (formula "17") (term "0"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "translateJavaSubInt" (formula "17") (term "1,0,1"))
                        (rule "translateJavaSubInt" (formula "17") (term "0,2,0,1,0"))
                        (rule "andLeft" (formula "17"))
                        (rule "polySimp_elimSub" (formula "17") (term "0,2,0,1"))
                        (rule "mul_literals" (formula "17") (term "1,0,2,0,1"))
                        (rule "polySimp_elimSub" (formula "18") (term "1,0"))
                        (rule "mul_literals" (formula "18") (term "1,1,0"))
                        (rule "polySimp_addComm1" (formula "17") (term "0,2,0,1"))
                        (rule "polySimp_addComm0" (formula "18") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "17") (term "0,0,2,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "17") (term "0"))
                        (rule "add_zero_right" (formula "17") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "17") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "17") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "17") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "18") (term "0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,0,0"))
                        (rule "add_literals" (formula "18") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "18") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "18") (term "0,0"))
                        (rule "add_literals" (formula "18") (term "1,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "17") (term "1"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "18") (term "1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "17") (term "1,0"))
                        (rule "mul_literals" (formula "17") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "17") (term "1,1,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "17") (term "1,1"))
                        (rule "mul_literals" (formula "17") (term "0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1"))
                        (rule "polySimp_elimOne" (formula "17") (term "1,1,1"))
                        (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "19"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "andLeft" (formula "19"))
                        (rule "andLeft" (formula "19"))
                        (rule "andLeft" (formula "19"))
                        (rule "andLeft" (formula "19"))
                        (rule "andLeft" (formula "21"))
                        (rule "andLeft" (formula "19"))
                        (rule "andLeft" (formula "19"))
                        (rule "andLeft" (formula "21"))
                        (rule "notLeft" (formula "20"))
                        (rule "notLeft" (formula "19"))
                        (rule "inEqSimp_commuteLeq" (formula "24"))
                        (rule "inEqSimp_commuteLeq" (formula "22"))
                        (rule "inEqSimp_commuteLeq" (formula "23"))
                        (rule "inEqSimp_commuteLeq" (formula "19"))
                        (rule "applyEq" (formula "23") (term "1") (ifseqformula "21"))
                        (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "21"))
                        (rule "applyEq" (formula "18") (term "0,0,0") (ifseqformula "21"))
                        (rule "applyEq" (formula "18") (term "0,1,0,2,0,1") (ifseqformula "21"))
                        (rule "applyEq" (formula "22") (term "0") (ifseqformula "21"))
                        (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "21"))
                        (rule "applyEq" (formula "17") (term "0,1,0,2,0,1") (ifseqformula "21"))
                        (rule "applyEq" (formula "13") (term "0") (ifseqformula "21"))
                        (rule "applyEq" (formula "28") (term "0") (ifseqformula "21"))
                        (rule "applyEq" (formula "24") (term "1") (ifseqformula "21"))
                        (rule "applyEq" (formula "32") (term "0,1,3,0") (ifseqformula "21"))
                        (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "21"))
                        (rule "translateJavaSubInt" (formula "25") (term "3,0"))
                        (rule "polySimp_elimSub" (formula "25") (term "3,0"))
                        (rule "mul_literals" (formula "25") (term "1,3,0"))
                        (rule "polySimp_addComm0" (formula "25") (term "3,0"))
                        (rule "applyEq" (formula "25") (term "1,3,0") (ifseqformula "21"))
                        (rule "inEqSimp_exactShadow3" (formula "22") (ifseqformula "28"))
                        (rule "mul_literals" (formula "22") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "22"))
                        (rule "mul_literals" (formula "22") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "31") (ifseqformula "22"))
                        (rule "leq_literals" (formula "31") (term "0"))
                         (builtin "One Step Simplification" (formula "31"))
                        (rule "true_left" (formula "31"))
                        (rule "inEqSimp_exactShadow3" (formula "23") (ifseqformula "13"))
                        (rule "mul_literals" (formula "23") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "23"))
                        (rule "mul_literals" (formula "23") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "23"))
                        (rule "leq_literals" (formula "14") (term "0"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "true_left" (formula "14"))
                        (rule "inEqSimp_exactShadow1" (formula "15") (ifseqformula "13"))
                        (rule "greater_literals" (formula "15") (term "0"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "0,0"))
                        (rule "mul_literals" (formula "15") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "15") (term "0"))
                        (rule "add_literals" (formula "15") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                        (rule "mul_literals" (formula "15") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "23"))
                        (rule "leq_literals" (formula "15") (term "0"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "true_left" (formula "15"))
                        (rule "inEqSimp_exactShadow1" (formula "15") (ifseqformula "29"))
                        (rule "greater_literals" (formula "15") (term "0"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "0,0"))
                        (rule "mul_literals" (formula "15") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1"))
                        (rule "polySimp_rightDist" (formula "15") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
                        (rule "mul_literals" (formula "15") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "15") (term "1,1"))
                        (rule "inEqSimp_exactShadow1" (formula "31") (ifseqformula "13"))
                        (rule "greater_literals" (formula "31") (term "0"))
                         (builtin "One Step Simplification" (formula "31"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "31") (term "0,0"))
                        (rule "mul_literals" (formula "31") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "31") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "31"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "0"))
                        (rule "polySimp_elimOne" (formula "31") (term "0"))
                        (rule "inEqSimp_exactShadow1" (formula "31") (ifseqformula "29"))
                        (rule "greater_literals" (formula "31") (term "0"))
                         (builtin "One Step Simplification" (formula "31"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "31") (term "0,0"))
                        (rule "mul_literals" (formula "31") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "31") (term "0"))
                        (rule "add_literals" (formula "31") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "31") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "31"))
                        (rule "mul_literals" (formula "31") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "31") (ifseqformula "21"))
                        (rule "leq_literals" (formula "31") (term "0"))
                         (builtin "One Step Simplification" (formula "31"))
                        (rule "true_left" (formula "31"))
                        (rule "inEqSimp_exactShadow3" (formula "21") (ifseqformula "30"))
                        (rule "mul_literals" (formula "21") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "21") (term "0"))
                        (rule "add_literals" (formula "21") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "21"))
                        (rule "mul_literals" (formula "21") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "21") (ifseqformula "23"))
                        (rule "greater_literals" (formula "21") (term "0,0"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "mul_literals" (formula "21") (term "1,0"))
                        (rule "leq_literals" (formula "21") (term "0"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "true_left" (formula "21"))
                        (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "10"))
                         (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "3")) (ifInst ""  (formula "4")))
                        (rule "closeFalse" (formula "10"))
                     )
                     (branch "Index Out of Bounds (x_arr_1 != null, but bucket_index_1 Out of Bounds!)"
                        (rule "false_right" (formula "20"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "commute_or" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "22") (term "0,1,2,1") (ifseqformula "4") (ifseqformula "5"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "11") (term "1,2,0") (ifseqformula "5") (ifseqformula "6"))
                        (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "22"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "arrayLengthIsAShort" (formula "2") (term "0,1"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "arrayLengthNotNegative" (formula "2") (term "0,1"))
                        (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "24") (term "1") (inst "#v0=x_8"))
                        (rule "variableDeclaration" (formula "24") (term "1") (newnames "x_12"))
                        (rule "variableDeclarationAssign" (formula "24") (term "1"))
                        (rule "variableDeclaration" (formula "24") (term "1") (newnames "a"))
                        (rule "assignment" (formula "24") (term "1"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "variableDeclarationAssign" (formula "24") (term "1"))
                        (rule "variableDeclaration" (formula "24") (term "1") (newnames "b"))
                        (rule "assignment" (formula "24") (term "1"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "methodBodyExpand" (formula "24") (term "1") (newnames "heapBefore_cmp,savedHeapBefore_cmp"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "returnUnfold" (formula "24") (term "1") (inst "#v0=x_13"))
                        (rule "variableDeclarationAssign" (formula "24") (term "1"))
                        (rule "variableDeclaration" (formula "24") (term "1") (newnames "x_13"))
                        (rule "less_than_comparison_simple" (formula "24") (term "1"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "methodCallReturn" (formula "24") (term "1"))
                        (rule "assignment" (formula "24") (term "1"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "methodCallEmpty" (formula "24") (term "1"))
                        (rule "blockEmpty" (formula "24") (term "1"))
                        (rule "assignment" (formula "24") (term "1"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "blockEmpty" (formula "24") (term "1"))
                        (rule "compound_assignment_1_new" (formula "24") (term "1"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "compound_subtraction_2" (formula "24") (term "1") (inst "#v0=x_1") (inst "#v1=x_2"))
                        (rule "variableDeclarationAssign" (formula "24") (term "1"))
                        (rule "variableDeclaration" (formula "24") (term "1") (newnames "x_1"))
                        (rule "compound_addition_2" (formula "24") (term "1") (inst "#v0=x_3") (inst "#v1=x_4"))
                        (rule "variableDeclarationAssign" (formula "24") (term "1"))
                        (rule "variableDeclaration" (formula "24") (term "1") (newnames "x_14"))
                        (rule "assignmentMultiplicationInt" (formula "24") (term "1"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "translateJavaMulInt" (formula "24") (term "0,1,0"))
                        (rule "polySimp_mulComm0" (formula "24") (term "0,1,0"))
                        (rule "variableDeclarationAssign" (formula "24") (term "1"))
                        (rule "variableDeclaration" (formula "24") (term "1") (newnames "x_15"))
                        (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "24") (term "1") (inst "#v0=x_16"))
                        (rule "variableDeclaration" (formula "24") (term "1") (newnames "x_16"))
                        (rule "variableDeclarationAssign" (formula "24") (term "1"))
                        (rule "variableDeclaration" (formula "24") (term "1") (newnames "b_1"))
                        (rule "assignment" (formula "24") (term "1"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "methodBodyExpand" (formula "24") (term "1") (newnames "heapBefore_toInt,savedHeapBefore_toInt"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "returnUnfold" (formula "24") (term "1") (inst "#v0=x_17"))
                        (rule "variableDeclarationAssign" (formula "24") (term "1"))
                        (rule "variableDeclaration" (formula "24") (term "1") (newnames "x_17"))
                        (rule "condition_simple" (formula "24") (term "1"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "ifthenelse_negated" (formula "24") (term "0,1,0"))
                        (rule "methodCallReturn" (formula "24") (term "1"))
                        (rule "assignment" (formula "24") (term "1"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "methodCallEmpty" (formula "24") (term "1"))
                        (rule "blockEmpty" (formula "24") (term "1"))
                        (rule "assignment" (formula "24") (term "1"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "assignmentAdditionInt" (formula "24") (term "1"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "translateJavaAddInt" (formula "24") (term "0,1,0"))
                        (rule "variableDeclarationAssign" (formula "24") (term "1"))
                        (rule "variableDeclaration" (formula "24") (term "1") (newnames "x_18"))
                        (rule "assignment_read_attribute_this_final" (formula "24"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "assignmentSubtractionInt" (formula "24") (term "1"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "translateJavaSubInt" (formula "24") (term "0,1,0"))
                        (rule "polySimp_elimSub" (formula "24") (term "0,1,0"))
                        (rule "polySimp_addComm1" (formula "24") (term "0,1,0"))
                        (rule "blockEmpty" (formula "24") (term "1"))
                        (rule "methodCallReturn" (formula "24") (term "1"))
                        (rule "assignment" (formula "24") (term "1"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "methodCallEmpty" (formula "24") (term "1"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "emptyModality" (formula "24") (term "1"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "notRight" (formula "24"))
                        (rule "polySimp_homoEq" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,0,1,0"))
                        (rule "polySimp_mulAssoc" (formula "1") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "22"))
                        (rule "polySimp_mulAssoc" (formula "22") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "22") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "16"))
                        (rule "polySimp_mulAssoc" (formula "16") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "16") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "4") (term "0"))
                        (rule "times_zero_1" (formula "4") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "4") (term "0,0,0"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,1,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0,0,0,1,0"))
                        (rule "polySimp_sepNegMonomial" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "22"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "16"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "0,0"))
                        (rule "polySimp_elimOne" (formula "4") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                        (rule "inEqSimp_exactShadow1" (formula "22") (ifseqformula "15"))
                        (rule "greater_literals" (formula "22") (term "0"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "0,0"))
                        (rule "mul_literals" (formula "22") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "22") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "22"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "0"))
                        (rule "polySimp_elimOne" (formula "22") (term "0"))
                        (rule "inEqSimp_exactShadow1" (formula "23") (ifseqformula "21"))
                        (rule "greater_literals" (formula "23") (term "0"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "23") (term "0,0"))
                        (rule "mul_literals" (formula "23") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "23") (term "0"))
                        (rule "add_literals" (formula "23") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "23") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "23"))
                        (rule "mul_literals" (formula "23") (term "1"))
                        (rule "inEqSimp_exactShadow1" (formula "16") (ifseqformula "15"))
                        (rule "greater_literals" (formula "16") (term "0"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "0,0"))
                        (rule "mul_literals" (formula "16") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "16") (term "0"))
                        (rule "add_literals" (formula "16") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "16") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                        (rule "mul_literals" (formula "16") (term "1"))
                        (rule "inEqSimp_exactShadow1" (formula "17") (ifseqformula "22"))
                        (rule "greater_literals" (formula "17") (term "0"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "17") (term "0,0"))
                        (rule "mul_literals" (formula "17") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "17"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1"))
                        (rule "polySimp_rightDist" (formula "17") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "1,1"))
                        (rule "mul_literals" (formula "17") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "17") (term "1,1"))
                        (rule "inEqSimp_exactShadow3" (formula "25") (ifseqformula "24"))
                        (rule "mul_literals" (formula "25") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "25") (term "0"))
                        (rule "add_literals" (formula "25") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "25"))
                        (rule "mul_literals" (formula "25") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "25") (ifseqformula "16"))
                        (rule "mul_literals" (formula "25") (term "1,1,0"))
                        (rule "greater_literals" (formula "25") (term "0,0"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "leq_literals" (formula "25") (term "0"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "true_left" (formula "25"))
                        (rule "inEqSimp_exactShadow1" (formula "17") (ifseqformula "24"))
                        (rule "greater_literals" (formula "17") (term "0"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "polySimp_rightDist" (formula "17") (term "0,0"))
                        (rule "mul_literals" (formula "17") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "17") (term "1,0"))
                        (rule "mul_literals" (formula "17") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0"))
                        (rule "polySimp_addAssoc" (formula "17") (term "0"))
                        (rule "polySimp_addComm1" (formula "17") (term "0,0"))
                        (rule "add_literals" (formula "17") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "17") (term "0"))
                        (rule "add_literals" (formula "17") (term "1,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "17"))
                        (rule "mul_literals" (formula "17") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "17") (ifseqformula "16"))
                        (rule "mul_literals" (formula "17") (term "1,1,0"))
                        (rule "greater_literals" (formula "17") (term "0,0"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "leq_literals" (formula "17") (term "0"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "true_left" (formula "17"))
                        (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "11"))
                         (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "28")) (ifInst ""  (formula "5")) (ifInst ""  (formula "20")))
                        (rule "translateJavaSubInt" (formula "11") (term "0,2,1,1"))
                        (rule "translateJavaMulInt" (formula "11") (term "1,1,0,0,0"))
                        (rule "translateJavaSubInt" (formula "11") (term "0,2,0,1"))
                        (rule "andLeft" (formula "11"))
                        (rule "andLeft" (formula "11"))
                        (rule "andLeft" (formula "11"))
                        (rule "andLeft" (formula "11"))
                        (rule "andLeft" (formula "11"))
                        (rule "notLeft" (formula "11"))
                        (rule "andLeft" (formula "11"))
                        (rule "eqSymm" (formula "16"))
                        (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "33"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "polySimp_elimSub" (formula "16") (term "0,2,1"))
                        (rule "mul_literals" (formula "16") (term "1,0,2,1"))
                        (rule "polySimp_elimSub" (formula "16") (term "0,2,0"))
                        (rule "mul_literals" (formula "16") (term "1,0,2,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1"))
                        (rule "eqSymm" (formula "13"))
                        (rule "polySimp_addComm0" (formula "16") (term "0,2,1"))
                        (rule "polySimp_addComm0" (formula "16") (term "0,2,0"))
                        (rule "inEqSimp_commuteLeq" (formula "11"))
                        (rule "applyEq" (formula "31") (term "0") (ifseqformula "13"))
                        (rule "applyEq" (formula "35") (term "1,2,1") (ifseqformula "14"))
                        (rule "applyEq" (formula "23") (term "0") (ifseqformula "13"))
                        (rule "applyEq" (formula "35") (term "1,2,0") (ifseqformula "14"))
                        (rule "applyEq" (formula "35") (term "0") (ifseqformula "27"))
                        (rule "eqSymm" (formula "35"))
                        (rule "applyEq" (formula "35") (term "0") (ifseqformula "19"))
                        (rule "eqSymm" (formula "35"))
                        (rule "newSym_eq" (formula "13") (inst "newSymDef=mul(int::final(self,
               de.wiesler.Classifier::$num_buckets),
    Z(0(#)))") (inst "l=l_0"))
                        (rule "times_zero_1" (formula "13") (term "1,1"))
                        (rule "add_zero_right" (formula "13") (term "1"))
                        (rule "applyEq" (formula "29") (term "0") (ifseqformula "13"))
                        (rule "inEqSimp_commuteLeq" (formula "29"))
                        (rule "applyEq" (formula "21") (term "0") (ifseqformula "13"))
                        (rule "inEqSimp_commuteLeq" (formula "21"))
                        (rule "applyEq" (formula "33") (term "0,1,3,0") (ifseqformula "13"))
                        (rule "polySimp_addComm0" (formula "33") (term "3,0"))
                        (rule "applyEq" (formula "16") (term "3,0") (ifseqformula "13"))
                        (rule "applyEq" (formula "17") (term "1,0,2,0") (ifseqformula "13"))
                        (rule "eqSymm" (formula "17"))
                        (rule "applyEq" (formula "25") (term "0,1,3,0") (ifseqformula "13"))
                        (rule "polySimp_addComm0" (formula "25") (term "3,0"))
                        (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "13"))
                        (rule "eqSymm" (formula "14"))
                        (rule "applyEq" (formula "24") (term "0") (ifseqformula "14"))
                        (rule "inEqSimp_homoInEq1" (formula "24"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "24") (term "0"))
                        (rule "applyEq" (formula "32") (term "0") (ifseqformula "14"))
                        (rule "inEqSimp_homoInEq1" (formula "32"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "32") (term "0"))
                        (rule "applyEq" (formula "12") (term "0") (ifseqformula "14"))
                        (rule "applyEq" (formula "11") (term "0") (ifseqformula "14"))
                        (rule "applyEq" (formula "1") (term "0,0,1,0,2,0,0,0") (ifseqformula "14"))
                        (rule "polySimp_addComm0" (formula "1") (term "0,2,0,0,0"))
                        (rule "applyEq" (formula "17") (term "1,0,2,0") (ifseqformula "13"))
                        (rule "eqSymm" (formula "17"))
                        (rule "applyEq" (formula "4") (term "0,0,1,1,1") (ifseqformula "14"))
                        (rule "polySimp_addComm0" (formula "4") (term "1,1"))
                        (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "14"))
                        (rule "inEqSimp_homoInEq1" (formula "4") (term "0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0,0"))
                        (rule "applyEq" (formula "1") (term "1,1") (ifseqformula "14"))
                        (rule "polySimp_addComm1" (formula "1") (term "1"))
                        (rule "polySimp_addComm0" (formula "1") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "24"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1"))
                        (rule "polySimp_rightDist" (formula "24") (term "1"))
                        (rule "mul_literals" (formula "24") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "32"))
                        (rule "polySimp_mulComm0" (formula "32") (term "1"))
                        (rule "polySimp_rightDist" (formula "32") (term "1"))
                        (rule "mul_literals" (formula "32") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                        (rule "mul_literals" (formula "4") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "4") (term "1,1,0"))
                        (rule "elimGcdGeq_antec" (formula "11") (inst "elimGcd=Z(2(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcdRightDiv=Z(1(#))"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0"))
                        (rule "leq_literals" (formula "11") (term "0,0"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "11") (term "0,0,0,0"))
                        (rule "add_zero_right" (formula "11") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0"))
                        (rule "add_literals" (formula "11") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "11") (term "1,0,0"))
                        (rule "add_zero_right" (formula "11") (term "0,0"))
                        (rule "leq_literals" (formula "11") (term "0"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "elimGcdLeq_antec" (formula "12") (inst "elimGcd=Z(2(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcdRightDiv=Z(4(6(#)))"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,1,0"))
                        (rule "neg_literal" (formula "12") (term "0,0,0,0,0,1,0"))
                        (rule "leq_literals" (formula "12") (term "0,0"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0"))
                        (rule "add_literals" (formula "12") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "12") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "12") (term "0,0"))
                        (rule "add_literals" (formula "12") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "12") (term "1,0,0"))
                        (rule "add_zero_right" (formula "12") (term "0,0"))
                        (rule "qeq_literals" (formula "12") (term "0"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "inEqSimp_exactShadow3" (formula "22") (ifseqformula "24"))
                        (rule "mul_literals" (formula "22") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0"))
                        (rule "add_literals" (formula "22") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "22"))
                        (rule "mul_literals" (formula "22") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "22") (ifseqformula "11"))
                        (rule "greater_literals" (formula "22") (term "0,0"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "mul_literals" (formula "22") (term "1,0"))
                        (rule "leq_literals" (formula "22") (term "0"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "true_left" (formula "12"))
                        (rule "inEqSimp_exactShadow3" (formula "28") (ifseqformula "29"))
                        (rule "polySimp_mulComm0" (formula "28") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "28") (term "0"))
                        (rule "polySimp_addComm0" (formula "28") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "28"))
                        (rule "polySimp_mulComm0" (formula "28") (term "1"))
                        (rule "polySimp_rightDist" (formula "28") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "28") (term "1,1"))
                        (rule "mul_literals" (formula "28") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "28") (term "1,1"))
                        (rule "inEqSimp_exactShadow3" (formula "29") (ifseqformula "32"))
                        (rule "polySimp_mulComm0" (formula "29") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "29") (term "0"))
                        (rule "polySimp_addComm0" (formula "29") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "29") (term "0"))
                        (rule "add_literals" (formula "29") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "29") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "29"))
                        (rule "mul_literals" (formula "29") (term "1"))
                        (rule "inEqSimp_exactShadow3" (formula "20") (ifseqformula "23"))
                        (rule "polySimp_mulComm0" (formula "20") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0"))
                        (rule "polySimp_addComm0" (formula "20") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "20") (term "0"))
                        (rule "add_literals" (formula "20") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "20") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "20"))
                        (rule "mul_literals" (formula "20") (term "1"))
                        (rule "inEqSimp_exactShadow1" (formula "22") (ifseqformula "32"))
                        (rule "greater_literals" (formula "22") (term "0"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0"))
                        (rule "mul_literals" (formula "22") (term "0,1,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "0,0"))
                        (rule "mul_literals" (formula "22") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "22") (term "0"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0,0"))
                        (rule "add_literals" (formula "22") (term "0,0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "22"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "0"))
                        (rule "polySimp_elimOne" (formula "22") (term "0"))
                        (rule "inEqSimp_exactShadow3" (formula "32") (ifseqformula "33"))
                        (rule "mul_literals" (formula "32") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "32") (term "0"))
                        (rule "add_literals" (formula "32") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "32"))
                        (rule "mul_literals" (formula "32") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "32") (ifseqformula "11"))
                        (rule "greater_literals" (formula "32") (term "0,0"))
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "mul_literals" (formula "32") (term "1,0"))
                        (rule "leq_literals" (formula "32") (term "0"))
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "true_left" (formula "32"))
                        (rule "inEqSimp_exactShadow1" (formula "29") (ifseqformula "22"))
                        (rule "greater_literals" (formula "29") (term "0"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "polySimp_rightDist" (formula "29") (term "0,0"))
                        (rule "mul_literals" (formula "29") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "29") (term "1,0"))
                        (rule "mul_literals" (formula "29") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0"))
                        (rule "polySimp_addAssoc" (formula "29") (term "0"))
                        (rule "polySimp_addComm1" (formula "29") (term "0,0"))
                        (rule "add_literals" (formula "29") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "29") (term "0"))
                        (rule "add_literals" (formula "29") (term "1,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "29"))
                        (rule "mul_literals" (formula "29") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "29") (ifseqformula "11"))
                        (rule "greater_literals" (formula "29") (term "0,0"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "mul_literals" (formula "29") (term "1,0"))
                        (rule "leq_literals" (formula "29") (term "0"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "true_left" (formula "29"))
                        (rule "inEqSimp_exactShadow3" (formula "20") (ifseqformula "22"))
                        (rule "polySimp_mulComm0" (formula "20") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0"))
                        (rule "polySimp_addComm0" (formula "20") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "20") (term "0"))
                        (rule "add_literals" (formula "20") (term "1,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "20"))
                        (rule "mul_literals" (formula "20") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "20") (ifseqformula "11"))
                        (rule "greater_literals" (formula "20") (term "0,0"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "mul_literals" (formula "20") (term "1,0"))
                        (rule "leq_literals" (formula "20") (term "0"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "true_left" (formula "20"))
                        (rule "inEqSimp_exactShadow1" (formula "29") (ifseqformula "24"))
                        (rule "greater_literals" (formula "29") (term "0"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "polySimp_rightDist" (formula "29") (term "0,0"))
                        (rule "mul_literals" (formula "29") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "29") (term "1,0"))
                        (rule "mul_literals" (formula "29") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0"))
                        (rule "polySimp_addAssoc" (formula "29") (term "0"))
                        (rule "polySimp_addComm1" (formula "29") (term "0,0"))
                        (rule "add_literals" (formula "29") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "29") (term "0"))
                        (rule "add_literals" (formula "29") (term "1,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "29"))
                        (rule "mul_literals" (formula "29") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "29") (ifseqformula "11"))
                        (rule "greater_literals" (formula "29") (term "0,0"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "mul_literals" (formula "29") (term "1,0"))
                        (rule "leq_literals" (formula "29") (term "0"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "true_left" (formula "29"))
                        (rule "inEqSimp_exactShadow3" (formula "21") (ifseqformula "22"))
                        (rule "mul_literals" (formula "21") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "21") (term "0"))
                        (rule "add_literals" (formula "21") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "21"))
                        (rule "mul_literals" (formula "21") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "21") (ifseqformula "11"))
                        (rule "greater_literals" (formula "21") (term "0,0"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "mul_literals" (formula "21") (term "1,0"))
                        (rule "leq_literals" (formula "21") (term "0"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "true_left" (formula "21"))
                        (rule "Definition_axiom_for_isClassifiedAs_in_de_wiesler_Tree" (formula "34") (term "0"))
                         (builtin "One Step Simplification" (formula "34"))
                        (rule "translateJavaSubInt" (formula "34") (term "1,0,1"))
                        (rule "translateJavaSubInt" (formula "34") (term "0,2,0,1,0"))
                        (rule "andLeft" (formula "34"))
                        (rule "polySimp_elimSub" (formula "35") (term "1,0"))
                        (rule "mul_literals" (formula "35") (term "1,1,0"))
                        (rule "polySimp_elimSub" (formula "34") (term "0,2,0,1"))
                        (rule "mul_literals" (formula "34") (term "1,0,2,0,1"))
                        (rule "polySimp_addComm0" (formula "35") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "34") (term "0,2,0,1"))
                        (rule "polySimp_addComm0" (formula "34") (term "0,0,2,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "34") (term "0"))
                        (rule "add_zero_right" (formula "34") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "34") (term "1,0,0"))
                        (rule "polySimp_mulAssoc" (formula "34") (term "0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "34") (term "0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "34") (term "0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "34") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "34") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "35") (term "0"))
                        (rule "polySimp_rightDist" (formula "35") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "35") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "35") (term "0,0,0"))
                        (rule "add_literals" (formula "35") (term "0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "35") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "35") (term "0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "34") (term "1"))
                        (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "35") (term "1"))
                        (rule "applyEq" (formula "34") (term "1,1,0,1") (ifseqformula "14"))
                        (rule "applyEq" (formula "35") (term "1,0,1") (ifseqformula "14"))
                        (rule "applyEq" (formula "35") (term "0,1,0,0") (ifseqformula "12"))
                        (rule "polySimp_addComm1" (formula "35") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "35") (term "0,0,0"))
                        (rule "add_literals" (formula "35") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "34") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "34") (term "0,0"))
                        (rule "polySimp_elimOne" (formula "34") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1"))
                        (rule "polySimp_mulComm0" (formula "34") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "34") (term "1,1"))
                        (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1"))
                        (rule "mul_literals" (formula "34") (term "0,1,1"))
                        (rule "polySimp_elimOne" (formula "34") (term "1,1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0"))
                        (rule "polySimp_mulComm0" (formula "35") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "35") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0"))
                        (rule "mul_literals" (formula "35") (term "0,1,0"))
                        (rule "Definition_axiom_for_isClassifiedAs_in_de_wiesler_Tree" (formula "25") (term "0"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "translateJavaSubInt" (formula "25") (term "1,0,1"))
                        (rule "translateJavaSubInt" (formula "25") (term "0,2,0,1,0"))
                        (rule "andLeft" (formula "25"))
                        (rule "polySimp_elimSub" (formula "25") (term "0,2,0,1"))
                        (rule "mul_literals" (formula "25") (term "1,0,2,0,1"))
                        (rule "polySimp_elimSub" (formula "26") (term "1,0"))
                        (rule "mul_literals" (formula "26") (term "1,1,0"))
                        (rule "polySimp_addComm1" (formula "25") (term "0,2,0,1"))
                        (rule "polySimp_addComm0" (formula "26") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "25") (term "0,0,2,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "25") (term "0"))
                        (rule "add_zero_right" (formula "25") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "25") (term "1,0,0"))
                        (rule "polySimp_mulAssoc" (formula "25") (term "0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "25") (term "0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "25") (term "0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "25") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "25") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "26") (term "0"))
                        (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "26") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "26") (term "0,0,0"))
                        (rule "add_literals" (formula "26") (term "0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "26") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "26") (term "0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "25") (term "1"))
                        (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "26") (term "1"))
                        (rule "applyEq" (formula "26") (term "0,1,0,0") (ifseqformula "12"))
                        (rule "polySimp_addComm1" (formula "26") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "26") (term "0,0,0"))
                        (rule "add_literals" (formula "26") (term "1,1,0,0,0"))
                        (rule "applyEq" (formula "25") (term "1,1,0,1") (ifseqformula "14"))
                        (rule "applyEq" (formula "26") (term "1,0,1") (ifseqformula "14"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "25") (term "0,0"))
                        (rule "polySimp_elimOne" (formula "25") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0"))
                        (rule "polySimp_mulComm0" (formula "26") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "26") (term "1,0"))
                        (rule "mul_literals" (formula "26") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1"))
                        (rule "polySimp_mulComm0" (formula "25") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "25") (term "1,1"))
                        (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1"))
                        (rule "mul_literals" (formula "25") (term "0,1,1"))
                        (rule "polySimp_elimOne" (formula "25") (term "1,1,1"))
                        (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "15") (term "0") (inst "i=i") (inst "j=j"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "15") (term "1,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                        (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "27"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "translateJavaSubInt" (formula "27") (term "3,0,1"))
                        (rule "andLeft" (formula "27"))
                        (rule "andLeft" (formula "27"))
                        (rule "andLeft" (formula "27"))
                        (rule "andLeft" (formula "27"))
                        (rule "andLeft" (formula "29"))
                        (rule "andLeft" (formula "27"))
                        (rule "andLeft" (formula "27"))
                        (rule "andLeft" (formula "29"))
                        (rule "notLeft" (formula "27"))
                        (rule "notLeft" (formula "27"))
                        (rule "polySimp_elimSub" (formula "33") (term "3,0"))
                        (rule "mul_literals" (formula "33") (term "1,3,0"))
                        (rule "polySimp_addComm0" (formula "33") (term "3,0"))
                        (rule "inEqSimp_commuteLeq" (formula "32"))
                        (rule "inEqSimp_commuteLeq" (formula "31"))
                        (rule "inEqSimp_commuteLeq" (formula "30"))
                        (rule "inEqSimp_commuteLeq" (formula "27"))
                        (rule "applyEq" (formula "31") (term "1") (ifseqformula "29"))
                        (rule "applyEq" (formula "30") (term "0") (ifseqformula "29"))
                        (rule "applyEq" (formula "32") (term "1") (ifseqformula "29"))
                        (rule "applyEq" (formula "33") (term "1,3,0") (ifseqformula "12"))
                        (rule "applyEq" (formula "33") (term "1,0") (ifseqformula "14"))
                        (rule "applyEq" (formula "44") (term "0") (ifseqformula "14"))
                        (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "14"))
                        (rule "inEqSimp_commuteGeq" (formula "32"))
                        (rule "applyEq" (formula "12") (term "0") (ifseqformula "29"))
                        (rule "applyEq" (formula "32") (term "0") (ifseqformula "12"))
                        (rule "inEqSimp_commuteLeq" (formula "32"))
                        (rule "applyEq" (formula "30") (term "0") (ifseqformula "12"))
                        (rule "applyEq" (formula "31") (term "1") (ifseqformula "12"))
                        (rule "applyEq" (formula "29") (term "1") (ifseqformula "12"))
                        (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "30"))
                        (rule "leq_literals" (formula "11") (term "0"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "true_left" (formula "11"))
                        (rule "nnf_imp2or" (formula "14") (term "0"))
                        (rule "nnf_notAnd" (formula "14") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
                        (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "14") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                        (rule "mul_literals" (formula "14") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "14") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0"))
                        (rule "nnf_imp2or" (formula "14") (term "0,1,0"))
                        (rule "nnf_notAnd" (formula "14") (term "0,0,1,0"))
                        (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,1,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,1,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,1,0"))
                        (rule "add_zero_left" (formula "14") (term "0,0,1,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,1,0"))
                        (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,1,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,1,0"))
                        (rule "jdiv_axiom" (formula "1") (term "0,0,0,2,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,0,2,1"))
                        (rule "eqSymm" (formula "1"))
                        (rule "inEqSimp_subsumption6" (formula "1") (term "0,0") (ifseqformula "30"))
                        (rule "mul_literals" (formula "1") (term "1,1,0,0,0"))
                        (rule "greater_literals" (formula "1") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "leq_literals" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "1"))
                        (rule "applyEq" (formula "5") (term "1,1,0") (ifseqformula "1"))
                        (rule "applyEqRigid" (formula "5") (term "0,0,1,1") (ifseqformula "1"))
                        (rule "applyEqRigid" (formula "2") (term "0,0,0,2,0,0,0") (ifseqformula "1"))
                        (rule "polyDiv_pullOut" (formula "2") (term "0,0,0,2,0,0,0") (inst "polyDivCoeff=l_0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,2,0,0,0,2,0,0,0"))
                        (rule "equal_literals" (formula "2") (term "0,0,0,0,2,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "polySimp_pullOutFactor0" (formula "2") (term "0,0,0,0,0,2,0,0,0"))
                        (rule "add_literals" (formula "2") (term "1,0,0,0,0,0,2,0,0,0"))
                        (rule "times_zero_1" (formula "2") (term "0,0,0,0,0,2,0,0,0"))
                        (rule "div_literals" (formula "2") (term "0,0,0,0,2,0,0,0"))
                        (rule "add_zero_left" (formula "2") (term "0,0,0,2,0,0,0"))
                        (rule "polyDiv_pullOut" (formula "5") (term "0,0,1,1") (inst "polyDivCoeff=l_0"))
                        (rule "equal_literals" (formula "5") (term "0,0,0,1,1"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,0,0,1,1"))
                        (rule "polySimp_pullOutFactor0" (formula "5") (term "0,0,0,0,1,1"))
                        (rule "add_literals" (formula "5") (term "1,0,0,0,0,1,1"))
                        (rule "times_zero_1" (formula "5") (term "0,0,0,0,1,1"))
                        (rule "div_literals" (formula "5") (term "0,0,0,1,1"))
                        (rule "add_zero_left" (formula "5") (term "0,0,1,1"))
                        (rule "polyDiv_pullOut" (formula "1") (term "1") (inst "polyDivCoeff=l_0"))
                        (rule "equal_literals" (formula "1") (term "0,1"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,1"))
                        (rule "polySimp_pullOutFactor0" (formula "1") (term "0,0,1"))
                        (rule "add_literals" (formula "1") (term "1,0,0,1"))
                        (rule "times_zero_1" (formula "1") (term "0,0,1"))
                        (rule "div_literals" (formula "1") (term "0,1"))
                        (rule "add_zero_left" (formula "1") (term "1"))
                        (rule "polyDiv_pullOut" (formula "5") (term "1,1,0") (inst "polyDivCoeff=l_0"))
                        (rule "equal_literals" (formula "5") (term "0,1,1,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,1,1,0"))
                        (rule "polySimp_pullOutFactor0" (formula "5") (term "0,0,1,1,0"))
                        (rule "add_literals" (formula "5") (term "1,0,0,1,1,0"))
                        (rule "times_zero_1" (formula "5") (term "0,0,1,1,0"))
                        (rule "div_literals" (formula "5") (term "0,1,1,0"))
                        (rule "add_zero_left" (formula "5") (term "1,1,0"))
                        (rule "inEqSimp_contradInEq1" (formula "5") (term "0") (ifseqformula "37"))
                        (rule "inEqSimp_homoInEq1" (formula "5") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "5") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "5") (term "0,0,0"))
                        (rule "polySimp_addComm0" (formula "5") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,0"))
                        (rule "add_literals" (formula "5") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "5") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "5") (term "0,0,0"))
                        (rule "leq_literals" (formula "5") (term "0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "inEqSimp_exactShadow3" (formula "32") (ifseqformula "5"))
                        (rule "polySimp_mulComm0" (formula "32") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "32") (term "0"))
                        (rule "polySimp_pullOutFactor0" (formula "32") (term "0,0"))
                        (rule "add_literals" (formula "32") (term "1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "32"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "41") (ifseqformula "32"))
                        (rule "andLeft" (formula "41"))
                        (rule "inEqSimp_homoInEq1" (formula "41"))
                        (rule "polySimp_mulComm0" (formula "41") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "41") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0"))
                        (rule "mul_literals" (formula "41") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "41") (term "0"))
                        (rule "polySimp_addComm0" (formula "41") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "41") (term "0"))
                        (rule "add_literals" (formula "41") (term "1,1,0"))
                        (rule "times_zero_1" (formula "41") (term "1,0"))
                        (rule "add_zero_right" (formula "41") (term "0"))
                        (rule "leq_literals" (formula "41"))
                        (rule "closeFalse" (formula "41"))
                     )
                  )
                  (branch "Case 2"
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "equal_literals" (formula "19") (term "0"))
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "closeTrue" (formula "19"))
                  )
               )
               (branch "if x_3 false"
                   (builtin "One Step Simplification" (formula "20"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
            )
            (branch "Null Reference (x_arr = null)"
                (builtin "One Step Simplification" (formula "21"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "false_right" (formula "21"))
               (rule "applyEq" (formula "10") (term "1,2,0") (ifseqformula "1"))
               (rule "applyEq" (formula "20") (term "1,0,1,0,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "16") (term "1,2,0") (ifseqformula "1"))
               (rule "applyEq" (formula "13") (term "1,2,0") (ifseqformula "1"))
               (rule "applyEq" (formula "19") (term "1,2,0") (ifseqformula "1"))
               (rule "ifElseSplit" (formula "20"))
               (branch "if x_3 true"
                   (builtin "One Step Simplification" (formula "21"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "variableDeclarationAssign" (formula "20") (term "1"))
                  (rule "variableDeclaration" (formula "20") (term "1") (newnames "bucket_index_1"))
                  (rule "compound_subtraction_2" (formula "20") (term "1") (inst "#v0=x_2") (inst "#v1=x_3"))
                  (rule "variableDeclarationAssign" (formula "20") (term "1"))
                  (rule "variableDeclaration" (formula "20") (term "1") (newnames "x_8"))
                  (rule "assignment" (formula "20") (term "1"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "variableDeclarationAssign" (formula "20") (term "1"))
                  (rule "variableDeclaration" (formula "20") (term "1") (newnames "x_9"))
                  (rule "compound_division_1" (formula "20") (term "1") (inst "#v=x_10"))
                  (rule "variableDeclarationAssign" (formula "20") (term "1"))
                  (rule "variableDeclaration" (formula "20") (term "1") (newnames "x_10"))
                  (rule "assignment_read_attribute_this_final" (formula "20"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "assignmentDivisionInt" (formula "20"))
                  (branch "Case 1"
                      (builtin "One Step Simplification" (formula "20"))
                     (rule "translateJavaDivInt" (formula "20") (term "0,1,0"))
                     (rule "assignmentSubtractionInt" (formula "20") (term "1"))
                      (builtin "One Step Simplification" (formula "20"))
                     (rule "translateJavaSubInt" (formula "20") (term "0,1,0"))
                     (rule "polySimp_elimSub" (formula "20") (term "0,1,0"))
                     (rule "variableDeclarationAssign" (formula "20") (term "1"))
                     (rule "variableDeclaration" (formula "20") (term "1") (newnames "equal_to_splitter_1"))
                     (rule "compound_assignment_2" (formula "20") (term "1") (inst "#v=x_2"))
                     (rule "variableDeclarationAssign" (formula "20") (term "1"))
                     (rule "variableDeclaration" (formula "20") (term "1") (newnames "x_11"))
                     (rule "methodCallWithAssignmentUnfoldArguments" (formula "20") (term "1"))
                     (rule "variableDeclarationAssign" (formula "20") (term "1"))
                     (rule "variableDeclaration" (formula "20") (term "1") (newnames "var_2"))
                     (rule "assignment" (formula "20") (term "1"))
                      (builtin "One Step Simplification" (formula "20"))
                     (rule "variableDeclarationAssign" (formula "20") (term "1"))
                     (rule "variableDeclaration" (formula "20") (term "1") (newnames "var_3"))
                     (rule "eval_order_array_access4" (formula "20") (term "1") (inst "#v0=x_arr"))
                     (rule "variableDeclarationAssign" (formula "20") (term "1"))
                     (rule "variableDeclaration" (formula "20") (term "1") (newnames "x_arr_1"))
                     (rule "assignment_read_attribute_this_final" (formula "20"))
                      (builtin "One Step Simplification" (formula "20"))
                     (rule "assignment_array2" (formula "20"))
                     (branch "Normal Execution (x_arr_1 != null)"
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "applyEq" (formula "20") (term "1,0,1,0") (ifseqformula "1"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "21") (term "1,1") (ifseqformula "4") (ifseqformula "5"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "2") (term "0") (ifseqformula "5") (ifseqformula "6"))
                        (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "21") (term "1") (inst "#v0=x_12"))
                        (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_12"))
                        (rule "variableDeclarationAssign" (formula "21") (term "1"))
                        (rule "variableDeclaration" (formula "21") (term "1") (newnames "a"))
                        (rule "assignment" (formula "21") (term "1"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "variableDeclarationAssign" (formula "21") (term "1"))
                        (rule "variableDeclaration" (formula "21") (term "1") (newnames "b"))
                        (rule "assignment" (formula "21") (term "1"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "methodBodyExpand" (formula "21") (term "1") (newnames "heapBefore_cmp,savedHeapBefore_cmp"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "returnUnfold" (formula "21") (term "1") (inst "#v0=x_13"))
                        (rule "variableDeclarationAssign" (formula "21") (term "1"))
                        (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_13"))
                        (rule "less_than_comparison_simple" (formula "21") (term "1"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "methodCallReturn" (formula "21") (term "1"))
                        (rule "assignment" (formula "21") (term "1"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "methodCallEmpty" (formula "21") (term "1"))
                        (rule "blockEmpty" (formula "21") (term "1"))
                        (rule "assignment" (formula "21") (term "1"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "blockEmpty" (formula "21") (term "1"))
                        (rule "compound_assignment_1_new" (formula "21") (term "1"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "compound_subtraction_2" (formula "21") (term "1") (inst "#v0=x_1") (inst "#v1=x_2"))
                        (rule "variableDeclarationAssign" (formula "21") (term "1"))
                        (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_1"))
                        (rule "compound_addition_2" (formula "21") (term "1") (inst "#v0=x_3") (inst "#v1=x_4"))
                        (rule "variableDeclarationAssign" (formula "21") (term "1"))
                        (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_14"))
                        (rule "assignmentMultiplicationInt" (formula "21") (term "1"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "translateJavaMulInt" (formula "21") (term "0,1,0"))
                        (rule "polySimp_mulComm0" (formula "21") (term "0,1,0"))
                        (rule "variableDeclarationAssign" (formula "21") (term "1"))
                        (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_15"))
                        (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "21") (term "1") (inst "#v0=x_16"))
                        (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_16"))
                        (rule "variableDeclarationAssign" (formula "21") (term "1"))
                        (rule "variableDeclaration" (formula "21") (term "1") (newnames "b_1"))
                        (rule "assignment" (formula "21") (term "1"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "methodBodyExpand" (formula "21") (term "1") (newnames "heapBefore_toInt,savedHeapBefore_toInt"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "returnUnfold" (formula "21") (term "1") (inst "#v0=x_17"))
                        (rule "variableDeclarationAssign" (formula "21") (term "1"))
                        (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_17"))
                        (rule "condition_simple" (formula "21") (term "1"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "ifthenelse_negated" (formula "21") (term "0,1,0"))
                        (rule "methodCallReturn" (formula "21") (term "1"))
                        (rule "assignment" (formula "21") (term "1"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "methodCallEmpty" (formula "21") (term "1"))
                        (rule "blockEmpty" (formula "21") (term "1"))
                        (rule "assignment" (formula "21") (term "1"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "assignmentAdditionInt" (formula "21") (term "1"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "translateJavaAddInt" (formula "21") (term "0,1,0"))
                        (rule "variableDeclarationAssign" (formula "21") (term "1"))
                        (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_18"))
                        (rule "assignment_read_attribute_this_final" (formula "21"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "assignmentSubtractionInt" (formula "21") (term "1"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "translateJavaSubInt" (formula "21") (term "0,1,0"))
                        (rule "polySimp_elimSub" (formula "21") (term "0,1,0"))
                        (rule "polySimp_addComm1" (formula "21") (term "0,1,0"))
                        (rule "blockEmpty" (formula "21") (term "1"))
                        (rule "methodCallReturn" (formula "21") (term "1"))
                        (rule "assignment" (formula "21") (term "1"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "methodCallEmpty" (formula "21") (term "1"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "emptyModality" (formula "21") (term "1"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "notRight" (formula "21"))
                        (rule "polySimp_homoEq" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,0,1,0"))
                        (rule "polySimp_mulAssoc" (formula "1") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "14"))
                        (rule "polySimp_mulAssoc" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "14") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "20"))
                        (rule "polySimp_mulAssoc" (formula "20") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "20") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,1,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0,0,0,1,0"))
                        (rule "polySimp_sepNegMonomial" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "14"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "20"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                        (rule "inEqSimp_exactShadow1" (formula "14") (ifseqformula "19"))
                        (rule "greater_literals" (formula "14") (term "0"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "0,0"))
                        (rule "mul_literals" (formula "14") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1"))
                        (rule "polySimp_rightDist" (formula "14") (term "1"))
                        (rule "mul_literals" (formula "14") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1"))
                        (rule "inEqSimp_exactShadow1" (formula "15") (ifseqformula "13"))
                        (rule "greater_literals" (formula "15") (term "0"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "0,0"))
                        (rule "mul_literals" (formula "15") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "15") (term "0"))
                        (rule "add_literals" (formula "15") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                        (rule "mul_literals" (formula "15") (term "1"))
                        (rule "inEqSimp_exactShadow1" (formula "22") (ifseqformula "13"))
                        (rule "greater_literals" (formula "22") (term "0"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "0,0"))
                        (rule "mul_literals" (formula "22") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "22") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "22"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "0"))
                        (rule "polySimp_elimOne" (formula "22") (term "0"))
                        (rule "inEqSimp_exactShadow1" (formula "23") (ifseqformula "21"))
                        (rule "greater_literals" (formula "23") (term "0"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "23") (term "0,0"))
                        (rule "mul_literals" (formula "23") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "23") (term "0"))
                        (rule "add_literals" (formula "23") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "23") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "23"))
                        (rule "mul_literals" (formula "23") (term "1"))
                        (rule "inEqSimp_exactShadow1" (formula "14") (ifseqformula "22"))
                        (rule "greater_literals" (formula "14") (term "0"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "polySimp_rightDist" (formula "14") (term "0,0"))
                        (rule "mul_literals" (formula "14") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0"))
                        (rule "polySimp_addComm1" (formula "14") (term "0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "14") (term "0"))
                        (rule "add_literals" (formula "14") (term "1,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                        (rule "mul_literals" (formula "14") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "14") (ifseqformula "16"))
                        (rule "greater_literals" (formula "14") (term "0,0"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "mul_literals" (formula "14") (term "1,0"))
                        (rule "leq_literals" (formula "14") (term "0"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "true_left" (formula "14"))
                        (rule "inEqSimp_exactShadow3" (formula "23") (ifseqformula "22"))
                        (rule "mul_literals" (formula "23") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "23") (term "0"))
                        (rule "add_literals" (formula "23") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "23"))
                        (rule "mul_literals" (formula "23") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "23") (ifseqformula "15"))
                        (rule "greater_literals" (formula "23") (term "0,0"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "mul_literals" (formula "23") (term "1,0"))
                        (rule "leq_literals" (formula "23") (term "0"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "true_left" (formula "23"))
                        (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "18"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "andLeft" (formula "18"))
                        (rule "andLeft" (formula "18"))
                        (rule "andLeft" (formula "18"))
                        (rule "andLeft" (formula "19"))
                        (rule "andLeft" (formula "18"))
                        (rule "andLeft" (formula "18"))
                        (rule "andLeft" (formula "18"))
                        (rule "andLeft" (formula "20"))
                        (rule "notLeft" (formula "19"))
                        (rule "notLeft" (formula "18"))
                        (rule "inEqSimp_commuteLeq" (formula "23"))
                        (rule "inEqSimp_commuteLeq" (formula "22"))
                        (rule "inEqSimp_commuteLeq" (formula "21"))
                        (rule "inEqSimp_commuteLeq" (formula "18"))
                        (rule "applyEq" (formula "23") (term "1") (ifseqformula "20"))
                        (rule "translateJavaSubInt" (formula "24") (term "3,0"))
                        (rule "polySimp_elimSub" (formula "24") (term "3,0"))
                        (rule "mul_literals" (formula "24") (term "1,3,0"))
                        (rule "polySimp_addComm0" (formula "24") (term "3,0"))
                        (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "20"))
                        (rule "applyEq" (formula "22") (term "1") (ifseqformula "20"))
                        (rule "applyEq" (formula "21") (term "0") (ifseqformula "20"))
                        (rule "applyEq" (formula "17") (term "0,1,3,0") (ifseqformula "20"))
                        (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "20"))
                        (rule "applyEq" (formula "13") (term "0") (ifseqformula "20"))
                        (rule "applyEq" (formula "31") (term "0,1,3,0") (ifseqformula "20"))
                        (rule "applyEq" (formula "24") (term "1,3,0") (ifseqformula "20"))
                        (rule "applyEq" (formula "27") (term "0") (ifseqformula "20"))
                        (rule "inEqSimp_exactShadow1" (formula "16") (ifseqformula "27"))
                        (rule "greater_literals" (formula "16") (term "0"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "0,0"))
                        (rule "mul_literals" (formula "16") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1"))
                        (rule "polySimp_rightDist" (formula "16") (term "1"))
                        (rule "mul_literals" (formula "16") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "16") (term "1,1"))
                        (rule "inEqSimp_exactShadow1" (formula "16") (ifseqformula "13"))
                        (rule "greater_literals" (formula "16") (term "0"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "0,0"))
                        (rule "mul_literals" (formula "16") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "16") (term "0"))
                        (rule "add_literals" (formula "16") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "16") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                        (rule "mul_literals" (formula "16") (term "1"))
                        (rule "inEqSimp_exactShadow3" (formula "21") (ifseqformula "13"))
                        (rule "mul_literals" (formula "21") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "21"))
                        (rule "mul_literals" (formula "21") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "21"))
                        (rule "leq_literals" (formula "15") (term "0"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "true_left" (formula "15"))
                        (rule "inEqSimp_exactShadow3" (formula "21") (ifseqformula "27"))
                        (rule "mul_literals" (formula "21") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "21"))
                        (rule "mul_literals" (formula "21") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "30") (ifseqformula "21"))
                        (rule "leq_literals" (formula "30") (term "0"))
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "true_left" (formula "30"))
                        (rule "inEqSimp_exactShadow1" (formula "30") (ifseqformula "28"))
                        (rule "greater_literals" (formula "30") (term "0"))
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "polySimp_mulComm0" (formula "30") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "30") (term "0,0"))
                        (rule "mul_literals" (formula "30") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "30") (term "0"))
                        (rule "add_literals" (formula "30") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "30") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "30"))
                        (rule "mul_literals" (formula "30") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "30") (ifseqformula "21"))
                        (rule "leq_literals" (formula "30") (term "0"))
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "true_left" (formula "30"))
                        (rule "inEqSimp_exactShadow1" (formula "30") (ifseqformula "13"))
                        (rule "greater_literals" (formula "30") (term "0"))
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "polySimp_mulComm0" (formula "30") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "30") (term "0,0"))
                        (rule "mul_literals" (formula "30") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "30") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "30"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                        (rule "polySimp_elimOne" (formula "30") (term "0"))
                        (rule "inEqSimp_exactShadow3" (formula "21") (ifseqformula "29"))
                        (rule "mul_literals" (formula "21") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "21") (term "0"))
                        (rule "add_literals" (formula "21") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "21"))
                        (rule "mul_literals" (formula "21") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "21") (ifseqformula "20"))
                        (rule "greater_literals" (formula "21") (term "0,0"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "mul_literals" (formula "21") (term "1,0"))
                        (rule "leq_literals" (formula "21") (term "0"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "true_left" (formula "21"))
                        (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "10"))
                         (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "3")) (ifInst ""  (formula "4")))
                        (rule "closeFalse" (formula "10"))
                     )
                     (branch "Null Reference (x_arr_1 = null)"
                        (rule "false_right" (formula "21"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "2")))
                        (rule "true_left" (formula "1"))
                        (rule "inEqSimp_ltToLeq" (formula "12"))
                        (rule "polySimp_mulAssoc" (formula "12") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "12") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "18"))
                        (rule "polySimp_mulAssoc" (formula "18") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "18") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "12"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "18"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "0"))
                        (rule "inEqSimp_exactShadow1" (formula "12") (ifseqformula "17"))
                        (rule "greater_literals" (formula "12") (term "0"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "0,0"))
                        (rule "mul_literals" (formula "12") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "12"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1"))
                        (rule "polySimp_rightDist" (formula "12") (term "1"))
                        (rule "mul_literals" (formula "12") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,1"))
                        (rule "inEqSimp_exactShadow1" (formula "13") (ifseqformula "11"))
                        (rule "greater_literals" (formula "13") (term "0"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "0,0"))
                        (rule "mul_literals" (formula "13") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "13") (term "0"))
                        (rule "add_literals" (formula "13") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "13") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "13"))
                        (rule "mul_literals" (formula "13") (term "1"))
                        (rule "inEqSimp_exactShadow1" (formula "20") (ifseqformula "11"))
                        (rule "greater_literals" (formula "20") (term "0"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "0,0"))
                        (rule "mul_literals" (formula "20") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "20") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "20"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "0"))
                        (rule "polySimp_elimOne" (formula "20") (term "0"))
                        (rule "inEqSimp_exactShadow1" (formula "21") (ifseqformula "19"))
                        (rule "greater_literals" (formula "21") (term "0"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "polySimp_mulComm0" (formula "21") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "21") (term "0,0"))
                        (rule "mul_literals" (formula "21") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "21") (term "0"))
                        (rule "add_literals" (formula "21") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "21") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "21"))
                        (rule "mul_literals" (formula "21") (term "1"))
                        (rule "inEqSimp_exactShadow1" (formula "12") (ifseqformula "20"))
                        (rule "greater_literals" (formula "12") (term "0"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "polySimp_rightDist" (formula "12") (term "0,0"))
                        (rule "mul_literals" (formula "12") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0"))
                        (rule "polySimp_addAssoc" (formula "12") (term "0"))
                        (rule "polySimp_addComm1" (formula "12") (term "0,0"))
                        (rule "add_literals" (formula "12") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "12") (term "0"))
                        (rule "add_literals" (formula "12") (term "1,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "12"))
                        (rule "mul_literals" (formula "12") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "12") (ifseqformula "14"))
                        (rule "mul_literals" (formula "12") (term "1,1,0"))
                        (rule "greater_literals" (formula "12") (term "0,0"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "leq_literals" (formula "12") (term "0"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "true_left" (formula "12"))
                        (rule "inEqSimp_exactShadow3" (formula "21") (ifseqformula "20"))
                        (rule "mul_literals" (formula "21") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "21") (term "0"))
                        (rule "add_literals" (formula "21") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "21"))
                        (rule "mul_literals" (formula "21") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "21") (ifseqformula "13"))
                        (rule "mul_literals" (formula "21") (term "1,1,0"))
                        (rule "greater_literals" (formula "21") (term "0,0"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "leq_literals" (formula "21") (term "0"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "true_left" (formula "21"))
                        (rule "Definition_axiom_for_isClassifiedAs_in_de_wiesler_Tree" (formula "23") (term "0"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "translateJavaSubInt" (formula "23") (term "1,0,1"))
                        (rule "translateJavaSubInt" (formula "23") (term "0,2,0,1,0"))
                        (rule "andLeft" (formula "23"))
                        (rule "polySimp_elimSub" (formula "24") (term "1,0"))
                        (rule "mul_literals" (formula "24") (term "1,1,0"))
                        (rule "polySimp_elimSub" (formula "23") (term "0,2,0,1"))
                        (rule "mul_literals" (formula "23") (term "1,0,2,0,1"))
                        (rule "polySimp_addComm0" (formula "24") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "23") (term "0,2,0,1"))
                        (rule "polySimp_addComm0" (formula "23") (term "0,0,2,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "23") (term "0"))
                        (rule "add_zero_right" (formula "23") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "23") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "23") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "24") (term "0"))
                        (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "24") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "24") (term "0,0,0"))
                        (rule "add_literals" (formula "24") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "24") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "24") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "24") (term "0,0"))
                        (rule "add_literals" (formula "24") (term "1,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "23") (term "1"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "24") (term "1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "23") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0"))
                        (rule "mul_literals" (formula "23") (term "0,1,0"))
                        (rule "polySimp_elimOne" (formula "23") (term "1,1,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "23") (term "1,1"))
                        (rule "mul_literals" (formula "23") (term "0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1"))
                        (rule "polySimp_elimOne" (formula "23") (term "1,1,1"))
                        (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "8"))
                         (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "1")) (ifInst ""  (formula "2")) (ifInst ""  (formula "16")))
                        (rule "closeFalse" (formula "8"))
                     )
                     (branch "Index Out of Bounds (x_arr_1 != null, but bucket_index_1 Out of Bounds!)"
                        (rule "false_right" (formula "21"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "2")))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
                  (branch "Case 2"
                      (builtin "One Step Simplification" (formula "20"))
                     (rule "equal_literals" (formula "20") (term "0"))
                      (builtin "One Step Simplification" (formula "20"))
                     (rule "closeTrue" (formula "20"))
                  )
               )
               (branch "if x_3 false"
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
            )
            (branch "Index Out of Bounds (x_arr != null, but bucket_index Out of Bounds!)"
               (rule "false_right" (formula "21"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "commute_or" (formula "1"))
               (rule "ifElseSplit" (formula "21"))
               (branch "if x_3 true"
                   (builtin "One Step Simplification" (formula "22"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "variableDeclarationAssign" (formula "21") (term "1"))
                  (rule "variableDeclaration" (formula "21") (term "1") (newnames "bucket_index_1"))
                  (rule "compound_subtraction_2" (formula "21") (term "1") (inst "#v0=x_2") (inst "#v1=x_3"))
                  (rule "variableDeclarationAssign" (formula "21") (term "1"))
                  (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_8"))
                  (rule "assignment" (formula "21") (term "1"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "variableDeclarationAssign" (formula "21") (term "1"))
                  (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_9"))
                  (rule "compound_division_1" (formula "21") (term "1") (inst "#v=x_10"))
                  (rule "variableDeclarationAssign" (formula "21") (term "1"))
                  (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_10"))
                  (rule "assignment_read_attribute_this_final" (formula "21"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "assignmentDivisionInt" (formula "21"))
                  (branch "Case 1"
                      (builtin "One Step Simplification" (formula "21"))
                     (rule "translateJavaDivInt" (formula "21") (term "0,1,0"))
                     (rule "assignmentSubtractionInt" (formula "21") (term "1"))
                      (builtin "One Step Simplification" (formula "21"))
                     (rule "translateJavaSubInt" (formula "21") (term "0,1,0"))
                     (rule "polySimp_elimSub" (formula "21") (term "0,1,0"))
                     (rule "variableDeclarationAssign" (formula "21") (term "1"))
                     (rule "variableDeclaration" (formula "21") (term "1") (newnames "equal_to_splitter_1"))
                     (rule "compound_assignment_2" (formula "21") (term "1") (inst "#v=x_2"))
                     (rule "variableDeclarationAssign" (formula "21") (term "1"))
                     (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_11"))
                     (rule "methodCallWithAssignmentUnfoldArguments" (formula "21") (term "1"))
                     (rule "variableDeclarationAssign" (formula "21") (term "1"))
                     (rule "variableDeclaration" (formula "21") (term "1") (newnames "var_2"))
                     (rule "assignment" (formula "21") (term "1"))
                      (builtin "One Step Simplification" (formula "21"))
                     (rule "variableDeclarationAssign" (formula "21") (term "1"))
                     (rule "variableDeclaration" (formula "21") (term "1") (newnames "var_3"))
                     (rule "eval_order_array_access4" (formula "21") (term "1") (inst "#v0=x_arr"))
                     (rule "variableDeclarationAssign" (formula "21") (term "1"))
                     (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_arr_1"))
                     (rule "assignment_read_attribute_this_final" (formula "21"))
                      (builtin "One Step Simplification" (formula "21"))
                     (rule "assignment_array2" (formula "21"))
                     (branch "Normal Execution (x_arr_1 != null)"
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "22") (term "1,1") (ifseqformula "4") (ifseqformula "5"))
                        (rule "arrayLengthNotNegative" (formula "2") (term "0,1"))
                        (rule "arrayLengthIsAShort" (formula "3") (term "0,1"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "12") (term "1,2,0") (ifseqformula "6") (ifseqformula "7"))
                        (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "23"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "24") (term "1") (inst "#v0=x_12"))
                        (rule "variableDeclaration" (formula "24") (term "1") (newnames "x_12"))
                        (rule "variableDeclarationAssign" (formula "24") (term "1"))
                        (rule "variableDeclaration" (formula "24") (term "1") (newnames "a"))
                        (rule "assignment" (formula "24") (term "1"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "variableDeclarationAssign" (formula "24") (term "1"))
                        (rule "variableDeclaration" (formula "24") (term "1") (newnames "b"))
                        (rule "assignment" (formula "24") (term "1"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "methodBodyExpand" (formula "24") (term "1") (newnames "heapBefore_cmp,savedHeapBefore_cmp"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "returnUnfold" (formula "24") (term "1") (inst "#v0=x_13"))
                        (rule "variableDeclarationAssign" (formula "24") (term "1"))
                        (rule "variableDeclaration" (formula "24") (term "1") (newnames "x_13"))
                        (rule "less_than_comparison_simple" (formula "24") (term "1"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "methodCallReturn" (formula "24") (term "1"))
                        (rule "assignment" (formula "24") (term "1"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "methodCallEmpty" (formula "24") (term "1"))
                        (rule "blockEmpty" (formula "24") (term "1"))
                        (rule "assignment" (formula "24") (term "1"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "blockEmpty" (formula "24") (term "1"))
                        (rule "compound_assignment_1_new" (formula "24") (term "1"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "compound_subtraction_2" (formula "24") (term "1") (inst "#v0=x_1") (inst "#v1=x_2"))
                        (rule "variableDeclarationAssign" (formula "24") (term "1"))
                        (rule "variableDeclaration" (formula "24") (term "1") (newnames "x_1"))
                        (rule "compound_addition_2" (formula "24") (term "1") (inst "#v0=x_3") (inst "#v1=x_4"))
                        (rule "variableDeclarationAssign" (formula "24") (term "1"))
                        (rule "variableDeclaration" (formula "24") (term "1") (newnames "x_14"))
                        (rule "assignmentMultiplicationInt" (formula "24") (term "1"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "translateJavaMulInt" (formula "24") (term "0,1,0"))
                        (rule "polySimp_mulComm0" (formula "24") (term "0,1,0"))
                        (rule "variableDeclarationAssign" (formula "24") (term "1"))
                        (rule "variableDeclaration" (formula "24") (term "1") (newnames "x_15"))
                        (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "24") (term "1") (inst "#v0=x_16"))
                        (rule "variableDeclaration" (formula "24") (term "1") (newnames "x_16"))
                        (rule "variableDeclarationAssign" (formula "24") (term "1"))
                        (rule "variableDeclaration" (formula "24") (term "1") (newnames "b_1"))
                        (rule "assignment" (formula "24") (term "1"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "methodBodyExpand" (formula "24") (term "1") (newnames "heapBefore_toInt,savedHeapBefore_toInt"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "returnUnfold" (formula "24") (term "1") (inst "#v0=x_17"))
                        (rule "variableDeclarationAssign" (formula "24") (term "1"))
                        (rule "variableDeclaration" (formula "24") (term "1") (newnames "x_17"))
                        (rule "condition_simple" (formula "24") (term "1"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "ifthenelse_negated" (formula "24") (term "0,1,0"))
                        (rule "methodCallReturn" (formula "24") (term "1"))
                        (rule "assignment" (formula "24") (term "1"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "methodCallEmpty" (formula "24") (term "1"))
                        (rule "blockEmpty" (formula "24") (term "1"))
                        (rule "assignment" (formula "24") (term "1"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "assignmentAdditionInt" (formula "24") (term "1"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "translateJavaAddInt" (formula "24") (term "0,1,0"))
                        (rule "variableDeclarationAssign" (formula "24") (term "1"))
                        (rule "variableDeclaration" (formula "24") (term "1") (newnames "x_18"))
                        (rule "assignment_read_attribute_this_final" (formula "24"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "assignmentSubtractionInt" (formula "24") (term "1"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "translateJavaSubInt" (formula "24") (term "0,1,0"))
                        (rule "polySimp_elimSub" (formula "24") (term "0,1,0"))
                        (rule "polySimp_addComm1" (formula "24") (term "0,1,0"))
                        (rule "blockEmpty" (formula "24") (term "1"))
                        (rule "methodCallReturn" (formula "24") (term "1"))
                        (rule "assignment" (formula "24") (term "1"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "methodCallEmpty" (formula "24") (term "1"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "emptyModality" (formula "24") (term "1"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "notRight" (formula "24"))
                        (rule "polySimp_homoEq" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,0,1,0"))
                        (rule "polySimp_mulAssoc" (formula "1") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "4") (term "0"))
                        (rule "times_zero_1" (formula "4") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "4") (term "0,0,0"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "22"))
                        (rule "polySimp_mulAssoc" (formula "22") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "22") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "16"))
                        (rule "polySimp_mulAssoc" (formula "16") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "16") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,1,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0,0,0,1,0"))
                        (rule "polySimp_sepNegMonomial" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "0,0"))
                        (rule "polySimp_elimOne" (formula "4") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "22"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "16"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                        (rule "inEqSimp_exactShadow1" (formula "22") (ifseqformula "15"))
                        (rule "greater_literals" (formula "22") (term "0"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "0,0"))
                        (rule "mul_literals" (formula "22") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "22") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "22"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "0"))
                        (rule "polySimp_elimOne" (formula "22") (term "0"))
                        (rule "inEqSimp_exactShadow1" (formula "23") (ifseqformula "21"))
                        (rule "greater_literals" (formula "23") (term "0"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "23") (term "0,0"))
                        (rule "mul_literals" (formula "23") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "23") (term "0"))
                        (rule "add_literals" (formula "23") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "23") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "23"))
                        (rule "mul_literals" (formula "23") (term "1"))
                        (rule "inEqSimp_exactShadow1" (formula "16") (ifseqformula "15"))
                        (rule "greater_literals" (formula "16") (term "0"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "0,0"))
                        (rule "mul_literals" (formula "16") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "16") (term "0"))
                        (rule "add_literals" (formula "16") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "16") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                        (rule "mul_literals" (formula "16") (term "1"))
                        (rule "inEqSimp_exactShadow1" (formula "17") (ifseqformula "22"))
                        (rule "greater_literals" (formula "17") (term "0"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "17") (term "0,0"))
                        (rule "mul_literals" (formula "17") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "17"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1"))
                        (rule "polySimp_rightDist" (formula "17") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "1,1"))
                        (rule "mul_literals" (formula "17") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "17") (term "1,1"))
                        (rule "inEqSimp_exactShadow3" (formula "25") (ifseqformula "24"))
                        (rule "mul_literals" (formula "25") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "25") (term "0"))
                        (rule "add_literals" (formula "25") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "25"))
                        (rule "mul_literals" (formula "25") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "25") (ifseqformula "16"))
                        (rule "mul_literals" (formula "25") (term "1,1,0"))
                        (rule "greater_literals" (formula "25") (term "0,0"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "leq_literals" (formula "25") (term "0"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "true_left" (formula "25"))
                        (rule "inEqSimp_exactShadow1" (formula "17") (ifseqformula "24"))
                        (rule "greater_literals" (formula "17") (term "0"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "polySimp_rightDist" (formula "17") (term "0,0"))
                        (rule "mul_literals" (formula "17") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "17") (term "1,0"))
                        (rule "mul_literals" (formula "17") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0"))
                        (rule "polySimp_addAssoc" (formula "17") (term "0"))
                        (rule "polySimp_addComm1" (formula "17") (term "0,0"))
                        (rule "add_literals" (formula "17") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "17") (term "0"))
                        (rule "add_literals" (formula "17") (term "1,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "17"))
                        (rule "mul_literals" (formula "17") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "17") (ifseqformula "16"))
                        (rule "mul_literals" (formula "17") (term "1,1,0"))
                        (rule "greater_literals" (formula "17") (term "0,0"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "leq_literals" (formula "17") (term "0"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "true_left" (formula "17"))
                        (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "20"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "andLeft" (formula "20"))
                        (rule "andLeft" (formula "20"))
                        (rule "andLeft" (formula "20"))
                        (rule "andLeft" (formula "20"))
                        (rule "andLeft" (formula "22"))
                        (rule "andLeft" (formula "20"))
                        (rule "andLeft" (formula "20"))
                        (rule "andLeft" (formula "22"))
                        (rule "notLeft" (formula "20"))
                        (rule "notLeft" (formula "20"))
                        (rule "inEqSimp_commuteLeq" (formula "25"))
                        (rule "inEqSimp_commuteLeq" (formula "24"))
                        (rule "inEqSimp_commuteLeq" (formula "23"))
                        (rule "inEqSimp_commuteLeq" (formula "20"))
                        (rule "applyEq" (formula "24") (term "1") (ifseqformula "22"))
                        (rule "applyEq" (formula "23") (term "0") (ifseqformula "22"))
                        (rule "applyEq" (formula "25") (term "1") (ifseqformula "22"))
                        (rule "applyEq" (formula "33") (term "0,1,3,0") (ifseqformula "22"))
                        (rule "translateJavaSubInt" (formula "26") (term "3,0"))
                        (rule "polySimp_elimSub" (formula "26") (term "3,0"))
                        (rule "mul_literals" (formula "26") (term "1,3,0"))
                        (rule "polySimp_addComm0" (formula "26") (term "3,0"))
                        (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "22"))
                        (rule "applyEq" (formula "19") (term "0,1,3,0") (ifseqformula "22"))
                        (rule "applyEq" (formula "15") (term "0") (ifseqformula "22"))
                        (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "22"))
                        (rule "applyEq" (formula "29") (term "0") (ifseqformula "22"))
                        (rule "applyEq" (formula "26") (term "1,3,0") (ifseqformula "22"))
                        (rule "inEqSimp_exactShadow1" (formula "18") (ifseqformula "29"))
                        (rule "greater_literals" (formula "18") (term "0"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "0,0"))
                        (rule "mul_literals" (formula "18") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "18"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1"))
                        (rule "polySimp_rightDist" (formula "18") (term "1"))
                        (rule "mul_literals" (formula "18") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "18") (term "1,1"))
                        (rule "inEqSimp_exactShadow1" (formula "32") (ifseqformula "15"))
                        (rule "greater_literals" (formula "32") (term "0"))
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "polySimp_mulComm0" (formula "32") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "32") (term "0,0"))
                        (rule "mul_literals" (formula "32") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "32") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "32"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "0"))
                        (rule "polySimp_elimOne" (formula "32") (term "0"))
                        (rule "inEqSimp_exactShadow3" (formula "23") (ifseqformula "29"))
                        (rule "mul_literals" (formula "23") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "23"))
                        (rule "mul_literals" (formula "23") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "32") (ifseqformula "23"))
                        (rule "leq_literals" (formula "32") (term "0"))
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "true_left" (formula "32"))
                        (rule "inEqSimp_exactShadow1" (formula "32") (ifseqformula "30"))
                        (rule "greater_literals" (formula "32") (term "0"))
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "polySimp_mulComm0" (formula "32") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "32") (term "0,0"))
                        (rule "mul_literals" (formula "32") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "32") (term "0"))
                        (rule "add_literals" (formula "32") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "32") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "32"))
                        (rule "mul_literals" (formula "32") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "32") (ifseqformula "23"))
                        (rule "leq_literals" (formula "32") (term "0"))
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "true_left" (formula "32"))
                        (rule "inEqSimp_exactShadow1" (formula "18") (ifseqformula "15"))
                        (rule "greater_literals" (formula "18") (term "0"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "0,0"))
                        (rule "mul_literals" (formula "18") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "18") (term "0"))
                        (rule "add_literals" (formula "18") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "18") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "18"))
                        (rule "mul_literals" (formula "18") (term "1"))
                        (rule "inEqSimp_exactShadow3" (formula "24") (ifseqformula "15"))
                        (rule "mul_literals" (formula "24") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "24"))
                        (rule "mul_literals" (formula "24") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "24"))
                        (rule "leq_literals" (formula "16") (term "0"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "true_left" (formula "16"))
                        (rule "inEqSimp_exactShadow3" (formula "22") (ifseqformula "31"))
                        (rule "mul_literals" (formula "22") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0"))
                        (rule "add_literals" (formula "22") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "22"))
                        (rule "mul_literals" (formula "22") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "22") (ifseqformula "24"))
                        (rule "greater_literals" (formula "22") (term "0,0"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "mul_literals" (formula "22") (term "1,0"))
                        (rule "leq_literals" (formula "22") (term "0"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "true_left" (formula "22"))
                        (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "11"))
                         (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "36")) (ifInst ""  (formula "5")))
                        (rule "translateJavaSubInt" (formula "11") (term "0,2,0,1,0"))
                        (rule "translateJavaMulInt" (formula "11") (term "1,1,0,0,0,0"))
                        (rule "translateJavaSubInt" (formula "11") (term "0,2,1,1,0"))
                        (rule "andLeft" (formula "11"))
                        (rule "andLeft" (formula "11"))
                        (rule "andLeft" (formula "11"))
                        (rule "andLeft" (formula "11"))
                        (rule "andLeft" (formula "11"))
                        (rule "andLeft" (formula "11"))
                        (rule "notLeft" (formula "11"))
                        (rule "andLeft" (formula "11"))
                        (rule "eqSymm" (formula "16"))
                        (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "40"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "polySimp_elimSub" (formula "16") (term "0,2,1"))
                        (rule "mul_literals" (formula "16") (term "1,0,2,1"))
                        (rule "polySimp_elimSub" (formula "16") (term "0,2,0"))
                        (rule "mul_literals" (formula "16") (term "1,0,2,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1"))
                        (rule "eqSymm" (formula "13"))
                        (rule "polySimp_addComm0" (formula "16") (term "0,2,1"))
                        (rule "polySimp_addComm0" (formula "16") (term "0,2,0"))
                        (rule "inEqSimp_commuteLeq" (formula "11"))
                        (rule "applyEq" (formula "15") (term "3,0") (ifseqformula "27"))
                        (rule "applyEq" (formula "42") (term "0") (ifseqformula "14"))
                        (rule "applyEq" (formula "13") (term "0,0") (ifseqformula "27"))
                        (rule "applyEq" (formula "16") (term "1,0,2,0") (ifseqformula "27"))
                        (rule "eqSymm" (formula "16"))
                        (rule "applyEq" (formula "33") (term "1,0") (ifseqformula "14"))
                        (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "14"))
                        (rule "inEqSimp_commuteGeq" (formula "32"))
                        (rule "applyEq" (formula "43") (term "1,2,0") (ifseqformula "14"))
                        (rule "applyEq" (formula "43") (term "1,2,1") (ifseqformula "14"))
                        (rule "applyEq" (formula "43") (term "0") (ifseqformula "35"))
                        (rule "eqSymm" (formula "43"))
                        (rule "applyEq" (formula "38") (term "0") (ifseqformula "13"))
                        (rule "applyEq" (formula "16") (term "1,0,2,0") (ifseqformula "27"))
                        (rule "eqSymm" (formula "16"))
                        (rule "applyEq" (formula "23") (term "0") (ifseqformula "13"))
                        (rule "applyEq" (formula "43") (term "0") (ifseqformula "20"))
                        (rule "eqSymm" (formula "43"))
                        (rule "newSym_eq" (formula "13") (inst "l=l_0") (inst "newSymDef=mul(int::final(self,
               de.wiesler.Classifier::$num_buckets),
    Z(0(#)))"))
                        (rule "times_zero_1" (formula "13") (term "1,1"))
                        (rule "add_zero_right" (formula "13") (term "1"))
                        (rule "applyEq" (formula "37") (term "0") (ifseqformula "13"))
                        (rule "inEqSimp_commuteLeq" (formula "37"))
                        (rule "applyEq" (formula "31") (term "0") (ifseqformula "13"))
                        (rule "applyEq" (formula "25") (term "0,1,3,0") (ifseqformula "13"))
                        (rule "polySimp_addComm0" (formula "25") (term "3,0"))
                        (rule "applyEq" (formula "22") (term "0") (ifseqformula "13"))
                        (rule "inEqSimp_commuteLeq" (formula "22"))
                        (rule "applyEq" (formula "17") (term "1,0,2,0") (ifseqformula "13"))
                        (rule "eqSymm" (formula "17"))
                        (rule "applyEq" (formula "34") (term "1,3,0") (ifseqformula "13"))
                        (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "13"))
                        (rule "eqSymm" (formula "14"))
                        (rule "applyEq" (formula "40") (term "0,1,3,0") (ifseqformula "13"))
                        (rule "polySimp_addComm0" (formula "40") (term "3,0"))
                        (rule "applyEq" (formula "33") (term "0") (ifseqformula "13"))
                        (rule "inEqSimp_commuteLeq" (formula "33"))
                        (rule "applyEq" (formula "16") (term "3,0") (ifseqformula "13"))
                        (rule "applyEq" (formula "32") (term "1") (ifseqformula "13"))
                        (rule "applyEq" (formula "1") (term "0,0,1,0,2,0,0,0") (ifseqformula "14"))
                        (rule "polySimp_addComm0" (formula "1") (term "0,2,0,0,0"))
                        (rule "applyEq" (formula "39") (term "0") (ifseqformula "14"))
                        (rule "inEqSimp_homoInEq1" (formula "39"))
                        (rule "polySimp_mulLiterals" (formula "39") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "39") (term "0"))
                        (rule "applyEq" (formula "12") (term "0") (ifseqformula "14"))
                        (rule "applyEq" (formula "24") (term "0") (ifseqformula "14"))
                        (rule "inEqSimp_homoInEq1" (formula "24"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "24") (term "0"))
                        (rule "applyEq" (formula "17") (term "1,0,2,0") (ifseqformula "13"))
                        (rule "eqSymm" (formula "17"))
                        (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "14"))
                        (rule "inEqSimp_homoInEq1" (formula "4") (term "0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0,0"))
                        (rule "applyEq" (formula "11") (term "0") (ifseqformula "14"))
                        (rule "applyEq" (formula "4") (term "0,0,1,1,1") (ifseqformula "14"))
                        (rule "polySimp_addComm0" (formula "4") (term "1,1"))
                        (rule "applyEq" (formula "28") (term "1") (ifseqformula "13"))
                        (rule "applyEq" (formula "1") (term "1,1") (ifseqformula "14"))
                        (rule "polySimp_addComm1" (formula "1") (term "1"))
                        (rule "polySimp_addComm0" (formula "1") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "39"))
                        (rule "polySimp_mulComm0" (formula "39") (term "1"))
                        (rule "polySimp_rightDist" (formula "39") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "39") (term "1,1"))
                        (rule "mul_literals" (formula "39") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "24"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1"))
                        (rule "polySimp_rightDist" (formula "24") (term "1"))
                        (rule "mul_literals" (formula "24") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                        (rule "mul_literals" (formula "4") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "4") (term "1,1,0"))
                        (rule "inEqSimp_subsumption6" (formula "11") (ifseqformula "31"))
                        (rule "mul_literals" (formula "11") (term "1,1,0"))
                        (rule "greater_literals" (formula "11") (term "0,0"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "leq_literals" (formula "11") (term "0"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "true_left" (formula "11"))
                        (rule "elimGcdLeq_antec" (formula "11") (inst "elimGcdRightDiv=Z(4(6(#)))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0"))
                        (rule "neg_literal" (formula "11") (term "0,0,0,0,0,1,0"))
                        (rule "leq_literals" (formula "11") (term "0,0"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "11") (term "0,0,0,0"))
                        (rule "add_literals" (formula "11") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0"))
                        (rule "add_literals" (formula "11") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "11") (term "1,0,0"))
                        (rule "add_zero_right" (formula "11") (term "0,0"))
                        (rule "qeq_literals" (formula "11") (term "0"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "true_left" (formula "11"))
                        (rule "inEqSimp_exactShadow3" (formula "27") (ifseqformula "37"))
                        (rule "mul_literals" (formula "27") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "27") (term "0"))
                        (rule "add_literals" (formula "27") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "27"))
                        (rule "mul_literals" (formula "27") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "27") (ifseqformula "30"))
                        (rule "greater_literals" (formula "27") (term "0,0"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "mul_literals" (formula "27") (term "1,0"))
                        (rule "leq_literals" (formula "27") (term "0"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "true_left" (formula "27"))
                        (rule "inEqSimp_exactShadow3" (formula "28") (ifseqformula "22"))
                        (rule "mul_literals" (formula "28") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "28") (term "0"))
                        (rule "add_literals" (formula "28") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "28"))
                        (rule "mul_literals" (formula "28") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "28") (ifseqformula "30"))
                        (rule "greater_literals" (formula "28") (term "0,0"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "mul_literals" (formula "28") (term "1,0"))
                        (rule "leq_literals" (formula "28") (term "0"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "true_left" (formula "28"))
                        (rule "inEqSimp_exactShadow1" (formula "21") (ifseqformula "37"))
                        (rule "greater_literals" (formula "21") (term "0"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "polySimp_rightDist" (formula "21") (term "0,0"))
                        (rule "mul_literals" (formula "21") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "21") (term "1,0"))
                        (rule "mul_literals" (formula "21") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0"))
                        (rule "polySimp_addComm1" (formula "21") (term "0"))
                        (rule "polySimp_addAssoc" (formula "21") (term "0,0"))
                        (rule "add_literals" (formula "21") (term "0,0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "21"))
                        (rule "polySimp_mulLiterals" (formula "21") (term "0"))
                        (rule "polySimp_elimOne" (formula "21") (term "0"))
                        (rule "inEqSimp_exactShadow3" (formula "20") (ifseqformula "23"))
                        (rule "polySimp_mulComm0" (formula "20") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0"))
                        (rule "polySimp_addComm0" (formula "20") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "20") (term "0"))
                        (rule "add_literals" (formula "20") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "20") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "20"))
                        (rule "mul_literals" (formula "20") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "20") (ifseqformula "31"))
                        (rule "leq_literals" (formula "20") (term "0"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "true_left" (formula "20"))
                        (rule "inEqSimp_exactShadow3" (formula "36") (ifseqformula "37"))
                        (rule "polySimp_mulComm0" (formula "36") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "36") (term "0"))
                        (rule "polySimp_addComm0" (formula "36") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "36"))
                        (rule "polySimp_mulComm0" (formula "36") (term "1"))
                        (rule "polySimp_rightDist" (formula "36") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "36") (term "1,1"))
                        (rule "mul_literals" (formula "36") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "36") (term "1,1"))
                        (rule "inEqSimp_exactShadow3" (formula "37") (ifseqformula "39"))
                        (rule "polySimp_mulComm0" (formula "37") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "37") (term "0"))
                        (rule "polySimp_addComm0" (formula "37") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "37") (term "0"))
                        (rule "add_literals" (formula "37") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "37") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "37"))
                        (rule "mul_literals" (formula "37") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "30"))
                        (rule "leq_literals" (formula "37") (term "0"))
                         (builtin "One Step Simplification" (formula "37"))
                        (rule "true_left" (formula "37"))
                        (rule "inEqSimp_exactShadow3" (formula "29") (ifseqformula "21"))
                        (rule "mul_literals" (formula "29") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "29") (term "0"))
                        (rule "add_literals" (formula "29") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "29"))
                        (rule "mul_literals" (formula "29") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "29") (ifseqformula "31"))
                        (rule "greater_literals" (formula "29") (term "0,0"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "mul_literals" (formula "29") (term "1,0"))
                        (rule "leq_literals" (formula "29") (term "0"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "true_left" (formula "29"))
                        (rule "inEqSimp_exactShadow3" (formula "20") (ifseqformula "21"))
                        (rule "polySimp_mulComm0" (formula "20") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0"))
                        (rule "polySimp_addComm0" (formula "20") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "20") (term "0"))
                        (rule "add_literals" (formula "20") (term "1,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "20"))
                        (rule "mul_literals" (formula "20") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "20") (ifseqformula "31"))
                        (rule "greater_literals" (formula "20") (term "0,0"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "mul_literals" (formula "20") (term "1,0"))
                        (rule "leq_literals" (formula "20") (term "0"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "true_left" (formula "20"))
                        (rule "inEqSimp_exactShadow1" (formula "36") (ifseqformula "21"))
                        (rule "greater_literals" (formula "36") (term "0"))
                         (builtin "One Step Simplification" (formula "36"))
                        (rule "polySimp_rightDist" (formula "36") (term "0,0"))
                        (rule "mul_literals" (formula "36") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "36") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0"))
                        (rule "mul_literals" (formula "36") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "36") (term "0"))
                        (rule "polySimp_addComm1" (formula "36") (term "0,0"))
                        (rule "add_literals" (formula "36") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "36") (term "0"))
                        (rule "add_literals" (formula "36") (term "1,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "36"))
                        (rule "mul_literals" (formula "36") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "36") (ifseqformula "30"))
                        (rule "greater_literals" (formula "36") (term "0,0"))
                         (builtin "One Step Simplification" (formula "36"))
                        (rule "mul_literals" (formula "36") (term "1,0"))
                        (rule "leq_literals" (formula "36") (term "0"))
                         (builtin "One Step Simplification" (formula "36"))
                        (rule "true_left" (formula "36"))
                        (rule "inEqSimp_exactShadow1" (formula "36") (ifseqformula "23"))
                        (rule "greater_literals" (formula "36") (term "0"))
                         (builtin "One Step Simplification" (formula "36"))
                        (rule "polySimp_rightDist" (formula "36") (term "0,0"))
                        (rule "mul_literals" (formula "36") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "36") (term "1,0"))
                        (rule "mul_literals" (formula "36") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0"))
                        (rule "polySimp_addAssoc" (formula "36") (term "0"))
                        (rule "polySimp_addComm1" (formula "36") (term "0,0"))
                        (rule "add_literals" (formula "36") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "36") (term "0"))
                        (rule "add_literals" (formula "36") (term "1,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "36"))
                        (rule "mul_literals" (formula "36") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "36") (ifseqformula "30"))
                        (rule "greater_literals" (formula "36") (term "0,0"))
                         (builtin "One Step Simplification" (formula "36"))
                        (rule "mul_literals" (formula "36") (term "1,0"))
                        (rule "leq_literals" (formula "36") (term "0"))
                         (builtin "One Step Simplification" (formula "36"))
                        (rule "true_left" (formula "36"))
                        (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "33") (term "0"))
                        (rule "replace_known_left" (formula "33") (term "1,0") (ifseqformula "7"))
                         (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "44")) (ifInst ""  (formula "34")))
                        (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "34") (term "0") (inst "i=i") (inst "j=j"))
                         (builtin "One Step Simplification" (formula "34"))
                        (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "34") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,1,0"))
                        (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,1,0"))
                        (rule "add_literals" (formula "34") (term "0,0,0,1,0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "34") (term "1,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "34") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "34") (term "0,1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,1,0"))
                        (rule "nnf_imp2or" (formula "34") (term "0"))
                        (rule "nnf_notAnd" (formula "34") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0"))
                        (rule "times_zero_1" (formula "34") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "34") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0"))
                        (rule "mul_literals" (formula "34") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "34") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "34") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0"))
                        (rule "nnf_imp2or" (formula "34") (term "0,1,0"))
                        (rule "nnf_notAnd" (formula "34") (term "0,0,1,0"))
                        (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "34") (term "1,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,0,1,0"))
                        (rule "mul_literals" (formula "34") (term "0,1,0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,0,1,0"))
                        (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,1,0"))
                        (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,1,0"))
                        (rule "add_literals" (formula "34") (term "0,0,0,1,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "34") (term "0,1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,1,0"))
                        (rule "Definition_axiom_for_isClassifiedAs_in_de_wiesler_Tree" (formula "41") (term "0"))
                         (builtin "One Step Simplification" (formula "41"))
                        (rule "translateJavaSubInt" (formula "41") (term "1,0,1"))
                        (rule "translateJavaSubInt" (formula "41") (term "0,2,0,1,0"))
                        (rule "andLeft" (formula "41"))
                        (rule "polySimp_elimSub" (formula "41") (term "0,2,0,1"))
                        (rule "mul_literals" (formula "41") (term "1,0,2,0,1"))
                        (rule "polySimp_elimSub" (formula "42") (term "1,0"))
                        (rule "mul_literals" (formula "42") (term "1,1,0"))
                        (rule "polySimp_addComm1" (formula "41") (term "0,2,0,1"))
                        (rule "polySimp_addComm0" (formula "42") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "41") (term "0,0,2,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "41") (term "0"))
                        (rule "add_zero_right" (formula "41") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "41") (term "1,0,0"))
                        (rule "polySimp_mulAssoc" (formula "41") (term "0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "41") (term "0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "41") (term "0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "41") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "41") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "42") (term "0"))
                        (rule "polySimp_rightDist" (formula "42") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "42") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "42") (term "0,0,0"))
                        (rule "add_literals" (formula "42") (term "0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "42") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "42") (term "0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "41") (term "1"))
                        (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "42") (term "1"))
                        (rule "applyEq" (formula "42") (term "0,1,0,0") (ifseqformula "27"))
                        (rule "polySimp_addComm1" (formula "42") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "42") (term "0,0,0"))
                        (rule "add_literals" (formula "42") (term "1,1,0,0,0"))
                        (rule "applyEq" (formula "41") (term "1,1,0,1") (ifseqformula "13"))
                        (rule "applyEq" (formula "42") (term "1,0,1") (ifseqformula "13"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "41") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "41") (term "0,0"))
                        (rule "polySimp_elimOne" (formula "41") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "0"))
                        (rule "polySimp_mulComm0" (formula "42") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "42") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0"))
                        (rule "mul_literals" (formula "42") (term "0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1"))
                        (rule "polySimp_mulComm0" (formula "41") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "41") (term "1,1"))
                        (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1"))
                        (rule "mul_literals" (formula "41") (term "0,1,1"))
                        (rule "polySimp_elimOne" (formula "41") (term "1,1,1"))
                        (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "16"))
                         (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "44")) (ifInst ""  (formula "26")))
                        (rule "translateJavaSubInt" (formula "16") (term "3,0,1"))
                        (rule "andLeft" (formula "16"))
                        (rule "andLeft" (formula "16"))
                        (rule "andLeft" (formula "16"))
                        (rule "andLeft" (formula "16"))
                        (rule "andLeft" (formula "18"))
                        (rule "andLeft" (formula "16"))
                        (rule "notLeft" (formula "16"))
                        (rule "polySimp_elimSub" (formula "21") (term "3,0"))
                        (rule "mul_literals" (formula "21") (term "1,3,0"))
                        (rule "polySimp_addComm0" (formula "21") (term "3,0"))
                        (rule "inEqSimp_commuteLeq" (formula "20"))
                        (rule "inEqSimp_commuteLeq" (formula "19"))
                        (rule "inEqSimp_commuteLeq" (formula "18"))
                        (rule "inEqSimp_commuteLeq" (formula "16"))
                        (rule "applyEq" (formula "17") (term "0") (ifseqformula "16"))
                        (rule "applyEq" (formula "18") (term "1") (ifseqformula "16"))
                        (rule "applyEq" (formula "47") (term "0") (ifseqformula "13"))
                        (rule "applyEq" (formula "19") (term "1") (ifseqformula "16"))
                        (rule "applyEq" (formula "20") (term "1,3,0") (ifseqformula "16"))
                        (rule "applyEq" (formula "31") (term "0") (ifseqformula "16"))
                        (rule "applyEq" (formula "20") (term "1,0") (ifseqformula "13"))
                        (rule "applyEq" (formula "19") (term "0,0") (ifseqformula "13"))
                        (rule "inEqSimp_commuteGeq" (formula "19"))
                        (rule "applyEq" (formula "16") (term "1") (ifseqformula "11"))
                        (rule "applyEq" (formula "17") (term "0") (ifseqformula "11"))
                        (rule "applyEq" (formula "17") (term "1") (ifseqformula "11"))
                        (rule "applyEq" (formula "18") (term "1,3,0") (ifseqformula "11"))
                        (rule "applyEq" (formula "17") (term "0") (ifseqformula "11"))
                        (rule "inEqSimp_commuteLeq" (formula "17"))
                        (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "14") (term "0"))
                        (rule "replace_known_right" (formula "14") (term "0,0,0") (ifseqformula "46"))
                         (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "7")) (ifInst ""  (formula "15")))
                        (rule "Definition_axiom_for_isClassifiedAs_in_de_wiesler_Tree" (formula "26") (term "0"))
                         (builtin "One Step Simplification" (formula "26"))
                        (rule "translateJavaSubInt" (formula "26") (term "0,2,0,1,0"))
                        (rule "translateJavaSubInt" (formula "26") (term "1,0,1"))
                        (rule "andLeft" (formula "26"))
                        (rule "polySimp_elimSub" (formula "27") (term "1,0"))
                        (rule "mul_literals" (formula "27") (term "1,1,0"))
                        (rule "polySimp_elimSub" (formula "26") (term "0,2,0,1"))
                        (rule "mul_literals" (formula "26") (term "1,0,2,0,1"))
                        (rule "polySimp_addComm0" (formula "27") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "26") (term "0,2,0,1"))
                        (rule "polySimp_addComm0" (formula "26") (term "0,0,2,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "26") (term "0"))
                        (rule "add_zero_right" (formula "26") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "26") (term "1,0,0"))
                        (rule "polySimp_mulAssoc" (formula "26") (term "0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "26") (term "0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "26") (term "0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "26") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "26") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "27") (term "0"))
                        (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "27") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "27") (term "0,0,0"))
                        (rule "add_literals" (formula "27") (term "0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "27") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "27") (term "0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "26") (term "1"))
                        (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "27") (term "1"))
                        (rule "applyEq" (formula "26") (term "1,1,0,1") (ifseqformula "13"))
                        (rule "applyEq" (formula "27") (term "1,0,1") (ifseqformula "13"))
                        (rule "applyEq" (formula "27") (term "0,1,0,0") (ifseqformula "17"))
                        (rule "polySimp_addComm1" (formula "27") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "27") (term "0,0,0"))
                        (rule "add_literals" (formula "27") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "26") (term "0,0"))
                        (rule "polySimp_elimOne" (formula "26") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1"))
                        (rule "polySimp_mulComm0" (formula "26") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "26") (term "1,1"))
                        (rule "mul_literals" (formula "26") (term "0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1"))
                        (rule "polySimp_elimOne" (formula "26") (term "1,1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0"))
                        (rule "polySimp_mulComm0" (formula "27") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "27") (term "1,0"))
                        (rule "mul_literals" (formula "27") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0"))
                        (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "15") (term "0") (inst "i=i") (inst "j=j"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "15") (term "1,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,1,0"))
                        (rule "nnf_imp2or" (formula "15") (term "0"))
                        (rule "nnf_notAnd" (formula "15") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
                        (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                        (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                        (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "35") (term "0") (inst "i=i"))
                         (builtin "One Step Simplification" (formula "35"))
                        (rule "translateJavaAddInt" (formula "35") (term "0,2,1,1,0"))
                        (rule "translateJavaSubInt" (formula "35") (term "1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "35") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "35") (term "1,1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "35") (term "0,2,1,1,0"))
                        (rule "polySimp_addComm1" (formula "35") (term "1,1,0,0"))
                        (rule "add_literals" (formula "35") (term "0,1,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "35") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "35") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "35") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0"))
                        (rule "nnf_imp2or" (formula "15") (term "0,1,0"))
                        (rule "nnf_imp2or" (formula "35") (term "0"))
                        (rule "nnf_notAnd" (formula "35") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "35") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "35") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0"))
                        (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "35") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0"))
                        (rule "mul_literals" (formula "35") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "15") (term "0,0,1,0"))
                        (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,1,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,1,0"))
                        (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,1,0"))
                        (rule "add_zero_left" (formula "15") (term "0,0,1,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,1,0"))
                        (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,1,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,1,0"))
                        (rule "jdiv_axiom" (formula "4") (term "0,0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "0,0,2,1"))
                        (rule "eqSymm" (formula "4"))
                        (rule "inEqSimp_subsumption6" (formula "4") (term "0,0") (ifseqformula "33"))
                        (rule "mul_literals" (formula "4") (term "1,1,0,0,0"))
                        (rule "greater_literals" (formula "4") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "leq_literals" (formula "4") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "eqSymm" (formula "4"))
                        (rule "applyEqRigid" (formula "5") (term "1,1,0") (ifseqformula "4"))
                        (rule "applyEq" (formula "5") (term "0,0,1,1") (ifseqformula "4"))
                        (rule "applyEq" (formula "1") (term "0,0,0,2,0,0,0") (ifseqformula "4"))
                        (rule "polyDiv_pullOut" (formula "1") (term "0,0,0,2,0,0,0") (inst "polyDivCoeff=l_0"))
                        (rule "equal_literals" (formula "1") (term "0,0,0,0,2,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0,0,0,2,0,0,0"))
                        (rule "polySimp_pullOutFactor0" (formula "1") (term "0,0,0,0,0,2,0,0,0"))
                        (rule "add_literals" (formula "1") (term "1,0,0,0,0,0,2,0,0,0"))
                        (rule "times_zero_1" (formula "1") (term "0,0,0,0,0,2,0,0,0"))
                        (rule "div_literals" (formula "1") (term "0,0,0,0,2,0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0,0,2,0,0,0"))
                        (rule "polyDiv_pullOut" (formula "5") (term "0,0,1,1") (inst "polyDivCoeff=l_0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,2,0,0,1,1"))
                        (rule "equal_literals" (formula "5") (term "0,0,0,1,1"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "polySimp_pullOutFactor0" (formula "5") (term "0,0,0,0,1,1"))
                        (rule "add_literals" (formula "5") (term "1,0,0,0,0,1,1"))
                        (rule "times_zero_1" (formula "5") (term "0,0,0,0,1,1"))
                        (rule "div_literals" (formula "5") (term "0,0,0,1,1"))
                        (rule "add_zero_left" (formula "5") (term "0,0,1,1"))
                        (rule "polyDiv_pullOut" (formula "4") (term "1") (inst "polyDivCoeff=l_0"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,2,1"))
                        (rule "equal_literals" (formula "4") (term "0,1"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "polySimp_pullOutFactor0" (formula "4") (term "0,0,1"))
                        (rule "add_literals" (formula "4") (term "1,0,0,1"))
                        (rule "times_zero_1" (formula "4") (term "0,0,1"))
                        (rule "div_literals" (formula "4") (term "0,1"))
                        (rule "add_zero_left" (formula "4") (term "1"))
                        (rule "polyDiv_pullOut" (formula "5") (term "1,1,0") (inst "polyDivCoeff=l_0"))
                        (rule "equal_literals" (formula "5") (term "0,1,1,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,1,1,0"))
                        (rule "polySimp_pullOutFactor0" (formula "5") (term "0,0,1,1,0"))
                        (rule "add_literals" (formula "5") (term "1,0,0,1,1,0"))
                        (rule "times_zero_1" (formula "5") (term "0,0,1,1,0"))
                        (rule "div_literals" (formula "5") (term "0,1,1,0"))
                        (rule "add_zero_left" (formula "5") (term "1,1,0"))
                        (rule "inEqSimp_contradInEq1" (formula "5") (term "0") (ifseqformula "23"))
                        (rule "inEqSimp_homoInEq1" (formula "5") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "5") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "5") (term "0,0,0"))
                        (rule "polySimp_addComm0" (formula "5") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,0"))
                        (rule "add_literals" (formula "5") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "5") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "5") (term "0,0,0"))
                        (rule "leq_literals" (formula "5") (term "0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "5"))
                        (rule "times_zero_1" (formula "3") (term "0,0"))
                        (rule "add_zero_left" (formula "3") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1"))
                        (rule "polySimp_elimOne" (formula "3") (term "1"))
                        (rule "inEqSimp_exactShadow3" (formula "35") (ifseqformula "5"))
                        (rule "polySimp_mulComm0" (formula "35") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "35") (term "0"))
                        (rule "polySimp_pullOutFactor0" (formula "35") (term "0,0"))
                        (rule "add_literals" (formula "35") (term "1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "35"))
                        (rule "polySimp_mulLiterals" (formula "35") (term "1"))
                        (rule "inEqSimp_contradInEq0" (formula "35") (ifseqformula "26"))
                        (rule "andLeft" (formula "35"))
                        (rule "inEqSimp_homoInEq1" (formula "35"))
                        (rule "polySimp_mulComm0" (formula "35") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "35") (term "1,0"))
                        (rule "mul_literals" (formula "35") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0"))
                        (rule "polySimp_addAssoc" (formula "35") (term "0"))
                        (rule "polySimp_addComm0" (formula "35") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "35") (term "0"))
                        (rule "add_literals" (formula "35") (term "1,1,0"))
                        (rule "times_zero_1" (formula "35") (term "1,0"))
                        (rule "add_zero_right" (formula "35") (term "0"))
                        (rule "leq_literals" (formula "35"))
                        (rule "closeFalse" (formula "35"))
                     )
                     (branch "Null Reference (x_arr_1 = null)"
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch "Index Out of Bounds (x_arr_1 != null, but bucket_index_1 Out of Bounds!)"
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "false_right" (formula "22"))
                        (rule "inEqSimp_ltToLeq" (formula "19"))
                        (rule "polySimp_mulAssoc" (formula "19") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "19") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "19") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "2") (term "0"))
                        (rule "times_zero_1" (formula "2") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "2") (term "0,0,0"))
                        (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "13"))
                        (rule "polySimp_mulAssoc" (formula "13") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "13") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "1") (term "0,0,1"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "19"))
                        (rule "polySimp_mulLiterals" (formula "19") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0,0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "13"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "0,1"))
                        (rule "inEqSimp_exactShadow1" (formula "19") (ifseqformula "12"))
                        (rule "greater_literals" (formula "19") (term "0"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "0,0"))
                        (rule "mul_literals" (formula "19") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "19") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "19"))
                        (rule "polySimp_mulLiterals" (formula "19") (term "0"))
                        (rule "polySimp_elimOne" (formula "19") (term "0"))
                        (rule "inEqSimp_exactShadow1" (formula "20") (ifseqformula "18"))
                        (rule "greater_literals" (formula "20") (term "0"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "0,0"))
                        (rule "mul_literals" (formula "20") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "20") (term "0"))
                        (rule "add_literals" (formula "20") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "20") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "20"))
                        (rule "mul_literals" (formula "20") (term "1"))
                        (rule "inEqSimp_exactShadow1" (formula "13") (ifseqformula "18"))
                        (rule "greater_literals" (formula "13") (term "0"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "0,0"))
                        (rule "mul_literals" (formula "13") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "13"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1"))
                        (rule "polySimp_rightDist" (formula "13") (term "1"))
                        (rule "mul_literals" (formula "13") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "13") (term "1,1"))
                        (rule "inEqSimp_exactShadow1" (formula "14") (ifseqformula "12"))
                        (rule "greater_literals" (formula "14") (term "0"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "0,0"))
                        (rule "mul_literals" (formula "14") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "14") (term "0"))
                        (rule "add_literals" (formula "14") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                        (rule "mul_literals" (formula "14") (term "1"))
                        (rule "inEqSimp_exactShadow3" (formula "22") (ifseqformula "21"))
                        (rule "mul_literals" (formula "22") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0"))
                        (rule "add_literals" (formula "22") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "22"))
                        (rule "mul_literals" (formula "22") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "22") (ifseqformula "14"))
                        (rule "greater_literals" (formula "22") (term "0,0"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "mul_literals" (formula "22") (term "1,0"))
                        (rule "leq_literals" (formula "22") (term "0"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "true_left" (formula "22"))
                        (rule "inEqSimp_exactShadow1" (formula "13") (ifseqformula "21"))
                        (rule "greater_literals" (formula "13") (term "0"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "0,0"))
                        (rule "mul_literals" (formula "13") (term "0,0,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0"))
                        (rule "polySimp_addComm1" (formula "13") (term "0,0"))
                        (rule "add_literals" (formula "13") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "13") (term "0"))
                        (rule "add_literals" (formula "13") (term "1,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "13"))
                        (rule "mul_literals" (formula "13") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "13") (ifseqformula "15"))
                        (rule "greater_literals" (formula "13") (term "0,0"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "mul_literals" (formula "13") (term "1,0"))
                        (rule "leq_literals" (formula "13") (term "0"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "true_left" (formula "13"))
                        (rule "Contract_axiom_for_isClassifiedAs_in_Tree" (formula "16") (term "0"))
                        (rule "replace_known_left" (formula "16") (term "1,0,0,0") (ifseqformula "5"))
                         (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "18")) (ifInst ""  (formula "18")))
                        (rule "true_left" (formula "16"))
                        (rule "Contract_axiom_for_isClassifiedAs_in_Tree" (formula "24") (term "0"))
                        (rule "replace_known_left" (formula "24") (term "1,0,0,0") (ifseqformula "5"))
                         (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "17")) (ifInst ""  (formula "17")))
                        (rule "true_left" (formula "24"))
                        (rule "Definition_axiom_for_isClassifiedAs_in_de_wiesler_Tree" (formula "24") (term "0"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "translateJavaSubInt" (formula "24") (term "0,2,0,1,0"))
                        (rule "translateJavaSubInt" (formula "24") (term "1,0,1"))
                        (rule "andLeft" (formula "24"))
                        (rule "polySimp_elimSub" (formula "24") (term "0,2,0,1"))
                        (rule "mul_literals" (formula "24") (term "1,0,2,0,1"))
                        (rule "polySimp_elimSub" (formula "25") (term "1,0"))
                        (rule "mul_literals" (formula "25") (term "1,1,0"))
                        (rule "polySimp_addComm1" (formula "24") (term "0,2,0,1"))
                        (rule "polySimp_addComm0" (formula "25") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "24") (term "0,0,2,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "24") (term "0"))
                        (rule "add_zero_right" (formula "24") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "24") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "24") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "24") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "25") (term "0"))
                        (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "25") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "25") (term "0,0,0"))
                        (rule "add_literals" (formula "25") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "25") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "25") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "25") (term "0,0"))
                        (rule "add_literals" (formula "25") (term "1,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "24") (term "1"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "25") (term "1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "24") (term "1,0"))
                        (rule "mul_literals" (formula "24") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "24") (term "1,1,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "25") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "24") (term "1,1"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1"))
                        (rule "mul_literals" (formula "24") (term "0,1,1"))
                        (rule "polySimp_elimOne" (formula "24") (term "1,1,1"))
                        (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "17"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "andLeft" (formula "17"))
                        (rule "andLeft" (formula "17"))
                        (rule "andLeft" (formula "17"))
                        (rule "andLeft" (formula "18"))
                        (rule "andLeft" (formula "17"))
                        (rule "andLeft" (formula "17"))
                        (rule "andLeft" (formula "18"))
                        (rule "andLeft" (formula "17"))
                        (rule "notLeft" (formula "18"))
                        (rule "notLeft" (formula "17"))
                        (rule "inEqSimp_commuteLeq" (formula "22"))
                        (rule "inEqSimp_commuteLeq" (formula "20"))
                        (rule "inEqSimp_commuteLeq" (formula "21"))
                        (rule "inEqSimp_commuteLeq" (formula "17"))
                        (rule "applyEq" (formula "20") (term "0") (ifseqformula "19"))
                        (rule "applyEq" (formula "21") (term "1") (ifseqformula "19"))
                        (rule "applyEq" (formula "26") (term "0") (ifseqformula "19"))
                        (rule "applyEq" (formula "31") (term "0,0,0") (ifseqformula "19"))
                        (rule "translateJavaSubInt" (formula "23") (term "3,0"))
                        (rule "polySimp_elimSub" (formula "23") (term "3,0"))
                        (rule "mul_literals" (formula "23") (term "1,3,0"))
                        (rule "polySimp_addComm0" (formula "23") (term "3,0"))
                        (rule "applyEq" (formula "23") (term "1,3,0") (ifseqformula "19"))
                        (rule "applyEq" (formula "29") (term "0,0") (ifseqformula "19"))
                        (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "19"))
                        (rule "applyEq" (formula "22") (term "1") (ifseqformula "19"))
                        (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "19"))
                        (rule "applyEq" (formula "30") (term "0,1,0,2,0,1") (ifseqformula "19"))
                        (rule "applyEq" (formula "31") (term "0,1,0,2,0,1") (ifseqformula "19"))
                        (rule "applyEq" (formula "12") (term "0") (ifseqformula "19"))
                        (rule "applyEq" (formula "16") (term "0,1,3,0") (ifseqformula "19"))
                        (rule "inEqSimp_exactShadow1" (formula "29") (ifseqformula "12"))
                        (rule "greater_literals" (formula "29") (term "0"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "polySimp_mulComm0" (formula "29") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "29") (term "0,0"))
                        (rule "mul_literals" (formula "29") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "29") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "29"))
                        (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                        (rule "polySimp_elimOne" (formula "29") (term "0"))
                        (rule "inEqSimp_exactShadow1" (formula "15") (ifseqformula "12"))
                        (rule "greater_literals" (formula "15") (term "0"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "0,0"))
                        (rule "mul_literals" (formula "15") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "15") (term "0"))
                        (rule "add_literals" (formula "15") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                        (rule "mul_literals" (formula "15") (term "1"))
                        (rule "inEqSimp_exactShadow1" (formula "15") (ifseqformula "26"))
                        (rule "greater_literals" (formula "15") (term "0"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "0,0"))
                        (rule "mul_literals" (formula "15") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1"))
                        (rule "polySimp_rightDist" (formula "15") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
                        (rule "mul_literals" (formula "15") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "15") (term "1,1"))
                        (rule "inEqSimp_exactShadow3" (formula "20") (ifseqformula "12"))
                        (rule "mul_literals" (formula "20") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "20"))
                        (rule "mul_literals" (formula "20") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "20"))
                        (rule "leq_literals" (formula "14") (term "0"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "true_left" (formula "14"))
                        (rule "inEqSimp_exactShadow1" (formula "29") (ifseqformula "26"))
                        (rule "greater_literals" (formula "29") (term "0"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "polySimp_mulComm0" (formula "29") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "29") (term "0,0"))
                        (rule "mul_literals" (formula "29") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "29") (term "0"))
                        (rule "add_literals" (formula "29") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "29") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "29"))
                        (rule "mul_literals" (formula "29") (term "1"))
                        (rule "inEqSimp_exactShadow3" (formula "20") (ifseqformula "26"))
                        (rule "mul_literals" (formula "20") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "20"))
                        (rule "mul_literals" (formula "20") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "29") (ifseqformula "20"))
                        (rule "leq_literals" (formula "29") (term "0"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "true_left" (formula "29"))
                        (rule "inEqSimp_exactShadow3" (formula "20") (ifseqformula "28"))
                        (rule "mul_literals" (formula "20") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0"))
                        (rule "add_literals" (formula "20") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "20"))
                        (rule "mul_literals" (formula "20") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "20") (ifseqformula "19"))
                        (rule "greater_literals" (formula "20") (term "0,0"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "mul_literals" (formula "20") (term "1,0"))
                        (rule "leq_literals" (formula "20") (term "0"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "true_left" (formula "20"))
                        (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "9"))
                         (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "34")) (ifInst ""  (formula "3")))
                        (rule "translateJavaMulInt" (formula "9") (term "1,1,0,0,0,0"))
                        (rule "translateJavaSubInt" (formula "9") (term "0,2,0,1,0"))
                        (rule "translateJavaSubInt" (formula "9") (term "0,2,1,1,0"))
                        (rule "andLeft" (formula "9"))
                        (rule "andLeft" (formula "9"))
                        (rule "andLeft" (formula "9"))
                        (rule "andLeft" (formula "9"))
                        (rule "andLeft" (formula "9"))
                        (rule "andLeft" (formula "9"))
                        (rule "notLeft" (formula "9"))
                        (rule "andLeft" (formula "9"))
                        (rule "eqSymm" (formula "14"))
                        (rule "polySimp_elimSub" (formula "14") (term "0,2,0"))
                        (rule "mul_literals" (formula "14") (term "1,0,2,0"))
                        (rule "eqSymm" (formula "14"))
                        (rule "polySimp_elimSub" (formula "14") (term "0,2,0"))
                        (rule "mul_literals" (formula "14") (term "1,0,2,0"))
                        (rule "eqSymm" (formula "14"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1"))
                        (rule "eqSymm" (formula "11"))
                        (rule "polySimp_addComm0" (formula "14") (term "0,2,1"))
                        (rule "polySimp_addComm0" (formula "14") (term "0,2,0"))
                        (rule "inEqSimp_commuteLeq" (formula "9"))
                        (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "24"))
                        (rule "applyEq" (formula "14") (term "1,0,2,0") (ifseqformula "24"))
                        (rule "eqSymm" (formula "14"))
                        (rule "applyEq" (formula "13") (term "3,0") (ifseqformula "24"))
                        (rule "applyEq" (formula "37") (term "1,0,1") (ifseqformula "12"))
                        (rule "applyEq" (formula "42") (term "1,2,1") (ifseqformula "12"))
                        (rule "applyEq" (formula "29") (term "0,0") (ifseqformula "12"))
                        (rule "inEqSimp_commuteGeq" (formula "29"))
                        (rule "applyEq" (formula "42") (term "1,2,0") (ifseqformula "12"))
                        (rule "applyEq" (formula "36") (term "1,0,1") (ifseqformula "12"))
                        (rule "applyEq" (formula "39") (term "0") (ifseqformula "12"))
                        (rule "applyEq" (formula "30") (term "1,0") (ifseqformula "12"))
                        (rule "applyEq" (formula "35") (term "0") (ifseqformula "11"))
                        (rule "applyEq" (formula "20") (term "0") (ifseqformula "11"))
                        (rule "applyEq" (formula "37") (term "0,0") (ifseqformula "11"))
                        (rule "applyEq" (formula "41") (term "0") (ifseqformula "32"))
                        (rule "eqSymm" (formula "41"))
                        (rule "applyEq" (formula "14") (term "1,0,2,0") (ifseqformula "24"))
                        (rule "eqSymm" (formula "14"))
                        (rule "applyEq" (formula "41") (term "0") (ifseqformula "17"))
                        (rule "eqSymm" (formula "41"))
                        (rule "newSym_eq" (formula "11") (inst "l=l_0") (inst "newSymDef=mul(int::final(self,
               de.wiesler.Classifier::$num_buckets),
    Z(0(#)))"))
                        (rule "times_zero_1" (formula "11") (term "1,1"))
                        (rule "add_zero_right" (formula "11") (term "1"))
                        (rule "applyEq" (formula "29") (term "1") (ifseqformula "11"))
                        (rule "applyEq" (formula "22") (term "0,1,3,0") (ifseqformula "11"))
                        (rule "polySimp_addComm0" (formula "22") (term "3,0"))
                        (rule "applyEq" (formula "19") (term "0") (ifseqformula "11"))
                        (rule "inEqSimp_commuteLeq" (formula "19"))
                        (rule "applyEq" (formula "37") (term "0,0") (ifseqformula "11"))
                        (rule "inEqSimp_homoInEq0" (formula "37") (term "0"))
                        (rule "polySimp_addComm1" (formula "37") (term "0,0"))
                        (rule "applyEq" (formula "31") (term "1,3,0") (ifseqformula "11"))
                        (rule "applyEq" (formula "28") (term "0") (ifseqformula "11"))
                        (rule "applyEq" (formula "14") (term "3,0") (ifseqformula "11"))
                        (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "11"))
                        (rule "eqSymm" (formula "12"))
                        (rule "applyEq" (formula "37") (term "0,1,0,2,0,1") (ifseqformula "11"))
                        (rule "polySimp_addComm1" (formula "37") (term "0,2,0,1"))
                        (rule "applyEq" (formula "34") (term "0") (ifseqformula "11"))
                        (rule "inEqSimp_commuteLeq" (formula "34"))
                        (rule "applyEq" (formula "38") (term "0,1,0,2,0,1") (ifseqformula "11"))
                        (rule "polySimp_addComm0" (formula "38") (term "0,2,0,1"))
                        (rule "applyEq" (formula "15") (term "1,0,2,0") (ifseqformula "11"))
                        (rule "eqSymm" (formula "15"))
                        (rule "applyEq" (formula "30") (term "0") (ifseqformula "11"))
                        (rule "inEqSimp_commuteLeq" (formula "30"))
                        (rule "applyEq" (formula "1") (term "0,0,1") (ifseqformula "12"))
                        (rule "inEqSimp_homoInEq1" (formula "1") (term "1"))
                        (rule "polySimp_addComm1" (formula "1") (term "0,1"))
                        (rule "applyEq" (formula "2") (term "0,0,1,1,1") (ifseqformula "12"))
                        (rule "polySimp_addComm0" (formula "2") (term "1,1"))
                        (rule "applyEq" (formula "15") (term "1,0,2,0") (ifseqformula "11"))
                        (rule "eqSymm" (formula "15"))
                        (rule "applyEq" (formula "10") (term "0") (ifseqformula "12"))
                        (rule "applyEq" (formula "1") (term "0,0,1,1,0") (ifseqformula "12"))
                        (rule "polySimp_addComm0" (formula "1") (term "1,0"))
                        (rule "applyEq" (formula "2") (term "0,0,0") (ifseqformula "12"))
                        (rule "inEqSimp_homoInEq1" (formula "2") (term "0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                        (rule "applyEq" (formula "38") (term "0,0") (ifseqformula "12"))
                        (rule "inEqSimp_homoInEq1" (formula "38") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "38") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "38") (term "0,0"))
                        (rule "applyEq" (formula "36") (term "0") (ifseqformula "12"))
                        (rule "inEqSimp_homoInEq1" (formula "36"))
                        (rule "polySimp_mulLiterals" (formula "36") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "36") (term "0"))
                        (rule "applyEq" (formula "21") (term "0") (ifseqformula "12"))
                        (rule "inEqSimp_homoInEq1" (formula "21"))
                        (rule "polySimp_mulLiterals" (formula "21") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "21") (term "0"))
                        (rule "applyEq" (formula "9") (term "0") (ifseqformula "12"))
                        (rule "applyEq" (formula "25") (term "1") (ifseqformula "11"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "0"))
                        (rule "polySimp_mulComm0" (formula "37") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "37") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0"))
                        (rule "mul_literals" (formula "37") (term "0,1,0"))
                        (rule "polySimp_elimOne" (formula "37") (term "1,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1"))
                        (rule "mul_literals" (formula "1") (term "0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                        (rule "mul_literals" (formula "2") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0"))
                        (rule "polySimp_mulComm0" (formula "38") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "38") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0"))
                        (rule "mul_literals" (formula "38") (term "0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "36"))
                        (rule "polySimp_mulComm0" (formula "36") (term "1"))
                        (rule "polySimp_rightDist" (formula "36") (term "1"))
                        (rule "mul_literals" (formula "36") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "36") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "21"))
                        (rule "polySimp_mulComm0" (formula "21") (term "1"))
                        (rule "polySimp_rightDist" (formula "21") (term "1"))
                        (rule "mul_literals" (formula "21") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "21") (term "1,1"))
                        (rule "inEqSimp_subsumption6" (formula "9") (ifseqformula "28"))
                        (rule "greater_literals" (formula "9") (term "0,0"))
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "mul_literals" (formula "9") (term "1,0"))
                        (rule "leq_literals" (formula "9") (term "0"))
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "true_left" (formula "9"))
                        (rule "elimGcdLeq_antec" (formula "9") (inst "elimGcdRightDiv=Z(4(6(#)))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,1,0"))
                        (rule "neg_literal" (formula "9") (term "0,0,0,0,0,1,0"))
                        (rule "leq_literals" (formula "9") (term "0,0"))
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0"))
                        (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "9") (term "0,0,0,0"))
                        (rule "add_literals" (formula "9") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0"))
                        (rule "add_literals" (formula "9") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "9") (term "1,0,0"))
                        (rule "add_zero_right" (formula "9") (term "0,0"))
                        (rule "qeq_literals" (formula "9") (term "0"))
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "true_left" (formula "9"))
                        (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "19"))
                        (rule "polySimp_mulComm0" (formula "17") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "17") (term "0"))
                        (rule "polySimp_addComm0" (formula "17") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "17") (term "0"))
                        (rule "add_literals" (formula "17") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "17") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "17"))
                        (rule "mul_literals" (formula "17") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "27"))
                        (rule "leq_literals" (formula "17") (term "0"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "true_left" (formula "17"))
                        (rule "inEqSimp_exactShadow3" (formula "25") (ifseqformula "34"))
                        (rule "mul_literals" (formula "25") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "25") (term "0"))
                        (rule "add_literals" (formula "25") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "25"))
                        (rule "mul_literals" (formula "25") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "25") (ifseqformula "27"))
                        (rule "greater_literals" (formula "25") (term "0,0"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "mul_literals" (formula "25") (term "1,0"))
                        (rule "leq_literals" (formula "25") (term "0"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "true_left" (formula "25"))
                        (rule "inEqSimp_exactShadow3" (formula "24") (ifseqformula "19"))
                        (rule "mul_literals" (formula "24") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "24") (term "0"))
                        (rule "add_literals" (formula "24") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "24"))
                        (rule "mul_literals" (formula "24") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "24") (ifseqformula "27"))
                        (rule "greater_literals" (formula "24") (term "0,0"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "mul_literals" (formula "24") (term "1,0"))
                        (rule "leq_literals" (formula "24") (term "0"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "true_left" (formula "24"))
                        (rule "inEqSimp_exactShadow3" (formula "32") (ifseqformula "33"))
                        (rule "polySimp_mulComm0" (formula "32") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "32") (term "0"))
                        (rule "polySimp_addComm0" (formula "32") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "32"))
                        (rule "polySimp_mulComm0" (formula "32") (term "1"))
                        (rule "polySimp_rightDist" (formula "32") (term "1"))
                        (rule "mul_literals" (formula "32") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "32") (term "1,1"))
                        (rule "inEqSimp_exactShadow1" (formula "18") (ifseqformula "35"))
                        (rule "greater_literals" (formula "18") (term "0"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "polySimp_rightDist" (formula "18") (term "0,0"))
                        (rule "mul_literals" (formula "18") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0"))
                        (rule "polySimp_addComm1" (formula "18") (term "0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,0"))
                        (rule "add_literals" (formula "18") (term "0,0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "18"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "0"))
                        (rule "polySimp_elimOne" (formula "18") (term "0"))
                        (rule "inEqSimp_exactShadow3" (formula "34") (ifseqformula "36"))
                        (rule "polySimp_mulComm0" (formula "34") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "34") (term "0"))
                        (rule "polySimp_addComm0" (formula "34") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "34") (term "0"))
                        (rule "add_literals" (formula "34") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "34") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "34"))
                        (rule "mul_literals" (formula "34") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "27"))
                        (rule "leq_literals" (formula "34") (term "0"))
                         (builtin "One Step Simplification" (formula "34"))
                        (rule "true_left" (formula "34"))
                        (rule "inEqSimp_exactShadow3" (formula "25") (ifseqformula "18"))
                        (rule "mul_literals" (formula "25") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "25") (term "0"))
                        (rule "add_literals" (formula "25") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "25"))
                        (rule "mul_literals" (formula "25") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "25") (ifseqformula "28"))
                        (rule "greater_literals" (formula "25") (term "0,0"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "mul_literals" (formula "25") (term "1,0"))
                        (rule "leq_literals" (formula "25") (term "0"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "true_left" (formula "25"))
                        (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "18"))
                        (rule "polySimp_mulComm0" (formula "17") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "17") (term "0"))
                        (rule "polySimp_addComm0" (formula "17") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "17") (term "0"))
                        (rule "add_literals" (formula "17") (term "1,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "17"))
                        (rule "mul_literals" (formula "17") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "17") (ifseqformula "28"))
                        (rule "greater_literals" (formula "17") (term "0,0"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "mul_literals" (formula "17") (term "1,0"))
                        (rule "leq_literals" (formula "17") (term "0"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "true_left" (formula "17"))
                        (rule "inEqSimp_exactShadow1" (formula "33") (ifseqformula "20"))
                        (rule "greater_literals" (formula "33") (term "0"))
                         (builtin "One Step Simplification" (formula "33"))
                        (rule "polySimp_rightDist" (formula "33") (term "0,0"))
                        (rule "mul_literals" (formula "33") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "33") (term "1,0"))
                        (rule "mul_literals" (formula "33") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0"))
                        (rule "polySimp_addAssoc" (formula "33") (term "0"))
                        (rule "polySimp_addComm1" (formula "33") (term "0,0"))
                        (rule "add_literals" (formula "33") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "33") (term "0"))
                        (rule "add_literals" (formula "33") (term "1,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "33"))
                        (rule "mul_literals" (formula "33") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "33") (ifseqformula "27"))
                        (rule "mul_literals" (formula "33") (term "1,1,0"))
                        (rule "greater_literals" (formula "33") (term "0,0"))
                         (builtin "One Step Simplification" (formula "33"))
                        (rule "leq_literals" (formula "33") (term "0"))
                         (builtin "One Step Simplification" (formula "33"))
                        (rule "true_left" (formula "33"))
                        (rule "inEqSimp_exactShadow1" (formula "33") (ifseqformula "18"))
                        (rule "greater_literals" (formula "33") (term "0"))
                         (builtin "One Step Simplification" (formula "33"))
                        (rule "polySimp_rightDist" (formula "33") (term "0,0"))
                        (rule "mul_literals" (formula "33") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "33") (term "1,0"))
                        (rule "mul_literals" (formula "33") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0"))
                        (rule "polySimp_addAssoc" (formula "33") (term "0"))
                        (rule "polySimp_addComm1" (formula "33") (term "0,0"))
                        (rule "add_literals" (formula "33") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "33") (term "0"))
                        (rule "add_literals" (formula "33") (term "1,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "33"))
                        (rule "mul_literals" (formula "33") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "33") (ifseqformula "27"))
                        (rule "greater_literals" (formula "33") (term "0,0"))
                         (builtin "One Step Simplification" (formula "33"))
                        (rule "mul_literals" (formula "33") (term "1,0"))
                        (rule "leq_literals" (formula "33") (term "0"))
                         (builtin "One Step Simplification" (formula "33"))
                        (rule "true_left" (formula "33"))
                        (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "30") (term "0") (inst "i=i") (inst "j=j"))
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0,1,0"))
                        (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0,1,0"))
                        (rule "add_literals" (formula "30") (term "0,0,0,1,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "30") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "30") (term "1,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "30") (term "0,1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "30") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0"))
                        (rule "nnf_imp2or" (formula "30") (term "0"))
                        (rule "nnf_notAnd" (formula "30") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "30") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "30") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0"))
                        (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "30") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0"))
                        (rule "mul_literals" (formula "30") (term "1,0,0,0"))
                        (rule "nnf_imp2or" (formula "30") (term "0,1,0"))
                        (rule "nnf_notAnd" (formula "30") (term "0,0,1,0"))
                        (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "30") (term "1,0,0,0,1,0"))
                        (rule "mul_literals" (formula "30") (term "0,1,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0,0,1,0"))
                        (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0,1,0"))
                        (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0,1,0"))
                        (rule "add_literals" (formula "30") (term "0,0,0,1,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "30") (term "0,1,1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0,1,0"))
                        (rule "Contract_axiom_for_isClassifiedAs_in_Tree" (formula "21") (term "0"))
                        (rule "replace_known_left" (formula "21") (term "1") (ifseqformula "14"))
                         (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "14")) (ifInst ""  (formula "5")) (ifInst ""  (formula "40")))
                        (rule "true_left" (formula "21"))
                        (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "12") (term "0") (inst "i=i") (inst "j=j"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,1,0"))
                        (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "14"))
                         (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "40")) (ifInst ""  (formula "23")))
                        (rule "translateJavaSubInt" (formula "14") (term "3,0,1"))
                        (rule "andLeft" (formula "14"))
                        (rule "andLeft" (formula "14"))
                        (rule "andLeft" (formula "14"))
                        (rule "andLeft" (formula "15"))
                        (rule "andLeft" (formula "14"))
                        (rule "andLeft" (formula "14"))
                        (rule "notLeft" (formula "14"))
                        (rule "polySimp_elimSub" (formula "19") (term "3,0"))
                        (rule "mul_literals" (formula "19") (term "1,3,0"))
                        (rule "polySimp_addComm0" (formula "19") (term "3,0"))
                        (rule "inEqSimp_commuteLeq" (formula "18"))
                        (rule "inEqSimp_commuteLeq" (formula "16"))
                        (rule "inEqSimp_commuteLeq" (formula "17"))
                        (rule "inEqSimp_commuteLeq" (formula "14"))
                        (rule "applyEq" (formula "28") (term "0") (ifseqformula "14"))
                        (rule "applyEq" (formula "17") (term "1") (ifseqformula "14"))
                        (rule "applyEq" (formula "15") (term "0") (ifseqformula "14"))
                        (rule "applyEq" (formula "42") (term "0") (ifseqformula "11"))
                        (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "11"))
                        (rule "inEqSimp_commuteGeq" (formula "17"))
                        (rule "applyEq" (formula "18") (term "1,0") (ifseqformula "11"))
                        (rule "applyEq" (formula "18") (term "1,3,0") (ifseqformula "14"))
                        (rule "applyEq" (formula "16") (term "1") (ifseqformula "14"))
                        (rule "applyEq" (formula "14") (term "1") (ifseqformula "9"))
                        (rule "applyEq" (formula "15") (term "0") (ifseqformula "9"))
                        (rule "applyEq" (formula "16") (term "0") (ifseqformula "9"))
                        (rule "inEqSimp_commuteLeq" (formula "16"))
                        (rule "applyEq" (formula "16") (term "1,3,0") (ifseqformula "9"))
                        (rule "applyEq" (formula "15") (term "1") (ifseqformula "9"))
                        (rule "Definition_axiom_for_isClassifiedAs_in_de_wiesler_Tree" (formula "22") (term "0"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "translateJavaSubInt" (formula "22") (term "1,0,1"))
                        (rule "translateJavaSubInt" (formula "22") (term "0,2,0,1,0"))
                        (rule "andLeft" (formula "22"))
                        (rule "polySimp_elimSub" (formula "22") (term "0,2,0,1"))
                        (rule "mul_literals" (formula "22") (term "1,0,2,0,1"))
                        (rule "polySimp_elimSub" (formula "23") (term "1,0"))
                        (rule "mul_literals" (formula "23") (term "1,1,0"))
                        (rule "polySimp_addComm1" (formula "22") (term "0,2,0,1"))
                        (rule "polySimp_addComm0" (formula "23") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "22") (term "0,0,2,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "22") (term "0"))
                        (rule "add_zero_right" (formula "22") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0,0"))
                        (rule "polySimp_mulAssoc" (formula "22") (term "0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "22") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "23") (term "0"))
                        (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "23") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "23") (term "0,0,0"))
                        (rule "add_literals" (formula "23") (term "0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "23") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "23") (term "0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "22") (term "1"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "23") (term "1"))
                        (rule "applyEq" (formula "22") (term "1,1,0,1") (ifseqformula "11"))
                        (rule "applyEq" (formula "23") (term "0,1,0,0") (ifseqformula "14"))
                        (rule "polySimp_addComm1" (formula "23") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "23") (term "0,0,0"))
                        (rule "add_literals" (formula "23") (term "1,1,0,0,0"))
                        (rule "applyEq" (formula "23") (term "1,0,1") (ifseqformula "11"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "0,0"))
                        (rule "polySimp_elimOne" (formula "22") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,1"))
                        (rule "mul_literals" (formula "22") (term "0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1"))
                        (rule "polySimp_elimOne" (formula "22") (term "1,1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "23") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0"))
                        (rule "mul_literals" (formula "23") (term "0,1,0"))
                        (rule "commute_or" (formula "1"))
                        (rule "nnf_imp2or" (formula "12") (term "0"))
                        (rule "nnf_notAnd" (formula "12") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
                        (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                        (rule "mul_literals" (formula "12") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
                        (rule "nnf_imp2or" (formula "12") (term "0,1,0"))
                        (rule "nnf_notAnd" (formula "12") (term "0,0,1,0"))
                        (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,1,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,1,0"))
                        (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,1,0"))
                        (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,1,0"))
                        (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,1,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,1,0"))
                        (rule "jdiv_axiom" (formula "2") (term "0,0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0,0,2,1"))
                        (rule "eqSymm" (formula "2"))
                        (rule "inEqSimp_subsumption6" (formula "2") (term "0,0") (ifseqformula "29"))
                        (rule "mul_literals" (formula "2") (term "1,1,0,0,0"))
                        (rule "greater_literals" (formula "2") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "leq_literals" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2"))
                        (rule "applyEqRigid" (formula "3") (term "1,1,0") (ifseqformula "2"))
                        (rule "applyEq" (formula "1") (term "1,1,0") (ifseqformula "2"))
                        (rule "applyEq" (formula "3") (term "0,0,1,1") (ifseqformula "2"))
                        (rule "applyEqRigid" (formula "1") (term "0,0,1,1") (ifseqformula "2"))
                        (rule "polyDiv_pullOut" (formula "1") (term "0,0,1,1") (inst "polyDivCoeff=l_0"))
                        (rule "equal_literals" (formula "1") (term "0,0,0,1,1"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0,0,1,1"))
                        (rule "polySimp_pullOutFactor0" (formula "1") (term "0,0,0,0,1,1"))
                        (rule "add_literals" (formula "1") (term "1,0,0,0,0,1,1"))
                        (rule "times_zero_1" (formula "1") (term "0,0,0,0,1,1"))
                        (rule "div_literals" (formula "1") (term "0,0,0,1,1"))
                        (rule "add_zero_left" (formula "1") (term "0,0,1,1"))
                        (rule "polyDiv_pullOut" (formula "3") (term "0,0,1,1") (inst "polyDivCoeff=l_0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,2,0,0,1,1"))
                        (rule "equal_literals" (formula "3") (term "0,0,0,1,1"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "polySimp_pullOutFactor0" (formula "3") (term "0,0,0,0,1,1"))
                        (rule "add_literals" (formula "3") (term "1,0,0,0,0,1,1"))
                        (rule "times_zero_1" (formula "3") (term "0,0,0,0,1,1"))
                        (rule "div_literals" (formula "3") (term "0,0,0,1,1"))
                        (rule "add_zero_left" (formula "3") (term "0,0,1,1"))
                        (rule "polyDiv_pullOut" (formula "2") (term "1") (inst "polyDivCoeff=l_0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,2,1"))
                        (rule "equal_literals" (formula "2") (term "0,1"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "polySimp_pullOutFactor0" (formula "2") (term "0,0,1"))
                        (rule "add_literals" (formula "2") (term "1,0,0,1"))
                        (rule "times_zero_1" (formula "2") (term "0,0,1"))
                        (rule "div_literals" (formula "2") (term "0,1"))
                        (rule "add_zero_left" (formula "2") (term "1"))
                        (rule "polyDiv_pullOut" (formula "3") (term "1,1,0") (inst "polyDivCoeff=l_0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,2,1,1,0"))
                        (rule "equal_literals" (formula "3") (term "0,1,1,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "polySimp_pullOutFactor0" (formula "3") (term "0,0,1,1,0"))
                        (rule "add_literals" (formula "3") (term "1,0,0,1,1,0"))
                        (rule "times_zero_1" (formula "3") (term "0,0,1,1,0"))
                        (rule "div_literals" (formula "3") (term "0,1,1,0"))
                        (rule "add_zero_left" (formula "3") (term "1,1,0"))
                        (rule "inEqSimp_contradInEq1" (formula "3") (term "0") (ifseqformula "19"))
                        (rule "inEqSimp_homoInEq1" (formula "3") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "3") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0,0"))
                        (rule "polySimp_addComm0" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0,0"))
                        (rule "leq_literals" (formula "3") (term "0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "polyDiv_pullOut" (formula "1") (term "1,1,0") (inst "polyDivCoeff=l_0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,2,1,1,0"))
                        (rule "equal_literals" (formula "1") (term "0,1,1,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "polySimp_pullOutFactor0" (formula "1") (term "0,0,1,1,0"))
                        (rule "add_literals" (formula "1") (term "1,0,0,1,1,0"))
                        (rule "times_zero_1" (formula "1") (term "0,0,1,1,0"))
                        (rule "div_literals" (formula "1") (term "0,1,1,0"))
                        (rule "add_zero_left" (formula "1") (term "1,1,0"))
                        (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "36"))
                        (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                        (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0,0"))
                        (rule "leq_literals" (formula "1") (term "0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "inEqSimp_exactShadow3" (formula "31") (ifseqformula "1"))
                        (rule "polySimp_mulComm0" (formula "31") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "31") (term "0"))
                        (rule "polySimp_pullOutFactor0" (formula "31") (term "0,0"))
                        (rule "add_literals" (formula "31") (term "1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "31"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "39") (ifseqformula "31"))
                        (rule "andLeft" (formula "39"))
                        (rule "inEqSimp_homoInEq1" (formula "39"))
                        (rule "polySimp_mulComm0" (formula "39") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "39") (term "1,0"))
                        (rule "mul_literals" (formula "39") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0"))
                        (rule "polySimp_addAssoc" (formula "39") (term "0"))
                        (rule "polySimp_addComm0" (formula "39") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "39") (term "0"))
                        (rule "add_literals" (formula "39") (term "1,1,0"))
                        (rule "times_zero_1" (formula "39") (term "1,0"))
                        (rule "add_zero_right" (formula "39") (term "0"))
                        (rule "leq_literals" (formula "39"))
                        (rule "closeFalse" (formula "39"))
                     )
                  )
                  (branch "Case 2"
                      (builtin "One Step Simplification" (formula "21"))
                     (rule "equal_literals" (formula "21") (term "0"))
                      (builtin "One Step Simplification" (formula "21"))
                     (rule "closeTrue" (formula "21"))
                  )
               )
               (branch "if x_3 false"
                   (builtin "One Step Simplification" (formula "22"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
            )
         )
         (branch "Case 2"
             (builtin "One Step Simplification" (formula "20"))
            (rule "equal_literals" (formula "20") (term "0"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "closeTrue" (formula "20"))
         )
      )
      (branch "if x_2 false"
          (builtin "One Step Simplification" (formula "1"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "notLeft" (formula "1"))
         (rule "apply_eq_boolean" (formula "19") (term "0,1,0") (ifseqformula "18"))
         (rule "compound_subtraction_2" (formula "20") (term "1") (inst "#v0=x_1") (inst "#v1=x_2"))
         (rule "variableDeclarationAssign" (formula "20") (term "1"))
         (rule "variableDeclaration" (formula "20") (term "1") (newnames "x_1"))
         (rule "assignment" (formula "20") (term "1"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "variableDeclarationAssign" (formula "20") (term "1"))
         (rule "variableDeclaration" (formula "20") (term "1") (newnames "x_4"))
         (rule "assignment_read_attribute_this_final" (formula "20"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "assignmentSubtractionInt" (formula "20") (term "1"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "translateJavaSubInt" (formula "20") (term "0,1,0"))
         (rule "polySimp_elimSub" (formula "20") (term "0,1,0"))
         (rule "blockEmpty" (formula "20") (term "1"))
         (rule "methodCallReturn" (formula "20") (term "1"))
         (rule "assignment" (formula "20") (term "1"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "methodCallEmpty" (formula "20") (term "1"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "emptyModality" (formula "20") (term "1"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "notRight" (formula "20"))
         (rule "ifElseSplit" (formula "20"))
         (branch "if x_3 true"
             (builtin "One Step Simplification" (formula "21"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "if x_3 false"
             (builtin "One Step Simplification" (formula "21"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "compound_subtraction_2" (formula "20") (term "1") (inst "#v0=x_1") (inst "#v1=x_2"))
            (rule "variableDeclarationAssign" (formula "20") (term "1"))
            (rule "variableDeclaration" (formula "20") (term "1") (newnames "x_5"))
            (rule "assignment" (formula "20") (term "1"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "variableDeclarationAssign" (formula "20") (term "1"))
            (rule "variableDeclaration" (formula "20") (term "1") (newnames "x_6"))
            (rule "assignment_read_attribute_this_final" (formula "20"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "assignmentSubtractionInt" (formula "20") (term "1"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "translateJavaSubInt" (formula "20") (term "0,1,0"))
            (rule "polySimp_elimSub" (formula "20") (term "0,1,0"))
            (rule "blockEmpty" (formula "20") (term "1"))
            (rule "methodCallReturn" (formula "20") (term "1"))
            (rule "assignment" (formula "20") (term "1"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "methodCallEmpty" (formula "20") (term "1"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "emptyModality" (formula "20") (term "1"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "notRight" (formula "20"))
            (rule "polySimp_homoEq" (formula "2"))
            (rule "polySimp_homoEq" (formula "1"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
            (rule "polySimp_rightDist" (formula "2") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0"))
            (rule "polySimp_elimOne" (formula "2") (term "1,1,0"))
            (rule "polySimp_mulComm0" (formula "2") (term "0,1,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "18"))
            (rule "polySimp_mulAssoc" (formula "18") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "18") (term "0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "18") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "18") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "12"))
            (rule "polySimp_mulAssoc" (formula "12") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "12") (term "0"))
            (rule "polySimp_sepPosMonomial" (formula "2"))
            (rule "polySimp_mulComm0" (formula "2") (term "1"))
            (rule "polySimp_rightDist" (formula "2") (term "1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
            (rule "polySimp_elimOne" (formula "2") (term "1,1"))
            (rule "polySimp_mulComm0" (formula "2") (term "0,1"))
            (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "2"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
            (rule "polySimp_pullOutFactor1" (formula "1") (term "0,0,0"))
            (rule "add_literals" (formula "1") (term "1,0,0,0"))
            (rule "times_zero_1" (formula "1") (term "0,0,0"))
            (rule "add_zero_left" (formula "1") (term "0,0"))
            (rule "polySimp_sepNegMonomial" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "applyEq" (formula "17") (term "1") (ifseqformula "1"))
            (rule "applyEq" (formula "18") (term "0,3,0") (ifseqformula "1"))
            (rule "applyEq" (formula "17") (term "1,0,0") (ifseqformula "1"))
            (rule "applyEq" (formula "16") (term "1") (ifseqformula "1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "12"))
            (rule "polySimp_mulLiterals" (formula "12") (term "0"))
            (rule "inEqSimp_exactShadow1" (formula "12") (ifseqformula "11"))
            (rule "greater_literals" (formula "12") (term "0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "0,0"))
            (rule "mul_literals" (formula "12") (term "0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "12") (term "0"))
            (rule "add_literals" (formula "12") (term "1,1,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12"))
            (rule "mul_literals" (formula "12") (term "1"))
            (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "8"))
             (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "19")) (ifInst ""  (formula "15")))
            (rule "translateJavaSubInt" (formula "8") (term "0,2,1,1"))
            (rule "translateJavaSubInt" (formula "8") (term "0,2,0,1"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "9"))
            (rule "andLeft" (formula "8"))
            (rule "notLeft" (formula "9"))
            (rule "notLeft" (formula "8"))
            (rule "eqSymm" (formula "13"))
            (rule "eqSymm" (formula "10"))
            (rule "polySimp_elimSub" (formula "13") (term "0,2,0"))
            (rule "mul_literals" (formula "13") (term "1,0,2,0"))
            (rule "eqSymm" (formula "13"))
            (rule "polySimp_elimSub" (formula "13") (term "0,2,0"))
            (rule "mul_literals" (formula "13") (term "1,0,2,0"))
            (rule "eqSymm" (formula "13"))
            (rule "polySimp_addComm0" (formula "13") (term "0,2,1"))
            (rule "polySimp_addComm0" (formula "13") (term "0,2,0"))
            (rule "inEqSimp_commuteLeq" (formula "8"))
            (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "10"))
            (rule "applyEq" (formula "23") (term "0,1,3,0") (ifseqformula "10"))
            (rule "applyEq" (formula "19") (term "0,1,3,0") (ifseqformula "10"))
            (rule "applyEq" (formula "27") (term "1,2,1") (ifseqformula "11"))
            (rule "applyEq" (formula "16") (term "0") (ifseqformula "10"))
            (rule "applyEq" (formula "27") (term "1,2,0") (ifseqformula "11"))
            (rule "applyEq" (formula "9") (term "0") (ifseqformula "2"))
            (rule "inEqSimp_homoInEq0" (formula "9"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,0"))
            (rule "polySimp_mulAssoc" (formula "9") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0"))
            (rule "polySimp_elimOne" (formula "9") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "9") (term "0"))
            (rule "applyEq" (formula "8") (term "0") (ifseqformula "2"))
            (rule "inEqSimp_homoInEq1" (formula "8"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
            (rule "polySimp_rightDist" (formula "8") (term "1,0"))
            (rule "polySimp_mulAssoc" (formula "8") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "0,1,0"))
            (rule "polySimp_elimOne" (formula "8") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "8") (term "0"))
            (rule "applyEq" (formula "13") (term "1,0,2,0") (ifseqformula "10"))
            (rule "eqSymm" (formula "13"))
            (rule "applyEq" (formula "12") (term "3,0") (ifseqformula "10"))
            (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "2"))
            (rule "polySimp_mulComm0" (formula "18") (term "0"))
            (rule "polySimp_rightDist" (formula "18") (term "0"))
            (rule "polySimp_mulComm0" (formula "18") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "18") (term "0,0"))
            (rule "inEqSimp_homoInEq1" (formula "18"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
            (rule "polySimp_rightDist" (formula "18") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0"))
            (rule "polySimp_mulComm0" (formula "18") (term "0,1,0"))
            (rule "polySimp_mulLiterals" (formula "18") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "18") (term "0"))
            (rule "polySimp_addComm1" (formula "18") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "18") (term "0"))
            (rule "add_literals" (formula "18") (term "1,1,0"))
            (rule "applyEq" (formula "10") (term "1") (ifseqformula "2"))
            (rule "applyEq" (formula "19") (term "0,1,3,0") (ifseqformula "2"))
            (rule "polySimp_mulComm0" (formula "19") (term "1,3,0"))
            (rule "polySimp_rightDist" (formula "19") (term "1,3,0"))
            (rule "polySimp_mulAssoc" (formula "19") (term "0,1,3,0"))
            (rule "polySimp_mulComm0" (formula "19") (term "0,0,1,3,0"))
            (rule "polySimp_mulLiterals" (formula "19") (term "0,1,3,0"))
            (rule "polySimp_elimOne" (formula "19") (term "0,1,3,0"))
            (rule "polySimp_addAssoc" (formula "19") (term "3,0"))
            (rule "polySimp_addComm0" (formula "19") (term "0,3,0"))
            (rule "polySimp_pullOutFactor1b" (formula "19") (term "3,0"))
            (rule "add_literals" (formula "19") (term "1,1,3,0"))
            (rule "times_zero_1" (formula "19") (term "1,3,0"))
            (rule "add_zero_right" (formula "19") (term "3,0"))
            (rule "applyEq" (formula "16") (term "0") (ifseqformula "2"))
            (rule "inEqSimp_homoInEq0" (formula "16"))
            (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
            (rule "polySimp_rightDist" (formula "16") (term "1,0"))
            (rule "polySimp_mulAssoc" (formula "16") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "16") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0"))
            (rule "polySimp_elimOne" (formula "16") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "16") (term "0"))
            (rule "polySimp_addComm0" (formula "16") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "16") (term "0"))
            (rule "add_literals" (formula "16") (term "1,1,0"))
            (rule "times_zero_1" (formula "16") (term "1,0"))
            (rule "add_zero_right" (formula "16") (term "0"))
            (rule "applyEq" (formula "23") (term "0,1,3,0") (ifseqformula "2"))
            (rule "polySimp_mulComm0" (formula "23") (term "1,3,0"))
            (rule "polySimp_rightDist" (formula "23") (term "1,3,0"))
            (rule "polySimp_mulAssoc" (formula "23") (term "0,1,3,0"))
            (rule "polySimp_mulComm0" (formula "23") (term "0,0,1,3,0"))
            (rule "polySimp_mulLiterals" (formula "23") (term "0,1,3,0"))
            (rule "polySimp_elimOne" (formula "23") (term "0,1,3,0"))
            (rule "polySimp_addAssoc" (formula "23") (term "3,0"))
            (rule "polySimp_addComm0" (formula "23") (term "0,3,0"))
            (rule "polySimp_pullOutFactor1b" (formula "23") (term "3,0"))
            (rule "add_literals" (formula "23") (term "1,1,3,0"))
            (rule "times_zero_1" (formula "23") (term "1,3,0"))
            (rule "add_zero_right" (formula "23") (term "3,0"))
            (rule "applyEq" (formula "27") (term "0") (ifseqformula "22"))
            (rule "eqSymm" (formula "27"))
            (rule "close" (formula "27") (ifseqformula "15"))
         )
      )
   )
   (branch "Exceptional Post (classify)"
       (builtin "One Step Simplification" (formula "14"))
       (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "12")))
      (rule "translateJavaSubInt" (formula "13") (term "3,0,1,0,1"))
      (rule "translateJavaMulInt" (formula "13") (term "1,1,0,0,1"))
      (rule "andLeft" (formula "13"))
      (rule "andLeft" (formula "13"))
      (rule "andLeft" (formula "15"))
      (rule "notLeft" (formula "13"))
      (rule "close" (formula "16") (ifseqformula "15"))
   )
   (branch "Pre (classify)"
       (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "12")) (ifInst ""  (formula "2")))
      (rule "ifElseUnfold" (formula "14") (term "1") (inst "#boolv=x_2"))
      (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_2"))
      (rule "assignment_read_attribute_this_final" (formula "14"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "ifElseSplit" (formula "14"))
      (branch "if x_2 true"
          (builtin "One Step Simplification" (formula "15"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "variableDeclarationAssign" (formula "15") (term "1"))
         (rule "variableDeclaration" (formula "15") (term "1") (newnames "bucket_index"))
         (rule "compound_subtraction_2" (formula "15") (term "1") (inst "#v0=x_2") (inst "#v1=x_3"))
         (rule "variableDeclarationAssign" (formula "15") (term "1"))
         (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_4"))
         (rule "assignment" (formula "15") (term "1"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "variableDeclarationAssign" (formula "15") (term "1"))
         (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_3"))
         (rule "compound_division_1" (formula "15") (term "1") (inst "#v=x_5"))
         (rule "variableDeclarationAssign" (formula "15") (term "1"))
         (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_5"))
         (rule "assignment_read_attribute_this_final" (formula "15"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "assignmentDivisionInt" (formula "15"))
         (branch "Case 1"
             (builtin "One Step Simplification" (formula "15"))
            (rule "translateJavaDivInt" (formula "15") (term "0,1,0"))
            (rule "assignmentSubtractionInt" (formula "15") (term "1"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "translateJavaSubInt" (formula "15") (term "0,1,0"))
            (rule "polySimp_elimSub" (formula "15") (term "0,1,0"))
            (rule "variableDeclarationAssign" (formula "15") (term "1"))
            (rule "variableDeclaration" (formula "15") (term "1") (newnames "equal_to_splitter"))
            (rule "compound_assignment_2" (formula "15") (term "1") (inst "#v=x_2"))
            (rule "variableDeclarationAssign" (formula "15") (term "1"))
            (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_6"))
            (rule "methodCallWithAssignmentUnfoldArguments" (formula "15") (term "1"))
            (rule "variableDeclarationAssign" (formula "15") (term "1"))
            (rule "variableDeclaration" (formula "15") (term "1") (newnames "var"))
            (rule "assignment" (formula "15") (term "1"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "variableDeclarationAssign" (formula "15") (term "1"))
            (rule "variableDeclaration" (formula "15") (term "1") (newnames "var_1"))
            (rule "eval_order_array_access4" (formula "15") (term "1") (inst "#v0=x_arr"))
            (rule "variableDeclarationAssign" (formula "15") (term "1"))
            (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_arr"))
            (rule "assignment_read_attribute_this_final" (formula "15"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "assignment_array2" (formula "15"))
            (branch "Normal Execution (x_arr != null)"
                (builtin "One Step Simplification" (formula "15"))
               (rule "onlyCreatedObjectsAreReferencedFinal" (formula "16") (term "0,1,2,1") (ifseqformula "3") (ifseqformula "4"))
               (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "15"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "17") (term "0,1,2,0") (ifseqformula "1"))
               (rule "applyEq" (formula "13") (term "0,0,1,3,0") (ifseqformula "1"))
               (rule "applyEq" (formula "13") (term "1,0") (ifseqformula "1"))
               (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "1"))
               (rule "applyEq" (formula "17") (term "1,1") (ifseqformula "1"))
               (rule "applyEq" (formula "17") (term "1,0") (ifseqformula "1"))
               (rule "applyEq" (formula "12") (term "0,0,1") (ifseqformula "1"))
               (rule "applyEq" (formula "17") (term "0,1,2,1") (ifseqformula "1"))
               (rule "applyEq" (formula "10") (term "1,0") (ifseqformula "1"))
               (rule "applyEq" (formula "14") (term "1") (ifseqformula "1"))
               (rule "onlyCreatedObjectsAreReferencedFinal" (formula "13") (term "1,2,0") (ifseqformula "4") (ifseqformula "5"))
               (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "17") (term "1") (inst "#v0=x_7"))
               (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_7"))
               (rule "variableDeclarationAssign" (formula "17") (term "1"))
               (rule "variableDeclaration" (formula "17") (term "1") (newnames "a"))
               (rule "assignment" (formula "17") (term "1"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "variableDeclarationAssign" (formula "17") (term "1"))
               (rule "variableDeclaration" (formula "17") (term "1") (newnames "b"))
               (rule "assignment" (formula "17") (term "1"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_cmp,savedHeapBefore_cmp"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "returnUnfold" (formula "17") (term "1") (inst "#v0=x_8"))
               (rule "variableDeclarationAssign" (formula "17") (term "1"))
               (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_8"))
               (rule "less_than_comparison_simple" (formula "17") (term "1"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "methodCallReturn" (formula "17") (term "1"))
               (rule "assignment" (formula "17") (term "1"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "methodCallEmpty" (formula "17") (term "1"))
               (rule "blockEmpty" (formula "17") (term "1"))
               (rule "assignment" (formula "17") (term "1"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "blockEmpty" (formula "17") (term "1"))
               (rule "compound_assignment_1_new" (formula "17") (term "1"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "compound_subtraction_2" (formula "17") (term "1") (inst "#v0=x_1") (inst "#v1=x_2"))
               (rule "variableDeclarationAssign" (formula "17") (term "1"))
               (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_1"))
               (rule "compound_addition_2" (formula "17") (term "1") (inst "#v0=x_3") (inst "#v1=x_4"))
               (rule "variableDeclarationAssign" (formula "17") (term "1"))
               (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_9"))
               (rule "assignmentMultiplicationInt" (formula "17") (term "1"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "translateJavaMulInt" (formula "17") (term "0,1,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "0,1,0"))
               (rule "variableDeclarationAssign" (formula "17") (term "1"))
               (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_10"))
               (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "17") (term "1") (inst "#v0=x_11"))
               (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_11"))
               (rule "variableDeclarationAssign" (formula "17") (term "1"))
               (rule "variableDeclaration" (formula "17") (term "1") (newnames "b_1"))
               (rule "assignment" (formula "17") (term "1"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_toInt,savedHeapBefore_toInt"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "returnUnfold" (formula "17") (term "1") (inst "#v0=x_12"))
               (rule "variableDeclarationAssign" (formula "17") (term "1"))
               (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_12"))
               (rule "condition_simple" (formula "17") (term "1"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "ifthenelse_negated" (formula "17") (term "0,1,0"))
               (rule "methodCallReturn" (formula "17") (term "1"))
               (rule "assignment" (formula "17") (term "1"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "methodCallEmpty" (formula "17") (term "1"))
               (rule "blockEmpty" (formula "17") (term "1"))
               (rule "assignment" (formula "17") (term "1"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "assignmentAdditionInt" (formula "17") (term "1"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "translateJavaAddInt" (formula "17") (term "0,1,0"))
               (rule "variableDeclarationAssign" (formula "17") (term "1"))
               (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_13"))
               (rule "assignment_read_attribute_this_final" (formula "17"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "assignmentSubtractionInt" (formula "17") (term "1"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "translateJavaSubInt" (formula "17") (term "0,1,0"))
               (rule "polySimp_elimSub" (formula "17") (term "0,1,0"))
               (rule "polySimp_addComm1" (formula "17") (term "0,1,0"))
               (rule "blockEmpty" (formula "17") (term "1"))
               (rule "methodCallReturn" (formula "17") (term "1"))
               (rule "assignment" (formula "17") (term "1"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "methodCallEmpty" (formula "17") (term "1"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "emptyModality" (formula "17") (term "1"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "notRight" (formula "17"))
               (rule "polySimp_homoEq" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0"))
               (rule "polySimp_rightDist" (formula "1") (term "0,1,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
               (rule "polySimp_elimOne" (formula "1") (term "1,0,1,0"))
               (rule "polySimp_mulAssoc" (formula "1") (term "0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "13"))
               (rule "polySimp_mulAssoc" (formula "13") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "13") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,1,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0,0,0,1,0"))
               (rule "polySimp_sepNegMonomial" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "13"))
               (rule "polySimp_mulLiterals" (formula "13") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
               (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
               (rule "inEqSimp_exactShadow1" (formula "13") (ifseqformula "12"))
               (rule "greater_literals" (formula "13") (term "0"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
               (rule "polySimp_rightDist" (formula "13") (term "0,0"))
               (rule "mul_literals" (formula "13") (term "0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "13") (term "0"))
               (rule "add_literals" (formula "13") (term "1,1,0"))
               (rule "polySimp_elimOne" (formula "13") (term "1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "13"))
               (rule "mul_literals" (formula "13") (term "1"))
               (rule "Class_invariant_axiom_for_de_wiesler_PartitionResult" (formula "17"))
               (rule "true_left" (formula "17"))
               (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "9"))
                (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "2")) (ifInst ""  (formula "3")))
               (rule "closeFalse" (formula "9"))
            )
            (branch "Null Reference (x_arr = null)"
                (builtin "One Step Simplification" (formula "1"))
               (rule "false_right" (formula "16"))
               (rule "inEqSimp_ltToLeq" (formula "12"))
               (rule "polySimp_mulAssoc" (formula "12") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "12") (term "0"))
               (rule "applyEq" (formula "13") (term "1,2,0") (ifseqformula "1"))
               (rule "applyEq" (formula "10") (term "1,2,0") (ifseqformula "1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "12"))
               (rule "polySimp_mulLiterals" (formula "12") (term "0"))
               (rule "inEqSimp_exactShadow1" (formula "12") (ifseqformula "11"))
               (rule "greater_literals" (formula "12") (term "0"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
               (rule "polySimp_rightDist" (formula "12") (term "0,0"))
               (rule "mul_literals" (formula "12") (term "0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "12") (term "0"))
               (rule "add_literals" (formula "12") (term "1,1,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "12"))
               (rule "mul_literals" (formula "12") (term "1"))
               (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "15"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "andLeft" (formula "15"))
               (rule "andLeft" (formula "15"))
               (rule "andLeft" (formula "15"))
               (rule "andLeft" (formula "15"))
               (rule "andLeft" (formula "17"))
               (rule "andLeft" (formula "15"))
               (rule "andLeft" (formula "15"))
               (rule "andLeft" (formula "17"))
               (rule "notLeft" (formula "16"))
               (rule "notLeft" (formula "15"))
               (rule "inEqSimp_commuteLeq" (formula "20"))
               (rule "inEqSimp_commuteLeq" (formula "19"))
               (rule "inEqSimp_commuteLeq" (formula "18"))
               (rule "inEqSimp_commuteLeq" (formula "15"))
               (rule "applyEq" (formula "20") (term "1") (ifseqformula "17"))
               (rule "translateJavaSubInt" (formula "21") (term "3,0"))
               (rule "polySimp_elimSub" (formula "21") (term "3,0"))
               (rule "mul_literals" (formula "21") (term "1,3,0"))
               (rule "polySimp_addComm0" (formula "21") (term "3,0"))
               (rule "applyEq" (formula "19") (term "1") (ifseqformula "17"))
               (rule "applyEq" (formula "18") (term "0") (ifseqformula "17"))
               (rule "applyEq" (formula "14") (term "0,1,3,0") (ifseqformula "17"))
               (rule "applyEq" (formula "11") (term "0") (ifseqformula "17"))
               (rule "applyEq" (formula "13") (term "0,0") (ifseqformula "17"))
               (rule "applyEq" (formula "21") (term "1,3,0") (ifseqformula "17"))
               (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "11"))
               (rule "mul_literals" (formula "18") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "18"))
               (rule "mul_literals" (formula "18") (term "1"))
               (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "18"))
               (rule "leq_literals" (formula "12") (term "0"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "true_left" (formula "12"))
               (rule "inEqSimp_exactShadow1" (formula "12") (ifseqformula "11"))
               (rule "greater_literals" (formula "12") (term "0"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
               (rule "polySimp_rightDist" (formula "12") (term "0,0"))
               (rule "mul_literals" (formula "12") (term "0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "12") (term "0"))
               (rule "add_literals" (formula "12") (term "1,1,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "12"))
               (rule "mul_literals" (formula "12") (term "1"))
               (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "18"))
               (rule "leq_literals" (formula "12") (term "0"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "true_left" (formula "12"))
               (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "8"))
                (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "1")) (ifInst ""  (formula "2")))
               (rule "closeFalse" (formula "8"))
            )
            (branch "Index Out of Bounds (x_arr != null, but bucket_index Out of Bounds!)"
               (rule "false_right" (formula "16"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "inEqSimp_ltToLeq" (formula "12"))
               (rule "polySimp_mulAssoc" (formula "12") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "12") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "1") (term "0,0,1"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "12"))
               (rule "polySimp_mulLiterals" (formula "12") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0,1"))
               (rule "polySimp_elimOne" (formula "1") (term "0,1"))
               (rule "inEqSimp_exactShadow1" (formula "12") (ifseqformula "11"))
               (rule "greater_literals" (formula "12") (term "0"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
               (rule "polySimp_rightDist" (formula "12") (term "0,0"))
               (rule "mul_literals" (formula "12") (term "0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "12") (term "0"))
               (rule "add_literals" (formula "12") (term "1,1,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "12"))
               (rule "mul_literals" (formula "12") (term "1"))
               (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "8"))
                (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "16")) (ifInst ""  (formula "2")) (ifInst ""  (formula "15")))
               (rule "translateJavaMulInt" (formula "8") (term "1,1,0,0,0"))
               (rule "translateJavaSubInt" (formula "8") (term "0,2,1,1"))
               (rule "translateJavaSubInt" (formula "8") (term "0,2,0,1"))
               (rule "andLeft" (formula "8"))
               (rule "andLeft" (formula "8"))
               (rule "andLeft" (formula "8"))
               (rule "andLeft" (formula "8"))
               (rule "andLeft" (formula "8"))
               (rule "andLeft" (formula "9"))
               (rule "notLeft" (formula "8"))
               (rule "eqSymm" (formula "13"))
               (rule "polySimp_elimSub" (formula "13") (term "0,2,0"))
               (rule "mul_literals" (formula "13") (term "1,0,2,0"))
               (rule "eqSymm" (formula "13"))
               (rule "polySimp_elimSub" (formula "13") (term "0,2,0"))
               (rule "mul_literals" (formula "13") (term "1,0,2,0"))
               (rule "eqSymm" (formula "13"))
               (rule "polySimp_mulComm0" (formula "10") (term "1"))
               (rule "eqSymm" (formula "10"))
               (rule "polySimp_addComm0" (formula "13") (term "0,2,0"))
               (rule "eqSymm" (formula "13"))
               (rule "polySimp_addComm0" (formula "13") (term "0,2,0"))
               (rule "eqSymm" (formula "13"))
               (rule "inEqSimp_commuteLeq" (formula "8"))
               (rule "applyEq" (formula "24") (term "1,2,0") (ifseqformula "11"))
               (rule "applyEq" (formula "24") (term "1,2,1") (ifseqformula "11"))
               (rule "applyEq" (formula "18") (term "0") (ifseqformula "10"))
               (rule "applyEq" (formula "24") (term "1") (ifseqformula "15"))
               (rule "newSym_eq" (formula "10") (inst "newSymDef=mul(int::final(self,
               de.wiesler.Classifier::$num_buckets),
    Z(0(#)))") (inst "l=l_0"))
               (rule "times_zero_1" (formula "10") (term "1,1"))
               (rule "add_zero_right" (formula "10") (term "1"))
               (rule "applyEq" (formula "17") (term "0") (ifseqformula "10"))
               (rule "inEqSimp_commuteLeq" (formula "17"))
               (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "10"))
               (rule "eqSymm" (formula "11"))
               (rule "applyEq" (formula "20") (term "0,1,3,0") (ifseqformula "10"))
               (rule "polySimp_addComm0" (formula "20") (term "3,0"))
               (rule "applyEq" (formula "14") (term "1,0,2,0") (ifseqformula "10"))
               (rule "eqSymm" (formula "14"))
               (rule "applyEq" (formula "13") (term "3,0") (ifseqformula "10"))
               (rule "applyEq" (formula "14") (term "1,0,2,0") (ifseqformula "10"))
               (rule "eqSymm" (formula "14"))
               (rule "applyEq" (formula "1") (term "0,0,1,1,0") (ifseqformula "11"))
               (rule "polySimp_addComm0" (formula "1") (term "1,0"))
               (rule "applyEq" (formula "19") (term "0") (ifseqformula "11"))
               (rule "inEqSimp_homoInEq1" (formula "19"))
               (rule "polySimp_mulLiterals" (formula "19") (term "1,0"))
               (rule "polySimp_addComm1" (formula "19") (term "0"))
               (rule "applyEq" (formula "1") (term "0,0,1") (ifseqformula "11"))
               (rule "inEqSimp_homoInEq1" (formula "1") (term "1"))
               (rule "polySimp_addComm1" (formula "1") (term "0,1"))
               (rule "applyEq" (formula "9") (term "0") (ifseqformula "11"))
               (rule "applyEq" (formula "8") (term "0") (ifseqformula "11"))
               (rule "inEqSimp_sepPosMonomial0" (formula "19"))
               (rule "polySimp_mulComm0" (formula "19") (term "1"))
               (rule "polySimp_rightDist" (formula "19") (term "1"))
               (rule "polySimp_mulLiterals" (formula "19") (term "1,1"))
               (rule "mul_literals" (formula "19") (term "0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,1"))
               (rule "polySimp_rightDist" (formula "1") (term "1,1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1"))
               (rule "mul_literals" (formula "1") (term "0,1,1"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1,1"))
               (rule "elimGcdGeq_antec" (formula "8") (inst "elimGcd=Z(2(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcdRightDiv=Z(1(#))"))
               (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0"))
               (rule "leq_literals" (formula "8") (term "0,0"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
               (rule "polySimp_addLiterals" (formula "8") (term "0,0,0,0"))
               (rule "add_zero_right" (formula "8") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
               (rule "add_literals" (formula "8") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "8") (term "1,0,0"))
               (rule "add_zero_right" (formula "8") (term "0,0"))
               (rule "leq_literals" (formula "8") (term "0"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "elimGcdLeq_antec" (formula "9") (inst "elimGcd=Z(2(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcdRightDiv=Z(4(6(#)))"))
               (rule "polySimp_mulLiterals" (formula "9") (term "1,0,1,0"))
               (rule "neg_literal" (formula "9") (term "0,0,0,0,0,1,0"))
               (rule "leq_literals" (formula "9") (term "0,0"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0,0,0"))
               (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0"))
               (rule "polySimp_addLiterals" (formula "9") (term "0,0,0,0"))
               (rule "add_literals" (formula "9") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0"))
               (rule "add_literals" (formula "9") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "9") (term "1,0,0"))
               (rule "add_zero_right" (formula "9") (term "0,0"))
               (rule "qeq_literals" (formula "9") (term "0"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "true_left" (formula "9"))
               (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "18"))
               (rule "polySimp_mulComm0" (formula "16") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "16") (term "0"))
               (rule "polySimp_addComm0" (formula "16") (term "0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "16") (term "0"))
               (rule "add_literals" (formula "16") (term "1,1,0"))
               (rule "polySimp_elimOne" (formula "16") (term "1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "16"))
               (rule "mul_literals" (formula "16") (term "1"))
               (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "18"))
               (rule "mul_literals" (formula "17") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "17") (term "0"))
               (rule "add_literals" (formula "17") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "17"))
               (rule "mul_literals" (formula "17") (term "1"))
               (rule "inEqSimp_subsumption6" (formula "17") (ifseqformula "8"))
               (rule "mul_literals" (formula "17") (term "1,1,0"))
               (rule "greater_literals" (formula "17") (term "0,0"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "leq_literals" (formula "17") (term "0"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "true_left" (formula "17"))
               (rule "Definition_axiom_for_isClassifiedAs_in_de_wiesler_Tree" (formula "19") (term "0"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "translateJavaSubInt" (formula "19") (term "0,2,0,1,0"))
               (rule "translateJavaSubInt" (formula "19") (term "1,0,1"))
               (rule "andLeft" (formula "19"))
               (rule "polySimp_elimSub" (formula "20") (term "1,0"))
               (rule "mul_literals" (formula "20") (term "1,1,0"))
               (rule "polySimp_elimSub" (formula "19") (term "0,2,0,1"))
               (rule "mul_literals" (formula "19") (term "1,0,2,0,1"))
               (rule "polySimp_addComm0" (formula "20") (term "1,0"))
               (rule "polySimp_addComm1" (formula "19") (term "0,2,0,1"))
               (rule "polySimp_addComm0" (formula "19") (term "0,0,2,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "19") (term "0"))
               (rule "add_zero_right" (formula "19") (term "0,0"))
               (rule "polySimp_rightDist" (formula "19") (term "1,0,0"))
               (rule "polySimp_mulAssoc" (formula "19") (term "0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "19") (term "0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "19") (term "0,1,0,0"))
               (rule "polySimp_elimOne" (formula "19") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "19") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "20") (term "0"))
               (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0"))
               (rule "mul_literals" (formula "20") (term "0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "20") (term "0,0,0"))
               (rule "add_literals" (formula "20") (term "0,0,0,0"))
               (rule "polySimp_addComm1" (formula "20") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "20") (term "0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "19") (term "1"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "20") (term "1"))
               (rule "applyEq" (formula "20") (term "0,1,0,0") (ifseqformula "9"))
               (rule "polySimp_addComm1" (formula "20") (term "0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "20") (term "0,0,0"))
               (rule "add_literals" (formula "20") (term "1,1,0,0,0"))
               (rule "applyEq" (formula "19") (term "1,1,0,1") (ifseqformula "11"))
               (rule "applyEq" (formula "20") (term "1,0,1") (ifseqformula "11"))
               (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0"))
               (rule "polySimp_mulLiterals" (formula "19") (term "0,0"))
               (rule "polySimp_elimOne" (formula "19") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0"))
               (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
               (rule "polySimp_rightDist" (formula "20") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0"))
               (rule "mul_literals" (formula "20") (term "0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,1"))
               (rule "polySimp_rightDist" (formula "19") (term "1,1"))
               (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1"))
               (rule "mul_literals" (formula "19") (term "0,1,1"))
               (rule "polySimp_elimOne" (formula "19") (term "1,1,1"))
               (rule "commute_or" (formula "1"))
               (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "12") (term "0") (inst "i=i") (inst "j=j"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,1,0"))
               (rule "mul_literals" (formula "12") (term "0,1,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
               (rule "nnf_imp2or" (formula "12") (term "0"))
               (rule "nnf_notAnd" (formula "12") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
               (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
               (rule "mul_literals" (formula "12") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
               (rule "nnf_imp2or" (formula "12") (term "0,1,0"))
               (rule "nnf_notAnd" (formula "12") (term "0,0,1,0"))
               (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,1,0"))
               (rule "mul_literals" (formula "12") (term "0,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,1,0"))
               (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,1,0"))
               (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,1,0"))
               (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,1,0"))
               (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,1,0"))
               (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "21"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "translateJavaSubInt" (formula "21") (term "3,0,1"))
               (rule "andLeft" (formula "21"))
               (rule "andLeft" (formula "21"))
               (rule "andLeft" (formula "21"))
               (rule "andLeft" (formula "22"))
               (rule "andLeft" (formula "21"))
               (rule "andLeft" (formula "21"))
               (rule "andLeft" (formula "21"))
               (rule "andLeft" (formula "23"))
               (rule "notLeft" (formula "22"))
               (rule "notLeft" (formula "21"))
               (rule "polySimp_elimSub" (formula "27") (term "3,0"))
               (rule "mul_literals" (formula "27") (term "1,3,0"))
               (rule "polySimp_addComm0" (formula "27") (term "3,0"))
               (rule "inEqSimp_commuteLeq" (formula "26"))
               (rule "inEqSimp_commuteLeq" (formula "25"))
               (rule "inEqSimp_commuteLeq" (formula "24"))
               (rule "inEqSimp_commuteLeq" (formula "21"))
               (rule "applyEq" (formula "28") (term "0") (ifseqformula "11"))
               (rule "applyEq" (formula "27") (term "1,3,0") (ifseqformula "9"))
               (rule "applyEq" (formula "9") (term "0") (ifseqformula "23"))
               (rule "applyEq" (formula "26") (term "0,0") (ifseqformula "11"))
               (rule "inEqSimp_commuteGeq" (formula "26"))
               (rule "applyEq" (formula "25") (term "1") (ifseqformula "23"))
               (rule "applyEq" (formula "24") (term "0") (ifseqformula "23"))
               (rule "applyEq" (formula "27") (term "1,0") (ifseqformula "11"))
               (rule "applyEq" (formula "25") (term "1") (ifseqformula "9"))
               (rule "applyEq" (formula "24") (term "0") (ifseqformula "9"))
               (rule "applyEq" (formula "26") (term "0") (ifseqformula "23"))
               (rule "applyEq" (formula "26") (term "0") (ifseqformula "9"))
               (rule "inEqSimp_commuteLeq" (formula "26"))
               (rule "applyEq" (formula "23") (term "1") (ifseqformula "9"))
               (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "24"))
               (rule "leq_literals" (formula "8") (term "0"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "true_left" (formula "8"))
               (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "26") (term "0"))
               (rule "replace_known_left" (formula "26") (term "1,0") (ifseqformula "4"))
                (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "30")) (ifInst ""  (formula "27")))
               (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "27") (term "0") (inst "i=i") (inst "j=j"))
                (builtin "One Step Simplification" (formula "27"))
               (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,1,0"))
               (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,1,0"))
               (rule "add_literals" (formula "27") (term "0,0,0,1,0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "27") (term "1,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,1,0"))
               (rule "mul_literals" (formula "27") (term "0,1,1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0"))
               (rule "mul_literals" (formula "27") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0"))
               (rule "nnf_imp2or" (formula "27") (term "0"))
               (rule "nnf_notAnd" (formula "27") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
               (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "27") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
               (rule "mul_literals" (formula "27") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0"))
               (rule "mul_literals" (formula "27") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0"))
               (rule "nnf_imp2or" (formula "27") (term "0,1,0"))
               (rule "nnf_notAnd" (formula "27") (term "0,0,1,0"))
               (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,1,0"))
               (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,1,0"))
               (rule "add_literals" (formula "27") (term "0,0,0,1,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,1,0"))
               (rule "mul_literals" (formula "27") (term "0,1,1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,1,0"))
               (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0,1,0"))
               (rule "mul_literals" (formula "27") (term "0,1,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,0,1,0"))
               (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "26") (term "0") (inst "i=i"))
                (builtin "One Step Simplification" (formula "26"))
               (rule "translateJavaAddInt" (formula "26") (term "0,2,1,1,0"))
               (rule "translateJavaSubInt" (formula "26") (term "1,1,0,0"))
               (rule "polySimp_elimSub" (formula "26") (term "1,1,0,0"))
               (rule "mul_literals" (formula "26") (term "1,1,1,0,0"))
               (rule "polySimp_addComm0" (formula "26") (term "0,2,1,1,0"))
               (rule "polySimp_addComm1" (formula "26") (term "1,1,0,0"))
               (rule "add_literals" (formula "26") (term "0,1,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "26") (term "1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
               (rule "mul_literals" (formula "26") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
               (rule "nnf_imp2or" (formula "26") (term "0"))
               (rule "nnf_notAnd" (formula "26") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "26") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
               (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
               (rule "mul_literals" (formula "26") (term "1,0,0,0"))
               (rule "commute_or" (formula "11") (term "0,0,1,0"))
               (rule "commute_or" (formula "27") (term "0,0,1,0"))
               (rule "jdiv_axiom" (formula "1") (term "0,0,1,1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0,0,2,1"))
               (rule "eqSymm" (formula "1"))
               (rule "inEqSimp_subsumption6" (formula "1") (term "0,0") (ifseqformula "24"))
               (rule "mul_literals" (formula "1") (term "1,1,0,0,0"))
               (rule "greater_literals" (formula "1") (term "0,0,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "leq_literals" (formula "1") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "eqSymm" (formula "1"))
               (rule "applyEqRigid" (formula "2") (term "1,1,0") (ifseqformula "1"))
               (rule "applyEqRigid" (formula "2") (term "0,0,1,1") (ifseqformula "1"))
               (rule "polyDiv_pullOut" (formula "2") (term "0,0,1,1") (inst "polyDivCoeff=l_0"))
               (rule "equal_literals" (formula "2") (term "0,0,0,1,1"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0,0,1,1"))
               (rule "polySimp_pullOutFactor0" (formula "2") (term "0,0,0,0,1,1"))
               (rule "add_literals" (formula "2") (term "1,0,0,0,0,1,1"))
               (rule "times_zero_1" (formula "2") (term "0,0,0,0,1,1"))
               (rule "div_literals" (formula "2") (term "0,0,0,1,1"))
               (rule "add_zero_left" (formula "2") (term "0,0,1,1"))
               (rule "polyDiv_pullOut" (formula "1") (term "1") (inst "polyDivCoeff=l_0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,2,1"))
               (rule "equal_literals" (formula "1") (term "0,1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "polySimp_pullOutFactor0" (formula "1") (term "0,0,1"))
               (rule "add_literals" (formula "1") (term "1,0,0,1"))
               (rule "times_zero_1" (formula "1") (term "0,0,1"))
               (rule "div_literals" (formula "1") (term "0,1"))
               (rule "add_zero_left" (formula "1") (term "1"))
               (rule "polyDiv_pullOut" (formula "2") (term "1,1,0") (inst "polyDivCoeff=l_0"))
               (rule "equal_literals" (formula "2") (term "0,1,1,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,1,1,0"))
               (rule "polySimp_pullOutFactor0" (formula "2") (term "0,0,1,1,0"))
               (rule "add_literals" (formula "2") (term "1,0,0,1,1,0"))
               (rule "times_zero_1" (formula "2") (term "0,0,1,1,0"))
               (rule "div_literals" (formula "2") (term "0,1,1,0"))
               (rule "add_zero_left" (formula "2") (term "1,1,0"))
               (rule "inEqSimp_contradInEq1" (formula "2") (term "0") (ifseqformula "16"))
               (rule "inEqSimp_homoInEq1" (formula "2") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0"))
               (rule "mul_literals" (formula "2") (term "0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "2") (term "0,0,0"))
               (rule "polySimp_addComm0" (formula "2") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,0"))
               (rule "add_literals" (formula "2") (term "1,1,0,0,0"))
               (rule "times_zero_1" (formula "2") (term "1,0,0,0"))
               (rule "add_zero_right" (formula "2") (term "0,0,0"))
               (rule "leq_literals" (formula "2") (term "0,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "inEqSimp_exactShadow3" (formula "26") (ifseqformula "2"))
               (rule "polySimp_mulComm0" (formula "26") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "26") (term "0"))
               (rule "polySimp_pullOutFactor0" (formula "26") (term "0,0"))
               (rule "add_literals" (formula "26") (term "1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "26"))
               (rule "polySimp_mulLiterals" (formula "26") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "20") (term "0") (ifseqformula "26"))
               (rule "inEqSimp_homoInEq1" (formula "20") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0"))
               (rule "mul_literals" (formula "20") (term "0,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "20") (term "0,0,0"))
               (rule "polySimp_addComm0" (formula "20") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "20") (term "0,0,0"))
               (rule "add_literals" (formula "20") (term "1,1,0,0,0"))
               (rule "times_zero_1" (formula "20") (term "1,0,0,0"))
               (rule "add_zero_right" (formula "20") (term "0,0,0"))
               (rule "leq_literals" (formula "20") (term "0,0"))
                (builtin "One Step Simplification" (formula "20"))
               (rule "true_left" (formula "20"))
               (rule "inEqSimp_contradInEq1" (formula "18") (ifseqformula "25"))
               (rule "andLeft" (formula "18"))
               (rule "inEqSimp_homoInEq1" (formula "18"))
               (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
               (rule "polySimp_rightDist" (formula "18") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0"))
               (rule "mul_literals" (formula "18") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "18") (term "0"))
               (rule "polySimp_addComm0" (formula "18") (term "0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "18") (term "0"))
               (rule "add_literals" (formula "18") (term "1,1,0"))
               (rule "times_zero_1" (formula "18") (term "1,0"))
               (rule "add_zero_right" (formula "18") (term "0"))
               (rule "leq_literals" (formula "18"))
               (rule "closeFalse" (formula "18"))
            )
         )
         (branch "Case 2"
             (builtin "One Step Simplification" (formula "15"))
            (rule "equal_literals" (formula "15") (term "0"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "closeTrue" (formula "15"))
         )
      )
      (branch "if x_2 false"
          (builtin "One Step Simplification" (formula "15"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "compound_subtraction_2" (formula "15") (term "1") (inst "#v0=x_1") (inst "#v1=x_2"))
         (rule "variableDeclarationAssign" (formula "15") (term "1"))
         (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_1"))
         (rule "assignment" (formula "15") (term "1"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "variableDeclarationAssign" (formula "15") (term "1"))
         (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_3"))
         (rule "assignment_read_attribute_this_final" (formula "15"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "assignmentSubtractionInt" (formula "15") (term "1"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "translateJavaSubInt" (formula "15") (term "0,1,0"))
         (rule "polySimp_elimSub" (formula "15") (term "0,1,0"))
         (rule "blockEmpty" (formula "15") (term "1"))
         (rule "methodCallReturn" (formula "15") (term "1"))
         (rule "assignment" (formula "15") (term "1"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "methodCallEmpty" (formula "15") (term "1"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "emptyModality" (formula "15") (term "1"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "notRight" (formula "15"))
         (rule "polySimp_homoEq" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "11"))
         (rule "polySimp_mulAssoc" (formula "11") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "11") (term "0"))
         (rule "polySimp_sepPosMonomial" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1"))
         (rule "polySimp_rightDist" (formula "1") (term "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1"))
         (rule "polySimp_mulComm0" (formula "1") (term "0,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "11"))
         (rule "polySimp_mulLiterals" (formula "11") (term "0"))
         (rule "inEqSimp_exactShadow1" (formula "11") (ifseqformula "10"))
         (rule "greater_literals" (formula "11") (term "0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
         (rule "polySimp_rightDist" (formula "11") (term "0,0"))
         (rule "mul_literals" (formula "11") (term "0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "11") (term "0"))
         (rule "add_literals" (formula "11") (term "1,1,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "11"))
         (rule "mul_literals" (formula "11") (term "1"))
         (rule "Contract_axiom_for_isClassifiedAs_in_Tree" (formula "13") (term "0"))
         (rule "replace_known_left" (formula "13") (term "1,0,0,0,0") (ifseqformula "15"))
          (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "3")) (ifInst ""  (formula "17")) (ifInst ""  (formula "15")))
         (rule "true_left" (formula "13"))
         (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "14"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "andLeft" (formula "14"))
         (rule "andLeft" (formula "14"))
         (rule "andLeft" (formula "14"))
         (rule "andLeft" (formula "15"))
         (rule "andLeft" (formula "14"))
         (rule "andLeft" (formula "14"))
         (rule "andLeft" (formula "14"))
         (rule "andLeft" (formula "16"))
         (rule "notLeft" (formula "14"))
         (rule "notLeft" (formula "14"))
         (rule "inEqSimp_commuteLeq" (formula "19"))
         (rule "inEqSimp_commuteLeq" (formula "18"))
         (rule "inEqSimp_commuteLeq" (formula "17"))
         (rule "inEqSimp_commuteLeq" (formula "14"))
         (rule "applyEq" (formula "19") (term "1") (ifseqformula "16"))
         (rule "applyEq" (formula "18") (term "1") (ifseqformula "16"))
         (rule "applyEq" (formula "13") (term "0,1,3,0") (ifseqformula "16"))
         (rule "applyEq" (formula "10") (term "0") (ifseqformula "16"))
         (rule "applyEq" (formula "17") (term "0") (ifseqformula "16"))
         (rule "translateJavaSubInt" (formula "20") (term "3,0"))
         (rule "polySimp_elimSub" (formula "20") (term "3,0"))
         (rule "mul_literals" (formula "20") (term "1,3,0"))
         (rule "polySimp_addComm0" (formula "20") (term "3,0"))
         (rule "applyEq" (formula "20") (term "1,3,0") (ifseqformula "16"))
         (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "16"))
         (rule "inEqSimp_exactShadow1" (formula "12") (ifseqformula "10"))
         (rule "greater_literals" (formula "12") (term "0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
         (rule "polySimp_rightDist" (formula "12") (term "0,0"))
         (rule "mul_literals" (formula "12") (term "0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "12") (term "0"))
         (rule "add_literals" (formula "12") (term "1,1,0"))
         (rule "polySimp_elimOne" (formula "12") (term "1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "12"))
         (rule "mul_literals" (formula "12") (term "1"))
         (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "10"))
         (rule "mul_literals" (formula "17") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "17"))
         (rule "mul_literals" (formula "17") (term "1"))
         (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "17"))
         (rule "leq_literals" (formula "11") (term "0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "true_left" (formula "11"))
         (rule "Contract_axiom_for_isClassifiedAs_in_Tree" (formula "12") (term "0"))
         (rule "replace_known_left" (formula "12") (term "1,0,0,0") (ifseqformula "3"))
          (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "25")))
         (rule "true_left" (formula "12"))
         (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "7"))
          (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "23")))
         (rule "translateJavaSubInt" (formula "7") (term "0,2,1,1,0"))
         (rule "translateJavaSubInt" (formula "7") (term "0,2,0,1,0"))
         (rule "andLeft" (formula "7"))
         (rule "andLeft" (formula "7"))
         (rule "andLeft" (formula "7"))
         (rule "andLeft" (formula "7"))
         (rule "andLeft" (formula "7"))
         (rule "andLeft" (formula "7"))
         (rule "andLeft" (formula "7"))
         (rule "andLeft" (formula "9"))
         (rule "notLeft" (formula "7"))
         (rule "notLeft" (formula "7"))
         (rule "eqSymm" (formula "12"))
         (rule "eqSymm" (formula "9"))
         (rule "polySimp_elimSub" (formula "12") (term "0,2,0"))
         (rule "mul_literals" (formula "12") (term "1,0,2,0"))
         (rule "eqSymm" (formula "12"))
         (rule "polySimp_elimSub" (formula "12") (term "0,2,0"))
         (rule "mul_literals" (formula "12") (term "1,0,2,0"))
         (rule "eqSymm" (formula "12"))
         (rule "polySimp_addComm0" (formula "12") (term "0,2,0"))
         (rule "eqSymm" (formula "12"))
         (rule "polySimp_addComm0" (formula "12") (term "0,2,0"))
         (rule "eqSymm" (formula "12"))
         (rule "inEqSimp_commuteLeq" (formula "7"))
         (rule "applyEq" (formula "11") (term "3,0") (ifseqformula "9"))
         (rule "applyEq" (formula "7") (term "0") (ifseqformula "1"))
         (rule "inEqSimp_homoInEq1" (formula "7"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
         (rule "polySimp_rightDist" (formula "7") (term "1,0"))
         (rule "polySimp_mulAssoc" (formula "7") (term "0,1,0"))
         (rule "polySimp_mulComm0" (formula "7") (term "0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "0,1,0"))
         (rule "polySimp_elimOne" (formula "7") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "7") (term "0"))
         (rule "applyEq" (formula "12") (term "1,0,2,0") (ifseqformula "9"))
         (rule "eqSymm" (formula "12"))
         (rule "applyEq" (formula "26") (term "1,0") (ifseqformula "10"))
         (rule "applyEq" (formula "25") (term "0,0") (ifseqformula "10"))
         (rule "inEqSimp_commuteGeq" (formula "25"))
         (rule "applyEq" (formula "33") (term "1,2,0") (ifseqformula "10"))
         (rule "applyEq" (formula "21") (term "0") (ifseqformula "9"))
         (rule "eqSymm" (formula "21"))
         (rule "applyEq" (formula "33") (term "1,2,1") (ifseqformula "10"))
         (rule "applyEq" (formula "8") (term "0") (ifseqformula "1"))
         (rule "inEqSimp_homoInEq0" (formula "8"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
         (rule "polySimp_rightDist" (formula "8") (term "1,0"))
         (rule "polySimp_mulAssoc" (formula "8") (term "0,1,0"))
         (rule "polySimp_mulComm0" (formula "8") (term "0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "8") (term "0,1,0"))
         (rule "polySimp_elimOne" (formula "8") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "8") (term "0"))
         (rule "applyEq" (formula "30") (term "0") (ifseqformula "10"))
         (rule "applyEq" (formula "11") (term "3,0") (ifseqformula "1"))
         (rule "applyEq" (formula "9") (term "1") (ifseqformula "1"))
         (rule "applyEq" (formula "23") (term "0") (ifseqformula "21"))
         (rule "applyEq" (formula "18") (term "0,1,3,0") (ifseqformula "21"))
         (rule "applyEq" (formula "16") (term "0") (ifseqformula "21"))
         (rule "applyEq" (formula "24") (term "1") (ifseqformula "21"))
         (rule "applyEq" (formula "26") (term "1,3,0") (ifseqformula "21"))
         (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "21"))
         (rule "applyEq" (formula "25") (term "0") (ifseqformula "21"))
         (rule "inEqSimp_commuteLeq" (formula "25"))
         (rule "applyEq" (formula "12") (term "1,0,2,0") (ifseqformula "9"))
         (rule "eqSymm" (formula "12"))
         (rule "polySimp_addAssoc" (formula "12") (term "0,2,1"))
         (rule "applyEq" (formula "32") (term "1") (ifseqformula "15"))
         (rule "applyEq" (formula "21") (term "1") (ifseqformula "1"))
         (rule "applyEq" (formula "24") (term "1") (ifseqformula "1"))
         (rule "applyEq" (formula "26") (term "1,3,0") (ifseqformula "1"))
         (rule "polySimp_addAssoc" (formula "26") (term "3,0"))
         (rule "applyEq" (formula "18") (term "0,1,3,0") (ifseqformula "1"))
         (rule "polySimp_mulComm0" (formula "18") (term "1,3,0"))
         (rule "polySimp_rightDist" (formula "18") (term "1,3,0"))
         (rule "polySimp_mulAssoc" (formula "18") (term "0,1,3,0"))
         (rule "polySimp_mulComm0" (formula "18") (term "0,0,1,3,0"))
         (rule "polySimp_mulLiterals" (formula "18") (term "0,1,3,0"))
         (rule "polySimp_elimOne" (formula "18") (term "0,1,3,0"))
         (rule "polySimp_addAssoc" (formula "18") (term "3,0"))
         (rule "polySimp_addComm0" (formula "18") (term "0,3,0"))
         (rule "polySimp_pullOutFactor1b" (formula "18") (term "3,0"))
         (rule "add_literals" (formula "18") (term "1,1,3,0"))
         (rule "times_zero_1" (formula "18") (term "1,3,0"))
         (rule "add_zero_right" (formula "18") (term "3,0"))
         (rule "applyEq" (formula "16") (term "0") (ifseqformula "1"))
         (rule "inEqSimp_homoInEq0" (formula "16"))
         (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
         (rule "polySimp_rightDist" (formula "16") (term "1,0"))
         (rule "polySimp_mulAssoc" (formula "16") (term "0,1,0"))
         (rule "polySimp_mulComm0" (formula "16") (term "0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0"))
         (rule "polySimp_elimOne" (formula "16") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "16") (term "0"))
         (rule "polySimp_addComm0" (formula "16") (term "0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "16") (term "0"))
         (rule "add_literals" (formula "16") (term "1,1,0"))
         (rule "times_zero_1" (formula "16") (term "1,0"))
         (rule "add_zero_right" (formula "16") (term "0"))
         (rule "applyEq" (formula "12") (term "1,0,2,0") (ifseqformula "1"))
         (rule "eqSymm" (formula "12"))
         (rule "polySimp_addAssoc" (formula "12") (term "0,2,1"))
         (rule "eqSymm" (formula "12"))
         (rule "applyEq" (formula "25") (term "1") (ifseqformula "1"))
         (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "1"))
         (rule "polySimp_mulComm0" (formula "17") (term "0"))
         (rule "polySimp_rightDist" (formula "17") (term "0"))
         (rule "polySimp_mulComm0" (formula "17") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "17") (term "0,0"))
         (rule "inEqSimp_homoInEq1" (formula "17"))
         (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
         (rule "polySimp_rightDist" (formula "17") (term "1,0"))
         (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0"))
         (rule "polySimp_mulComm0" (formula "17") (term "0,1,0"))
         (rule "polySimp_mulLiterals" (formula "17") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "17") (term "0"))
         (rule "polySimp_addComm1" (formula "17") (term "0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "17") (term "0"))
         (rule "add_literals" (formula "17") (term "1,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "7"))
         (rule "polySimp_mulLiterals" (formula "7") (term "0"))
         (rule "polySimp_elimOne" (formula "7") (term "0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "8"))
         (rule "polySimp_mulLiterals" (formula "8") (term "0"))
         (rule "polySimp_elimOne" (formula "8") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "17"))
         (rule "polySimp_mulLiterals" (formula "17") (term "0"))
         (rule "polySimp_elimOne" (formula "17") (term "0"))
         (rule "applyEq" (formula "23") (term "0") (ifseqformula "1"))
         (rule "inEqSimp_homoInEq1" (formula "23"))
         (rule "polySimp_mulComm0" (formula "23") (term "1,0"))
         (rule "polySimp_rightDist" (formula "23") (term "1,0"))
         (rule "polySimp_mulAssoc" (formula "23") (term "0,1,0"))
         (rule "polySimp_mulComm0" (formula "23") (term "0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "23") (term "0,1,0"))
         (rule "polySimp_elimOne" (formula "23") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "23") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "23"))
         (rule "polySimp_mulLiterals" (formula "23") (term "0"))
         (rule "polySimp_elimOne" (formula "23") (term "0"))
         (rule "inEqSimp_exactShadow3" (formula "22") (ifseqformula "8"))
         (rule "mul_literals" (formula "22") (term "0,0"))
         (rule "polySimp_addAssoc" (formula "22") (term "0"))
         (rule "add_literals" (formula "22") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "22"))
         (rule "mul_literals" (formula "22") (term "1"))
         (rule "inEqSimp_subsumption1" (formula "22") (ifseqformula "16"))
         (rule "leq_literals" (formula "22") (term "0"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "true_left" (formula "22"))
         (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "8"))
         (rule "polySimp_rightDist" (formula "17") (term "0,0"))
         (rule "mul_literals" (formula "17") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "17") (term "1,0,0"))
         (rule "polySimp_addAssoc" (formula "17") (term "0"))
         (rule "polySimp_addComm1" (formula "17") (term "0,0"))
         (rule "add_literals" (formula "17") (term "0,0,0"))
         (rule "polySimp_pullOutFactor2b" (formula "17") (term "0"))
         (rule "add_literals" (formula "17") (term "1,1,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "17"))
         (rule "polySimp_mulLiterals" (formula "17") (term "0"))
         (rule "polySimp_elimOne" (formula "17") (term "0"))
         (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "13"))
          (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "29")) (ifInst ""  (formula "21")))
         (rule "translateJavaSubInt" (formula "13") (term "3,0,1"))
         (rule "andLeft" (formula "13"))
         (rule "andLeft" (formula "13"))
         (rule "andLeft" (formula "13"))
         (rule "andLeft" (formula "13"))
         (rule "andLeft" (formula "15"))
         (rule "andLeft" (formula "13"))
         (rule "notLeft" (formula "13"))
         (rule "polySimp_elimSub" (formula "18") (term "3,0"))
         (rule "mul_literals" (formula "18") (term "1,3,0"))
         (rule "polySimp_addComm0" (formula "18") (term "3,0"))
         (rule "inEqSimp_commuteLeq" (formula "17"))
         (rule "inEqSimp_commuteLeq" (formula "16"))
         (rule "inEqSimp_commuteLeq" (formula "15"))
         (rule "inEqSimp_commuteLeq" (formula "13"))
         (rule "applyEq" (formula "14") (term "0") (ifseqformula "13"))
         (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "10"))
         (rule "inEqSimp_commuteGeq" (formula "16"))
         (rule "applyEq" (formula "9") (term "0") (ifseqformula "13"))
         (rule "applyEq" (formula "14") (term "1") (ifseqformula "12"))
         (rule "applyEq" (formula "30") (term "0") (ifseqformula "9"))
         (rule "applyEq" (formula "16") (term "1,0") (ifseqformula "9"))
         (rule "applyEq" (formula "16") (term "1,3,0") (ifseqformula "12"))
         (rule "applyEq" (formula "13") (term "0") (ifseqformula "25"))
         (rule "inEqSimp_homoInEq1" (formula "13"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
         (rule "polySimp_rightDist" (formula "13") (term "1,0"))
         (rule "polySimp_mulAssoc" (formula "13") (term "0,1,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0"))
         (rule "polySimp_elimOne" (formula "13") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "13") (term "0"))
         (rule "applyEq" (formula "12") (term "1") (ifseqformula "25"))
         (rule "applyEq" (formula "14") (term "1") (ifseqformula "25"))
         (rule "applyEq" (formula "14") (term "0") (ifseqformula "12"))
         (rule "inEqSimp_commuteLeq" (formula "14"))
         (rule "applyEq" (formula "14") (term "1,3,0") (ifseqformula "23"))
         (rule "polySimp_addAssoc" (formula "14") (term "3,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "13"))
         (rule "polySimp_mulLiterals" (formula "13") (term "0"))
         (rule "polySimp_elimOne" (formula "13") (term "0"))
         (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "10") (term "0") (inst "i=i") (inst "j=j"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,1,0"))
         (rule "polySimp_mulAssoc" (formula "10") (term "0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "10") (term "0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
         (rule "polySimp_mulAssoc" (formula "10") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_elimOne" (formula "10") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "10") (term "0,1,1,0,0,1,0"))
         (rule "mul_literals" (formula "10") (term "0,0,1,1,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
         (rule "polySimp_rightDist" (formula "10") (term "0,1,1,0,0"))
         (rule "mul_literals" (formula "10") (term "0,0,1,1,0,0"))
         (rule "nnf_imp2or" (formula "10") (term "0"))
         (rule "nnf_notAnd" (formula "10") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
         (rule "polySimp_rightDist" (formula "10") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0,0,1,0,0"))
         (rule "mul_literals" (formula "10") (term "0,0,1,0,0,1,0,0"))
         (rule "polySimp_elimOne" (formula "10") (term "1,0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,1,0,0"))
         (rule "add_literals" (formula "10") (term "0,0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "10") (term "0,0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "0,1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
         (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "10") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
         (rule "mul_literals" (formula "10") (term "1,0,0,0"))
         (rule "nnf_imp2or" (formula "10") (term "0,1,0"))
         (rule "nnf_notAnd" (formula "10") (term "0,0,1,0"))
         (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,1,0"))
         (rule "mul_literals" (formula "10") (term "0,1,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,1,0"))
         (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "10") (term "0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0,0,1,0,0,1,0"))
         (rule "mul_literals" (formula "10") (term "0,0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "10") (term "1,0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,1,0,0,1,0"))
         (rule "add_literals" (formula "10") (term "0,0,0,0,1,0,0,1,0"))
         (rule "add_zero_left" (formula "10") (term "0,0,0,1,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "0,1,1,0,0,1,0"))
         (rule "Definition_axiom_for_isClassifiedAs_in_de_wiesler_Tree" (formula "18") (term "0"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "translateJavaSubInt" (formula "18") (term "1,0,1"))
         (rule "translateJavaSubInt" (formula "18") (term "0,2,0,1,0"))
         (rule "andLeft" (formula "18"))
         (rule "polySimp_elimSub" (formula "19") (term "1,0"))
         (rule "mul_literals" (formula "19") (term "1,1,0"))
         (rule "polySimp_elimSub" (formula "18") (term "0,2,0,1"))
         (rule "mul_literals" (formula "18") (term "1,0,2,0,1"))
         (rule "polySimp_addComm0" (formula "19") (term "1,0"))
         (rule "polySimp_addComm0" (formula "18") (term "0,2,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "18") (term "0"))
         (rule "add_zero_right" (formula "18") (term "0,0"))
         (rule "polySimp_mulComm0" (formula "18") (term "1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "19") (term "0"))
         (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0"))
         (rule "mul_literals" (formula "19") (term "0,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "19") (term "0,0,0"))
         (rule "add_literals" (formula "19") (term "0,0,0,0"))
         (rule "polySimp_addComm1" (formula "19") (term "0,0"))
         (rule "inEqSimp_ltToLeq" (formula "18") (term "1"))
         (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "19") (term "1"))
         (rule "applyEq" (formula "19") (term "0,1,0,0") (ifseqformula "12"))
         (rule "polySimp_mulComm0" (formula "19") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "19") (term "1,0,0"))
         (rule "polySimp_mulAssoc" (formula "19") (term "0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "19") (term "0,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "19") (term "0,1,0,0"))
         (rule "polySimp_elimOne" (formula "19") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "19") (term "0,0"))
         (rule "polySimp_pullOutFactor3b" (formula "19") (term "0,0,0"))
         (rule "applyEq" (formula "18") (term "1,1,0,1") (ifseqformula "9"))
         (rule "applyEq" (formula "19") (term "1,0,1") (ifseqformula "9"))
         (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0"))
         (rule "polySimp_mulLiterals" (formula "18") (term "0,0"))
         (rule "polySimp_elimOne" (formula "18") (term "0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0"))
         (rule "polySimp_mulLiterals" (formula "19") (term "0,0"))
         (rule "polySimp_elimOne" (formula "19") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1"))
         (rule "polySimp_mulComm0" (formula "18") (term "1,1"))
         (rule "polySimp_rightDist" (formula "18") (term "1,1"))
         (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1"))
         (rule "mul_literals" (formula "18") (term "0,1,1"))
         (rule "polySimp_elimOne" (formula "18") (term "1,1,1"))
         (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "26") (term "0"))
         (rule "replace_known_left" (formula "26") (term "1,0") (ifseqformula "3"))
          (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "28")) (ifInst ""  (formula "27")))
         (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "27") (term "0") (inst "j=j") (inst "i=i"))
          (builtin "One Step Simplification" (formula "27"))
         (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "27") (term "0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1,0,0,1,0,0,1,0"))
         (rule "mul_literals" (formula "27") (term "0,0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "27") (term "1,0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "27") (term "0,0,0,1,0,0,1,0"))
         (rule "add_literals" (formula "27") (term "0,0,0,0,1,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
         (rule "polySimp_rightDist" (formula "27") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1,0,0,1,0,0"))
         (rule "mul_literals" (formula "27") (term "0,0,1,0,0,1,0,0"))
         (rule "polySimp_elimOne" (formula "27") (term "1,0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "27") (term "0,0,0,1,0,0"))
         (rule "add_literals" (formula "27") (term "0,0,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "27") (term "1,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "27") (term "0,1,1,0,0,1,0"))
         (rule "mul_literals" (formula "27") (term "0,0,1,1,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0"))
         (rule "polySimp_rightDist" (formula "27") (term "0,1,1,0,0"))
         (rule "mul_literals" (formula "27") (term "0,0,1,1,0,0"))
         (rule "nnf_imp2or" (formula "27") (term "0"))
         (rule "nnf_notAnd" (formula "27") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
         (rule "polySimp_rightDist" (formula "27") (term "0,1,0,0,1,0,0"))
         (rule "mul_literals" (formula "27") (term "0,0,1,0,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1,0,0,1,0,0"))
         (rule "polySimp_elimOne" (formula "27") (term "1,0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "27") (term "0,0,0,1,0,0"))
         (rule "add_literals" (formula "27") (term "0,0,0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0"))
         (rule "polySimp_rightDist" (formula "27") (term "0,1,1,0,0"))
         (rule "mul_literals" (formula "27") (term "0,0,1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
         (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "27") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
         (rule "mul_literals" (formula "27") (term "1,0,0,0"))
         (rule "nnf_imp2or" (formula "27") (term "0,1,0"))
         (rule "nnf_notAnd" (formula "27") (term "0,0,1,0"))
         (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "27") (term "0,1,0,0,1,0,0,1,0"))
         (rule "mul_literals" (formula "27") (term "0,0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "27") (term "1,0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "27") (term "0,0,0,1,0,0,1,0"))
         (rule "add_literals" (formula "27") (term "0,0,0,0,1,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "27") (term "0,1,1,0,0,1,0"))
         (rule "mul_literals" (formula "27") (term "0,0,1,1,0,0,1,0"))
         (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,0,1,0"))
         (rule "mul_literals" (formula "27") (term "0,1,0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,0,1,0"))
         (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "26") (term "0") (inst "i=i"))
          (builtin "One Step Simplification" (formula "26"))
         (rule "translateJavaSubInt" (formula "26") (term "1,1,0,0"))
         (rule "translateJavaAddInt" (formula "26") (term "0,2,1,1,0"))
         (rule "polySimp_elimSub" (formula "26") (term "1,1,0,0"))
         (rule "mul_literals" (formula "26") (term "1,1,1,0,0"))
         (rule "polySimp_addComm0" (formula "26") (term "0,2,1,1,0"))
         (rule "polySimp_addComm1" (formula "26") (term "1,1,0,0"))
         (rule "polySimp_addComm1" (formula "26") (term "0,1,1,0,0"))
         (rule "add_literals" (formula "26") (term "0,0,1,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
         (rule "polySimp_rightDist" (formula "26") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "26") (term "1,0,1,0,0,1,0,0"))
         (rule "mul_literals" (formula "26") (term "0,0,1,0,0,1,0,0"))
         (rule "polySimp_elimOne" (formula "26") (term "1,0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "26") (term "0,0,0,1,0,0"))
         (rule "add_literals" (formula "26") (term "0,0,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "26") (term "1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
         (rule "polySimp_rightDist" (formula "26") (term "0,1,1,0,0"))
         (rule "mul_literals" (formula "26") (term "0,0,1,1,0,0"))
         (rule "nnf_imp2or" (formula "26") (term "0"))
         (rule "nnf_notAnd" (formula "26") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
         (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
         (rule "mul_literals" (formula "26") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
         (rule "polySimp_rightDist" (formula "26") (term "0,1,0,0,1,0,0"))
         (rule "mul_literals" (formula "26") (term "0,0,1,0,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "26") (term "1,0,1,0,0,1,0,0"))
         (rule "polySimp_elimOne" (formula "26") (term "1,0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "26") (term "0,0,0,1,0,0"))
         (rule "add_literals" (formula "26") (term "0,0,0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
         (rule "polySimp_rightDist" (formula "26") (term "0,1,1,0,0"))
         (rule "mul_literals" (formula "26") (term "0,0,1,1,0,0"))
         (rule "commute_or" (formula "10") (term "0,0,1,0"))
         (rule "commute_or" (formula "27") (term "0,0,1,0"))
         (rule "arrayLengthIsAShort" (formula "25") (term "0"))
          (builtin "One Step Simplification" (formula "25"))
         (rule "true_left" (formula "25"))
         (rule "arrayLengthIsAShort" (formula "24") (term "0"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "true_left" (formula "24"))
         (rule "arrayLengthNotNegative" (formula "24") (term "0"))
         (rule "arrayLengthNotNegative" (formula "26") (term "0"))
         (rule "cut_direct" (formula "18") (term "0"))
         (branch "CUT: classify_sk_0 >= 1 TRUE"
             (builtin "One Step Simplification" (formula "19"))
            (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "18"))
            (rule "leq_literals" (formula "15") (term "0"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "true_left" (formula "15"))
            (rule "cut_direct" (formula "19") (term "0"))
            (branch "CUT: result_21 >= 2 + classify_sk_0 * 2 TRUE"
                (builtin "One Step Simplification" (formula "20"))
               (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "19"))
               (rule "inEqSimp_homoInEq0" (formula "16") (term "0"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "16") (term "1,0,0"))
               (rule "mul_literals" (formula "16") (term "0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
               (rule "polySimp_addAssoc" (formula "16") (term "0,0"))
               (rule "polySimp_addComm1" (formula "16") (term "0,0,0"))
               (rule "add_literals" (formula "16") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,0"))
               (rule "add_literals" (formula "16") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "16") (term "1,0,0"))
               (rule "add_zero_right" (formula "16") (term "0,0"))
               (rule "qeq_literals" (formula "16") (term "0"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "true_left" (formula "16"))
               (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "8"))
               (rule "polySimp_rightDist" (formula "18") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "18") (term "1,0,0"))
               (rule "mul_literals" (formula "18") (term "0,0,0"))
               (rule "polySimp_addAssoc" (formula "18") (term "0"))
               (rule "polySimp_addComm1" (formula "18") (term "0,0"))
               (rule "add_literals" (formula "18") (term "0,0,0"))
               (rule "polySimp_pullOutFactor2b" (formula "18") (term "0"))
               (rule "add_literals" (formula "18") (term "1,1,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "18"))
               (rule "polySimp_mulLiterals" (formula "18") (term "0"))
               (rule "polySimp_elimOne" (formula "18") (term "0"))
               (rule "inEqSimp_subsumption0" (formula "15") (ifseqformula "18"))
               (rule "leq_literals" (formula "15") (term "0"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "true_left" (formula "15"))
               (rule "all_pull_out3" (formula "10") (term "0"))
               (rule "shift_paren_or" (formula "10") (term "0,0"))
               (rule "shift_paren_or" (formula "10") (term "0,0,0"))
               (rule "all_pull_out3" (formula "29") (term "0"))
               (rule "shift_paren_or" (formula "29") (term "0,0"))
               (rule "shift_paren_or" (formula "29") (term "0,0,0"))
               (rule "allLeft" (formula "10") (inst "t=Z(0(#))"))
               (rule "leq_literals" (formula "10") (term "0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "add_zero_right" (formula "10") (term "1,1,0,0"))
               (rule "inEqSimp_homoInEq1" (formula "10") (term "0,0,0,0"))
               (rule "times_zero_2" (formula "10") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "10") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "10") (term "1,0,0,0,0"))
               (rule "inEqSimp_contradInEq1" (formula "10") (term "0,0,0,0") (ifseqformula "7"))
               (rule "inEqSimp_homoInEq1" (formula "10") (term "0,0,0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,0,0,0,0"))
               (rule "add_literals" (formula "10") (term "1,1,0,0,0,0,0,0"))
               (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0,0"))
               (rule "add_zero_right" (formula "10") (term "0,0,0,0,0,0"))
               (rule "leq_literals" (formula "10") (term "0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "commute_or" (formula "10") (term "0,0"))
               (rule "allLeft" (formula "30") (inst "t=Z(0(#))"))
               (rule "leq_literals" (formula "30") (term "0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "30"))
               (rule "add_zero_right" (formula "30") (term "1,1,0,0"))
               (rule "inEqSimp_homoInEq1" (formula "30") (term "0,0,0,0"))
               (rule "times_zero_2" (formula "30") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "30") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "30") (term "1,0,0,0,0"))
               (rule "mul_literals" (formula "30") (term "0,1,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0,0,0"))
               (rule "inEqSimp_contradInEq1" (formula "30") (term "0,0,0,0") (ifseqformula "7"))
               (rule "inEqSimp_homoInEq1" (formula "30") (term "0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "30") (term "1,0,0,0,0,0,0"))
               (rule "mul_literals" (formula "30") (term "0,1,0,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "30") (term "0,0,0,0,0,0"))
               (rule "polySimp_addComm1" (formula "30") (term "0,0,0,0,0,0,0"))
               (rule "add_literals" (formula "30") (term "0,0,0,0,0,0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,0,0,0,0"))
               (rule "add_literals" (formula "30") (term "1,1,0,0,0,0,0,0"))
               (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,0,0"))
               (rule "add_zero_right" (formula "30") (term "0,0,0,0,0,0"))
               (rule "leq_literals" (formula "30") (term "0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "30"))
               (rule "commute_or" (formula "30") (term "0,0"))
               (rule "allLeft" (formula "29") (inst "t=add(Z(neglit(1(#))), classify_sk_0)"))
               (rule "polySimp_addAssoc" (formula "29") (term "0,2,0,1"))
               (rule "add_literals" (formula "29") (term "0,0,2,0,1"))
               (rule "add_zero_left" (formula "29") (term "0,2,0,1"))
               (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
               (rule "inEqSimp_homoInEq1" (formula "29") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "29") (term "1,0,1,0"))
               (rule "polySimp_rightDist" (formula "29") (term "1,0,1,0"))
               (rule "mul_literals" (formula "29") (term "0,1,0,1,0"))
               (rule "polySimp_addComm1" (formula "29") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0"))
               (rule "polySimp_addComm1" (formula "29") (term "0,0,0,1,0"))
               (rule "add_literals" (formula "29") (term "0,0,0,0,1,0"))
               (rule "polySimp_pullOutFactor0b" (formula "29") (term "0,0,1,0"))
               (rule "add_literals" (formula "29") (term "1,1,0,0,1,0"))
               (rule "inEqSimp_homoInEq0" (formula "29") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "29") (term "1,0,0,0"))
               (rule "mul_literals" (formula "29") (term "0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "29") (term "0,0,0"))
               (rule "add_literals" (formula "29") (term "0,0,0,0"))
               (rule "add_zero_left" (formula "29") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "29") (term "1,1,0"))
               (rule "polySimp_rightDist" (formula "29") (term "1,1,0"))
               (rule "mul_literals" (formula "29") (term "0,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0"))
               (rule "inEqSimp_invertInEq1" (formula "29") (term "0,0"))
               (rule "times_zero_2" (formula "29") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "29") (term "0,0,0"))
               (rule "polySimp_elimOne" (formula "29") (term "0,0,0"))
               (rule "inEqSimp_contradInEq1" (formula "29") (term "1,0") (ifseqformula "19"))
               (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1,0"))
               (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0"))
               (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0"))
               (rule "polySimp_addComm1" (formula "29") (term "0,0,0,1,0"))
               (rule "add_literals" (formula "29") (term "0,0,0,0,1,0"))
               (rule "polySimp_pullOutFactor0b" (formula "29") (term "0,0,1,0"))
               (rule "add_literals" (formula "29") (term "1,1,0,0,1,0"))
               (rule "times_zero_1" (formula "29") (term "1,0,0,1,0"))
               (rule "add_zero_right" (formula "29") (term "0,0,1,0"))
               (rule "leq_literals" (formula "29") (term "0,1,0"))
                (builtin "One Step Simplification" (formula "29"))
               (rule "inEqSimp_contradInEq1" (formula "29") (term "0") (ifseqformula "16"))
               (rule "qeq_literals" (formula "29") (term "0,0"))
                (builtin "One Step Simplification" (formula "29"))
               (rule "allLeft" (formula "11") (inst "t=add(Z(neglit(1(#))), classify_sk_0)"))
               (rule "polySimp_addAssoc" (formula "11") (term "1,1,0,0"))
               (rule "add_literals" (formula "11") (term "0,1,1,0,0"))
               (rule "inEqSimp_homoInEq0" (formula "11") (term "0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0,0"))
               (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0,0"))
               (rule "add_literals" (formula "11") (term "0,0,0,0,0,0,0"))
               (rule "add_zero_left" (formula "11") (term "0,0,0,0,0,0"))
               (rule "inEqSimp_homoInEq1" (formula "11") (term "1,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,0,1,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,0,1,0,0,0,0"))
               (rule "mul_literals" (formula "11") (term "0,1,0,1,0,0,0,0"))
               (rule "polySimp_addComm1" (formula "11") (term "0,1,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,0,0"))
               (rule "polySimp_addComm0" (formula "11") (term "0,0,0,1,0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0,1,0,0,0,0"))
               (rule "add_literals" (formula "11") (term "1,1,0,0,1,0,0,0,0"))
               (rule "inEqSimp_invertInEq1" (formula "11") (term "0,0,0,0,0"))
               (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "11") (term "0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,0,0"))
               (rule "mul_literals" (formula "11") (term "0,1,1,0,0,0,0"))
               (rule "inEqSimp_contradInEq1" (formula "11") (term "0,0,0,0,0") (ifseqformula "17"))
               (rule "qeq_literals" (formula "11") (term "0,0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "inEqSimp_contradInEq1" (formula "11") (term "0,0,0,0") (ifseqformula "20"))
               (rule "inEqSimp_homoInEq1" (formula "11") (term "0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,0,0,0"))
               (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0,0"))
               (rule "polySimp_addComm1" (formula "11") (term "0,0,0,0,0,0,0"))
               (rule "add_literals" (formula "11") (term "0,0,0,0,0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0,0,0,0,0"))
               (rule "add_literals" (formula "11") (term "1,1,0,0,0,0,0,0"))
               (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,0"))
               (rule "add_zero_right" (formula "11") (term "0,0,0,0,0,0"))
               (rule "leq_literals" (formula "11") (term "0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "commute_or" (formula "11") (term "0,0"))
               (rule "allLeft" (formula "12") (inst "t=add(add(Z(neglit(2(#))),
        mul(classify_sk_0, Z(neglit(1(#))))),
    result_21)"))
               (rule "polySimp_addAssoc" (formula "12") (term "1,1,0,0"))
               (rule "polySimp_addAssoc" (formula "12") (term "0,1,1,0,0"))
               (rule "add_literals" (formula "12") (term "0,0,1,1,0,0"))
               (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,1,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,0,1,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "12") (term "0,1,0,1,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0,1,0,0,0,0"))
               (rule "mul_literals" (formula "12") (term "0,0,1,0,1,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,0,1,0,1,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "12") (term "0,1,0,0,0,0"))
               (rule "polySimp_addComm1" (formula "12") (term "0,0,1,0,0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,1,0,0,0,0"))
               (rule "add_literals" (formula "12") (term "1,1,0,1,0,0,0,0"))
               (rule "times_zero_1" (formula "12") (term "1,0,1,0,0,0,0"))
               (rule "add_zero_right" (formula "12") (term "0,1,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "12") (term "0,1,0,0,0,0"))
               (rule "polySimp_addComm0" (formula "12") (term "0,0,1,0,0,0,0"))
               (rule "polySimp_pullOutFactor2b" (formula "12") (term "0,1,0,0,0,0"))
               (rule "add_literals" (formula "12") (term "1,1,0,1,0,0,0,0"))
               (rule "times_zero_1" (formula "12") (term "1,0,1,0,0,0,0"))
               (rule "add_zero_right" (formula "12") (term "0,1,0,0,0,0"))
               (rule "leq_literals" (formula "12") (term "1,0,0,0,0"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "inEqSimp_homoInEq0" (formula "12") (term "0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "12") (term "0,1,0,0,0,0,0"))
               (rule "mul_literals" (formula "12") (term "0,0,1,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,0,1,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0,0"))
               (rule "add_literals" (formula "12") (term "0,0,0,0,0,0,0"))
               (rule "applyEq" (formula "12") (term "1,1,0") (ifseqformula "14"))
               (rule "inEqSimp_sepNegMonomial1" (formula "12") (term "0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "12") (term "0,0,0,0,0"))
               (rule "inEqSimp_contradInEq1" (formula "12") (term "0,0,0,0") (ifseqformula "7"))
               (rule "inEqSimp_homoInEq1" (formula "12") (term "0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0,0"))
               (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0,0"))
               (rule "polySimp_addComm1" (formula "12") (term "0,0,0,0,0,0,0"))
               (rule "add_literals" (formula "12") (term "0,0,0,0,0,0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,0,0,0,0"))
               (rule "add_literals" (formula "12") (term "1,1,0,0,0,0,0,0"))
               (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,0"))
               (rule "add_zero_right" (formula "12") (term "0,0,0,0,0,0"))
               (rule "leq_literals" (formula "12") (term "0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "commute_or" (formula "12") (term "0,0"))
               (rule "allLeft" (formula "13") (inst "t=Z(1(#))"))
               (rule "leq_literals" (formula "13") (term "0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "add_literals" (formula "13") (term "1,1,0,0"))
               (rule "inEqSimp_homoInEq1" (formula "13") (term "0,0,0,0"))
               (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0"))
               (rule "polySimp_addComm1" (formula "13") (term "0,0,0,0,0"))
               (rule "polySimp_addComm0" (formula "13") (term "0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0"))
               (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0"))
               (rule "inEqSimp_contradInEq1" (formula "13") (term "0,0,0,0") (ifseqformula "7"))
               (rule "inEqSimp_homoInEq1" (formula "13") (term "0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0,0"))
               (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,0,0"))
               (rule "polySimp_addComm1" (formula "13") (term "0,0,0,0,0,0,0"))
               (rule "add_literals" (formula "13") (term "0,0,0,0,0,0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,0,0,0,0"))
               (rule "add_literals" (formula "13") (term "1,1,0,0,0,0,0,0"))
               (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0,0"))
               (rule "add_zero_right" (formula "13") (term "0,0,0,0,0,0"))
               (rule "leq_literals" (formula "13") (term "0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "allLeft" (formula "14") (inst "t=classify_sk_0"))
               (rule "inEqSimp_homoInEq1" (formula "14") (term "1,0,0,0,0"))
               (rule "polySimp_addComm1" (formula "14") (term "0,1,0,0,0,0"))
               (rule "polySimp_pullOutFactor0" (formula "14") (term "0,0,1,0,0,0,0"))
               (rule "add_literals" (formula "14") (term "1,0,0,1,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,0"))
               (rule "inEqSimp_contradInEq1" (formula "14") (term "0,0,0,0,0") (ifseqformula "20"))
               (rule "qeq_literals" (formula "14") (term "0,0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "inEqSimp_contradInEq1" (formula "14") (term "0,0,0,0") (ifseqformula "23"))
               (rule "inEqSimp_homoInEq1" (formula "14") (term "0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,0,0,0,0,0"))
               (rule "add_literals" (formula "14") (term "1,1,0,0,0,0,0,0"))
               (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0,0"))
               (rule "add_zero_right" (formula "14") (term "0,0,0,0,0,0"))
               (rule "leq_literals" (formula "14") (term "0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "commute_or" (formula "13") (term "0,0"))
               (rule "allLeft" (formula "10") (inst "t=add(Z(neglit(1(#))), classify_sk_0)"))
               (rule "inEqSimp_homoInEq1" (formula "10") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,1,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,0,1,0"))
               (rule "mul_literals" (formula "10") (term "0,1,0,1,0"))
               (rule "polySimp_addComm1" (formula "10") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0"))
               (rule "polySimp_addComm0" (formula "10") (term "0,0,0,1,0"))
               (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0,1,0"))
               (rule "add_literals" (formula "10") (term "1,1,0,0,1,0"))
               (rule "inEqSimp_homoInEq0" (formula "10") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
               (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "10") (term "0,0,0"))
               (rule "add_literals" (formula "10") (term "0,0,0,0"))
               (rule "add_zero_left" (formula "10") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,1,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,1,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0"))
               (rule "mul_literals" (formula "10") (term "0,1,1,0"))
               (rule "inEqSimp_invertInEq1" (formula "10") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0"))
               (rule "times_zero_2" (formula "10") (term "1,0,0"))
               (rule "polySimp_elimOne" (formula "10") (term "0,0,0"))
               (rule "inEqSimp_contradInEq1" (formula "10") (term "0,0") (ifseqformula "21"))
               (rule "qeq_literals" (formula "10") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "24"))
               (rule "inEqSimp_homoInEq1" (formula "10") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
               (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "10") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "10") (term "0,0,0,0"))
               (rule "add_literals" (formula "10") (term "0,0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0,0"))
               (rule "add_literals" (formula "10") (term "1,1,0,0,0"))
               (rule "times_zero_1" (formula "10") (term "1,0,0,0"))
               (rule "add_zero_right" (formula "10") (term "0,0,0"))
               (rule "leq_literals" (formula "10") (term "0,0"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "22"))
               (rule "andLeft" (formula "10"))
               (rule "inEqSimp_homoInEq1" (formula "10"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,0"))
               (rule "mul_literals" (formula "10") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "10") (term "0"))
               (rule "polySimp_addComm0" (formula "10") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
               (rule "add_literals" (formula "10") (term "1,1,0"))
               (rule "times_zero_1" (formula "10") (term "1,0"))
               (rule "add_zero_right" (formula "10") (term "0"))
               (rule "leq_literals" (formula "10"))
               (rule "closeFalse" (formula "10"))
            )
            (branch "CUT: result_21 >= 2 + classify_sk_0 * 2 FALSE"
                (builtin "One Step Simplification" (formula "19"))
               (rule "true_left" (formula "19"))
               (rule "inEqSimp_geqRight" (formula "29"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
               (rule "mul_literals" (formula "1") (term "0,1"))
               (rule "inEqSimp_antiSymm" (formula "17") (ifseqformula "1"))
               (rule "applyEq" (formula "9") (term "0") (ifseqformula "17"))
               (rule "inEqSimp_homoInEq0" (formula "9"))
               (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
               (rule "polySimp_rightDist" (formula "9") (term "1,0"))
               (rule "mul_literals" (formula "9") (term "0,1,0"))
               (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0"))
               (rule "polySimp_addAssoc" (formula "9") (term "0"))
               (rule "polySimp_addComm1" (formula "9") (term "0,0"))
               (rule "add_literals" (formula "9") (term "0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
               (rule "add_literals" (formula "9") (term "1,1,0"))
               (rule "applyEq" (formula "11") (term "1,1,0,0,0,1,0") (ifseqformula "17"))
               (rule "polySimp_addAssoc" (formula "11") (term "1,0,0,0,1,0"))
               (rule "polySimp_addComm0" (formula "11") (term "0,1,0,0,0,1,0"))
               (rule "polySimp_pullOutFactor0b" (formula "11") (term "1,0,0,0,1,0"))
               (rule "add_literals" (formula "11") (term "1,1,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,1,0"))
               (rule "applyEq" (formula "29") (term "1,1,1,0,0") (ifseqformula "17"))
               (rule "polySimp_addAssoc" (formula "29") (term "1,1,0,0"))
               (rule "polySimp_addComm1" (formula "29") (term "0,1,1,0,0"))
               (rule "add_literals" (formula "29") (term "0,0,1,1,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "29") (term "1,1,0,0"))
               (rule "add_literals" (formula "29") (term "1,1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0"))
               (rule "applyEq" (formula "12") (term "1,0,2,0") (ifseqformula "17"))
               (rule "eqSymm" (formula "12"))
               (rule "polySimp_addAssoc" (formula "12") (term "0,2,1"))
               (rule "polySimp_addComm1" (formula "12") (term "0,0,2,1"))
               (rule "add_literals" (formula "12") (term "0,0,0,2,1"))
               (rule "polySimp_pullOutFactor0b" (formula "12") (term "0,2,1"))
               (rule "add_literals" (formula "12") (term "1,1,0,2,1"))
               (rule "polySimp_elimOne" (formula "12") (term "1,0,2,1"))
               (rule "applyEq" (formula "18") (term "0") (ifseqformula "17"))
               (rule "inEqSimp_homoInEq1" (formula "18"))
               (rule "polySimp_pullOutFactor1" (formula "18") (term "0"))
               (rule "add_literals" (formula "18") (term "1,0"))
               (rule "times_zero_1" (formula "18") (term "0"))
               (rule "leq_literals" (formula "18"))
               (rule "true_left" (formula "18"))
               (rule "applyEq" (formula "11") (term "1,1,1,0,0") (ifseqformula "17"))
               (rule "polySimp_addAssoc" (formula "11") (term "1,1,0,0"))
               (rule "polySimp_addComm0" (formula "11") (term "0,1,1,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "11") (term "1,1,0,0"))
               (rule "add_literals" (formula "11") (term "1,1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
               (rule "applyEq" (formula "1") (term "0") (ifseqformula "17"))
               (rule "inEqSimp_homoInEq0" (formula "1"))
               (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "1,0"))
               (rule "times_zero_1" (formula "1") (term "0"))
               (rule "qeq_literals" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "applyEq" (formula "7") (term "0") (ifseqformula "16"))
               (rule "inEqSimp_homoInEq1" (formula "7"))
               (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
               (rule "polySimp_rightDist" (formula "7") (term "1,0"))
               (rule "mul_literals" (formula "7") (term "0,1,0"))
               (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0"))
               (rule "polySimp_addAssoc" (formula "7") (term "0"))
               (rule "polySimp_addComm1" (formula "7") (term "0,0"))
               (rule "add_literals" (formula "7") (term "0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
               (rule "add_literals" (formula "7") (term "1,1,0"))
               (rule "applyEq" (formula "24") (term "1,1") (ifseqformula "16"))
               (rule "polySimp_addAssoc" (formula "24") (term "1"))
               (rule "polySimp_addComm0" (formula "24") (term "0,1"))
               (rule "polySimp_pullOutFactor0b" (formula "24") (term "1"))
               (rule "add_literals" (formula "24") (term "1,1,1"))
               (rule "polySimp_elimOne" (formula "24") (term "1,1"))
               (rule "applyEq" (formula "22") (term "0") (ifseqformula "16"))
               (rule "inEqSimp_homoInEq1" (formula "22"))
               (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
               (rule "polySimp_rightDist" (formula "22") (term "1,0"))
               (rule "mul_literals" (formula "22") (term "0,1,0"))
               (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0"))
               (rule "polySimp_addAssoc" (formula "22") (term "0"))
               (rule "add_literals" (formula "22") (term "0,0"))
               (rule "applyEq" (formula "28") (term "1,1,1,0,0") (ifseqformula "16"))
               (rule "polySimp_addAssoc" (formula "28") (term "1,1,0,0"))
               (rule "polySimp_addComm1" (formula "28") (term "0,1,1,0,0"))
               (rule "add_literals" (formula "28") (term "0,0,1,1,0,0"))
               (rule "add_zero_left" (formula "28") (term "0,1,1,0,0"))
               (rule "polySimp_pullOutFactor0" (formula "28") (term "1,1,0,0"))
               (rule "add_literals" (formula "28") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0"))
               (rule "applyEq" (formula "26") (term "1,1") (ifseqformula "16"))
               (rule "polySimp_addAssoc" (formula "26") (term "1"))
               (rule "polySimp_addComm0" (formula "26") (term "0,1"))
               (rule "polySimp_pullOutFactor0b" (formula "26") (term "1"))
               (rule "add_literals" (formula "26") (term "1,1,1"))
               (rule "polySimp_elimOne" (formula "26") (term "1,1"))
               (rule "applyEq" (formula "28") (term "1,1,0,0,0,1,0") (ifseqformula "16"))
               (rule "polySimp_addAssoc" (formula "28") (term "1,0,0,0,1,0"))
               (rule "polySimp_addComm1" (formula "28") (term "0,1,0,0,0,1,0"))
               (rule "add_literals" (formula "28") (term "0,0,1,0,0,0,1,0"))
               (rule "add_zero_left" (formula "28") (term "0,1,0,0,0,1,0"))
               (rule "polySimp_pullOutFactor0" (formula "28") (term "1,0,0,0,1,0"))
               (rule "add_literals" (formula "28") (term "1,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "28") (term "1,0,0,0,1,0"))
               (rule "applyEq" (formula "11") (term "1,0,2,0") (ifseqformula "16"))
               (rule "polySimp_addAssoc" (formula "11") (term "0,2,0"))
               (rule "polySimp_addComm1" (formula "11") (term "0,0,2,0"))
               (rule "add_literals" (formula "11") (term "0,0,0,2,0"))
               (rule "add_zero_left" (formula "11") (term "0,0,2,0"))
               (rule "polySimp_pullOutFactor0" (formula "11") (term "0,2,0"))
               (rule "add_literals" (formula "11") (term "1,0,2,0"))
               (rule "polySimp_elimOne" (formula "11") (term "0,2,0"))
               (rule "eqSymm" (formula "11"))
               (rule "applyEq" (formula "1") (term "1,1") (ifseqformula "16"))
               (rule "polySimp_addAssoc" (formula "1") (term "1"))
               (rule "polySimp_addComm0" (formula "1") (term "0,1"))
               (rule "polySimp_pullOutFactor0b" (formula "1") (term "1"))
               (rule "add_literals" (formula "1") (term "1,1,1"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1"))
               (rule "applyEq" (formula "21") (term "1,1") (ifseqformula "16"))
               (rule "polySimp_addAssoc" (formula "21") (term "1"))
               (rule "polySimp_addComm0" (formula "21") (term "0,1"))
               (rule "polySimp_pullOutFactor0b" (formula "21") (term "1"))
               (rule "add_literals" (formula "21") (term "1,1,1"))
               (rule "polySimp_elimOne" (formula "21") (term "1,1"))
               (rule "applyEq" (formula "14") (term "1") (ifseqformula "16"))
               (rule "applyEq" (formula "12") (term "1,1") (ifseqformula "16"))
               (rule "polySimp_addAssoc" (formula "12") (term "1"))
               (rule "polySimp_addComm0" (formula "12") (term "0,1"))
               (rule "polySimp_pullOutFactor0b" (formula "12") (term "1"))
               (rule "add_literals" (formula "12") (term "1,1,1"))
               (rule "polySimp_elimOne" (formula "12") (term "1,1"))
               (rule "applyEq" (formula "34") (term "1") (ifseqformula "16"))
               (rule "applyEq" (formula "18") (term "0") (ifseqformula "11"))
               (rule "inEqSimp_sepNegMonomial1" (formula "8"))
               (rule "polySimp_mulLiterals" (formula "8") (term "0"))
               (rule "polySimp_elimOne" (formula "8") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "7"))
               (rule "polySimp_mulLiterals" (formula "7") (term "0"))
               (rule "polySimp_elimOne" (formula "7") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "20"))
               (rule "polySimp_mulLiterals" (formula "20") (term "0"))
               (rule "inEqSimp_subsumption6" (formula "20") (ifseqformula "15"))
               (rule "mul_literals" (formula "20") (term "1,1,0"))
               (rule "greater_literals" (formula "20") (term "0,0"))
                (builtin "One Step Simplification" (formula "20"))
               (rule "leq_literals" (formula "20") (term "0"))
                (builtin "One Step Simplification" (formula "20"))
               (rule "true_left" (formula "20"))
               (rule "all_pull_out3" (formula "8") (term "0"))
               (rule "shift_paren_or" (formula "8") (term "0,0"))
               (rule "shift_paren_or" (formula "8") (term "0,0,0"))
               (rule "onlyCreatedObjectsAreReferencedFinal" (formula "21") (term "0,0,0") (ifseqformula "3") (ifseqformula "4"))
               (rule "replace_known_right" (formula "21") (term "1") (ifseqformula "31"))
                (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "28")))
               (rule "closeFalse" (formula "21"))
            )
         )
         (branch "CUT: classify_sk_0 >= 1 FALSE"
             (builtin "One Step Simplification" (formula "18"))
            (rule "true_left" (formula "18"))
            (rule "inEqSimp_geqRight" (formula "29"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_subsumption0" (formula "17") (ifseqformula "1"))
            (rule "leq_literals" (formula "17") (term "0"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "true_left" (formula "17"))
            (rule "inEqSimp_antiSymm" (formula "16") (ifseqformula "1"))
            (rule "applyEq" (formula "8") (term "1,1") (ifseqformula "16"))
            (rule "add_zero_right" (formula "8") (term "1"))
            (rule "applyEqRigid" (formula "8") (term "1,1") (ifseqformula "15"))
            (rule "add_literals" (formula "8") (term "1"))
            (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "15"))
            (rule "leq_literals" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "applyEq" (formula "17") (term "0,1,1,0") (ifseqformula "14"))
            (rule "times_zero_2" (formula "17") (term "1,1,0"))
            (rule "add_zero_right" (formula "17") (term "1,0"))
            (rule "replace_known_left" (formula "17") (term "0") (ifseqformula "21"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "applyEqRigid" (formula "16") (term "0,1,1") (ifseqformula "14"))
            (rule "times_zero_2" (formula "16") (term "1,1"))
            (rule "add_zero_right" (formula "16") (term "1"))
            (rule "applyEqRigid" (formula "15") (term "0") (ifseqformula "14"))
            (rule "qeq_literals" (formula "15"))
            (rule "true_left" (formula "15"))
            (rule "applyEq" (formula "16") (term "0,2,0") (ifseqformula "14"))
            (rule "inEqSimp_homoInEq1" (formula "16"))
            (rule "polySimp_pullOutFactor1" (formula "16") (term "0"))
            (rule "add_literals" (formula "16") (term "1,0"))
            (rule "times_zero_1" (formula "16") (term "0"))
            (rule "leq_literals" (formula "16"))
            (rule "true_left" (formula "16"))
            (rule "applyEqRigid" (formula "25") (term "0,1,0,1,1,0,0") (ifseqformula "14"))
            (rule "mul_literals" (formula "25") (term "1,0,1,1,0,0"))
            (rule "add_zero_right" (formula "25") (term "0,1,1,0,0"))
            (rule "applyEqRigid" (formula "21") (term "0,0,1") (ifseqformula "14"))
            (rule "mul_literals" (formula "21") (term "0,1"))
            (rule "add_zero_left" (formula "21") (term "1"))
            (rule "applyEqRigid" (formula "2") (term "1") (ifseqformula "14"))
            (rule "applyEqRigid" (formula "23") (term "0,0,1") (ifseqformula "14"))
            (rule "mul_literals" (formula "23") (term "0,1"))
            (rule "add_zero_left" (formula "23") (term "1"))
            (rule "applyEq" (formula "25") (term "0,1,0,1,0,0,0,1,0") (ifseqformula "14"))
            (rule "times_zero_2" (formula "25") (term "1,0,1,0,0,0,1,0"))
            (rule "add_zero_right" (formula "25") (term "0,1,0,0,0,1,0"))
            (rule "applyEqRigid" (formula "10") (term "0,1,0,0,2,0") (ifseqformula "14"))
            (rule "times_zero_2" (formula "10") (term "1,0,0,2,0"))
            (rule "add_zero_right" (formula "10") (term "0,0,2,0"))
            (rule "eqSymm" (formula "10"))
            (rule "applyEqRigid" (formula "9") (term "0,0,1,1,0,0") (ifseqformula "14"))
            (rule "times_zero_2" (formula "9") (term "0,1,1,0,0"))
            (rule "add_zero_left" (formula "9") (term "1,1,0,0"))
            (rule "applyEqRigid" (formula "24") (term "0,1,0,1,1,0,0") (ifseqformula "14"))
            (rule "times_zero_2" (formula "24") (term "1,0,1,1,0,0"))
            (rule "add_zero_right" (formula "24") (term "0,1,1,0,0"))
            (rule "applyEqRigid" (formula "9") (term "0,0,1,0,0,0,1,0") (ifseqformula "14"))
            (rule "mul_literals" (formula "9") (term "0,1,0,0,0,1,0"))
            (rule "add_zero_left" (formula "9") (term "1,0,0,0,1,0"))
            (rule "applyEqRigid" (formula "18") (term "0,0,1") (ifseqformula "14"))
            (rule "mul_literals" (formula "18") (term "0,1"))
            (rule "add_zero_left" (formula "18") (term "1"))
            (rule "applyEqRigid" (formula "1") (term "0,0,1") (ifseqformula "14"))
            (rule "mul_literals" (formula "1") (term "0,1"))
            (rule "add_zero_left" (formula "1") (term "1"))
            (rule "applyEq" (formula "11") (term "0,0,1") (ifseqformula "14"))
            (rule "mul_literals" (formula "11") (term "0,1"))
            (rule "add_zero_left" (formula "11") (term "1"))
            (rule "applyEqRigid" (formula "10") (term "0,1,0,0,2,0") (ifseqformula "14"))
            (rule "times_zero_2" (formula "10") (term "1,0,0,2,0"))
            (rule "add_zero_right" (formula "10") (term "0,0,2,0"))
            (rule "eqSymm" (formula "10"))
            (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "19"))
            (rule "leq_literals" (formula "15") (term "0"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "true_left" (formula "15"))
            (rule "all_pull_out3" (formula "24") (term "0"))
            (rule "shift_paren_or" (formula "24") (term "0,0"))
            (rule "shift_paren_or" (formula "24") (term "0,0,0"))
            (rule "all_pull_out3" (formula "9") (term "0"))
            (rule "shift_paren_or" (formula "9") (term "0,0"))
            (rule "shift_paren_or" (formula "9") (term "0,0,0"))
            (rule "onlyCreatedObjectsAreReferencedFinal" (formula "30") (term "1,2,0") (ifseqformula "3") (ifseqformula "4"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "26"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferencedFinal" (formula "27") (term "0") (ifseqformula "4") (ifseqformula "5"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "28"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "31")))
            (rule "closeFalse" (formula "1"))
         )
      )
   )
   (branch "Null reference (t_1 = null)"
       (builtin "One Step Simplification" (formula "13"))
      (rule "notRight" (formula "13"))
      (rule "applyEq" (formula "15") (term "0,1,2,0") (ifseqformula "1"))
      (rule "applyEq" (formula "15") (term "1,1") (ifseqformula "1"))
      (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "15") (term "0,1,2,1") (ifseqformula "1"))
      (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "11") (term "0,0,1") (ifseqformula "1"))
      (rule "applyEq" (formula "12") (term "1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "12") (term "0,0,1,3,0") (ifseqformula "1"))
      (rule "applyEq" (formula "9") (term "1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "13") (term "1") (ifseqformula "1"))
      (rule "ifElseUnfold" (formula "14") (term "1") (inst "#boolv=x_2"))
      (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_2"))
      (rule "assignment_read_attribute_this_final" (formula "14"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "ifElseSplit" (formula "14"))
      (branch "if x_2 true"
          (builtin "One Step Simplification" (formula "15"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "variableDeclarationAssign" (formula "15") (term "1"))
         (rule "variableDeclaration" (formula "15") (term "1") (newnames "bucket_index"))
         (rule "compound_subtraction_2" (formula "15") (term "1") (inst "#v0=x_2") (inst "#v1=x_3"))
         (rule "variableDeclarationAssign" (formula "15") (term "1"))
         (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_4"))
         (rule "assignment" (formula "15") (term "1"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "variableDeclarationAssign" (formula "15") (term "1"))
         (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_3"))
         (rule "compound_division_1" (formula "15") (term "1") (inst "#v=x_5"))
         (rule "variableDeclarationAssign" (formula "15") (term "1"))
         (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_5"))
         (rule "assignment_read_attribute_this_final" (formula "15"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "assignmentDivisionInt" (formula "15"))
         (branch "Case 1"
             (builtin "One Step Simplification" (formula "15"))
            (rule "translateJavaDivInt" (formula "15") (term "0,1,0"))
            (rule "assignmentSubtractionInt" (formula "15") (term "1"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "translateJavaSubInt" (formula "15") (term "0,1,0"))
            (rule "polySimp_elimSub" (formula "15") (term "0,1,0"))
            (rule "variableDeclarationAssign" (formula "15") (term "1"))
            (rule "variableDeclaration" (formula "15") (term "1") (newnames "equal_to_splitter"))
            (rule "compound_assignment_2" (formula "15") (term "1") (inst "#v=x_2"))
            (rule "variableDeclarationAssign" (formula "15") (term "1"))
            (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_6"))
            (rule "methodCallWithAssignmentUnfoldArguments" (formula "15") (term "1"))
            (rule "variableDeclarationAssign" (formula "15") (term "1"))
            (rule "variableDeclaration" (formula "15") (term "1") (newnames "var"))
            (rule "assignment" (formula "15") (term "1"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "variableDeclarationAssign" (formula "15") (term "1"))
            (rule "variableDeclaration" (formula "15") (term "1") (newnames "var_1"))
            (rule "eval_order_array_access4" (formula "15") (term "1") (inst "#v0=x_arr"))
            (rule "variableDeclarationAssign" (formula "15") (term "1"))
            (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_arr"))
            (rule "assignment_read_attribute_this_final" (formula "15"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "assignment_array2" (formula "15"))
            (branch "Normal Execution (x_arr != null)"
                (builtin "One Step Simplification" (formula "15"))
               (rule "onlyCreatedObjectsAreReferencedFinal" (formula "13") (term "1,2,0") (ifseqformula "4") (ifseqformula "5"))
               (rule "onlyCreatedObjectsAreReferencedFinal" (formula "2") (term "0") (ifseqformula "4") (ifseqformula "5"))
               (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "3"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "true_left" (formula "2"))
               (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "16") (term "1") (inst "#v0=x_7"))
               (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_7"))
               (rule "variableDeclarationAssign" (formula "16") (term "1"))
               (rule "variableDeclaration" (formula "16") (term "1") (newnames "a"))
               (rule "assignment" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "variableDeclarationAssign" (formula "16") (term "1"))
               (rule "variableDeclaration" (formula "16") (term "1") (newnames "b"))
               (rule "assignment" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_cmp,savedHeapBefore_cmp"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "returnUnfold" (formula "16") (term "1") (inst "#v0=x_8"))
               (rule "variableDeclarationAssign" (formula "16") (term "1"))
               (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_8"))
               (rule "less_than_comparison_simple" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "methodCallReturn" (formula "16") (term "1"))
               (rule "assignment" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "methodCallEmpty" (formula "16") (term "1"))
               (rule "blockEmpty" (formula "16") (term "1"))
               (rule "assignment" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "blockEmpty" (formula "16") (term "1"))
               (rule "compound_assignment_1_new" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "compound_subtraction_2" (formula "16") (term "1") (inst "#v0=x_1") (inst "#v1=x_2"))
               (rule "variableDeclarationAssign" (formula "16") (term "1"))
               (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_1"))
               (rule "compound_addition_2" (formula "16") (term "1") (inst "#v0=x_3") (inst "#v1=x_4"))
               (rule "variableDeclarationAssign" (formula "16") (term "1"))
               (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_9"))
               (rule "assignmentMultiplicationInt" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "translateJavaMulInt" (formula "16") (term "0,1,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "0,1,0"))
               (rule "variableDeclarationAssign" (formula "16") (term "1"))
               (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_10"))
               (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "16") (term "1") (inst "#v0=x_11"))
               (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_11"))
               (rule "variableDeclarationAssign" (formula "16") (term "1"))
               (rule "variableDeclaration" (formula "16") (term "1") (newnames "b_1"))
               (rule "assignment" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_toInt,savedHeapBefore_toInt"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "returnUnfold" (formula "16") (term "1") (inst "#v0=x_12"))
               (rule "variableDeclarationAssign" (formula "16") (term "1"))
               (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_12"))
               (rule "condition_simple" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "ifthenelse_negated" (formula "16") (term "0,1,0"))
               (rule "methodCallReturn" (formula "16") (term "1"))
               (rule "assignment" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "methodCallEmpty" (formula "16") (term "1"))
               (rule "blockEmpty" (formula "16") (term "1"))
               (rule "assignment" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "assignmentAdditionInt" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "translateJavaAddInt" (formula "16") (term "0,1,0"))
               (rule "variableDeclarationAssign" (formula "16") (term "1"))
               (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_13"))
               (rule "assignment_read_attribute_this_final" (formula "16"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "assignmentSubtractionInt" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "translateJavaSubInt" (formula "16") (term "0,1,0"))
               (rule "polySimp_elimSub" (formula "16") (term "0,1,0"))
               (rule "polySimp_addComm1" (formula "16") (term "0,1,0"))
               (rule "blockEmpty" (formula "16") (term "1"))
               (rule "methodCallReturn" (formula "16") (term "1"))
               (rule "assignment" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "methodCallEmpty" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "emptyModality" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "notRight" (formula "16"))
               (rule "polySimp_homoEq" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0"))
               (rule "polySimp_rightDist" (formula "1") (term "0,1,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
               (rule "polySimp_elimOne" (formula "1") (term "1,0,1,0"))
               (rule "polySimp_mulAssoc" (formula "1") (term "0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "13"))
               (rule "polySimp_mulAssoc" (formula "13") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "13") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,1,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0,0,0,1,0"))
               (rule "polySimp_sepNegMonomial" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "13"))
               (rule "polySimp_mulLiterals" (formula "13") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
               (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
               (rule "inEqSimp_exactShadow1" (formula "13") (ifseqformula "12"))
               (rule "greater_literals" (formula "13") (term "0"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
               (rule "polySimp_rightDist" (formula "13") (term "0,0"))
               (rule "mul_literals" (formula "13") (term "0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "13") (term "0"))
               (rule "add_literals" (formula "13") (term "1,1,0"))
               (rule "polySimp_elimOne" (formula "13") (term "1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "13"))
               (rule "mul_literals" (formula "13") (term "1"))
               (rule "Contract_axiom_for_isClassifiedAs_in_Tree" (formula "16") (term "0"))
                (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "18")) (ifInst ""  (formula "5")) (ifInst ""  (formula "18")))
               (rule "true_left" (formula "16"))
               (rule "Definition_axiom_for_isClassifiedAs_in_de_wiesler_Tree" (formula "16") (term "0"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "translateJavaSubInt" (formula "16") (term "1,0,1"))
               (rule "translateJavaSubInt" (formula "16") (term "0,2,0,1,0"))
               (rule "andLeft" (formula "16"))
               (rule "polySimp_elimSub" (formula "16") (term "0,2,0,1"))
               (rule "mul_literals" (formula "16") (term "1,0,2,0,1"))
               (rule "polySimp_elimSub" (formula "17") (term "1,0"))
               (rule "mul_literals" (formula "17") (term "1,1,0"))
               (rule "polySimp_addComm1" (formula "16") (term "0,2,0,1"))
               (rule "polySimp_addComm0" (formula "17") (term "1,0"))
               (rule "polySimp_addComm0" (formula "16") (term "0,0,2,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "16") (term "0"))
               (rule "add_zero_right" (formula "16") (term "0,0"))
               (rule "polySimp_rightDist" (formula "16") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "16") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "17") (term "0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0"))
               (rule "mul_literals" (formula "17") (term "0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "17") (term "0,0,0"))
               (rule "add_literals" (formula "17") (term "0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "17") (term "0,0"))
               (rule "polySimp_addComm1" (formula "17") (term "0,0,0"))
               (rule "polySimp_pullOutFactor3b" (formula "17") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "16") (term "1"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "17") (term "1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
               (rule "polySimp_rightDist" (formula "16") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0"))
               (rule "mul_literals" (formula "16") (term "0,1,0"))
               (rule "polySimp_elimOne" (formula "16") (term "1,1,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,1"))
               (rule "polySimp_rightDist" (formula "16") (term "1,1"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1"))
               (rule "mul_literals" (formula "16") (term "0,1,1"))
               (rule "polySimp_elimOne" (formula "16") (term "1,1,1"))
               (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "9"))
                (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "3")) (ifInst ""  (formula "2")))
               (rule "closeFalse" (formula "9"))
            )
            (branch "Null Reference (x_arr = null)"
               (rule "false_right" (formula "16"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "inEqSimp_ltToLeq" (formula "13"))
               (rule "polySimp_mulAssoc" (formula "13") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "13") (term "0"))
               (rule "applyEq" (formula "11") (term "1,2,0") (ifseqformula "1"))
               (rule "applyEq" (formula "14") (term "1,2,0") (ifseqformula "1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "13"))
               (rule "polySimp_mulLiterals" (formula "13") (term "0"))
               (rule "inEqSimp_exactShadow1" (formula "13") (ifseqformula "12"))
               (rule "greater_literals" (formula "13") (term "0"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
               (rule "polySimp_rightDist" (formula "13") (term "0,0"))
               (rule "mul_literals" (formula "13") (term "0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "13") (term "0"))
               (rule "add_literals" (formula "13") (term "1,1,0"))
               (rule "polySimp_elimOne" (formula "13") (term "1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "13"))
               (rule "mul_literals" (formula "13") (term "1"))
               (rule "Class_invariant_axiom_for_java_lang_String" (formula "16"))
               (rule "true_left" (formula "16"))
               (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "9"))
                (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "3")) (ifInst ""  (formula "1")) (ifInst ""  (formula "2")))
               (rule "closeFalse" (formula "9"))
            )
            (branch "Index Out of Bounds (x_arr != null, but bucket_index Out of Bounds!)"
               (rule "false_right" (formula "16"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "inEqSimp_ltToLeq" (formula "13"))
               (rule "polySimp_mulAssoc" (formula "13") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "13") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "1") (term "0,0,1"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "13"))
               (rule "polySimp_mulLiterals" (formula "13") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0,1"))
               (rule "polySimp_elimOne" (formula "1") (term "0,1"))
               (rule "inEqSimp_exactShadow1" (formula "13") (ifseqformula "12"))
               (rule "greater_literals" (formula "13") (term "0"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
               (rule "polySimp_rightDist" (formula "13") (term "0,0"))
               (rule "mul_literals" (formula "13") (term "0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "13") (term "0"))
               (rule "add_literals" (formula "13") (term "1,1,0"))
               (rule "polySimp_elimOne" (formula "13") (term "1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "13"))
               (rule "mul_literals" (formula "13") (term "1"))
               (rule "Definition_axiom_for_isClassifiedAs_in_de_wiesler_Tree" (formula "15") (term "0"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "translateJavaSubInt" (formula "15") (term "1,0,1"))
               (rule "translateJavaSubInt" (formula "15") (term "0,2,0,1,0"))
               (rule "andLeft" (formula "15"))
               (rule "polySimp_elimSub" (formula "15") (term "0,2,0,1"))
               (rule "mul_literals" (formula "15") (term "1,0,2,0,1"))
               (rule "polySimp_elimSub" (formula "16") (term "1,0"))
               (rule "mul_literals" (formula "16") (term "1,1,0"))
               (rule "polySimp_addComm1" (formula "15") (term "0,2,0,1"))
               (rule "polySimp_addComm0" (formula "16") (term "1,0"))
               (rule "polySimp_addComm0" (formula "15") (term "0,0,2,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "15") (term "0"))
               (rule "add_zero_right" (formula "15") (term "0,0"))
               (rule "polySimp_rightDist" (formula "15") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "16") (term "0"))
               (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0"))
               (rule "mul_literals" (formula "16") (term "0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "16") (term "0,0,0"))
               (rule "add_literals" (formula "16") (term "0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "16") (term "0,0"))
               (rule "polySimp_addComm1" (formula "16") (term "0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,0"))
               (rule "add_literals" (formula "16") (term "1,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "15") (term "1"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "16") (term "1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
               (rule "polySimp_rightDist" (formula "15") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0"))
               (rule "mul_literals" (formula "15") (term "0,1,0"))
               (rule "polySimp_elimOne" (formula "15") (term "1,1,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0"))
               (rule "polySimp_mulLiterals" (formula "16") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,1"))
               (rule "polySimp_rightDist" (formula "15") (term "1,1"))
               (rule "mul_literals" (formula "15") (term "0,1,1"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1"))
               (rule "polySimp_elimOne" (formula "15") (term "1,1,1"))
               (rule "Class_invariant_axiom_for_java_lang_Class" (formula "17"))
               (rule "true_left" (formula "17"))
               (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "9"))
                (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "3")) (ifInst ""  (formula "17")) (ifInst ""  (formula "2")))
               (rule "closeFalse" (formula "9"))
            )
         )
         (branch "Case 2"
             (builtin "One Step Simplification" (formula "15"))
            (rule "equal_literals" (formula "15") (term "0"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "closeTrue" (formula "15"))
         )
      )
      (branch "if x_2 false"
          (builtin "One Step Simplification" (formula "15"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "compound_subtraction_2" (formula "15") (term "1") (inst "#v0=x_1") (inst "#v1=x_2"))
         (rule "variableDeclarationAssign" (formula "15") (term "1"))
         (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_1"))
         (rule "assignment" (formula "15") (term "1"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "variableDeclarationAssign" (formula "15") (term "1"))
         (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_3"))
         (rule "assignment_read_attribute_this_final" (formula "15"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "assignmentSubtractionInt" (formula "15") (term "1"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "translateJavaSubInt" (formula "15") (term "0,1,0"))
         (rule "polySimp_elimSub" (formula "15") (term "0,1,0"))
         (rule "blockEmpty" (formula "15") (term "1"))
         (rule "methodCallReturn" (formula "15") (term "1"))
         (rule "assignment" (formula "15") (term "1"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "methodCallEmpty" (formula "15") (term "1"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "emptyModality" (formula "15") (term "1"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "notRight" (formula "15"))
         (rule "polySimp_homoEq" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "12"))
         (rule "polySimp_mulAssoc" (formula "12") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "12") (term "0"))
         (rule "polySimp_sepPosMonomial" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1"))
         (rule "polySimp_rightDist" (formula "1") (term "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1"))
         (rule "polySimp_mulComm0" (formula "1") (term "0,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "12"))
         (rule "polySimp_mulLiterals" (formula "12") (term "0"))
         (rule "inEqSimp_exactShadow1" (formula "12") (ifseqformula "11"))
         (rule "greater_literals" (formula "12") (term "0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
         (rule "polySimp_rightDist" (formula "12") (term "0,0"))
         (rule "mul_literals" (formula "12") (term "0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "12") (term "0"))
         (rule "add_literals" (formula "12") (term "1,1,0"))
         (rule "polySimp_elimOne" (formula "12") (term "1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "12"))
         (rule "mul_literals" (formula "12") (term "1"))
         (rule "Definition_axiom_for_isClassifiedAs_in_de_wiesler_Tree" (formula "14") (term "0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "translateJavaSubInt" (formula "14") (term "1,0,1"))
         (rule "translateJavaSubInt" (formula "14") (term "0,2,0,1,0"))
         (rule "andLeft" (formula "14"))
         (rule "polySimp_elimSub" (formula "15") (term "1,0"))
         (rule "mul_literals" (formula "15") (term "1,1,0"))
         (rule "polySimp_elimSub" (formula "14") (term "0,2,0,1"))
         (rule "mul_literals" (formula "14") (term "1,0,2,0,1"))
         (rule "polySimp_addComm0" (formula "15") (term "1,0"))
         (rule "polySimp_addComm1" (formula "14") (term "0,2,0,1"))
         (rule "polySimp_addComm0" (formula "14") (term "0,0,2,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "14") (term "0"))
         (rule "add_zero_right" (formula "14") (term "0,0"))
         (rule "polySimp_rightDist" (formula "14") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0"))
         (rule "polySimp_mulComm0" (formula "14") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "14") (term "0,0"))
         (rule "inEqSimp_ltToLeq" (formula "15") (term "0"))
         (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0"))
         (rule "mul_literals" (formula "15") (term "0,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "15") (term "0,0,0"))
         (rule "add_literals" (formula "15") (term "0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "15") (term "0,0"))
         (rule "polySimp_addComm1" (formula "15") (term "0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "15") (term "0,0"))
         (rule "add_literals" (formula "15") (term "1,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "14") (term "1"))
         (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "15") (term "1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0"))
         (rule "polySimp_mulComm0" (formula "14") (term "1,0"))
         (rule "polySimp_rightDist" (formula "14") (term "1,0"))
         (rule "mul_literals" (formula "14") (term "0,1,0"))
         (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0"))
         (rule "polySimp_elimOne" (formula "14") (term "1,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0"))
         (rule "polySimp_mulLiterals" (formula "15") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1"))
         (rule "polySimp_mulComm0" (formula "14") (term "1,1"))
         (rule "polySimp_rightDist" (formula "14") (term "1,1"))
         (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1"))
         (rule "mul_literals" (formula "14") (term "0,1,1"))
         (rule "polySimp_elimOne" (formula "14") (term "1,1,1"))
         (rule "Class_invariant_axiom_for_de_wiesler_PartitionResult" (formula "16"))
         (rule "true_left" (formula "16"))
         (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "8"))
          (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "2")) (ifInst ""  (formula "16")))
         (rule "closeFalse" (formula "8"))
      )
   )
)
(branch "Exceptional Post (classify)"
    (builtin "One Step Simplification" (formula "9"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "translateJavaSubInt" (formula "7") (term "3,0,0,1,0,1"))
   (rule "translateJavaMulInt" (formula "7") (term "1,1,0,0,1"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "9"))
   (rule "notLeft" (formula "7"))
   (rule "close" (formula "11") (ifseqformula "10"))
)
(branch "Pre (classify)"
    (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "2")))
   (rule "commute_and" (formula "8"))
   (rule "methodCallWithAssignmentUnfoldTarget" (formula "7") (term "1") (inst "#v0=t"))
   (rule "variableDeclaration" (formula "7") (term "1") (newnames "t_1"))
   (rule "assignment_read_attribute_this_final" (formula "7"))
    (builtin "One Step Simplification" (formula "7"))
    (builtin "Use Operation Contract" (formula "7") (newnames "heapBefore_classify_2,result_22,exc_26") (contract "de.wiesler.Tree[de.wiesler.Tree::classify(int)].JML normal_behavior operation contract.0"))
   (branch "Post (classify)"
       (builtin "One Step Simplification" (formula "8"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "translateJavaSubInt" (formula "7") (term "3,0,0,1,0,1"))
      (rule "translateJavaMulInt" (formula "7") (term "1,1,0,0,1"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "9"))
      (rule "eqSymm" (formula "8"))
      (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "12"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "polySimp_elimSub" (formula "11") (term "3,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1"))
      (rule "assignment" (formula "13") (term "1"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "variableDeclaration" (formula "13") (term "1") (newnames "bucket"))
      (rule "ifElseUnfold" (formula "13") (term "1") (inst "#boolv=x_2"))
      (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_2"))
      (rule "assignment_read_attribute_this_final" (formula "13"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "ifElseSplit" (formula "13"))
      (branch "if x_2 true"
          (builtin "One Step Simplification" (formula "14"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "variableDeclarationAssign" (formula "14") (term "1"))
         (rule "variableDeclaration" (formula "14") (term "1") (newnames "bucket_index"))
         (rule "compound_subtraction_2" (formula "14") (term "1") (inst "#v0=x_2") (inst "#v1=x_3"))
         (rule "variableDeclarationAssign" (formula "14") (term "1"))
         (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_4"))
         (rule "assignment" (formula "14") (term "1"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "variableDeclarationAssign" (formula "14") (term "1"))
         (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_3"))
         (rule "compound_division_1" (formula "14") (term "1") (inst "#v=x_5"))
         (rule "variableDeclarationAssign" (formula "14") (term "1"))
         (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_5"))
         (rule "assignment_read_attribute_this_final" (formula "14"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "assignmentDivisionInt" (formula "14"))
         (branch "Case 1"
             (builtin "One Step Simplification" (formula "14"))
            (rule "translateJavaDivInt" (formula "14") (term "0,1,0"))
            (rule "assignmentSubtractionInt" (formula "14") (term "1"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "translateJavaSubInt" (formula "14") (term "0,1,0"))
            (rule "polySimp_elimSub" (formula "14") (term "0,1,0"))
            (rule "variableDeclarationAssign" (formula "14") (term "1"))
            (rule "variableDeclaration" (formula "14") (term "1") (newnames "equal_to_splitter"))
            (rule "compound_assignment_2" (formula "14") (term "1") (inst "#v=x_2"))
            (rule "variableDeclarationAssign" (formula "14") (term "1"))
            (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_6"))
            (rule "methodCallWithAssignmentUnfoldArguments" (formula "14") (term "1"))
            (rule "variableDeclarationAssign" (formula "14") (term "1"))
            (rule "variableDeclaration" (formula "14") (term "1") (newnames "var"))
            (rule "assignment" (formula "14") (term "1"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "variableDeclarationAssign" (formula "14") (term "1"))
            (rule "variableDeclaration" (formula "14") (term "1") (newnames "var_1"))
            (rule "eval_order_array_access4" (formula "14") (term "1") (inst "#v0=x_arr"))
            (rule "variableDeclarationAssign" (formula "14") (term "1"))
            (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_arr"))
            (rule "assignment_read_attribute_this_final" (formula "14"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "assignment_array2" (formula "14"))
            (branch "Normal Execution (x_arr != null)"
                (builtin "One Step Simplification" (formula "14"))
               (rule "onlyCreatedObjectsAreReferencedFinal" (formula "16") (term "1,1") (ifseqformula "3") (ifseqformula "4"))
               (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "16"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "applyEq" (formula "13") (term "1,0") (ifseqformula "1"))
               (rule "applyEq" (formula "17") (term "0,1,2,1") (ifseqformula "1"))
               (rule "applyEq" (formula "17") (term "0,1,2,0") (ifseqformula "1"))
               (rule "applyEq" (formula "13") (term "0,0,1,3,0") (ifseqformula "1"))
               (rule "applyEq" (formula "17") (term "1,1") (ifseqformula "1"))
               (rule "applyEq" (formula "14") (term "1") (ifseqformula "1"))
               (rule "applyEq" (formula "16") (term "1,0") (ifseqformula "1"))
               (rule "applyEq" (formula "10") (term "1,0") (ifseqformula "1"))
               (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "12") (term "0,0,1") (ifseqformula "1"))
               (rule "applyEq" (formula "17") (term "1,0") (ifseqformula "1"))
               (rule "onlyCreatedObjectsAreReferencedFinal" (formula "10") (term "1,2,0") (ifseqformula "4") (ifseqformula "5"))
               (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "16") (term "1") (inst "#v0=x_7"))
               (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_7"))
               (rule "variableDeclarationAssign" (formula "16") (term "1"))
               (rule "variableDeclaration" (formula "16") (term "1") (newnames "a"))
               (rule "assignment" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "variableDeclarationAssign" (formula "16") (term "1"))
               (rule "variableDeclaration" (formula "16") (term "1") (newnames "b"))
               (rule "assignment" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_cmp,savedHeapBefore_cmp"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "returnUnfold" (formula "16") (term "1") (inst "#v0=x_8"))
               (rule "variableDeclarationAssign" (formula "16") (term "1"))
               (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_8"))
               (rule "less_than_comparison_simple" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "methodCallReturn" (formula "16") (term "1"))
               (rule "assignment" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "methodCallEmpty" (formula "16") (term "1"))
               (rule "blockEmpty" (formula "16") (term "1"))
               (rule "assignment" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "blockEmpty" (formula "16") (term "1"))
               (rule "compound_assignment_1_new" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "compound_subtraction_2" (formula "16") (term "1") (inst "#v0=x_1") (inst "#v1=x_2"))
               (rule "variableDeclarationAssign" (formula "16") (term "1"))
               (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_1"))
               (rule "compound_addition_2" (formula "16") (term "1") (inst "#v0=x_3") (inst "#v1=x_4"))
               (rule "variableDeclarationAssign" (formula "16") (term "1"))
               (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_9"))
               (rule "assignmentMultiplicationInt" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "translateJavaMulInt" (formula "16") (term "0,1,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "0,1,0"))
               (rule "variableDeclarationAssign" (formula "16") (term "1"))
               (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_10"))
               (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "16") (term "1") (inst "#v0=x_11"))
               (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_11"))
               (rule "variableDeclarationAssign" (formula "16") (term "1"))
               (rule "variableDeclaration" (formula "16") (term "1") (newnames "b_1"))
               (rule "assignment" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_toInt,savedHeapBefore_toInt"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "returnUnfold" (formula "16") (term "1") (inst "#v0=x_12"))
               (rule "variableDeclarationAssign" (formula "16") (term "1"))
               (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_12"))
               (rule "condition_simple" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "ifthenelse_negated" (formula "16") (term "0,1,0"))
               (rule "methodCallReturn" (formula "16") (term "1"))
               (rule "assignment" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "methodCallEmpty" (formula "16") (term "1"))
               (rule "blockEmpty" (formula "16") (term "1"))
               (rule "assignment" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "assignmentAdditionInt" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "translateJavaAddInt" (formula "16") (term "0,1,0"))
               (rule "variableDeclarationAssign" (formula "16") (term "1"))
               (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_13"))
               (rule "assignment_read_attribute_this_final" (formula "16"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "assignmentSubtractionInt" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "translateJavaSubInt" (formula "16") (term "0,1,0"))
               (rule "polySimp_elimSub" (formula "16") (term "0,1,0"))
               (rule "polySimp_addComm1" (formula "16") (term "0,1,0"))
               (rule "blockEmpty" (formula "16") (term "1"))
               (rule "methodCallReturn" (formula "16") (term "1"))
               (rule "assignment" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "methodCallEmpty" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "emptyModality" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "notRight" (formula "16"))
               (rule "polySimp_homoEq" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0"))
               (rule "polySimp_rightDist" (formula "1") (term "0,1,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
               (rule "polySimp_elimOne" (formula "1") (term "1,0,1,0"))
               (rule "polySimp_mulAssoc" (formula "1") (term "0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "14"))
               (rule "polySimp_mulAssoc" (formula "14") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "14") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,1,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0,0,0,1,0"))
               (rule "polySimp_sepNegMonomial" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "14"))
               (rule "polySimp_mulLiterals" (formula "14") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
               (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
               (rule "inEqSimp_exactShadow1" (formula "14") (ifseqformula "13"))
               (rule "greater_literals" (formula "14") (term "0"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0"))
               (rule "polySimp_rightDist" (formula "14") (term "0,0"))
               (rule "mul_literals" (formula "14") (term "0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "14") (term "0"))
               (rule "add_literals" (formula "14") (term "1,1,0"))
               (rule "polySimp_elimOne" (formula "14") (term "1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "14"))
               (rule "mul_literals" (formula "14") (term "1"))
               (rule "Contract_axiom_for_isClassifiedAs_in_Tree" (formula "16") (term "0"))
                (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "18")) (ifInst ""  (formula "5")) (ifInst ""  (formula "19")) (ifInst ""  (formula "18")))
               (rule "true_left" (formula "16"))
               (rule "Class_invariant_axiom_for_de_wiesler_PartitionResult" (formula "17"))
               (rule "true_left" (formula "17"))
               (rule "Definition_axiom_for_isClassifiedAs_in_de_wiesler_Tree" (formula "16") (term "0"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "translateJavaSubInt" (formula "16") (term "1,0,1"))
               (rule "translateJavaSubInt" (formula "16") (term "0,2,0,1,0"))
               (rule "andLeft" (formula "16"))
               (rule "polySimp_elimSub" (formula "16") (term "0,2,0,1"))
               (rule "mul_literals" (formula "16") (term "1,0,2,0,1"))
               (rule "polySimp_elimSub" (formula "17") (term "1,0"))
               (rule "mul_literals" (formula "17") (term "1,1,0"))
               (rule "polySimp_addComm1" (formula "16") (term "0,2,0,1"))
               (rule "polySimp_addComm0" (formula "17") (term "1,0"))
               (rule "polySimp_addComm0" (formula "16") (term "0,0,2,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "16") (term "0"))
               (rule "add_zero_right" (formula "16") (term "0,0"))
               (rule "polySimp_rightDist" (formula "16") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "16") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "17") (term "0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0"))
               (rule "mul_literals" (formula "17") (term "0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "17") (term "0,0,0"))
               (rule "add_literals" (formula "17") (term "0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "17") (term "0,0"))
               (rule "polySimp_addComm1" (formula "17") (term "0,0,0"))
               (rule "polySimp_pullOutFactor3b" (formula "17") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "16") (term "1"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "17") (term "1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
               (rule "polySimp_rightDist" (formula "16") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0"))
               (rule "mul_literals" (formula "16") (term "0,1,0"))
               (rule "polySimp_elimOne" (formula "16") (term "1,1,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,1"))
               (rule "polySimp_rightDist" (formula "16") (term "1,1"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1"))
               (rule "mul_literals" (formula "16") (term "0,1,1"))
               (rule "polySimp_elimOne" (formula "16") (term "1,1,1"))
               (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "9"))
                (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "2")) (ifInst ""  (formula "3")))
               (rule "closeFalse" (formula "9"))
            )
            (branch "Null Reference (x_arr = null)"
                (builtin "One Step Simplification" (formula "1"))
               (rule "false_right" (formula "15"))
               (rule "inEqSimp_ltToLeq" (formula "12"))
               (rule "polySimp_mulAssoc" (formula "12") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "12") (term "0"))
               (rule "applyEq" (formula "13") (term "1,2,0") (ifseqformula "1"))
               (rule "applyEq" (formula "10") (term "1,2,0") (ifseqformula "1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "12"))
               (rule "polySimp_mulLiterals" (formula "12") (term "0"))
               (rule "inEqSimp_exactShadow1" (formula "12") (ifseqformula "11"))
               (rule "greater_literals" (formula "12") (term "0"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
               (rule "polySimp_rightDist" (formula "12") (term "0,0"))
               (rule "mul_literals" (formula "12") (term "0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "12") (term "0"))
               (rule "add_literals" (formula "12") (term "1,1,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "12"))
               (rule "mul_literals" (formula "12") (term "1"))
               (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "15"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "andLeft" (formula "15"))
               (rule "andLeft" (formula "15"))
               (rule "andLeft" (formula "15"))
               (rule "andLeft" (formula "15"))
               (rule "andLeft" (formula "17"))
               (rule "andLeft" (formula "15"))
               (rule "andLeft" (formula "15"))
               (rule "andLeft" (formula "17"))
               (rule "notLeft" (formula "16"))
               (rule "notLeft" (formula "15"))
               (rule "inEqSimp_commuteLeq" (formula "20"))
               (rule "inEqSimp_commuteLeq" (formula "19"))
               (rule "inEqSimp_commuteLeq" (formula "18"))
               (rule "inEqSimp_commuteLeq" (formula "15"))
               (rule "applyEq" (formula "20") (term "1") (ifseqformula "17"))
               (rule "translateJavaSubInt" (formula "21") (term "3,0"))
               (rule "polySimp_elimSub" (formula "21") (term "3,0"))
               (rule "mul_literals" (formula "21") (term "1,3,0"))
               (rule "polySimp_addComm0" (formula "21") (term "3,0"))
               (rule "applyEq" (formula "11") (term "0") (ifseqformula "17"))
               (rule "applyEq" (formula "14") (term "0,1,3,0") (ifseqformula "17"))
               (rule "applyEq" (formula "13") (term "0,0") (ifseqformula "17"))
               (rule "applyEq" (formula "21") (term "1,3,0") (ifseqformula "17"))
               (rule "applyEq" (formula "18") (term "0") (ifseqformula "17"))
               (rule "applyEq" (formula "19") (term "1") (ifseqformula "17"))
               (rule "inEqSimp_exactShadow1" (formula "13") (ifseqformula "11"))
               (rule "greater_literals" (formula "13") (term "0"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
               (rule "polySimp_rightDist" (formula "13") (term "0,0"))
               (rule "mul_literals" (formula "13") (term "0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "13") (term "0"))
               (rule "add_literals" (formula "13") (term "1,1,0"))
               (rule "polySimp_elimOne" (formula "13") (term "1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "13"))
               (rule "mul_literals" (formula "13") (term "1"))
               (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "11"))
               (rule "mul_literals" (formula "18") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "18"))
               (rule "mul_literals" (formula "18") (term "1"))
               (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "18"))
               (rule "leq_literals" (formula "12") (term "0"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "true_left" (formula "12"))
               (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "8"))
                (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "1")) (ifInst ""  (formula "2")))
               (rule "closeFalse" (formula "8"))
            )
            (branch "Index Out of Bounds (x_arr != null, but bucket_index Out of Bounds!)"
               (rule "false_right" (formula "15"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "inEqSimp_ltToLeq" (formula "12"))
               (rule "polySimp_mulAssoc" (formula "12") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "12") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "1") (term "0,0,1"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "12"))
               (rule "polySimp_mulLiterals" (formula "12") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0,1"))
               (rule "polySimp_elimOne" (formula "1") (term "0,1"))
               (rule "inEqSimp_exactShadow1" (formula "12") (ifseqformula "11"))
               (rule "greater_literals" (formula "12") (term "0"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
               (rule "polySimp_rightDist" (formula "12") (term "0,0"))
               (rule "mul_literals" (formula "12") (term "0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "12") (term "0"))
               (rule "add_literals" (formula "12") (term "1,1,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "12"))
               (rule "mul_literals" (formula "12") (term "1"))
               (rule "Contract_axiom_for_isClassifiedAs_in_Tree" (formula "14") (term "0"))
               (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "16"))
                (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "16")) (ifInst ""  (formula "4")) (ifInst ""  (formula "18")))
               (rule "true_left" (formula "14"))
               (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "15"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "andLeft" (formula "15"))
               (rule "andLeft" (formula "15"))
               (rule "andLeft" (formula "15"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "15"))
               (rule "andLeft" (formula "15"))
               (rule "andLeft" (formula "15"))
               (rule "andLeft" (formula "17"))
               (rule "notLeft" (formula "15"))
               (rule "notLeft" (formula "15"))
               (rule "inEqSimp_commuteLeq" (formula "20"))
               (rule "inEqSimp_commuteLeq" (formula "18"))
               (rule "inEqSimp_commuteLeq" (formula "19"))
               (rule "inEqSimp_commuteLeq" (formula "15"))
               (rule "applyEq" (formula "19") (term "1") (ifseqformula "17"))
               (rule "applyEq" (formula "18") (term "0") (ifseqformula "17"))
               (rule "applyEq" (formula "13") (term "0,0") (ifseqformula "17"))
               (rule "applyEq" (formula "11") (term "0") (ifseqformula "17"))
               (rule "applyEq" (formula "20") (term "1") (ifseqformula "17"))
               (rule "applyEq" (formula "14") (term "0,1,3,0") (ifseqformula "17"))
               (rule "translateJavaSubInt" (formula "21") (term "3,0"))
               (rule "polySimp_elimSub" (formula "21") (term "3,0"))
               (rule "mul_literals" (formula "21") (term "1,3,0"))
               (rule "polySimp_addComm0" (formula "21") (term "3,0"))
               (rule "applyEq" (formula "21") (term "1,3,0") (ifseqformula "17"))
               (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "11"))
               (rule "mul_literals" (formula "18") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "18"))
               (rule "mul_literals" (formula "18") (term "1"))
               (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "18"))
               (rule "leq_literals" (formula "12") (term "0"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "true_left" (formula "12"))
               (rule "inEqSimp_exactShadow1" (formula "12") (ifseqformula "11"))
               (rule "greater_literals" (formula "12") (term "0"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
               (rule "polySimp_rightDist" (formula "12") (term "0,0"))
               (rule "mul_literals" (formula "12") (term "0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "12") (term "0"))
               (rule "add_literals" (formula "12") (term "1,1,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "12"))
               (rule "mul_literals" (formula "12") (term "1"))
               (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "18"))
               (rule "leq_literals" (formula "12") (term "0"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "true_left" (formula "12"))
               (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "8"))
                (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "24")) (ifInst ""  (formula "2")))
               (rule "translateJavaMulInt" (formula "8") (term "1,1,0,0,0,0"))
               (rule "translateJavaSubInt" (formula "8") (term "0,2,0,1,0"))
               (rule "translateJavaSubInt" (formula "8") (term "0,2,1,1,0"))
               (rule "andLeft" (formula "8"))
               (rule "andLeft" (formula "8"))
               (rule "andLeft" (formula "8"))
               (rule "andLeft" (formula "8"))
               (rule "andLeft" (formula "8"))
               (rule "andLeft" (formula "8"))
               (rule "notLeft" (formula "8"))
               (rule "andLeft" (formula "8"))
               (rule "eqSymm" (formula "13"))
               (rule "polySimp_elimSub" (formula "13") (term "0,2,0"))
               (rule "mul_literals" (formula "13") (term "1,0,2,0"))
               (rule "eqSymm" (formula "13"))
               (rule "polySimp_elimSub" (formula "13") (term "0,2,0"))
               (rule "mul_literals" (formula "13") (term "1,0,2,0"))
               (rule "eqSymm" (formula "13"))
               (rule "polySimp_mulComm0" (formula "10") (term "1"))
               (rule "eqSymm" (formula "10"))
               (rule "polySimp_addComm0" (formula "13") (term "0,2,1"))
               (rule "polySimp_addComm0" (formula "13") (term "0,2,0"))
               (rule "inEqSimp_commuteLeq" (formula "8"))
               (rule "applyEq" (formula "33") (term "1,2,0") (ifseqformula "11"))
               (rule "applyEq" (formula "26") (term "0,0") (ifseqformula "11"))
               (rule "inEqSimp_commuteGeq" (formula "26"))
               (rule "applyEq" (formula "33") (term "1,2,1") (ifseqformula "11"))
               (rule "applyEq" (formula "27") (term "1,0") (ifseqformula "11"))
               (rule "applyEq" (formula "30") (term "0") (ifseqformula "11"))
               (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "22"))
               (rule "applyEq" (formula "12") (term "3,0") (ifseqformula "22"))
               (rule "applyEq" (formula "13") (term "1,0,2,0") (ifseqformula "22"))
               (rule "eqSymm" (formula "13"))
               (rule "applyEq" (formula "32") (term "0") (ifseqformula "16"))
               (rule "eqSymm" (formula "32"))
               (rule "applyEq" (formula "18") (term "0") (ifseqformula "10"))
               (rule "applyEq" (formula "13") (term "1,0,2,0") (ifseqformula "22"))
               (rule "eqSymm" (formula "13"))
               (rule "newSym_eq" (formula "10") (inst "l=l_0") (inst "newSymDef=mul(int::final(self,
               de.wiesler.Classifier::$num_buckets),
    Z(0(#)))"))
               (rule "times_zero_1" (formula "10") (term "1,1"))
               (rule "add_zero_right" (formula "10") (term "1"))
               (rule "applyEq" (formula "28") (term "1,3,0") (ifseqformula "10"))
               (rule "applyEq" (formula "25") (term "0") (ifseqformula "10"))
               (rule "applyEq" (formula "13") (term "3,0") (ifseqformula "10"))
               (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "10"))
               (rule "eqSymm" (formula "11"))
               (rule "applyEq" (formula "18") (term "0") (ifseqformula "10"))
               (rule "inEqSimp_commuteLeq" (formula "18"))
               (rule "applyEq" (formula "27") (term "0") (ifseqformula "10"))
               (rule "inEqSimp_commuteLeq" (formula "27"))
               (rule "applyEq" (formula "26") (term "1") (ifseqformula "10"))
               (rule "applyEq" (formula "14") (term "1,0,2,0") (ifseqformula "10"))
               (rule "eqSymm" (formula "14"))
               (rule "applyEq" (formula "20") (term "0,1,3,0") (ifseqformula "10"))
               (rule "polySimp_addComm0" (formula "20") (term "3,0"))
               (rule "applyEq" (formula "9") (term "0") (ifseqformula "11"))
               (rule "applyEq" (formula "8") (term "0") (ifseqformula "11"))
               (rule "applyEq" (formula "19") (term "0") (ifseqformula "11"))
               (rule "inEqSimp_homoInEq1" (formula "19"))
               (rule "polySimp_mulLiterals" (formula "19") (term "1,0"))
               (rule "polySimp_addComm1" (formula "19") (term "0"))
               (rule "applyEq" (formula "1") (term "0,0,1,1,0") (ifseqformula "11"))
               (rule "polySimp_addComm0" (formula "1") (term "1,0"))
               (rule "applyEq" (formula "14") (term "1,0,2,0") (ifseqformula "10"))
               (rule "eqSymm" (formula "14"))
               (rule "applyEq" (formula "1") (term "0,0,1") (ifseqformula "11"))
               (rule "inEqSimp_homoInEq1" (formula "1") (term "1"))
               (rule "polySimp_addComm1" (formula "1") (term "0,1"))
               (rule "applyEq" (formula "23") (term "1") (ifseqformula "10"))
               (rule "inEqSimp_sepPosMonomial0" (formula "19"))
               (rule "polySimp_mulComm0" (formula "19") (term "1"))
               (rule "polySimp_rightDist" (formula "19") (term "1"))
               (rule "mul_literals" (formula "19") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "19") (term "1,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,1"))
               (rule "polySimp_rightDist" (formula "1") (term "1,1"))
               (rule "mul_literals" (formula "1") (term "0,1,1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1,1"))
               (rule "inEqSimp_subsumption6" (formula "8") (ifseqformula "25"))
               (rule "mul_literals" (formula "8") (term "1,1,0"))
               (rule "greater_literals" (formula "8") (term "0,0"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "leq_literals" (formula "8") (term "0"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "true_left" (formula "8"))
               (rule "elimGcdLeq_antec" (formula "8") (inst "elimGcdRightDiv=Z(4(6(#)))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
               (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0,0,1,0"))
               (rule "neg_literal" (formula "8") (term "0,0,0,0,0,1,0"))
               (rule "leq_literals" (formula "8") (term "0,0"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
               (rule "polySimp_addLiterals" (formula "8") (term "0,0,0,0"))
               (rule "add_literals" (formula "8") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
               (rule "add_literals" (formula "8") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "8") (term "1,0,0"))
               (rule "add_zero_right" (formula "8") (term "0,0"))
               (rule "qeq_literals" (formula "8") (term "0"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "true_left" (formula "8"))
               (rule "inEqSimp_exactShadow3" (formula "22") (ifseqformula "17"))
               (rule "mul_literals" (formula "22") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "22") (term "0"))
               (rule "add_literals" (formula "22") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "22"))
               (rule "mul_literals" (formula "22") (term "1"))
               (rule "inEqSimp_subsumption6" (formula "22") (ifseqformula "24"))
               (rule "greater_literals" (formula "22") (term "0,0"))
                (builtin "One Step Simplification" (formula "22"))
               (rule "mul_literals" (formula "22") (term "1,0"))
               (rule "leq_literals" (formula "22") (term "0"))
                (builtin "One Step Simplification" (formula "22"))
               (rule "true_left" (formula "22"))
               (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "17"))
               (rule "polySimp_mulComm0" (formula "16") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "16") (term "0"))
               (rule "polySimp_addComm0" (formula "16") (term "0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "16") (term "0"))
               (rule "add_literals" (formula "16") (term "1,1,0"))
               (rule "polySimp_elimOne" (formula "16") (term "1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "16"))
               (rule "mul_literals" (formula "16") (term "1"))
               (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "24"))
               (rule "leq_literals" (formula "16") (term "0"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "true_left" (formula "16"))
               (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "11") (term "0"))
               (rule "replace_known_right" (formula "11") (term "0,0,0") (ifseqformula "30"))
                (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "4")) (ifInst ""  (formula "12")))
               (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "12") (term "0") (inst "i=i") (inst "j=j"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,1,0"))
               (rule "mul_literals" (formula "12") (term "0,1,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
               (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
               (rule "nnf_imp2or" (formula "12") (term "0"))
               (rule "nnf_notAnd" (formula "12") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
               (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
               (rule "mul_literals" (formula "12") (term "1,0,0,0"))
               (rule "nnf_imp2or" (formula "12") (term "0,1,0"))
               (rule "nnf_notAnd" (formula "12") (term "0,0,1,0"))
               (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,1,0"))
               (rule "mul_literals" (formula "12") (term "0,1,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,1,0"))
               (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,1,0"))
               (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,1,0"))
               (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,1,0"))
               (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,1,0"))
               (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "27") (term "0"))
               (rule "replace_known_left" (formula "27") (term "0,1") (ifseqformula "28"))
                (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "31")) (ifInst ""  (formula "4")))
               (rule "Definition_axiom_for_isClassifiedAs_in_de_wiesler_Tree" (formula "19") (term "0"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "translateJavaSubInt" (formula "19") (term "0,2,0,1,0"))
               (rule "translateJavaSubInt" (formula "19") (term "1,0,1"))
               (rule "andLeft" (formula "19"))
               (rule "polySimp_elimSub" (formula "19") (term "0,2,0,1"))
               (rule "mul_literals" (formula "19") (term "1,0,2,0,1"))
               (rule "polySimp_elimSub" (formula "20") (term "1,0"))
               (rule "mul_literals" (formula "20") (term "1,1,0"))
               (rule "polySimp_addComm1" (formula "19") (term "0,2,0,1"))
               (rule "polySimp_addComm0" (formula "20") (term "1,0"))
               (rule "polySimp_addComm0" (formula "19") (term "0,0,2,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "19") (term "0"))
               (rule "add_zero_right" (formula "19") (term "0,0"))
               (rule "polySimp_rightDist" (formula "19") (term "1,0,0"))
               (rule "polySimp_mulAssoc" (formula "19") (term "0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "19") (term "0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "19") (term "0,1,0,0"))
               (rule "polySimp_elimOne" (formula "19") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "19") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "20") (term "0"))
               (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0"))
               (rule "mul_literals" (formula "20") (term "0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "20") (term "0,0,0"))
               (rule "add_literals" (formula "20") (term "0,0,0,0"))
               (rule "polySimp_addComm1" (formula "20") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "20") (term "0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "19") (term "1"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "20") (term "1"))
               (rule "applyEq" (formula "20") (term "0,1,0,0") (ifseqformula "23"))
               (rule "polySimp_addComm1" (formula "20") (term "0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "20") (term "0,0,0"))
               (rule "add_literals" (formula "20") (term "1,1,0,0,0"))
               (rule "applyEq" (formula "19") (term "1,1,0,1") (ifseqformula "10"))
               (rule "applyEq" (formula "20") (term "1,0,1") (ifseqformula "10"))
               (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0"))
               (rule "polySimp_mulLiterals" (formula "19") (term "0,0"))
               (rule "polySimp_elimOne" (formula "19") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0"))
               (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
               (rule "polySimp_rightDist" (formula "20") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0"))
               (rule "mul_literals" (formula "20") (term "0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,1"))
               (rule "polySimp_rightDist" (formula "19") (term "1,1"))
               (rule "mul_literals" (formula "19") (term "0,1,1"))
               (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1"))
               (rule "polySimp_elimOne" (formula "19") (term "1,1,1"))
               (rule "commute_or" (formula "1"))
               (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "14"))
                (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "31")) (ifInst ""  (formula "22")))
               (rule "translateJavaSubInt" (formula "14") (term "3,0,1"))
               (rule "andLeft" (formula "14"))
               (rule "andLeft" (formula "14"))
               (rule "andLeft" (formula "14"))
               (rule "andLeft" (formula "15"))
               (rule "andLeft" (formula "14"))
               (rule "andLeft" (formula "14"))
               (rule "notLeft" (formula "14"))
               (rule "polySimp_elimSub" (formula "19") (term "3,0"))
               (rule "mul_literals" (formula "19") (term "1,3,0"))
               (rule "polySimp_addComm0" (formula "19") (term "3,0"))
               (rule "inEqSimp_commuteLeq" (formula "18"))
               (rule "inEqSimp_commuteLeq" (formula "17"))
               (rule "inEqSimp_commuteLeq" (formula "16"))
               (rule "inEqSimp_commuteLeq" (formula "14"))
               (rule "applyEq" (formula "16") (term "1") (ifseqformula "27"))
               (rule "applyEq" (formula "17") (term "1,3,0") (ifseqformula "14"))
               (rule "applyEq" (formula "16") (term "1") (ifseqformula "26"))
               (rule "applyEq" (formula "33") (term "0") (ifseqformula "10"))
               (rule "applyEq" (formula "15") (term "0") (ifseqformula "14"))
               (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "10"))
               (rule "applyEq" (formula "25") (term "0") (ifseqformula "14"))
               (rule "applyEq" (formula "16") (term "1,0") (ifseqformula "10"))
               (rule "applyEq" (formula "14") (term "1") (ifseqformula "8"))
               (rule "applyEq" (formula "15") (term "0") (ifseqformula "8"))
               (rule "applyEq" (formula "15") (term "1,3,0") (ifseqformula "8"))
               (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "28") (term "0") (inst "i=i") (inst "j=j"))
                (builtin "One Step Simplification" (formula "28"))
               (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0,1,0"))
               (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0,1,0"))
               (rule "add_literals" (formula "28") (term "0,0,0,1,0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "28") (term "1,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,1,0"))
               (rule "mul_literals" (formula "28") (term "0,1,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "28") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0"))
               (rule "nnf_imp2or" (formula "28") (term "0"))
               (rule "nnf_notAnd" (formula "28") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0"))
               (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "28") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
               (rule "mul_literals" (formula "28") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "28") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0"))
               (rule "nnf_imp2or" (formula "28") (term "0,1,0"))
               (rule "nnf_notAnd" (formula "28") (term "0,0,1,0"))
               (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "28") (term "1,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0,0,1,0"))
               (rule "mul_literals" (formula "28") (term "0,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0,0,1,0"))
               (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0,1,0"))
               (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0,1,0"))
               (rule "add_literals" (formula "28") (term "0,0,0,1,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,1,0"))
               (rule "mul_literals" (formula "28") (term "0,1,1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,1,0"))
               (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "11") (term "0"))
               (rule "replace_known_left" (formula "11") (term "1,0") (ifseqformula "4"))
                (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "32")) (ifInst ""  (formula "12")))
               (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "12") (term "0") (inst "i=i"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "translateJavaAddInt" (formula "12") (term "0,2,1,1,0"))
               (rule "translateJavaSubInt" (formula "12") (term "1,1,0,0"))
               (rule "polySimp_elimSub" (formula "12") (term "1,1,0,0"))
               (rule "mul_literals" (formula "12") (term "1,1,1,0,0"))
               (rule "polySimp_addComm0" (formula "12") (term "0,2,1,1,0"))
               (rule "polySimp_addComm0" (formula "12") (term "1,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
               (rule "nnf_imp2or" (formula "12") (term "0"))
               (rule "nnf_notAnd" (formula "12") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
               (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
               (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
               (rule "mul_literals" (formula "12") (term "1,0,0,0"))
               (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "28") (term "0") (inst "i=i"))
                (builtin "One Step Simplification" (formula "28"))
               (rule "translateJavaAddInt" (formula "28") (term "0,2,1,1,0"))
               (rule "translateJavaSubInt" (formula "28") (term "1,1,0,0"))
               (rule "polySimp_elimSub" (formula "28") (term "1,1,0,0"))
               (rule "mul_literals" (formula "28") (term "1,1,1,0,0"))
               (rule "polySimp_addComm0" (formula "28") (term "0,2,1,1,0"))
               (rule "polySimp_addComm1" (formula "28") (term "1,1,0,0"))
               (rule "add_literals" (formula "28") (term "0,1,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "28") (term "1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "28") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0"))
               (rule "nnf_imp2or" (formula "28") (term "0"))
               (rule "nnf_notAnd" (formula "28") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "28") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0"))
               (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "28") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
               (rule "mul_literals" (formula "28") (term "1,0,0,0"))
               (rule "commute_or" (formula "13") (term "0,0,1,0"))
               (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "11") (term "0"))
               (rule "replace_known_left" (formula "11") (term "0,1") (ifseqformula "12"))
                (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "33")) (ifInst ""  (formula "4")))
               (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "12") (term "0") (inst "i=i") (inst "j=j"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,1,0"))
               (rule "mul_literals" (formula "12") (term "0,1,1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
               (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
               (rule "nnf_imp2or" (formula "12") (term "0"))
               (rule "nnf_notAnd" (formula "12") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
               (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
               (rule "mul_literals" (formula "12") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
               (rule "nnf_imp2or" (formula "12") (term "0,1,0"))
               (rule "nnf_notAnd" (formula "12") (term "0,0,1,0"))
               (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,1,0"))
               (rule "mul_literals" (formula "12") (term "0,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,1,0"))
               (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,1,0"))
               (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,1,0"))
               (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,1,0"))
               (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,1,0"))
               (rule "commute_or" (formula "30") (term "0,0,1,0"))
               (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "11") (term "0") (inst "i=i"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "translateJavaAddInt" (formula "11") (term "0,2,1,1,0"))
               (rule "translateJavaSubInt" (formula "11") (term "1,1,0,0"))
               (rule "polySimp_elimSub" (formula "11") (term "1,1,0,0"))
               (rule "mul_literals" (formula "11") (term "1,1,1,0,0"))
               (rule "polySimp_addComm0" (formula "11") (term "0,2,1,1,0"))
               (rule "polySimp_addComm0" (formula "11") (term "1,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
               (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
               (rule "nnf_imp2or" (formula "11") (term "0"))
               (rule "nnf_notAnd" (formula "11") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
               (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
               (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
               (rule "mul_literals" (formula "11") (term "1,0,0,0"))
               (rule "arrayLengthNotNegative" (formula "27") (term "0"))
               (rule "arrayLengthIsAShort" (formula "26") (term "0"))
                (builtin "One Step Simplification" (formula "26"))
               (rule "true_left" (formula "26"))
               (rule "arrayLengthNotNegative" (formula "26") (term "0"))
               (rule "arrayLengthIsAShort" (formula "29") (term "0"))
                (builtin "One Step Simplification" (formula "29"))
               (rule "true_left" (formula "29"))
               (rule "jdiv_axiom" (formula "1") (term "1,1,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0,0,2,1"))
               (rule "eqSymm" (formula "1"))
               (rule "inEqSimp_subsumption6" (formula "1") (term "0,0") (ifseqformula "26"))
               (rule "mul_literals" (formula "1") (term "1,1,0,0,0"))
               (rule "greater_literals" (formula "1") (term "0,0,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "leq_literals" (formula "1") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "eqSymm" (formula "1"))
               (rule "applyEqRigid" (formula "2") (term "1,1,0") (ifseqformula "1"))
               (rule "applyEqRigid" (formula "2") (term "0,0,1,1") (ifseqformula "1"))
               (rule "polyDiv_pullOut" (formula "2") (term "0,0,1,1") (inst "polyDivCoeff=l_0"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,2,0,0,1,1"))
               (rule "equal_literals" (formula "2") (term "0,0,0,1,1"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "polySimp_pullOutFactor0" (formula "2") (term "0,0,0,0,1,1"))
               (rule "add_literals" (formula "2") (term "1,0,0,0,0,1,1"))
               (rule "times_zero_1" (formula "2") (term "0,0,0,0,1,1"))
               (rule "div_literals" (formula "2") (term "0,0,0,1,1"))
               (rule "add_zero_left" (formula "2") (term "0,0,1,1"))
               (rule "polyDiv_pullOut" (formula "1") (term "1") (inst "polyDivCoeff=l_0"))
               (rule "equal_literals" (formula "1") (term "0,1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,1"))
               (rule "polySimp_pullOutFactor0" (formula "1") (term "0,0,1"))
               (rule "add_literals" (formula "1") (term "1,0,0,1"))
               (rule "times_zero_1" (formula "1") (term "0,0,1"))
               (rule "div_literals" (formula "1") (term "0,1"))
               (rule "add_zero_left" (formula "1") (term "1"))
               (rule "polyDiv_pullOut" (formula "2") (term "1,1,0") (inst "polyDivCoeff=l_0"))
               (rule "equal_literals" (formula "2") (term "0,1,1,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,1,1,0"))
               (rule "polySimp_pullOutFactor0" (formula "2") (term "0,0,1,1,0"))
               (rule "add_literals" (formula "2") (term "1,0,0,1,1,0"))
               (rule "times_zero_1" (formula "2") (term "0,0,1,1,0"))
               (rule "div_literals" (formula "2") (term "0,1,1,0"))
               (rule "add_zero_left" (formula "2") (term "1,1,0"))
               (rule "inEqSimp_contradInEq1" (formula "2") (term "0") (ifseqformula "19"))
               (rule "inEqSimp_homoInEq1" (formula "2") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0"))
               (rule "mul_literals" (formula "2") (term "0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "2") (term "0,0,0"))
               (rule "polySimp_addComm0" (formula "2") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,0"))
               (rule "add_literals" (formula "2") (term "1,1,0,0,0"))
               (rule "times_zero_1" (formula "2") (term "1,0,0,0"))
               (rule "add_zero_right" (formula "2") (term "0,0,0"))
               (rule "leq_literals" (formula "2") (term "0,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "inEqSimp_exactShadow3" (formula "29") (ifseqformula "2"))
               (rule "mul_literals" (formula "29") (term "0,0"))
               (rule "add_zero_left" (formula "29") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "29"))
               (rule "polySimp_mulLiterals" (formula "29") (term "1"))
               (rule "polySimp_elimOne" (formula "29") (term "1"))
               (rule "inEqSimp_exactShadow3" (formula "30") (ifseqformula "2"))
               (rule "polySimp_mulComm0" (formula "30") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "30") (term "0"))
               (rule "polySimp_pullOutFactor0" (formula "30") (term "0,0"))
               (rule "add_literals" (formula "30") (term "1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "30"))
               (rule "polySimp_mulLiterals" (formula "30") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "22") (term "0") (ifseqformula "30"))
               (rule "inEqSimp_homoInEq1" (formula "22") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0"))
               (rule "mul_literals" (formula "22") (term "0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "22") (term "0,0,0"))
               (rule "polySimp_addComm0" (formula "22") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "22") (term "0,0,0"))
               (rule "add_literals" (formula "22") (term "1,1,0,0,0"))
               (rule "times_zero_1" (formula "22") (term "1,0,0,0"))
               (rule "add_zero_right" (formula "22") (term "0,0,0"))
               (rule "leq_literals" (formula "22") (term "0,0"))
                (builtin "One Step Simplification" (formula "22"))
               (rule "true_left" (formula "22"))
               (rule "inEqSimp_contradInEq1" (formula "20") (ifseqformula "29"))
               (rule "andLeft" (formula "20"))
               (rule "inEqSimp_homoInEq1" (formula "20"))
               (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
               (rule "polySimp_rightDist" (formula "20") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0"))
               (rule "mul_literals" (formula "20") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "20") (term "0"))
               (rule "polySimp_addComm0" (formula "20") (term "0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "20") (term "0"))
               (rule "add_literals" (formula "20") (term "1,1,0"))
               (rule "times_zero_1" (formula "20") (term "1,0"))
               (rule "add_zero_right" (formula "20") (term "0"))
               (rule "leq_literals" (formula "20"))
               (rule "closeFalse" (formula "20"))
            )
         )
         (branch "Case 2"
             (builtin "One Step Simplification" (formula "14"))
            (rule "equal_literals" (formula "14") (term "0"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "closeTrue" (formula "14"))
         )
      )
      (branch "if x_2 false"
          (builtin "One Step Simplification" (formula "14"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "elim_double_block_2" (formula "14") (term "1"))
         (rule "compound_subtraction_2" (formula "14") (term "1") (inst "#v0=x_1") (inst "#v1=x_2"))
         (rule "variableDeclarationAssign" (formula "14") (term "1"))
         (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_1"))
         (rule "assignment" (formula "14") (term "1"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "variableDeclarationAssign" (formula "14") (term "1"))
         (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_3"))
         (rule "assignment_read_attribute_this_final" (formula "14"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "assignmentSubtractionInt" (formula "14") (term "1"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "translateJavaSubInt" (formula "14") (term "0,1,0"))
         (rule "polySimp_elimSub" (formula "14") (term "0,1,0"))
         (rule "blockEmpty" (formula "14") (term "1"))
         (rule "methodCallReturn" (formula "14") (term "1"))
         (rule "assignment" (formula "14") (term "1"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "methodCallEmpty" (formula "14") (term "1"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "emptyModality" (formula "14") (term "1"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "notRight" (formula "14"))
         (rule "polySimp_homoEq" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "11"))
         (rule "polySimp_mulAssoc" (formula "11") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "11") (term "0"))
         (rule "polySimp_sepPosMonomial" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1"))
         (rule "polySimp_rightDist" (formula "1") (term "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1"))
         (rule "polySimp_mulComm0" (formula "1") (term "0,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "11"))
         (rule "polySimp_mulLiterals" (formula "11") (term "0"))
         (rule "inEqSimp_exactShadow1" (formula "11") (ifseqformula "10"))
         (rule "greater_literals" (formula "11") (term "0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
         (rule "polySimp_rightDist" (formula "11") (term "0,0"))
         (rule "mul_literals" (formula "11") (term "0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "11") (term "0"))
         (rule "add_literals" (formula "11") (term "1,1,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "11"))
         (rule "mul_literals" (formula "11") (term "1"))
         (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "14"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "andLeft" (formula "14"))
         (rule "andLeft" (formula "14"))
         (rule "andLeft" (formula "14"))
         (rule "andLeft" (formula "15"))
         (rule "andLeft" (formula "14"))
         (rule "andLeft" (formula "14"))
         (rule "andLeft" (formula "14"))
         (rule "andLeft" (formula "16"))
         (rule "notLeft" (formula "14"))
         (rule "notLeft" (formula "14"))
         (rule "inEqSimp_commuteLeq" (formula "19"))
         (rule "inEqSimp_commuteLeq" (formula "18"))
         (rule "inEqSimp_commuteLeq" (formula "17"))
         (rule "inEqSimp_commuteLeq" (formula "14"))
         (rule "applyEq" (formula "17") (term "0") (ifseqformula "16"))
         (rule "applyEq" (formula "18") (term "1") (ifseqformula "16"))
         (rule "applyEq" (formula "10") (term "0") (ifseqformula "16"))
         (rule "translateJavaSubInt" (formula "20") (term "3,0"))
         (rule "polySimp_elimSub" (formula "20") (term "3,0"))
         (rule "mul_literals" (formula "20") (term "1,3,0"))
         (rule "polySimp_addComm0" (formula "20") (term "3,0"))
         (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "16"))
         (rule "applyEq" (formula "19") (term "1") (ifseqformula "16"))
         (rule "applyEq" (formula "13") (term "0,1,3,0") (ifseqformula "16"))
         (rule "applyEq" (formula "20") (term "1,3,0") (ifseqformula "16"))
         (rule "inEqSimp_exactShadow1" (formula "12") (ifseqformula "10"))
         (rule "greater_literals" (formula "12") (term "0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
         (rule "polySimp_rightDist" (formula "12") (term "0,0"))
         (rule "mul_literals" (formula "12") (term "0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "12") (term "0"))
         (rule "add_literals" (formula "12") (term "1,1,0"))
         (rule "polySimp_elimOne" (formula "12") (term "1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "12"))
         (rule "mul_literals" (formula "12") (term "1"))
         (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "10"))
         (rule "mul_literals" (formula "17") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "17"))
         (rule "mul_literals" (formula "17") (term "1"))
         (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "17"))
         (rule "leq_literals" (formula "11") (term "0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "true_left" (formula "11"))
         (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "7"))
          (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "23")))
         (rule "translateJavaSubInt" (formula "7") (term "0,2,0,1,0"))
         (rule "translateJavaSubInt" (formula "7") (term "0,2,1,1,0"))
         (rule "andLeft" (formula "7"))
         (rule "andLeft" (formula "7"))
         (rule "andLeft" (formula "7"))
         (rule "andLeft" (formula "7"))
         (rule "andLeft" (formula "7"))
         (rule "andLeft" (formula "7"))
         (rule "andLeft" (formula "7"))
         (rule "andLeft" (formula "9"))
         (rule "notLeft" (formula "8"))
         (rule "notLeft" (formula "7"))
         (rule "eqSymm" (formula "12"))
         (rule "eqSymm" (formula "9"))
         (rule "polySimp_elimSub" (formula "12") (term "0,2,1"))
         (rule "mul_literals" (formula "12") (term "1,0,2,1"))
         (rule "polySimp_elimSub" (formula "12") (term "0,2,0"))
         (rule "mul_literals" (formula "12") (term "1,0,2,0"))
         (rule "polySimp_addComm0" (formula "12") (term "0,2,1"))
         (rule "polySimp_addComm0" (formula "12") (term "0,2,0"))
         (rule "inEqSimp_commuteLeq" (formula "7"))
         (rule "applyEq" (formula "11") (term "3,0") (ifseqformula "21"))
         (rule "applyEq" (formula "21") (term "0") (ifseqformula "9"))
         (rule "eqSymm" (formula "21"))
         (rule "applyEq" (formula "25") (term "0,0") (ifseqformula "10"))
         (rule "inEqSimp_commuteGeq" (formula "25"))
         (rule "applyEq" (formula "8") (term "0") (ifseqformula "1"))
         (rule "inEqSimp_homoInEq0" (formula "8"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
         (rule "polySimp_rightDist" (formula "8") (term "1,0"))
         (rule "polySimp_mulAssoc" (formula "8") (term "0,1,0"))
         (rule "polySimp_mulComm0" (formula "8") (term "0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "8") (term "0,1,0"))
         (rule "polySimp_elimOne" (formula "8") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "8") (term "0"))
         (rule "applyEq" (formula "12") (term "1,0,2,0") (ifseqformula "9"))
         (rule "eqSymm" (formula "12"))
         (rule "applyEq" (formula "7") (term "0") (ifseqformula "1"))
         (rule "inEqSimp_homoInEq1" (formula "7"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
         (rule "polySimp_rightDist" (formula "7") (term "1,0"))
         (rule "polySimp_mulAssoc" (formula "7") (term "0,1,0"))
         (rule "polySimp_mulComm0" (formula "7") (term "0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "0,1,0"))
         (rule "polySimp_elimOne" (formula "7") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "7") (term "0"))
         (rule "applyEq" (formula "33") (term "1,2,1") (ifseqformula "10"))
         (rule "applyEq" (formula "33") (term "1,2,0") (ifseqformula "10"))
         (rule "applyEq" (formula "30") (term "0") (ifseqformula "10"))
         (rule "applyEq" (formula "26") (term "1,0") (ifseqformula "10"))
         (rule "applyEq" (formula "11") (term "3,0") (ifseqformula "21"))
         (rule "apply_eq_monomials" (formula "17") (term "0") (ifseqformula "21"))
         (rule "polySimp_rightDist" (formula "17") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "17") (term "1,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "17") (term "0"))
         (rule "add_literals" (formula "17") (term "1,1,0"))
         (rule "times_zero_1" (formula "17") (term "1,0"))
         (rule "add_zero_right" (formula "17") (term "0"))
         (rule "polySimp_mulComm0" (formula "17") (term "0"))
         (rule "applyEq" (formula "9") (term "1") (ifseqformula "1"))
         (rule "apply_eq_monomials" (formula "18") (term "1,3,0") (ifseqformula "21"))
         (rule "polySimp_rightDist" (formula "18") (term "0,1,3,0"))
         (rule "polySimp_mulLiterals" (formula "18") (term "1,0,1,3,0"))
         (rule "polySimp_pullOutFactor0b" (formula "18") (term "1,3,0"))
         (rule "add_literals" (formula "18") (term "1,1,1,3,0"))
         (rule "times_zero_1" (formula "18") (term "1,1,3,0"))
         (rule "add_zero_right" (formula "18") (term "1,3,0"))
         (rule "polySimp_mulComm0" (formula "18") (term "1,3,0"))
         (rule "applyEq" (formula "24") (term "1") (ifseqformula "21"))
         (rule "applyEq" (formula "23") (term "0") (ifseqformula "21"))
         (rule "applyEq" (formula "16") (term "0") (ifseqformula "21"))
         (rule "applyEq" (formula "26") (term "1,3,0") (ifseqformula "21"))
         (rule "applyEq" (formula "25") (term "0") (ifseqformula "21"))
         (rule "inEqSimp_commuteLeq" (formula "25"))
         (rule "applyEq" (formula "32") (term "0") (ifseqformula "15"))
         (rule "eqSymm" (formula "32"))
         (rule "applyEq" (formula "12") (term "1,0,2,0") (ifseqformula "9"))
         (rule "eqSymm" (formula "12"))
         (rule "polySimp_addAssoc" (formula "12") (term "0,2,1"))
         (rule "applyEq" (formula "21") (term "1") (ifseqformula "1"))
         (rule "applyEq" (formula "11") (term "3,0") (ifseqformula "1"))
         (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "1"))
         (rule "polySimp_mulComm0" (formula "17") (term "0"))
         (rule "polySimp_rightDist" (formula "17") (term "0"))
         (rule "polySimp_mulComm0" (formula "17") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "17") (term "0,0"))
         (rule "inEqSimp_homoInEq1" (formula "17"))
         (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
         (rule "polySimp_rightDist" (formula "17") (term "1,0"))
         (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0"))
         (rule "polySimp_mulComm0" (formula "17") (term "0,1,0"))
         (rule "polySimp_mulLiterals" (formula "17") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "17") (term "0"))
         (rule "polySimp_addComm1" (formula "17") (term "0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "17") (term "0"))
         (rule "add_literals" (formula "17") (term "1,1,0"))
         (rule "applyEq" (formula "24") (term "1") (ifseqformula "1"))
         (rule "applyEq" (formula "18") (term "0,1,3,0") (ifseqformula "1"))
         (rule "polySimp_mulComm0" (formula "18") (term "1,3,0"))
         (rule "polySimp_rightDist" (formula "18") (term "1,3,0"))
         (rule "polySimp_mulAssoc" (formula "18") (term "0,1,3,0"))
         (rule "polySimp_mulComm0" (formula "18") (term "0,0,1,3,0"))
         (rule "polySimp_mulLiterals" (formula "18") (term "0,1,3,0"))
         (rule "polySimp_elimOne" (formula "18") (term "0,1,3,0"))
         (rule "polySimp_addAssoc" (formula "18") (term "3,0"))
         (rule "polySimp_addComm0" (formula "18") (term "0,3,0"))
         (rule "polySimp_pullOutFactor1b" (formula "18") (term "3,0"))
         (rule "add_literals" (formula "18") (term "1,1,3,0"))
         (rule "times_zero_1" (formula "18") (term "1,3,0"))
         (rule "add_zero_right" (formula "18") (term "3,0"))
         (rule "applyEq" (formula "26") (term "1,3,0") (ifseqformula "1"))
         (rule "polySimp_addAssoc" (formula "26") (term "3,0"))
         (rule "applyEq" (formula "16") (term "0") (ifseqformula "1"))
         (rule "inEqSimp_homoInEq0" (formula "16"))
         (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
         (rule "polySimp_rightDist" (formula "16") (term "1,0"))
         (rule "polySimp_mulAssoc" (formula "16") (term "0,1,0"))
         (rule "polySimp_mulComm0" (formula "16") (term "0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0"))
         (rule "polySimp_elimOne" (formula "16") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "16") (term "0"))
         (rule "polySimp_addComm0" (formula "16") (term "0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "16") (term "0"))
         (rule "add_literals" (formula "16") (term "1,1,0"))
         (rule "times_zero_1" (formula "16") (term "1,0"))
         (rule "add_zero_right" (formula "16") (term "0"))
         (rule "applyEq" (formula "25") (term "1") (ifseqformula "1"))
         (rule "applyEq" (formula "12") (term "1,0,2,0") (ifseqformula "1"))
         (rule "eqSymm" (formula "12"))
         (rule "polySimp_addAssoc" (formula "12") (term "0,2,1"))
         (rule "eqSymm" (formula "12"))
         (rule "inEqSimp_sepNegMonomial1" (formula "8"))
         (rule "polySimp_mulLiterals" (formula "8") (term "0"))
         (rule "polySimp_elimOne" (formula "8") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "7"))
         (rule "polySimp_mulLiterals" (formula "7") (term "0"))
         (rule "polySimp_elimOne" (formula "7") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "17"))
         (rule "polySimp_mulLiterals" (formula "17") (term "0"))
         (rule "polySimp_elimOne" (formula "17") (term "0"))
         (rule "applyEq" (formula "23") (term "0") (ifseqformula "1"))
         (rule "inEqSimp_homoInEq1" (formula "23"))
         (rule "polySimp_mulComm0" (formula "23") (term "1,0"))
         (rule "polySimp_rightDist" (formula "23") (term "1,0"))
         (rule "polySimp_mulAssoc" (formula "23") (term "0,1,0"))
         (rule "polySimp_mulComm0" (formula "23") (term "0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "23") (term "0,1,0"))
         (rule "polySimp_elimOne" (formula "23") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "23") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "23"))
         (rule "polySimp_mulLiterals" (formula "23") (term "0"))
         (rule "polySimp_elimOne" (formula "23") (term "0"))
         (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "8"))
         (rule "polySimp_rightDist" (formula "17") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "17") (term "1,0,0"))
         (rule "mul_literals" (formula "17") (term "0,0,0"))
         (rule "polySimp_addAssoc" (formula "17") (term "0"))
         (rule "polySimp_addComm1" (formula "17") (term "0,0"))
         (rule "add_literals" (formula "17") (term "0,0,0"))
         (rule "polySimp_pullOutFactor2b" (formula "17") (term "0"))
         (rule "add_literals" (formula "17") (term "1,1,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "17"))
         (rule "polySimp_mulLiterals" (formula "17") (term "0"))
         (rule "polySimp_elimOne" (formula "17") (term "0"))
         (rule "inEqSimp_exactShadow3" (formula "23") (ifseqformula "8"))
         (rule "mul_literals" (formula "23") (term "0,0"))
         (rule "polySimp_addAssoc" (formula "23") (term "0"))
         (rule "add_literals" (formula "23") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "23"))
         (rule "mul_literals" (formula "23") (term "1"))
         (rule "inEqSimp_subsumption1" (formula "23") (ifseqformula "16"))
         (rule "leq_literals" (formula "23") (term "0"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "true_left" (formula "23"))
         (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "13"))
          (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "29")) (ifInst ""  (formula "21")))
         (rule "translateJavaSubInt" (formula "13") (term "3,0,1"))
         (rule "andLeft" (formula "13"))
         (rule "andLeft" (formula "13"))
         (rule "andLeft" (formula "13"))
         (rule "andLeft" (formula "13"))
         (rule "andLeft" (formula "15"))
         (rule "andLeft" (formula "13"))
         (rule "notLeft" (formula "13"))
         (rule "polySimp_elimSub" (formula "18") (term "3,0"))
         (rule "mul_literals" (formula "18") (term "1,3,0"))
         (rule "polySimp_addComm0" (formula "18") (term "3,0"))
         (rule "inEqSimp_commuteLeq" (formula "17"))
         (rule "inEqSimp_commuteLeq" (formula "15"))
         (rule "inEqSimp_commuteLeq" (formula "16"))
         (rule "inEqSimp_commuteLeq" (formula "13"))
         (rule "applyEq" (formula "17") (term "1,3,0") (ifseqformula "9"))
         (rule "polySimp_addAssoc" (formula "17") (term "3,0"))
         (rule "applyEq" (formula "15") (term "1") (ifseqformula "9"))
         (rule "applyEq" (formula "9") (term "0") (ifseqformula "13"))
         (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "9"))
         (rule "applyEq" (formula "14") (term "1") (ifseqformula "12"))
         (rule "applyEq" (formula "13") (term "0") (ifseqformula "12"))
         (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "9"))
         (rule "inEqSimp_commuteGeq" (formula "14"))
         (rule "applyEq" (formula "28") (term "0") (ifseqformula "9"))
         (rule "applyEq" (formula "12") (term "1") (ifseqformula "23"))
         (rule "applyEq" (formula "14") (term "0") (ifseqformula "23"))
         (rule "inEqSimp_commuteLeq" (formula "14"))
         (rule "applyEq" (formula "13") (term "0") (ifseqformula "22"))
         (rule "inEqSimp_homoInEq1" (formula "13"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
         (rule "polySimp_rightDist" (formula "13") (term "1,0"))
         (rule "polySimp_mulAssoc" (formula "13") (term "0,1,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0"))
         (rule "polySimp_elimOne" (formula "13") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "13") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "13"))
         (rule "polySimp_mulLiterals" (formula "13") (term "0"))
         (rule "polySimp_elimOne" (formula "13") (term "0"))
         (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "10") (term "0"))
         (rule "replace_known_left" (formula "10") (term "0,1") (ifseqformula "11"))
          (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "28")) (ifInst ""  (formula "3")))
         (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "11") (term "0") (inst "i=i") (inst "j=j"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,1,0"))
         (rule "polySimp_mulAssoc" (formula "11") (term "0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "0,0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "11") (term "0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
         (rule "polySimp_mulAssoc" (formula "11") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "0,0,1,0,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "11") (term "0,1,1,0,0,1,0"))
         (rule "mul_literals" (formula "11") (term "0,0,1,1,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "0,1,1,0,0"))
         (rule "mul_literals" (formula "11") (term "0,0,1,1,0,0"))
         (rule "nnf_imp2or" (formula "11") (term "0"))
         (rule "nnf_notAnd" (formula "11") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
         (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
         (rule "mul_literals" (formula "11") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "0,1,0,0,1,0,0"))
         (rule "mul_literals" (formula "11") (term "0,0,1,0,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0,0,1,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,1,0,0"))
         (rule "add_literals" (formula "11") (term "0,0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "11") (term "0,0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "0,1,1,0,0"))
         (rule "nnf_imp2or" (formula "11") (term "0,1,0"))
         (rule "nnf_notAnd" (formula "11") (term "0,0,1,0"))
         (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "11") (term "0,1,0,0,1,0,0,1,0"))
         (rule "mul_literals" (formula "11") (term "0,0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,1,0,0,1,0"))
         (rule "add_literals" (formula "11") (term "0,0,0,0,1,0,0,1,0"))
         (rule "add_zero_left" (formula "11") (term "0,0,0,1,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "0,1,1,0,0,1,0"))
         (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,1,0"))
         (rule "mul_literals" (formula "11") (term "0,1,0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,1,0"))
         (rule "Definition_axiom_for_isClassifiedAs_in_de_wiesler_Tree" (formula "19") (term "0"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "translateJavaSubInt" (formula "19") (term "1,0,1"))
         (rule "translateJavaSubInt" (formula "19") (term "0,2,0,1,0"))
         (rule "andLeft" (formula "19"))
         (rule "polySimp_elimSub" (formula "20") (term "1,0"))
         (rule "mul_literals" (formula "20") (term "1,1,0"))
         (rule "polySimp_elimSub" (formula "19") (term "0,2,0,1"))
         (rule "mul_literals" (formula "19") (term "1,0,2,0,1"))
         (rule "polySimp_addComm0" (formula "20") (term "1,0"))
         (rule "polySimp_addComm0" (formula "19") (term "0,2,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "19") (term "0"))
         (rule "add_zero_right" (formula "19") (term "0,0"))
         (rule "polySimp_mulComm0" (formula "19") (term "1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "20") (term "0"))
         (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0"))
         (rule "mul_literals" (formula "20") (term "0,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "20") (term "0,0,0"))
         (rule "add_literals" (formula "20") (term "0,0,0,0"))
         (rule "polySimp_addComm1" (formula "20") (term "0,0"))
         (rule "inEqSimp_ltToLeq" (formula "19") (term "1"))
         (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "20") (term "1"))
         (rule "applyEq" (formula "20") (term "0,1,0,0") (ifseqformula "13"))
         (rule "polySimp_mulComm0" (formula "20") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "20") (term "1,0,0"))
         (rule "polySimp_mulAssoc" (formula "20") (term "0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "20") (term "0,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "20") (term "0,1,0,0"))
         (rule "polySimp_elimOne" (formula "20") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "20") (term "0,0"))
         (rule "polySimp_pullOutFactor3b" (formula "20") (term "0,0,0"))
         (rule "applyEq" (formula "19") (term "1,1,0,1") (ifseqformula "9"))
         (rule "applyEq" (formula "20") (term "1,0,1") (ifseqformula "9"))
         (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0"))
         (rule "polySimp_mulLiterals" (formula "19") (term "0,0"))
         (rule "polySimp_elimOne" (formula "19") (term "0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "0"))
         (rule "polySimp_mulLiterals" (formula "20") (term "0,0"))
         (rule "polySimp_elimOne" (formula "20") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1"))
         (rule "polySimp_mulComm0" (formula "19") (term "1,1"))
         (rule "polySimp_rightDist" (formula "19") (term "1,1"))
         (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1"))
         (rule "mul_literals" (formula "19") (term "0,1,1"))
         (rule "polySimp_elimOne" (formula "19") (term "1,1,1"))
         (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "27") (term "0") (inst "j=j") (inst "i=i"))
          (builtin "One Step Simplification" (formula "27"))
         (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
         (rule "polySimp_rightDist" (formula "27") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1,0,0,1,0,0"))
         (rule "mul_literals" (formula "27") (term "0,0,1,0,0,1,0,0"))
         (rule "polySimp_elimOne" (formula "27") (term "1,0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "27") (term "0,0,0,1,0,0"))
         (rule "add_literals" (formula "27") (term "0,0,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "27") (term "0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1,0,0,1,0,0,1,0"))
         (rule "mul_literals" (formula "27") (term "0,0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "27") (term "1,0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "27") (term "0,0,0,1,0,0,1,0"))
         (rule "add_literals" (formula "27") (term "0,0,0,0,1,0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "27") (term "1,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0"))
         (rule "polySimp_rightDist" (formula "27") (term "0,1,1,0,0"))
         (rule "mul_literals" (formula "27") (term "0,0,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "27") (term "0,1,1,0,0,1,0"))
         (rule "mul_literals" (formula "27") (term "0,0,1,1,0,0,1,0"))
         (rule "nnf_imp2or" (formula "27") (term "0"))
         (rule "nnf_notAnd" (formula "27") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
         (rule "polySimp_rightDist" (formula "27") (term "0,1,0,0,1,0,0"))
         (rule "mul_literals" (formula "27") (term "0,0,1,0,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1,0,0,1,0,0"))
         (rule "polySimp_elimOne" (formula "27") (term "1,0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "27") (term "0,0,0,1,0,0"))
         (rule "add_literals" (formula "27") (term "0,0,0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0"))
         (rule "polySimp_rightDist" (formula "27") (term "0,1,1,0,0"))
         (rule "mul_literals" (formula "27") (term "0,0,1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
         (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "27") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
         (rule "mul_literals" (formula "27") (term "1,0,0,0"))
         (rule "nnf_imp2or" (formula "27") (term "0,1,0"))
         (rule "nnf_notAnd" (formula "27") (term "0,0,1,0"))
         (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "27") (term "0,1,0,0,1,0,0,1,0"))
         (rule "mul_literals" (formula "27") (term "0,0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "27") (term "1,0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "27") (term "0,0,0,1,0,0,1,0"))
         (rule "add_literals" (formula "27") (term "0,0,0,0,1,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "27") (term "0,1,1,0,0,1,0"))
         (rule "mul_literals" (formula "27") (term "0,0,1,1,0,0,1,0"))
         (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,0,1,0"))
         (rule "mul_literals" (formula "27") (term "0,1,0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,0,1,0"))
         (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "10") (term "0"))
         (rule "replace_known_left" (formula "10") (term "0,1") (ifseqformula "11"))
          (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "30")) (ifInst ""  (formula "3")))
         (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "11") (term "0") (inst "i=i"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "translateJavaSubInt" (formula "11") (term "1,1,0,0"))
         (rule "translateJavaAddInt" (formula "11") (term "0,2,1,1,0"))
         (rule "polySimp_elimSub" (formula "11") (term "1,1,0,0"))
         (rule "mul_literals" (formula "11") (term "1,1,1,0,0"))
         (rule "polySimp_addComm0" (formula "11") (term "0,2,1,1,0"))
         (rule "polySimp_addComm1" (formula "11") (term "1,1,0,0"))
         (rule "polySimp_addComm0" (formula "11") (term "0,1,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "0,1,0,0,1,0,0"))
         (rule "mul_literals" (formula "11") (term "0,0,1,0,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0,0,1,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,1,0,0"))
         (rule "add_literals" (formula "11") (term "0,0,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "0,1,1,0,0"))
         (rule "mul_literals" (formula "11") (term "0,0,1,1,0,0"))
         (rule "nnf_imp2or" (formula "11") (term "0"))
         (rule "nnf_notAnd" (formula "11") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0,0,1,0,0"))
         (rule "mul_literals" (formula "11") (term "0,0,1,0,0,1,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,1,0,0"))
         (rule "add_literals" (formula "11") (term "0,0,0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "0,1,1,0,0"))
         (rule "mul_literals" (formula "11") (term "0,0,1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
         (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
         (rule "mul_literals" (formula "11") (term "1,0,0,0"))
         (rule "commute_or" (formula "12") (term "0,0,1,0"))
         (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "10") (term "0"))
         (rule "replace_known_left" (formula "10") (term "0,1") (ifseqformula "11"))
          (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "31")) (ifInst ""  (formula "3")))
         (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "11") (term "0") (inst "j=j") (inst "i=i"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,1,0"))
         (rule "polySimp_mulAssoc" (formula "11") (term "0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "0,0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "11") (term "0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
         (rule "polySimp_mulAssoc" (formula "11") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "0,0,1,0,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "11") (term "0,1,1,0,0,1,0"))
         (rule "mul_literals" (formula "11") (term "0,0,1,1,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "0,1,1,0,0"))
         (rule "mul_literals" (formula "11") (term "0,0,1,1,0,0"))
         (rule "nnf_imp2or" (formula "11") (term "0"))
         (rule "nnf_notAnd" (formula "11") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
         (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
         (rule "mul_literals" (formula "11") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0,0,1,0,0"))
         (rule "mul_literals" (formula "11") (term "0,0,1,0,0,1,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,1,0,0"))
         (rule "add_literals" (formula "11") (term "0,0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "11") (term "0,0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "0,1,1,0,0"))
         (rule "nnf_imp2or" (formula "11") (term "0,1,0"))
         (rule "nnf_notAnd" (formula "11") (term "0,0,1,0"))
         (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,1,0"))
         (rule "mul_literals" (formula "11") (term "0,1,0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,1,0"))
         (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "11") (term "0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0,0,1,0,0,1,0"))
         (rule "mul_literals" (formula "11") (term "0,0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,1,0,0,1,0"))
         (rule "add_literals" (formula "11") (term "0,0,0,0,1,0,0,1,0"))
         (rule "add_zero_left" (formula "11") (term "0,0,0,1,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "0,1,1,0,0,1,0"))
         (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "10") (term "0"))
         (rule "replace_known_left" (formula "10") (term "0,1") (ifseqformula "11"))
          (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "32")) (ifInst ""  (formula "3")))
         (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "11") (term "0") (inst "i=i"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "translateJavaSubInt" (formula "11") (term "1,1,0,0"))
         (rule "translateJavaAddInt" (formula "11") (term "0,2,1,1,0"))
         (rule "polySimp_elimSub" (formula "11") (term "1,1,0,0"))
         (rule "mul_literals" (formula "11") (term "1,1,1,0,0"))
         (rule "polySimp_addComm0" (formula "11") (term "0,2,1,1,0"))
         (rule "polySimp_addComm1" (formula "11") (term "1,1,0,0"))
         (rule "polySimp_addComm0" (formula "11") (term "0,1,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0,0,1,0,0"))
         (rule "mul_literals" (formula "11") (term "0,0,1,0,0,1,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,1,0,0"))
         (rule "add_literals" (formula "11") (term "0,0,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "0,1,1,0,0"))
         (rule "mul_literals" (formula "11") (term "0,0,1,1,0,0"))
         (rule "nnf_imp2or" (formula "11") (term "0"))
         (rule "nnf_notAnd" (formula "11") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0,0,1,0,0"))
         (rule "mul_literals" (formula "11") (term "0,0,1,0,0,1,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,1,0,0"))
         (rule "add_literals" (formula "11") (term "0,0,0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "0,1,1,0,0"))
         (rule "mul_literals" (formula "11") (term "0,0,1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
         (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
         (rule "mul_literals" (formula "11") (term "1,0,0,0"))
         (rule "commute_or" (formula "29") (term "0,0,1,0"))
         (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "10") (term "0"))
         (rule "replace_known_right" (formula "10") (term "0,0,0") (ifseqformula "32"))
          (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "3")) (ifInst ""  (formula "11")))
         (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "11") (term "0") (inst "j=j") (inst "i=i"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,1,0"))
         (rule "polySimp_mulAssoc" (formula "11") (term "0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "0,0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "11") (term "0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
         (rule "polySimp_mulAssoc" (formula "11") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "0,0,1,0,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "11") (term "0,1,1,0,0,1,0"))
         (rule "mul_literals" (formula "11") (term "0,0,1,1,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "0,1,1,0,0"))
         (rule "mul_literals" (formula "11") (term "0,0,1,1,0,0"))
         (rule "nnf_imp2or" (formula "11") (term "0"))
         (rule "nnf_notAnd" (formula "11") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
         (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
         (rule "mul_literals" (formula "11") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "0,1,0,0,1,0,0"))
         (rule "mul_literals" (formula "11") (term "0,0,1,0,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0,0,1,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,1,0,0"))
         (rule "add_literals" (formula "11") (term "0,0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "11") (term "0,0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "0,1,1,0,0"))
         (rule "nnf_imp2or" (formula "11") (term "0,1,0"))
         (rule "nnf_notAnd" (formula "11") (term "0,0,1,0"))
         (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,1,0"))
         (rule "mul_literals" (formula "11") (term "0,1,0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,1,0"))
         (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "11") (term "0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0,0,1,0,0,1,0"))
         (rule "mul_literals" (formula "11") (term "0,0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,1,0,0,1,0"))
         (rule "add_literals" (formula "11") (term "0,0,0,0,1,0,0,1,0"))
         (rule "add_zero_left" (formula "11") (term "0,0,0,1,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "0,1,1,0,0,1,0"))
         (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "10") (term "0"))
         (rule "replace_known_right" (formula "10") (term "0,0,0") (ifseqformula "32"))
          (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "3")) (ifInst ""  (formula "11")))
         (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "11") (term "0") (inst "i=i"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "translateJavaSubInt" (formula "11") (term "1,1,0,0"))
         (rule "translateJavaAddInt" (formula "11") (term "0,2,1,1,0"))
         (rule "polySimp_elimSub" (formula "11") (term "1,1,0,0"))
         (rule "mul_literals" (formula "11") (term "1,1,1,0,0"))
         (rule "polySimp_addComm0" (formula "11") (term "0,2,1,1,0"))
         (rule "polySimp_addComm1" (formula "11") (term "1,1,0,0"))
         (rule "polySimp_addComm0" (formula "11") (term "0,1,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0,0,1,0,0"))
         (rule "mul_literals" (formula "11") (term "0,0,1,0,0,1,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,1,0,0"))
         (rule "add_literals" (formula "11") (term "0,0,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "0,1,1,0,0"))
         (rule "mul_literals" (formula "11") (term "0,0,1,1,0,0"))
         (rule "nnf_imp2or" (formula "11") (term "0"))
         (rule "nnf_notAnd" (formula "11") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0,0,1,0,0"))
         (rule "mul_literals" (formula "11") (term "0,0,1,0,0,1,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,1,0,0"))
         (rule "add_literals" (formula "11") (term "0,0,0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "0,1,1,0,0"))
         (rule "mul_literals" (formula "11") (term "0,0,1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
         (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
         (rule "mul_literals" (formula "11") (term "1,0,0,0"))
         (rule "commute_or" (formula "11") (term "0,0,1,0"))
         (rule "cut_direct" (formula "21") (term "0"))
         (branch "CUT: result_22 >= 2 + classify_sk_0 * 2 TRUE"
             (builtin "One Step Simplification" (formula "22"))
            (rule "inEqSimp_subsumption1" (formula "19") (ifseqformula "21"))
            (rule "inEqSimp_homoInEq0" (formula "19") (term "0"))
            (rule "polySimp_mulComm0" (formula "19") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "19") (term "1,0,0"))
            (rule "mul_literals" (formula "19") (term "0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
            (rule "polySimp_addAssoc" (formula "19") (term "0,0"))
            (rule "polySimp_addComm1" (formula "19") (term "0,0,0"))
            (rule "add_literals" (formula "19") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "19") (term "0,0"))
            (rule "add_literals" (formula "19") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "19") (term "1,0,0"))
            (rule "add_zero_right" (formula "19") (term "0,0"))
            (rule "qeq_literals" (formula "19") (term "0"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "true_left" (formula "19"))
            (rule "inEqSimp_exactShadow3" (formula "20") (ifseqformula "8"))
            (rule "polySimp_rightDist" (formula "20") (term "0,0"))
            (rule "mul_literals" (formula "20") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "20") (term "1,0,0"))
            (rule "polySimp_addAssoc" (formula "20") (term "0"))
            (rule "polySimp_addComm1" (formula "20") (term "0,0"))
            (rule "add_literals" (formula "20") (term "0,0,0"))
            (rule "polySimp_pullOutFactor2b" (formula "20") (term "0"))
            (rule "add_literals" (formula "20") (term "1,1,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "20"))
            (rule "polySimp_mulLiterals" (formula "20") (term "0"))
            (rule "polySimp_elimOne" (formula "20") (term "0"))
            (rule "inEqSimp_subsumption0" (formula "18") (ifseqformula "20"))
            (rule "leq_literals" (formula "18") (term "0"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "true_left" (formula "18"))
            (rule "cut_direct" (formula "18") (term "0"))
            (branch "CUT: classify_sk_0 >= 1 TRUE"
                (builtin "One Step Simplification" (formula "19"))
               (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "18"))
               (rule "leq_literals" (formula "17") (term "0"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "true_left" (formula "17"))
               (rule "arrayLengthNotNegative" (formula "27") (term "0"))
               (rule "arrayLengthIsAShort" (formula "28") (term "0"))
                (builtin "One Step Simplification" (formula "28"))
               (rule "true_left" (formula "28"))
               (rule "arrayLengthIsAShort" (formula "26") (term "0"))
                (builtin "One Step Simplification" (formula "26"))
               (rule "true_left" (formula "26"))
               (rule "arrayLengthNotNegative" (formula "26") (term "0"))
               (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "10") (term "0") (inst "j=j") (inst "i=i"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
               (rule "polySimp_mulAssoc" (formula "10") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "10") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,1,0"))
               (rule "polySimp_mulAssoc" (formula "10") (term "0,1,0,0,1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0,0,1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,0,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "10") (term "0,1,0,0,1,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
               (rule "polySimp_rightDist" (formula "10") (term "0,1,1,0,0"))
               (rule "mul_literals" (formula "10") (term "0,0,1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "10") (term "0,1,1,0,0,1,0"))
               (rule "mul_literals" (formula "10") (term "0,0,1,1,0,0,1,0"))
               (rule "nnf_imp2or" (formula "10") (term "0"))
               (rule "nnf_notAnd" (formula "10") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
               (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "10") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
               (rule "mul_literals" (formula "10") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "10") (term "0,1,0,0,1,0,0"))
               (rule "mul_literals" (formula "10") (term "0,0,1,0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "10") (term "1,0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,1,0,0"))
               (rule "add_literals" (formula "10") (term "0,0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "10") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "0,1,1,0,0"))
               (rule "nnf_imp2or" (formula "10") (term "0,1,0"))
               (rule "nnf_notAnd" (formula "10") (term "0,0,1,0"))
               (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "10") (term "0,1,0,0,1,0,0,1,0"))
               (rule "mul_literals" (formula "10") (term "0,0,1,0,0,1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0,0,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "10") (term "1,0,1,0,0,1,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,1,0,0,1,0"))
               (rule "add_literals" (formula "10") (term "0,0,0,0,1,0,0,1,0"))
               (rule "add_zero_left" (formula "10") (term "0,0,0,1,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "0,1,1,0,0,1,0"))
               (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,1,0"))
               (rule "mul_literals" (formula "10") (term "0,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,1,0"))
               (rule "all_pull_out3" (formula "12") (term "0"))
               (rule "all_pull_out3" (formula "30") (term "0"))
               (rule "shift_paren_or" (formula "12") (term "0,0"))
               (rule "shift_paren_or" (formula "30") (term "0,0"))
               (rule "commute_or" (formula "10") (term "0,0,1,0"))
               (rule "shift_paren_or" (formula "12") (term "0,0,0"))
               (rule "shift_paren_or" (formula "30") (term "0,0,0"))
               (rule "onlyCreatedObjectsAreReferencedFinal" (formula "29") (term "0,0") (ifseqformula "3") (ifseqformula "4"))
               (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "33"))
                (builtin "One Step Simplification" (formula "29"))
               (rule "onlyCreatedObjectsAreReferencedFinal" (formula "9") (term "0,0") (ifseqformula "3") (ifseqformula "4"))
               (rule "replace_known_right" (formula "9") (term "1") (ifseqformula "37"))
                (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "33")))
               (rule "closeFalse" (formula "9"))
            )
            (branch "CUT: classify_sk_0 >= 1 FALSE"
                (builtin "One Step Simplification" (formula "18"))
               (rule "true_left" (formula "18"))
               (rule "inEqSimp_geqRight" (formula "28"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_subsumption0" (formula "19") (ifseqformula "1"))
               (rule "leq_literals" (formula "19") (term "0"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "true_left" (formula "19"))
               (rule "inEqSimp_antiSymm" (formula "18") (ifseqformula "1"))
               (rule "applyEqRigid" (formula "9") (term "1,1") (ifseqformula "18"))
               (rule "add_zero_right" (formula "9") (term "1"))
               (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "18"))
               (rule "leq_literals" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "applyEqRigid" (formula "20") (term "0,2,0") (ifseqformula "17"))
               (rule "inEqSimp_commuteGeq" (formula "20"))
               (rule "applyEq" (formula "7") (term "1,1") (ifseqformula "17"))
               (rule "add_literals" (formula "7") (term "1"))
               (rule "applyEq" (formula "18") (term "0,1,1") (ifseqformula "16"))
               (rule "mul_literals" (formula "18") (term "1,1"))
               (rule "add_zero_right" (formula "18") (term "1"))
               (rule "applyEq" (formula "17") (term "0") (ifseqformula "16"))
               (rule "qeq_literals" (formula "17"))
               (rule "true_left" (formula "17"))
               (rule "applyEqRigid" (formula "11") (term "0,0,1,0,0,0,1,0") (ifseqformula "16"))
               (rule "mul_literals" (formula "11") (term "0,1,0,0,0,1,0"))
               (rule "add_zero_left" (formula "11") (term "1,0,0,0,1,0"))
               (rule "applyEqRigid" (formula "2") (term "1") (ifseqformula "16"))
               (rule "applyEqRigid" (formula "23") (term "0,0,1") (ifseqformula "16"))
               (rule "times_zero_2" (formula "23") (term "0,1"))
               (rule "add_zero_left" (formula "23") (term "1"))
               (rule "applyEq" (formula "24") (term "0,1,0,1,1,0,0") (ifseqformula "16"))
               (rule "mul_literals" (formula "24") (term "1,0,1,1,0,0"))
               (rule "add_zero_right" (formula "24") (term "0,1,1,0,0"))
               (rule "applyEq" (formula "24") (term "0,1,0,1,0,0,0,1,0") (ifseqformula "16"))
               (rule "times_zero_2" (formula "24") (term "1,0,1,0,0,0,1,0"))
               (rule "add_zero_right" (formula "24") (term "0,1,0,0,0,1,0"))
               (rule "applyEq" (formula "9") (term "0,0,3,0") (ifseqformula "16"))
               (rule "times_zero_2" (formula "9") (term "0,3,0"))
               (rule "add_zero_left" (formula "9") (term "3,0"))
               (rule "applyEqRigid" (formula "10") (term "0,1,0,1,1,0,0") (ifseqformula "16"))
               (rule "times_zero_2" (formula "10") (term "1,0,1,1,0,0"))
               (rule "add_zero_right" (formula "10") (term "0,1,1,0,0"))
               (rule "applyEq" (formula "12") (term "0,1,0,0,2,0") (ifseqformula "16"))
               (rule "mul_literals" (formula "12") (term "1,0,0,2,0"))
               (rule "add_zero_right" (formula "12") (term "0,0,2,0"))
               (rule "eqSymm" (formula "12"))
               (rule "applyEqRigid" (formula "11") (term "0,0,1,1,0,0") (ifseqformula "16"))
               (rule "times_zero_2" (formula "11") (term "0,1,1,0,0"))
               (rule "add_zero_left" (formula "11") (term "1,1,0,0"))
               (rule "applyEqRigid" (formula "22") (term "0,0,1") (ifseqformula "16"))
               (rule "mul_literals" (formula "22") (term "0,1"))
               (rule "add_zero_left" (formula "22") (term "1"))
               (rule "applyEq" (formula "1") (term "0,0,1") (ifseqformula "16"))
               (rule "mul_literals" (formula "1") (term "0,1"))
               (rule "add_zero_left" (formula "1") (term "1"))
               (rule "applyEqRigid" (formula "20") (term "0,0,1") (ifseqformula "16"))
               (rule "mul_literals" (formula "20") (term "0,1"))
               (rule "add_zero_left" (formula "20") (term "1"))
               (rule "applyEq" (formula "13") (term "0,0,1") (ifseqformula "16"))
               (rule "mul_literals" (formula "13") (term "0,1"))
               (rule "add_zero_left" (formula "13") (term "1"))
               (rule "applyEq" (formula "12") (term "0,1,0,0,2,0") (ifseqformula "16"))
               (rule "times_zero_2" (formula "12") (term "1,0,0,2,0"))
               (rule "add_zero_right" (formula "12") (term "0,0,2,0"))
               (rule "eqSymm" (formula "12"))
               (rule "arrayLengthNotNegative" (formula "23") (term "0"))
               (rule "arrayLengthIsAShort" (formula "24") (term "0"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "true_left" (formula "24"))
               (rule "arrayLengthIsAShort" (formula "22") (term "0"))
                (builtin "One Step Simplification" (formula "22"))
               (rule "true_left" (formula "22"))
               (rule "arrayLengthNotNegative" (formula "22") (term "0"))
               (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "9") (term "0"))
               (rule "replace_known_right" (formula "9") (term "0,0,0") (ifseqformula "29"))
                (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "3")) (ifInst ""  (formula "10")))
               (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "10") (term "0") (inst "j=j") (inst "i=i"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,1,0"))
               (rule "mul_literals" (formula "10") (term "0,1,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,1,0"))
               (rule "nnf_imp2or" (formula "10") (term "0"))
               (rule "nnf_notAnd" (formula "10") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
               (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "10") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
               (rule "mul_literals" (formula "10") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
               (rule "nnf_imp2or" (formula "10") (term "0,1,0"))
               (rule "nnf_notAnd" (formula "10") (term "0,0,1,0"))
               (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,1,0"))
               (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,1,0"))
               (rule "add_literals" (formula "10") (term "0,0,0,1,0,0,1,0"))
               (rule "add_zero_left" (formula "10") (term "0,0,1,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,1,0"))
               (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,1,0"))
               (rule "mul_literals" (formula "10") (term "0,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,1,0"))
               (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "9") (term "0") (inst "i=i"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "translateJavaAddInt" (formula "9") (term "0,2,1,1,0"))
               (rule "translateJavaSubInt" (formula "9") (term "1,1,0,0"))
               (rule "polySimp_elimSub" (formula "9") (term "1,1,0,0"))
               (rule "mul_literals" (formula "9") (term "1,1,1,0,0"))
               (rule "polySimp_addComm0" (formula "9") (term "0,2,1,1,0"))
               (rule "polySimp_addComm0" (formula "9") (term "1,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
               (rule "nnf_imp2or" (formula "9") (term "0"))
               (rule "nnf_notAnd" (formula "9") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
               (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
               (rule "mul_literals" (formula "9") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
               (rule "commute_or" (formula "9") (term "0,0,1,0"))
               (rule "all_pull_out3" (formula "25") (term "0"))
               (rule "shift_paren_or" (formula "25") (term "0,0"))
               (rule "shift_paren_or" (formula "25") (term "0,0,0"))
               (rule "all_pull_out3" (formula "10") (term "0"))
               (rule "shift_paren_or" (formula "10") (term "0,0"))
               (rule "shift_paren_or" (formula "10") (term "0,0,0"))
               (rule "onlyCreatedObjectsAreReferencedFinal" (formula "22") (term "0,0,0") (ifseqformula "3") (ifseqformula "4"))
               (rule "replace_known_right" (formula "22") (term "1") (ifseqformula "31"))
                (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "27")))
               (rule "closeFalse" (formula "22"))
            )
         )
         (branch "CUT: result_22 >= 2 + classify_sk_0 * 2 FALSE"
             (builtin "One Step Simplification" (formula "21"))
            (rule "true_left" (formula "21"))
            (rule "inEqSimp_geqRight" (formula "28"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1"))
            (rule "polySimp_rightDist" (formula "1") (term "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
            (rule "mul_literals" (formula "1") (term "0,1"))
            (rule "inEqSimp_antiSymm" (formula "20") (ifseqformula "1"))
            (rule "applyEq" (formula "8") (term "0") (ifseqformula "20"))
            (rule "inEqSimp_homoInEq1" (formula "8"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
            (rule "polySimp_rightDist" (formula "8") (term "1,0"))
            (rule "mul_literals" (formula "8") (term "0,1,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0"))
            (rule "polySimp_addAssoc" (formula "8") (term "0"))
            (rule "polySimp_addComm1" (formula "8") (term "0,0"))
            (rule "add_literals" (formula "8") (term "0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "8") (term "0"))
            (rule "add_literals" (formula "8") (term "1,1,0"))
            (rule "applyEq" (formula "28") (term "1,1") (ifseqformula "20"))
            (rule "polySimp_addAssoc" (formula "28") (term "1"))
            (rule "polySimp_addComm0" (formula "28") (term "0,1"))
            (rule "polySimp_pullOutFactor0b" (formula "28") (term "1"))
            (rule "add_literals" (formula "28") (term "1,1,1"))
            (rule "polySimp_elimOne" (formula "28") (term "1,1"))
            (rule "applyEq" (formula "29") (term "1,1,1,0,0") (ifseqformula "20"))
            (rule "polySimp_addAssoc" (formula "29") (term "1,1,0,0"))
            (rule "polySimp_addComm1" (formula "29") (term "0,1,1,0,0"))
            (rule "add_literals" (formula "29") (term "0,0,1,1,0,0"))
            (rule "add_zero_left" (formula "29") (term "0,1,1,0,0"))
            (rule "polySimp_pullOutFactor0" (formula "29") (term "1,1,0,0"))
            (rule "add_literals" (formula "29") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0"))
            (rule "applyEq" (formula "14") (term "1,0,2,0") (ifseqformula "20"))
            (rule "eqSymm" (formula "14"))
            (rule "polySimp_addAssoc" (formula "14") (term "0,2,1"))
            (rule "polySimp_addComm1" (formula "14") (term "0,0,2,1"))
            (rule "add_literals" (formula "14") (term "0,0,0,2,1"))
            (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,2,1"))
            (rule "add_literals" (formula "14") (term "1,1,0,2,1"))
            (rule "polySimp_elimOne" (formula "14") (term "1,0,2,1"))
            (rule "applyEq" (formula "13") (term "1,1,0,0,0,1,0") (ifseqformula "20"))
            (rule "polySimp_addAssoc" (formula "13") (term "1,0,0,0,1,0"))
            (rule "polySimp_addComm0" (formula "13") (term "0,1,0,0,0,1,0"))
            (rule "polySimp_pullOutFactor0b" (formula "13") (term "1,0,0,0,1,0"))
            (rule "add_literals" (formula "13") (term "1,1,1,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,1,0"))
            (rule "applyEq" (formula "21") (term "0") (ifseqformula "20"))
            (rule "inEqSimp_homoInEq1" (formula "21"))
            (rule "polySimp_pullOutFactor1" (formula "21") (term "0"))
            (rule "add_literals" (formula "21") (term "1,0"))
            (rule "times_zero_1" (formula "21") (term "0"))
            (rule "leq_literals" (formula "21"))
            (rule "true_left" (formula "21"))
            (rule "applyEq" (formula "1") (term "0") (ifseqformula "20"))
            (rule "inEqSimp_homoInEq0" (formula "1"))
            (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
            (rule "add_literals" (formula "1") (term "1,0"))
            (rule "times_zero_1" (formula "1") (term "0"))
            (rule "qeq_literals" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "applyEq" (formula "12") (term "1,1,1,0,0") (ifseqformula "19"))
            (rule "polySimp_addAssoc" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_addComm0" (formula "12") (term "0,1,1,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "12") (term "1,1,0,0"))
            (rule "add_literals" (formula "12") (term "1,1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
            (rule "applyEq" (formula "8") (term "0") (ifseqformula "19"))
            (rule "inEqSimp_homoInEq0" (formula "8"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
            (rule "polySimp_rightDist" (formula "8") (term "1,0"))
            (rule "mul_literals" (formula "8") (term "0,1,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0"))
            (rule "polySimp_addAssoc" (formula "8") (term "0"))
            (rule "polySimp_addComm1" (formula "8") (term "0,0"))
            (rule "add_literals" (formula "8") (term "0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "8") (term "0"))
            (rule "add_literals" (formula "8") (term "1,1,0"))
            (rule "applyEq" (formula "24") (term "0") (ifseqformula "19"))
            (rule "inEqSimp_homoInEq1" (formula "24"))
            (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
            (rule "polySimp_rightDist" (formula "24") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0"))
            (rule "mul_literals" (formula "24") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "24") (term "0"))
            (rule "add_literals" (formula "24") (term "0,0"))
            (rule "applyEq" (formula "11") (term "1,1,1,0,0") (ifseqformula "19"))
            (rule "polySimp_addAssoc" (formula "11") (term "1,1,0,0"))
            (rule "polySimp_addComm1" (formula "11") (term "0,1,1,0,0"))
            (rule "add_literals" (formula "11") (term "0,0,1,1,0,0"))
            (rule "add_zero_left" (formula "11") (term "0,1,1,0,0"))
            (rule "polySimp_pullOutFactor0" (formula "11") (term "1,1,0,0"))
            (rule "add_literals" (formula "11") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
            (rule "applyEq" (formula "25") (term "1,1") (ifseqformula "19"))
            (rule "polySimp_addAssoc" (formula "25") (term "1"))
            (rule "polySimp_addComm0" (formula "25") (term "0,1"))
            (rule "polySimp_pullOutFactor0b" (formula "25") (term "1"))
            (rule "add_literals" (formula "25") (term "1,1,1"))
            (rule "polySimp_elimOne" (formula "25") (term "1,1"))
            (rule "applyEq" (formula "27") (term "1,1,0,0,0,1,0") (ifseqformula "19"))
            (rule "polySimp_addAssoc" (formula "27") (term "1,0,0,0,1,0"))
            (rule "polySimp_addComm1" (formula "27") (term "0,1,0,0,0,1,0"))
            (rule "add_literals" (formula "27") (term "0,0,1,0,0,0,1,0"))
            (rule "add_zero_left" (formula "27") (term "0,1,0,0,0,1,0"))
            (rule "polySimp_pullOutFactor0" (formula "27") (term "1,0,0,0,1,0"))
            (rule "add_literals" (formula "27") (term "1,1,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "27") (term "1,0,0,0,1,0"))
            (rule "applyEq" (formula "10") (term "1,3,0") (ifseqformula "19"))
            (rule "polySimp_addAssoc" (formula "10") (term "3,0"))
            (rule "polySimp_addComm0" (formula "10") (term "0,3,0"))
            (rule "polySimp_pullOutFactor0b" (formula "10") (term "3,0"))
            (rule "add_literals" (formula "10") (term "1,1,3,0"))
            (rule "polySimp_elimOne" (formula "10") (term "1,3,0"))
            (rule "applyEq" (formula "13") (term "1,0,2,0") (ifseqformula "19"))
            (rule "polySimp_addAssoc" (formula "13") (term "0,2,0"))
            (rule "polySimp_addComm1" (formula "13") (term "0,0,2,0"))
            (rule "add_literals" (formula "13") (term "0,0,0,2,0"))
            (rule "add_zero_left" (formula "13") (term "0,0,2,0"))
            (rule "polySimp_pullOutFactor0" (formula "13") (term "0,2,0"))
            (rule "add_literals" (formula "13") (term "1,0,2,0"))
            (rule "polySimp_elimOne" (formula "13") (term "0,2,0"))
            (rule "eqSymm" (formula "13"))
            (rule "applyEq" (formula "14") (term "1,1") (ifseqformula "19"))
            (rule "polySimp_addAssoc" (formula "14") (term "1"))
            (rule "polySimp_addComm0" (formula "14") (term "0,1"))
            (rule "polySimp_pullOutFactor0b" (formula "14") (term "1"))
            (rule "add_literals" (formula "14") (term "1,1,1"))
            (rule "polySimp_elimOne" (formula "14") (term "1,1"))
            (rule "applyEq" (formula "1") (term "1,1") (ifseqformula "19"))
            (rule "polySimp_addAssoc" (formula "1") (term "1"))
            (rule "polySimp_addComm0" (formula "1") (term "0,1"))
            (rule "polySimp_pullOutFactor0b" (formula "1") (term "1"))
            (rule "add_literals" (formula "1") (term "1,1,1"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1"))
            (rule "applyEq" (formula "33") (term "1") (ifseqformula "19"))
            (rule "applyEq" (formula "23") (term "1,1") (ifseqformula "19"))
            (rule "polySimp_addAssoc" (formula "23") (term "1"))
            (rule "polySimp_addComm0" (formula "23") (term "0,1"))
            (rule "polySimp_pullOutFactor0b" (formula "23") (term "1"))
            (rule "add_literals" (formula "23") (term "1,1,1"))
            (rule "polySimp_elimOne" (formula "23") (term "1,1"))
            (rule "applyEq" (formula "16") (term "1") (ifseqformula "19"))
            (rule "applyEq" (formula "20") (term "0,1") (ifseqformula "13"))
            (rule "inEqSimp_sepNegMonomial0" (formula "7"))
            (rule "polySimp_mulLiterals" (formula "7") (term "0"))
            (rule "polySimp_elimOne" (formula "7") (term "0"))
            (rule "replace_known_left" (formula "20") (term "0") (ifseqformula "7"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "inEqSimp_sepNegMonomial1" (formula "8"))
            (rule "polySimp_mulLiterals" (formula "8") (term "0"))
            (rule "polySimp_elimOne" (formula "8") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "23"))
            (rule "polySimp_mulLiterals" (formula "23") (term "0"))
            (rule "inEqSimp_subsumption6" (formula "23") (ifseqformula "7"))
            (rule "mul_literals" (formula "23") (term "1,1,0"))
            (rule "greater_literals" (formula "23") (term "0,0"))
             (builtin "One Step Simplification" (formula "23"))
            (rule "leq_literals" (formula "23") (term "0"))
             (builtin "One Step Simplification" (formula "23"))
            (rule "true_left" (formula "23"))
            (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "7"))
            (rule "leq_literals" (formula "16") (term "0"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "true_left" (formula "16"))
            (rule "arrayLengthNotNegative" (formula "23") (term "0"))
            (rule "arrayLengthIsAShort" (formula "24") (term "0"))
             (builtin "One Step Simplification" (formula "24"))
            (rule "true_left" (formula "24"))
            (rule "arrayLengthIsAShort" (formula "22") (term "0"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "true_left" (formula "22"))
            (rule "arrayLengthNotNegative" (formula "22") (term "0"))
            (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "9") (term "0") (inst "j=j") (inst "i=i"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,1,0"))
            (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,1,0"))
            (rule "add_literals" (formula "9") (term "0,0,0,1,0,0,1,0"))
            (rule "add_zero_left" (formula "9") (term "0,0,1,0,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,1,0"))
            (rule "nnf_imp2or" (formula "9") (term "0"))
            (rule "nnf_notAnd" (formula "9") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
            (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
            (rule "mul_literals" (formula "9") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
            (rule "nnf_imp2or" (formula "9") (term "0,1,0"))
            (rule "nnf_notAnd" (formula "9") (term "0,0,1,0"))
            (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,1,0"))
            (rule "mul_literals" (formula "9") (term "0,1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,1,0"))
            (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0,1,0"))
            (rule "mul_literals" (formula "9") (term "0,1,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0,1,0"))
            (rule "all_pull_out3" (formula "11") (term "0"))
            (rule "shift_paren_or" (formula "11") (term "0,0"))
            (rule "commute_or" (formula "9") (term "0,0,1,0"))
            (rule "shift_paren_or" (formula "11") (term "0,0,0"))
            (rule "all_pull_out3" (formula "26") (term "0"))
            (rule "shift_paren_or" (formula "26") (term "0,0"))
            (rule "shift_paren_or" (formula "26") (term "0,0,0"))
            (rule "onlyCreatedObjectsAreReferencedFinal" (formula "25") (term "0,0") (ifseqformula "3") (ifseqformula "4"))
            (rule "replace_known_right" (formula "25") (term "0") (ifseqformula "29"))
             (builtin "One Step Simplification" (formula "25"))
            (rule "onlyCreatedObjectsAreReferencedFinal" (formula "23") (term "0,0,0") (ifseqformula "3") (ifseqformula "4"))
            (rule "replace_known_right" (formula "23") (term "1") (ifseqformula "33"))
             (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "29")))
            (rule "closeFalse" (formula "23"))
         )
      )
   )
   (branch "Exceptional Post (classify)"
       (builtin "One Step Simplification" (formula "7"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "translateJavaSubInt" (formula "7") (term "3,0,0,1,0,1"))
      (rule "translateJavaMulInt" (formula "7") (term "1,1,0,0,1"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "9"))
      (rule "notLeft" (formula "7"))
      (rule "close" (formula "11") (ifseqformula "10"))
   )
   (branch "Pre (classify)"
       (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "2")))
      (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "8") (term "1"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "inEqSimp_commuteLeq" (formula "8") (term "1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "8") (term "0,1,0,0,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "8") (term "1,1,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "8") (term "0,1,0,0,1"))
      (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "6"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "translateJavaSubInt" (formula "6") (term "0,2,0,1,0"))
      (rule "translateJavaSubInt" (formula "6") (term "0,2,1,1,0"))
      (rule "translateJavaMulInt" (formula "6") (term "1,1,1,0,0,0,0"))
      (rule "andLeft" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "andLeft" (formula "8"))
      (rule "notLeft" (formula "7"))
      (rule "notLeft" (formula "6"))
      (rule "eqSymm" (formula "11"))
      (rule "eqSymm" (formula "8"))
      (rule "replace_known_left" (formula "15") (term "0") (ifseqformula "12"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "15"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "false_right" (formula "16"))
      (rule "polySimp_elimSub" (formula "11") (term "0,2,0"))
      (rule "mul_literals" (formula "11") (term "1,0,2,0"))
      (rule "eqSymm" (formula "11"))
      (rule "polySimp_elimSub" (formula "11") (term "0,2,0"))
      (rule "mul_literals" (formula "11") (term "1,0,2,0"))
      (rule "eqSymm" (formula "11"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
      (rule "polySimp_addComm0" (formula "11") (term "0,2,0"))
      (rule "eqSymm" (formula "11"))
      (rule "polySimp_addComm0" (formula "11") (term "0,2,0"))
      (rule "eqSymm" (formula "11"))
      (rule "inEqSimp_commuteLeq" (formula "6"))
      (rule "applyEq" (formula "16") (term "1,2,0") (ifseqformula "9"))
      (rule "applyEq" (formula "16") (term "1,2,1") (ifseqformula "9"))
      (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "12"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "andLeft" (formula "12"))
      (rule "andLeft" (formula "12"))
      (rule "andLeft" (formula "12"))
      (rule "andLeft" (formula "12"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "12"))
      (rule "andLeft" (formula "12"))
      (rule "andLeft" (formula "14"))
      (rule "notLeft" (formula "13"))
      (rule "notLeft" (formula "12"))
      (rule "inEqSimp_commuteLeq" (formula "17"))
      (rule "inEqSimp_commuteLeq" (formula "15"))
      (rule "inEqSimp_commuteLeq" (formula "16"))
      (rule "inEqSimp_commuteLeq" (formula "12"))
      (rule "applyEq" (formula "17") (term "1") (ifseqformula "14"))
      (rule "applyEq" (formula "19") (term "0") (ifseqformula "9"))
      (rule "applyEq" (formula "18") (term "1,0") (ifseqformula "9"))
      (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "9"))
      (rule "inEqSimp_commuteGeq" (formula "17"))
      (rule "applyEq" (formula "15") (term "0") (ifseqformula "14"))
      (rule "applyEq" (formula "11") (term "1,0,2,0") (ifseqformula "14"))
      (rule "eqSymm" (formula "11"))
      (rule "applyEq" (formula "8") (term "0,1,0") (ifseqformula "14"))
      (rule "translateJavaSubInt" (formula "18") (term "3,0"))
      (rule "polySimp_elimSub" (formula "18") (term "3,0"))
      (rule "mul_literals" (formula "18") (term "1,3,0"))
      (rule "polySimp_addComm0" (formula "18") (term "3,0"))
      (rule "applyEq" (formula "11") (term "1,0,2,0") (ifseqformula "14"))
      (rule "eqSymm" (formula "11"))
      (rule "applyEq" (formula "18") (term "1,3,0") (ifseqformula "14"))
      (rule "applyEq" (formula "16") (term "1") (ifseqformula "14"))
      (rule "applyEq" (formula "10") (term "3,0") (ifseqformula "14"))
      (rule "applyEq" (formula "8") (term "2,0") (ifseqformula "14"))
      (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "17"))
      (rule "mul_literals" (formula "15") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "15"))
      (rule "mul_literals" (formula "15") (term "1"))
      (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "10") (term "0"))
      (rule "replace_known_left" (formula "10") (term "1,0") (ifseqformula "2"))
       (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "23")) (ifInst ""  (formula "11")))
      (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "20") (term "0") (inst "j=j") (inst "i=i"))
       (builtin "One Step Simplification" (formula "20"))
      (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,1,0"))
      (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,1,0"))
      (rule "add_literals" (formula "20") (term "0,0,0,1,0,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "20") (term "1,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0,1,0"))
      (rule "mul_literals" (formula "20") (term "0,1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
      (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
      (rule "nnf_imp2or" (formula "20") (term "0"))
      (rule "nnf_notAnd" (formula "20") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
      (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
      (rule "mul_literals" (formula "20") (term "1,0,0,0"))
      (rule "nnf_imp2or" (formula "20") (term "0,1,0"))
      (rule "nnf_notAnd" (formula "20") (term "0,0,1,0"))
      (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0,1,0"))
      (rule "mul_literals" (formula "20") (term "0,1,0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0,1,0"))
      (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,1,0"))
      (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,1,0"))
      (rule "add_literals" (formula "20") (term "0,0,0,1,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0,1,0"))
      (rule "mul_literals" (formula "20") (term "0,1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0,1,0"))
      (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "11") (term "0") (inst "j=j") (inst "i=i"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,1,0"))
      (rule "mul_literals" (formula "11") (term "0,1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
      (rule "nnf_imp2or" (formula "11") (term "0"))
      (rule "nnf_notAnd" (formula "11") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
      (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
      (rule "mul_literals" (formula "11") (term "1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
      (rule "nnf_imp2or" (formula "11") (term "0,1,0"))
      (rule "nnf_notAnd" (formula "11") (term "0,0,1,0"))
      (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,1,0"))
      (rule "mul_literals" (formula "11") (term "0,1,0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,1,0"))
      (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,1,0"))
      (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,1,0"))
      (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,1,0"))
      (rule "add_zero_left" (formula "11") (term "0,0,1,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,1,0"))
      (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "10") (term "0"))
      (rule "replace_known_left" (formula "10") (term "1,0") (ifseqformula "2"))
       (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "24")) (ifInst ""  (formula "11")))
      (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "11") (term "0") (inst "i=i"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "translateJavaAddInt" (formula "11") (term "0,2,1,1,0"))
      (rule "translateJavaSubInt" (formula "11") (term "1,1,0,0"))
      (rule "polySimp_elimSub" (formula "11") (term "1,1,0,0"))
      (rule "mul_literals" (formula "11") (term "1,1,1,0,0"))
      (rule "polySimp_addComm0" (formula "11") (term "0,2,1,1,0"))
      (rule "polySimp_addComm0" (formula "11") (term "1,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
      (rule "nnf_imp2or" (formula "11") (term "0"))
      (rule "nnf_notAnd" (formula "11") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
      (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
      (rule "mul_literals" (formula "11") (term "1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
      (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "10") (term "0") (inst "j=j") (inst "i=i"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,1,0"))
      (rule "mul_literals" (formula "10") (term "0,1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,1,0"))
      (rule "nnf_imp2or" (formula "10") (term "0"))
      (rule "nnf_notAnd" (formula "10") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
      (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "10") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
      (rule "mul_literals" (formula "10") (term "1,0,0,0"))
      (rule "nnf_imp2or" (formula "10") (term "0,1,0"))
      (rule "nnf_notAnd" (formula "10") (term "0,0,1,0"))
      (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,1,0"))
      (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,1,0"))
      (rule "add_literals" (formula "10") (term "0,0,0,1,0,0,1,0"))
      (rule "add_zero_left" (formula "10") (term "0,0,1,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,1,0"))
      (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,1,0"))
      (rule "mul_literals" (formula "10") (term "0,1,0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,1,0"))
      (rule "commute_or" (formula "20") (term "0,0,1,0"))
      (rule "commute_or" (formula "11") (term "0,0,1,0"))
      (rule "ifthenelse_split" (formula "8") (term "0"))
      (branch "self.equal_buckets = TRUE TRUE"
         (rule "newSym_eq" (formula "9") (inst "newSymDef=mul(int::final(self,
               de.wiesler.Classifier::$num_buckets),
    Z(0(#)))") (inst "l=l_0"))
         (rule "times_zero_1" (formula "9") (term "1,1"))
         (rule "add_zero_right" (formula "9") (term "1"))
         (rule "applyEq" (formula "13") (term "1,0,0,0,1,0") (ifseqformula "9"))
         (rule "applyEq" (formula "19") (term "0") (ifseqformula "9"))
         (rule "applyEq" (formula "14") (term "1,0,2,0") (ifseqformula "9"))
         (rule "eqSymm" (formula "14"))
         (rule "applyEq" (formula "22") (term "1,1,0,0,0,1,0") (ifseqformula "9"))
         (rule "applyEq" (formula "12") (term "1,1,1,0,0") (ifseqformula "9"))
         (rule "applyEq" (formula "22") (term "1,1,1,0,0") (ifseqformula "9"))
         (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "9"))
         (rule "eqSymm" (formula "10"))
         (rule "applyEq" (formula "20") (term "1") (ifseqformula "9"))
         (rule "applyEq" (formula "21") (term "0") (ifseqformula "9"))
         (rule "inEqSimp_commuteLeq" (formula "21"))
         (rule "applyEq" (formula "13") (term "1,1,0,0") (ifseqformula "9"))
         (rule "applyEq" (formula "14") (term "1,0,2,0") (ifseqformula "9"))
         (rule "eqSymm" (formula "14"))
         (rule "applyEq" (formula "6") (term "0") (ifseqformula "10"))
         (rule "applyEq" (formula "7") (term "0") (ifseqformula "10"))
         (rule "applyEq" (formula "17") (term "1") (ifseqformula "9"))
         (rule "inEqSimp_subsumption6" (formula "6") (ifseqformula "19"))
         (rule "mul_literals" (formula "6") (term "1,1,0"))
         (rule "greater_literals" (formula "6") (term "0,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "leq_literals" (formula "6") (term "0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "true_left" (formula "6"))
         (rule "elimGcdLeq_antec" (formula "6") (inst "elimGcd=Z(2(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcdRightDiv=Z(4(6(#)))"))
         (rule "polySimp_mulLiterals" (formula "6") (term "1,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0,0,0,1,0"))
         (rule "neg_literal" (formula "6") (term "0,0,0,0,0,1,0"))
         (rule "leq_literals" (formula "6") (term "0,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "mul_literals" (formula "6") (term "1,0,0,0,0,0"))
         (rule "polySimp_addLiterals" (formula "6") (term "0,0,0,0"))
         (rule "add_literals" (formula "6") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "6") (term "0,0"))
         (rule "add_literals" (formula "6") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "6") (term "1,0,0"))
         (rule "add_zero_right" (formula "6") (term "0,0"))
         (rule "qeq_literals" (formula "6") (term "0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "true_left" (formula "6"))
         (rule "all_pull_out3" (formula "11") (term "0"))
         (rule "shift_paren_or" (formula "11") (term "0,0"))
         (rule "shift_paren_or" (formula "11") (term "0,0,0"))
         (rule "all_pull_out3" (formula "20") (term "0"))
         (rule "shift_paren_or" (formula "20") (term "0,0"))
         (rule "shift_paren_or" (formula "20") (term "0,0,0"))
         (rule "allLeft" (formula "11") (inst "t=add(Z(neglit(2(#))), l_0)"))
         (rule "polySimp_addAssoc" (formula "11") (term "1,1,0,0"))
         (rule "add_literals" (formula "11") (term "0,1,1,0,0"))
         (rule "inEqSimp_homoInEq1" (formula "11") (term "1,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,1,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,1,0,0,0,0"))
         (rule "mul_literals" (formula "11") (term "0,1,0,1,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,1,0,0,0,0"))
         (rule "polySimp_addComm0" (formula "11") (term "0,0,1,0,0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,1,0,0,0,0"))
         (rule "add_literals" (formula "11") (term "1,1,0,1,0,0,0,0"))
         (rule "times_zero_1" (formula "11") (term "1,0,1,0,0,0,0"))
         (rule "add_zero_right" (formula "11") (term "0,1,0,0,0,0"))
         (rule "leq_literals" (formula "11") (term "1,0,0,0,0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "inEqSimp_homoInEq0" (formula "11") (term "0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
         (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0"))
         (rule "add_literals" (formula "11") (term "0,0,0,0,0,0"))
         (rule "applyEq" (formula "11") (term "1,1,0") (ifseqformula "13"))
         (rule "inEqSimp_sepNegMonomial1" (formula "11") (term "0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "0,0,0,0,0"))
         (rule "inEqSimp_contradInEq1" (formula "11") (term "0,0,0,0") (ifseqformula "18"))
         (rule "qeq_literals" (formula "11") (term "0,0,0,0,0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "commute_or" (formula "11") (term "0,0"))
         (rule "allLeft" (formula "12") (inst "t=Z(1(#))"))
         (rule "add_literals" (formula "12") (term "1,1,0,0"))
         (rule "leq_literals" (formula "12") (term "0,0,0,0,0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "inEqSimp_commuteGeq" (formula "12") (term "0,0,0,0"))
         (rule "inEqSimp_contradInEq1" (formula "12") (term "0,0,0,0") (ifseqformula "19"))
         (rule "qeq_literals" (formula "12") (term "0,0,0,0,0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "commute_or" (formula "12") (term "0,0"))
         (rule "allLeft" (formula "10") (inst "t=Z(0(#))"))
         (rule "add_zero_right" (formula "10") (term "0,2,0,1"))
         (rule "leq_literals" (formula "10") (term "0,0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "inEqSimp_homoInEq1" (formula "10") (term "0"))
         (rule "times_zero_2" (formula "10") (term "1,0,0"))
         (rule "add_zero_right" (formula "10") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0"))
         (rule "mul_literals" (formula "10") (term "1,0"))
         (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "20"))
         (rule "qeq_literals" (formula "10") (term "0,0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "allLeft" (formula "14") (inst "t=Z(0(#))"))
         (rule "add_zero_right" (formula "14") (term "1,1,0,0"))
         (rule "leq_literals" (formula "14") (term "0,0,0,0,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "inEqSimp_commuteGeq" (formula "14") (term "0,0,0,0"))
         (rule "inEqSimp_contradInEq1" (formula "14") (term "0,0,0,0") (ifseqformula "21"))
         (rule "qeq_literals" (formula "14") (term "0,0,0,0,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "commute_or" (formula "14") (term "0,0"))
         (rule "allLeft" (formula "11") (inst "t=add(Z(neglit(2(#))), l_0)"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,2,0,1"))
         (rule "add_literals" (formula "11") (term "0,0,2,0,1"))
         (rule "inEqSimp_commuteGeq" (formula "11") (term "1"))
         (rule "inEqSimp_homoInEq1" (formula "11") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,1,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,1,0"))
         (rule "mul_literals" (formula "11") (term "0,1,0,1,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,1,0"))
         (rule "polySimp_addComm1" (formula "11") (term "0,0,1,0"))
         (rule "add_literals" (formula "11") (term "0,0,0,1,0"))
         (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,1,0"))
         (rule "add_literals" (formula "11") (term "1,1,0,1,0"))
         (rule "times_zero_1" (formula "11") (term "1,0,1,0"))
         (rule "add_zero_right" (formula "11") (term "0,1,0"))
         (rule "leq_literals" (formula "11") (term "1,0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "inEqSimp_homoInEq0" (formula "11") (term "0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
         (rule "mul_literals" (formula "11") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
         (rule "add_literals" (formula "11") (term "0,0,0"))
         (rule "applyEq" (formula "11") (term "0,1") (ifseqformula "17"))
         (rule "inEqSimp_homoInEq0" (formula "11") (term "1"))
         (rule "polySimp_pullOutFactor1" (formula "11") (term "0,1"))
         (rule "add_literals" (formula "11") (term "1,0,1"))
         (rule "times_zero_1" (formula "11") (term "0,1"))
         (rule "qeq_literals" (formula "11") (term "1"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "true_left" (formula "11"))
         (rule "allLeft" (formula "24") (inst "t=Z(0(#))"))
         (rule "add_zero_right" (formula "24") (term "1,1,0,0"))
         (rule "leq_literals" (formula "24") (term "0,0,0,0,0"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "inEqSimp_homoInEq1" (formula "24") (term "0,0,0,0"))
         (rule "times_zero_2" (formula "24") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "24") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,0"))
         (rule "mul_literals" (formula "24") (term "1,0,0,0,0"))
         (rule "inEqSimp_contradInEq1" (formula "24") (term "0,0,0,0") (ifseqformula "21"))
         (rule "qeq_literals" (formula "24") (term "0,0,0,0,0"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "commute_or" (formula "24") (term "0,0"))
         (rule "arrayLengthNotNegative" (formula "20") (term "0"))
         (rule "inEqSimp_subsumption1" (formula "20") (ifseqformula "21"))
         (rule "leq_literals" (formula "20") (term "0"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "true_left" (formula "20"))
         (rule "arrayLengthIsAShort" (formula "22") (term "0"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "true_left" (formula "22"))
         (rule "arrayLengthIsAShort" (formula "23") (term "0"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "true_left" (formula "23"))
         (rule "arrayLengthNotNegative" (formula "22") (term "0"))
         (rule "allLeft" (formula "13") (inst "t=add(Z(neglit(1(#))), l_0)"))
         (rule "inEqSimp_homoInEq1" (formula "13") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,1,0"))
         (rule "polySimp_rightDist" (formula "13") (term "1,0,1,0"))
         (rule "mul_literals" (formula "13") (term "0,1,0,1,0"))
         (rule "polySimp_addAssoc" (formula "13") (term "0,1,0"))
         (rule "polySimp_addComm0" (formula "13") (term "0,0,1,0"))
         (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,1,0"))
         (rule "add_literals" (formula "13") (term "1,1,0,1,0"))
         (rule "times_zero_1" (formula "13") (term "1,0,1,0"))
         (rule "add_zero_right" (formula "13") (term "0,1,0"))
         (rule "leq_literals" (formula "13") (term "1,0"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0"))
         (rule "mul_literals" (formula "13") (term "1,0"))
         (rule "inEqSimp_contradInEq1" (formula "13") (term "0") (ifseqformula "22"))
         (rule "qeq_literals" (formula "13") (term "0,0"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "allLeft" (formula "12") (inst "t=add(Z(neglit(2(#))), l_0)"))
         (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,1,0"))
         (rule "polySimp_rightDist" (formula "12") (term "1,0,1,0"))
         (rule "mul_literals" (formula "12") (term "0,1,0,1,0"))
         (rule "polySimp_addAssoc" (formula "12") (term "0,1,0"))
         (rule "polySimp_addComm0" (formula "12") (term "0,0,1,0"))
         (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,1,0"))
         (rule "add_literals" (formula "12") (term "1,1,0,1,0"))
         (rule "times_zero_1" (formula "12") (term "1,0,1,0"))
         (rule "add_zero_right" (formula "12") (term "0,1,0"))
         (rule "leq_literals" (formula "12") (term "1,0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "inEqSimp_homoInEq0" (formula "12") (term "0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "12") (term "1,0,0"))
         (rule "mul_literals" (formula "12") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "12") (term "0,0"))
         (rule "polySimp_addComm1" (formula "12") (term "0,0,0"))
         (rule "add_literals" (formula "12") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0"))
         (rule "add_literals" (formula "12") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "12") (term "1,0,0"))
         (rule "add_zero_right" (formula "12") (term "0,0"))
         (rule "qeq_literals" (formula "12") (term "0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "applyEq" (formula "12") (term "0") (ifseqformula "18"))
         (rule "inEqSimp_homoInEq1" (formula "12"))
         (rule "polySimp_pullOutFactor1" (formula "12") (term "0"))
         (rule "add_literals" (formula "12") (term "1,0"))
         (rule "times_zero_1" (formula "12") (term "0"))
         (rule "leq_literals" (formula "12"))
         (rule "true_left" (formula "12"))
         (rule "allLeft" (formula "15") (inst "t=add(Z(neglit(1(#))), l_0)"))
         (rule "inEqSimp_homoInEq1" (formula "15") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,0,1,0"))
         (rule "polySimp_rightDist" (formula "15") (term "1,0,1,0"))
         (rule "mul_literals" (formula "15") (term "0,1,0,1,0"))
         (rule "polySimp_addAssoc" (formula "15") (term "0,1,0"))
         (rule "polySimp_addComm0" (formula "15") (term "0,0,1,0"))
         (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,1,0"))
         (rule "add_literals" (formula "15") (term "1,1,0,1,0"))
         (rule "times_zero_1" (formula "15") (term "1,0,1,0"))
         (rule "add_zero_right" (formula "15") (term "0,1,0"))
         (rule "leq_literals" (formula "15") (term "1,0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "inEqSimp_homoInEq0" (formula "15") (term "0"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "15") (term "1,0,0"))
         (rule "mul_literals" (formula "15") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "15") (term "0,0"))
         (rule "add_literals" (formula "15") (term "0,0,0"))
         (rule "add_zero_left" (formula "15") (term "0,0"))
         (rule "inEqSimp_invertInEq1" (formula "15") (term "0"))
         (rule "times_zero_2" (formula "15") (term "1,0"))
         (rule "polySimp_mulLiterals" (formula "15") (term "0,0"))
         (rule "polySimp_elimOne" (formula "15") (term "0,0"))
         (rule "inEqSimp_contradInEq1" (formula "15") (term "0") (ifseqformula "23"))
         (rule "qeq_literals" (formula "15") (term "0,0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "allLeft" (formula "16") (inst "t=add(Z(neglit(2(#))), l_0)"))
         (rule "inEqSimp_homoInEq1" (formula "16") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "16") (term "1,0,1,0"))
         (rule "polySimp_rightDist" (formula "16") (term "1,0,1,0"))
         (rule "mul_literals" (formula "16") (term "0,1,0,1,0"))
         (rule "polySimp_addAssoc" (formula "16") (term "0,1,0"))
         (rule "polySimp_addComm0" (formula "16") (term "0,0,1,0"))
         (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,1,0"))
         (rule "add_literals" (formula "16") (term "1,1,0,1,0"))
         (rule "times_zero_1" (formula "16") (term "1,0,1,0"))
         (rule "add_zero_right" (formula "16") (term "0,1,0"))
         (rule "leq_literals" (formula "16") (term "1,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "inEqSimp_homoInEq0" (formula "16") (term "0"))
         (rule "polySimp_mulComm0" (formula "16") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "16") (term "1,0,0"))
         (rule "mul_literals" (formula "16") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "16") (term "0,0"))
         (rule "add_literals" (formula "16") (term "0,0,0"))
         (rule "applyEq" (formula "16") (term "0,1") (ifseqformula "19"))
         (rule "replace_known_left" (formula "16") (term "1") (ifseqformula "15"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "true_left" (formula "16"))
         (rule "allLeft" (formula "27") (inst "t=add(Z(neglit(2(#))), l_0)"))
         (rule "inEqSimp_homoInEq1" (formula "27") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "27") (term "1,0,1,0"))
         (rule "polySimp_rightDist" (formula "27") (term "1,0,1,0"))
         (rule "mul_literals" (formula "27") (term "0,1,0,1,0"))
         (rule "polySimp_addAssoc" (formula "27") (term "0,1,0"))
         (rule "polySimp_addComm1" (formula "27") (term "0,0,1,0"))
         (rule "add_literals" (formula "27") (term "0,0,0,1,0"))
         (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,1,0"))
         (rule "add_literals" (formula "27") (term "1,1,0,1,0"))
         (rule "times_zero_1" (formula "27") (term "1,0,1,0"))
         (rule "add_zero_right" (formula "27") (term "0,1,0"))
         (rule "leq_literals" (formula "27") (term "1,0"))
          (builtin "One Step Simplification" (formula "27"))
         (rule "inEqSimp_homoInEq0" (formula "27") (term "0"))
         (rule "polySimp_mulComm0" (formula "27") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "27") (term "1,0,0"))
         (rule "mul_literals" (formula "27") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "27") (term "0,0"))
         (rule "add_literals" (formula "27") (term "0,0,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "27") (term "0"))
         (rule "polySimp_mulLiterals" (formula "27") (term "0,0"))
         (rule "polySimp_elimOne" (formula "27") (term "0,0"))
         (rule "applyEq" (formula "27") (term "0,1") (ifseqformula "18"))
         (rule "replace_known_left" (formula "27") (term "1") (ifseqformula "15"))
          (builtin "One Step Simplification" (formula "27"))
         (rule "true_left" (formula "27"))
         (rule "onlyCreatedObjectsAreReferencedFinal" (formula "9") (term "0,0") (ifseqformula "2") (ifseqformula "3"))
         (rule "replace_known_right" (formula "9") (term "1") (ifseqformula "33"))
          (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "31")))
         (rule "closeFalse" (formula "9"))
      )
      (branch "self.equal_buckets = TRUE FALSE"
         (rule "applyEq" (formula "10") (term "1,1,1,0,0") (ifseqformula "8"))
         (rule "applyEq" (formula "19") (term "0") (ifseqformula "8"))
         (rule "inEqSimp_commuteLeq" (formula "19"))
         (rule "applyEq" (formula "20") (term "1,1,0,0,0,1,0") (ifseqformula "8"))
         (rule "applyEq" (formula "12") (term "1,0,2,0") (ifseqformula "8"))
         (rule "eqSymm" (formula "12"))
         (rule "applyEq" (formula "11") (term "1,1,0,0") (ifseqformula "8"))
         (rule "applyEq" (formula "11") (term "1,0,0,0,1,0") (ifseqformula "8"))
         (rule "applyEq" (formula "20") (term "1,1,1,0,0") (ifseqformula "8"))
         (rule "applyEq" (formula "17") (term "0") (ifseqformula "8"))
         (rule "applyEq" (formula "17") (term "1") (ifseqformula "8"))
         (rule "applyEq" (formula "12") (term "1,0,2,0") (ifseqformula "8"))
         (rule "eqSymm" (formula "12"))
         (rule "applyEq" (formula "15") (term "1") (ifseqformula "8"))
         (rule "arrayLengthIsAShort" (formula "17") (term "0"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "true_left" (formula "17"))
         (rule "arrayLengthNotNegative" (formula "17") (term "0"))
         (rule "arrayLengthIsAShort" (formula "16") (term "0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "true_left" (formula "16"))
         (rule "arrayLengthNotNegative" (formula "16") (term "0"))
         (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "17"))
         (rule "leq_literals" (formula "16") (term "0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "true_left" (formula "16"))
         (rule "all_pull_out3" (formula "11") (term "0"))
         (rule "shift_paren_or" (formula "11") (term "0,0"))
         (rule "shift_paren_or" (formula "11") (term "0,0,0"))
         (rule "all_pull_out3" (formula "20") (term "0"))
         (rule "shift_paren_or" (formula "20") (term "0,0"))
         (rule "shift_paren_or" (formula "20") (term "0,0,0"))
         (rule "allLeft" (formula "11") (inst "t=add(Z(neglit(2(#))),
    int::final(self,
               de.wiesler.Classifier::$num_buckets))"))
         (rule "polySimp_addAssoc" (formula "11") (term "1,1,0,0"))
         (rule "add_literals" (formula "11") (term "0,1,1,0,0"))
         (rule "inEqSimp_homoInEq0" (formula "11") (term "0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0,0"))
         (rule "add_literals" (formula "11") (term "0,0,0,0,0,0,0"))
         (rule "inEqSimp_homoInEq1" (formula "11") (term "1,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,1,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,1,0,0,0,0"))
         (rule "mul_literals" (formula "11") (term "0,1,0,1,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,1,0,0,0,0"))
         (rule "polySimp_addComm0" (formula "11") (term "0,0,1,0,0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,1,0,0,0,0"))
         (rule "add_literals" (formula "11") (term "1,1,0,1,0,0,0,0"))
         (rule "times_zero_1" (formula "11") (term "1,0,1,0,0,0,0"))
         (rule "add_zero_right" (formula "11") (term "0,1,0,0,0,0"))
         (rule "leq_literals" (formula "11") (term "1,0,0,0,0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "applyEq" (formula "11") (term "1,1,0") (ifseqformula "13"))
         (rule "inEqSimp_sepNegMonomial1" (formula "11") (term "0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "0,0,0,0,0"))
         (rule "inEqSimp_contradInEq1" (formula "11") (term "0,0,0,0") (ifseqformula "6"))
         (rule "qeq_literals" (formula "11") (term "0,0,0,0,0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "commute_or" (formula "11") (term "0,0"))
         (rule "allLeft" (formula "12") (inst "t=Z(1(#))"))
         (rule "add_literals" (formula "12") (term "1,1,0,0"))
         (rule "leq_literals" (formula "12") (term "0,0,0,0,0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "inEqSimp_commuteGeq" (formula "12") (term "0,0,0,0"))
         (rule "inEqSimp_contradInEq1" (formula "12") (term "0,0,0,0") (ifseqformula "6"))
         (rule "qeq_literals" (formula "12") (term "0,0,0,0,0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "commute_or" (formula "12") (term "0,0"))
         (rule "allLeft" (formula "22") (inst "t=Z(0(#))"))
         (rule "leq_literals" (formula "22") (term "0,0,0,0,0"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "add_zero_right" (formula "22") (term "1,1,0,0"))
         (rule "inEqSimp_homoInEq1" (formula "22") (term "0,0,0,0"))
         (rule "times_zero_2" (formula "22") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "22") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0,0"))
         (rule "mul_literals" (formula "22") (term "1,0,0,0,0"))
         (rule "inEqSimp_contradInEq1" (formula "22") (term "0,0,0,0") (ifseqformula "6"))
         (rule "qeq_literals" (formula "22") (term "0,0,0,0,0"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "commute_or" (formula "22") (term "0,0"))
         (rule "allLeft" (formula "10") (inst "t=Z(0(#))"))
         (rule "leq_literals" (formula "10") (term "0,0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "add_literals" (formula "10") (term "0,2,0,1"))
         (rule "inEqSimp_homoInEq1" (formula "10") (term "0"))
         (rule "mul_literals" (formula "10") (term "1,0,0"))
         (rule "add_zero_right" (formula "10") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0"))
         (rule "mul_literals" (formula "10") (term "1,0"))
         (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "6"))
         (rule "qeq_literals" (formula "10") (term "0,0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "allLeft" (formula "14") (inst "t=Z(0(#))"))
         (rule "add_zero_right" (formula "14") (term "1,1,0,0"))
         (rule "leq_literals" (formula "14") (term "0,0,0,0,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "inEqSimp_commuteGeq" (formula "14") (term "0,0,0,0"))
         (rule "inEqSimp_contradInEq1" (formula "14") (term "0,0,0,0") (ifseqformula "6"))
         (rule "qeq_literals" (formula "14") (term "0,0,0,0,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "commute_or" (formula "14") (term "0,0"))
         (rule "allLeft" (formula "11") (inst "t=add(Z(neglit(2(#))),
    int::final(self,
               de.wiesler.Classifier::$num_buckets))"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,2,0,1"))
         (rule "add_literals" (formula "11") (term "0,0,2,0,1"))
         (rule "inEqSimp_commuteGeq" (formula "11") (term "1"))
         (rule "inEqSimp_homoInEq0" (formula "11") (term "0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
         (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,0"))
         (rule "add_literals" (formula "11") (term "0,0,0,0"))
         (rule "inEqSimp_homoInEq1" (formula "11") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,1,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,1,0"))
         (rule "mul_literals" (formula "11") (term "0,1,0,1,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,1,0"))
         (rule "polySimp_addComm1" (formula "11") (term "0,0,1,0"))
         (rule "add_literals" (formula "11") (term "0,0,0,1,0"))
         (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,1,0"))
         (rule "add_literals" (formula "11") (term "1,1,0,1,0"))
         (rule "times_zero_1" (formula "11") (term "1,0,1,0"))
         (rule "add_zero_right" (formula "11") (term "0,1,0"))
         (rule "leq_literals" (formula "11") (term "1,0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "applyEq" (formula "11") (term "0,1") (ifseqformula "17"))
         (rule "inEqSimp_homoInEq0" (formula "11") (term "1"))
         (rule "polySimp_pullOutFactor1" (formula "11") (term "0,1"))
         (rule "add_literals" (formula "11") (term "1,0,1"))
         (rule "times_zero_1" (formula "11") (term "0,1"))
         (rule "qeq_literals" (formula "11") (term "1"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "true_left" (formula "11"))
         (rule "onlyCreatedObjectsAreReferencedFinal" (formula "31") (term "1,2,1") (ifseqformula "2") (ifseqformula "3"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "30"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferencedFinal" (formula "23") (term "0,0,0") (ifseqformula "3") (ifseqformula "4"))
         (rule "replace_known_right" (formula "23") (term "1") (ifseqformula "32"))
          (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "30")))
         (rule "closeFalse" (formula "23"))
      )
   )
   (branch "Null reference (t_1 = null)"
       (builtin "One Step Simplification" (formula "7"))
      (rule "notRight" (formula "7"))
      (rule "applyEq" (formula "9") (term "1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "9") (term "0,1,2,0") (ifseqformula "1"))
      (rule "applyEq" (formula "8") (term "1,0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "9") (term "0,1,2,1") (ifseqformula "1"))
      (rule "applyEq" (formula "9") (term "1,1") (ifseqformula "1"))
      (rule "applyEq" (formula "8") (term "1,1") (ifseqformula "1"))
      (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "7"))
       (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "1")))
      (rule "closeFalse" (formula "7"))
   )
)
(branch "Null reference (t = null)"
    (builtin "One Step Simplification" (formula "8"))
   (rule "notRight" (formula "8"))
   (rule "applyEq" (formula "9") (term "1,1") (ifseqformula "1"))
   (rule "applyEq" (formula "9") (term "1,0") (ifseqformula "1"))
   (rule "applyEq" (formula "9") (term "0,1,2,1") (ifseqformula "1"))
   (rule "applyEq" (formula "9") (term "0,1,2,0") (ifseqformula "1"))
   (rule "methodCallWithAssignmentUnfoldTarget" (formula "8") (term "1") (inst "#v0=t"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "t_1"))
   (rule "assignment_read_attribute_this_final" (formula "8"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "applyEq" (formula "8") (term "0,1,0") (ifseqformula "1"))
    (builtin "Use Operation Contract" (formula "8") (newnames "heapBefore_classify_2,result_22,exc_26") (contract "de.wiesler.Tree[de.wiesler.Tree::classify(int)].JML normal_behavior operation contract.0"))
   (branch "Post (classify)"
       (builtin "One Step Simplification" (formula "8"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "translateJavaMulInt" (formula "8") (term "1,1,0,0,1"))
      (rule "translateJavaSubInt" (formula "8") (term "3,0,0,1,0,1"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "11"))
      (rule "andLeft" (formula "10"))
      (rule "eqSymm" (formula "9"))
      (rule "polySimp_elimSub" (formula "12") (term "3,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1"))
      (rule "assignment" (formula "14") (term "1"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "variableDeclaration" (formula "14") (term "1") (newnames "bucket"))
      (rule "ifElseUnfold" (formula "14") (term "1") (inst "#boolv=x_2"))
      (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_2"))
      (rule "assignment_read_attribute_this_final" (formula "14"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "ifElseSplit" (formula "14"))
      (branch "if x_2 true"
          (builtin "One Step Simplification" (formula "15"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "variableDeclarationAssign" (formula "15") (term "1"))
         (rule "variableDeclaration" (formula "15") (term "1") (newnames "bucket_index"))
         (rule "compound_subtraction_2" (formula "15") (term "1") (inst "#v0=x_2") (inst "#v1=x_3"))
         (rule "variableDeclarationAssign" (formula "15") (term "1"))
         (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_4"))
         (rule "assignment" (formula "15") (term "1"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "variableDeclarationAssign" (formula "15") (term "1"))
         (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_3"))
         (rule "compound_division_1" (formula "15") (term "1") (inst "#v=x_5"))
         (rule "variableDeclarationAssign" (formula "15") (term "1"))
         (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_5"))
         (rule "assignment_read_attribute_this_final" (formula "15"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "assignmentDivisionInt" (formula "15"))
         (branch "Case 1"
             (builtin "One Step Simplification" (formula "15"))
            (rule "translateJavaDivInt" (formula "15") (term "0,1,0"))
            (rule "assignmentSubtractionInt" (formula "15") (term "1"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "translateJavaSubInt" (formula "15") (term "0,1,0"))
            (rule "polySimp_elimSub" (formula "15") (term "0,1,0"))
            (rule "variableDeclarationAssign" (formula "15") (term "1"))
            (rule "variableDeclaration" (formula "15") (term "1") (newnames "equal_to_splitter"))
            (rule "compound_assignment_2" (formula "15") (term "1") (inst "#v=x_2"))
            (rule "variableDeclarationAssign" (formula "15") (term "1"))
            (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_6"))
            (rule "methodCallWithAssignmentUnfoldArguments" (formula "15") (term "1"))
            (rule "variableDeclarationAssign" (formula "15") (term "1"))
            (rule "variableDeclaration" (formula "15") (term "1") (newnames "var"))
            (rule "assignment" (formula "15") (term "1"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "variableDeclarationAssign" (formula "15") (term "1"))
            (rule "variableDeclaration" (formula "15") (term "1") (newnames "var_1"))
            (rule "eval_order_array_access4" (formula "15") (term "1") (inst "#v0=x_arr"))
            (rule "variableDeclarationAssign" (formula "15") (term "1"))
            (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_arr"))
            (rule "assignment_read_attribute_this_final" (formula "15"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "assignment_array2" (formula "15"))
            (branch "Normal Execution (x_arr != null)"
                (builtin "One Step Simplification" (formula "15"))
               (rule "onlyCreatedObjectsAreReferencedFinal" (formula "2") (term "0") (ifseqformula "4") (ifseqformula "5"))
               (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "3"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "true_left" (formula "2"))
               (rule "onlyCreatedObjectsAreReferencedFinal" (formula "13") (term "1,2,0") (ifseqformula "4") (ifseqformula "5"))
               (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "16") (term "1") (inst "#v0=x_7"))
               (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_7"))
               (rule "variableDeclarationAssign" (formula "16") (term "1"))
               (rule "variableDeclaration" (formula "16") (term "1") (newnames "a"))
               (rule "assignment" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "variableDeclarationAssign" (formula "16") (term "1"))
               (rule "variableDeclaration" (formula "16") (term "1") (newnames "b"))
               (rule "assignment" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_cmp,savedHeapBefore_cmp"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "returnUnfold" (formula "16") (term "1") (inst "#v0=x_8"))
               (rule "variableDeclarationAssign" (formula "16") (term "1"))
               (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_8"))
               (rule "less_than_comparison_simple" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "methodCallReturn" (formula "16") (term "1"))
               (rule "assignment" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "methodCallEmpty" (formula "16") (term "1"))
               (rule "blockEmpty" (formula "16") (term "1"))
               (rule "assignment" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "blockEmpty" (formula "16") (term "1"))
               (rule "compound_assignment_1_new" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "compound_subtraction_2" (formula "16") (term "1") (inst "#v0=x_1") (inst "#v1=x_2"))
               (rule "variableDeclarationAssign" (formula "16") (term "1"))
               (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_1"))
               (rule "compound_addition_2" (formula "16") (term "1") (inst "#v0=x_3") (inst "#v1=x_4"))
               (rule "variableDeclarationAssign" (formula "16") (term "1"))
               (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_9"))
               (rule "assignmentMultiplicationInt" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "translateJavaMulInt" (formula "16") (term "0,1,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "0,1,0"))
               (rule "variableDeclarationAssign" (formula "16") (term "1"))
               (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_10"))
               (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "16") (term "1") (inst "#v0=x_11"))
               (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_11"))
               (rule "variableDeclarationAssign" (formula "16") (term "1"))
               (rule "variableDeclaration" (formula "16") (term "1") (newnames "b_1"))
               (rule "assignment" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_toInt,savedHeapBefore_toInt"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "returnUnfold" (formula "16") (term "1") (inst "#v0=x_12"))
               (rule "variableDeclarationAssign" (formula "16") (term "1"))
               (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_12"))
               (rule "condition_simple" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "ifthenelse_negated" (formula "16") (term "0,1,0"))
               (rule "methodCallReturn" (formula "16") (term "1"))
               (rule "assignment" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "methodCallEmpty" (formula "16") (term "1"))
               (rule "blockEmpty" (formula "16") (term "1"))
               (rule "assignment" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "assignmentAdditionInt" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "translateJavaAddInt" (formula "16") (term "0,1,0"))
               (rule "variableDeclarationAssign" (formula "16") (term "1"))
               (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_13"))
               (rule "assignment_read_attribute_this_final" (formula "16"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "assignmentSubtractionInt" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "translateJavaSubInt" (formula "16") (term "0,1,0"))
               (rule "polySimp_elimSub" (formula "16") (term "0,1,0"))
               (rule "polySimp_addComm1" (formula "16") (term "0,1,0"))
               (rule "blockEmpty" (formula "16") (term "1"))
               (rule "methodCallReturn" (formula "16") (term "1"))
               (rule "assignment" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "methodCallEmpty" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "emptyModality" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "notRight" (formula "16"))
               (rule "polySimp_homoEq" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0"))
               (rule "polySimp_rightDist" (formula "1") (term "0,1,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
               (rule "polySimp_elimOne" (formula "1") (term "1,0,1,0"))
               (rule "polySimp_mulAssoc" (formula "1") (term "0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "13"))
               (rule "polySimp_mulAssoc" (formula "13") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "13") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,1,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0,0,0,1,0"))
               (rule "polySimp_sepNegMonomial" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "13"))
               (rule "polySimp_mulLiterals" (formula "13") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
               (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
               (rule "inEqSimp_exactShadow1" (formula "13") (ifseqformula "12"))
               (rule "greater_literals" (formula "13") (term "0"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
               (rule "polySimp_rightDist" (formula "13") (term "0,0"))
               (rule "mul_literals" (formula "13") (term "0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "13") (term "0"))
               (rule "add_literals" (formula "13") (term "1,1,0"))
               (rule "polySimp_elimOne" (formula "13") (term "1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "13"))
               (rule "mul_literals" (formula "13") (term "1"))
               (rule "Definition_axiom_for_isClassifiedAs_in_de_wiesler_Tree" (formula "16") (term "0"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "translateJavaSubInt" (formula "16") (term "1,0,1"))
               (rule "translateJavaSubInt" (formula "16") (term "0,2,0,1,0"))
               (rule "andLeft" (formula "16"))
               (rule "polySimp_elimSub" (formula "16") (term "0,2,0,1"))
               (rule "mul_literals" (formula "16") (term "1,0,2,0,1"))
               (rule "polySimp_elimSub" (formula "17") (term "1,0"))
               (rule "mul_literals" (formula "17") (term "1,1,0"))
               (rule "polySimp_addComm1" (formula "16") (term "0,2,0,1"))
               (rule "polySimp_addComm0" (formula "17") (term "1,0"))
               (rule "polySimp_addComm0" (formula "16") (term "0,0,2,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "16") (term "0"))
               (rule "add_zero_right" (formula "16") (term "0,0"))
               (rule "polySimp_rightDist" (formula "16") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "16") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "17") (term "0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0"))
               (rule "mul_literals" (formula "17") (term "0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "17") (term "0,0,0"))
               (rule "add_literals" (formula "17") (term "0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "17") (term "0,0"))
               (rule "polySimp_addComm1" (formula "17") (term "0,0,0"))
               (rule "polySimp_pullOutFactor3b" (formula "17") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "16") (term "1"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "17") (term "1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
               (rule "polySimp_rightDist" (formula "16") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0"))
               (rule "mul_literals" (formula "16") (term "0,1,0"))
               (rule "polySimp_elimOne" (formula "16") (term "1,1,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,1"))
               (rule "polySimp_rightDist" (formula "16") (term "1,1"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1"))
               (rule "mul_literals" (formula "16") (term "0,1,1"))
               (rule "polySimp_elimOne" (formula "16") (term "1,1,1"))
               (rule "Class_invariant_axiom_for_de_wiesler_PartitionResult" (formula "18"))
               (rule "true_left" (formula "18"))
               (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "9"))
                (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "3")) (ifInst ""  (formula "2")))
               (rule "closeFalse" (formula "9"))
            )
            (branch "Null Reference (x_arr = null)"
               (rule "false_right" (formula "16"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "inEqSimp_ltToLeq" (formula "13"))
               (rule "polySimp_mulAssoc" (formula "13") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "13") (term "0"))
               (rule "applyEq" (formula "11") (term "1,2,0") (ifseqformula "1"))
               (rule "applyEq" (formula "14") (term "1,2,0") (ifseqformula "1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "13"))
               (rule "polySimp_mulLiterals" (formula "13") (term "0"))
               (rule "inEqSimp_exactShadow1" (formula "13") (ifseqformula "12"))
               (rule "greater_literals" (formula "13") (term "0"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
               (rule "polySimp_rightDist" (formula "13") (term "0,0"))
               (rule "mul_literals" (formula "13") (term "0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "13") (term "0"))
               (rule "add_literals" (formula "13") (term "1,1,0"))
               (rule "polySimp_elimOne" (formula "13") (term "1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "13"))
               (rule "mul_literals" (formula "13") (term "1"))
               (rule "Class_invariant_axiom_for_de_wiesler_PartitionResult" (formula "16"))
               (rule "true_left" (formula "16"))
               (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "9"))
                (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "3")) (ifInst ""  (formula "1")) (ifInst ""  (formula "2")))
               (rule "closeFalse" (formula "9"))
            )
            (branch "Index Out of Bounds (x_arr != null, but bucket_index Out of Bounds!)"
               (rule "false_right" (formula "16"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "inEqSimp_ltToLeq" (formula "13"))
               (rule "polySimp_mulAssoc" (formula "13") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "13") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "1") (term "0,0,1"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "13"))
               (rule "polySimp_mulLiterals" (formula "13") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0,1"))
               (rule "polySimp_elimOne" (formula "1") (term "0,1"))
               (rule "inEqSimp_exactShadow1" (formula "13") (ifseqformula "12"))
               (rule "greater_literals" (formula "13") (term "0"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
               (rule "polySimp_rightDist" (formula "13") (term "0,0"))
               (rule "mul_literals" (formula "13") (term "0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "13") (term "0"))
               (rule "add_literals" (formula "13") (term "1,1,0"))
               (rule "polySimp_elimOne" (formula "13") (term "1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "13"))
               (rule "mul_literals" (formula "13") (term "1"))
               (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "9"))
                (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "3")) (ifInst ""  (formula "17")) (ifInst ""  (formula "2")))
               (rule "closeFalse" (formula "9"))
            )
         )
         (branch "Case 2"
             (builtin "One Step Simplification" (formula "15"))
            (rule "equal_literals" (formula "15") (term "0"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "closeTrue" (formula "15"))
         )
      )
      (branch "if x_2 false"
          (builtin "One Step Simplification" (formula "15"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "compound_subtraction_2" (formula "15") (term "1") (inst "#v0=x_1") (inst "#v1=x_2"))
         (rule "variableDeclarationAssign" (formula "15") (term "1"))
         (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_1"))
         (rule "assignment" (formula "15") (term "1"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "variableDeclarationAssign" (formula "15") (term "1"))
         (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_3"))
         (rule "assignment_read_attribute_this_final" (formula "15"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "assignmentSubtractionInt" (formula "15") (term "1"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "translateJavaSubInt" (formula "15") (term "0,1,0"))
         (rule "polySimp_elimSub" (formula "15") (term "0,1,0"))
         (rule "blockEmpty" (formula "15") (term "1"))
         (rule "methodCallReturn" (formula "15") (term "1"))
         (rule "assignment" (formula "15") (term "1"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "methodCallEmpty" (formula "15") (term "1"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "emptyModality" (formula "15") (term "1"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "notRight" (formula "15"))
         (rule "polySimp_homoEq" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "12"))
         (rule "polySimp_mulAssoc" (formula "12") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "12") (term "0"))
         (rule "polySimp_sepPosMonomial" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1"))
         (rule "polySimp_rightDist" (formula "1") (term "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1"))
         (rule "polySimp_mulComm0" (formula "1") (term "0,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "12"))
         (rule "polySimp_mulLiterals" (formula "12") (term "0"))
         (rule "inEqSimp_exactShadow1" (formula "12") (ifseqformula "11"))
         (rule "greater_literals" (formula "12") (term "0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
         (rule "polySimp_rightDist" (formula "12") (term "0,0"))
         (rule "mul_literals" (formula "12") (term "0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "12") (term "0"))
         (rule "add_literals" (formula "12") (term "1,1,0"))
         (rule "polySimp_elimOne" (formula "12") (term "1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "12"))
         (rule "mul_literals" (formula "12") (term "1"))
         (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "8"))
          (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "2")) (ifInst ""  (formula "16")))
         (rule "closeFalse" (formula "8"))
      )
   )
   (branch "Exceptional Post (classify)"
       (builtin "One Step Simplification" (formula "9"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "translateJavaMulInt" (formula "8") (term "1,1,0,0,1"))
      (rule "translateJavaSubInt" (formula "8") (term "3,0,0,1,0,1"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "10"))
      (rule "notLeft" (formula "8"))
      (rule "close" (formula "12") (ifseqformula "11"))
   )
   (branch "Pre (classify)"
       (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "3")))
      (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "7"))
       (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "1")))
      (rule "closeFalse" (formula "7"))
   )
   (branch "Null reference (t_1 = null)"
       (builtin "One Step Simplification" (formula "8"))
      (rule "false_right" (formula "8"))
      (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "7"))
       (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "1")))
      (rule "closeFalse" (formula "7"))
   )
)
)
}
