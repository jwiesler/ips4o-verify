\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Apr 17 12:54:41 CEST 2023
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsCheckingOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L , finalFields-finalFields\\:immutable
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../src";

\proofObligation "#Proof Obligation Settings
#Mon Apr 17 12:54:41 CEST 2023
contract=de.wiesler.Sorter[de.wiesler.Sorter\\:\\:sample_sort([I,int,int,de.wiesler.Storage)].JML normal_behavior operation contract.0
name=de.wiesler.Sorter[de.wiesler.Sorter\\:\\:sample_sort([I,int,int,de.wiesler.Storage)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))
(keyLog "1" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))

(autoModeTime "99441")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "heapAtPre,o,f"))
(rule "expand_inInt" (formula "1") (term "1,0,0,1,0,0,0"))
(rule "expand_inInt" (formula "1") (term "1,0,1,0,0,0"))
(rule "replace_int_MAX" (formula "1") (term "1,0,1,0,0,1,0,0,0"))
(rule "replace_int_MIN" (formula "1") (term "0,1,1,0,0,1,0,0,0"))
(rule "replace_int_MIN" (formula "1") (term "0,1,1,0,1,0,0,0"))
(rule "replace_int_MAX" (formula "1") (term "1,0,1,0,1,0,0,0"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "12"))
(rule "notLeft" (formula "6"))
(rule "notLeft" (formula "6"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "12"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "3"))
(rule "translateJavaSubInt" (formula "8") (term "0,0"))
(rule "translateJavaSubInt" (formula "13") (term "0"))
(rule "translateJavaSubInt" (formula "14") (term "0"))
(rule "replace_known_right" (formula "7") (term "0") (ifseqformula "17"))
 (builtin "One Step Simplification" (formula "7"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "18"))
 (builtin "One Step Simplification" (formula "2"))
(rule "polySimp_elimSub" (formula "8") (term "0,0"))
(rule "polySimp_elimSub" (formula "13") (term "0"))
(rule "polySimp_elimSub" (formula "14") (term "0"))
(rule "polySimp_addComm0" (formula "8") (term "0,0"))
(rule "polySimp_addComm0" (formula "13") (term "0"))
(rule "polySimp_addComm0" (formula "14") (term "0"))
(rule "disjointDefinition" (formula "16"))
(rule "inEqSimp_commuteLeq" (formula "12"))
(rule "inEqSimp_commuteLeq" (formula "11"))
(rule "inEqSimp_commuteLeq" (formula "10"))
(rule "inEqSimp_commuteLeq" (formula "6"))
(rule "inEqSimp_commuteLeq" (formula "4"))
(rule "assignment" (formula "19") (term "1"))
 (builtin "One Step Simplification" (formula "19"))
(rule "commuteIntersection" (formula "16") (term "0"))
(rule "methodBodyExpand" (formula "19") (term "1") (newnames "heapBefore_sample_sort,savedHeapBefore_sample_sort,_beginBefore_sample_sort,_endBefore_sample_sort,_storageBefore_sample_sort,_valuesBefore_sample_sort,bucket_startsBefore_sample_sort,equal_bucketsBefore_sample_sort,num_bucketsBefore_sample_sort,num_bucketsBefore_sample_sort_0"))
 (builtin "One Step Simplification" (formula "19"))
(rule "variableDeclarationAssign" (formula "19") (term "1"))
(rule "variableDeclaration" (formula "19") (term "1") (newnames "bucket_starts"))
(rule "methodCallWithAssignmentUnfoldArguments" (formula "19") (term "1"))
(rule "variableDeclarationAssign" (formula "19") (term "1"))
(rule "variableDeclaration" (formula "19") (term "1") (newnames "var"))
(rule "assignmentAdditionInt" (formula "19") (term "1"))
(branch "Overflow check"
    (builtin "One Step Simplification" (formula "19"))
   (rule "add_literals" (formula "19") (term "0"))
   (rule "expand_inInt" (formula "19"))
   (rule "replace_int_MIN" (formula "19") (term "0,1"))
   (rule "replace_int_MAX" (formula "19") (term "1,0"))
   (rule "leq_literals" (formula "19") (term "1"))
    (builtin "One Step Simplification" (formula "19"))
   (rule "leq_literals" (formula "19"))
   (rule "closeTrue" (formula "19"))
)
(branch "Usage"
    (builtin "One Step Simplification" (formula "19"))
   (rule "translateJavaAddInt" (formula "19") (term "0,1,0"))
   (rule "add_literals" (formula "19") (term "0,1,0"))
    (builtin "Use Operation Contract" (formula "19") (newnames "heapBefore_createArray,result_241,exc_285,heapAfter_createArray,anon_heap_createArray") (contract "de.wiesler.Storage[de.wiesler.Storage::createArray(int)].JML normal_behavior operation contract.0"))
   (branch "Post (createArray)"
       (builtin "One Step Simplification" (formula "21"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "expand_inInt" (formula "18") (term "1,0,0,1,1,1,1,0,1"))
      (rule "replace_int_MAX" (formula "18") (term "1,0,1,0,0,1,1,1,1,0,1"))
      (rule "replace_int_MIN" (formula "18") (term "0,1,1,0,0,1,1,1,1,0,1"))
      (rule "andLeft" (formula "18"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "1,0,1,0") (ifseqformula "18"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "20"))
      (rule "andLeft" (formula "19"))
      (rule "notLeft" (formula "20"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "20"))
      (rule "andLeft" (formula "21"))
      (rule "andLeft" (formula "21"))
      (rule "notLeft" (formula "21"))
      (rule "notLeft" (formula "21"))
      (rule "replace_known_right" (formula "19") (term "0,1") (ifseqformula "23"))
       (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "24")))
      (rule "inEqSimp_commuteLeq" (formula "21") (term "1,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0,0"))
      (rule "assignment" (formula "27") (term "1"))
       (builtin "One Step Simplification" (formula "27"))
      (rule "blockEmpty" (formula "27") (term "1"))
       (builtin "Block Contract (Internal)" (formula "27") (newnames "anonOut_heap,exc_286,heap_Before_BLOCK,savedHeap_Before_BLOCK,o,f"))
      (branch "Validity"
          (builtin "One Step Simplification" (formula "28"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "andLeft" (formula "23"))
         (rule "translateJavaSubInt" (formula "23") (term "0,0"))
         (rule "polySimp_elimSub" (formula "23") (term "0,0"))
         (rule "polySimp_addComm0" (formula "23") (term "0,0"))
         (rule "variableDeclarationAssign" (formula "28") (term "1"))
         (rule "variableDeclaration" (formula "28") (term "1") (newnames "exc_286_1"))
         (rule "assignment" (formula "28") (term "1"))
          (builtin "One Step Simplification" (formula "28"))
         (rule "emptyStatement" (formula "28") (term "1"))
          (builtin "One Step Simplification" (formula "28"))
         (rule "emptyStatement" (formula "28") (term "1"))
         (rule "commute_and" (formula "21") (term "1,0,0"))
         (rule "commute_and" (formula "21") (term "0,0,0"))
         (rule "shift_paren_and" (formula "21") (term "0,0"))
         (rule "commute_and_2" (formula "21") (term "0,0,0"))
         (rule "tryEmpty" (formula "28") (term "1"))
         (rule "blockEmptyLabel" (formula "28") (term "1"))
         (rule "blockEmpty" (formula "28") (term "1"))
         (rule "methodCallEmpty" (formula "28") (term "1"))
          (builtin "One Step Simplification" (formula "28"))
         (rule "emptyModality" (formula "28") (term "1"))
          (builtin "One Step Simplification" (formula "28"))
         (rule "closeTrue" (formula "28"))
      )
      (branch "Precondition"
         (rule "andRight" (formula "27"))
         (branch
             (builtin "One Step Simplification" (formula "27"))
            (rule "translateJavaSubInt" (formula "27") (term "0,0"))
            (rule "polySimp_elimSub" (formula "27") (term "0,0"))
            (rule "polySimp_addComm0" (formula "27") (term "0,0"))
            (rule "close" (formula "27") (ifseqformula "8"))
         )
         (branch
             (builtin "One Step Simplification" (formula "27"))
            (rule "wellFormedAnonEQ" (formula "27") (ifseqformula "18"))
            (rule "replace_known_left" (formula "27") (term "0") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "17")))
            (rule "closeTrue" (formula "27"))
         )
      )
      (branch "Usage"
          (builtin "One Step Simplification" (formula "23"))
          (builtin "One Step Simplification" (formula "28"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "0,1,1,0") (ifseqformula "18"))
         (rule "andLeft" (formula "23"))
         (rule "andLeft" (formula "23"))
         (rule "andLeft" (formula "25"))
         (rule "andLeft" (formula "23"))
         (rule "andLeft" (formula "27"))
         (rule "andLeft" (formula "27"))
         (rule "andLeft" (formula "27"))
         (rule "replace_known_left" (formula "25") (term "0") (ifseqformula "23"))
          (builtin "One Step Simplification" (formula "25"))
         (rule "true_left" (formula "25"))
         (rule "disjointDefinition" (formula "29"))
         (rule "disjointDefinition" (formula "28"))
         (rule "disjointDefinition" (formula "27"))
         (rule "disjointDefinition" (formula "26"))
          (builtin "One Step Simplification" (formula "26"))
         (rule "notLeft" (formula "26"))
         (rule "narrowSelectArrayType" (formula "25") (term "2,1") (ifseqformula "1") (ifseqformula "32"))
         (rule "commute_and" (formula "21") (term "1,0,0"))
         (rule "commute_and" (formula "21") (term "0,0,0"))
         (rule "shift_paren_and" (formula "21") (term "0,0"))
         (rule "commute_and_2" (formula "21") (term "0,0,0"))
         (rule "ifUnfold" (formula "33") (term "1") (inst "#boolv=x"))
         (rule "variableDeclaration" (formula "33") (term "1") (newnames "x"))
         (rule "inequality_comparison_simple" (formula "33") (term "1"))
          (builtin "One Step Simplification" (formula "33"))
         (rule "replace_known_left" (formula "33") (term "0,0,1,0") (ifseqformula "23"))
          (builtin "One Step Simplification" (formula "33"))
         (rule "arrayLengthNotNegative" (formula "12") (term "0"))
         (rule "arrayLengthIsAShort" (formula "13") (term "0"))
         (rule "expand_inShort" (formula "13"))
         (rule "replace_short_MAX" (formula "13") (term "1,0"))
         (rule "replace_short_MIN" (formula "13") (term "0,1"))
         (rule "andLeft" (formula "13"))
         (rule "inEqSimp_commuteLeq" (formula "14"))
         (rule "ifSplit" (formula "36"))
         (branch "if x true"
             (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "if x false"
             (builtin "One Step Simplification" (formula "1"))
             (builtin "One Step Simplification" (formula "37"))
            (rule "true_left" (formula "1"))
            (rule "blockEmpty" (formula "36") (term "1"))
            (rule "variableDeclarationAssign" (formula "36") (term "1"))
            (rule "variableDeclaration" (formula "36") (term "1") (newnames "partition"))
             (builtin "Use Operation Contract" (formula "36") (newnames "heapBefore_partition,result_242,exc_287,heapAfter_partition,anon_heap_partition") (contract "de.wiesler.Sorter[de.wiesler.Sorter::partition([I,int,int,[I,de.wiesler.Storage)].JML normal_behavior operation contract.0"))
            (branch "Post (partition)"
                (builtin "One Step Simplification" (formula "38"))
                (builtin "One Step Simplification" (formula "32"))
               (rule "andLeft" (formula "32"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "33") (term "1,0,1,0") (ifseqformula "32"))
                (builtin "One Step Simplification" (formula "33"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "33") (term "0,0,1,0,1,0") (ifseqformula "21"))
               (rule "andLeft" (formula "33"))
               (rule "andLeft" (formula "34"))
               (rule "andLeft" (formula "33"))
               (rule "andLeft" (formula "33"))
               (rule "andLeft" (formula "34"))
               (rule "andLeft" (formula "35"))
               (rule "translateJavaSubInt" (formula "32") (term "2,0,0,1,0"))
               (rule "translateJavaMod" (formula "35") (term "0,0,0,0,0,0,0,1"))
               (rule "translateJavaSubInt" (formula "35") (term "3,0,1,1"))
               (rule "translateJavaSubInt" (formula "35") (term "7,0,1,1,0,1"))
               (rule "translateJavaSubInt" (formula "35") (term "1,1,0,0,0,0,1"))
               (rule "polySimp_elimSub" (formula "32") (term "2,0,0,1,0"))
               (rule "mul_literals" (formula "32") (term "1,2,0,0,1,0"))
               (rule "polySimp_elimSub" (formula "35") (term "3,0,1,1"))
               (rule "polySimp_elimSub" (formula "35") (term "7,0,1,1,0,1"))
               (rule "mul_literals" (formula "35") (term "1,7,0,1,1,0,1"))
               (rule "polySimp_elimSub" (formula "35") (term "1,1,0,0,0,0,1"))
               (rule "polySimp_addComm0" (formula "32") (term "2,0,0,1,0"))
               (rule "polySimp_addComm0" (formula "35") (term "3,0,1,1"))
               (rule "polySimp_addComm0" (formula "35") (term "7,0,1,1,0,1"))
               (rule "polySimp_addComm0" (formula "35") (term "1,1,0,0,0,0,1"))
               (rule "assignment" (formula "44") (term "1"))
                (builtin "One Step Simplification" (formula "44"))
               (rule "pullOutSelect" (formula "35") (term "0,1,0,0,0,0,1") (inst "selectSK=arr_0"))
               (rule "simplifySelectOfAnonEQ" (formula "35") (ifseqformula "32"))
                (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "42")))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "35") (term "0,0,1,0,0") (ifseqformula "21"))
               (rule "replace_known_right" (formula "35") (term "0,0,0,1,0,0") (ifseqformula "41"))
                (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "22")))
               (rule "elementOfUnion" (formula "35") (term "0,0"))
                (builtin "One Step Simplification" (formula "35"))
               (rule "applyEqReverse" (formula "36") (term "0,1,0,0,0,0,1") (ifseqformula "35"))
               (rule "hideAuxiliaryEq" (formula "35"))
               (rule "commuteUnion_2" (formula "32") (term "1,0"))
               (rule "commuteUnion" (formula "32") (term "0,1,0"))
               (rule "commuteUnion_2" (formula "32") (term "1,0"))
               (rule "shift_paren_or" (formula "33"))
               (rule "shift_paren_or" (formula "33") (term "0"))
               (rule "shift_paren_or" (formula "33") (term "0,0"))
               (rule "commute_or_2" (formula "33") (term "0"))
               (rule "commute_and_2" (formula "35") (term "0,0,0,1"))
               (rule "commute_and_2" (formula "35") (term "0,0,1"))
               (rule "commute_and" (formula "35") (term "0,0,0,0,0,1"))
               (rule "commute_and_2" (formula "35") (term "0,0,0,0,1"))
               (rule "commute_and_2" (formula "35") (term "0,0,0,1"))
               (rule "ifUnfold" (formula "44") (term "1") (inst "#boolv=x"))
               (rule "variableDeclaration" (formula "44") (term "1") (newnames "x_1"))
               (rule "equality_comparison_simple" (formula "44") (term "1"))
                (builtin "One Step Simplification" (formula "44"))
               (rule "arrayLengthNotNegative" (formula "23") (term "0"))
               (rule "applyEq" (formula "23") (term "0") (ifseqformula "24"))
               (rule "qeq_literals" (formula "23"))
               (rule "true_left" (formula "23"))
               (rule "arrayLengthIsAShort" (formula "23") (term "0"))
               (rule "expand_inShort" (formula "23"))
               (rule "replace_short_MAX" (formula "23") (term "1,0"))
               (rule "replace_short_MIN" (formula "23") (term "0,1"))
               (rule "andLeft" (formula "23"))
               (rule "inEqSimp_commuteLeq" (formula "24"))
               (rule "applyEq" (formula "23") (term "0") (ifseqformula "25"))
               (rule "leq_literals" (formula "23"))
               (rule "true_left" (formula "23"))
               (rule "applyEq" (formula "23") (term "0") (ifseqformula "24"))
               (rule "qeq_literals" (formula "23"))
               (rule "true_left" (formula "23"))
               (rule "ifSplit" (formula "44"))
               (branch "if x_1 true"
                   (builtin "One Step Simplification" (formula "1"))
                   (builtin "One Step Simplification" (formula "45"))
                  (rule "replace_known_left" (formula "36") (term "0,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "36"))
                  (rule "true_left" (formula "36"))
                  (rule "replace_known_left" (formula "34") (term "0,0,0,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "34"))
                  (rule "true_left" (formula "34"))
                  (rule "applyEq" (formula "43") (term "0,1,0") (ifseqformula "1"))
                   (builtin "Use Operation Contract" (formula "43") (newnames "heapBefore_fallback_sort,exc_288,heapAfter_fallback_sort,anon_heap_fallback_sort") (contract "de.wiesler.Sorter[de.wiesler.Sorter::fallback_sort([I,int,int)].JML normal_behavior operation contract.0"))
                  (branch "Post (fallback_sort)"
                      (builtin "One Step Simplification" (formula "39"))
                      (builtin "One Step Simplification" (formula "45"))
                     (rule "expand_inInt" (formula "39") (term "0,0,0,1,1,0,1"))
                     (rule "replace_int_MAX" (formula "39") (term "1,0,0,0,0,1,1,0,1"))
                     (rule "replace_int_MIN" (formula "39") (term "0,1,0,0,0,1,1,0,1"))
                     (rule "andLeft" (formula "39"))
                     (rule "andLeft" (formula "40"))
                     (rule "andLeft" (formula "40"))
                     (rule "andLeft" (formula "40"))
                     (rule "andLeft" (formula "41"))
                     (rule "translateJavaSubInt" (formula "39") (term "2,1,0"))
                     (rule "eqSymm" (formula "41") (term "1,0"))
                     (rule "polySimp_elimSub" (formula "39") (term "2,1,0"))
                     (rule "mul_literals" (formula "39") (term "1,2,1,0"))
                     (rule "polySimp_addComm0" (formula "39") (term "2,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "41") (term "1,0,0"))
                     (rule "blockReturnNoValue" (formula "49") (term "1"))
                     (rule "commute_and" (formula "41") (term "0,0"))
                     (rule "methodCallEmptyReturn" (formula "49") (term "1"))
                      (builtin "One Step Simplification" (formula "49"))
                     (rule "tryEmpty" (formula "49") (term "1"))
                     (rule "emptyModality" (formula "49") (term "1"))
                     (rule "andRight" (formula "49"))
                     (branch
                         (builtin "One Step Simplification" (formula "49"))
                        (rule "inEqSimp_gtToGeq" (formula "17"))
                        (rule "mul_literals" (formula "17") (term "1,0,0"))
                        (rule "add_literals" (formula "17") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "17") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0,0,0,0"))
                        (rule "mul_literals" (formula "25") (term "1,0,0,0,0,0,0,0"))
                        (rule "add_literals" (formula "25") (term "0,0,0,0,0,0,0"))
                        (rule "inEqSimp_homoInEq0" (formula "18"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                        (rule "polySimp_mulAssoc" (formula "18") (term "0,1,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "0,1,0"))
                        (rule "polySimp_elimOne" (formula "18") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "17"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1"))
                        (rule "polySimp_rightDist" (formula "17") (term "1"))
                        (rule "mul_literals" (formula "17") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "17") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0,0,0"))
                        (rule "mul_literals" (formula "25") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "18"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "0"))
                        (rule "polySimp_elimOne" (formula "18") (term "0"))
                        (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "17"))
                        (rule "inEqSimp_homoInEq0" (formula "12") (term "0"))
                        (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0"))
                        (rule "add_literals" (formula "12") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "12") (term "1,0,0"))
                        (rule "add_literals" (formula "12") (term "0,0"))
                        (rule "qeq_literals" (formula "12") (term "0"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "true_left" (formula "12"))
                        (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "12"))
                        (rule "leq_literals" (formula "14") (term "0"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "true_left" (formula "14"))
                        (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "11"))
                        (rule "leq_literals" (formula "5") (term "0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "15"))
                        (rule "mul_literals" (formula "6") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0"))
                        (rule "add_literals" (formula "6") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                        (rule "mul_literals" (formula "6") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "11"))
                        (rule "leq_literals" (formula "6") (term "0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "5"))
                        (rule "polySimp_rightDist" (formula "14") (term "0,0"))
                        (rule "mul_literals" (formula "14") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "14") (term "0"))
                        (rule "add_literals" (formula "14") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "14"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                        (rule "polySimp_elimOne" (formula "14") (term "0"))
                        (rule "inEqSimp_subsumption0" (formula "4") (ifseqformula "14"))
                        (rule "leq_literals" (formula "4") (term "0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "11"))
                        (rule "polySimp_mulComm0" (formula "12") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "12") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "12"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                        (rule "polySimp_elimOne" (formula "12") (term "0"))
                        (rule "inEqSimp_subsumption0" (formula "4") (ifseqformula "12"))
                        (rule "leq_literals" (formula "4") (term "0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "11"))
                        (rule "polySimp_rightDist" (formula "14") (term "0,0"))
                        (rule "mul_literals" (formula "14") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "14") (term "0"))
                        (rule "add_literals" (formula "14") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "14"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                        (rule "polySimp_elimOne" (formula "14") (term "0"))
                        (rule "inEqSimp_subsumption0" (formula "13") (ifseqformula "14"))
                        (rule "leq_literals" (formula "13") (term "0"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "true_left" (formula "13"))
                        (rule "inEqSimp_and_subsumption3" (formula "22") (term "0,0,0"))
                        (rule "leq_literals" (formula "22") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "nnf_imp2or" (formula "38") (term "0"))
                        (rule "nnf_imp2or" (formula "22") (term "0"))
                        (rule "nnf_notAnd" (formula "38") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "38") (term "1,0,0"))
                        (rule "mul_literals" (formula "38") (term "1,0,0,1,0,0"))
                        (rule "add_literals" (formula "38") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "1,0,0"))
                        (rule "mul_literals" (formula "38") (term "1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "38") (term "0,0,0"))
                        (rule "mul_literals" (formula "38") (term "1,0,0,0,0,0"))
                        (rule "add_literals" (formula "38") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0"))
                        (rule "mul_literals" (formula "38") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "22") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
                        (rule "mul_literals" (formula "22") (term "1,0,0,1,0,0"))
                        (rule "add_literals" (formula "22") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
                        (rule "mul_literals" (formula "22") (term "1,1,0,0"))
                        (rule "nnf_notAnd" (formula "22") (term "0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "22") (term "0,0,0,0"))
                        (rule "mul_literals" (formula "22") (term "1,0,0,0,0,0,0"))
                        (rule "add_literals" (formula "22") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "0,0,0,0"))
                        (rule "mul_literals" (formula "22") (term "1,0,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "22") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "22") (term "1,0,0,1,0,0,0"))
                        (rule "add_literals" (formula "22") (term "0,0,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "22") (term "1,1,0,0,0"))
                        (rule "Free_class_invariant_axiom_for_de_wiesler_Storage" (formula "16"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "andLeft" (formula "16"))
                        (rule "andLeft" (formula "17"))
                        (rule "andLeft" (formula "16"))
                        (rule "andLeft" (formula "18"))
                        (rule "andLeft" (formula "16"))
                        (rule "andLeft" (formula "19"))
                        (rule "andLeft" (formula "16"))
                        (rule "andLeft" (formula "20"))
                        (rule "andLeft" (formula "16"))
                        (rule "andLeft" (formula "21"))
                        (rule "andLeft" (formula "16"))
                        (rule "andLeft" (formula "22"))
                        (rule "andLeft" (formula "16"))
                        (rule "andLeft" (formula "23"))
                        (rule "andLeft" (formula "16"))
                        (rule "andLeft" (formula "24"))
                        (rule "andLeft" (formula "16"))
                        (rule "andLeft" (formula "25"))
                        (rule "andLeft" (formula "25"))
                        (rule "andLeft" (formula "25"))
                        (rule "andLeft" (formula "25"))
                        (rule "andLeft" (formula "25"))
                        (rule "andLeft" (formula "25"))
                        (rule "andLeft" (formula "25"))
                        (rule "andLeft" (formula "25"))
                        (rule "andLeft" (formula "25"))
                        (rule "andLeft" (formula "25"))
                        (rule "andLeft" (formula "25"))
                        (rule "andLeft" (formula "25"))
                        (rule "andLeft" (formula "25"))
                        (rule "andLeft" (formula "25"))
                        (rule "andLeft" (formula "25"))
                        (rule "andLeft" (formula "25"))
                        (rule "andLeft" (formula "25"))
                        (rule "andLeft" (formula "25"))
                        (rule "andLeft" (formula "25"))
                        (rule "translateJavaMulInt" (formula "19") (term "1"))
                        (rule "mul_literals" (formula "19") (term "1"))
                        (rule "translateJavaMulInt" (formula "18") (term "1"))
                        (rule "mul_literals" (formula "18") (term "1"))
                        (rule "disjointDefinition" (formula "52"))
                         (builtin "One Step Simplification" (formula "52"))
                        (rule "notLeft" (formula "52"))
                        (rule "disjointDefinition" (formula "51"))
                         (builtin "One Step Simplification" (formula "51"))
                        (rule "notLeft" (formula "51"))
                        (rule "disjointDefinition" (formula "50"))
                         (builtin "One Step Simplification" (formula "50"))
                        (rule "notLeft" (formula "50"))
                        (rule "eqSymm" (formula "74"))
                        (rule "disjointDefinition" (formula "49"))
                         (builtin "One Step Simplification" (formula "49"))
                        (rule "notLeft" (formula "49"))
                        (rule "eqSymm" (formula "73"))
                        (rule "disjointDefinition" (formula "48"))
                         (builtin "One Step Simplification" (formula "48"))
                        (rule "notLeft" (formula "48"))
                        (rule "eqSymm" (formula "72"))
                        (rule "disjointDefinition" (formula "47"))
                         (builtin "One Step Simplification" (formula "47"))
                        (rule "notLeft" (formula "47"))
                        (rule "eqSymm" (formula "71"))
                        (rule "disjointDefinition" (formula "46"))
                         (builtin "One Step Simplification" (formula "46"))
                        (rule "notLeft" (formula "46"))
                        (rule "eqSymm" (formula "70"))
                        (rule "disjointDefinition" (formula "45"))
                         (builtin "One Step Simplification" (formula "45"))
                        (rule "notLeft" (formula "45"))
                        (rule "eqSymm" (formula "69"))
                        (rule "disjointDefinition" (formula "44"))
                         (builtin "One Step Simplification" (formula "44"))
                        (rule "notLeft" (formula "44"))
                        (rule "eqSymm" (formula "68"))
                        (rule "disjointDefinition" (formula "43"))
                         (builtin "One Step Simplification" (formula "43"))
                        (rule "notLeft" (formula "43"))
                        (rule "eqSymm" (formula "67"))
                        (rule "disjointDefinition" (formula "42"))
                         (builtin "One Step Simplification" (formula "42"))
                        (rule "notLeft" (formula "42"))
                        (rule "eqSymm" (formula "66"))
                        (rule "disjointDefinition" (formula "41"))
                         (builtin "One Step Simplification" (formula "41"))
                        (rule "notLeft" (formula "41"))
                        (rule "eqSymm" (formula "65"))
                        (rule "disjointDefinition" (formula "40"))
                         (builtin "One Step Simplification" (formula "40"))
                        (rule "notLeft" (formula "40"))
                        (rule "eqSymm" (formula "64"))
                        (rule "disjointDefinition" (formula "39"))
                         (builtin "One Step Simplification" (formula "39"))
                        (rule "notLeft" (formula "39"))
                        (rule "eqSymm" (formula "63"))
                        (rule "disjointDefinition" (formula "38"))
                         (builtin "One Step Simplification" (formula "38"))
                        (rule "notLeft" (formula "38"))
                        (rule "eqSymm" (formula "62"))
                        (rule "disjointDefinition" (formula "37"))
                         (builtin "One Step Simplification" (formula "37"))
                        (rule "notLeft" (formula "37"))
                        (rule "disjointDefinition" (formula "36"))
                         (builtin "One Step Simplification" (formula "36"))
                        (rule "notLeft" (formula "36"))
                        (rule "eqSymm" (formula "60"))
                        (rule "disjointDefinition" (formula "35"))
                         (builtin "One Step Simplification" (formula "35"))
                        (rule "notLeft" (formula "35"))
                        (rule "eqSymm" (formula "59"))
                        (rule "disjointDefinition" (formula "34"))
                         (builtin "One Step Simplification" (formula "34"))
                        (rule "notLeft" (formula "34"))
                        (rule "disjointDefinition" (formula "33"))
                         (builtin "One Step Simplification" (formula "33"))
                        (rule "notLeft" (formula "33"))
                        (rule "disjointDefinition" (formula "32"))
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "notLeft" (formula "32"))
                        (rule "disjointDefinition" (formula "31"))
                         (builtin "One Step Simplification" (formula "31"))
                        (rule "notLeft" (formula "31"))
                        (rule "disjointDefinition" (formula "30"))
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "notLeft" (formula "30"))
                        (rule "disjointDefinition" (formula "29"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "notLeft" (formula "29"))
                        (rule "disjointDefinition" (formula "28"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "notLeft" (formula "28"))
                        (rule "disjointDefinition" (formula "27"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "notLeft" (formula "27"))
                        (rule "disjointDefinition" (formula "26"))
                         (builtin "One Step Simplification" (formula "26"))
                        (rule "notLeft" (formula "26"))
                        (rule "disjointDefinition" (formula "25"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "notLeft" (formula "25"))
                        (rule "applyEq" (formula "25") (term "1,0") (ifseqformula "24"))
                        (rule "applyEq" (formula "38") (term "1,0,1,0") (ifseqformula "24"))
                        (rule "applyEq" (formula "36") (term "1,0") (ifseqformula "24"))
                        (rule "applyEq" (formula "35") (term "1,0") (ifseqformula "24"))
                        (rule "distributeIntersection" (formula "25") (term "0"))
                        (rule "distributeIntersection" (formula "36") (term "0"))
                        (rule "distributeIntersection" (formula "35") (term "0"))
                        (rule "distributeIntersection" (formula "25") (term "0,0"))
                        (rule "distributeIntersection" (formula "25") (term "1,0"))
                        (rule "distributeIntersection" (formula "36") (term "0,0"))
                        (rule "distributeIntersection" (formula "36") (term "1,0"))
                        (rule "unionEqualsEmpty" (formula "35"))
                        (rule "andLeft" (formula "35"))
                        (rule "distributeIntersection" (formula "25") (term "0,0,0"))
                        (rule "distributeIntersection" (formula "25") (term "1,0,0"))
                        (rule "distributeIntersection" (formula "25") (term "1,1,0"))
                        (rule "distributeIntersection" (formula "25") (term "0,1,0"))
                        (rule "distributeIntersection" (formula "37") (term "1,0,0"))
                        (rule "distributeIntersection" (formula "37") (term "0,0,0"))
                        (rule "distributeIntersection" (formula "37") (term "0,1,0"))
                        (rule "distributeIntersection" (formula "37") (term "1,1,0"))
                        (rule "distributeIntersection" (formula "36") (term "0"))
                        (rule "distributeIntersection" (formula "35") (term "0"))
                        (rule "unionEqualsEmpty" (formula "25"))
                        (rule "andLeft" (formula "25"))
                        (rule "unionEqualsEmpty" (formula "38"))
                        (rule "andLeft" (formula "38"))
                        (rule "distributeIntersection" (formula "37") (term "0,0"))
                        (rule "distributeIntersection" (formula "37") (term "1,0"))
                        (rule "unionEqualsEmpty" (formula "36"))
                        (rule "andLeft" (formula "36"))
                        (rule "unionEqualsEmpty" (formula "26"))
                        (rule "andLeft" (formula "26"))
                        (rule "unionEqualsEmpty" (formula "25"))
                        (rule "andLeft" (formula "25"))
                        (rule "unionEqualsEmpty" (formula "41"))
                        (rule "andLeft" (formula "41"))
                        (rule "unionEqualsEmpty" (formula "43"))
                        (rule "andLeft" (formula "43"))
                        (rule "unionEqualsEmpty" (formula "40"))
                        (rule "andLeft" (formula "40"))
                        (rule "distributeIntersection" (formula "39") (term "0"))
                        (rule "distributeIntersection" (formula "38") (term "0"))
                        (rule "unionEqualsEmpty" (formula "28"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "andLeft" (formula "28"))
                        (rule "notLeft" (formula "28"))
                        (rule "notLeft" (formula "28"))
                        (rule "eqSymm" (formula "58"))
                        (rule "eqSymm" (formula "57"))
                        (rule "unionEqualsEmpty" (formula "27"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "andLeft" (formula "27"))
                        (rule "notLeft" (formula "27"))
                        (rule "notLeft" (formula "27"))
                        (rule "eqSymm" (formula "57"))
                        (rule "eqSymm" (formula "56"))
                        (rule "unionEqualsEmpty" (formula "26"))
                         (builtin "One Step Simplification" (formula "26"))
                        (rule "andLeft" (formula "26"))
                        (rule "notLeft" (formula "26"))
                        (rule "notLeft" (formula "26"))
                        (rule "eqSymm" (formula "56"))
                        (rule "eqSymm" (formula "55"))
                        (rule "unionEqualsEmpty" (formula "25"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "andLeft" (formula "25"))
                        (rule "notLeft" (formula "25"))
                        (rule "notLeft" (formula "25"))
                        (rule "eqSymm" (formula "55"))
                        (rule "eqSymm" (formula "54"))
                        (rule "unionEqualsEmpty" (formula "39"))
                         (builtin "One Step Simplification" (formula "39"))
                        (rule "andLeft" (formula "39"))
                        (rule "notLeft" (formula "40"))
                        (rule "notLeft" (formula "39"))
                        (rule "eqSymm" (formula "54"))
                        (rule "eqSymm" (formula "53"))
                        (rule "sortsDisjointModuloNull" (formula "54"))
                        (rule "replace_known_right" (formula "54") (term "1") (ifseqformula "94"))
                         (builtin "One Step Simplification" (formula "54"))
                        (rule "false_right" (formula "54"))
                        (rule "sortsDisjointModuloNull" (formula "53"))
                        (rule "replace_known_right" (formula "53") (term "1") (ifseqformula "93"))
                         (builtin "One Step Simplification" (formula "53"))
                        (rule "false_right" (formula "53"))
                        (rule "unionEqualsEmpty" (formula "38"))
                         (builtin "One Step Simplification" (formula "38"))
                        (rule "andLeft" (formula "38"))
                        (rule "notLeft" (formula "39"))
                        (rule "notLeft" (formula "38"))
                        (rule "eqSymm" (formula "53"))
                        (rule "eqSymm" (formula "52"))
                        (rule "sortsDisjointModuloNull" (formula "53"))
                        (rule "replace_known_right" (formula "53") (term "1") (ifseqformula "93"))
                         (builtin "One Step Simplification" (formula "53"))
                        (rule "false_right" (formula "53"))
                        (rule "sortsDisjointModuloNull" (formula "52"))
                        (rule "replace_known_right" (formula "52") (term "1") (ifseqformula "92"))
                         (builtin "One Step Simplification" (formula "52"))
                        (rule "false_right" (formula "52"))
                        (rule "unionEqualsEmpty" (formula "39"))
                         (builtin "One Step Simplification" (formula "39"))
                        (rule "andLeft" (formula "39"))
                        (rule "notLeft" (formula "40"))
                        (rule "notLeft" (formula "39"))
                        (rule "eqSymm" (formula "52"))
                        (rule "eqSymm" (formula "51"))
                        (rule "sortsDisjointModuloNull" (formula "52"))
                        (rule "replace_known_right" (formula "52") (term "1") (ifseqformula "92"))
                         (builtin "One Step Simplification" (formula "52"))
                        (rule "false_right" (formula "52"))
                        (rule "sortsDisjointModuloNull" (formula "51"))
                        (rule "replace_known_right" (formula "51") (term "1") (ifseqformula "91"))
                         (builtin "One Step Simplification" (formula "51"))
                        (rule "false_right" (formula "51"))
                        (rule "unionEqualsEmpty" (formula "38"))
                         (builtin "One Step Simplification" (formula "38"))
                        (rule "andLeft" (formula "38"))
                        (rule "notLeft" (formula "39"))
                        (rule "notLeft" (formula "38"))
                        (rule "eqSymm" (formula "51"))
                        (rule "eqSymm" (formula "50"))
                        (rule "sortsDisjointModuloNull" (formula "51"))
                        (rule "replace_known_right" (formula "51") (term "1") (ifseqformula "91"))
                         (builtin "One Step Simplification" (formula "51"))
                        (rule "false_right" (formula "51"))
                        (rule "sortsDisjointModuloNull" (formula "50"))
                        (rule "replace_known_right" (formula "50") (term "1") (ifseqformula "90"))
                         (builtin "One Step Simplification" (formula "50"))
                        (rule "false_right" (formula "50"))
                        (rule "unionEqualsEmpty" (formula "37"))
                         (builtin "One Step Simplification" (formula "37"))
                        (rule "andLeft" (formula "37"))
                        (rule "notLeft" (formula "37"))
                        (rule "notLeft" (formula "37"))
                        (rule "eqSymm" (formula "50"))
                        (rule "eqSymm" (formula "49"))
                        (rule "unionEqualsEmpty" (formula "36"))
                         (builtin "One Step Simplification" (formula "36"))
                        (rule "andLeft" (formula "36"))
                        (rule "notLeft" (formula "36"))
                        (rule "notLeft" (formula "36"))
                        (rule "eqSymm" (formula "49"))
                        (rule "eqSymm" (formula "48"))
                        (rule "unionEqualsEmpty" (formula "35"))
                         (builtin "One Step Simplification" (formula "35"))
                        (rule "andLeft" (formula "35"))
                        (rule "notLeft" (formula "35"))
                        (rule "notLeft" (formula "35"))
                        (rule "eqSymm" (formula "48"))
                        (rule "eqSymm" (formula "47"))
                        (rule "unionEqualsEmpty" (formula "34"))
                         (builtin "One Step Simplification" (formula "34"))
                        (rule "andLeft" (formula "34"))
                        (rule "notLeft" (formula "35"))
                        (rule "notLeft" (formula "34"))
                        (rule "eqSymm" (formula "47"))
                        (rule "eqSymm" (formula "46"))
                        (rule "commuteUnion" (formula "24") (term "0,0,1"))
                        (rule "commuteUnion" (formula "24") (term "1,1,1"))
                        (rule "commuteUnion" (formula "35") (term "0,1,0,1,0"))
                        (rule "commuteUnion" (formula "35") (term "1,1,1,0,1,0"))
                        (rule "commuteUnion_2" (formula "24") (term "0,1"))
                        (rule "commuteUnion" (formula "35") (term "1,0,1,0,1,0"))
                        (rule "commuteUnion" (formula "24") (term "0,0,1"))
                        (rule "commuteUnion_2" (formula "24") (term "1"))
                        (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "95"))
                        (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "44") (term "0"))
                        (rule "wellFormedAnonEQ" (formula "44") (term "1,0") (ifseqformula "41"))
                        (rule "replace_known_left" (formula "44") (term "0,1") (ifseqformula "45"))
                         (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "95")) (ifInst ""  (formula "40")))
                        (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "7"))
                        (rule "close" (formula "96") (ifseqformula "7"))
                     )
                     (branch
                         (builtin "One Step Simplification" (formula "49"))
                        (rule "closeTrue" (formula "49"))
                     )
                  )
                  (branch "Exceptional Post (fallback_sort)"
                      (builtin "One Step Simplification" (formula "45"))
                      (builtin "One Step Simplification" (formula "39"))
                     (rule "andLeft" (formula "39"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (term "1,0") (ifseqformula "39"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (term "0,1,0") (ifseqformula "33"))
                      (builtin "One Step Simplification" (formula "40"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (term "0,0,0,1,0") (ifseqformula "22"))
                     (rule "andLeft" (formula "40"))
                     (rule "andLeft" (formula "40"))
                     (rule "notLeft" (formula "40"))
                     (rule "close" (formula "42") (ifseqformula "41"))
                  )
                  (branch "Pre (fallback_sort)"
                      (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "42")) (ifInst ""  (formula "42")))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "43") (term "1,0,0") (ifseqformula "33"))
                      (builtin "One Step Simplification" (formula "43"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "43") (term "0,0,1,0,0") (ifseqformula "22"))
                     (rule "expand_inInt" (formula "43") (term "1"))
                     (rule "expand_inInt" (formula "43") (term "1,0"))
                     (rule "replace_int_MIN" (formula "43") (term "0,1,1"))
                     (rule "replace_int_MAX" (formula "43") (term "1,0,1"))
                     (rule "replace_int_MIN" (formula "43") (term "0,1,1,0"))
                     (rule "replace_int_MAX" (formula "43") (term "1,0,1,0"))
                     (rule "replace_known_left" (formula "43") (term "0,0,0,1,0,0") (ifseqformula "3"))
                      (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "4")) (ifInst ""  (formula "6")))
                     (rule "inEqSimp_gtToGeq" (formula "17"))
                     (rule "mul_literals" (formula "17") (term "1,0,0"))
                     (rule "add_literals" (formula "17") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "17") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0,0,0,0"))
                     (rule "mul_literals" (formula "25") (term "1,0,0,0,0,0,0,0"))
                     (rule "add_literals" (formula "25") (term "0,0,0,0,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "43") (term "1"))
                     (rule "replace_known_left" (formula "43") (term "1") (ifseqformula "7"))
                      (builtin "One Step Simplification" (formula "43"))
                     (rule "inEqSimp_commuteLeq" (formula "43") (term "1"))
                     (rule "replace_known_left" (formula "43") (term "1") (ifseqformula "5"))
                      (builtin "One Step Simplification" (formula "43"))
                     (rule "wellFormedAnonEQ" (formula "43") (ifseqformula "33"))
                     (rule "wellFormedAnon" (formula "43") (term "0"))
                     (rule "wellFormedAnonEQ" (formula "43") (term "0,0") (ifseqformula "22"))
                     (rule "replace_known_left" (formula "43") (term "1") (ifseqformula "32"))
                      (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "2")) (ifInst ""  (formula "21")) (ifInst ""  (formula "28")))
                     (rule "closeTrue" (formula "43"))
                  )
               )
               (branch "if x_1 false"
                   (builtin "One Step Simplification" (formula "45"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "replace_known_right" (formula "35") (term "0,0") (ifseqformula "39"))
                   (builtin "One Step Simplification" (formula "35"))
                  (rule "andLeft" (formula "35"))
                  (rule "andLeft" (formula "35"))
                  (rule "andLeft" (formula "35"))
                  (rule "andLeft" (formula "35"))
                  (rule "andLeft" (formula "35"))
                  (rule "andLeft" (formula "35"))
                  (rule "replace_known_right" (formula "33") (term "0,0,0,0") (ifseqformula "45"))
                   (builtin "One Step Simplification" (formula "33"))
                  (rule "variableDeclarationAssign" (formula "51") (term "1"))
                  (rule "variableDeclaration" (formula "51") (term "1") (newnames "num_buckets"))
                  (rule "assignment_read_attribute_final" (formula "51"))
                  (branch "Normal Execution (partition != null)"
                      (builtin "One Step Simplification" (formula "51"))
                     (rule "variableDeclarationAssign" (formula "51") (term "1"))
                     (rule "variableDeclaration" (formula "51") (term "1") (newnames "equal_buckets"))
                     (rule "assignment_read_attribute_final" (formula "51"))
                     (branch "Normal Execution (partition != null)"
                         (builtin "One Step Simplification" (formula "51"))
                         (builtin "Block Contract (Internal)" (formula "51") (newnames "anonOut_heap_0,exc_288,heap_Before_BLOCK_0,savedHeap_Before_BLOCK_0,o,f,f,anonOut_bucket"))
                        (branch "Validity"
                            (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "49")) (ifInst ""  (formula "50")) (ifInst ""  (formula "51")))
                            (builtin "One Step Simplification" (formula "52"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "45") (term "1,0,1,0") (ifseqformula "32"))
                            (builtin "One Step Simplification" (formula "45"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "45") (term "0,0,1,0,1,0") (ifseqformula "21"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "45") (term "0,0,0,0,0,1,0") (ifseqformula "32"))
                            (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "2")))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "45") (term "1,0,0,0,1,0") (ifseqformula "32"))
                            (builtin "One Step Simplification" (formula "45"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "45") (term "0,0,1,0,0,0,1,0") (ifseqformula "21"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "45") (term "0,0,0,0,0,0,1,0") (ifseqformula "21"))
                           (rule "expand_inInt" (formula "45") (term "1,0,1,0"))
                           (rule "expand_inInt" (formula "45") (term "1,0,0,1,0"))
                           (rule "expand_inInt" (formula "45") (term "1,1,0"))
                           (rule "replace_int_MIN" (formula "45") (term "0,1,1,0,1,0"))
                           (rule "replace_int_MAX" (formula "45") (term "1,0,1,0,1,0"))
                           (rule "replace_int_MAX" (formula "45") (term "1,0,1,0,0,1,0"))
                           (rule "replace_int_MIN" (formula "45") (term "0,1,1,0,0,1,0"))
                           (rule "replace_int_MIN" (formula "45") (term "0,1,1,1,0"))
                           (rule "replace_int_MAX" (formula "45") (term "1,0,1,1,0"))
                           (rule "andLeft" (formula "45"))
                           (rule "andLeft" (formula "46"))
                           (rule "andLeft" (formula "45"))
                           (rule "andLeft" (formula "47"))
                           (rule "andLeft" (formula "46"))
                           (rule "andLeft" (formula "45"))
                           (rule "andLeft" (formula "49"))
                           (rule "andLeft" (formula "47"))
                           (rule "andLeft" (formula "49"))
                           (rule "andLeft" (formula "51"))
                           (rule "andLeft" (formula "47"))
                           (rule "andLeft" (formula "49"))
                           (rule "andLeft" (formula "52"))
                           (rule "andLeft" (formula "47"))
                           (rule "andLeft" (formula "49"))
                           (rule "translateJavaSubInt" (formula "45") (term "0,0"))
                           (rule "replace_known_left" (formula "47") (term "1,0,0") (ifseqformula "22"))
                            (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "61")))
                           (rule "true_left" (formula "47"))
                           (rule "replace_known_left" (formula "47") (term "0,0,0") (ifseqformula "7"))
                            (builtin "One Step Simplification" (formula "47"))
                           (rule "true_left" (formula "47"))
                           (rule "polySimp_elimSub" (formula "45") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "45") (term "0,0"))
                           (rule "inEqSimp_gtToGeq" (formula "16"))
                           (rule "mul_literals" (formula "16") (term "1,0,0"))
                           (rule "add_literals" (formula "16") (term "0,0"))
                           (rule "disjointDefinition" (formula "55"))
                           (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,0,0,0"))
                           (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0,0,0"))
                           (rule "add_literals" (formula "24") (term "0,0,0,0,0,0,0"))
                           (rule "disjointDefinition" (formula "54"))
                            (builtin "One Step Simplification" (formula "54"))
                           (rule "notLeft" (formula "54"))
                           (rule "eqSymm" (formula "55"))
                           (rule "disjointDefinition" (formula "53"))
                           (rule "disjointDefinition" (formula "52"))
                            (builtin "One Step Simplification" (formula "52"))
                           (rule "notLeft" (formula "52"))
                           (rule "eqSymm" (formula "53"))
                           (rule "disjointDefinition" (formula "50"))
                            (builtin "One Step Simplification" (formula "50") (ifInst ""  (formula "56")))
                           (rule "true_left" (formula "50"))
                           (rule "disjointDefinition" (formula "50"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0"))
                           (rule "narrowSelectArrayType" (formula "34") (term "2,0") (ifseqformula "45") (ifseqformula "58"))
                           (rule "sortsDisjointModuloNull" (formula "52"))
                           (rule "replace_known_right" (formula "52") (term "1") (ifseqformula "56"))
                            (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "57")))
                           (rule "false_right" (formula "52"))
                           (rule "sortsDisjointModuloNull" (formula "51"))
                           (rule "replace_known_right" (formula "51") (term "1") (ifseqformula "57"))
                            (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "56")))
                           (rule "false_right" (formula "51"))
                           (rule "inEqSimp_commuteLeq" (formula "49"))
                           (rule "inEqSimp_commuteLeq" (formula "47"))
                           (rule "inEqSimp_commuteLeq" (formula "46"))
                           (rule "inEqSimp_homoInEq0" (formula "17"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "17") (term "1,0"))
                           (rule "polySimp_mulAssoc" (formula "17") (term "0,1,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "17") (term "0,1,0"))
                           (rule "polySimp_elimOne" (formula "17") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "17") (term "0"))
                           (rule "variableDeclarationAssign" (formula "55") (term "1"))
                           (rule "variableDeclaration" (formula "55") (term "1") (newnames "exc_288_1"))
                           (rule "assignment" (formula "55") (term "1"))
                            (builtin "One Step Simplification" (formula "55"))
                           (rule "jmod_axiom" (formula "38") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "38") (term "1,0"))
                           (rule "polySimp_sepNegMonomial" (formula "38"))
                           (rule "polySimp_mulLiterals" (formula "38") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,0,0"))
                           (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1"))
                           (rule "polySimp_rightDist" (formula "16") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "1,1"))
                           (rule "mul_literals" (formula "16") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "16") (term "1,1"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "17"))
                           (rule "polySimp_mulLiterals" (formula "17") (term "0"))
                           (rule "polySimp_elimOne" (formula "17") (term "0"))
                           (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "12"))
                           (rule "leq_literals" (formula "14") (term "0"))
                            (builtin "One Step Simplification" (formula "14"))
                           (rule "true_left" (formula "14"))
                           (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "10"))
                           (rule "leq_literals" (formula "4") (term "0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "14"))
                           (rule "inEqSimp_homoInEq0" (formula "10") (term "0"))
                           (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0"))
                           (rule "add_literals" (formula "10") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "10") (term "1,0,0"))
                           (rule "add_literals" (formula "10") (term "0,0"))
                           (rule "qeq_literals" (formula "10") (term "0"))
                            (builtin "One Step Simplification" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "newSym_eq" (formula "35") (inst "l=l_0") (inst "newSymDef=mul(int::final(result_242,
               de.wiesler.PartitionResult::$num_buckets),
    Z(0(#)))"))
                           (rule "times_zero_1" (formula "35") (term "1,1"))
                           (rule "add_zero_right" (formula "35") (term "1"))
                           (rule "applyEq" (formula "36") (term "0,0") (ifseqformula "35"))
                           (rule "eqSymm" (formula "36"))
                           (rule "applyEq" (formula "35") (term "0,0") (ifseqformula "36"))
                           (rule "applyEq" (formula "53") (term "0,1,0,0,0") (ifseqformula "36"))
                           (rule "applyEq" (formula "39") (term "2,0") (ifseqformula "36"))
                           (rule "applyEq" (formula "34") (term "7,0") (ifseqformula "36"))
                           (rule "applyEq" (formula "38") (term "1,7,0,1") (ifseqformula "36"))
                           (rule "applyEq" (formula "38") (term "5,0,1") (ifseqformula "36"))
                           (rule "applyEq" (formula "32") (term "2,0") (ifseqformula "36"))
                           (rule "applyEq" (formula "45") (term "0") (ifseqformula "36"))
                           (rule "applyEq" (formula "34") (term "5,0") (ifseqformula "36"))
                           (rule "applyEq" (formula "44") (term "0") (ifseqformula "36"))
                           (rule "applyEq" (formula "33") (term "5,0") (ifseqformula "36"))
                           (rule "applyEq" (formula "37") (term "0,2,0") (ifseqformula "36"))
                           (rule "elimGcdLeq_antec" (formula "44") (inst "elimGcdRightDiv=Z(3(2(8(1(4(7(3(7(0(1(#)))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                           (rule "polySimp_mulLiterals" (formula "44") (term "1,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "44") (term "1,0,0,0,0,1,0"))
                           (rule "leq_literals" (formula "44") (term "0,0"))
                            (builtin "One Step Simplification" (formula "44"))
                           (rule "neg_literal" (formula "44") (term "0,0,0,0,0,0"))
                           (rule "mul_literals" (formula "44") (term "1,0,0,0,0,0"))
                           (rule "polySimp_addLiterals" (formula "44") (term "0,0,0,0"))
                           (rule "add_literals" (formula "44") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "44") (term "0,0"))
                           (rule "add_literals" (formula "44") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "44") (term "1,0,0"))
                           (rule "add_literals" (formula "44") (term "0,0"))
                           (rule "qeq_literals" (formula "44") (term "0"))
                            (builtin "One Step Simplification" (formula "44"))
                           (rule "elimGcdGeq_antec" (formula "45") (inst "elimGcdRightDiv=Z(neglit(4(2(8(1(4(7(3(7(0(1(#))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                           (rule "polySimp_mulLiterals" (formula "45") (term "1,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "45") (term "1,0,0,0,0,1,0"))
                           (rule "leq_literals" (formula "45") (term "0,0"))
                            (builtin "One Step Simplification" (formula "45"))
                           (rule "mul_literals" (formula "45") (term "1,0,0,0,0,0"))
                           (rule "polySimp_addLiterals" (formula "45") (term "0,0,0,0"))
                           (rule "add_literals" (formula "45") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "45") (term "0,0"))
                           (rule "add_literals" (formula "45") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "45") (term "1,0,0"))
                           (rule "add_literals" (formula "45") (term "0,0"))
                           (rule "leq_literals" (formula "45") (term "0"))
                            (builtin "One Step Simplification" (formula "45"))
                           (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "11"))
                           (rule "polySimp_mulComm0" (formula "12") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "12") (term "0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "12"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                           (rule "polySimp_elimOne" (formula "12") (term "0"))
                           (rule "inEqSimp_subsumption0" (formula "4") (ifseqformula "12"))
                           (rule "leq_literals" (formula "4") (term "0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "14"))
                           (rule "mul_literals" (formula "4") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "4") (term "0"))
                           (rule "add_literals" (formula "4") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                           (rule "mul_literals" (formula "4") (term "1"))
                           (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "9"))
                           (rule "leq_literals" (formula "4") (term "0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "11"))
                           (rule "polySimp_rightDist" (formula "13") (term "0,0"))
                           (rule "mul_literals" (formula "13") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "13") (term "0"))
                           (rule "add_literals" (formula "13") (term "0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "13"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                           (rule "polySimp_elimOne" (formula "13") (term "0"))
                           (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "13"))
                           (rule "leq_literals" (formula "3") (term "0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "inEqSimp_and_subsumption3" (formula "21") (term "0,0,0"))
                           (rule "leq_literals" (formula "21") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "21"))
                           (rule "commuteIntersection" (formula "46") (term "0"))
                           (rule "nnf_imp2or" (formula "21") (term "0"))
                           (rule "nnf_notAnd" (formula "21") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                           (rule "mul_literals" (formula "21") (term "1,0,0,1,0,0"))
                           (rule "add_literals" (formula "21") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                           (rule "mul_literals" (formula "21") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "21") (term "0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "21") (term "0,0,0,0"))
                           (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0,0"))
                           (rule "add_literals" (formula "21") (term "0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "0,0,0,0"))
                           (rule "mul_literals" (formula "21") (term "1,0,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "21") (term "1,0,0,0"))
                           (rule "times_zero_1" (formula "21") (term "1,0,0,1,0,0,0"))
                           (rule "add_literals" (formula "21") (term "0,0,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "21") (term "1,1,0,0,0"))
                           (rule "for_to_while" (formula "52") (term "1") (inst "#outerLabel=_label1") (inst "#innerLabel=_label0"))
                           (rule "variableDeclarationAssign" (formula "52") (term "1"))
                           (rule "variableDeclaration" (formula "52") (term "1") (newnames "bucket"))
                           (rule "assignment" (formula "52") (term "1"))
                            (builtin "One Step Simplification" (formula "52"))
                           (rule "commute_or" (formula "21") (term "0,0,0"))
                           (rule "inEqSimp_or_subsumption3" (formula "21") (term "0,0"))
                           (rule "qeq_literals" (formula "21") (term "0,1,0,0"))
                            (builtin "One Step Simplification" (formula "21"))
                           (rule "arrayLengthIsAShort" (formula "8") (term "0"))
                           (rule "expand_inShort" (formula "8"))
                           (rule "replace_short_MIN" (formula "8") (term "0,1"))
                           (rule "replace_short_MAX" (formula "8") (term "1,0"))
                           (rule "andLeft" (formula "8"))
                           (rule "inEqSimp_commuteLeq" (formula "8"))
                           (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "9"))
                           (rule "leq_literals" (formula "8") (term "0"))
                            (builtin "One Step Simplification" (formula "8"))
                           (rule "true_left" (formula "8"))
                           (rule "arrayLengthNotNegative" (formula "11") (term "0"))
                           (rule "arrayLengthIsAShort" (formula "20") (term "0"))
                           (rule "expand_inShort" (formula "20"))
                           (rule "replace_short_MIN" (formula "20") (term "0,1"))
                           (rule "replace_short_MAX" (formula "20") (term "1,0"))
                           (rule "andLeft" (formula "20"))
                           (rule "inEqSimp_commuteLeq" (formula "21"))
                           (rule "applyEq" (formula "20") (term "0") (ifseqformula "22"))
                           (rule "leq_literals" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "applyEq" (formula "20") (term "0") (ifseqformula "21"))
                           (rule "qeq_literals" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "arrayLengthNotNegative" (formula "20") (term "0"))
                           (rule "applyEq" (formula "20") (term "0") (ifseqformula "21"))
                           (rule "qeq_literals" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "elim_double_block_3" (formula "52") (term "1"))
                           (rule "jdiv_axiom" (formula "35") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "35") (term "0,0,2,1"))
                           (rule "eqSymm" (formula "35"))
                           (rule "applyEqRigid" (formula "35") (term "1") (ifseqformula "36"))
                           (rule "polyDiv_pullOut" (formula "35") (term "1,0") (inst "polyDivCoeff=l_0"))
                           (rule "polySimp_mulLiterals" (formula "35") (term "1,0,0,2,1,0"))
                           (rule "equal_literals" (formula "35") (term "0,1,0"))
                            (builtin "One Step Simplification" (formula "35"))
                           (rule "polySimp_pullOutFactor0" (formula "35") (term "0,0,1,0"))
                           (rule "add_literals" (formula "35") (term "1,0,0,1,0"))
                           (rule "times_zero_1" (formula "35") (term "0,0,1,0"))
                           (rule "div_literals" (formula "35") (term "0,1,0"))
                           (rule "add_zero_left" (formula "35") (term "1,0"))
                            (builtin "One Step Simplification" (formula "35"))
                           (rule "polySimp_homoEq" (formula "35") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "35") (term "1,0,1"))
                           (rule "polySimp_elimOne" (formula "35") (term "1,0,1"))
                           (rule "polySimp_sepPosMonomial" (formula "35") (term "1"))
                           (rule "polyDiv_pullOut" (formula "35") (term "0,1") (inst "polyDivCoeff=mul(l_0, Z(neglit(1(#))))"))
                           (rule "polySimp_mulLiterals" (formula "35") (term "0,1,0,0,2,0,1"))
                           (rule "equal_literals" (formula "35") (term "0,0,1"))
                            (builtin "One Step Simplification" (formula "35"))
                           (rule "polySimp_mulLiterals" (formula "35") (term "1,0,0,0,1"))
                           (rule "polySimp_homoEq" (formula "35") (term "1"))
                           (rule "polySimp_pullOutFactor0" (formula "35") (term "0,0,0,1,0,1"))
                           (rule "add_literals" (formula "35") (term "1,0,0,0,1,0,1"))
                           (rule "times_zero_1" (formula "35") (term "0,0,0,1,0,1"))
                           (rule "div_literals" (formula "35") (term "0,0,1,0,1"))
                           (rule "add_zero_left" (formula "35") (term "0,1,0,1"))
                           (rule "polySimp_mulLiterals" (formula "35") (term "1,0,1"))
                           (rule "polySimp_elimOne" (formula "35") (term "1,0,1"))
                           (rule "polySimp_pullOutFactor2" (formula "35") (term "0,1"))
                           (rule "add_literals" (formula "35") (term "1,0,1"))
                           (rule "times_zero_1" (formula "35") (term "0,1"))
                            (builtin "One Step Simplification" (formula "35"))
                           (rule "true_left" (formula "35"))
                           (rule "loopScopeInvDia" (formula "52") (term "1") (newnames "bucket_0,o_0,f") (inst "#x=x_1") (inst "#variant=x") (inst "#permissionsBefore_LOOP=h_2") (inst "#savedHeapBefore_LOOP=h_1") (inst "#heapBefore_LOOP=h") (inst "anon_permissions_LOOP=anon_permissions_LOOP_0") (inst "anon_savedHeap_LOOP=anon_savedHeap_LOOP_0") (inst "anon_heap_LOOP=anon_heap_LOOP_0"))
                           (branch "Invariant Initially Valid"
                              (rule "closeTrue" (formula "52"))
                           )
                           (branch "Invariant Preserved and Used"
                               (builtin "One Step Simplification" (formula "53"))
                              (rule "impRight" (formula "53"))
                              (rule "andLeft" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "translateJavaSubInt" (formula "61") (term "0,1,1,0,1"))
                              (rule "translateJavaSubInt" (formula "61") (term "0,1,1,0"))
                              (rule "translateJavaSubInt" (formula "61") (term "2,0,1,0,1,0,1,0"))
                              (rule "eqSymm" (formula "8") (term "0,1,0,1"))
                              (rule "translateJavaSubInt" (formula "8") (term "7,0,1,1"))
                              (rule "translateJavaSubInt" (formula "8") (term "2,0,1,0,0,1,1"))
                              (rule "translateJavaMod" (formula "8") (term "0,0,0,1"))
                              (rule "translateJavaAddInt" (formula "8") (term "6,0,1,1"))
                              (rule "translateJavaSubInt" (formula "7") (term "2,6,0"))
                              (rule "translateJavaSubInt" (formula "7") (term "2,0,1,0,0"))
                              (rule "translateJavaSubInt" (formula "6") (term "2,0,1,0,0"))
                              (rule "translateJavaSubInt" (formula "5") (term "2,7,0"))
                              (rule "translateJavaSubInt" (formula "5") (term "2,0,1,0,0"))
                              (rule "translateJavaSubInt" (formula "4") (term "2,0,1,0,2,0"))
                              (rule "translateJavaMod" (formula "3") (term "0,1"))
                              (rule "translateJavaSubInt" (formula "8") (term "0,0,1,0,1"))
                              (rule "polySimp_elimSub" (formula "61") (term "0,1,1,0,1"))
                              (rule "polySimp_elimSub" (formula "61") (term "0,1,1,0"))
                              (rule "polySimp_elimSub" (formula "61") (term "2,0,1,0,1,0,1,0"))
                              (rule "mul_literals" (formula "61") (term "1,2,0,1,0,1,0,1,0"))
                              (rule "polySimp_elimSub" (formula "8") (term "7,0,1,1"))
                              (rule "mul_literals" (formula "8") (term "1,7,0,1,1"))
                              (rule "polySimp_elimSub" (formula "8") (term "2,0,1,0,0,1,1"))
                              (rule "mul_literals" (formula "8") (term "1,2,0,1,0,0,1,1"))
                              (rule "polySimp_elimSub" (formula "7") (term "2,6,0"))
                              (rule "mul_literals" (formula "7") (term "1,2,6,0"))
                              (rule "polySimp_elimSub" (formula "7") (term "2,0,1,0,0"))
                              (rule "mul_literals" (formula "7") (term "1,2,0,1,0,0"))
                              (rule "polySimp_elimSub" (formula "6") (term "2,0,1,0,0"))
                              (rule "mul_literals" (formula "6") (term "1,2,0,1,0,0"))
                              (rule "polySimp_elimSub" (formula "5") (term "2,7,0"))
                              (rule "mul_literals" (formula "5") (term "1,2,7,0"))
                              (rule "polySimp_elimSub" (formula "5") (term "2,0,1,0,0"))
                              (rule "mul_literals" (formula "5") (term "1,2,0,1,0,0"))
                              (rule "polySimp_elimSub" (formula "4") (term "2,0,1,0,2,0"))
                              (rule "mul_literals" (formula "4") (term "1,2,0,1,0,2,0"))
                              (rule "polySimp_elimSub" (formula "8") (term "0,0,1,0,1"))
                              (rule "mul_literals" (formula "8") (term "1,0,0,1,0,1"))
                              (rule "eqSymm" (formula "8") (term "0,1,0,1"))
                              (rule "polySimp_addComm0" (formula "8") (term "6,0,1,1"))
                              (rule "polySimp_addComm0" (formula "61") (term "0,1,1,0,1"))
                              (rule "polySimp_addComm0" (formula "61") (term "2,0,1,0,1,0,1,0"))
                              (rule "polySimp_addComm0" (formula "8") (term "7,0,1,1"))
                              (rule "polySimp_addComm0" (formula "8") (term "2,0,1,0,0,1,1"))
                              (rule "polySimp_addComm0" (formula "7") (term "2,6,0"))
                              (rule "polySimp_addComm0" (formula "7") (term "2,0,1,0,0"))
                              (rule "polySimp_addComm0" (formula "6") (term "2,0,1,0,0"))
                              (rule "polySimp_addComm0" (formula "5") (term "2,7,0"))
                              (rule "polySimp_addComm0" (formula "5") (term "2,0,1,0,0"))
                              (rule "polySimp_addComm0" (formula "4") (term "2,0,1,0,2,0"))
                              (rule "polySimp_addComm0" (formula "8") (term "1,0,1,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,6,0"))
                              (rule "polySimp_mulAssoc" (formula "7") (term "1,0,0,0,0,6,0"))
                              (rule "polySimp_mulComm0" (formula "7") (term "0,1,0,0,0,0,6,0"))
                              (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0,0,6,0"))
                              (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,7,0"))
                              (rule "polySimp_mulAssoc" (formula "5") (term "1,0,0,0,0,7,0"))
                              (rule "polySimp_mulComm0" (formula "5") (term "0,1,0,0,0,0,7,0"))
                              (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,0,0,7,0"))
                              (rule "narrowSelectArrayType" (formula "4") (term "2,1") (ifseqformula "10") (ifseqformula "60"))
                              (rule "inEqSimp_commuteLeq" (formula "1"))
                              (rule "variableDeclaration" (formula "61") (term "1") (newnames "x_2"))
                              (rule "jmod_axiom" (formula "8") (term "0,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0,1"))
                              (rule "jmod_axiom" (formula "3") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1"))
                              (rule "polySimp_sepNegMonomial" (formula "8") (term "0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "8") (term "0,0,0,1"))
                              (rule "polySimp_sepNegMonomial" (formula "3") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,6,0"))
                              (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,6,0"))
                              (rule "polySimp_rightDist" (formula "7") (term "1,0,0,6,0"))
                              (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,6,0"))
                              (rule "mul_literals" (formula "7") (term "0,1,0,0,6,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,7,0"))
                              (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,7,0"))
                              (rule "polySimp_rightDist" (formula "5") (term "1,0,0,7,0"))
                              (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,7,0"))
                              (rule "mul_literals" (formula "5") (term "0,1,0,0,7,0"))
                              (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
                              (rule "times_zero_1" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "elimGcdGeq_antec" (formula "1") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,1,0"))
                              (rule "leq_literals" (formula "1") (term "0,0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "leq_literals" (formula "1") (term "0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "inEqSimp_subsumption1" (formula "55") (ifseqformula "1"))
                              (rule "leq_literals" (formula "55") (term "0"))
                               (builtin "One Step Simplification" (formula "55"))
                              (rule "true_left" (formula "55"))
                              (rule "commuteUnion" (formula "9") (term "1,0,0,1,1"))
                              (rule "commuteUnion" (formula "8") (term "1,0,0"))
                              (rule "commuteUnion" (formula "7") (term "1,0,0"))
                              (rule "commuteUnion" (formula "6") (term "1,0,0"))
                              (rule "commuteUnion" (formula "5") (term "1,0,2,0"))
                              (rule "commuteUnion" (formula "61") (term "1,0,1,0,1,0"))
                              (rule "commute_or" (formula "8") (term "0,6,0"))
                              (rule "commute_or" (formula "6") (term "0,7,0"))
                              (rule "commute_and" (formula "9") (term "0,1"))
                              (rule "commute_and_2" (formula "9") (term "1"))
                              (rule "commute_and" (formula "9") (term "0,1"))
                              (rule "ifElseUnfold" (formula "61") (term "1") (inst "#boolv=x_3"))
                              (rule "variableDeclaration" (formula "61") (term "1") (newnames "x_3"))
                              (rule "less_than_comparison_simple" (formula "61") (term "1"))
                               (builtin "One Step Simplification" (formula "61"))
                              (rule "inEqSimp_ltToLeq" (formula "61") (term "0,0,1,0"))
                              (rule "polySimp_mulAssoc" (formula "61") (term "1,0,0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "61") (term "0,1,0,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "61") (term "1,0,0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "61") (term "0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "61") (term "1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "61") (term "1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "61") (term "1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "61") (term "0,1,0,0,1,0"))
                              (rule "jdiv_axiom" (formula "4") (term "0,0,1"))
                              (rule "eqSymm" (formula "4"))
                              (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "eqSymm" (formula "4"))
                              (rule "applyEqRigid" (formula "5") (term "0,0,1") (ifseqformula "4"))
                              (rule "applyEqRigid" (formula "10") (term "0,0,1,1") (ifseqformula "4"))
                              (rule "div_axiom" (formula "4") (term "1") (inst "quotient=quotient_0"))
                              (rule "equal_literals" (formula "4") (term "0"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "mul_literals" (formula "4") (term "1,1,1,1"))
                              (rule "qeq_literals" (formula "4") (term "0,1"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "andLeft" (formula "4"))
                              (rule "andLeft" (formula "4"))
                              (rule "polySimp_addComm1" (formula "6") (term "1"))
                              (rule "add_literals" (formula "6") (term "0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "5"))
                              (rule "inEqSimp_homoInEq1" (formula "6"))
                              (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
                              (rule "polySimp_addComm1" (formula "6") (term "0"))
                              (rule "applyEqRigid" (formula "8") (term "0,0,1") (ifseqformula "4"))
                              (rule "eqSymm" (formula "8") (term "1"))
                              (rule "applyEqRigid" (formula "13") (term "0,0,1,1") (ifseqformula "4"))
                              (rule "eqSymm" (formula "13") (term "1,1"))
                              (rule "applyEq" (formula "7") (term "1") (ifseqformula "4"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                              (rule "polySimp_mulComm0" (formula "6") (term "1"))
                              (rule "polySimp_rightDist" (formula "6") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                              (rule "mul_literals" (formula "6") (term "0,1"))
                              (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "6"))
                              (rule "times_zero_1" (formula "2") (term "0,0"))
                              (rule "add_zero_left" (formula "2") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                              (rule "mul_literals" (formula "2") (term "1"))
                              (rule "elimGcdGeq_antec" (formula "2") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(2(#))"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "2") (term "1,0,0,0,0,1,0"))
                              (rule "leq_literals" (formula "2") (term "0,0"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "polySimp_addLiterals" (formula "2") (term "0,0,0,0"))
                              (rule "add_literals" (formula "2") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
                              (rule "add_literals" (formula "2") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "2") (term "1,0,0"))
                              (rule "add_literals" (formula "2") (term "0,0"))
                              (rule "leq_literals" (formula "2") (term "0"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "4"))
                              (rule "polySimp_mulAssoc" (formula "6") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "6") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "6") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                              (rule "polySimp_mulLiterals" (formula "6") (term "1"))
                              (rule "elimGcdGeq_antec" (formula "6") (inst "elimGcdRightDiv=quotient_0") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                              (rule "polySimp_mulLiterals" (formula "6") (term "1,0,1,0"))
                              (rule "leq_literals" (formula "6") (term "0,0"))
                               (builtin "One Step Simplification" (formula "6"))
                              (rule "mul_literals" (formula "6") (term "0,1,0,0,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "6") (term "0,0"))
                              (rule "add_literals" (formula "6") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "6") (term "1,0,0"))
                              (rule "add_zero_right" (formula "6") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "6") (term "0,0"))
                              (rule "add_literals" (formula "6") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "6") (term "1,0,0"))
                              (rule "add_literals" (formula "6") (term "0,0"))
                              (rule "leq_literals" (formula "6") (term "0"))
                               (builtin "One Step Simplification" (formula "6"))
                              (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "60"))
                              (rule "polySimp_mulComm0" (formula "6") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "6") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                              (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                              (rule "polySimp_elimOne" (formula "6") (term "0"))
                              (rule "applyEq_and_gen3" (formula "16") (term "1"))
                              (rule "polySimp_homoEq" (formula "16") (term "0,1,0,1"))
                              (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,1,0,1"))
                              (rule "polySimp_addComm1" (formula "16") (term "0,0,1,0,1"))
                              (rule "polySimp_sepPosMonomial" (formula "16") (term "0,1,0,1"))
                              (rule "polySimp_mulComm0" (formula "16") (term "1,0,1,0,1"))
                              (rule "polySimp_rightDist" (formula "16") (term "1,0,1,0,1"))
                              (rule "mul_literals" (formula "16") (term "0,1,0,1,0,1"))
                              (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,1,0,1"))
                              (rule "elimGcdEq" (formula "16") (term "0,1,0,1") (inst "elimGcdRightDiv=add(Z(0(#)), quotient_0)") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,1,0,1"))
                              (rule "add_zero_left" (formula "16") (term "1,1,1,0,1,0,1"))
                              (rule "add_literals" (formula "16") (term "1,0,0,0,1,0,1"))
                              (rule "add_zero_left" (formula "16") (term "1,1,0,0,1,0,1,0,1"))
                              (rule "mul_literals" (formula "16") (term "0,1,0,1,0,0,1,0,1"))
                              (rule "add_zero_left" (formula "16") (term "1,1,0,1,0,0,1,0,1"))
                              (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,1,0,1"))
                              (rule "add_zero_left" (formula "16") (term "1,1,0,0,0,0,1,0,1"))
                              (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,1,0,1"))
                              (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,0,1,0,1,0,1"))
                              (rule "add_literals" (formula "16") (term "1,1,0,0,1,0,1,0,1"))
                              (rule "times_zero_1" (formula "16") (term "1,0,0,1,0,1,0,1"))
                              (rule "add_literals" (formula "16") (term "0,0,1,0,1,0,1"))
                              (rule "equal_literals" (formula "16") (term "0,1,0,1,0,1"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "polySimp_mulComm0" (formula "16") (term "1,0,1,0,0,1,0,1"))
                              (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,1,0,0,1,0,1"))
                              (rule "add_literals" (formula "16") (term "1,1,0,1,0,0,1,0,1"))
                              (rule "times_zero_1" (formula "16") (term "1,0,1,0,0,1,0,1"))
                              (rule "add_zero_right" (formula "16") (term "0,1,0,0,1,0,1"))
                              (rule "qeq_literals" (formula "16") (term "1,0,0,1,0,1"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,0,1"))
                              (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,0,0,1,0,1"))
                              (rule "add_literals" (formula "16") (term "1,1,0,0,0,1,0,1"))
                              (rule "times_zero_1" (formula "16") (term "1,0,0,0,1,0,1"))
                              (rule "add_literals" (formula "16") (term "0,0,0,1,0,1"))
                              (rule "leq_literals" (formula "16") (term "0,0,1,0,1"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "ifElseSplit" (formula "68"))
                              (branch "if x_3 true"
                                  (builtin "One Step Simplification" (formula "69"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "replace_known_left" (formula "14") (term "1,0,7,0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "14"))
                                 (rule "replace_known_left" (formula "16") (term "1,0,6,0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "16"))
                                 (rule "inEqSimp_subsumption0" (formula "5") (ifseqformula "1"))
                                 (rule "inEqSimp_homoInEq0" (formula "5") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "5") (term "1,0,0"))
                                 (rule "mul_literals" (formula "5") (term "0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "5") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "5") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "5") (term "0,0"))
                                 (rule "add_literals" (formula "5") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "5") (term "1,0,0"))
                                 (rule "add_literals" (formula "5") (term "0,0"))
                                 (rule "qeq_literals" (formula "5") (term "0"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "true_left" (formula "5"))
                                 (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "1"))
                                 (rule "times_zero_1" (formula "4") (term "0,0"))
                                 (rule "add_zero_left" (formula "4") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                 (rule "mul_literals" (formula "4") (term "1"))
                                 (rule "elimGcdGeq_antec" (formula "4") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                                 (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0"))
                                 (rule "mul_literals" (formula "4") (term "0,1,0,0,0,0,1,0"))
                                 (rule "leq_literals" (formula "4") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "mul_literals" (formula "4") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_addLiterals" (formula "4") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "4") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                                 (rule "add_literals" (formula "4") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "4") (term "1,0,0"))
                                 (rule "add_literals" (formula "4") (term "0,0"))
                                 (rule "leq_literals" (formula "4") (term "0"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "4"))
                                 (rule "leq_literals" (formula "2") (term "0"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "true_left" (formula "2"))
                                 (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "1"))
                                 (rule "polySimp_mulAssoc" (formula "8") (term "0,0"))
                                 (rule "polySimp_mulComm0" (formula "8") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "8") (term "0,0"))
                                 (rule "polySimp_addAssoc" (formula "8") (term "0"))
                                 (rule "polySimp_addComm0" (formula "8") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                                 (rule "polySimp_mulComm0" (formula "8") (term "1"))
                                 (rule "polySimp_rightDist" (formula "8") (term "1"))
                                 (rule "mul_literals" (formula "8") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
                                 (rule "elimGcdGeq_antec" (formula "8") (inst "elimGcdRightDiv=add(Z(1(#)), quotient_0)") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                                 (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0"))
                                 (rule "leq_literals" (formula "8") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "8"))
                                 (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                                 (rule "add_literals" (formula "8") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "8") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "8") (term "0,0"))
                                 (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "8") (term "0,0,0"))
                                 (rule "add_literals" (formula "8") (term "0,0,0,0"))
                                 (rule "add_zero_left" (formula "8") (term "0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "8") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                                 (rule "add_literals" (formula "8") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "8") (term "1,0,0"))
                                 (rule "add_literals" (formula "8") (term "0,0"))
                                 (rule "leq_literals" (formula "8") (term "0"))
                                  (builtin "One Step Simplification" (formula "8"))
                                 (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "8"))
                                 (rule "inEqSimp_homoInEq0" (formula "7") (term "0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0"))
                                 (rule "add_literals" (formula "7") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "7") (term "1,0,0"))
                                 (rule "add_literals" (formula "7") (term "0,0"))
                                 (rule "qeq_literals" (formula "7") (term "0"))
                                  (builtin "One Step Simplification" (formula "7"))
                                 (rule "true_left" (formula "7"))
                                 (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "61"))
                                 (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                                 (rule "mul_literals" (formula "7") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "7") (term "0"))
                                 (rule "add_literals" (formula "7") (term "0,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "7"))
                                 (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                                 (rule "polySimp_elimOne" (formula "7") (term "0"))
                                 (rule "inEqSimp_subsumption0" (formula "6") (ifseqformula "7"))
                                 (rule "leq_literals" (formula "6") (term "0"))
                                  (builtin "One Step Simplification" (formula "6"))
                                 (rule "true_left" (formula "6"))
                                  (builtin "Use Operation Contract" (formula "68") (newnames "heapBefore_sample_sort_recurse_on,exc_0,heapAfter_sample_sort_recurse_on,anon_heap_sample_sort_recurse_on") (contract "de.wiesler.Sorter[de.wiesler.Sorter::sample_sort_recurse_on([I,int,int,de.wiesler.Storage,[I,int,boolean,int)].JML normal_behavior operation contract.0"))
                                 (branch "Post (sample_sort_recurse_on)"
                                     (builtin "One Step Simplification" (formula "70"))
                                     (builtin "One Step Simplification" (formula "63"))
                                    (rule "andLeft" (formula "63"))
                                    (rule "andLeft" (formula "64"))
                                    (rule "andLeft" (formula "64"))
                                    (rule "andLeft" (formula "66"))
                                    (rule "andLeft" (formula "65"))
                                    (rule "andLeft" (formula "66"))
                                    (rule "andLeft" (formula "67"))
                                    (rule "andLeft" (formula "68"))
                                    (rule "andLeft" (formula "69"))
                                    (rule "translateJavaSubInt" (formula "63") (term "2,0,1,0"))
                                    (rule "translateJavaAddInt" (formula "66") (term "7,0"))
                                    (rule "translateJavaAddInt" (formula "68") (term "6,0"))
                                    (rule "translateJavaAddInt" (formula "69") (term "6,0,1"))
                                    (rule "translateJavaSubInt" (formula "69") (term "7,0,1"))
                                    (rule "polySimp_elimSub" (formula "63") (term "2,0,1,0"))
                                    (rule "mul_literals" (formula "63") (term "1,2,0,1,0"))
                                    (rule "polySimp_elimSub" (formula "69") (term "7,0,1"))
                                    (rule "mul_literals" (formula "69") (term "1,7,0,1"))
                                    (rule "polySimp_addComm0" (formula "66") (term "7,0"))
                                    (rule "polySimp_addComm0" (formula "68") (term "6,0"))
                                    (rule "polySimp_addComm0" (formula "69") (term "6,0,1"))
                                    (rule "polySimp_addComm0" (formula "63") (term "2,0,1,0"))
                                    (rule "polySimp_addComm0" (formula "69") (term "7,0,1"))
                                    (rule "blockEmpty" (formula "78") (term "1"))
                                    (rule "commuteUnion" (formula "63") (term "1,0"))
                                    (rule "compound_assignment_op_plus" (formula "78") (term "1"))
                                    (rule "compound_int_cast_expression" (formula "78") (term "1") (inst "#v=x_3"))
                                    (rule "variableDeclarationAssign" (formula "78") (term "1"))
                                    (rule "variableDeclaration" (formula "78") (term "1") (newnames "x_4"))
                                    (rule "remove_parentheses_right" (formula "78") (term "1"))
                                    (rule "compound_addition_2" (formula "78") (term "1") (inst "#v1=x_6") (inst "#v0=x_5"))
                                    (rule "variableDeclarationAssign" (formula "78") (term "1"))
                                    (rule "variableDeclaration" (formula "78") (term "1") (newnames "x_5"))
                                    (rule "assignment" (formula "78") (term "1"))
                                     (builtin "One Step Simplification" (formula "78"))
                                    (rule "variableDeclarationAssign" (formula "78") (term "1"))
                                    (rule "variableDeclaration" (formula "78") (term "1") (newnames "x_6"))
                                    (rule "remove_parentheses_right" (formula "78") (term "1"))
                                    (rule "compound_addition_2" (formula "78") (term "1") (inst "#v1=x_8") (inst "#v0=x_7"))
                                    (rule "variableDeclarationAssign" (formula "78") (term "1"))
                                    (rule "variableDeclaration" (formula "78") (term "1") (newnames "x_7"))
                                    (rule "assignment" (formula "78") (term "1"))
                                     (builtin "One Step Simplification" (formula "78"))
                                    (rule "variableDeclarationAssign" (formula "78") (term "1"))
                                    (rule "variableDeclaration" (formula "78") (term "1") (newnames "x_8"))
                                    (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "78") (term "1") (inst "#v0=x_9"))
                                    (rule "variableDeclaration" (formula "78") (term "1") (newnames "x_9"))
                                    (rule "variableDeclarationAssign" (formula "78") (term "1"))
                                    (rule "variableDeclaration" (formula "78") (term "1") (newnames "b"))
                                    (rule "assignment" (formula "78") (term "1"))
                                     (builtin "One Step Simplification" (formula "78"))
                                    (rule "methodBodyExpand" (formula "78") (term "1") (newnames "heapBefore_toInt,savedHeapBefore_toInt"))
                                     (builtin "One Step Simplification" (formula "78"))
                                    (rule "returnUnfold" (formula "78") (term "1") (inst "#v0=x_10"))
                                    (rule "variableDeclarationAssign" (formula "78") (term "1"))
                                    (rule "variableDeclaration" (formula "78") (term "1") (newnames "x_10"))
                                    (rule "condition_simple" (formula "78") (term "1"))
                                     (builtin "One Step Simplification" (formula "78"))
                                    (rule "methodCallReturn" (formula "78") (term "1"))
                                    (rule "assignment" (formula "78") (term "1"))
                                     (builtin "One Step Simplification" (formula "78"))
                                    (rule "methodCallEmpty" (formula "78") (term "1"))
                                    (rule "blockEmpty" (formula "78") (term "1"))
                                    (rule "assignment" (formula "78") (term "1"))
                                     (builtin "One Step Simplification" (formula "78"))
                                    (rule "assignmentAdditionInt" (formula "78") (term "1"))
                                    (branch "Overflow check"
                                        (builtin "One Step Simplification" (formula "78"))
                                       (rule "expand_inInt" (formula "78"))
                                       (rule "replace_int_MAX" (formula "78") (term "1,0"))
                                       (rule "replace_int_MIN" (formula "78") (term "0,1"))
                                       (rule "inEqSimp_homoInEq0" (formula "78") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "78") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "78") (term "1,0,0"))
                                       (rule "mul_literals" (formula "78") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "78") (term "0,0"))
                                       (rule "add_literals" (formula "78") (term "0,0,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "78") (term "1"))
                                       (rule "mul_literals" (formula "78") (term "1,0,1"))
                                       (rule "polySimp_addComm1" (formula "78") (term "0,1"))
                                       (rule "add_literals" (formula "78") (term "0,0,1"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "78") (term "0"))
                                       (rule "polySimp_mulLiterals" (formula "78") (term "0,0"))
                                       (rule "polySimp_elimOne" (formula "78") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "78") (term "1"))
                                       (rule "mul_literals" (formula "78") (term "1,1"))
                                       (rule "Definition_axiom_for_allBucketsPartitioned_in_de_wiesler_Sorter" (formula "50") (term "0") (inst "b=b_1"))
                                        (builtin "One Step Simplification" (formula "50"))
                                       (rule "expand_inInt" (formula "50") (term "1,0,0"))
                                       (rule "replace_int_MAX" (formula "50") (term "1,0,1,0,0"))
                                       (rule "replace_int_MIN" (formula "50") (term "0,1,1,0,0"))
                                       (rule "translateJavaAddInt" (formula "50") (term "0,2,5,0,1,0"))
                                       (rule "polySimp_addComm0" (formula "50") (term "0,2,5,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "50") (term "1,0,0,0"))
                                       (rule "polySimp_mulAssoc" (formula "50") (term "1,0,0,1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "50") (term "0,1,0,0,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "50") (term "1,0,0,1,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "50") (term "0,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "50") (term "1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "50") (term "1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "50") (term "1,1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "50") (term "1,1,0,0,0"))
                                       (rule "mul_literals" (formula "50") (term "0,1,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "50") (term "1,1,1,0,0,0"))
                                       (rule "nnf_imp2or" (formula "50") (term "0"))
                                       (rule "nnf_notAnd" (formula "50") (term "0,0"))
                                       (rule "nnf_notAnd" (formula "50") (term "0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "50") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "50") (term "1,0,0,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "50") (term "1,1,0,0,1,0,0,0"))
                                       (rule "mul_literals" (formula "50") (term "0,1,0,0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "50") (term "0,0,1,0,0,0"))
                                       (rule "add_literals" (formula "50") (term "0,0,0,1,0,0,0"))
                                       (rule "add_zero_left" (formula "50") (term "0,0,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "50") (term "1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "50") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "50") (term "0,0,0,0"))
                                       (rule "mul_literals" (formula "50") (term "1,0,0,0,0,0,0"))
                                       (rule "add_literals" (formula "50") (term "0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "50") (term "0,0,0,0"))
                                       (rule "mul_literals" (formula "50") (term "1,0,0,0,0"))
                                       (rule "nnf_notAnd" (formula "50") (term "1,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "50") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "50") (term "1,0,0,0,1,0,0"))
                                       (rule "add_literals" (formula "50") (term "0,0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "50") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "50") (term "1,0,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "50") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "50") (term "1,0,0,1,1,0,0"))
                                       (rule "add_literals" (formula "50") (term "0,0,1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "50") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "50") (term "1,1,1,0,0"))
                                       (rule "Free_class_invariant_axiom_for_de_wiesler_Storage" (formula "57"))
                                        (builtin "One Step Simplification" (formula "57"))
                                       (rule "andLeft" (formula "57"))
                                       (rule "andLeft" (formula "57"))
                                       (rule "andLeft" (formula "59"))
                                       (rule "andLeft" (formula "57"))
                                       (rule "andLeft" (formula "60"))
                                       (rule "andLeft" (formula "57"))
                                       (rule "andLeft" (formula "61"))
                                       (rule "andLeft" (formula "57"))
                                       (rule "andLeft" (formula "62"))
                                       (rule "andLeft" (formula "57"))
                                       (rule "andLeft" (formula "63"))
                                       (rule "andLeft" (formula "57"))
                                       (rule "andLeft" (formula "64"))
                                       (rule "andLeft" (formula "57"))
                                       (rule "andLeft" (formula "65"))
                                       (rule "andLeft" (formula "57"))
                                       (rule "andLeft" (formula "66"))
                                       (rule "andLeft" (formula "66"))
                                       (rule "andLeft" (formula "66"))
                                       (rule "andLeft" (formula "66"))
                                       (rule "andLeft" (formula "66"))
                                       (rule "andLeft" (formula "66"))
                                       (rule "andLeft" (formula "66"))
                                       (rule "andLeft" (formula "66"))
                                       (rule "andLeft" (formula "66"))
                                       (rule "andLeft" (formula "66"))
                                       (rule "andLeft" (formula "66"))
                                       (rule "andLeft" (formula "66"))
                                       (rule "andLeft" (formula "66"))
                                       (rule "andLeft" (formula "66"))
                                       (rule "andLeft" (formula "66"))
                                       (rule "andLeft" (formula "66"))
                                       (rule "andLeft" (formula "66"))
                                       (rule "andLeft" (formula "66"))
                                       (rule "andLeft" (formula "66"))
                                       (rule "andLeft" (formula "66"))
                                       (rule "translateJavaMulInt" (formula "60") (term "1"))
                                       (rule "mul_literals" (formula "60") (term "1"))
                                       (rule "translateJavaMulInt" (formula "59") (term "1"))
                                       (rule "mul_literals" (formula "59") (term "1"))
                                       (rule "disjointDefinition" (formula "93"))
                                        (builtin "One Step Simplification" (formula "93"))
                                       (rule "notLeft" (formula "93"))
                                       (rule "disjointDefinition" (formula "92"))
                                        (builtin "One Step Simplification" (formula "92"))
                                       (rule "notLeft" (formula "92"))
                                       (rule "disjointDefinition" (formula "91"))
                                        (builtin "One Step Simplification" (formula "91"))
                                       (rule "notLeft" (formula "91"))
                                       (rule "eqSymm" (formula "105"))
                                       (rule "disjointDefinition" (formula "90"))
                                        (builtin "One Step Simplification" (formula "90"))
                                       (rule "notLeft" (formula "90"))
                                       (rule "eqSymm" (formula "104"))
                                       (rule "disjointDefinition" (formula "89"))
                                        (builtin "One Step Simplification" (formula "89"))
                                       (rule "notLeft" (formula "89"))
                                       (rule "eqSymm" (formula "103"))
                                       (rule "disjointDefinition" (formula "88"))
                                        (builtin "One Step Simplification" (formula "88"))
                                       (rule "notLeft" (formula "88"))
                                       (rule "eqSymm" (formula "102"))
                                       (rule "disjointDefinition" (formula "87"))
                                        (builtin "One Step Simplification" (formula "87"))
                                       (rule "notLeft" (formula "87"))
                                       (rule "eqSymm" (formula "101"))
                                       (rule "disjointDefinition" (formula "86"))
                                        (builtin "One Step Simplification" (formula "86"))
                                       (rule "notLeft" (formula "86"))
                                       (rule "eqSymm" (formula "100"))
                                       (rule "disjointDefinition" (formula "85"))
                                        (builtin "One Step Simplification" (formula "85"))
                                       (rule "notLeft" (formula "85"))
                                       (rule "eqSymm" (formula "99"))
                                       (rule "disjointDefinition" (formula "84"))
                                        (builtin "One Step Simplification" (formula "84"))
                                       (rule "notLeft" (formula "84"))
                                       (rule "eqSymm" (formula "98"))
                                       (rule "disjointDefinition" (formula "83"))
                                        (builtin "One Step Simplification" (formula "83"))
                                       (rule "notLeft" (formula "83"))
                                       (rule "eqSymm" (formula "97"))
                                       (rule "disjointDefinition" (formula "82"))
                                        (builtin "One Step Simplification" (formula "82"))
                                       (rule "notLeft" (formula "82"))
                                       (rule "eqSymm" (formula "96"))
                                       (rule "disjointDefinition" (formula "81"))
                                        (builtin "One Step Simplification" (formula "81"))
                                       (rule "notLeft" (formula "81"))
                                       (rule "eqSymm" (formula "95"))
                                       (rule "disjointDefinition" (formula "80"))
                                        (builtin "One Step Simplification" (formula "80"))
                                       (rule "notLeft" (formula "80"))
                                       (rule "eqSymm" (formula "94"))
                                       (rule "disjointDefinition" (formula "79"))
                                        (builtin "One Step Simplification" (formula "79"))
                                       (rule "notLeft" (formula "79"))
                                       (rule "eqSymm" (formula "93"))
                                       (rule "disjointDefinition" (formula "78"))
                                        (builtin "One Step Simplification" (formula "78"))
                                       (rule "notLeft" (formula "78"))
                                       (rule "disjointDefinition" (formula "77"))
                                        (builtin "One Step Simplification" (formula "77"))
                                       (rule "notLeft" (formula "77"))
                                       (rule "eqSymm" (formula "91"))
                                       (rule "disjointDefinition" (formula "76"))
                                        (builtin "One Step Simplification" (formula "76"))
                                       (rule "notLeft" (formula "76"))
                                       (rule "eqSymm" (formula "90"))
                                       (rule "disjointDefinition" (formula "75"))
                                        (builtin "One Step Simplification" (formula "75"))
                                       (rule "notLeft" (formula "75"))
                                       (rule "disjointDefinition" (formula "74"))
                                        (builtin "One Step Simplification" (formula "74"))
                                       (rule "notLeft" (formula "74"))
                                       (rule "disjointDefinition" (formula "73"))
                                        (builtin "One Step Simplification" (formula "73"))
                                       (rule "notLeft" (formula "73"))
                                       (rule "disjointDefinition" (formula "72"))
                                        (builtin "One Step Simplification" (formula "72"))
                                       (rule "notLeft" (formula "72"))
                                       (rule "disjointDefinition" (formula "71"))
                                        (builtin "One Step Simplification" (formula "71"))
                                       (rule "notLeft" (formula "71"))
                                       (rule "disjointDefinition" (formula "70"))
                                        (builtin "One Step Simplification" (formula "70"))
                                       (rule "notLeft" (formula "70"))
                                       (rule "disjointDefinition" (formula "69"))
                                        (builtin "One Step Simplification" (formula "69"))
                                       (rule "notLeft" (formula "69"))
                                       (rule "disjointDefinition" (formula "68"))
                                        (builtin "One Step Simplification" (formula "68"))
                                       (rule "notLeft" (formula "68"))
                                       (rule "disjointDefinition" (formula "66"))
                                        (builtin "One Step Simplification" (formula "66"))
                                       (rule "notLeft" (formula "66"))
                                       (rule "disjointDefinition" (formula "66"))
                                        (builtin "One Step Simplification" (formula "66"))
                                       (rule "notLeft" (formula "66"))
                                       (rule "applyEq" (formula "14") (term "0,1,0,0") (ifseqformula "65"))
                                       (rule "applyEq" (formula "73") (term "0,1,0,2,1") (ifseqformula "65"))
                                       (rule "applyEq" (formula "15") (term "0,1,0,0") (ifseqformula "65"))
                                       (rule "applyEq" (formula "46") (term "1,0,1,0") (ifseqformula "65"))
                                       (rule "applyEq" (formula "71") (term "0,1,0") (ifseqformula "65"))
                                       (rule "applyEq" (formula "43") (term "1,0") (ifseqformula "65"))
                                       (rule "applyEq" (formula "44") (term "1,0") (ifseqformula "65"))
                                       (rule "applyEq" (formula "33") (term "1,0") (ifseqformula "65"))
                                       (rule "applyEq" (formula "12") (term "0,1,0,2,0") (ifseqformula "65"))
                                       (rule "applyEq" (formula "13") (term "0,1,0,0") (ifseqformula "65"))
                                       (rule "applyEq" (formula "71") (term "0,1,0,0") (ifseqformula "65"))
                                       (rule "applyEq" (formula "16") (term "0,1,0,0,0,1") (ifseqformula "65"))
                                       (rule "distributeIntersection" (formula "43") (term "0"))
                                       (rule "distributeIntersection" (formula "44") (term "0"))
                                       (rule "distributeIntersection" (formula "33") (term "0"))
                                       (rule "distributeIntersection" (formula "43") (term "0,0"))
                                       (rule "distributeIntersection" (formula "43") (term "1,0"))
                                       (rule "unionEqualsEmpty" (formula "44"))
                                       (rule "andLeft" (formula "44"))
                                       (rule "unionEqualsEmpty" (formula "33"))
                                       (rule "andLeft" (formula "33"))
                                       (rule "distributeIntersection" (formula "44") (term "1,0,0"))
                                       (rule "distributeIntersection" (formula "44") (term "0,0,0"))
                                       (rule "distributeIntersection" (formula "44") (term "0,1,0"))
                                       (rule "distributeIntersection" (formula "44") (term "1,1,0"))
                                       (rule "distributeIntersection" (formula "45") (term "0"))
                                       (rule "distributeIntersection" (formula "46") (term "0"))
                                       (rule "distributeIntersection" (formula "34") (term "0"))
                                       (rule "distributeIntersection" (formula "33") (term "0"))
                                       (rule "unionEqualsEmpty" (formula "44"))
                                       (rule "andLeft" (formula "44"))
                                       (rule "distributeIntersection" (formula "46") (term "1,0"))
                                       (rule "distributeIntersection" (formula "46") (term "0,0"))
                                       (rule "distributeIntersection" (formula "47") (term "0,0"))
                                       (rule "distributeIntersection" (formula "47") (term "1,0"))
                                       (rule "distributeIntersection" (formula "34") (term "1,0"))
                                       (rule "distributeIntersection" (formula "34") (term "0,0"))
                                       (rule "distributeIntersection" (formula "33") (term "0,0"))
                                       (rule "distributeIntersection" (formula "33") (term "1,0"))
                                       (rule "unionEqualsEmpty" (formula "44"))
                                       (rule "andLeft" (formula "44"))
                                       (rule "unionEqualsEmpty" (formula "46"))
                                       (rule "andLeft" (formula "46"))
                                       (rule "unionEqualsEmpty" (formula "48"))
                                       (rule "andLeft" (formula "48"))
                                       (rule "unionEqualsEmpty" (formula "50"))
                                       (rule "andLeft" (formula "50"))
                                       (rule "unionEqualsEmpty" (formula "34"))
                                       (rule "andLeft" (formula "34"))
                                       (rule "unionEqualsEmpty" (formula "33"))
                                       (rule "andLeft" (formula "33"))
                                       (rule "unionEqualsEmpty" (formula "46"))
                                        (builtin "One Step Simplification" (formula "46"))
                                       (rule "andLeft" (formula "46"))
                                       (rule "notLeft" (formula "47"))
                                       (rule "notLeft" (formula "46"))
                                       (rule "eqSymm" (formula "89"))
                                       (rule "eqSymm" (formula "88"))
                                       (rule "unionEqualsEmpty" (formula "46"))
                                        (builtin "One Step Simplification" (formula "46"))
                                       (rule "andLeft" (formula "46"))
                                       (rule "notLeft" (formula "46"))
                                       (rule "notLeft" (formula "46"))
                                       (rule "eqSymm" (formula "88"))
                                       (rule "eqSymm" (formula "87"))
                                       (rule "unionEqualsEmpty" (formula "46"))
                                        (builtin "One Step Simplification" (formula "46"))
                                       (rule "andLeft" (formula "46"))
                                       (rule "notLeft" (formula "47"))
                                       (rule "notLeft" (formula "46"))
                                       (rule "eqSymm" (formula "87"))
                                       (rule "eqSymm" (formula "86"))
                                       (rule "unionEqualsEmpty" (formula "46"))
                                        (builtin "One Step Simplification" (formula "46"))
                                       (rule "andLeft" (formula "46"))
                                       (rule "notLeft" (formula "46"))
                                       (rule "notLeft" (formula "46"))
                                       (rule "eqSymm" (formula "86"))
                                       (rule "eqSymm" (formula "85"))
                                       (rule "unionEqualsEmpty" (formula "47"))
                                        (builtin "One Step Simplification" (formula "47"))
                                       (rule "andLeft" (formula "47"))
                                       (rule "notLeft" (formula "47"))
                                       (rule "notLeft" (formula "47"))
                                       (rule "eqSymm" (formula "85"))
                                       (rule "eqSymm" (formula "84"))
                                       (rule "sortsDisjointModuloNull" (formula "85"))
                                       (rule "replace_known_right" (formula "85") (term "1") (ifseqformula "126"))
                                        (builtin "One Step Simplification" (formula "85"))
                                       (rule "false_right" (formula "85"))
                                       (rule "sortsDisjointModuloNull" (formula "84"))
                                       (rule "replace_known_right" (formula "84") (term "1") (ifseqformula "125"))
                                        (builtin "One Step Simplification" (formula "84"))
                                       (rule "false_right" (formula "84"))
                                       (rule "unionEqualsEmpty" (formula "46"))
                                        (builtin "One Step Simplification" (formula "46"))
                                       (rule "andLeft" (formula "46"))
                                       (rule "notLeft" (formula "46"))
                                       (rule "notLeft" (formula "46"))
                                       (rule "eqSymm" (formula "84"))
                                       (rule "eqSymm" (formula "83"))
                                       (rule "sortsDisjointModuloNull" (formula "84"))
                                       (rule "replace_known_right" (formula "84") (term "1") (ifseqformula "125"))
                                        (builtin "One Step Simplification" (formula "84"))
                                       (rule "false_right" (formula "84"))
                                       (rule "sortsDisjointModuloNull" (formula "83"))
                                       (rule "replace_known_right" (formula "83") (term "1") (ifseqformula "124"))
                                        (builtin "One Step Simplification" (formula "83"))
                                       (rule "false_right" (formula "83"))
                                       (rule "unionEqualsEmpty" (formula "47"))
                                        (builtin "One Step Simplification" (formula "47"))
                                       (rule "andLeft" (formula "47"))
                                       (rule "notLeft" (formula "47"))
                                       (rule "notLeft" (formula "47"))
                                       (rule "eqSymm" (formula "83"))
                                       (rule "eqSymm" (formula "82"))
                                       (rule "sortsDisjointModuloNull" (formula "83"))
                                       (rule "replace_known_right" (formula "83") (term "1") (ifseqformula "124"))
                                        (builtin "One Step Simplification" (formula "83"))
                                       (rule "false_right" (formula "83"))
                                       (rule "sortsDisjointModuloNull" (formula "82"))
                                       (rule "replace_known_right" (formula "82") (term "1") (ifseqformula "123"))
                                        (builtin "One Step Simplification" (formula "82"))
                                       (rule "false_right" (formula "82"))
                                       (rule "unionEqualsEmpty" (formula "46"))
                                        (builtin "One Step Simplification" (formula "46"))
                                       (rule "andLeft" (formula "46"))
                                       (rule "notLeft" (formula "46"))
                                       (rule "notLeft" (formula "46"))
                                       (rule "eqSymm" (formula "82"))
                                       (rule "eqSymm" (formula "81"))
                                       (rule "sortsDisjointModuloNull" (formula "82"))
                                       (rule "replace_known_right" (formula "82") (term "1") (ifseqformula "123"))
                                        (builtin "One Step Simplification" (formula "82"))
                                       (rule "false_right" (formula "82"))
                                       (rule "sortsDisjointModuloNull" (formula "81"))
                                       (rule "replace_known_right" (formula "81") (term "1") (ifseqformula "122"))
                                        (builtin "One Step Simplification" (formula "81"))
                                       (rule "false_right" (formula "81"))
                                       (rule "unionEqualsEmpty" (formula "35"))
                                        (builtin "One Step Simplification" (formula "35"))
                                       (rule "andLeft" (formula "35"))
                                       (rule "notLeft" (formula "36"))
                                       (rule "notLeft" (formula "35"))
                                       (rule "eqSymm" (formula "81"))
                                       (rule "eqSymm" (formula "80"))
                                       (rule "unionEqualsEmpty" (formula "35"))
                                        (builtin "One Step Simplification" (formula "35"))
                                       (rule "andLeft" (formula "35"))
                                       (rule "notLeft" (formula "36"))
                                       (rule "notLeft" (formula "35"))
                                       (rule "eqSymm" (formula "80"))
                                       (rule "eqSymm" (formula "79"))
                                       (rule "unionEqualsEmpty" (formula "34"))
                                        (builtin "One Step Simplification" (formula "34"))
                                       (rule "andLeft" (formula "34"))
                                       (rule "notLeft" (formula "35"))
                                       (rule "notLeft" (formula "34"))
                                       (rule "eqSymm" (formula "79"))
                                       (rule "eqSymm" (formula "78"))
                                       (rule "unionEqualsEmpty" (formula "33"))
                                        (builtin "One Step Simplification" (formula "33"))
                                       (rule "andLeft" (formula "33"))
                                       (rule "notLeft" (formula "34"))
                                       (rule "notLeft" (formula "33"))
                                       (rule "eqSymm" (formula "78"))
                                       (rule "eqSymm" (formula "77"))
                                       (rule "commuteUnion_2" (formula "62") (term "0,1"))
                                       (rule "commuteUnion" (formula "62") (term "1,1,1"))
                                       (rule "commuteUnion" (formula "14") (term "1,1,0,1,0,0"))
                                       (rule "commuteUnion" (formula "14") (term "0,0,0,1,0,0"))
                                       (rule "commuteUnion" (formula "70") (term "0,0,1,0,2,1"))
                                       (rule "commuteUnion" (formula "70") (term "1,1,0,1,0,2,1"))
                                       (rule "commuteUnion" (formula "15") (term "1,1,0,1,0,0"))
                                       (rule "commuteUnion" (formula "15") (term "0,0,1,0,0"))
                                       (rule "commuteUnion" (formula "43") (term "0,0,1,0,1,0"))
                                       (rule "commuteUnion" (formula "43") (term "1,1,1,0,1,0"))
                                       (rule "commuteUnion" (formula "68") (term "1,1,0,1,0"))
                                       (rule "commuteUnion" (formula "68") (term "0,0,1,0"))
                                       (rule "commuteUnion_2" (formula "12") (term "0,0,1,0,2,0"))
                                       (rule "commuteUnion" (formula "12") (term "1,1,0,1,0,2,0"))
                                       (rule "commuteUnion" (formula "13") (term "0,0,0,1,0,0"))
                                       (rule "commuteUnion" (formula "13") (term "1,1,0,1,0,0"))
                                       (rule "commuteUnion_2" (formula "68") (term "0,0,1,0,0"))
                                       (rule "commuteUnion" (formula "68") (term "1,1,0,1,0,0"))
                                       (rule "commuteUnion" (formula "16") (term "1,1,0,1,0,0,0,1"))
                                       (rule "commuteUnion" (formula "16") (term "0,0,1,0,0,0,1"))
                                       (rule "commuteUnion" (formula "62") (term "0,0,1"))
                                       (rule "commuteUnion_2" (formula "14") (term "0,0,1,0,0"))
                                       (rule "commuteUnion" (formula "70") (term "1,0,0,1,0,2,1"))
                                       (rule "commuteUnion" (formula "15") (term "1,0,0,1,0,0"))
                                       (rule "commuteUnion_2" (formula "43") (term "0,1,0,1,0"))
                                       (rule "commuteUnion" (formula "68") (term "1,0,0,1,0"))
                                       (rule "commuteUnion" (formula "12") (term "0,0,0,1,0,2,0"))
                                       (rule "commuteUnion_2" (formula "13") (term "0,0,1,0,0"))
                                       (rule "commuteUnion" (formula "68") (term "0,0,0,1,0,0"))
                                       (rule "commuteUnion" (formula "16") (term "1,0,0,1,0,0,0,1"))
                                       (rule "commuteUnion_2" (formula "62") (term "0,1"))
                                       (rule "commuteUnion_2" (formula "14") (term "0,1,0,0"))
                                       (rule "commuteUnion" (formula "43") (term "0,0,1,0,1,0"))
                                       (rule "commuteUnion_2" (formula "12") (term "0,0,1,0,2,0"))
                                       (rule "commuteUnion" (formula "13") (term "0,0,0,1,0,0"))
                                       (rule "commuteUnion_2" (formula "68") (term "0,0,1,0,0"))
                                       (rule "commuteUnion_2" (formula "62") (term "1"))
                                       (rule "commuteUnion" (formula "14") (term "0,0,0,1,0,0"))
                                       (rule "commuteUnion_2" (formula "43") (term "1,0,1,0"))
                                       (rule "commuteUnion_2" (formula "12") (term "0,1,0,2,0"))
                                       (rule "commuteUnion_2" (formula "13") (term "0,1,0,0"))
                                       (rule "commuteUnion_2" (formula "68") (term "0,1,0,0"))
                                       (rule "Definition_axiom_for_smallBucketsInRangeSorted_in_de_wiesler_Sorter" (formula "73") (term "0") (inst "b=b_1"))
                                        (builtin "One Step Simplification" (formula "73"))
                                       (rule "expand_inInt" (formula "73") (term "1,0,0"))
                                       (rule "replace_int_MAX" (formula "73") (term "1,0,1,0,0"))
                                       (rule "replace_int_MIN" (formula "73") (term "0,1,1,0,0"))
                                       (rule "translateJavaAddInt" (formula "73") (term "0,2,5,0,1,0"))
                                       (rule "polySimp_addComm0" (formula "73") (term "0,2,5,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "73") (term "1,0,0,0"))
                                       (rule "polySimp_mulAssoc" (formula "73") (term "1,0,0,1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "73") (term "0,1,0,0,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "73") (term "1,0,0,1,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "73") (term "0,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "73") (term "1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "73") (term "1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "73") (term "1,1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "73") (term "1,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "73") (term "1,1,1,0,0,0"))
                                       (rule "mul_literals" (formula "73") (term "0,1,1,0,0,0"))
                                       (rule "Definition_axiom_for_equalityBucketsInRange_in_de_wiesler_Sorter" (formula "74") (term "0,1") (inst "b=b_1"))
                                        (builtin "One Step Simplification" (formula "74"))
                                       (rule "expand_inInt" (formula "74") (term "1,0,0,1"))
                                       (rule "replace_int_MAX" (formula "74") (term "1,0,1,0,0,1"))
                                       (rule "replace_int_MIN" (formula "74") (term "0,1,1,0,0,1"))
                                       (rule "translateJavaAddInt" (formula "74") (term "2,0,1,0,1"))
                                       (rule "translateJavaAddInt" (formula "74") (term "3,0,1,0,1"))
                                       (rule "translateJavaMod" (formula "74") (term "0,1,0,0,0,1"))
                                       (rule "translateJavaAddInt" (formula "74") (term "0,2,1,3,0,1,0,1"))
                                       (rule "polySimp_addComm0" (formula "74") (term "0,2,1,3,0,1,0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "74") (term "1,0,0,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "74") (term "1,0,0,1,0,0,0,0,1"))
                                       (rule "mul_literals" (formula "74") (term "0,1,0,0,1,0,0,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "74") (term "1,1,0,0,1,0,0,0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "74") (term "0,0,1,0,0,0,0,1"))
                                       (rule "add_literals" (formula "74") (term "0,0,0,1,0,0,0,0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "74") (term "0,0,0,0,0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "74") (term "1,1,0,0,1"))
                                       (rule "jmod_axiom" (formula "74") (term "0,1,0,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "74") (term "1,0,1,0,0,0,1"))
                                       (rule "polySimp_homoEq" (formula "74") (term "1,0,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "74") (term "1,0,1,0,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "74") (term "1,0,1,0,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "74") (term "1,1,0,1,0,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "74") (term "0,1,0,1,0,0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "74") (term "0,1,0,0,0,1"))
                                       (rule "polySimp_sepPosMonomial" (formula "74") (term "1,0,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "74") (term "1,1,0,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "74") (term "1,1,0,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "74") (term "1,1,1,0,0,0,1"))
                                       (rule "mul_literals" (formula "74") (term "0,1,1,0,0,0,1"))
                                       (rule "polySimp_elimOne" (formula "74") (term "1,1,1,0,0,0,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "74") (term "1,0,0,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "74") (term "1,1,0,0,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "74") (term "1,1,0,0,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "74") (term "1,1,1,0,0,0,0,1"))
                                       (rule "mul_literals" (formula "74") (term "0,1,1,0,0,0,0,1"))
                                       (rule "Definition_axiom_for_allBucketsInRangeSorted_in_de_wiesler_Sorter" (formula "71") (term "0") (inst "b=b_1"))
                                        (builtin "One Step Simplification" (formula "71"))
                                       (rule "expand_inInt" (formula "71") (term "1,0,0"))
                                       (rule "replace_int_MAX" (formula "71") (term "1,0,1,0,0"))
                                       (rule "replace_int_MIN" (formula "71") (term "0,1,1,0,0"))
                                       (rule "translateJavaAddInt" (formula "71") (term "0,2,1,3,0,1,0"))
                                       (rule "translateJavaAddInt" (formula "71") (term "2,0,1,0"))
                                       (rule "translateJavaAddInt" (formula "71") (term "3,0,1,0"))
                                       (rule "polySimp_addComm0" (formula "71") (term "0,2,1,3,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "71") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "71") (term "1,0,0,1,0,0,0"))
                                       (rule "mul_literals" (formula "71") (term "0,1,0,0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "71") (term "0,0,1,0,0,0"))
                                       (rule "add_literals" (formula "71") (term "0,0,0,1,0,0,0"))
                                       (rule "add_zero_left" (formula "71") (term "0,0,1,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "71") (term "0,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "71") (term "1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "71") (term "1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "71") (term "1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "71") (term "1,1,0,0,0"))
                                       (rule "Free_class_invariant_axiom_for_de_wiesler_Storage" (formula "32"))
                                        (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "54")) (ifInst ""  (formula "55")) (ifInst ""  (formula "58")) (ifInst ""  (formula "59")) (ifInst ""  (formula "60")) (ifInst ""  (formula "61")))
                                       (rule "andLeft" (formula "32"))
                                       (rule "andLeft" (formula "32"))
                                       (rule "andLeft" (formula "34"))
                                       (rule "andLeft" (formula "32"))
                                       (rule "andLeft" (formula "35"))
                                       (rule "andLeft" (formula "35"))
                                       (rule "andLeft" (formula "35"))
                                       (rule "andLeft" (formula "35"))
                                       (rule "andLeft" (formula "35"))
                                       (rule "andLeft" (formula "35"))
                                       (rule "andLeft" (formula "35"))
                                       (rule "andLeft" (formula "35"))
                                       (rule "andLeft" (formula "35"))
                                       (rule "andLeft" (formula "35"))
                                       (rule "andLeft" (formula "35"))
                                       (rule "andLeft" (formula "35"))
                                       (rule "andLeft" (formula "35"))
                                       (rule "andLeft" (formula "35"))
                                       (rule "andLeft" (formula "35"))
                                       (rule "andLeft" (formula "35"))
                                       (rule "andLeft" (formula "35"))
                                       (rule "andLeft" (formula "35"))
                                       (rule "andLeft" (formula "35"))
                                       (rule "andLeft" (formula "35"))
                                       (rule "andLeft" (formula "35"))
                                       (rule "andLeft" (formula "35"))
                                       (rule "andLeft" (formula "35"))
                                       (rule "andLeft" (formula "35"))
                                       (rule "andLeft" (formula "35"))
                                       (rule "andLeft" (formula "35"))
                                       (rule "translateJavaMulInt" (formula "33") (term "1"))
                                       (rule "mul_literals" (formula "33") (term "1"))
                                       (rule "translateJavaMulInt" (formula "32") (term "1"))
                                       (rule "mul_literals" (formula "32") (term "1"))
                                       (rule "disjointDefinition" (formula "60"))
                                        (builtin "One Step Simplification" (formula "60") (ifInst ""  (formula "148")))
                                       (rule "true_left" (formula "60"))
                                       (rule "disjointDefinition" (formula "59"))
                                        (builtin "One Step Simplification" (formula "59") (ifInst ""  (formula "146")))
                                       (rule "true_left" (formula "59"))
                                       (rule "disjointDefinition" (formula "58"))
                                        (builtin "One Step Simplification" (formula "58"))
                                       (rule "notLeft" (formula "58"))
                                       (rule "eqSymm" (formula "102"))
                                       (rule "disjointDefinition" (formula "57"))
                                        (builtin "One Step Simplification" (formula "57"))
                                       (rule "notLeft" (formula "57"))
                                       (rule "eqSymm" (formula "101"))
                                       (rule "disjointDefinition" (formula "56"))
                                        (builtin "One Step Simplification" (formula "56"))
                                       (rule "notLeft" (formula "56"))
                                       (rule "eqSymm" (formula "100"))
                                       (rule "disjointDefinition" (formula "55"))
                                        (builtin "One Step Simplification" (formula "55"))
                                       (rule "notLeft" (formula "55"))
                                       (rule "eqSymm" (formula "99"))
                                       (rule "disjointDefinition" (formula "54"))
                                        (builtin "One Step Simplification" (formula "54"))
                                       (rule "notLeft" (formula "54"))
                                       (rule "eqSymm" (formula "98"))
                                       (rule "disjointDefinition" (formula "53"))
                                        (builtin "One Step Simplification" (formula "53"))
                                       (rule "notLeft" (formula "53"))
                                       (rule "eqSymm" (formula "97"))
                                       (rule "disjointDefinition" (formula "52"))
                                        (builtin "One Step Simplification" (formula "52"))
                                       (rule "notLeft" (formula "52"))
                                       (rule "eqSymm" (formula "96"))
                                       (rule "disjointDefinition" (formula "51"))
                                        (builtin "One Step Simplification" (formula "51"))
                                       (rule "notLeft" (formula "51"))
                                       (rule "eqSymm" (formula "95"))
                                       (rule "disjointDefinition" (formula "50"))
                                        (builtin "One Step Simplification" (formula "50"))
                                       (rule "notLeft" (formula "50"))
                                       (rule "eqSymm" (formula "94"))
                                       (rule "disjointDefinition" (formula "49"))
                                        (builtin "One Step Simplification" (formula "49"))
                                       (rule "notLeft" (formula "49"))
                                       (rule "eqSymm" (formula "93"))
                                       (rule "disjointDefinition" (formula "48"))
                                        (builtin "One Step Simplification" (formula "48"))
                                       (rule "notLeft" (formula "48"))
                                       (rule "eqSymm" (formula "92"))
                                       (rule "disjointDefinition" (formula "47"))
                                        (builtin "One Step Simplification" (formula "47"))
                                       (rule "notLeft" (formula "47"))
                                       (rule "eqSymm" (formula "91"))
                                       (rule "disjointDefinition" (formula "46"))
                                        (builtin "One Step Simplification" (formula "46"))
                                       (rule "notLeft" (formula "46"))
                                       (rule "eqSymm" (formula "90"))
                                       (rule "disjointDefinition" (formula "45"))
                                        (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "118")))
                                       (rule "true_left" (formula "45"))
                                       (rule "disjointDefinition" (formula "44"))
                                        (builtin "One Step Simplification" (formula "44"))
                                       (rule "notLeft" (formula "44"))
                                       (rule "eqSymm" (formula "88"))
                                       (rule "disjointDefinition" (formula "43"))
                                        (builtin "One Step Simplification" (formula "43"))
                                       (rule "notLeft" (formula "43"))
                                       (rule "eqSymm" (formula "87"))
                                       (rule "disjointDefinition" (formula "42"))
                                        (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "112")))
                                       (rule "true_left" (formula "42"))
                                       (rule "disjointDefinition" (formula "41"))
                                        (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "110")))
                                       (rule "true_left" (formula "41"))
                                       (rule "disjointDefinition" (formula "40"))
                                        (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "108")))
                                       (rule "true_left" (formula "40"))
                                       (rule "disjointDefinition" (formula "39"))
                                        (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "106")))
                                       (rule "true_left" (formula "39"))
                                       (rule "disjointDefinition" (formula "38"))
                                        (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "104")))
                                       (rule "true_left" (formula "38"))
                                       (rule "disjointDefinition" (formula "37"))
                                        (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "102")))
                                       (rule "true_left" (formula "37"))
                                       (rule "disjointDefinition" (formula "36"))
                                        (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "100")))
                                       (rule "true_left" (formula "36"))
                                       (rule "disjointDefinition" (formula "35"))
                                        (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "98")))
                                       (rule "true_left" (formula "35"))
                                       (rule "disjointDefinition" (formula "33"))
                                        (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "96")))
                                       (rule "true_left" (formula "33"))
                                       (rule "disjointDefinition" (formula "33"))
                                        (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "94")))
                                       (rule "true_left" (formula "33"))
                                       (rule "applyEq" (formula "32") (term "0") (ifseqformula "62"))
                                       (rule "eqSymm" (formula "32"))
                                       (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "23"))
                                       (rule "andLeft" (formula "23"))
                                       (rule "notLeft" (formula "24"))
                                       (rule "andLeft" (formula "23"))
                                       (rule "notLeft" (formula "24"))
                                       (rule "andLeft" (formula "23"))
                                       (rule "andLeft" (formula "23"))
                                       (rule "notLeft" (formula "25"))
                                       (rule "andLeft" (formula "23"))
                                       (rule "notLeft" (formula "25"))
                                       (rule "notLeft" (formula "24"))
                                       (rule "andLeft" (formula "23"))
                                       (rule "notLeft" (formula "24"))
                                       (rule "andLeft" (formula "23"))
                                       (rule "notLeft" (formula "23"))
                                       (rule "notLeft" (formula "23"))
                                       (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "62"))
                                       (rule "andLeft" (formula "62"))
                                       (rule "andLeft" (formula "62"))
                                       (rule "notLeft" (formula "64"))
                                       (rule "andLeft" (formula "62"))
                                       (rule "notLeft" (formula "64"))
                                       (rule "andLeft" (formula "62"))
                                       (rule "notLeft" (formula "64"))
                                       (rule "andLeft" (formula "62"))
                                       (rule "notLeft" (formula "64"))
                                       (rule "andLeft" (formula "62"))
                                       (rule "notLeft" (formula "64"))
                                       (rule "andLeft" (formula "62"))
                                       (rule "notLeft" (formula "64"))
                                       (rule "notLeft" (formula "62"))
                                       (rule "notLeft" (formula "62"))
                                       (rule "Free_class_invariant_axiom_for_de_wiesler_Storage" (formula "73"))
                                        (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "53")) (ifInst ""  (formula "54")) (ifInst ""  (formula "57")) (ifInst ""  (formula "58")) (ifInst ""  (formula "59")) (ifInst ""  (formula "60")))
                                       (rule "andLeft" (formula "73"))
                                       (rule "andLeft" (formula "73"))
                                       (rule "andLeft" (formula "75"))
                                       (rule "andLeft" (formula "73"))
                                       (rule "andLeft" (formula "76"))
                                       (rule "andLeft" (formula "76"))
                                       (rule "andLeft" (formula "76"))
                                       (rule "andLeft" (formula "76"))
                                       (rule "andLeft" (formula "76"))
                                       (rule "andLeft" (formula "76"))
                                       (rule "andLeft" (formula "76"))
                                       (rule "andLeft" (formula "76"))
                                       (rule "andLeft" (formula "76"))
                                       (rule "andLeft" (formula "76"))
                                       (rule "andLeft" (formula "76"))
                                       (rule "andLeft" (formula "76"))
                                       (rule "andLeft" (formula "76"))
                                       (rule "andLeft" (formula "76"))
                                       (rule "andLeft" (formula "76"))
                                       (rule "andLeft" (formula "76"))
                                       (rule "andLeft" (formula "76"))
                                       (rule "andLeft" (formula "76"))
                                       (rule "andLeft" (formula "76"))
                                       (rule "andLeft" (formula "76"))
                                       (rule "andLeft" (formula "76"))
                                       (rule "andLeft" (formula "76"))
                                       (rule "andLeft" (formula "76"))
                                       (rule "andLeft" (formula "76"))
                                       (rule "andLeft" (formula "76"))
                                       (rule "andLeft" (formula "76"))
                                       (rule "translateJavaMulInt" (formula "73") (term "1"))
                                       (rule "mul_literals" (formula "73") (term "1"))
                                       (rule "translateJavaMulInt" (formula "73") (term "1"))
                                       (rule "mul_literals" (formula "73") (term "1"))
                                       (rule "disjointDefinition" (formula "101"))
                                        (builtin "One Step Simplification" (formula "101") (ifInst ""  (formula "154")))
                                       (rule "true_left" (formula "101"))
                                       (rule "disjointDefinition" (formula "100"))
                                        (builtin "One Step Simplification" (formula "100") (ifInst ""  (formula "152")))
                                       (rule "true_left" (formula "100"))
                                       (rule "disjointDefinition" (formula "99"))
                                        (builtin "One Step Simplification" (formula "99"))
                                       (rule "notLeft" (formula "99"))
                                       (rule "eqSymm" (formula "100"))
                                       (rule "disjointDefinition" (formula "98"))
                                        (builtin "One Step Simplification" (formula "98"))
                                       (rule "notLeft" (formula "98"))
                                       (rule "eqSymm" (formula "99"))
                                       (rule "disjointDefinition" (formula "97"))
                                        (builtin "One Step Simplification" (formula "97"))
                                       (rule "notLeft" (formula "97"))
                                       (rule "eqSymm" (formula "98"))
                                       (rule "disjointDefinition" (formula "96"))
                                        (builtin "One Step Simplification" (formula "96"))
                                       (rule "notLeft" (formula "96"))
                                       (rule "eqSymm" (formula "97"))
                                       (rule "disjointDefinition" (formula "95"))
                                        (builtin "One Step Simplification" (formula "95"))
                                       (rule "notLeft" (formula "95"))
                                       (rule "eqSymm" (formula "96"))
                                       (rule "disjointDefinition" (formula "94"))
                                        (builtin "One Step Simplification" (formula "94"))
                                       (rule "notLeft" (formula "94"))
                                       (rule "eqSymm" (formula "95"))
                                       (rule "disjointDefinition" (formula "93"))
                                        (builtin "One Step Simplification" (formula "93"))
                                       (rule "notLeft" (formula "93"))
                                       (rule "eqSymm" (formula "94"))
                                       (rule "disjointDefinition" (formula "92"))
                                        (builtin "One Step Simplification" (formula "92"))
                                       (rule "notLeft" (formula "92"))
                                       (rule "eqSymm" (formula "93"))
                                       (rule "disjointDefinition" (formula "91"))
                                        (builtin "One Step Simplification" (formula "91"))
                                       (rule "notLeft" (formula "91"))
                                       (rule "eqSymm" (formula "92"))
                                       (rule "disjointDefinition" (formula "90"))
                                        (builtin "One Step Simplification" (formula "90"))
                                       (rule "notLeft" (formula "90"))
                                       (rule "eqSymm" (formula "91"))
                                       (rule "disjointDefinition" (formula "89"))
                                        (builtin "One Step Simplification" (formula "89"))
                                       (rule "notLeft" (formula "89"))
                                       (rule "eqSymm" (formula "90"))
                                       (rule "disjointDefinition" (formula "88"))
                                        (builtin "One Step Simplification" (formula "88"))
                                       (rule "notLeft" (formula "88"))
                                       (rule "eqSymm" (formula "89"))
                                       (rule "disjointDefinition" (formula "87"))
                                        (builtin "One Step Simplification" (formula "87"))
                                       (rule "notLeft" (formula "87"))
                                       (rule "eqSymm" (formula "88"))
                                       (rule "disjointDefinition" (formula "86"))
                                        (builtin "One Step Simplification" (formula "86") (ifInst ""  (formula "124")))
                                       (rule "true_left" (formula "86"))
                                       (rule "disjointDefinition" (formula "85"))
                                        (builtin "One Step Simplification" (formula "85"))
                                       (rule "notLeft" (formula "85"))
                                       (rule "eqSymm" (formula "86"))
                                       (rule "disjointDefinition" (formula "84"))
                                        (builtin "One Step Simplification" (formula "84"))
                                       (rule "notLeft" (formula "84"))
                                       (rule "eqSymm" (formula "85"))
                                       (rule "disjointDefinition" (formula "83"))
                                        (builtin "One Step Simplification" (formula "83") (ifInst ""  (formula "118")))
                                       (rule "true_left" (formula "83"))
                                       (rule "disjointDefinition" (formula "82"))
                                        (builtin "One Step Simplification" (formula "82") (ifInst ""  (formula "116")))
                                       (rule "true_left" (formula "82"))
                                       (rule "disjointDefinition" (formula "81"))
                                        (builtin "One Step Simplification" (formula "81") (ifInst ""  (formula "114")))
                                       (rule "true_left" (formula "81"))
                                       (rule "disjointDefinition" (formula "80"))
                                        (builtin "One Step Simplification" (formula "80") (ifInst ""  (formula "112")))
                                       (rule "true_left" (formula "80"))
                                       (rule "disjointDefinition" (formula "79"))
                                        (builtin "One Step Simplification" (formula "79") (ifInst ""  (formula "110")))
                                       (rule "true_left" (formula "79"))
                                       (rule "disjointDefinition" (formula "78"))
                                        (builtin "One Step Simplification" (formula "78") (ifInst ""  (formula "108")))
                                       (rule "true_left" (formula "78"))
                                       (rule "disjointDefinition" (formula "77"))
                                        (builtin "One Step Simplification" (formula "77") (ifInst ""  (formula "106")))
                                       (rule "true_left" (formula "77"))
                                       (rule "disjointDefinition" (formula "76"))
                                        (builtin "One Step Simplification" (formula "76") (ifInst ""  (formula "104")))
                                       (rule "true_left" (formula "76"))
                                       (rule "disjointDefinition" (formula "74"))
                                        (builtin "One Step Simplification" (formula "74") (ifInst ""  (formula "102")))
                                       (rule "true_left" (formula "74"))
                                       (rule "disjointDefinition" (formula "74"))
                                        (builtin "One Step Simplification" (formula "74") (ifInst ""  (formula "100")))
                                       (rule "true_left" (formula "74"))
                                       (rule "applyEq" (formula "73") (term "1") (ifseqformula "31"))
                                       (rule "Definition_axiom_for_notAllValuesInOneBucket_in_de_wiesler_Sorter" (formula "52") (term "0") (inst "b=b_1"))
                                        (builtin "One Step Simplification" (formula "52"))
                                       (rule "expand_inInt" (formula "52") (term "1,0,0"))
                                       (rule "replace_int_MIN" (formula "52") (term "0,1,1,0,0"))
                                       (rule "replace_int_MAX" (formula "52") (term "1,0,1,0,0"))
                                       (rule "translateJavaAddInt" (formula "52") (term "0,2,0,0,1,0"))
                                       (rule "translateJavaSubInt" (formula "52") (term "0,1,0"))
                                       (rule "polySimp_elimSub" (formula "52") (term "0,1,0"))
                                       (rule "polySimp_addComm0" (formula "52") (term "0,1,0"))
                                       (rule "polySimp_addComm0" (formula "52") (term "0,2,1,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "52") (term "1,0,0,0"))
                                       (rule "polySimp_mulAssoc" (formula "52") (term "1,0,0,1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "52") (term "0,1,0,0,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "52") (term "1,0,0,1,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "52") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "52") (term "1,0,0,1,0"))
                                       (rule "polySimp_mulAssoc" (formula "52") (term "0,1,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "52") (term "0,0,1,0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "52") (term "0,1,0,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "52") (term "0,1,0,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "52") (term "0,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "52") (term "0,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "52") (term "0,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "52") (term "1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "52") (term "1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "52") (term "1,1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "52") (term "1,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "52") (term "1,1,1,0,0,0"))
                                       (rule "mul_literals" (formula "52") (term "0,1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "52") (term "1,0"))
                                       (rule "polySimp_mulComm0" (formula "52") (term "1,1,0"))
                                       (rule "polySimp_rightDist" (formula "52") (term "1,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "52") (term "1,1,1,0"))
                                       (rule "polySimp_elimOne" (formula "52") (term "1,1,1,0"))
                                       (rule "polySimp_rightDist" (formula "52") (term "0,1,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "52") (term "1,0,1,1,0"))
                                       (rule "polySimp_elimOne" (formula "52") (term "1,0,1,1,0"))
                                       (rule "polySimp_rightDist" (formula "52") (term "0,0,1,1,0"))
                                       (rule "mul_literals" (formula "52") (term "0,0,0,1,1,0"))
                                       (rule "Definition_axiom_for_smallBucketsInRangeSorted_in_de_wiesler_Sorter" (formula "47") (term "0") (inst "b=b_1"))
                                        (builtin "One Step Simplification" (formula "47"))
                                       (rule "expand_inInt" (formula "47") (term "1,0,0"))
                                       (rule "replace_int_MIN" (formula "47") (term "0,1,1,0,0"))
                                       (rule "replace_int_MAX" (formula "47") (term "1,0,1,0,0"))
                                       (rule "translateJavaAddInt" (formula "47") (term "0,2,5,0,1,0"))
                                       (rule "polySimp_addComm0" (formula "47") (term "0,2,5,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "47") (term "1,0,0,0"))
                                       (rule "polySimp_mulAssoc" (formula "47") (term "1,0,0,1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "47") (term "0,1,0,0,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "47") (term "1,0,0,1,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "47") (term "0,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "47") (term "1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "47") (term "1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "47") (term "1,1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "47") (term "1,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "47") (term "1,1,1,0,0,0"))
                                       (rule "mul_literals" (formula "47") (term "0,1,1,0,0,0"))
                                       (rule "Definition_axiom_for_allBucketsPartitioned_in_de_wiesler_Sorter" (formula "70") (term "0") (inst "b=b_1"))
                                        (builtin "One Step Simplification" (formula "70"))
                                       (rule "expand_inInt" (formula "70") (term "1,0,0"))
                                       (rule "replace_int_MIN" (formula "70") (term "0,1,1,0,0"))
                                       (rule "replace_int_MAX" (formula "70") (term "1,0,1,0,0"))
                                       (rule "translateJavaAddInt" (formula "70") (term "0,2,5,0,1,0"))
                                       (rule "polySimp_addComm0" (formula "70") (term "0,2,5,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "70") (term "1,0,0,0"))
                                       (rule "polySimp_mulAssoc" (formula "70") (term "1,0,0,1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "70") (term "0,1,0,0,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "70") (term "1,0,0,1,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "70") (term "0,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "70") (term "1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "70") (term "1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "70") (term "1,1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "70") (term "1,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "70") (term "1,1,1,0,0,0"))
                                       (rule "mul_literals" (formula "70") (term "0,1,1,0,0,0"))
                                       (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "73"))
                                       (rule "andLeft" (formula "73"))
                                       (rule "notLeft" (formula "74"))
                                       (rule "andLeft" (formula "73"))
                                       (rule "andLeft" (formula "73"))
                                       (rule "notLeft" (formula "75"))
                                       (rule "andLeft" (formula "73"))
                                       (rule "notLeft" (formula "75"))
                                       (rule "andLeft" (formula "73"))
                                       (rule "notLeft" (formula "75"))
                                       (rule "andLeft" (formula "73"))
                                       (rule "notLeft" (formula "75"))
                                       (rule "andLeft" (formula "73"))
                                       (rule "notLeft" (formula "75"))
                                       (rule "notLeft" (formula "73"))
                                       (rule "notLeft" (formula "73"))
                                       (rule "Definition_axiom_for_isValidBucketStarts_in_de_wiesler_Functions" (formula "45") (term "0"))
                                        (builtin "One Step Simplification" (formula "45"))
                                       (rule "andLeft" (formula "45"))
                                       (rule "andLeft" (formula "45"))
                                       (rule "andLeft" (formula "45"))
                                       (rule "translateJavaAddInt" (formula "47") (term "3,0"))
                                       (rule "translateJavaAddInt" (formula "46") (term "0"))
                                       (rule "polySimp_addComm0" (formula "47") (term "3,0"))
                                       (rule "polySimp_addComm0" (formula "46") (term "0"))
                                       (rule "inEqSimp_commuteLeq" (formula "45"))
                                       (rule "inEqSimp_commuteLeq" (formula "46"))
                                       (rule "applyEq" (formula "46") (term "0") (ifseqformula "35"))
                                       (rule "inEqSimp_homoInEq1" (formula "46"))
                                       (rule "mul_literals" (formula "46") (term "1,0"))
                                       (rule "polySimp_addComm1" (formula "46") (term "0"))
                                       (rule "add_literals" (formula "46") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "46"))
                                       (rule "mul_literals" (formula "46") (term "1"))
                                       (rule "inEqSimp_subsumption6" (formula "45") (ifseqformula "3"))
                                       (rule "mul_literals" (formula "45") (term "1,1,0"))
                                       (rule "greater_literals" (formula "45") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "45"))
                                       (rule "leq_literals" (formula "45") (term "0"))
                                        (builtin "One Step Simplification" (formula "45"))
                                       (rule "true_left" (formula "45"))
                                       (rule "elimGcdLeq_antec" (formula "45") (inst "elimGcdRightDiv=Z(6(5(2(#))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                                       (rule "neg_literal" (formula "45") (term "0,0,0,0,0,1,0"))
                                       (rule "mul_literals" (formula "45") (term "0,1,0,0,0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "45") (term "1,0,1,0"))
                                       (rule "leq_literals" (formula "45") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "45"))
                                       (rule "mul_literals" (formula "45") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_addLiterals" (formula "45") (term "0,0,0,0"))
                                       (rule "add_zero_right" (formula "45") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "45") (term "0,0"))
                                       (rule "add_literals" (formula "45") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "45") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "45") (term "0,0"))
                                       (rule "qeq_literals" (formula "45") (term "0"))
                                        (builtin "One Step Simplification" (formula "45"))
                                       (rule "inEqSimp_subsumption0" (formula "66") (ifseqformula "45"))
                                       (rule "leq_literals" (formula "66") (term "0"))
                                        (builtin "One Step Simplification" (formula "66"))
                                       (rule "true_left" (formula "66"))
                                       (rule "pullOutSelect" (formula "47") (term "0") (inst "selectSK=arr_1"))
                                       (rule "simplifySelectOfAnonEQ" (formula "47") (ifseqformula "42"))
                                        (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "130")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "47") (term "0,0,1,0,0") (ifseqformula "33"))
                                       (rule "replace_known_left" (formula "47") (term "1,0,0,1,0,0") (ifseqformula "34"))
                                        (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "129")))
                                       (rule "applyEqRigid" (formula "47") (term "1") (ifseqformula "48"))
                                       (rule "ifEqualsInteger" (formula "47"))
                                       (rule "elementOfUnion" (formula "47") (term "0,0"))
                                       (rule "elementOfArrayRangeConcrete" (formula "47") (term "1,0,0"))
                                       (rule "eqSymm" (formula "47") (term "0,0,1,0,0"))
                                       (rule "replace_known_right" (formula "47") (term "0,0,1,0,0") (ifseqformula "128"))
                                        (builtin "One Step Simplification" (formula "47"))
                                       (rule "elementOfUnion" (formula "47") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "47"))
                                       (rule "elementOfUnion" (formula "47") (term "0,0,1"))
                                       (rule "elementOfArrayRangeConcrete" (formula "47") (term "1,0,0,1"))
                                       (rule "eqSymm" (formula "47") (term "0,0,1,0,0,1"))
                                       (rule "replace_known_right" (formula "47") (term "0,0,1,0,0,1") (ifseqformula "128"))
                                        (builtin "One Step Simplification" (formula "47"))
                                       (rule "elementOfUnion" (formula "47") (term "0,0,1"))
                                        (builtin "One Step Simplification" (formula "47"))
                                       (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "45"))
                                       (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                                       (rule "mul_literals" (formula "7") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "7") (term "0"))
                                       (rule "add_literals" (formula "7") (term "0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "7"))
                                       (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                                       (rule "polySimp_elimOne" (formula "7") (term "0"))
                                       (rule "inEqSimp_subsumption0" (formula "6") (ifseqformula "7"))
                                       (rule "leq_literals" (formula "6") (term "0"))
                                        (builtin "One Step Simplification" (formula "6"))
                                       (rule "true_left" (formula "6"))
                                       (rule "Definition_axiom_for_equalityBucketsInRange_in_de_wiesler_Sorter" (formula "54") (term "0,1") (inst "b=b_1"))
                                        (builtin "One Step Simplification" (formula "54"))
                                       (rule "expand_inInt" (formula "54") (term "1,0,0,1"))
                                       (rule "replace_int_MAX" (formula "54") (term "1,0,1,0,0,1"))
                                       (rule "replace_int_MIN" (formula "54") (term "0,1,1,0,0,1"))
                                       (rule "translateJavaAddInt" (formula "54") (term "0,2,1,3,0,1,0,1"))
                                       (rule "translateJavaMod" (formula "54") (term "0,1,0,0,0,1"))
                                       (rule "translateJavaAddInt" (formula "54") (term "2,0,1,0,1"))
                                       (rule "translateJavaAddInt" (formula "54") (term "3,0,1,0,1"))
                                       (rule "polySimp_addComm0" (formula "54") (term "0,2,1,3,0,1,0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "54") (term "1,0,0,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "54") (term "1,0,0,1,0,0,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "54") (term "1,1,0,0,1,0,0,0,0,1"))
                                       (rule "mul_literals" (formula "54") (term "0,1,0,0,1,0,0,0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "54") (term "0,0,1,0,0,0,0,1"))
                                       (rule "add_literals" (formula "54") (term "0,0,0,1,0,0,0,0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "54") (term "0,0,0,0,0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "54") (term "1,1,0,0,1"))
                                       (rule "jmod_axiom" (formula "54") (term "0,1,0,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "54") (term "1,0,1,0,0,0,1"))
                                       (rule "polySimp_homoEq" (formula "54") (term "1,0,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "54") (term "1,0,1,0,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "54") (term "1,0,1,0,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "54") (term "1,1,0,1,0,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "54") (term "0,1,0,1,0,0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "54") (term "0,1,0,0,0,1"))
                                       (rule "polySimp_sepPosMonomial" (formula "54") (term "1,0,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "54") (term "1,1,0,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "54") (term "1,1,0,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "54") (term "1,1,1,0,0,0,1"))
                                       (rule "mul_literals" (formula "54") (term "0,1,1,0,0,0,1"))
                                       (rule "polySimp_elimOne" (formula "54") (term "1,1,1,0,0,0,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "54") (term "1,0,0,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "54") (term "1,1,0,0,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "54") (term "1,1,0,0,0,0,1"))
                                       (rule "mul_literals" (formula "54") (term "0,1,1,0,0,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "54") (term "1,1,1,0,0,0,0,1"))
                                       (rule "Definition_axiom_for_isBucketPartitioned_in_de_wiesler_Sorter" (formula "49") (term "0,1,0") (inst "i=i") (inst "j=j"))
                                        (builtin "One Step Simplification" (formula "49"))
                                       (rule "expand_inInt" (formula "49") (term "1,0,0,1,0"))
                                       (rule "expand_inInt" (formula "49") (term "1,0,0,1,0,1,0"))
                                       (rule "replace_int_MIN" (formula "49") (term "0,1,1,0,0,1,0"))
                                       (rule "replace_int_MAX" (formula "49") (term "1,0,1,0,0,1,0"))
                                       (rule "replace_int_MAX" (formula "49") (term "1,0,1,0,0,1,0,1,0"))
                                       (rule "replace_int_MIN" (formula "49") (term "0,1,1,0,0,1,0,1,0"))
                                       (rule "translateJavaAddInt" (formula "49") (term "0,0,0,0,0,1,0"))
                                       (rule "translateJavaAddInt" (formula "49") (term "0,0,0,0,0,1,0,1,0"))
                                       (rule "translateJavaAddInt" (formula "49") (term "1,1,0,0,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "49") (term "1,0,0,0,1,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "49") (term "1,0,0,1,0,0,0,1,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "49") (term "1,0,1,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "49") (term "1,0,0,1,0,1,0,1,0"))
                                       (rule "polySimp_addComm1" (formula "49") (term "0,1,0,1,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "49") (term "1,0,0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "49") (term "1,0,0,1,0,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "49") (term "0,1,0,0,1,0,0,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "49") (term "0,0,1,0,0,0,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "49") (term "1,1,0,0,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "49") (term "1,1,0,0,1,0,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "49") (term "0,0,0,0,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "49") (term "0,0,0,0,1,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "49") (term "1,0,0,0,1,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "49") (term "1,1,0,0,0,1,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "49") (term "1,1,0,0,0,1,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "49") (term "1,1,1,0,0,0,1,0,1,0"))
                                       (rule "mul_literals" (formula "49") (term "0,1,1,0,0,0,1,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "49") (term "1,1,1,0,0,0,1,0,1,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "49") (term "1,0,1,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "49") (term "0,1,0,1,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "49") (term "0,1,0,1,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "49") (term "1,0,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "49") (term "1,1,0,0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "49") (term "1,1,0,0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "49") (term "1,1,1,0,0,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "49") (term "1,1,1,0,0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "49") (term "0,1,1,0,0,0,1,0"))
                                       (rule "mul_literals" (formula "49") (term "0,0,1,1,0,0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "49") (term "1,0,1,1,0,0,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "49") (term "1,0,1,1,0,0,0,1,0"))
                                       (rule "commute_and" (formula "133"))
                                       (rule "commuteUnion" (formula "31") (term "0,0"))
                                       (rule "commuteUnion" (formula "31") (term "1,1,0"))
                                       (rule "nnf_imp2or" (formula "73") (term "0"))
                                       (rule "nnf_imp2or" (formula "74") (term "0,1"))
                                       (rule "nnf_imp2or" (formula "71") (term "0"))
                                       (rule "cut_direct" (formula "11") (term "0"))
                                       (branch "CUT: result_242.equal_buckets = TRUE TRUE"
                                           (builtin "One Step Simplification" (formula "12"))
                                          (rule "replace_known_left" (formula "17") (term "0") (ifseqformula "11"))
                                           (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "12")))
                                          (rule "replace_known_left" (formula "134") (term "0,0,0") (ifseqformula "11"))
                                           (builtin "One Step Simplification" (formula "134") (ifInst ""  (formula "11")))
                                          (rule "qeq_literals" (formula "134") (term "0"))
                                           (builtin "One Step Simplification" (formula "134"))
                                          (rule "leq_literals" (formula "134"))
                                          (rule "closeTrue" (formula "134"))
                                       )
                                       (branch "CUT: result_242.equal_buckets = TRUE FALSE"
                                           (builtin "One Step Simplification" (formula "11"))
                                          (rule "true_left" (formula "11"))
                                          (rule "replace_known_right" (formula "133") (term "0,0,1") (ifseqformula "74"))
                                           (builtin "One Step Simplification" (formula "133") (ifInst ""  (formula "74")))
                                          (rule "leq_literals" (formula "133") (term "1"))
                                           (builtin "One Step Simplification" (formula "133"))
                                          (rule "qeq_literals" (formula "133"))
                                          (rule "closeTrue" (formula "133"))
                                       )
                                    )
                                    (branch "Usage"
                                        (builtin "One Step Simplification" (formula "78"))
                                       (rule "translateJavaAddInt" (formula "78") (term "0,1,0"))
                                       (rule "assignmentAdditionInt" (formula "78") (term "1"))
                                       (branch "Overflow check"
                                           (builtin "One Step Simplification" (formula "78"))
                                          (rule "expand_inInt" (formula "78"))
                                          (rule "replace_int_MIN" (formula "78") (term "0,1"))
                                          (rule "replace_int_MAX" (formula "78") (term "1,0"))
                                          (rule "polySimp_addAssoc" (formula "78") (term "0,0"))
                                          (rule "polySimp_addComm0" (formula "78") (term "0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "78") (term "1,1"))
                                          (rule "polySimp_addComm0" (formula "78") (term "0,1,1"))
                                          (rule "inEqSimp_homoInEq0" (formula "78") (term "0"))
                                          (rule "polySimp_mulComm0" (formula "78") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "78") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "78") (term "0,1,0,0"))
                                          (rule "mul_literals" (formula "78") (term "0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "78") (term "0,0"))
                                          (rule "polySimp_addAssoc" (formula "78") (term "0,0,0"))
                                          (rule "add_literals" (formula "78") (term "0,0,0,0"))
                                          (rule "inEqSimp_homoInEq0" (formula "78") (term "1"))
                                          (rule "mul_literals" (formula "78") (term "1,0,1"))
                                          (rule "polySimp_addComm1" (formula "78") (term "0,1"))
                                          (rule "polySimp_addComm1" (formula "78") (term "0,0,1"))
                                          (rule "add_literals" (formula "78") (term "0,0,0,1"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "78") (term "0"))
                                          (rule "polySimp_mulLiterals" (formula "78") (term "0,0"))
                                          (rule "polySimp_elimOne" (formula "78") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "78") (term "1"))
                                          (rule "polySimp_mulComm0" (formula "78") (term "1,1"))
                                          (rule "polySimp_rightDist" (formula "78") (term "1,1"))
                                          (rule "mul_literals" (formula "78") (term "0,1,1"))
                                          (rule "Definition_axiom_for_equalityBucketsInRange_in_de_wiesler_Sorter" (formula "16") (term "0,0,1") (inst "b=b_1"))
                                           (builtin "One Step Simplification" (formula "16"))
                                          (rule "expand_inInt" (formula "16") (term "1,0,0,0,1"))
                                          (rule "replace_int_MIN" (formula "16") (term "0,1,1,0,0,0,1"))
                                          (rule "replace_int_MAX" (formula "16") (term "1,0,1,0,0,0,1"))
                                          (rule "translateJavaAddInt" (formula "16") (term "0,2,1,3,0,1,0,0,1"))
                                          (rule "translateJavaMod" (formula "16") (term "0,1,0,0,0,0,1"))
                                          (rule "translateJavaAddInt" (formula "16") (term "2,0,1,0,0,1"))
                                          (rule "translateJavaAddInt" (formula "16") (term "3,0,1,0,0,1"))
                                          (rule "polySimp_addComm0" (formula "16") (term "0,2,1,3,0,1,0,0,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,0,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0,0,0,0,1"))
                                          (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0,0,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,1,0,0,0,0,0,1"))
                                          (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0,0,0,0,1"))
                                          (rule "add_literals" (formula "16") (term "0,0,0,1,0,0,0,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,0,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "16") (term "1,1,0,0,0,1"))
                                          (rule "jmod_axiom" (formula "16") (term "0,1,0,0,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "16") (term "1,0,1,0,0,0,0,1"))
                                          (rule "polySimp_homoEq" (formula "16") (term "1,0,0,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "16") (term "1,0,1,0,0,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "16") (term "1,0,1,0,0,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,1,0,0,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "16") (term "0,1,0,1,0,0,0,0,1"))
                                          (rule "polySimp_addAssoc" (formula "16") (term "0,1,0,0,0,0,1"))
                                          (rule "polySimp_sepPosMonomial" (formula "16") (term "1,0,0,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,0,0,1"))
                                          (rule "mul_literals" (formula "16") (term "0,1,1,0,0,0,0,1"))
                                          (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0,0,0,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,0,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,0,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,0,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,0,0,0,1"))
                                          (rule "mul_literals" (formula "16") (term "0,1,1,0,0,0,0,0,1"))
                                          (rule "nnf_imp2or" (formula "16") (term "0,0,1"))
                                          (rule "nnf_notAnd" (formula "16") (term "0,0,0,1"))
                                          (rule "nnf_notAnd" (formula "16") (term "1,0,0,0,1"))
                                          (rule "inEqSimp_notGeq" (formula "16") (term "1,1,0,0,0,1"))
                                          (rule "mul_literals" (formula "16") (term "1,0,0,1,1,0,0,0,1"))
                                          (rule "add_literals" (formula "16") (term "0,0,1,1,0,0,0,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,1,0,0,0,1"))
                                          (rule "mul_literals" (formula "16") (term "1,1,1,0,0,0,1"))
                                          (rule "inEqSimp_notLeq" (formula "16") (term "0,1,0,0,0,1"))
                                          (rule "mul_literals" (formula "16") (term "1,0,0,0,1,0,0,0,1"))
                                          (rule "add_literals" (formula "16") (term "0,0,0,1,0,0,0,1"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0,1,0,0,0,1"))
                                          (rule "mul_literals" (formula "16") (term "1,0,1,0,0,0,1"))
                                          (rule "nnf_notAnd" (formula "16") (term "0,0,0,0,1"))
                                          (rule "nnf_notAnd" (formula "16") (term "0,0,0,0,0,1"))
                                          (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0,0,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0,0,0,0,1"))
                                          (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0,0,0,0,1"))
                                          (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,0,0,0,0,0,1"))
                                          (rule "add_literals" (formula "16") (term "0,0,0,0,0,0,0,0,0,1"))
                                          (rule "add_zero_left" (formula "16") (term "0,0,0,0,0,0,0,0,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,0,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,0,0,0,0,1"))
                                          (rule "polySimp_elimOne" (formula "16") (term "1,0,0,0,0,0,0,1"))
                                          (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0,0,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0,0,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,1,0,0,0,0,0,1"))
                                          (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0,0,0,0,1"))
                                          (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0,0,0,0,1"))
                                          (rule "add_literals" (formula "16") (term "0,0,0,1,0,0,0,0,0,1"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0,0,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,0,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,0,0,0,1"))
                                          (rule "mul_literals" (formula "16") (term "0,1,1,0,0,0,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,0,0,0,1"))
                                          (rule "Definition_axiom_for_smallBucketsInRangeSorted_in_de_wiesler_Sorter" (formula "15") (term "0") (inst "b=b_1"))
                                           (builtin "One Step Simplification" (formula "15"))
                                          (rule "expand_inInt" (formula "15") (term "1,0,0"))
                                          (rule "replace_int_MAX" (formula "15") (term "1,0,1,0,0"))
                                          (rule "replace_int_MIN" (formula "15") (term "0,1,1,0,0"))
                                          (rule "translateJavaAddInt" (formula "15") (term "0,2,5,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "15") (term "0,2,5,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,0"))
                                          (rule "polySimp_mulAssoc" (formula "15") (term "1,0,0,1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "15") (term "0,1,0,0,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,1,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "15") (term "1,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,0"))
                                          (rule "mul_literals" (formula "15") (term "0,1,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,0"))
                                          (rule "nnf_imp2or" (formula "15") (term "0"))
                                          (rule "nnf_notAnd" (formula "15") (term "0,0"))
                                          (rule "nnf_notAnd" (formula "15") (term "1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "15") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "15") (term "1,0,0,1,1,0,0"))
                                          (rule "add_literals" (formula "15") (term "0,0,1,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "15") (term "1,1,1,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "15") (term "0,1,0,0"))
                                          (rule "mul_literals" (formula "15") (term "1,0,0,0,1,0,0"))
                                          (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,1,0,0"))
                                          (rule "mul_literals" (formula "15") (term "1,0,1,0,0"))
                                          (rule "nnf_notAnd" (formula "15") (term "0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,1,0,0,0"))
                                          (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,0"))
                                          (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,0"))
                                          (rule "add_zero_left" (formula "15") (term "0,0,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0"))
                                          (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,0"))
                                          (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "23"))
                                          (rule "andLeft" (formula "23"))
                                          (rule "andLeft" (formula "23"))
                                          (rule "notLeft" (formula "25"))
                                          (rule "andLeft" (formula "23"))
                                          (rule "notLeft" (formula "25"))
                                          (rule "notLeft" (formula "24"))
                                          (rule "andLeft" (formula "23"))
                                          (rule "notLeft" (formula "24"))
                                          (rule "andLeft" (formula "23"))
                                          (rule "andLeft" (formula "23"))
                                          (rule "notLeft" (formula "25"))
                                          (rule "notLeft" (formula "24"))
                                          (rule "andLeft" (formula "23"))
                                          (rule "notLeft" (formula "23"))
                                          (rule "notLeft" (formula "23"))
                                          (rule "Definition_axiom_for_allBucketsPartitioned_in_de_wiesler_Sorter" (formula "14") (term "0") (inst "b=b_1"))
                                           (builtin "One Step Simplification" (formula "14"))
                                          (rule "expand_inInt" (formula "14") (term "1,0,0"))
                                          (rule "replace_int_MIN" (formula "14") (term "0,1,1,0,0"))
                                          (rule "replace_int_MAX" (formula "14") (term "1,0,1,0,0"))
                                          (rule "translateJavaAddInt" (formula "14") (term "0,2,5,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "14") (term "0,2,5,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,0"))
                                          (rule "polySimp_mulAssoc" (formula "14") (term "1,0,0,1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "14") (term "0,1,0,0,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,1,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "14") (term "1,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,0"))
                                          (rule "mul_literals" (formula "14") (term "0,1,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,0"))
                                          (rule "nnf_imp2or" (formula "14") (term "0"))
                                          (rule "nnf_notAnd" (formula "14") (term "0,0"))
                                          (rule "nnf_notAnd" (formula "14") (term "1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "14") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "14") (term "1,0,0,1,1,0,0"))
                                          (rule "add_literals" (formula "14") (term "0,0,1,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "14") (term "1,1,1,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "14") (term "0,1,0,0"))
                                          (rule "mul_literals" (formula "14") (term "1,0,0,0,1,0,0"))
                                          (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,1,0,0"))
                                          (rule "mul_literals" (formula "14") (term "1,0,1,0,0"))
                                          (rule "nnf_notAnd" (formula "14") (term "0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,1,0,0,0"))
                                          (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,0"))
                                          (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,0"))
                                          (rule "add_zero_left" (formula "14") (term "0,0,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,0"))
                                          (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "14") (term "0,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0"))
                                          (rule "mul_literals" (formula "14") (term "1,0,0,0,0"))
                                          (rule "Definition_axiom_for_allBucketsInRangeSorted_in_de_wiesler_Sorter" (formula "65") (term "0") (inst "b=b_1"))
                                           (builtin "One Step Simplification" (formula "65"))
                                          (rule "expand_inInt" (formula "65") (term "1,0,0"))
                                          (rule "replace_int_MAX" (formula "65") (term "1,0,1,0,0"))
                                          (rule "replace_int_MIN" (formula "65") (term "0,1,1,0,0"))
                                          (rule "translateJavaAddInt" (formula "65") (term "0,2,1,3,0,1,0"))
                                          (rule "translateJavaAddInt" (formula "65") (term "2,0,1,0"))
                                          (rule "translateJavaAddInt" (formula "65") (term "3,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "65") (term "0,2,1,3,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "65") (term "1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "65") (term "1,0,0,1,0,0,0"))
                                          (rule "mul_literals" (formula "65") (term "0,1,0,0,1,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "65") (term "0,0,1,0,0,0"))
                                          (rule "add_literals" (formula "65") (term "0,0,0,1,0,0,0"))
                                          (rule "add_zero_left" (formula "65") (term "0,0,1,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "65") (term "0,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "65") (term "1,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "65") (term "1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "65") (term "1,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "65") (term "1,1,0,0,0"))
                                          (rule "nnf_imp2or" (formula "65") (term "0"))
                                          (rule "Definition_axiom_for_notAllValuesInOneBucket_in_de_wiesler_Sorter" (formula "55") (term "0") (inst "b=b_1"))
                                           (builtin "One Step Simplification" (formula "55"))
                                          (rule "expand_inInt" (formula "55") (term "1,0,0"))
                                          (rule "replace_int_MAX" (formula "55") (term "1,0,1,0,0"))
                                          (rule "replace_int_MIN" (formula "55") (term "0,1,1,0,0"))
                                          (rule "translateJavaAddInt" (formula "55") (term "0,2,0,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "55") (term "0,1,0"))
                                          (rule "polySimp_elimSub" (formula "55") (term "0,1,0"))
                                          (rule "polySimp_addComm0" (formula "55") (term "0,1,0"))
                                          (rule "polySimp_addComm0" (formula "55") (term "0,2,1,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "55") (term "1,0,0,0"))
                                          (rule "polySimp_mulAssoc" (formula "55") (term "1,0,0,1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "55") (term "0,1,0,0,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "55") (term "1,0,0,1,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "55") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "55") (term "1,0,0,1,0"))
                                          (rule "polySimp_mulAssoc" (formula "55") (term "0,1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "55") (term "0,0,1,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "55") (term "0,1,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "55") (term "0,1,0,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "55") (term "0,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "55") (term "0,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "55") (term "0,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "55") (term "1,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "55") (term "1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "55") (term "1,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "55") (term "1,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "55") (term "1,1,1,0,0,0"))
                                          (rule "mul_literals" (formula "55") (term "0,1,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "55") (term "1,0"))
                                          (rule "polySimp_mulComm0" (formula "55") (term "1,1,0"))
                                          (rule "polySimp_rightDist" (formula "55") (term "1,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "55") (term "1,1,1,0"))
                                          (rule "polySimp_elimOne" (formula "55") (term "1,1,1,0"))
                                          (rule "polySimp_rightDist" (formula "55") (term "0,1,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "55") (term "1,0,1,1,0"))
                                          (rule "polySimp_elimOne" (formula "55") (term "1,0,1,1,0"))
                                          (rule "polySimp_rightDist" (formula "55") (term "0,0,1,1,0"))
                                          (rule "mul_literals" (formula "55") (term "0,0,0,1,1,0"))
                                          (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "57"))
                                          (rule "andLeft" (formula "57"))
                                          (rule "andLeft" (formula "57"))
                                          (rule "notLeft" (formula "59"))
                                          (rule "notLeft" (formula "58"))
                                          (rule "andLeft" (formula "57"))
                                          (rule "notLeft" (formula "58"))
                                          (rule "andLeft" (formula "57"))
                                          (rule "andLeft" (formula "57"))
                                          (rule "notLeft" (formula "59"))
                                          (rule "andLeft" (formula "57"))
                                          (rule "notLeft" (formula "59"))
                                          (rule "andLeft" (formula "57"))
                                          (rule "notLeft" (formula "59"))
                                          (rule "notLeft" (formula "58"))
                                          (rule "notLeft" (formula "57"))
                                          (rule "Definition_axiom_for_allBucketsInRangeSorted_in_de_wiesler_Sorter" (formula "13") (term "0") (inst "b=b_1"))
                                           (builtin "One Step Simplification" (formula "13"))
                                          (rule "expand_inInt" (formula "13") (term "1,0,0"))
                                          (rule "replace_int_MAX" (formula "13") (term "1,0,1,0,0"))
                                          (rule "replace_int_MIN" (formula "13") (term "0,1,1,0,0"))
                                          (rule "translateJavaAddInt" (formula "13") (term "2,0,1,0"))
                                          (rule "translateJavaAddInt" (formula "13") (term "3,0,1,0"))
                                          (rule "translateJavaAddInt" (formula "13") (term "0,2,1,3,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "13") (term "0,2,1,3,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "13") (term "1,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,0"))
                                          (rule "mul_literals" (formula "13") (term "0,1,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,0"))
                                          (rule "Definition_axiom_for_smallBucketsInRangeSorted_in_de_wiesler_Sorter" (formula "66") (term "0") (inst "b=b_1"))
                                           (builtin "One Step Simplification" (formula "66"))
                                          (rule "expand_inInt" (formula "66") (term "1,0,0"))
                                          (rule "replace_int_MAX" (formula "66") (term "1,0,1,0,0"))
                                          (rule "replace_int_MIN" (formula "66") (term "0,1,1,0,0"))
                                          (rule "translateJavaAddInt" (formula "66") (term "0,2,5,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "66") (term "0,2,5,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "66") (term "1,0,0,0"))
                                          (rule "polySimp_mulAssoc" (formula "66") (term "1,0,0,1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "66") (term "0,1,0,0,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "66") (term "1,0,0,1,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "66") (term "0,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "66") (term "1,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "66") (term "1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "66") (term "1,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "66") (term "1,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "66") (term "1,1,1,0,0,0"))
                                          (rule "mul_literals" (formula "66") (term "0,1,1,0,0,0"))
                                          (rule "Definition_axiom_for_isValidBucketStarts_in_de_wiesler_Functions" (formula "48") (term "0"))
                                           (builtin "One Step Simplification" (formula "48"))
                                          (rule "andLeft" (formula "48"))
                                          (rule "andLeft" (formula "48"))
                                          (rule "andLeft" (formula "48"))
                                          (rule "translateJavaAddInt" (formula "50") (term "3,0"))
                                          (rule "translateJavaAddInt" (formula "49") (term "0"))
                                          (rule "polySimp_addComm0" (formula "50") (term "3,0"))
                                          (rule "polySimp_addComm0" (formula "49") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "48"))
                                          (rule "inEqSimp_commuteLeq" (formula "49"))
                                          (rule "applyEq" (formula "49") (term "0") (ifseqformula "36"))
                                          (rule "inEqSimp_homoInEq1" (formula "49"))
                                          (rule "mul_literals" (formula "49") (term "1,0"))
                                          (rule "polySimp_addComm1" (formula "49") (term "0"))
                                          (rule "add_literals" (formula "49") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "49"))
                                          (rule "mul_literals" (formula "49") (term "1"))
                                          (rule "inEqSimp_subsumption6" (formula "48") (ifseqformula "3"))
                                          (rule "mul_literals" (formula "48") (term "1,1,0"))
                                          (rule "greater_literals" (formula "48") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "48"))
                                          (rule "leq_literals" (formula "48") (term "0"))
                                           (builtin "One Step Simplification" (formula "48"))
                                          (rule "true_left" (formula "48"))
                                          (rule "elimGcdLeq_antec" (formula "48") (inst "elimGcdRightDiv=Z(6(5(2(#))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                                          (rule "polySimp_mulLiterals" (formula "48") (term "1,0,0,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "48") (term "1,0,1,0"))
                                          (rule "leq_literals" (formula "48") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "48"))
                                          (rule "mul_literals" (formula "48") (term "1,0,0,0,0,0"))
                                          (rule "neg_literal" (formula "48") (term "0,0,0,0,0,0"))
                                          (rule "polySimp_addLiterals" (formula "48") (term "0,0,0,0"))
                                          (rule "add_zero_right" (formula "48") (term "0,0,0,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "48") (term "0,0"))
                                          (rule "add_literals" (formula "48") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "48") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "48") (term "0,0"))
                                          (rule "qeq_literals" (formula "48") (term "0"))
                                           (builtin "One Step Simplification" (formula "48"))
                                          (rule "inEqSimp_subsumption0" (formula "61") (ifseqformula "48"))
                                          (rule "leq_literals" (formula "61") (term "0"))
                                           (builtin "One Step Simplification" (formula "61"))
                                          (rule "true_left" (formula "61"))
                                          (rule "pullOutSelect" (formula "50") (term "0") (inst "selectSK=arr_1"))
                                          (rule "simplifySelectOfAnonEQ" (formula "50") (ifseqformula "45"))
                                           (builtin "One Step Simplification" (formula "50") (ifInst ""  (formula "83")))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "50") (term "0,0,1,0,0") (ifseqformula "34"))
                                          (rule "replace_known_left" (formula "50") (term "1,0,0,1,0,0") (ifseqformula "35"))
                                           (builtin "One Step Simplification" (formula "50") (ifInst ""  (formula "82")))
                                          (rule "applyEq" (formula "50") (term "1") (ifseqformula "51"))
                                          (rule "ifEqualsInteger" (formula "50"))
                                          (rule "elementOfUnion" (formula "50") (term "0,0,1"))
                                          (rule "elementOfArrayRangeConcrete" (formula "50") (term "1,0,0,1"))
                                          (rule "eqSymm" (formula "50") (term "0,0,1,0,0,1"))
                                          (rule "replace_known_right" (formula "50") (term "0,0,1,0,0,1") (ifseqformula "81"))
                                           (builtin "One Step Simplification" (formula "50"))
                                          (rule "elementOfUnion" (formula "50") (term "0,0,1"))
                                           (builtin "One Step Simplification" (formula "50"))
                                          (rule "andLeft" (formula "50"))
                                          (rule "elementOfUnion" (formula "50"))
                                          (rule "elementOfArrayRangeConcrete" (formula "50") (term "1"))
                                          (rule "eqSymm" (formula "50") (term "0,0,1"))
                                          (rule "replace_known_right" (formula "50") (term "0,0,1") (ifseqformula "82"))
                                           (builtin "One Step Simplification" (formula "50"))
                                          (rule "elementOfUnion" (formula "50"))
                                           (builtin "One Step Simplification" (formula "50"))
                                          (rule "true_left" (formula "50"))
                                          (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "48"))
                                          (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                                          (rule "mul_literals" (formula "7") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "7") (term "0"))
                                          (rule "add_literals" (formula "7") (term "0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "7"))
                                          (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                                          (rule "polySimp_elimOne" (formula "7") (term "0"))
                                          (rule "inEqSimp_subsumption0" (formula "6") (ifseqformula "7"))
                                          (rule "leq_literals" (formula "6") (term "0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "Free_class_invariant_axiom_for_de_wiesler_Storage" (formula "59"))
                                           (builtin "One Step Simplification" (formula "59"))
                                          (rule "andLeft" (formula "59"))
                                          (rule "andLeft" (formula "59"))
                                          (rule "andLeft" (formula "61"))
                                          (rule "andLeft" (formula "59"))
                                          (rule "andLeft" (formula "62"))
                                          (rule "andLeft" (formula "59"))
                                          (rule "andLeft" (formula "63"))
                                          (rule "andLeft" (formula "59"))
                                          (rule "andLeft" (formula "64"))
                                          (rule "andLeft" (formula "59"))
                                          (rule "andLeft" (formula "65"))
                                          (rule "andLeft" (formula "59"))
                                          (rule "andLeft" (formula "66"))
                                          (rule "andLeft" (formula "59"))
                                          (rule "andLeft" (formula "67"))
                                          (rule "andLeft" (formula "59"))
                                          (rule "andLeft" (formula "68"))
                                          (rule "andLeft" (formula "68"))
                                          (rule "andLeft" (formula "68"))
                                          (rule "andLeft" (formula "68"))
                                          (rule "andLeft" (formula "68"))
                                          (rule "andLeft" (formula "68"))
                                          (rule "andLeft" (formula "68"))
                                          (rule "andLeft" (formula "68"))
                                          (rule "andLeft" (formula "68"))
                                          (rule "andLeft" (formula "68"))
                                          (rule "andLeft" (formula "68"))
                                          (rule "andLeft" (formula "68"))
                                          (rule "andLeft" (formula "68"))
                                          (rule "andLeft" (formula "68"))
                                          (rule "andLeft" (formula "68"))
                                          (rule "andLeft" (formula "68"))
                                          (rule "andLeft" (formula "68"))
                                          (rule "andLeft" (formula "68"))
                                          (rule "andLeft" (formula "68"))
                                          (rule "andLeft" (formula "68"))
                                          (rule "translateJavaMulInt" (formula "62") (term "1"))
                                          (rule "mul_literals" (formula "62") (term "1"))
                                          (rule "translateJavaMulInt" (formula "61") (term "1"))
                                          (rule "mul_literals" (formula "61") (term "1"))
                                          (rule "disjointDefinition" (formula "95"))
                                           (builtin "One Step Simplification" (formula "95"))
                                          (rule "notLeft" (formula "95"))
                                          (rule "disjointDefinition" (formula "94"))
                                           (builtin "One Step Simplification" (formula "94"))
                                          (rule "notLeft" (formula "94"))
                                          (rule "disjointDefinition" (formula "93"))
                                           (builtin "One Step Simplification" (formula "93"))
                                          (rule "notLeft" (formula "93"))
                                          (rule "eqSymm" (formula "105"))
                                          (rule "disjointDefinition" (formula "92"))
                                           (builtin "One Step Simplification" (formula "92"))
                                          (rule "notLeft" (formula "92"))
                                          (rule "eqSymm" (formula "104"))
                                          (rule "disjointDefinition" (formula "91"))
                                           (builtin "One Step Simplification" (formula "91"))
                                          (rule "notLeft" (formula "91"))
                                          (rule "eqSymm" (formula "103"))
                                          (rule "disjointDefinition" (formula "90"))
                                           (builtin "One Step Simplification" (formula "90"))
                                          (rule "notLeft" (formula "90"))
                                          (rule "eqSymm" (formula "102"))
                                          (rule "disjointDefinition" (formula "89"))
                                           (builtin "One Step Simplification" (formula "89"))
                                          (rule "notLeft" (formula "89"))
                                          (rule "eqSymm" (formula "101"))
                                          (rule "disjointDefinition" (formula "88"))
                                           (builtin "One Step Simplification" (formula "88"))
                                          (rule "notLeft" (formula "88"))
                                          (rule "eqSymm" (formula "100"))
                                          (rule "disjointDefinition" (formula "87"))
                                           (builtin "One Step Simplification" (formula "87"))
                                          (rule "notLeft" (formula "87"))
                                          (rule "eqSymm" (formula "99"))
                                          (rule "disjointDefinition" (formula "86"))
                                           (builtin "One Step Simplification" (formula "86"))
                                          (rule "notLeft" (formula "86"))
                                          (rule "eqSymm" (formula "98"))
                                          (rule "disjointDefinition" (formula "85"))
                                           (builtin "One Step Simplification" (formula "85"))
                                          (rule "notLeft" (formula "85"))
                                          (rule "eqSymm" (formula "97"))
                                          (rule "disjointDefinition" (formula "84"))
                                           (builtin "One Step Simplification" (formula "84"))
                                          (rule "notLeft" (formula "84"))
                                          (rule "eqSymm" (formula "96"))
                                          (rule "disjointDefinition" (formula "83"))
                                           (builtin "One Step Simplification" (formula "83"))
                                          (rule "notLeft" (formula "83"))
                                          (rule "eqSymm" (formula "95"))
                                          (rule "disjointDefinition" (formula "82"))
                                           (builtin "One Step Simplification" (formula "82"))
                                          (rule "notLeft" (formula "82"))
                                          (rule "eqSymm" (formula "94"))
                                          (rule "disjointDefinition" (formula "81"))
                                           (builtin "One Step Simplification" (formula "81"))
                                          (rule "notLeft" (formula "81"))
                                          (rule "eqSymm" (formula "93"))
                                          (rule "disjointDefinition" (formula "80"))
                                           (builtin "One Step Simplification" (formula "80"))
                                          (rule "notLeft" (formula "80"))
                                          (rule "disjointDefinition" (formula "79"))
                                           (builtin "One Step Simplification" (formula "79"))
                                          (rule "notLeft" (formula "79"))
                                          (rule "eqSymm" (formula "91"))
                                          (rule "disjointDefinition" (formula "78"))
                                           (builtin "One Step Simplification" (formula "78"))
                                          (rule "notLeft" (formula "78"))
                                          (rule "eqSymm" (formula "90"))
                                          (rule "disjointDefinition" (formula "77"))
                                           (builtin "One Step Simplification" (formula "77"))
                                          (rule "notLeft" (formula "77"))
                                          (rule "disjointDefinition" (formula "76"))
                                           (builtin "One Step Simplification" (formula "76"))
                                          (rule "notLeft" (formula "76"))
                                          (rule "disjointDefinition" (formula "75"))
                                           (builtin "One Step Simplification" (formula "75"))
                                          (rule "notLeft" (formula "75"))
                                          (rule "disjointDefinition" (formula "74"))
                                           (builtin "One Step Simplification" (formula "74"))
                                          (rule "notLeft" (formula "74"))
                                          (rule "disjointDefinition" (formula "73"))
                                           (builtin "One Step Simplification" (formula "73"))
                                          (rule "notLeft" (formula "73"))
                                          (rule "disjointDefinition" (formula "72"))
                                           (builtin "One Step Simplification" (formula "72"))
                                          (rule "notLeft" (formula "72"))
                                          (rule "disjointDefinition" (formula "71"))
                                           (builtin "One Step Simplification" (formula "71"))
                                          (rule "notLeft" (formula "71"))
                                          (rule "disjointDefinition" (formula "70"))
                                           (builtin "One Step Simplification" (formula "70"))
                                          (rule "notLeft" (formula "70"))
                                          (rule "disjointDefinition" (formula "69"))
                                           (builtin "One Step Simplification" (formula "69"))
                                          (rule "notLeft" (formula "69"))
                                          (rule "disjointDefinition" (formula "68"))
                                           (builtin "One Step Simplification" (formula "68"))
                                          (rule "notLeft" (formula "68"))
                                          (rule "applyEq" (formula "42") (term "1,0") (ifseqformula "67"))
                                          (rule "applyEq" (formula "16") (term "0,1,0,0,1,0,0,1") (ifseqformula "67"))
                                          (rule "applyEq" (formula "14") (term "0,1,0,0,1,0") (ifseqformula "67"))
                                          (rule "applyEq" (formula "16") (term "0,1,0,1,3,0,1,0,0,1") (ifseqformula "67"))
                                          (rule "applyEq" (formula "13") (term "0,1,0,1,2,0,1,0") (ifseqformula "67"))
                                          (rule "applyEq" (formula "71") (term "0,1,0") (ifseqformula "67"))
                                          (rule "applyEq" (formula "43") (term "1,0") (ifseqformula "67"))
                                          (rule "applyEq" (formula "71") (term "0,1,0,0") (ifseqformula "67"))
                                          (rule "applyEq" (formula "16") (term "0,1,0,1,2,0,1,0,0,1") (ifseqformula "67"))
                                          (rule "applyEq" (formula "32") (term "1,0") (ifseqformula "67"))
                                          (rule "applyEq" (formula "73") (term "0,1,0,2,1") (ifseqformula "67"))
                                          (rule "applyEq" (formula "15") (term "0,1,0,4,0,1,0") (ifseqformula "67"))
                                          (rule "applyEq" (formula "13") (term "0,1,0,0,1,0") (ifseqformula "67"))
                                          (rule "applyEq" (formula "15") (term "0,1,0,5,0,1,0") (ifseqformula "67"))
                                          (rule "applyEq" (formula "45") (term "1,0,1,0") (ifseqformula "67"))
                                          (rule "applyEq" (formula "14") (term "0,1,0,4,0,1,0") (ifseqformula "67"))
                                          (rule "applyEq" (formula "13") (term "0,1,0,1,3,0,1,0") (ifseqformula "67"))
                                          (rule "applyEq" (formula "12") (term "0,1,0,2,0") (ifseqformula "67"))
                                          (rule "applyEq" (formula "14") (term "0,1,0,5,0,1,0") (ifseqformula "67"))
                                          (rule "applyEq" (formula "15") (term "0,1,0,0,1,0") (ifseqformula "67"))
                                          (rule "distributeIntersection" (formula "42") (term "0"))
                                          (rule "distributeIntersection" (formula "43") (term "0"))
                                          (rule "distributeIntersection" (formula "32") (term "0"))
                                          (rule "unionEqualsEmpty" (formula "42"))
                                          (rule "andLeft" (formula "42"))
                                          (rule "distributeIntersection" (formula "44") (term "0,0"))
                                          (rule "distributeIntersection" (formula "44") (term "1,0"))
                                          (rule "distributeIntersection" (formula "32") (term "1,0"))
                                          (rule "distributeIntersection" (formula "32") (term "0,0"))
                                          (rule "distributeIntersection" (formula "43") (term "0"))
                                          (rule "distributeIntersection" (formula "42") (term "0"))
                                          (rule "distributeIntersection" (formula "44") (term "0,0,0"))
                                          (rule "distributeIntersection" (formula "44") (term "1,0,0"))
                                          (rule "distributeIntersection" (formula "44") (term "0,1,0"))
                                          (rule "distributeIntersection" (formula "44") (term "1,1,0"))
                                          (rule "distributeIntersection" (formula "32") (term "0,1,0"))
                                          (rule "distributeIntersection" (formula "32") (term "1,1,0"))
                                          (rule "distributeIntersection" (formula "32") (term "1,0,0"))
                                          (rule "distributeIntersection" (formula "32") (term "0,0,0"))
                                          (rule "distributeIntersection" (formula "43") (term "1,0"))
                                          (rule "distributeIntersection" (formula "43") (term "0,0"))
                                          (rule "distributeIntersection" (formula "42") (term "1,0"))
                                          (rule "distributeIntersection" (formula "42") (term "0,0"))
                                          (rule "unionEqualsEmpty" (formula "44"))
                                          (rule "andLeft" (formula "44"))
                                          (rule "unionEqualsEmpty" (formula "32"))
                                          (rule "andLeft" (formula "32"))
                                          (rule "unionEqualsEmpty" (formula "44"))
                                          (rule "andLeft" (formula "44"))
                                          (rule "unionEqualsEmpty" (formula "43"))
                                          (rule "andLeft" (formula "43"))
                                          (rule "unionEqualsEmpty" (formula "48"))
                                          (rule "andLeft" (formula "48"))
                                          (rule "unionEqualsEmpty" (formula "47"))
                                          (rule "andLeft" (formula "47"))
                                          (rule "unionEqualsEmpty" (formula "33"))
                                          (rule "andLeft" (formula "33"))
                                          (rule "unionEqualsEmpty" (formula "32"))
                                          (rule "andLeft" (formula "32"))
                                          (rule "unionEqualsEmpty" (formula "48"))
                                           (builtin "One Step Simplification" (formula "48"))
                                          (rule "andLeft" (formula "48"))
                                          (rule "notLeft" (formula "49"))
                                          (rule "notLeft" (formula "48"))
                                          (rule "eqSymm" (formula "89"))
                                          (rule "eqSymm" (formula "88"))
                                          (rule "unionEqualsEmpty" (formula "47"))
                                           (builtin "One Step Simplification" (formula "47"))
                                          (rule "andLeft" (formula "47"))
                                          (rule "notLeft" (formula "47"))
                                          (rule "notLeft" (formula "47"))
                                          (rule "eqSymm" (formula "88"))
                                          (rule "eqSymm" (formula "87"))
                                          (rule "unionEqualsEmpty" (formula "46"))
                                           (builtin "One Step Simplification" (formula "46"))
                                          (rule "andLeft" (formula "46"))
                                          (rule "notLeft" (formula "47"))
                                          (rule "notLeft" (formula "46"))
                                          (rule "eqSymm" (formula "87"))
                                          (rule "eqSymm" (formula "86"))
                                          (rule "unionEqualsEmpty" (formula "45"))
                                           (builtin "One Step Simplification" (formula "45"))
                                          (rule "andLeft" (formula "45"))
                                          (rule "notLeft" (formula "46"))
                                          (rule "notLeft" (formula "45"))
                                          (rule "eqSymm" (formula "86"))
                                          (rule "eqSymm" (formula "85"))
                                          (rule "unionEqualsEmpty" (formula "48"))
                                           (builtin "One Step Simplification" (formula "48"))
                                          (rule "andLeft" (formula "48"))
                                          (rule "notLeft" (formula "49"))
                                          (rule "notLeft" (formula "48"))
                                          (rule "eqSymm" (formula "85"))
                                          (rule "eqSymm" (formula "84"))
                                          (rule "sortsDisjointModuloNull" (formula "85"))
                                          (rule "replace_known_right" (formula "85") (term "0") (ifseqformula "129"))
                                           (builtin "One Step Simplification" (formula "85") (ifInst ""  (formula "134")))
                                          (rule "false_right" (formula "85"))
                                          (rule "sortsDisjointModuloNull" (formula "84"))
                                          (rule "replace_known_right" (formula "84") (term "0") (ifseqformula "127"))
                                           (builtin "One Step Simplification" (formula "84") (ifInst ""  (formula "133")))
                                          (rule "false_right" (formula "84"))
                                          (rule "unionEqualsEmpty" (formula "47"))
                                           (builtin "One Step Simplification" (formula "47"))
                                          (rule "andLeft" (formula "47"))
                                          (rule "notLeft" (formula "48"))
                                          (rule "notLeft" (formula "47"))
                                          (rule "eqSymm" (formula "84"))
                                          (rule "eqSymm" (formula "83"))
                                          (rule "sortsDisjointModuloNull" (formula "84"))
                                          (rule "replace_known_right" (formula "84") (term "0") (ifseqformula "126"))
                                           (builtin "One Step Simplification" (formula "84") (ifInst ""  (formula "133")))
                                          (rule "false_right" (formula "84"))
                                          (rule "sortsDisjointModuloNull" (formula "83"))
                                          (rule "replace_known_right" (formula "83") (term "0") (ifseqformula "124"))
                                           (builtin "One Step Simplification" (formula "83") (ifInst ""  (formula "132")))
                                          (rule "false_right" (formula "83"))
                                          (rule "unionEqualsEmpty" (formula "46"))
                                           (builtin "One Step Simplification" (formula "46"))
                                          (rule "andLeft" (formula "46"))
                                          (rule "notLeft" (formula "47"))
                                          (rule "notLeft" (formula "46"))
                                          (rule "eqSymm" (formula "83"))
                                          (rule "eqSymm" (formula "82"))
                                          (rule "sortsDisjointModuloNull" (formula "83"))
                                          (rule "replace_known_right" (formula "83") (term "0") (ifseqformula "123"))
                                           (builtin "One Step Simplification" (formula "83") (ifInst ""  (formula "132")))
                                          (rule "false_right" (formula "83"))
                                          (rule "sortsDisjointModuloNull" (formula "82"))
                                          (rule "replace_known_right" (formula "82") (term "0") (ifseqformula "121"))
                                           (builtin "One Step Simplification" (formula "82") (ifInst ""  (formula "131")))
                                          (rule "false_right" (formula "82"))
                                          (rule "unionEqualsEmpty" (formula "45"))
                                           (builtin "One Step Simplification" (formula "45"))
                                          (rule "andLeft" (formula "45"))
                                          (rule "notLeft" (formula "46"))
                                          (rule "notLeft" (formula "45"))
                                          (rule "eqSymm" (formula "82"))
                                          (rule "eqSymm" (formula "81"))
                                          (rule "sortsDisjointModuloNull" (formula "82"))
                                          (rule "replace_known_right" (formula "82") (term "1") (ifseqformula "131"))
                                           (builtin "One Step Simplification" (formula "82") (ifInst ""  (formula "119")))
                                          (rule "false_right" (formula "82"))
                                          (rule "sortsDisjointModuloNull" (formula "81"))
                                          (rule "replace_known_right" (formula "81") (term "1") (ifseqformula "130"))
                                           (builtin "One Step Simplification" (formula "81") (ifInst ""  (formula "119")))
                                          (rule "false_right" (formula "81"))
                                          (rule "unionEqualsEmpty" (formula "34"))
                                           (builtin "One Step Simplification" (formula "34"))
                                          (rule "andLeft" (formula "34"))
                                          (rule "notLeft" (formula "34"))
                                          (rule "notLeft" (formula "34"))
                                          (rule "eqSymm" (formula "81"))
                                          (rule "eqSymm" (formula "80"))
                                          (rule "unionEqualsEmpty" (formula "34"))
                                           (builtin "One Step Simplification" (formula "34"))
                                          (rule "andLeft" (formula "34"))
                                          (rule "notLeft" (formula "35"))
                                          (rule "notLeft" (formula "34"))
                                          (rule "eqSymm" (formula "80"))
                                          (rule "eqSymm" (formula "79"))
                                          (rule "unionEqualsEmpty" (formula "32"))
                                           (builtin "One Step Simplification" (formula "32"))
                                          (rule "andLeft" (formula "32"))
                                          (rule "notLeft" (formula "32"))
                                          (rule "notLeft" (formula "32"))
                                          (rule "eqSymm" (formula "79"))
                                          (rule "eqSymm" (formula "78"))
                                          (rule "unionEqualsEmpty" (formula "32"))
                                           (builtin "One Step Simplification" (formula "32"))
                                          (rule "andLeft" (formula "32"))
                                          (rule "notLeft" (formula "32"))
                                          (rule "notLeft" (formula "32"))
                                          (rule "eqSymm" (formula "78"))
                                          (rule "eqSymm" (formula "77"))
                                          (rule "commuteUnion_2" (formula "64") (term "0,1"))
                                          (rule "commuteUnion" (formula "64") (term "1,1,1"))
                                          (rule "commuteUnion" (formula "16") (term "0,0,1,0,0,1,0,0,1"))
                                          (rule "commuteUnion" (formula "16") (term "1,1,0,1,0,0,1,0,0,1"))
                                          (rule "commuteUnion" (formula "14") (term "0,0,1,0,0,1,0"))
                                          (rule "commuteUnion" (formula "14") (term "1,1,0,1,0,0,1,0"))
                                          (rule "Definition_axiom_for_equalityBucketsInRange_in_de_wiesler_Sorter" (formula "54") (term "0,1") (inst "b=b_1"))
                                           (builtin "One Step Simplification" (formula "54"))
                                          (rule "expand_inInt" (formula "54") (term "1,0,0,1"))
                                          (rule "replace_int_MAX" (formula "54") (term "1,0,1,0,0,1"))
                                          (rule "replace_int_MIN" (formula "54") (term "0,1,1,0,0,1"))
                                          (rule "translateJavaMod" (formula "54") (term "0,1,0,0,0,1"))
                                          (rule "translateJavaAddInt" (formula "54") (term "2,0,1,0,1"))
                                          (rule "translateJavaAddInt" (formula "54") (term "0,2,1,3,0,1,0,1"))
                                          (rule "translateJavaAddInt" (formula "54") (term "3,0,1,0,1"))
                                          (rule "polySimp_addComm0" (formula "54") (term "0,2,1,3,0,1,0,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "54") (term "1,0,0,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "54") (term "1,0,0,1,0,0,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "54") (term "1,1,0,0,1,0,0,0,0,1"))
                                          (rule "mul_literals" (formula "54") (term "0,1,0,0,1,0,0,0,0,1"))
                                          (rule "polySimp_addAssoc" (formula "54") (term "0,0,1,0,0,0,0,1"))
                                          (rule "add_literals" (formula "54") (term "0,0,0,1,0,0,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "54") (term "0,0,0,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "54") (term "1,1,0,0,1"))
                                          (rule "jmod_axiom" (formula "54") (term "0,1,0,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "54") (term "1,0,1,0,0,0,1"))
                                          (rule "polySimp_homoEq" (formula "54") (term "1,0,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "54") (term "1,0,1,0,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "54") (term "1,0,1,0,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "54") (term "1,1,0,1,0,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "54") (term "0,1,0,1,0,0,0,1"))
                                          (rule "polySimp_addAssoc" (formula "54") (term "0,1,0,0,0,1"))
                                          (rule "polySimp_sepPosMonomial" (formula "54") (term "1,0,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "54") (term "1,1,0,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "54") (term "1,1,0,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "54") (term "1,1,1,0,0,0,1"))
                                          (rule "mul_literals" (formula "54") (term "0,1,1,0,0,0,1"))
                                          (rule "polySimp_elimOne" (formula "54") (term "1,1,1,0,0,0,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "54") (term "1,0,0,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "54") (term "1,1,0,0,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "54") (term "1,1,0,0,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "54") (term "1,1,1,0,0,0,0,1"))
                                          (rule "mul_literals" (formula "54") (term "0,1,1,0,0,0,0,1"))
                                          (rule "Free_class_invariant_axiom_for_de_wiesler_Storage" (formula "31"))
                                           (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "56")) (ifInst ""  (formula "57")) (ifInst ""  (formula "60")) (ifInst ""  (formula "61")) (ifInst ""  (formula "62")) (ifInst ""  (formula "63")))
                                          (rule "andLeft" (formula "31"))
                                          (rule "andLeft" (formula "31"))
                                          (rule "andLeft" (formula "33"))
                                          (rule "andLeft" (formula "31"))
                                          (rule "andLeft" (formula "34"))
                                          (rule "andLeft" (formula "34"))
                                          (rule "andLeft" (formula "34"))
                                          (rule "andLeft" (formula "34"))
                                          (rule "andLeft" (formula "34"))
                                          (rule "andLeft" (formula "34"))
                                          (rule "andLeft" (formula "34"))
                                          (rule "andLeft" (formula "34"))
                                          (rule "andLeft" (formula "34"))
                                          (rule "andLeft" (formula "34"))
                                          (rule "andLeft" (formula "34"))
                                          (rule "andLeft" (formula "34"))
                                          (rule "andLeft" (formula "34"))
                                          (rule "andLeft" (formula "34"))
                                          (rule "andLeft" (formula "34"))
                                          (rule "andLeft" (formula "34"))
                                          (rule "andLeft" (formula "34"))
                                          (rule "andLeft" (formula "34"))
                                          (rule "andLeft" (formula "34"))
                                          (rule "andLeft" (formula "34"))
                                          (rule "andLeft" (formula "34"))
                                          (rule "andLeft" (formula "34"))
                                          (rule "andLeft" (formula "34"))
                                          (rule "andLeft" (formula "34"))
                                          (rule "andLeft" (formula "34"))
                                          (rule "andLeft" (formula "34"))
                                          (rule "translateJavaMulInt" (formula "31") (term "1"))
                                          (rule "mul_literals" (formula "31") (term "1"))
                                          (rule "translateJavaMulInt" (formula "31") (term "1"))
                                          (rule "mul_literals" (formula "31") (term "1"))
                                          (rule "disjointDefinition" (formula "59"))
                                           (builtin "One Step Simplification" (formula "59") (ifInst ""  (formula "148")))
                                          (rule "true_left" (formula "59"))
                                          (rule "disjointDefinition" (formula "58"))
                                           (builtin "One Step Simplification" (formula "58") (ifInst ""  (formula "146")))
                                          (rule "true_left" (formula "58"))
                                          (rule "disjointDefinition" (formula "57"))
                                           (builtin "One Step Simplification" (formula "57"))
                                          (rule "notLeft" (formula "57"))
                                          (rule "eqSymm" (formula "102"))
                                          (rule "disjointDefinition" (formula "56"))
                                           (builtin "One Step Simplification" (formula "56"))
                                          (rule "notLeft" (formula "56"))
                                          (rule "eqSymm" (formula "101"))
                                          (rule "disjointDefinition" (formula "55"))
                                           (builtin "One Step Simplification" (formula "55"))
                                          (rule "notLeft" (formula "55"))
                                          (rule "eqSymm" (formula "100"))
                                          (rule "disjointDefinition" (formula "54"))
                                           (builtin "One Step Simplification" (formula "54"))
                                          (rule "notLeft" (formula "54"))
                                          (rule "eqSymm" (formula "99"))
                                          (rule "disjointDefinition" (formula "53"))
                                           (builtin "One Step Simplification" (formula "53"))
                                          (rule "notLeft" (formula "53"))
                                          (rule "eqSymm" (formula "98"))
                                          (rule "disjointDefinition" (formula "52"))
                                           (builtin "One Step Simplification" (formula "52"))
                                          (rule "notLeft" (formula "52"))
                                          (rule "eqSymm" (formula "97"))
                                          (rule "disjointDefinition" (formula "51"))
                                           (builtin "One Step Simplification" (formula "51"))
                                          (rule "notLeft" (formula "51"))
                                          (rule "eqSymm" (formula "96"))
                                          (rule "disjointDefinition" (formula "50"))
                                           (builtin "One Step Simplification" (formula "50"))
                                          (rule "notLeft" (formula "50"))
                                          (rule "eqSymm" (formula "95"))
                                          (rule "disjointDefinition" (formula "49"))
                                           (builtin "One Step Simplification" (formula "49"))
                                          (rule "notLeft" (formula "49"))
                                          (rule "eqSymm" (formula "94"))
                                          (rule "disjointDefinition" (formula "48"))
                                           (builtin "One Step Simplification" (formula "48"))
                                          (rule "notLeft" (formula "48"))
                                          (rule "eqSymm" (formula "93"))
                                          (rule "disjointDefinition" (formula "47"))
                                           (builtin "One Step Simplification" (formula "47"))
                                          (rule "notLeft" (formula "47"))
                                          (rule "eqSymm" (formula "92"))
                                          (rule "disjointDefinition" (formula "46"))
                                           (builtin "One Step Simplification" (formula "46"))
                                          (rule "notLeft" (formula "46"))
                                          (rule "eqSymm" (formula "91"))
                                          (rule "disjointDefinition" (formula "45"))
                                           (builtin "One Step Simplification" (formula "45"))
                                          (rule "notLeft" (formula "45"))
                                          (rule "eqSymm" (formula "90"))
                                          (rule "disjointDefinition" (formula "44"))
                                           (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "118")))
                                          (rule "true_left" (formula "44"))
                                          (rule "disjointDefinition" (formula "43"))
                                           (builtin "One Step Simplification" (formula "43"))
                                          (rule "notLeft" (formula "43"))
                                          (rule "eqSymm" (formula "88"))
                                          (rule "disjointDefinition" (formula "42"))
                                           (builtin "One Step Simplification" (formula "42"))
                                          (rule "notLeft" (formula "42"))
                                          (rule "eqSymm" (formula "87"))
                                          (rule "disjointDefinition" (formula "41"))
                                           (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "112")))
                                          (rule "true_left" (formula "41"))
                                          (rule "disjointDefinition" (formula "40"))
                                           (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "110")))
                                          (rule "true_left" (formula "40"))
                                          (rule "disjointDefinition" (formula "39"))
                                           (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "108")))
                                          (rule "true_left" (formula "39"))
                                          (rule "disjointDefinition" (formula "38"))
                                           (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "106")))
                                          (rule "true_left" (formula "38"))
                                          (rule "disjointDefinition" (formula "37"))
                                           (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "104")))
                                          (rule "true_left" (formula "37"))
                                          (rule "disjointDefinition" (formula "36"))
                                           (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "102")))
                                          (rule "true_left" (formula "36"))
                                          (rule "disjointDefinition" (formula "35"))
                                           (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "100")))
                                          (rule "true_left" (formula "35"))
                                          (rule "disjointDefinition" (formula "34"))
                                           (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "98")))
                                          (rule "true_left" (formula "34"))
                                          (rule "disjointDefinition" (formula "33"))
                                           (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "96")))
                                          (rule "true_left" (formula "33"))
                                          (rule "disjointDefinition" (formula "32"))
                                           (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "94")))
                                          (rule "true_left" (formula "32"))
                                          (rule "applyEq" (formula "31") (term "0") (ifseqformula "64"))
                                          (rule "eqSymm" (formula "31"))
                                          (rule "applyEq" (formula "15") (term "0,1,0,5,0,1,0") (ifseqformula "31"))
                                          (rule "applyEq" (formula "68") (term "0,1,0") (ifseqformula "31"))
                                          (rule "applyEq" (formula "13") (term "0,1,0,1,2,0,1,0") (ifseqformula "31"))
                                          (rule "applyEq" (formula "14") (term "0,1,0,4,0,1,0") (ifseqformula "31"))
                                          (rule "applyEq" (formula "42") (term "1,0,1,0") (ifseqformula "31"))
                                          (rule "applyEq" (formula "12") (term "0,1,0,2,0") (ifseqformula "31"))
                                          (rule "applyEq" (formula "15") (term "0,1,0,4,0,1,0") (ifseqformula "31"))
                                          (rule "applyEq" (formula "13") (term "0,1,0,0,1,0") (ifseqformula "31"))
                                          (rule "applyEq" (formula "14") (term "0,1,0,5,0,1,0") (ifseqformula "31"))
                                          (rule "applyEq" (formula "16") (term "0,1,0,1,3,0,1,0,0,1") (ifseqformula "31"))
                                          (rule "applyEq" (formula "16") (term "0,1,0,1,2,0,1,0,0,1") (ifseqformula "31"))
                                          (rule "applyEq" (formula "15") (term "0,1,0,0,1,0") (ifseqformula "31"))
                                          (rule "applyEq" (formula "13") (term "0,1,0,1,3,0,1,0") (ifseqformula "31"))
                                          (rule "applyEq" (formula "70") (term "0,1,0,2,1") (ifseqformula "31"))
                                          (rule "applyEq" (formula "68") (term "0,1,0,0") (ifseqformula "31"))
                                          (rule "Definition_axiom_for_allBucketsPartitioned_in_de_wiesler_Sorter" (formula "72") (term "0") (inst "b=b_1"))
                                           (builtin "One Step Simplification" (formula "72"))
                                          (rule "expand_inInt" (formula "72") (term "1,0,0"))
                                          (rule "replace_int_MIN" (formula "72") (term "0,1,1,0,0"))
                                          (rule "replace_int_MAX" (formula "72") (term "1,0,1,0,0"))
                                          (rule "translateJavaAddInt" (formula "72") (term "0,2,5,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "72") (term "0,2,5,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "72") (term "1,0,0,0"))
                                          (rule "polySimp_mulAssoc" (formula "72") (term "1,0,0,1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "72") (term "0,1,0,0,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "72") (term "1,0,0,1,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "72") (term "0,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "72") (term "1,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "72") (term "1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "72") (term "1,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "72") (term "1,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "72") (term "1,1,1,0,0,0"))
                                          (rule "mul_literals" (formula "72") (term "0,1,1,0,0,0"))
                                          (rule "Definition_axiom_for_smallBucketsInRangeSorted_in_de_wiesler_Sorter" (formula "50") (term "0") (inst "b=b_1"))
                                           (builtin "One Step Simplification" (formula "50"))
                                          (rule "expand_inInt" (formula "50") (term "1,0,0"))
                                          (rule "replace_int_MIN" (formula "50") (term "0,1,1,0,0"))
                                          (rule "replace_int_MAX" (formula "50") (term "1,0,1,0,0"))
                                          (rule "translateJavaAddInt" (formula "50") (term "0,2,5,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "50") (term "0,2,5,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "50") (term "1,0,0,0"))
                                          (rule "polySimp_mulAssoc" (formula "50") (term "1,0,0,1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "50") (term "0,1,0,0,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "50") (term "1,0,0,1,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "50") (term "0,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "50") (term "1,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "50") (term "1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "50") (term "1,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "50") (term "1,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "50") (term "1,1,1,0,0,0"))
                                          (rule "mul_literals" (formula "50") (term "0,1,1,0,0,0"))
                                          (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "76"))
                                          (rule "andLeft" (formula "76"))
                                          (rule "notLeft" (formula "77"))
                                          (rule "andLeft" (formula "76"))
                                          (rule "andLeft" (formula "76"))
                                          (rule "notLeft" (formula "78"))
                                          (rule "andLeft" (formula "76"))
                                          (rule "notLeft" (formula "78"))
                                          (rule "andLeft" (formula "76"))
                                          (rule "notLeft" (formula "78"))
                                          (rule "andLeft" (formula "76"))
                                          (rule "notLeft" (formula "78"))
                                          (rule "notLeft" (formula "77"))
                                          (rule "andLeft" (formula "76"))
                                          (rule "notLeft" (formula "76"))
                                          (rule "notLeft" (formula "76"))
                                          (rule "Definition_axiom_for_equalityBucketsInRange_in_de_wiesler_Sorter" (formula "74") (term "0,1") (inst "b=b_1"))
                                           (builtin "One Step Simplification" (formula "74"))
                                          (rule "expand_inInt" (formula "74") (term "1,0,0,1"))
                                          (rule "replace_int_MAX" (formula "74") (term "1,0,1,0,0,1"))
                                          (rule "replace_int_MIN" (formula "74") (term "0,1,1,0,0,1"))
                                          (rule "translateJavaAddInt" (formula "74") (term "0,2,1,3,0,1,0,1"))
                                          (rule "translateJavaMod" (formula "74") (term "0,1,0,0,0,1"))
                                          (rule "translateJavaAddInt" (formula "74") (term "2,0,1,0,1"))
                                          (rule "translateJavaAddInt" (formula "74") (term "3,0,1,0,1"))
                                          (rule "polySimp_addComm0" (formula "74") (term "0,2,1,3,0,1,0,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "74") (term "1,0,0,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "74") (term "1,0,0,1,0,0,0,0,1"))
                                          (rule "mul_literals" (formula "74") (term "0,1,0,0,1,0,0,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "74") (term "1,1,0,0,1,0,0,0,0,1"))
                                          (rule "polySimp_addAssoc" (formula "74") (term "0,0,1,0,0,0,0,1"))
                                          (rule "add_literals" (formula "74") (term "0,0,0,1,0,0,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "74") (term "0,0,0,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "74") (term "1,1,0,0,1"))
                                          (rule "jmod_axiom" (formula "74") (term "0,1,0,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "74") (term "1,0,1,0,0,0,1"))
                                          (rule "polySimp_homoEq" (formula "74") (term "1,0,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "74") (term "1,0,1,0,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "74") (term "1,0,1,0,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "74") (term "1,1,0,1,0,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "74") (term "0,1,0,1,0,0,0,1"))
                                          (rule "polySimp_addAssoc" (formula "74") (term "0,1,0,0,0,1"))
                                          (rule "polySimp_sepPosMonomial" (formula "74") (term "1,0,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "74") (term "1,1,0,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "74") (term "1,1,0,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "74") (term "1,1,1,0,0,0,1"))
                                          (rule "mul_literals" (formula "74") (term "0,1,1,0,0,0,1"))
                                          (rule "polySimp_elimOne" (formula "74") (term "1,1,1,0,0,0,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "74") (term "1,0,0,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "74") (term "1,1,0,0,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "74") (term "1,1,0,0,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "74") (term "1,1,1,0,0,0,0,1"))
                                          (rule "mul_literals" (formula "74") (term "0,1,1,0,0,0,0,1"))
                                          (rule "Free_class_invariant_axiom_for_de_wiesler_Storage" (formula "75"))
                                           (builtin "One Step Simplification" (formula "75") (ifInst ""  (formula "56")) (ifInst ""  (formula "57")) (ifInst ""  (formula "60")) (ifInst ""  (formula "61")) (ifInst ""  (formula "62")) (ifInst ""  (formula "63")))
                                          (rule "andLeft" (formula "75"))
                                          (rule "andLeft" (formula "75"))
                                          (rule "andLeft" (formula "77"))
                                          (rule "andLeft" (formula "75"))
                                          (rule "andLeft" (formula "78"))
                                          (rule "andLeft" (formula "78"))
                                          (rule "andLeft" (formula "78"))
                                          (rule "andLeft" (formula "78"))
                                          (rule "andLeft" (formula "78"))
                                          (rule "andLeft" (formula "78"))
                                          (rule "andLeft" (formula "78"))
                                          (rule "andLeft" (formula "78"))
                                          (rule "andLeft" (formula "78"))
                                          (rule "andLeft" (formula "78"))
                                          (rule "andLeft" (formula "78"))
                                          (rule "andLeft" (formula "78"))
                                          (rule "andLeft" (formula "78"))
                                          (rule "andLeft" (formula "78"))
                                          (rule "andLeft" (formula "78"))
                                          (rule "andLeft" (formula "78"))
                                          (rule "andLeft" (formula "78"))
                                          (rule "andLeft" (formula "78"))
                                          (rule "andLeft" (formula "78"))
                                          (rule "andLeft" (formula "78"))
                                          (rule "andLeft" (formula "78"))
                                          (rule "andLeft" (formula "78"))
                                          (rule "andLeft" (formula "78"))
                                          (rule "andLeft" (formula "78"))
                                          (rule "andLeft" (formula "78"))
                                          (rule "andLeft" (formula "78"))
                                          (rule "translateJavaMulInt" (formula "75") (term "1"))
                                          (rule "mul_literals" (formula "75") (term "1"))
                                          (rule "translateJavaMulInt" (formula "75") (term "1"))
                                          (rule "mul_literals" (formula "75") (term "1"))
                                          (rule "disjointDefinition" (formula "103"))
                                           (builtin "One Step Simplification" (formula "103") (ifInst ""  (formula "147")))
                                          (rule "true_left" (formula "103"))
                                          (rule "disjointDefinition" (formula "102"))
                                           (builtin "One Step Simplification" (formula "102") (ifInst ""  (formula "145")))
                                          (rule "true_left" (formula "102"))
                                          (rule "disjointDefinition" (formula "101"))
                                           (builtin "One Step Simplification" (formula "101"))
                                          (rule "notLeft" (formula "101"))
                                          (rule "eqSymm" (formula "101"))
                                          (rule "disjointDefinition" (formula "100"))
                                           (builtin "One Step Simplification" (formula "100"))
                                          (rule "notLeft" (formula "100"))
                                          (rule "eqSymm" (formula "100"))
                                          (rule "disjointDefinition" (formula "99"))
                                           (builtin "One Step Simplification" (formula "99"))
                                          (rule "notLeft" (formula "99"))
                                          (rule "eqSymm" (formula "99"))
                                          (rule "disjointDefinition" (formula "98"))
                                           (builtin "One Step Simplification" (formula "98"))
                                          (rule "notLeft" (formula "98"))
                                          (rule "eqSymm" (formula "98"))
                                          (rule "disjointDefinition" (formula "97"))
                                           (builtin "One Step Simplification" (formula "97"))
                                          (rule "notLeft" (formula "97"))
                                          (rule "eqSymm" (formula "97"))
                                          (rule "disjointDefinition" (formula "96"))
                                           (builtin "One Step Simplification" (formula "96"))
                                          (rule "notLeft" (formula "96"))
                                          (rule "eqSymm" (formula "96"))
                                          (rule "disjointDefinition" (formula "95"))
                                           (builtin "One Step Simplification" (formula "95"))
                                          (rule "notLeft" (formula "95"))
                                          (rule "eqSymm" (formula "95"))
                                          (rule "disjointDefinition" (formula "94"))
                                           (builtin "One Step Simplification" (formula "94"))
                                          (rule "notLeft" (formula "94"))
                                          (rule "eqSymm" (formula "94"))
                                          (rule "disjointDefinition" (formula "93"))
                                           (builtin "One Step Simplification" (formula "93"))
                                          (rule "notLeft" (formula "93"))
                                          (rule "eqSymm" (formula "93"))
                                          (rule "disjointDefinition" (formula "92"))
                                           (builtin "One Step Simplification" (formula "92"))
                                          (rule "notLeft" (formula "92"))
                                          (rule "eqSymm" (formula "92"))
                                          (rule "disjointDefinition" (formula "91"))
                                           (builtin "One Step Simplification" (formula "91"))
                                          (rule "notLeft" (formula "91"))
                                          (rule "eqSymm" (formula "91"))
                                          (rule "disjointDefinition" (formula "90"))
                                           (builtin "One Step Simplification" (formula "90"))
                                          (rule "notLeft" (formula "90"))
                                          (rule "eqSymm" (formula "90"))
                                          (rule "disjointDefinition" (formula "89"))
                                           (builtin "One Step Simplification" (formula "89"))
                                          (rule "notLeft" (formula "89"))
                                          (rule "eqSymm" (formula "89"))
                                          (rule "disjointDefinition" (formula "88"))
                                           (builtin "One Step Simplification" (formula "88") (ifInst ""  (formula "117")))
                                          (rule "true_left" (formula "88"))
                                          (rule "disjointDefinition" (formula "87"))
                                           (builtin "One Step Simplification" (formula "87"))
                                          (rule "notLeft" (formula "87"))
                                          (rule "eqSymm" (formula "87"))
                                          (rule "disjointDefinition" (formula "86"))
                                           (builtin "One Step Simplification" (formula "86"))
                                          (rule "notLeft" (formula "86"))
                                          (rule "eqSymm" (formula "86"))
                                          (rule "disjointDefinition" (formula "85"))
                                           (builtin "One Step Simplification" (formula "85") (ifInst ""  (formula "111")))
                                          (rule "true_left" (formula "85"))
                                          (rule "disjointDefinition" (formula "84"))
                                           (builtin "One Step Simplification" (formula "84") (ifInst ""  (formula "109")))
                                          (rule "true_left" (formula "84"))
                                          (rule "disjointDefinition" (formula "83"))
                                           (builtin "One Step Simplification" (formula "83") (ifInst ""  (formula "107")))
                                          (rule "true_left" (formula "83"))
                                          (rule "disjointDefinition" (formula "82"))
                                           (builtin "One Step Simplification" (formula "82") (ifInst ""  (formula "105")))
                                          (rule "true_left" (formula "82"))
                                          (rule "disjointDefinition" (formula "81"))
                                           (builtin "One Step Simplification" (formula "81") (ifInst ""  (formula "103")))
                                          (rule "true_left" (formula "81"))
                                          (rule "disjointDefinition" (formula "80"))
                                           (builtin "One Step Simplification" (formula "80") (ifInst ""  (formula "101")))
                                          (rule "true_left" (formula "80"))
                                          (rule "disjointDefinition" (formula "79"))
                                           (builtin "One Step Simplification" (formula "79") (ifInst ""  (formula "99")))
                                          (rule "true_left" (formula "79"))
                                          (rule "disjointDefinition" (formula "78"))
                                           (builtin "One Step Simplification" (formula "78") (ifInst ""  (formula "97")))
                                          (rule "true_left" (formula "78"))
                                          (rule "disjointDefinition" (formula "77"))
                                           (builtin "One Step Simplification" (formula "77") (ifInst ""  (formula "95")))
                                          (rule "true_left" (formula "77"))
                                          (rule "disjointDefinition" (formula "76"))
                                           (builtin "One Step Simplification" (formula "76") (ifInst ""  (formula "93")))
                                          (rule "true_left" (formula "76"))
                                          (rule "applyEq" (formula "75") (term "0") (ifseqformula "64"))
                                          (rule "eqSymm" (formula "75"))
                                          (rule "Definition_axiom_for_allBucketsPartitioned_in_de_wiesler_Sorter" (formula "49") (term "0") (inst "b=b_1"))
                                           (builtin "One Step Simplification" (formula "49"))
                                          (rule "expand_inInt" (formula "49") (term "1,0,0"))
                                          (rule "replace_int_MIN" (formula "49") (term "0,1,1,0,0"))
                                          (rule "replace_int_MAX" (formula "49") (term "1,0,1,0,0"))
                                          (rule "translateJavaAddInt" (formula "49") (term "0,2,5,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "49") (term "0,2,5,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "49") (term "1,0,0,0"))
                                          (rule "polySimp_mulAssoc" (formula "49") (term "1,0,0,1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "49") (term "0,1,0,0,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "49") (term "1,0,0,1,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "49") (term "0,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "49") (term "1,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "49") (term "1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "49") (term "1,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "49") (term "1,1,0,0,0"))
                                          (rule "mul_literals" (formula "49") (term "0,1,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "49") (term "1,1,1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "71") (term "0,0"))
                                          (rule "nnf_imp2or" (formula "55") (term "0"))
                                          (rule "commute_and" (formula "133"))
                                          (rule "nnf_imp2or" (formula "73") (term "0"))
                                          (rule "commuteUnion" (formula "64") (term "0,0,1"))
                                          (rule "commuteUnion" (formula "16") (term "1,0,0,1,0,0,1,0,0,1"))
                                          (rule "commuteUnion" (formula "14") (term "1,0,0,1,0,0,1,0"))
                                          (rule "commute_or" (formula "16") (term "1,0,0,0,1"))
                                          (rule "commute_or_2" (formula "15") (term "0,0"))
                                          (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "71") (term "0,1,0") (inst "i=i"))
                                           (builtin "One Step Simplification" (formula "71"))
                                          (rule "expand_inInt" (formula "71") (term "1,0,0,1,0"))
                                          (rule "replace_int_MIN" (formula "71") (term "0,1,1,0,0,1,0"))
                                          (rule "replace_int_MAX" (formula "71") (term "1,0,1,0,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "71") (term "1,1,0,0,0,1,0"))
                                          (rule "translateJavaAddInt" (formula "71") (term "0,2,1,1,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "71") (term "1,1,0,0,0,1,0"))
                                          (rule "mul_literals" (formula "71") (term "1,1,1,0,0,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "71") (term "0,2,1,1,0,1,0"))
                                          (rule "polySimp_addComm1" (formula "71") (term "1,1,0,0,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "71") (term "0,1,1,0,0,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "71") (term "1,0,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "71") (term "1,0,0,1,0,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "71") (term "0,1,0,0,1,0,0,0,1,0"))
                                          (rule "mul_literals" (formula "71") (term "0,0,1,0,0,1,0,0,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "71") (term "0,0,1,0,0,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "71") (term "0,0,0,1,0,0,0,1,0"))
                                          (rule "add_literals" (formula "71") (term "0,0,0,0,1,0,0,0,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "71") (term "0,0,0,0,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "71") (term "1,1,0,0,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "71") (term "1,0,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "71") (term "1,0,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "71") (term "1,1,0,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "71") (term "1,1,0,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "71") (term "1,1,1,0,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "71") (term "1,1,1,0,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "71") (term "0,1,1,0,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "71") (term "1,0,1,1,0,0,0,1,0"))
                                          (rule "mul_literals" (formula "71") (term "0,0,1,1,0,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "71") (term "1,0,1,1,0,0,0,1,0"))
                                          (rule "commute_or_2" (formula "14") (term "0,0"))
                                          (rule "cut_direct" (formula "11") (term "0"))
                                          (branch "CUT: result_242.equal_buckets = TRUE TRUE"
                                              (builtin "One Step Simplification" (formula "12"))
                                             (rule "replace_known_left" (formula "134") (term "0,0,0") (ifseqformula "11"))
                                              (builtin "One Step Simplification" (formula "134") (ifInst ""  (formula "11")))
                                             (rule "replace_known_left" (formula "17") (term "0") (ifseqformula "11"))
                                              (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "12")))
                                             (rule "replace_known_left" (formula "55") (term "0") (ifseqformula "11"))
                                              (builtin "One Step Simplification" (formula "55"))
                                             (rule "replace_known_left" (formula "75") (term "0") (ifseqformula "11"))
                                              (builtin "One Step Simplification" (formula "75"))
                                             (rule "inEqSimp_homoInEq0" (formula "134") (term "1"))
                                             (rule "mul_literals" (formula "134") (term "1,0,1"))
                                             (rule "polySimp_addComm1" (formula "134") (term "0,1"))
                                             (rule "add_literals" (formula "134") (term "0,0,1"))
                                             (rule "inEqSimp_homoInEq1" (formula "134") (term "0"))
                                             (rule "mul_literals" (formula "134") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "134") (term "0,0"))
                                             (rule "add_literals" (formula "134") (term "0,0,0"))
                                             (rule "applyEq" (formula "4") (term "0") (ifseqformula "12"))
                                             (rule "applyEqRigid" (formula "72") (term "1,1,0,0,0,0") (ifseqformula "12"))
                                             (rule "applyEq" (formula "1") (term "0") (ifseqformula "12"))
                                             (rule "inEqSimp_homoInEq0" (formula "1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                                             (rule "polySimp_addComm1" (formula "1") (term "0"))
                                             (rule "applyEq" (formula "74") (term "1,1,0,0,0,0,0") (ifseqformula "12"))
                                             (rule "applyEqRigid" (formula "14") (term "1,1,1,0,0,0") (ifseqformula "12"))
                                             (rule "applyEqRigid" (formula "8") (term "0") (ifseqformula "12"))
                                             (rule "inEqSimp_homoInEq1" (formula "8"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "1,0"))
                                             (rule "polySimp_pullOutFactor0" (formula "8") (term "0"))
                                             (rule "add_literals" (formula "8") (term "1,0"))
                                             (rule "times_zero_1" (formula "8") (term "0"))
                                             (rule "leq_literals" (formula "8"))
                                             (rule "true_left" (formula "8"))
                                             (rule "applyEq" (formula "9") (term "0,0") (ifseqformula "11"))
                                             (rule "applyEqRigid" (formula "8") (term "0") (ifseqformula "11"))
                                             (rule "inEqSimp_homoInEq0" (formula "8"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "1,0"))
                                             (rule "polySimp_pullOutFactor0b" (formula "8") (term "0"))
                                             (rule "add_literals" (formula "8") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "8") (term "1,0"))
                                             (rule "add_zero_right" (formula "8") (term "0"))
                                             (rule "qeq_literals" (formula "8"))
                                             (rule "true_left" (formula "8"))
                                             (rule "applyEqRigid" (formula "5") (term "0,0") (ifseqformula "10"))
                                             (rule "applyEqRigid" (formula "14") (term "1,1,0,0,0,0") (ifseqformula "10"))
                                             (rule "applyEq" (formula "15") (term "1,0,0,0,0,0") (ifseqformula "10"))
                                             (rule "applyEq" (formula "73") (term "1,1,0,0,0,0,0") (ifseqformula "10"))
                                             (rule "applyEqRigid" (formula "132") (term "0,1,0,0") (ifseqformula "10"))
                                             (rule "polySimp_mulLiterals" (formula "132") (term "1,0,0"))
                                             (rule "applyEqRigid" (formula "132") (term "0,1,0,1") (ifseqformula "10"))
                                             (rule "polySimp_mulLiterals" (formula "132") (term "1,0,1"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                             (rule "mul_literals" (formula "1") (term "0,1"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "132") (term "0"))
                                             (rule "polySimp_mulLiterals" (formula "132") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "132") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "132") (term "0,1"))
                                             (rule "inEqSimp_subsumption6" (formula "4") (ifseqformula "2"))
                                             (rule "times_zero_1" (formula "4") (term "1,1,0"))
                                             (rule "greater_literals" (formula "4") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "4"))
                                             (rule "leq_literals" (formula "4") (term "0"))
                                              (builtin "One Step Simplification" (formula "4"))
                                             (rule "true_left" (formula "4"))
                                             (rule "inEqSimp_subsumption6" (formula "1") (ifseqformula "6"))
                                             (rule "greater_literals" (formula "1") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                                             (rule "mul_literals" (formula "1") (term "0,1,0"))
                                             (rule "inEqSimp_homoInEq0" (formula "1") (term "0"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                             (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0,0,0"))
                                             (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
                                             (rule "add_literals" (formula "1") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "1") (term "0,0"))
                                             (rule "qeq_literals" (formula "1") (term "0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "true_left" (formula "1"))
                                             (rule "inEqSimp_subsumption6" (formula "130") (term "0") (ifseqformula "1"))
                                             (rule "greater_literals" (formula "130") (term "0,0,0"))
                                              (builtin "One Step Simplification" (formula "130"))
                                             (rule "times_zero_1" (formula "130") (term "1,0,0"))
                                             (rule "leq_literals" (formula "130") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "130"))
                                             (rule "inEqSimp_leqRight" (formula "130"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                             (rule "mul_literals" (formula "1") (term "1"))
                                             (rule "inEqSimp_contradInEq3" (formula "1") (ifseqformula "5"))
                                             (rule "mul_literals" (formula "1") (term "0,1,0"))
                                             (rule "greater_literals" (formula "1") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "qeq_literals" (formula "1") (term "0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                          (branch "CUT: result_242.equal_buckets = TRUE FALSE"
                                              (builtin "One Step Simplification" (formula "11"))
                                             (rule "true_left" (formula "11"))
                                             (rule "replace_known_right" (formula "73") (term "0") (ifseqformula "74"))
                                              (builtin "One Step Simplification" (formula "73"))
                                             (rule "true_left" (formula "73"))
                                             (rule "replace_known_right" (formula "132") (term "0,0,1") (ifseqformula "73"))
                                              (builtin "One Step Simplification" (formula "132") (ifInst ""  (formula "73")))
                                             (rule "replace_known_right" (formula "53") (term "0") (ifseqformula "73"))
                                              (builtin "One Step Simplification" (formula "53"))
                                             (rule "true_left" (formula "53"))
                                             (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "72"))
                                              (builtin "One Step Simplification" (formula "15"))
                                             (rule "true_left" (formula "15"))
                                             (rule "inEqSimp_homoInEq0" (formula "130") (term "1"))
                                             (rule "times_zero_2" (formula "130") (term "1,0,1"))
                                             (rule "add_zero_right" (formula "130") (term "0,1"))
                                             (rule "inEqSimp_homoInEq1" (formula "130") (term "0"))
                                             (rule "times_zero_2" (formula "130") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "130") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "130") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "130") (term "0,1"))
                                             (rule "polySimp_elimOne" (formula "130") (term "0,1"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "130") (term "0"))
                                             (rule "polySimp_mulLiterals" (formula "130") (term "0,0"))
                                             (rule "polySimp_elimOne" (formula "130") (term "0,0"))
                                             (rule "inEqSimp_subsumption1" (formula "130") (term "0") (ifseqformula "4"))
                                             (rule "leq_literals" (formula "130") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "130"))
                                             (rule "inEqSimp_leqRight" (formula "130"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                             (rule "mul_literals" (formula "1") (term "1"))
                                             (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "1"))
                                             (rule "leq_literals" (formula "5") (term "0"))
                                              (builtin "One Step Simplification" (formula "5"))
                                             (rule "true_left" (formula "5"))
                                             (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
                                             (rule "mul_literals" (formula "1") (term "0,0"))
                                             (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                             (rule "mul_literals" (formula "1") (term "1"))
                                             (rule "inEqSimp_contradInEq3" (formula "1") (ifseqformula "44"))
                                             (rule "mul_literals" (formula "1") (term "0,1,0"))
                                             (rule "greater_literals" (formula "1") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "qeq_literals" (formula "1") (term "0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                       )
                                       (branch "Usage"
                                           (builtin "One Step Simplification" (formula "78"))
                                          (rule "translateJavaAddInt" (formula "78") (term "0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "78") (term "0,1,0"))
                                          (rule "polySimp_addComm0" (formula "78") (term "0,0,1,0"))
                                          (rule "widening_identity_cast_5" (formula "78") (term "1"))
                                          (rule "assignment" (formula "78") (term "1"))
                                           (builtin "One Step Simplification" (formula "78"))
                                          (rule "blockEmpty" (formula "78") (term "1"))
                                          (rule "lsContinue" (formula "78") (term "1"))
                                           (builtin "One Step Simplification" (formula "78"))
                                          (rule "polySimp_mulComm0" (formula "78") (term "0,0"))
                                          (rule "polySimp_rightDist" (formula "78") (term "0,0"))
                                          (rule "polySimp_addComm1" (formula "78") (term "0"))
                                          (rule "polySimp_rightDist" (formula "78") (term "0,0,0"))
                                          (rule "mul_literals" (formula "78") (term "0,0,0,0"))
                                          (rule "polySimp_addComm1" (formula "78") (term "0,0"))
                                          (rule "precOfInt" (formula "78"))
                                          (rule "inEqSimp_ltToLeq" (formula "78") (term "1"))
                                          (rule "polySimp_rightDist" (formula "78") (term "1,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "78") (term "1,1,0,0,1"))
                                          (rule "polySimp_elimOne" (formula "78") (term "1,1,0,0,1"))
                                          (rule "polySimp_mulAssoc" (formula "78") (term "0,1,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "78") (term "0,0,1,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "78") (term "0,1,0,0,1"))
                                          (rule "polySimp_addAssoc" (formula "78") (term "0,0,1"))
                                          (rule "polySimp_addAssoc" (formula "78") (term "0,1"))
                                          (rule "polySimp_addAssoc" (formula "78") (term "0,0,1"))
                                          (rule "polySimp_addComm1" (formula "78") (term "0,0,0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "78") (term "0,0,1"))
                                          (rule "add_literals" (formula "78") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "78") (term "1,0,0,1"))
                                          (rule "add_zero_right" (formula "78") (term "0,0,1"))
                                          (rule "polySimp_addAssoc" (formula "78") (term "0,0,1"))
                                          (rule "polySimp_addComm1" (formula "78") (term "0,0,0,1"))
                                          (rule "add_literals" (formula "78") (term "0,0,0,0,1"))
                                          (rule "add_zero_left" (formula "78") (term "0,0,0,1"))
                                          (rule "polySimp_pullOutFactor0" (formula "78") (term "0,0,1"))
                                          (rule "add_literals" (formula "78") (term "1,0,0,1"))
                                          (rule "times_zero_1" (formula "78") (term "0,0,1"))
                                          (rule "add_zero_left" (formula "78") (term "0,1"))
                                          (rule "inEqSimp_homoInEq0" (formula "78") (term "0"))
                                          (rule "times_zero_2" (formula "78") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "78") (term "0,0"))
                                          (rule "inEqSimp_invertInEq0" (formula "78") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "78") (term "0,1"))
                                          (rule "times_zero_2" (formula "78") (term "1,1"))
                                          (rule "polySimp_elimOne" (formula "78") (term "0,1"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "78") (term "0"))
                                          (rule "polySimp_mulLiterals" (formula "78") (term "0,0"))
                                          (rule "polySimp_elimOne" (formula "78") (term "0,0"))
                                          (rule "Definition_axiom_for_allBucketsInRangeSorted_in_de_wiesler_Sorter" (formula "66") (term "0") (inst "b=b_1"))
                                           (builtin "One Step Simplification" (formula "66"))
                                          (rule "expand_inInt" (formula "66") (term "1,0,0"))
                                          (rule "replace_int_MAX" (formula "66") (term "1,0,1,0,0"))
                                          (rule "replace_int_MIN" (formula "66") (term "0,1,1,0,0"))
                                          (rule "translateJavaAddInt" (formula "66") (term "3,0,1,0"))
                                          (rule "translateJavaAddInt" (formula "66") (term "2,0,1,0"))
                                          (rule "translateJavaAddInt" (formula "66") (term "0,2,1,3,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "66") (term "0,2,1,3,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "66") (term "1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "66") (term "1,0,0,1,0,0,0"))
                                          (rule "mul_literals" (formula "66") (term "0,1,0,0,1,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "66") (term "0,0,1,0,0,0"))
                                          (rule "add_literals" (formula "66") (term "0,0,0,1,0,0,0"))
                                          (rule "add_zero_left" (formula "66") (term "0,0,1,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "66") (term "0,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "66") (term "1,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "66") (term "1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "66") (term "1,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "66") (term "1,1,0,0,0"))
                                          (rule "nnf_imp2or" (formula "66") (term "0"))
                                          (rule "nnf_notAnd" (formula "66") (term "0,0"))
                                          (rule "nnf_notAnd" (formula "66") (term "1,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "66") (term "0,1,0,0"))
                                          (rule "mul_literals" (formula "66") (term "1,0,0,0,1,0,0"))
                                          (rule "add_literals" (formula "66") (term "0,0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "66") (term "0,1,0,0"))
                                          (rule "mul_literals" (formula "66") (term "1,0,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "66") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "66") (term "1,0,0,1,1,0,0"))
                                          (rule "add_literals" (formula "66") (term "0,0,1,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "66") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "66") (term "1,1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "66") (term "0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "66") (term "0,0,0,0"))
                                          (rule "times_zero_1" (formula "66") (term "1,0,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "66") (term "0,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "66") (term "0,0,0,0"))
                                          (rule "mul_literals" (formula "66") (term "1,0,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "66") (term "1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "66") (term "1,0,0,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "66") (term "1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "66") (term "1,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "66") (term "1,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "66") (term "1,1,1,0,0,0"))
                                          (rule "mul_literals" (formula "66") (term "0,1,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "66") (term "1,1,1,0,0,0"))
                                          (rule "Definition_axiom_for_allBucketsPartitioned_in_de_wiesler_Sorter" (formula "50") (term "0") (inst "b=b_1"))
                                           (builtin "One Step Simplification" (formula "50"))
                                          (rule "expand_inInt" (formula "50") (term "1,0,0"))
                                          (rule "replace_int_MIN" (formula "50") (term "0,1,1,0,0"))
                                          (rule "replace_int_MAX" (formula "50") (term "1,0,1,0,0"))
                                          (rule "translateJavaAddInt" (formula "50") (term "0,2,5,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "50") (term "0,2,5,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "50") (term "1,0,0,0"))
                                          (rule "polySimp_mulAssoc" (formula "50") (term "1,0,0,1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "50") (term "0,1,0,0,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "50") (term "1,0,0,1,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "50") (term "0,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "50") (term "1,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "50") (term "1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "50") (term "1,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "50") (term "1,1,0,0,0"))
                                          (rule "mul_literals" (formula "50") (term "0,1,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "50") (term "1,1,1,0,0,0"))
                                          (rule "nnf_imp2or" (formula "50") (term "0"))
                                          (rule "nnf_notAnd" (formula "50") (term "0,0"))
                                          (rule "nnf_notAnd" (formula "50") (term "1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "50") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "50") (term "1,0,0,1,1,0,0"))
                                          (rule "add_literals" (formula "50") (term "0,0,1,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "50") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "50") (term "1,1,1,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "50") (term "0,1,0,0"))
                                          (rule "mul_literals" (formula "50") (term "1,0,0,0,1,0,0"))
                                          (rule "add_literals" (formula "50") (term "0,0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "50") (term "0,1,0,0"))
                                          (rule "mul_literals" (formula "50") (term "1,0,1,0,0"))
                                          (rule "nnf_notAnd" (formula "50") (term "0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "50") (term "1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "50") (term "1,0,0,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "50") (term "1,1,0,0,1,0,0,0"))
                                          (rule "mul_literals" (formula "50") (term "0,1,0,0,1,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "50") (term "0,0,1,0,0,0"))
                                          (rule "add_literals" (formula "50") (term "0,0,0,1,0,0,0"))
                                          (rule "add_zero_left" (formula "50") (term "0,0,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "50") (term "1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "50") (term "1,1,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "50") (term "0,0,0,0"))
                                          (rule "mul_literals" (formula "50") (term "1,0,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "50") (term "0,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "50") (term "0,0,0,0"))
                                          (rule "mul_literals" (formula "50") (term "1,0,0,0,0"))
                                          (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "58"))
                                          (rule "andLeft" (formula "58"))
                                          (rule "notLeft" (formula "59"))
                                          (rule "andLeft" (formula "58"))
                                          (rule "andLeft" (formula "58"))
                                          (rule "notLeft" (formula "60"))
                                          (rule "andLeft" (formula "58"))
                                          (rule "notLeft" (formula "60"))
                                          (rule "andLeft" (formula "58"))
                                          (rule "notLeft" (formula "60"))
                                          (rule "andLeft" (formula "58"))
                                          (rule "notLeft" (formula "60"))
                                          (rule "andLeft" (formula "58"))
                                          (rule "notLeft" (formula "60"))
                                          (rule "notLeft" (formula "58"))
                                          (rule "notLeft" (formula "58"))
                                          (rule "Definition_axiom_for_equalityBucketsInRange_in_de_wiesler_Sorter" (formula "55") (term "0,1") (inst "b=b_1"))
                                           (builtin "One Step Simplification" (formula "55"))
                                          (rule "expand_inInt" (formula "55") (term "1,0,0,1"))
                                          (rule "replace_int_MAX" (formula "55") (term "1,0,1,0,0,1"))
                                          (rule "replace_int_MIN" (formula "55") (term "0,1,1,0,0,1"))
                                          (rule "translateJavaAddInt" (formula "55") (term "3,0,1,0,1"))
                                          (rule "translateJavaAddInt" (formula "55") (term "2,0,1,0,1"))
                                          (rule "translateJavaMod" (formula "55") (term "0,1,0,0,0,1"))
                                          (rule "translateJavaAddInt" (formula "55") (term "0,2,1,3,0,1,0,1"))
                                          (rule "polySimp_addComm0" (formula "55") (term "0,2,1,3,0,1,0,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "55") (term "1,0,0,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "55") (term "1,0,0,1,0,0,0,0,1"))
                                          (rule "mul_literals" (formula "55") (term "0,1,0,0,1,0,0,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "55") (term "1,1,0,0,1,0,0,0,0,1"))
                                          (rule "polySimp_addAssoc" (formula "55") (term "0,0,1,0,0,0,0,1"))
                                          (rule "add_literals" (formula "55") (term "0,0,0,1,0,0,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "55") (term "0,0,0,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "55") (term "1,1,0,0,1"))
                                          (rule "jmod_axiom" (formula "55") (term "0,1,0,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "55") (term "1,0,1,0,0,0,1"))
                                          (rule "polySimp_homoEq" (formula "55") (term "1,0,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "55") (term "1,0,1,0,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "55") (term "1,0,1,0,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "55") (term "1,1,0,1,0,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "55") (term "0,1,0,1,0,0,0,1"))
                                          (rule "polySimp_addAssoc" (formula "55") (term "0,1,0,0,0,1"))
                                          (rule "polySimp_sepPosMonomial" (formula "55") (term "1,0,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "55") (term "1,1,0,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "55") (term "1,1,0,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "55") (term "1,1,1,0,0,0,1"))
                                          (rule "mul_literals" (formula "55") (term "0,1,1,0,0,0,1"))
                                          (rule "polySimp_elimOne" (formula "55") (term "1,1,1,0,0,0,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "55") (term "1,0,0,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "55") (term "1,1,0,0,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "55") (term "1,1,0,0,0,0,1"))
                                          (rule "mul_literals" (formula "55") (term "0,1,1,0,0,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "55") (term "1,1,1,0,0,0,0,1"))
                                          (rule "nnf_imp2or" (formula "55") (term "0,1"))
                                          (rule "nnf_notAnd" (formula "55") (term "0,0,1"))
                                          (rule "nnf_notAnd" (formula "55") (term "0,0,0,1"))
                                          (rule "nnf_notAnd" (formula "55") (term "1,0,0,1"))
                                          (rule "inEqSimp_notLeq" (formula "55") (term "0,1,0,0,1"))
                                          (rule "mul_literals" (formula "55") (term "1,0,0,0,1,0,0,1"))
                                          (rule "add_literals" (formula "55") (term "0,0,0,1,0,0,1"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "55") (term "0,1,0,0,1"))
                                          (rule "mul_literals" (formula "55") (term "1,0,1,0,0,1"))
                                          (rule "inEqSimp_notGeq" (formula "55") (term "1,1,0,0,1"))
                                          (rule "mul_literals" (formula "55") (term "1,0,0,1,1,0,0,1"))
                                          (rule "add_literals" (formula "55") (term "0,0,1,1,0,0,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "55") (term "1,1,0,0,1"))
                                          (rule "mul_literals" (formula "55") (term "1,1,1,0,0,1"))
                                          (rule "nnf_notAnd" (formula "55") (term "0,0,0,0,1"))
                                          (rule "inEqSimp_notGeq" (formula "55") (term "0,0,0,0,0,1"))
                                          (rule "mul_literals" (formula "55") (term "1,0,0,0,0,0,0,0,1"))
                                          (rule "add_literals" (formula "55") (term "0,0,0,0,0,0,0,1"))
                                          (rule "add_zero_left" (formula "55") (term "0,0,0,0,0,0,1"))
                                          (rule "inEqSimp_notLeq" (formula "55") (term "1,0,0,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "55") (term "1,0,0,1,0,0,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "55") (term "1,1,0,0,1,0,0,0,0,1"))
                                          (rule "mul_literals" (formula "55") (term "0,1,0,0,1,0,0,0,0,1"))
                                          (rule "polySimp_addAssoc" (formula "55") (term "0,0,1,0,0,0,0,1"))
                                          (rule "add_literals" (formula "55") (term "0,0,0,1,0,0,0,0,1"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "55") (term "1,0,0,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "55") (term "1,1,0,0,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "55") (term "1,1,0,0,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "55") (term "1,1,1,0,0,0,0,1"))
                                          (rule "mul_literals" (formula "55") (term "0,1,1,0,0,0,0,1"))
                                          (rule "Free_class_invariant_axiom_for_de_wiesler_Storage" (formula "32"))
                                           (builtin "One Step Simplification" (formula "32"))
                                          (rule "andLeft" (formula "32"))
                                          (rule "andLeft" (formula "32"))
                                          (rule "andLeft" (formula "34"))
                                          (rule "andLeft" (formula "32"))
                                          (rule "andLeft" (formula "35"))
                                          (rule "andLeft" (formula "32"))
                                          (rule "andLeft" (formula "36"))
                                          (rule "andLeft" (formula "32"))
                                          (rule "andLeft" (formula "37"))
                                          (rule "andLeft" (formula "32"))
                                          (rule "andLeft" (formula "38"))
                                          (rule "andLeft" (formula "32"))
                                          (rule "andLeft" (formula "39"))
                                          (rule "andLeft" (formula "32"))
                                          (rule "andLeft" (formula "40"))
                                          (rule "andLeft" (formula "32"))
                                          (rule "andLeft" (formula "41"))
                                          (rule "andLeft" (formula "41"))
                                          (rule "andLeft" (formula "41"))
                                          (rule "andLeft" (formula "41"))
                                          (rule "andLeft" (formula "41"))
                                          (rule "andLeft" (formula "41"))
                                          (rule "andLeft" (formula "41"))
                                          (rule "andLeft" (formula "41"))
                                          (rule "andLeft" (formula "41"))
                                          (rule "andLeft" (formula "41"))
                                          (rule "andLeft" (formula "41"))
                                          (rule "andLeft" (formula "41"))
                                          (rule "andLeft" (formula "41"))
                                          (rule "andLeft" (formula "41"))
                                          (rule "andLeft" (formula "41"))
                                          (rule "andLeft" (formula "41"))
                                          (rule "andLeft" (formula "41"))
                                          (rule "andLeft" (formula "41"))
                                          (rule "andLeft" (formula "41"))
                                          (rule "andLeft" (formula "41"))
                                          (rule "translateJavaMulInt" (formula "35") (term "1"))
                                          (rule "mul_literals" (formula "35") (term "1"))
                                          (rule "translateJavaMulInt" (formula "34") (term "1"))
                                          (rule "mul_literals" (formula "34") (term "1"))
                                          (rule "disjointDefinition" (formula "68"))
                                           (builtin "One Step Simplification" (formula "68"))
                                          (rule "notLeft" (formula "68"))
                                          (rule "disjointDefinition" (formula "67"))
                                           (builtin "One Step Simplification" (formula "67"))
                                          (rule "notLeft" (formula "67"))
                                          (rule "disjointDefinition" (formula "66"))
                                           (builtin "One Step Simplification" (formula "66"))
                                          (rule "notLeft" (formula "66"))
                                          (rule "eqSymm" (formula "104"))
                                          (rule "disjointDefinition" (formula "65"))
                                           (builtin "One Step Simplification" (formula "65"))
                                          (rule "notLeft" (formula "65"))
                                          (rule "eqSymm" (formula "103"))
                                          (rule "disjointDefinition" (formula "64"))
                                           (builtin "One Step Simplification" (formula "64"))
                                          (rule "notLeft" (formula "64"))
                                          (rule "eqSymm" (formula "102"))
                                          (rule "disjointDefinition" (formula "63"))
                                           (builtin "One Step Simplification" (formula "63"))
                                          (rule "notLeft" (formula "63"))
                                          (rule "eqSymm" (formula "101"))
                                          (rule "disjointDefinition" (formula "62"))
                                           (builtin "One Step Simplification" (formula "62"))
                                          (rule "notLeft" (formula "62"))
                                          (rule "eqSymm" (formula "100"))
                                          (rule "disjointDefinition" (formula "61"))
                                           (builtin "One Step Simplification" (formula "61"))
                                          (rule "notLeft" (formula "61"))
                                          (rule "eqSymm" (formula "99"))
                                          (rule "disjointDefinition" (formula "60"))
                                           (builtin "One Step Simplification" (formula "60"))
                                          (rule "notLeft" (formula "60"))
                                          (rule "eqSymm" (formula "98"))
                                          (rule "disjointDefinition" (formula "59"))
                                           (builtin "One Step Simplification" (formula "59"))
                                          (rule "notLeft" (formula "59"))
                                          (rule "eqSymm" (formula "97"))
                                          (rule "disjointDefinition" (formula "58"))
                                           (builtin "One Step Simplification" (formula "58"))
                                          (rule "notLeft" (formula "58"))
                                          (rule "eqSymm" (formula "96"))
                                          (rule "disjointDefinition" (formula "57"))
                                           (builtin "One Step Simplification" (formula "57"))
                                          (rule "notLeft" (formula "57"))
                                          (rule "eqSymm" (formula "95"))
                                          (rule "disjointDefinition" (formula "56"))
                                           (builtin "One Step Simplification" (formula "56"))
                                          (rule "notLeft" (formula "56"))
                                          (rule "eqSymm" (formula "94"))
                                          (rule "disjointDefinition" (formula "55"))
                                           (builtin "One Step Simplification" (formula "55"))
                                          (rule "notLeft" (formula "55"))
                                          (rule "eqSymm" (formula "93"))
                                          (rule "disjointDefinition" (formula "54"))
                                           (builtin "One Step Simplification" (formula "54"))
                                          (rule "notLeft" (formula "54"))
                                          (rule "eqSymm" (formula "92"))
                                          (rule "disjointDefinition" (formula "53"))
                                           (builtin "One Step Simplification" (formula "53"))
                                          (rule "notLeft" (formula "53"))
                                          (rule "disjointDefinition" (formula "52"))
                                           (builtin "One Step Simplification" (formula "52"))
                                          (rule "notLeft" (formula "52"))
                                          (rule "eqSymm" (formula "90"))
                                          (rule "disjointDefinition" (formula "51"))
                                           (builtin "One Step Simplification" (formula "51"))
                                          (rule "notLeft" (formula "51"))
                                          (rule "eqSymm" (formula "89"))
                                          (rule "disjointDefinition" (formula "50"))
                                           (builtin "One Step Simplification" (formula "50"))
                                          (rule "notLeft" (formula "50"))
                                          (rule "disjointDefinition" (formula "49"))
                                           (builtin "One Step Simplification" (formula "49"))
                                          (rule "notLeft" (formula "49"))
                                          (rule "disjointDefinition" (formula "48"))
                                           (builtin "One Step Simplification" (formula "48"))
                                          (rule "notLeft" (formula "48"))
                                          (rule "disjointDefinition" (formula "47"))
                                           (builtin "One Step Simplification" (formula "47"))
                                          (rule "notLeft" (formula "47"))
                                          (rule "disjointDefinition" (formula "46"))
                                           (builtin "One Step Simplification" (formula "46"))
                                          (rule "notLeft" (formula "46"))
                                          (rule "disjointDefinition" (formula "45"))
                                           (builtin "One Step Simplification" (formula "45"))
                                          (rule "notLeft" (formula "45"))
                                          (rule "disjointDefinition" (formula "44"))
                                           (builtin "One Step Simplification" (formula "44"))
                                          (rule "notLeft" (formula "44"))
                                          (rule "disjointDefinition" (formula "43"))
                                           (builtin "One Step Simplification" (formula "43"))
                                          (rule "notLeft" (formula "43"))
                                          (rule "disjointDefinition" (formula "42"))
                                           (builtin "One Step Simplification" (formula "42"))
                                          (rule "notLeft" (formula "42"))
                                          (rule "disjointDefinition" (formula "41"))
                                           (builtin "One Step Simplification" (formula "41"))
                                          (rule "notLeft" (formula "41"))
                                          (rule "applyEq" (formula "52") (term "1,0") (ifseqformula "40"))
                                          (rule "applyEq" (formula "72") (term "0,1,0,2,1") (ifseqformula "40"))
                                          (rule "applyEq" (formula "51") (term "1,0") (ifseqformula "40"))
                                          (rule "applyEq" (formula "54") (term "1,0,1,0") (ifseqformula "40"))
                                          (rule "applyEq" (formula "15") (term "0,1,0,0") (ifseqformula "40"))
                                          (rule "applyEq" (formula "70") (term "0,1,0,0") (ifseqformula "40"))
                                          (rule "applyEq" (formula "41") (term "1,0") (ifseqformula "40"))
                                          (rule "applyEq" (formula "16") (term "0,1,0,0,0,1") (ifseqformula "40"))
                                          (rule "applyEq" (formula "14") (term "0,1,0,0") (ifseqformula "40"))
                                          (rule "applyEq" (formula "12") (term "0,1,0,2,0") (ifseqformula "40"))
                                          (rule "applyEq" (formula "13") (term "0,1,0,0") (ifseqformula "40"))
                                          (rule "applyEq" (formula "70") (term "0,1,0") (ifseqformula "40"))
                                          (rule "distributeIntersection" (formula "52") (term "0"))
                                          (rule "distributeIntersection" (formula "51") (term "0"))
                                          (rule "distributeIntersection" (formula "41") (term "0"))
                                          (rule "distributeIntersection" (formula "52") (term "0,0"))
                                          (rule "distributeIntersection" (formula "52") (term "1,0"))
                                          (rule "unionEqualsEmpty" (formula "51"))
                                          (rule "andLeft" (formula "51"))
                                          (rule "distributeIntersection" (formula "41") (term "1,0"))
                                          (rule "distributeIntersection" (formula "41") (term "0,0"))
                                          (rule "distributeIntersection" (formula "53") (term "0,0,0"))
                                          (rule "distributeIntersection" (formula "53") (term "1,0,0"))
                                          (rule "distributeIntersection" (formula "53") (term "1,1,0"))
                                          (rule "distributeIntersection" (formula "53") (term "0,1,0"))
                                          (rule "distributeIntersection" (formula "52") (term "0"))
                                          (rule "distributeIntersection" (formula "51") (term "0"))
                                          (rule "distributeIntersection" (formula "41") (term "0,1,0"))
                                          (rule "distributeIntersection" (formula "41") (term "1,1,0"))
                                          (rule "distributeIntersection" (formula "41") (term "0,0,0"))
                                          (rule "distributeIntersection" (formula "41") (term "1,0,0"))
                                          (rule "unionEqualsEmpty" (formula "53"))
                                          (rule "andLeft" (formula "53"))
                                          (rule "distributeIntersection" (formula "52") (term "0,0"))
                                          (rule "distributeIntersection" (formula "52") (term "1,0"))
                                          (rule "distributeIntersection" (formula "51") (term "0,0"))
                                          (rule "distributeIntersection" (formula "51") (term "1,0"))
                                          (rule "unionEqualsEmpty" (formula "41"))
                                          (rule "andLeft" (formula "41"))
                                          (rule "unionEqualsEmpty" (formula "55"))
                                          (rule "andLeft" (formula "55"))
                                          (rule "unionEqualsEmpty" (formula "54"))
                                          (rule "andLeft" (formula "54"))
                                          (rule "unionEqualsEmpty" (formula "53"))
                                          (rule "andLeft" (formula "53"))
                                          (rule "unionEqualsEmpty" (formula "52"))
                                          (rule "andLeft" (formula "52"))
                                          (rule "unionEqualsEmpty" (formula "41"))
                                          (rule "andLeft" (formula "41"))
                                          (rule "unionEqualsEmpty" (formula "43"))
                                          (rule "andLeft" (formula "43"))
                                          (rule "unionEqualsEmpty" (formula "61"))
                                           (builtin "One Step Simplification" (formula "61"))
                                          (rule "andLeft" (formula "61"))
                                          (rule "notLeft" (formula "61"))
                                          (rule "notLeft" (formula "61"))
                                          (rule "eqSymm" (formula "88"))
                                          (rule "eqSymm" (formula "87"))
                                          (rule "sortsDisjointModuloNull" (formula "88"))
                                          (rule "replace_known_right" (formula "88") (term "1") (ifseqformula "129"))
                                           (builtin "One Step Simplification" (formula "88") (ifInst ""  (formula "123")))
                                          (rule "false_right" (formula "88"))
                                          (rule "sortsDisjointModuloNull" (formula "87"))
                                          (rule "replace_known_right" (formula "87") (term "0") (ifseqformula "123"))
                                           (builtin "One Step Simplification" (formula "87") (ifInst ""  (formula "128")))
                                          (rule "false_right" (formula "87"))
                                          (rule "unionEqualsEmpty" (formula "60"))
                                           (builtin "One Step Simplification" (formula "60"))
                                          (rule "andLeft" (formula "60"))
                                          (rule "notLeft" (formula "60"))
                                          (rule "notLeft" (formula "60"))
                                          (rule "eqSymm" (formula "87"))
                                          (rule "eqSymm" (formula "86"))
                                          (rule "sortsDisjointModuloNull" (formula "87"))
                                          (rule "replace_known_right" (formula "87") (term "1") (ifseqformula "128"))
                                           (builtin "One Step Simplification" (formula "87") (ifInst ""  (formula "120")))
                                          (rule "false_right" (formula "87"))
                                          (rule "sortsDisjointModuloNull" (formula "86"))
                                          (rule "replace_known_right" (formula "86") (term "1") (ifseqformula "127"))
                                           (builtin "One Step Simplification" (formula "86") (ifInst ""  (formula "120")))
                                          (rule "false_right" (formula "86"))
                                          (rule "unionEqualsEmpty" (formula "59"))
                                           (builtin "One Step Simplification" (formula "59"))
                                          (rule "andLeft" (formula "59"))
                                          (rule "notLeft" (formula "59"))
                                          (rule "notLeft" (formula "59"))
                                          (rule "eqSymm" (formula "86"))
                                          (rule "eqSymm" (formula "85"))
                                          (rule "sortsDisjointModuloNull" (formula "86"))
                                          (rule "replace_known_right" (formula "86") (term "0") (ifseqformula "117"))
                                           (builtin "One Step Simplification" (formula "86") (ifInst ""  (formula "127")))
                                          (rule "false_right" (formula "86"))
                                          (rule "sortsDisjointModuloNull" (formula "85"))
                                          (rule "replace_known_right" (formula "85") (term "0") (ifseqformula "117"))
                                           (builtin "One Step Simplification" (formula "85") (ifInst ""  (formula "126")))
                                          (rule "false_right" (formula "85"))
                                          (rule "unionEqualsEmpty" (formula "58"))
                                           (builtin "One Step Simplification" (formula "58"))
                                          (rule "andLeft" (formula "58"))
                                          (rule "notLeft" (formula "58"))
                                          (rule "notLeft" (formula "58"))
                                          (rule "eqSymm" (formula "85"))
                                          (rule "eqSymm" (formula "84"))
                                          (rule "sortsDisjointModuloNull" (formula "85"))
                                          (rule "replace_known_right" (formula "85") (term "0") (ifseqformula "115"))
                                           (builtin "One Step Simplification" (formula "85") (ifInst ""  (formula "126")))
                                          (rule "false_right" (formula "85"))
                                          (rule "sortsDisjointModuloNull" (formula "84"))
                                          (rule "replace_known_right" (formula "84") (term "1") (ifseqformula "125"))
                                           (builtin "One Step Simplification" (formula "84") (ifInst ""  (formula "113")))
                                          (rule "false_right" (formula "84"))
                                          (rule "unionEqualsEmpty" (formula "56"))
                                           (builtin "One Step Simplification" (formula "56"))
                                          (rule "andLeft" (formula "56"))
                                          (rule "notLeft" (formula "57"))
                                          (rule "notLeft" (formula "56"))
                                          (rule "eqSymm" (formula "84"))
                                          (rule "eqSymm" (formula "83"))
                                          (rule "unionEqualsEmpty" (formula "56"))
                                           (builtin "One Step Simplification" (formula "56"))
                                          (rule "andLeft" (formula "56"))
                                          (rule "notLeft" (formula "57"))
                                          (rule "notLeft" (formula "56"))
                                          (rule "eqSymm" (formula "83"))
                                          (rule "eqSymm" (formula "82"))
                                          (rule "unionEqualsEmpty" (formula "54"))
                                           (builtin "One Step Simplification" (formula "54"))
                                          (rule "andLeft" (formula "54"))
                                          (rule "notLeft" (formula "54"))
                                          (rule "notLeft" (formula "54"))
                                          (rule "eqSymm" (formula "82"))
                                          (rule "eqSymm" (formula "81"))
                                          (rule "unionEqualsEmpty" (formula "54"))
                                           (builtin "One Step Simplification" (formula "54"))
                                          (rule "andLeft" (formula "54"))
                                          (rule "notLeft" (formula "55"))
                                          (rule "notLeft" (formula "54"))
                                          (rule "eqSymm" (formula "81"))
                                          (rule "eqSymm" (formula "80"))
                                          (rule "unionEqualsEmpty" (formula "42"))
                                           (builtin "One Step Simplification" (formula "42"))
                                          (rule "andLeft" (formula "42"))
                                          (rule "notLeft" (formula "42"))
                                          (rule "notLeft" (formula "42"))
                                          (rule "eqSymm" (formula "80"))
                                          (rule "eqSymm" (formula "79"))
                                          (rule "unionEqualsEmpty" (formula "41"))
                                           (builtin "One Step Simplification" (formula "41"))
                                          (rule "andLeft" (formula "41"))
                                          (rule "notLeft" (formula "41"))
                                          (rule "notLeft" (formula "41"))
                                          (rule "eqSymm" (formula "79"))
                                          (rule "eqSymm" (formula "78"))
                                          (rule "unionEqualsEmpty" (formula "42"))
                                           (builtin "One Step Simplification" (formula "42"))
                                          (rule "andLeft" (formula "42"))
                                          (rule "notLeft" (formula "42"))
                                          (rule "notLeft" (formula "42"))
                                          (rule "eqSymm" (formula "78"))
                                          (rule "eqSymm" (formula "77"))
                                          (rule "unionEqualsEmpty" (formula "41"))
                                           (builtin "One Step Simplification" (formula "41"))
                                          (rule "andLeft" (formula "41"))
                                          (rule "notLeft" (formula "42"))
                                          (rule "notLeft" (formula "41"))
                                          (rule "eqSymm" (formula "77"))
                                          (rule "eqSymm" (formula "76"))
                                          (rule "commuteUnion_2" (formula "40") (term "0,1"))
                                          (rule "commuteUnion" (formula "40") (term "1,1,1"))
                                          (rule "commuteUnion_2" (formula "69") (term "0,0,1,0,2,1"))
                                          (rule "commuteUnion" (formula "69") (term "1,1,0,1,0,2,1"))
                                          (rule "commuteUnion" (formula "51") (term "0,0,1,0,1,0"))
                                          (rule "commuteUnion" (formula "51") (term "1,1,1,0,1,0"))
                                          (rule "commuteUnion" (formula "15") (term "0,0,0,1,0,0"))
                                          (rule "commuteUnion" (formula "15") (term "1,1,0,1,0,0"))
                                          (rule "commuteUnion_2" (formula "67") (term "0,0,1,0,0"))
                                          (rule "commuteUnion" (formula "67") (term "1,1,0,1,0,0"))
                                          (rule "commuteUnion" (formula "16") (term "0,0,0,1,0,0,0,1"))
                                          (rule "commuteUnion" (formula "16") (term "1,1,0,1,0,0,0,1"))
                                          (rule "commuteUnion_2" (formula "14") (term "0,0,1,0,0"))
                                          (rule "commuteUnion" (formula "14") (term "1,1,0,1,0,0"))
                                          (rule "commuteUnion" (formula "12") (term "1,1,0,1,0,2,0"))
                                          (rule "commuteUnion_2" (formula "12") (term "0,0,1,0,2,0"))
                                          (rule "commuteUnion" (formula "13") (term "0,0,1,0,0"))
                                          (rule "commuteUnion" (formula "13") (term "1,1,0,1,0,0"))
                                          (rule "commuteUnion" (formula "67") (term "1,1,0,1,0"))
                                          (rule "commuteUnion" (formula "67") (term "0,0,1,0"))
                                          (rule "commuteUnion" (formula "40") (term "0,0,1"))
                                          (rule "commuteUnion" (formula "69") (term "0,0,0,1,0,2,1"))
                                          (rule "commuteUnion" (formula "51") (term "0,1,0,1,0"))
                                          (rule "commuteUnion" (formula "15") (term "0,0,1,0,0"))
                                          (rule "commuteUnion" (formula "67") (term "0,0,0,1,0,0"))
                                          (rule "commuteUnion_2" (formula "16") (term "0,0,1,0,0,0,1"))
                                          (rule "commuteUnion" (formula "14") (term "0,0,0,1,0,0"))
                                          (rule "commuteUnion" (formula "12") (term "0,0,0,1,0,2,0"))
                                          (rule "commuteUnion" (formula "13") (term "1,0,0,1,0,0"))
                                          (rule "commuteUnion" (formula "67") (term "1,0,0,1,0"))
                                          (rule "commuteUnion_2" (formula "40") (term "0,1"))
                                          (rule "commuteUnion_2" (formula "69") (term "0,0,1,0,2,1"))
                                          (rule "Definition_axiom_for_smallBucketsInRangeSorted_in_de_wiesler_Sorter" (formula "72") (term "0") (inst "b=b_1"))
                                           (builtin "One Step Simplification" (formula "72"))
                                          (rule "expand_inInt" (formula "72") (term "1,0,0"))
                                          (rule "replace_int_MIN" (formula "72") (term "0,1,1,0,0"))
                                          (rule "replace_int_MAX" (formula "72") (term "1,0,1,0,0"))
                                          (rule "translateJavaAddInt" (formula "72") (term "0,2,5,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "72") (term "0,2,5,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "72") (term "1,0,0,0"))
                                          (rule "polySimp_mulAssoc" (formula "72") (term "1,0,0,1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "72") (term "0,1,0,0,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "72") (term "1,0,0,1,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "72") (term "0,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "72") (term "1,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "72") (term "1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "72") (term "1,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "72") (term "1,1,0,0,0"))
                                          (rule "mul_literals" (formula "72") (term "0,1,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "72") (term "1,1,1,0,0,0"))
                                          (rule "Definition_axiom_for_isValidBucketStarts_in_de_wiesler_Functions" (formula "54") (term "0"))
                                           (builtin "One Step Simplification" (formula "54"))
                                          (rule "andLeft" (formula "54"))
                                          (rule "andLeft" (formula "54"))
                                          (rule "andLeft" (formula "54"))
                                          (rule "translateJavaAddInt" (formula "56") (term "3,0"))
                                          (rule "translateJavaAddInt" (formula "55") (term "0"))
                                          (rule "polySimp_addComm0" (formula "56") (term "3,0"))
                                          (rule "polySimp_addComm0" (formula "55") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "54"))
                                          (rule "inEqSimp_commuteLeq" (formula "55"))
                                          (rule "applyEq" (formula "55") (term "0") (ifseqformula "44"))
                                          (rule "inEqSimp_homoInEq1" (formula "55"))
                                          (rule "mul_literals" (formula "55") (term "1,0"))
                                          (rule "polySimp_addComm1" (formula "55") (term "0"))
                                          (rule "add_literals" (formula "55") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "55"))
                                          (rule "mul_literals" (formula "55") (term "1"))
                                          (rule "inEqSimp_subsumption6" (formula "54") (ifseqformula "3"))
                                          (rule "mul_literals" (formula "54") (term "1,1,0"))
                                          (rule "greater_literals" (formula "54") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "54"))
                                          (rule "leq_literals" (formula "54") (term "0"))
                                           (builtin "One Step Simplification" (formula "54"))
                                          (rule "true_left" (formula "54"))
                                          (rule "elimGcdLeq_antec" (formula "54") (inst "elimGcdRightDiv=Z(6(5(2(#))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                                          (rule "neg_literal" (formula "54") (term "0,0,0,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "54") (term "1,0,1,0"))
                                          (rule "leq_literals" (formula "54") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "54"))
                                          (rule "polySimp_mulLiterals" (formula "54") (term "1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "54") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "54") (term "0,0,0,0,0"))
                                          (rule "add_literals" (formula "54") (term "0,0,0,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "54") (term "0,0"))
                                          (rule "add_literals" (formula "54") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "54") (term "1,0,0"))
                                          (rule "add_literals" (formula "54") (term "0,0"))
                                          (rule "qeq_literals" (formula "54") (term "0"))
                                           (builtin "One Step Simplification" (formula "54"))
                                          (rule "inEqSimp_subsumption0" (formula "67") (ifseqformula "54"))
                                          (rule "leq_literals" (formula "67") (term "0"))
                                           (builtin "One Step Simplification" (formula "67"))
                                          (rule "true_left" (formula "67"))
                                          (rule "pullOutSelect" (formula "56") (term "0") (inst "selectSK=arr_1"))
                                          (rule "simplifySelectOfAnonEQ" (formula "56") (ifseqformula "51"))
                                           (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "133")))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "56") (term "0,0,1,0,0") (ifseqformula "42"))
                                          (rule "replace_known_right" (formula "56") (term "0,0,0,1,0,0") (ifseqformula "132"))
                                           (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "43")))
                                          (rule "applyEq" (formula "56") (term "1") (ifseqformula "57"))
                                          (rule "ifEqualsInteger" (formula "56"))
                                          (rule "elementOfUnion" (formula "56") (term "0,0"))
                                          (rule "elementOfArrayRangeConcrete" (formula "56") (term "1,0,0"))
                                          (rule "eqSymm" (formula "56") (term "0,0,1,0,0"))
                                          (rule "replace_known_right" (formula "56") (term "0,0,1,0,0") (ifseqformula "131"))
                                           (builtin "One Step Simplification" (formula "56"))
                                          (rule "elementOfUnion" (formula "56") (term "0,0,1"))
                                          (rule "elementOfArrayRangeConcrete" (formula "56") (term "1,0,0,1"))
                                          (rule "eqSymm" (formula "56") (term "0,0,1,0,0,1"))
                                          (rule "replace_known_right" (formula "56") (term "0,0,1,0,0,1") (ifseqformula "131"))
                                           (builtin "One Step Simplification" (formula "56"))
                                          (rule "elementOfUnion" (formula "56") (term "0,0,1"))
                                           (builtin "One Step Simplification" (formula "56"))
                                          (rule "andLeft" (formula "56"))
                                          (rule "elementOfUnion" (formula "56"))
                                           (builtin "One Step Simplification" (formula "56"))
                                          (rule "true_left" (formula "56"))
                                          (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "54"))
                                          (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                                          (rule "mul_literals" (formula "7") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "7") (term "0"))
                                          (rule "add_literals" (formula "7") (term "0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "7"))
                                          (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                                          (rule "polySimp_elimOne" (formula "7") (term "0"))
                                          (rule "inEqSimp_subsumption0" (formula "6") (ifseqformula "7"))
                                          (rule "leq_literals" (formula "6") (term "0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "Definition_axiom_for_equalityBucketsInRange_in_de_wiesler_Sorter" (formula "75") (term "0,1") (inst "b=b_1"))
                                           (builtin "One Step Simplification" (formula "75"))
                                          (rule "expand_inInt" (formula "75") (term "1,0,0,1"))
                                          (rule "replace_int_MAX" (formula "75") (term "1,0,1,0,0,1"))
                                          (rule "replace_int_MIN" (formula "75") (term "0,1,1,0,0,1"))
                                          (rule "translateJavaAddInt" (formula "75") (term "2,0,1,0,1"))
                                          (rule "translateJavaAddInt" (formula "75") (term "3,0,1,0,1"))
                                          (rule "translateJavaMod" (formula "75") (term "0,1,0,0,0,1"))
                                          (rule "translateJavaAddInt" (formula "75") (term "0,2,1,3,0,1,0,1"))
                                          (rule "polySimp_addComm0" (formula "75") (term "0,2,1,3,0,1,0,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "75") (term "1,0,0,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "75") (term "1,0,0,1,0,0,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "75") (term "1,1,0,0,1,0,0,0,0,1"))
                                          (rule "mul_literals" (formula "75") (term "0,1,0,0,1,0,0,0,0,1"))
                                          (rule "polySimp_addAssoc" (formula "75") (term "0,0,1,0,0,0,0,1"))
                                          (rule "add_literals" (formula "75") (term "0,0,0,1,0,0,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "75") (term "0,0,0,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "75") (term "1,1,0,0,1"))
                                          (rule "jmod_axiom" (formula "75") (term "0,1,0,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "75") (term "1,0,1,0,0,0,1"))
                                          (rule "polySimp_homoEq" (formula "75") (term "1,0,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "75") (term "1,0,1,0,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "75") (term "1,0,1,0,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "75") (term "1,1,0,1,0,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "75") (term "0,1,0,1,0,0,0,1"))
                                          (rule "polySimp_addAssoc" (formula "75") (term "0,1,0,0,0,1"))
                                          (rule "polySimp_sepPosMonomial" (formula "75") (term "1,0,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "75") (term "1,1,0,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "75") (term "1,1,0,0,0,1"))
                                          (rule "mul_literals" (formula "75") (term "0,1,1,0,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "75") (term "1,1,1,0,0,0,1"))
                                          (rule "polySimp_elimOne" (formula "75") (term "1,1,1,0,0,0,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "75") (term "1,0,0,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "75") (term "1,1,0,0,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "75") (term "1,1,0,0,0,0,1"))
                                          (rule "mul_literals" (formula "75") (term "0,1,1,0,0,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "75") (term "1,1,1,0,0,0,0,1"))
                                          (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "77"))
                                          (rule "andLeft" (formula "77"))
                                          (rule "notLeft" (formula "78"))
                                          (rule "andLeft" (formula "77"))
                                          (rule "notLeft" (formula "78"))
                                          (rule "andLeft" (formula "77"))
                                          (rule "notLeft" (formula "78"))
                                          (rule "andLeft" (formula "77"))
                                          (rule "andLeft" (formula "77"))
                                          (rule "notLeft" (formula "79"))
                                          (rule "notLeft" (formula "78"))
                                          (rule "andLeft" (formula "77"))
                                          (rule "andLeft" (formula "77"))
                                          (rule "notLeft" (formula "79"))
                                          (rule "notLeft" (formula "77"))
                                          (rule "notLeft" (formula "77"))
                                          (rule "Free_class_invariant_axiom_for_de_wiesler_Storage" (formula "76"))
                                           (builtin "One Step Simplification" (formula "76") (ifInst ""  (formula "32")) (ifInst ""  (formula "33")) (ifInst ""  (formula "36")) (ifInst ""  (formula "37")) (ifInst ""  (formula "38")) (ifInst ""  (formula "39")))
                                          (rule "andLeft" (formula "76"))
                                          (rule "andLeft" (formula "76"))
                                          (rule "andLeft" (formula "78"))
                                          (rule "andLeft" (formula "76"))
                                          (rule "andLeft" (formula "79"))
                                          (rule "andLeft" (formula "79"))
                                          (rule "andLeft" (formula "79"))
                                          (rule "andLeft" (formula "79"))
                                          (rule "andLeft" (formula "79"))
                                          (rule "andLeft" (formula "79"))
                                          (rule "andLeft" (formula "79"))
                                          (rule "andLeft" (formula "79"))
                                          (rule "andLeft" (formula "79"))
                                          (rule "andLeft" (formula "79"))
                                          (rule "andLeft" (formula "79"))
                                          (rule "andLeft" (formula "79"))
                                          (rule "andLeft" (formula "79"))
                                          (rule "andLeft" (formula "79"))
                                          (rule "andLeft" (formula "79"))
                                          (rule "andLeft" (formula "79"))
                                          (rule "andLeft" (formula "79"))
                                          (rule "andLeft" (formula "79"))
                                          (rule "andLeft" (formula "79"))
                                          (rule "andLeft" (formula "79"))
                                          (rule "andLeft" (formula "79"))
                                          (rule "andLeft" (formula "79"))
                                          (rule "andLeft" (formula "79"))
                                          (rule "andLeft" (formula "79"))
                                          (rule "andLeft" (formula "79"))
                                          (rule "andLeft" (formula "79"))
                                          (rule "translateJavaMulInt" (formula "76") (term "1"))
                                          (rule "mul_literals" (formula "76") (term "1"))
                                          (rule "translateJavaMulInt" (formula "76") (term "1"))
                                          (rule "mul_literals" (formula "76") (term "1"))
                                          (rule "disjointDefinition" (formula "104"))
                                           (builtin "One Step Simplification" (formula "104") (ifInst ""  (formula "148")))
                                          (rule "true_left" (formula "104"))
                                          (rule "disjointDefinition" (formula "103"))
                                           (builtin "One Step Simplification" (formula "103") (ifInst ""  (formula "146")))
                                          (rule "true_left" (formula "103"))
                                          (rule "disjointDefinition" (formula "102"))
                                           (builtin "One Step Simplification" (formula "102"))
                                          (rule "notLeft" (formula "102"))
                                          (rule "eqSymm" (formula "102"))
                                          (rule "disjointDefinition" (formula "101"))
                                           (builtin "One Step Simplification" (formula "101"))
                                          (rule "notLeft" (formula "101"))
                                          (rule "eqSymm" (formula "101"))
                                          (rule "disjointDefinition" (formula "100"))
                                           (builtin "One Step Simplification" (formula "100"))
                                          (rule "notLeft" (formula "100"))
                                          (rule "eqSymm" (formula "100"))
                                          (rule "disjointDefinition" (formula "99"))
                                           (builtin "One Step Simplification" (formula "99"))
                                          (rule "notLeft" (formula "99"))
                                          (rule "eqSymm" (formula "99"))
                                          (rule "disjointDefinition" (formula "98"))
                                           (builtin "One Step Simplification" (formula "98"))
                                          (rule "notLeft" (formula "98"))
                                          (rule "eqSymm" (formula "98"))
                                          (rule "disjointDefinition" (formula "97"))
                                           (builtin "One Step Simplification" (formula "97"))
                                          (rule "notLeft" (formula "97"))
                                          (rule "eqSymm" (formula "97"))
                                          (rule "disjointDefinition" (formula "96"))
                                           (builtin "One Step Simplification" (formula "96"))
                                          (rule "notLeft" (formula "96"))
                                          (rule "eqSymm" (formula "96"))
                                          (rule "disjointDefinition" (formula "95"))
                                           (builtin "One Step Simplification" (formula "95"))
                                          (rule "notLeft" (formula "95"))
                                          (rule "eqSymm" (formula "95"))
                                          (rule "disjointDefinition" (formula "94"))
                                           (builtin "One Step Simplification" (formula "94"))
                                          (rule "notLeft" (formula "94"))
                                          (rule "eqSymm" (formula "94"))
                                          (rule "disjointDefinition" (formula "93"))
                                           (builtin "One Step Simplification" (formula "93"))
                                          (rule "notLeft" (formula "93"))
                                          (rule "eqSymm" (formula "93"))
                                          (rule "disjointDefinition" (formula "92"))
                                           (builtin "One Step Simplification" (formula "92"))
                                          (rule "notLeft" (formula "92"))
                                          (rule "eqSymm" (formula "92"))
                                          (rule "disjointDefinition" (formula "91"))
                                           (builtin "One Step Simplification" (formula "91"))
                                          (rule "notLeft" (formula "91"))
                                          (rule "eqSymm" (formula "91"))
                                          (rule "disjointDefinition" (formula "90"))
                                           (builtin "One Step Simplification" (formula "90"))
                                          (rule "notLeft" (formula "90"))
                                          (rule "eqSymm" (formula "90"))
                                          (rule "disjointDefinition" (formula "89"))
                                           (builtin "One Step Simplification" (formula "89") (ifInst ""  (formula "118")))
                                          (rule "true_left" (formula "89"))
                                          (rule "disjointDefinition" (formula "88"))
                                           (builtin "One Step Simplification" (formula "88"))
                                          (rule "notLeft" (formula "88"))
                                          (rule "eqSymm" (formula "88"))
                                          (rule "disjointDefinition" (formula "87"))
                                           (builtin "One Step Simplification" (formula "87"))
                                          (rule "notLeft" (formula "87"))
                                          (rule "eqSymm" (formula "87"))
                                          (rule "disjointDefinition" (formula "86"))
                                           (builtin "One Step Simplification" (formula "86") (ifInst ""  (formula "112")))
                                          (rule "true_left" (formula "86"))
                                          (rule "disjointDefinition" (formula "85"))
                                           (builtin "One Step Simplification" (formula "85") (ifInst ""  (formula "110")))
                                          (rule "true_left" (formula "85"))
                                          (rule "disjointDefinition" (formula "84"))
                                           (builtin "One Step Simplification" (formula "84") (ifInst ""  (formula "108")))
                                          (rule "true_left" (formula "84"))
                                          (rule "disjointDefinition" (formula "83"))
                                           (builtin "One Step Simplification" (formula "83") (ifInst ""  (formula "106")))
                                          (rule "true_left" (formula "83"))
                                          (rule "disjointDefinition" (formula "82"))
                                           (builtin "One Step Simplification" (formula "82") (ifInst ""  (formula "104")))
                                          (rule "true_left" (formula "82"))
                                          (rule "disjointDefinition" (formula "81"))
                                           (builtin "One Step Simplification" (formula "81") (ifInst ""  (formula "102")))
                                          (rule "true_left" (formula "81"))
                                          (rule "disjointDefinition" (formula "80"))
                                           (builtin "One Step Simplification" (formula "80") (ifInst ""  (formula "100")))
                                          (rule "true_left" (formula "80"))
                                          (rule "disjointDefinition" (formula "79"))
                                           (builtin "One Step Simplification" (formula "79") (ifInst ""  (formula "98")))
                                          (rule "true_left" (formula "79"))
                                          (rule "disjointDefinition" (formula "78"))
                                           (builtin "One Step Simplification" (formula "78") (ifInst ""  (formula "96")))
                                          (rule "true_left" (formula "78"))
                                          (rule "disjointDefinition" (formula "77"))
                                           (builtin "One Step Simplification" (formula "77") (ifInst ""  (formula "94")))
                                          (rule "true_left" (formula "77"))
                                          (rule "applyEq" (formula "76") (term "0") (ifseqformula "40"))
                                          (rule "eqSymm" (formula "76"))
                                          (rule "Definition_axiom_for_smallBucketsInRangeSorted_in_de_wiesler_Sorter" (formula "59") (term "0") (inst "b=b_1"))
                                           (builtin "One Step Simplification" (formula "59"))
                                          (rule "expand_inInt" (formula "59") (term "1,0,0"))
                                          (rule "replace_int_MIN" (formula "59") (term "0,1,1,0,0"))
                                          (rule "replace_int_MAX" (formula "59") (term "1,0,1,0,0"))
                                          (rule "translateJavaAddInt" (formula "59") (term "0,2,5,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "59") (term "0,2,5,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "59") (term "1,0,0,0"))
                                          (rule "polySimp_mulAssoc" (formula "59") (term "1,0,0,1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "59") (term "0,1,0,0,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "59") (term "1,0,0,1,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "59") (term "0,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "59") (term "1,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "59") (term "1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "59") (term "1,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "59") (term "1,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "59") (term "1,1,1,0,0,0"))
                                          (rule "mul_literals" (formula "59") (term "0,1,1,0,0,0"))
                                          (rule "Definition_axiom_for_allBucketsPartitioned_in_de_wiesler_Sorter" (formula "73") (term "0") (inst "b=b_1"))
                                           (builtin "One Step Simplification" (formula "73"))
                                          (rule "expand_inInt" (formula "73") (term "1,0,0"))
                                          (rule "replace_int_MIN" (formula "73") (term "0,1,1,0,0"))
                                          (rule "replace_int_MAX" (formula "73") (term "1,0,1,0,0"))
                                          (rule "translateJavaAddInt" (formula "73") (term "0,2,5,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "73") (term "0,2,5,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "73") (term "1,0,0,0"))
                                          (rule "polySimp_mulAssoc" (formula "73") (term "1,0,0,1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "73") (term "0,1,0,0,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "73") (term "1,0,0,1,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "73") (term "0,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "73") (term "1,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "73") (term "1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "73") (term "1,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "73") (term "1,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "73") (term "1,1,1,0,0,0"))
                                          (rule "mul_literals" (formula "73") (term "0,1,1,0,0,0"))
                                          (rule "Free_class_invariant_axiom_for_de_wiesler_Storage" (formula "65"))
                                           (builtin "One Step Simplification" (formula "65") (ifInst ""  (formula "32")) (ifInst ""  (formula "33")) (ifInst ""  (formula "36")) (ifInst ""  (formula "37")) (ifInst ""  (formula "38")) (ifInst ""  (formula "39")))
                                          (rule "andLeft" (formula "65"))
                                          (rule "andLeft" (formula "66"))
                                          (rule "andLeft" (formula "65"))
                                          (rule "andLeft" (formula "67"))
                                          (rule "andLeft" (formula "65"))
                                          (rule "andLeft" (formula "68"))
                                          (rule "andLeft" (formula "68"))
                                          (rule "andLeft" (formula "68"))
                                          (rule "andLeft" (formula "68"))
                                          (rule "andLeft" (formula "68"))
                                          (rule "andLeft" (formula "68"))
                                          (rule "andLeft" (formula "68"))
                                          (rule "andLeft" (formula "68"))
                                          (rule "andLeft" (formula "68"))
                                          (rule "andLeft" (formula "68"))
                                          (rule "andLeft" (formula "68"))
                                          (rule "andLeft" (formula "68"))
                                          (rule "andLeft" (formula "68"))
                                          (rule "andLeft" (formula "68"))
                                          (rule "andLeft" (formula "68"))
                                          (rule "andLeft" (formula "68"))
                                          (rule "andLeft" (formula "68"))
                                          (rule "andLeft" (formula "68"))
                                          (rule "andLeft" (formula "68"))
                                          (rule "andLeft" (formula "68"))
                                          (rule "andLeft" (formula "68"))
                                          (rule "andLeft" (formula "68"))
                                          (rule "andLeft" (formula "68"))
                                          (rule "andLeft" (formula "68"))
                                          (rule "andLeft" (formula "68"))
                                          (rule "translateJavaMulInt" (formula "65") (term "1"))
                                          (rule "mul_literals" (formula "65") (term "1"))
                                          (rule "translateJavaMulInt" (formula "65") (term "1"))
                                          (rule "mul_literals" (formula "65") (term "1"))
                                          (rule "disjointDefinition" (formula "93"))
                                           (builtin "One Step Simplification" (formula "93") (ifInst ""  (formula "148")))
                                          (rule "true_left" (formula "93"))
                                          (rule "disjointDefinition" (formula "92"))
                                           (builtin "One Step Simplification" (formula "92") (ifInst ""  (formula "146")))
                                          (rule "true_left" (formula "92"))
                                          (rule "disjointDefinition" (formula "91"))
                                           (builtin "One Step Simplification" (formula "91"))
                                          (rule "notLeft" (formula "91"))
                                          (rule "eqSymm" (formula "102"))
                                          (rule "disjointDefinition" (formula "90"))
                                           (builtin "One Step Simplification" (formula "90"))
                                          (rule "notLeft" (formula "90"))
                                          (rule "eqSymm" (formula "101"))
                                          (rule "disjointDefinition" (formula "89"))
                                           (builtin "One Step Simplification" (formula "89"))
                                          (rule "notLeft" (formula "89"))
                                          (rule "eqSymm" (formula "100"))
                                          (rule "disjointDefinition" (formula "88"))
                                           (builtin "One Step Simplification" (formula "88"))
                                          (rule "notLeft" (formula "88"))
                                          (rule "eqSymm" (formula "99"))
                                          (rule "disjointDefinition" (formula "87"))
                                           (builtin "One Step Simplification" (formula "87"))
                                          (rule "notLeft" (formula "87"))
                                          (rule "eqSymm" (formula "98"))
                                          (rule "disjointDefinition" (formula "86"))
                                           (builtin "One Step Simplification" (formula "86"))
                                          (rule "notLeft" (formula "86"))
                                          (rule "eqSymm" (formula "97"))
                                          (rule "disjointDefinition" (formula "85"))
                                           (builtin "One Step Simplification" (formula "85"))
                                          (rule "notLeft" (formula "85"))
                                          (rule "eqSymm" (formula "96"))
                                          (rule "disjointDefinition" (formula "84"))
                                           (builtin "One Step Simplification" (formula "84"))
                                          (rule "notLeft" (formula "84"))
                                          (rule "eqSymm" (formula "95"))
                                          (rule "disjointDefinition" (formula "83"))
                                           (builtin "One Step Simplification" (formula "83"))
                                          (rule "notLeft" (formula "83"))
                                          (rule "eqSymm" (formula "94"))
                                          (rule "disjointDefinition" (formula "82"))
                                           (builtin "One Step Simplification" (formula "82"))
                                          (rule "notLeft" (formula "82"))
                                          (rule "eqSymm" (formula "93"))
                                          (rule "disjointDefinition" (formula "81"))
                                           (builtin "One Step Simplification" (formula "81"))
                                          (rule "notLeft" (formula "81"))
                                          (rule "eqSymm" (formula "92"))
                                          (rule "disjointDefinition" (formula "80"))
                                           (builtin "One Step Simplification" (formula "80"))
                                          (rule "notLeft" (formula "80"))
                                          (rule "eqSymm" (formula "91"))
                                          (rule "disjointDefinition" (formula "79"))
                                           (builtin "One Step Simplification" (formula "79"))
                                          (rule "notLeft" (formula "79"))
                                          (rule "eqSymm" (formula "90"))
                                          (rule "disjointDefinition" (formula "78"))
                                           (builtin "One Step Simplification" (formula "78") (ifInst ""  (formula "118")))
                                          (rule "true_left" (formula "78"))
                                          (rule "disjointDefinition" (formula "77"))
                                           (builtin "One Step Simplification" (formula "77"))
                                          (rule "notLeft" (formula "77"))
                                          (rule "eqSymm" (formula "88"))
                                          (rule "disjointDefinition" (formula "76"))
                                           (builtin "One Step Simplification" (formula "76"))
                                          (rule "notLeft" (formula "76"))
                                          (rule "eqSymm" (formula "87"))
                                          (rule "disjointDefinition" (formula "75"))
                                           (builtin "One Step Simplification" (formula "75") (ifInst ""  (formula "112")))
                                          (rule "true_left" (formula "75"))
                                          (rule "disjointDefinition" (formula "74"))
                                           (builtin "One Step Simplification" (formula "74") (ifInst ""  (formula "110")))
                                          (rule "true_left" (formula "74"))
                                          (rule "disjointDefinition" (formula "73"))
                                           (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "108")))
                                          (rule "true_left" (formula "73"))
                                          (rule "disjointDefinition" (formula "72"))
                                           (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "106")))
                                          (rule "true_left" (formula "72"))
                                          (rule "disjointDefinition" (formula "71"))
                                           (builtin "One Step Simplification" (formula "71") (ifInst ""  (formula "104")))
                                          (rule "true_left" (formula "71"))
                                          (rule "disjointDefinition" (formula "70"))
                                           (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "102")))
                                          (rule "true_left" (formula "70"))
                                          (rule "disjointDefinition" (formula "69"))
                                           (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "100")))
                                          (rule "true_left" (formula "69"))
                                          (rule "disjointDefinition" (formula "68"))
                                           (builtin "One Step Simplification" (formula "68") (ifInst ""  (formula "98")))
                                          (rule "true_left" (formula "68"))
                                          (rule "disjointDefinition" (formula "67"))
                                           (builtin "One Step Simplification" (formula "67") (ifInst ""  (formula "96")))
                                          (rule "true_left" (formula "67"))
                                          (rule "disjointDefinition" (formula "66"))
                                           (builtin "One Step Simplification" (formula "66") (ifInst ""  (formula "94")))
                                          (rule "true_left" (formula "66"))
                                          (rule "applyEq" (formula "40") (term "0") (ifseqformula "65"))
                                          (rule "applyEq" (formula "64") (term "1") (ifseqformula "75"))
                                          (rule "Definition_axiom_for_notAllValuesInOneBucket_in_de_wiesler_Sorter" (formula "63") (term "0") (inst "b=b_1"))
                                           (builtin "One Step Simplification" (formula "63"))
                                          (rule "expand_inInt" (formula "63") (term "1,0,0"))
                                          (rule "replace_int_MIN" (formula "63") (term "0,1,1,0,0"))
                                          (rule "replace_int_MAX" (formula "63") (term "1,0,1,0,0"))
                                          (rule "translateJavaSubInt" (formula "63") (term "0,1,0"))
                                          (rule "translateJavaAddInt" (formula "63") (term "0,2,0,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "63") (term "0,1,0"))
                                          (rule "polySimp_addComm0" (formula "63") (term "0,1,0"))
                                          (rule "polySimp_addComm0" (formula "63") (term "0,2,1,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "63") (term "1,0,0,0"))
                                          (rule "polySimp_mulAssoc" (formula "63") (term "1,0,0,1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "63") (term "0,1,0,0,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "63") (term "1,0,0,1,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "63") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "63") (term "1,0,0,1,0"))
                                          (rule "polySimp_mulAssoc" (formula "63") (term "0,1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "63") (term "0,0,1,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "63") (term "0,1,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "63") (term "0,1,0,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "63") (term "0,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "63") (term "0,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "63") (term "0,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "63") (term "1,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "63") (term "1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "63") (term "1,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "63") (term "1,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "63") (term "1,1,1,0,0,0"))
                                          (rule "mul_literals" (formula "63") (term "0,1,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "63") (term "1,0"))
                                          (rule "polySimp_mulComm0" (formula "63") (term "1,1,0"))
                                          (rule "polySimp_rightDist" (formula "63") (term "1,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "63") (term "1,1,1,0"))
                                          (rule "polySimp_elimOne" (formula "63") (term "1,1,1,0"))
                                          (rule "polySimp_rightDist" (formula "63") (term "0,1,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "63") (term "1,0,1,1,0"))
                                          (rule "polySimp_elimOne" (formula "63") (term "1,0,1,1,0"))
                                          (rule "polySimp_rightDist" (formula "63") (term "0,0,1,1,0"))
                                          (rule "mul_literals" (formula "63") (term "0,0,0,1,1,0"))
                                          (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "23"))
                                          (rule "andLeft" (formula "23"))
                                          (rule "andLeft" (formula "23"))
                                          (rule "notLeft" (formula "25"))
                                          (rule "notLeft" (formula "24"))
                                          (rule "andLeft" (formula "23"))
                                          (rule "notLeft" (formula "24"))
                                          (rule "andLeft" (formula "23"))
                                          (rule "notLeft" (formula "24"))
                                          (rule "andLeft" (formula "23"))
                                          (rule "andLeft" (formula "23"))
                                          (rule "notLeft" (formula "25"))
                                          (rule "notLeft" (formula "24"))
                                          (rule "andLeft" (formula "23"))
                                          (rule "notLeft" (formula "23"))
                                          (rule "notLeft" (formula "23"))
                                          (rule "commuteUnion_2" (formula "67") (term "0,0,1,0,0"))
                                          (rule "commuteUnion_2" (formula "16") (term "0,1,0,0,0,1"))
                                          (rule "commuteUnion_2" (formula "14") (term "0,0,1,0,0"))
                                          (rule "commuteUnion_2" (formula "12") (term "0,0,1,0,2,0"))
                                          (rule "commuteUnion_2" (formula "69") (term "0,1,0,2,1"))
                                          (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "70") (term "0,1,0") (inst "i=i"))
                                           (builtin "One Step Simplification" (formula "70"))
                                          (rule "expand_inInt" (formula "70") (term "1,0,0,1,0"))
                                          (rule "replace_int_MIN" (formula "70") (term "0,1,1,0,0,1,0"))
                                          (rule "replace_int_MAX" (formula "70") (term "1,0,1,0,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "70") (term "1,1,0,0,0,1,0"))
                                          (rule "translateJavaAddInt" (formula "70") (term "0,2,1,1,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "70") (term "1,1,0,0,0,1,0"))
                                          (rule "mul_literals" (formula "70") (term "1,1,1,0,0,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "70") (term "0,2,1,1,0,1,0"))
                                          (rule "polySimp_addComm1" (formula "70") (term "1,1,0,0,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "70") (term "0,1,1,0,0,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "70") (term "1,0,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "70") (term "1,0,0,1,0,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "70") (term "0,1,0,0,1,0,0,0,1,0"))
                                          (rule "mul_literals" (formula "70") (term "0,0,1,0,0,1,0,0,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "70") (term "0,0,1,0,0,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "70") (term "0,0,0,1,0,0,0,1,0"))
                                          (rule "add_literals" (formula "70") (term "0,0,0,0,1,0,0,0,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "70") (term "0,0,0,0,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "70") (term "1,1,0,0,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "70") (term "1,0,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "70") (term "1,0,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "70") (term "1,1,0,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "70") (term "1,1,0,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "70") (term "1,1,1,0,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "70") (term "1,1,1,0,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "70") (term "0,1,1,0,0,0,1,0"))
                                          (rule "mul_literals" (formula "70") (term "0,0,1,1,0,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "70") (term "1,0,1,1,0,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "70") (term "1,0,1,1,0,0,0,1,0"))
                                          (rule "commute_and" (formula "133"))
                                          (rule "Definition_axiom_for_isBucketPartitioned_in_de_wiesler_Sorter" (formula "56") (term "0,1,0") (inst "i=i") (inst "j=j"))
                                           (builtin "One Step Simplification" (formula "56"))
                                          (rule "expand_inInt" (formula "56") (term "1,0,0,1,0,1,0"))
                                          (rule "expand_inInt" (formula "56") (term "1,0,0,1,0"))
                                          (rule "replace_int_MAX" (formula "56") (term "1,0,1,0,0,1,0,1,0"))
                                          (rule "replace_int_MIN" (formula "56") (term "0,1,1,0,0,1,0,1,0"))
                                          (rule "replace_int_MAX" (formula "56") (term "1,0,1,0,0,1,0"))
                                          (rule "replace_int_MIN" (formula "56") (term "0,1,1,0,0,1,0"))
                                          (rule "translateJavaAddInt" (formula "56") (term "1,1,0,0,0,1,0"))
                                          (rule "translateJavaAddInt" (formula "56") (term "0,0,0,0,0,1,0"))
                                          (rule "translateJavaAddInt" (formula "56") (term "0,0,0,0,0,1,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "56") (term "1,0,1,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "56") (term "1,0,0,1,0,1,0,1,0"))
                                          (rule "polySimp_addComm1" (formula "56") (term "0,1,0,1,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "56") (term "1,0,0,0,1,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "56") (term "1,0,0,1,0,0,0,1,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "56") (term "1,0,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "56") (term "1,0,0,1,0,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "56") (term "0,1,0,0,1,0,0,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "56") (term "0,0,1,0,0,0,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "56") (term "1,1,0,0,1,0,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "56") (term "1,1,0,0,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "56") (term "0,0,0,0,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "56") (term "0,0,0,0,1,0,1,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "56") (term "1,0,1,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "56") (term "0,1,0,1,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "56") (term "0,1,0,1,0,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "56") (term "1,0,0,0,1,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "56") (term "1,1,0,0,0,1,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "56") (term "1,1,0,0,0,1,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "56") (term "1,1,1,0,0,0,1,0,1,0"))
                                          (rule "mul_literals" (formula "56") (term "0,1,1,0,0,0,1,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "56") (term "1,1,1,0,0,0,1,0,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "56") (term "1,0,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "56") (term "1,1,0,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "56") (term "1,1,0,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "56") (term "1,1,1,0,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "56") (term "1,1,1,0,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "56") (term "0,1,1,0,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "56") (term "1,0,1,1,0,0,0,1,0"))
                                          (rule "mul_literals" (formula "56") (term "0,0,1,1,0,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "56") (term "1,0,1,1,0,0,0,1,0"))
                                          (rule "Definition_axiom_for_isEqualityBucket_in_de_wiesler_Sorter" (formula "61") (term "0,1,0,1") (inst "i=i"))
                                           (builtin "One Step Simplification" (formula "61"))
                                          (rule "expand_inInt" (formula "61") (term "1,0,0,1,0,1"))
                                          (rule "replace_int_MIN" (formula "61") (term "0,1,1,0,0,1,0,1"))
                                          (rule "replace_int_MAX" (formula "61") (term "1,0,1,0,0,1,0,1"))
                                          (rule "eqSymm" (formula "61") (term "1,0,1,0,1"))
                                          (rule "translateJavaSubInt" (formula "61") (term "1,1,0,0,0,1,0,1"))
                                          (rule "translateJavaAddInt" (formula "61") (term "0,2,0,1,0,1,0,1"))
                                          (rule "polySimp_elimSub" (formula "61") (term "1,1,0,0,0,1,0,1"))
                                          (rule "mul_literals" (formula "61") (term "1,1,1,0,0,0,1,0,1"))
                                          (rule "polySimp_addComm0" (formula "61") (term "0,2,0,1,0,1,0,1"))
                                          (rule "polySimp_addComm1" (formula "61") (term "1,1,0,0,0,1,0,1"))
                                          (rule "polySimp_addComm0" (formula "61") (term "0,1,1,0,0,0,1,0,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "61") (term "1,0,0,0,1,0,1"))
                                          (rule "polySimp_rightDist" (formula "61") (term "1,0,0,1,0,0,0,1,0,1"))
                                          (rule "polySimp_rightDist" (formula "61") (term "0,1,0,0,1,0,0,0,1,0,1"))
                                          (rule "mul_literals" (formula "61") (term "0,0,1,0,0,1,0,0,0,1,0,1"))
                                          (rule "polySimp_addAssoc" (formula "61") (term "0,0,1,0,0,0,1,0,1"))
                                          (rule "polySimp_addAssoc" (formula "61") (term "0,0,0,1,0,0,0,1,0,1"))
                                          (rule "add_literals" (formula "61") (term "0,0,0,0,1,0,0,0,1,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "61") (term "0,0,0,0,1,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "61") (term "1,1,0,0,1,0,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "61") (term "1,0,0,0,1,0,1"))
                                          (rule "polySimp_mulComm0" (formula "61") (term "1,1,0,0,0,1,0,1"))
                                          (rule "polySimp_rightDist" (formula "61") (term "1,1,0,0,0,1,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "61") (term "1,1,1,0,0,0,1,0,1"))
                                          (rule "polySimp_elimOne" (formula "61") (term "1,1,1,0,0,0,1,0,1"))
                                          (rule "polySimp_rightDist" (formula "61") (term "0,1,1,0,0,0,1,0,1"))
                                          (rule "mul_literals" (formula "61") (term "0,0,1,1,0,0,0,1,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "61") (term "1,0,1,1,0,0,0,1,0,1"))
                                          (rule "polySimp_elimOne" (formula "61") (term "1,0,1,1,0,0,0,1,0,1"))
                                          (rule "cut_direct" (formula "11") (term "0"))
                                          (branch "CUT: result_242.equal_buckets = TRUE TRUE"
                                              (builtin "One Step Simplification" (formula "12"))
                                             (rule "replace_known_left" (formula "62") (term "0") (ifseqformula "11"))
                                              (builtin "One Step Simplification" (formula "62"))
                                             (rule "replace_known_left" (formula "17") (term "0") (ifseqformula "11"))
                                              (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "12")))
                                             (rule "replace_known_left" (formula "134") (term "0,0,0") (ifseqformula "11"))
                                              (builtin "One Step Simplification" (formula "134") (ifInst ""  (formula "11")))
                                             (rule "qeq_literals" (formula "134") (term "0"))
                                              (builtin "One Step Simplification" (formula "134"))
                                             (rule "replace_known_left" (formula "74") (term "0") (ifseqformula "11"))
                                              (builtin "One Step Simplification" (formula "74"))
                                             (rule "inEqSimp_leqRight" (formula "134"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                                             (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                             (rule "polySimp_addComm1" (formula "1") (term "0"))
                                             (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0,0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0,0,0"))
                                             (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                                             (rule "applyEq" (formula "75") (term "1,1,0,0,0,0,0") (ifseqformula "13"))
                                             (rule "applyEq" (formula "17") (term "6,0") (ifseqformula "13"))
                                             (rule "applyEq" (formula "72") (term "1,1,1,0,0,0") (ifseqformula "13"))
                                             (rule "applyEqRigid" (formula "10") (term "0") (ifseqformula "13"))
                                             (rule "inEqSimp_homoInEq0" (formula "10"))
                                             (rule "polySimp_mulLiterals" (formula "10") (term "1,0"))
                                             (rule "polySimp_pullOutFactor0b" (formula "10") (term "0"))
                                             (rule "add_literals" (formula "10") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "10") (term "1,0"))
                                             (rule "add_zero_right" (formula "10") (term "0"))
                                             (rule "qeq_literals" (formula "10"))
                                             (rule "true_left" (formula "10"))
                                             (rule "applyEq" (formula "5") (term "0") (ifseqformula "12"))
                                             (rule "applyEqRigid" (formula "1") (term "1,0") (ifseqformula "12"))
                                             (rule "polySimp_addComm1" (formula "1") (term "0"))
                                             (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "12"))
                                             (rule "inEqSimp_homoInEq1" (formula "9"))
                                             (rule "polySimp_mulLiterals" (formula "9") (term "1,0"))
                                             (rule "polySimp_pullOutFactor0" (formula "9") (term "0"))
                                             (rule "add_literals" (formula "9") (term "1,0"))
                                             (rule "times_zero_1" (formula "9") (term "0"))
                                             (rule "leq_literals" (formula "9"))
                                             (rule "true_left" (formula "9"))
                                             (rule "applyEq" (formula "9") (term "0,0") (ifseqformula "11"))
                                             (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "11"))
                                             (rule "inEqSimp_homoInEq0" (formula "2"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                                             (rule "polySimp_addComm1" (formula "2") (term "0"))
                                             (rule "applyEqRigid" (formula "13") (term "7,0") (ifseqformula "11"))
                                             (rule "applyEq" (formula "72") (term "1,1,0,0,0,0") (ifseqformula "11"))
                                             (rule "applyEqRigid" (formula "6") (term "0,0") (ifseqformula "11"))
                                             (rule "applyEq" (formula "16") (term "1,6,0") (ifseqformula "11"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                             (rule "polySimp_rightDist" (formula "2") (term "1"))
                                             (rule "mul_literals" (formula "2") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                             (rule "inEqSimp_subsumption6" (formula "5") (ifseqformula "3"))
                                             (rule "times_zero_1" (formula "5") (term "1,1,0"))
                                             (rule "greater_literals" (formula "5") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "5"))
                                             (rule "leq_literals" (formula "5") (term "0"))
                                              (builtin "One Step Simplification" (formula "5"))
                                             (rule "true_left" (formula "5"))
                                             (rule "inEqSimp_subsumption6" (formula "2") (ifseqformula "7"))
                                             (rule "greater_literals" (formula "2") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                             (rule "mul_literals" (formula "2") (term "0,1,0"))
                                             (rule "inEqSimp_homoInEq0" (formula "2") (term "0"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "2") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "2") (term "0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                             (rule "polySimp_addComm1" (formula "2") (term "0,0,0"))
                                             (rule "add_literals" (formula "2") (term "0,0,0,0"))
                                             (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
                                             (rule "add_literals" (formula "2") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "2") (term "1,0,0"))
                                             (rule "add_literals" (formula "2") (term "0,0"))
                                             (rule "qeq_literals" (formula "2") (term "0"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "true_left" (formula "2"))
                                             (rule "inEqSimp_contradInEq5" (formula "1") (ifseqformula "6"))
                                             (rule "greater_literals" (formula "1") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1"))
                                             (rule "mul_literals" (formula "1") (term "0,1"))
                                             (rule "inEqSimp_homoInEq1" (formula "1"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
                                             (rule "mul_literals" (formula "1") (term "0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                             (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0,0"))
                                             (rule "polySimp_pullOutFactor0b" (formula "1") (term "0"))
                                             (rule "add_literals" (formula "1") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "1") (term "1,0"))
                                             (rule "add_zero_right" (formula "1") (term "0"))
                                             (rule "leq_literals" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                          (branch "CUT: result_242.equal_buckets = TRUE FALSE"
                                              (builtin "One Step Simplification" (formula "11"))
                                             (rule "true_left" (formula "11"))
                                             (rule "replace_known_right" (formula "72") (term "0") (ifseqformula "74"))
                                              (builtin "One Step Simplification" (formula "72"))
                                             (rule "true_left" (formula "72"))
                                             (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "73"))
                                              (builtin "One Step Simplification" (formula "15"))
                                             (rule "true_left" (formula "15"))
                                             (rule "replace_known_right" (formula "59") (term "0") (ifseqformula "72"))
                                              (builtin "One Step Simplification" (formula "59"))
                                             (rule "true_left" (formula "59"))
                                             (rule "replace_known_right" (formula "130") (term "0,0,0") (ifseqformula "71"))
                                              (builtin "One Step Simplification" (formula "130") (ifInst ""  (formula "71")))
                                             (rule "qeq_literals" (formula "130") (term "0"))
                                              (builtin "One Step Simplification" (formula "130"))
                                             (rule "inEqSimp_leqRight" (formula "130"))
                                             (rule "add_zero_right" (formula "1") (term "0"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
                                             (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
                                             (rule "polySimp_rightDist" (formula "1") (term "0,1,0"))
                                             (rule "mul_literals" (formula "1") (term "0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                             (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "1"))
                                             (rule "andLeft" (formula "2"))
                                             (rule "inEqSimp_homoInEq1" (formula "2"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0"))
                                             (rule "mul_literals" (formula "2") (term "0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                             (rule "polySimp_addComm0" (formula "2") (term "0,0"))
                                             (rule "polySimp_pullOutFactor0b" (formula "2") (term "0"))
                                             (rule "add_literals" (formula "2") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "2") (term "1,0"))
                                             (rule "add_literals" (formula "2") (term "0"))
                                             (rule "leq_literals" (formula "2"))
                                             (rule "closeFalse" (formula "2"))
                                          )
                                       )
                                    )
                                 )
                                 (branch "Exceptional Post (sample_sort_recurse_on)"
                                     (builtin "One Step Simplification" (formula "63"))
                                     (builtin "One Step Simplification" (formula "70"))
                                    (rule "andLeft" (formula "63"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "64") (term "1,0") (ifseqformula "63"))
                                     (builtin "One Step Simplification" (formula "64"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "64") (term "0,0,1,0") (ifseqformula "46"))
                                     (builtin "One Step Simplification" (formula "64"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "64") (term "0,0,0,0,1,0") (ifseqformula "35"))
                                    (rule "andLeft" (formula "64"))
                                    (rule "andLeft" (formula "64"))
                                    (rule "andLeft" (formula "66"))
                                    (rule "notLeft" (formula "64"))
                                    (rule "close" (formula "67") (ifseqformula "66"))
                                 )
                                 (branch "Pre (sample_sort_recurse_on)"
                                     (builtin "One Step Simplification" (formula "68") (ifInst ""  (formula "67")) (ifInst ""  (formula "66")) (ifInst ""  (formula "65")) (ifInst ""  (formula "67")) (ifInst ""  (formula "66")) (ifInst ""  (formula "65")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "68") (term "0,1,0,0,1,0") (ifseqformula "46"))
                                     (builtin "One Step Simplification" (formula "68"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "68") (term "0,1,0,0,0,1,0") (ifseqformula "46"))
                                     (builtin "One Step Simplification" (formula "68"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "68") (term "0,0,0,1,0,0,1,0") (ifseqformula "35"))
                                    (rule "wellFormedAnon" (formula "68") (term "0,0,0,0,0,0,0,1,0"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "68") (term "0,0,0,1,0,0,0,1,0") (ifseqformula "35"))
                                    (rule "wellFormedAnonEQ" (formula "68") (term "0,0,0,0,0,0,0,0,1,0") (ifseqformula "46"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "68") (term "0,1,0,0,0,0,0,0,1,0") (ifseqformula "46"))
                                     (builtin "One Step Simplification" (formula "68") (ifInst ""  (formula "45")) (ifInst ""  (formula "17")) (ifInst ""  (formula "21")) (ifInst ""  (formula "64")) (ifInst ""  (formula "36")))
                                    (rule "wellFormedAnon" (formula "68") (term "0,0,0,0,0,1,0"))
                                    (rule "wellFormedAnonEQ" (formula "68") (term "0,0,0,0,0,0,1,0") (ifseqformula "35"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "68") (term "0,0,0,1,0,0,0,0,1,0") (ifseqformula "35"))
                                    (rule "expand_inInt" (formula "68") (term "1,0,1,0"))
                                    (rule "expand_inInt" (formula "68") (term "1,0,0,1,0"))
                                    (rule "expand_inInt" (formula "68") (term "1,1,0"))
                                    (rule "expand_inInt" (formula "68") (term "1,0,0,0,1,0"))
                                    (rule "replace_int_MIN" (formula "68") (term "0,1,1,0,1,0"))
                                    (rule "replace_int_MAX" (formula "68") (term "1,0,1,0,1,0"))
                                    (rule "replace_int_MIN" (formula "68") (term "0,1,1,0,0,1,0"))
                                    (rule "replace_int_MAX" (formula "68") (term "1,0,1,0,0,1,0"))
                                    (rule "replace_int_MAX" (formula "68") (term "1,0,1,1,0"))
                                    (rule "replace_int_MIN" (formula "68") (term "0,1,1,1,0"))
                                    (rule "replace_int_MIN" (formula "68") (term "0,1,1,0,0,0,1,0"))
                                    (rule "replace_int_MAX" (formula "68") (term "1,0,1,0,0,0,1,0"))
                                    (rule "translateJavaSubInt" (formula "68") (term "0,0,1"))
                                    (rule "replace_known_left" (formula "68") (term "0,0,0,0,0,0,0,1,0") (ifseqformula "18"))
                                     (builtin "One Step Simplification" (formula "68") (ifInst ""  (formula "34")) (ifInst ""  (formula "41")) (ifInst ""  (formula "19")))
                                    (rule "polySimp_elimSub" (formula "68") (term "0,0,1"))
                                    (rule "polySimp_addComm0" (formula "68") (term "0,0,1"))
                                    (rule "measuredByCheck" (formula "68") (term "1") (ifseqformula "22"))
                                    (rule "precOfPair" (formula "68") (term "1"))
                                     (builtin "One Step Simplification" (formula "68"))
                                    (rule "precOfInt" (formula "68") (term "0,1"))
                                    (rule "precOfInt" (formula "68") (term "1,1"))
                                    (rule "leq_literals" (formula "68") (term "0,1,1"))
                                     (builtin "One Step Simplification" (formula "68"))
                                    (rule "less_literals" (formula "68") (term "1,1"))
                                     (builtin "One Step Simplification" (formula "68"))
                                    (rule "inEqSimp_commuteLeq" (formula "68") (term "1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "68") (term "1,1,0,0,1"))
                                    (rule "replace_known_left" (formula "68") (term "1,1,0,0,1") (ifseqformula "20"))
                                     (builtin "One Step Simplification" (formula "68"))
                                    (rule "inEqSimp_commuteLeq" (formula "68") (term "1,1,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "68") (term "1,0,0,0,1"))
                                    (rule "inEqSimp_subsumption4" (formula "68") (term "0,1,0,1") (ifseqformula "61"))
                                    (rule "mul_literals" (formula "68") (term "0,1,0,0,1,0,1"))
                                    (rule "greater_literals" (formula "68") (term "0,0,0,1,0,1"))
                                     (builtin "One Step Simplification" (formula "68"))
                                    (rule "leq_literals" (formula "68") (term "0,0,1,0,1"))
                                     (builtin "One Step Simplification" (formula "68"))
                                    (rule "inEqSimp_subsumption1" (formula "68") (term "1,0,0,0,1") (ifseqformula "24"))
                                    (rule "leq_literals" (formula "68") (term "0,1,0,0,0,1"))
                                     (builtin "One Step Simplification" (formula "68"))
                                    (rule "inEqSimp_subsumption0" (formula "68") (term "0,0,0,1") (ifseqformula "29"))
                                    (rule "leq_literals" (formula "68") (term "0,0,0,0,1"))
                                     (builtin "One Step Simplification" (formula "68"))
                                    (rule "inEqSimp_subsumption6" (formula "68") (term "1,0,1") (ifseqformula "3"))
                                    (rule "greater_literals" (formula "68") (term "0,0,1,0,1"))
                                     (builtin "One Step Simplification" (formula "68"))
                                    (rule "mul_literals" (formula "68") (term "1,0,1,0,1"))
                                    (rule "leq_literals" (formula "68") (term "0,1,0,1"))
                                     (builtin "One Step Simplification" (formula "68"))
                                    (rule "inEqSimp_subsumption0" (formula "68") (term "0,1") (ifseqformula "27"))
                                    (rule "leq_literals" (formula "68") (term "0,0,1"))
                                     (builtin "One Step Simplification" (formula "68"))
                                    (rule "inEqSimp_subsumption1" (formula "68") (term "1,1") (ifseqformula "4"))
                                    (rule "leq_literals" (formula "68") (term "0,1,1"))
                                     (builtin "One Step Simplification" (formula "68"))
                                    (rule "Definition_axiom_for_smallBucketsInRangeSorted_in_de_wiesler_Sorter" (formula "15") (term "0") (inst "b=b"))
                                     (builtin "One Step Simplification" (formula "15"))
                                    (rule "expand_inInt" (formula "15") (term "1,0,0"))
                                    (rule "replace_int_MAX" (formula "15") (term "1,0,1,0,0"))
                                    (rule "replace_int_MIN" (formula "15") (term "0,1,1,0,0"))
                                    (rule "translateJavaAddInt" (formula "15") (term "0,2,5,0,1,0"))
                                    (rule "polySimp_addComm0" (formula "15") (term "0,2,5,0,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,0"))
                                    (rule "polySimp_mulAssoc" (formula "15") (term "1,0,0,1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "0,1,0,0,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,1,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "15") (term "1,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,0"))
                                    (rule "mul_literals" (formula "15") (term "0,1,1,0,0,0"))
                                    (rule "nnf_imp2or" (formula "15") (term "0"))
                                    (rule "nnf_notAnd" (formula "15") (term "0,0"))
                                    (rule "nnf_notAnd" (formula "15") (term "0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,0"))
                                    (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,0"))
                                    (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,0"))
                                    (rule "add_zero_left" (formula "15") (term "0,0,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,0"))
                                    (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,0"))
                                    (rule "nnf_notAnd" (formula "15") (term "1,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "15") (term "0,1,0,0"))
                                    (rule "mul_literals" (formula "15") (term "1,0,0,0,1,0,0"))
                                    (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,1,0,0"))
                                    (rule "mul_literals" (formula "15") (term "1,0,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "15") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "15") (term "1,0,0,1,1,0,0"))
                                    (rule "add_literals" (formula "15") (term "0,0,1,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "15") (term "1,1,1,0,0"))
                                    (rule "Definition_axiom_for_notAllValuesInOneBucket_in_de_wiesler_Sorter" (formula "56") (term "0") (inst "b=b"))
                                     (builtin "One Step Simplification" (formula "56"))
                                    (rule "expand_inInt" (formula "56") (term "1,0,0"))
                                    (rule "replace_int_MAX" (formula "56") (term "1,0,1,0,0"))
                                    (rule "replace_int_MIN" (formula "56") (term "0,1,1,0,0"))
                                    (rule "translateJavaSubInt" (formula "56") (term "0,1,0"))
                                    (rule "translateJavaAddInt" (formula "56") (term "0,2,0,0,1,0"))
                                    (rule "polySimp_elimSub" (formula "56") (term "0,1,0"))
                                    (rule "polySimp_addComm0" (formula "56") (term "0,1,0"))
                                    (rule "polySimp_addComm0" (formula "56") (term "0,2,1,0,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "56") (term "1,0,0,0"))
                                    (rule "polySimp_mulAssoc" (formula "56") (term "1,0,0,1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "56") (term "0,1,0,0,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "56") (term "1,0,0,1,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "56") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "56") (term "1,0,0,1,0"))
                                    (rule "polySimp_mulAssoc" (formula "56") (term "0,1,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "56") (term "0,0,1,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "56") (term "0,1,0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "56") (term "0,1,0,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "56") (term "0,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "56") (term "0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "56") (term "0,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "56") (term "1,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "56") (term "1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "56") (term "1,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "56") (term "1,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "56") (term "1,1,1,0,0,0"))
                                    (rule "mul_literals" (formula "56") (term "0,1,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "56") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "56") (term "1,1,0"))
                                    (rule "polySimp_rightDist" (formula "56") (term "1,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "56") (term "1,1,1,0"))
                                    (rule "polySimp_elimOne" (formula "56") (term "1,1,1,0"))
                                    (rule "polySimp_rightDist" (formula "56") (term "0,1,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "56") (term "1,0,1,1,0"))
                                    (rule "polySimp_elimOne" (formula "56") (term "1,0,1,1,0"))
                                    (rule "polySimp_rightDist" (formula "56") (term "0,0,1,1,0"))
                                    (rule "mul_literals" (formula "56") (term "0,0,0,1,1,0"))
                                    (rule "nnf_imp2or" (formula "56") (term "0"))
                                    (rule "nnf_notAnd" (formula "56") (term "0,0"))
                                    (rule "nnf_notAnd" (formula "56") (term "1,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "56") (term "0,1,0,0"))
                                    (rule "mul_literals" (formula "56") (term "1,0,0,0,1,0,0"))
                                    (rule "add_literals" (formula "56") (term "0,0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "56") (term "0,1,0,0"))
                                    (rule "mul_literals" (formula "56") (term "1,0,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "56") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "56") (term "1,0,0,1,1,0,0"))
                                    (rule "add_literals" (formula "56") (term "0,0,1,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "56") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "56") (term "1,1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "56") (term "0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "56") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "56") (term "1,0,0,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "56") (term "1,1,0,0,1,0,0,0"))
                                    (rule "mul_literals" (formula "56") (term "0,1,0,0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "56") (term "0,0,1,0,0,0"))
                                    (rule "add_literals" (formula "56") (term "0,0,0,1,0,0,0"))
                                    (rule "add_zero_left" (formula "56") (term "0,0,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "56") (term "1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "56") (term "1,1,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "56") (term "0,0,0,0"))
                                    (rule "mul_literals" (formula "56") (term "1,0,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "56") (term "0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "56") (term "0,0,0,0"))
                                    (rule "mul_literals" (formula "56") (term "1,0,0,0,0"))
                                    (rule "Free_class_invariant_axiom_for_de_wiesler_Storage" (formula "57"))
                                     (builtin "One Step Simplification" (formula "57"))
                                    (rule "andLeft" (formula "57"))
                                    (rule "andLeft" (formula "57"))
                                    (rule "andLeft" (formula "59"))
                                    (rule "andLeft" (formula "57"))
                                    (rule "andLeft" (formula "60"))
                                    (rule "andLeft" (formula "57"))
                                    (rule "andLeft" (formula "61"))
                                    (rule "andLeft" (formula "57"))
                                    (rule "andLeft" (formula "62"))
                                    (rule "andLeft" (formula "57"))
                                    (rule "andLeft" (formula "63"))
                                    (rule "andLeft" (formula "57"))
                                    (rule "andLeft" (formula "64"))
                                    (rule "andLeft" (formula "57"))
                                    (rule "andLeft" (formula "65"))
                                    (rule "andLeft" (formula "57"))
                                    (rule "andLeft" (formula "66"))
                                    (rule "andLeft" (formula "66"))
                                    (rule "andLeft" (formula "66"))
                                    (rule "andLeft" (formula "66"))
                                    (rule "andLeft" (formula "66"))
                                    (rule "andLeft" (formula "66"))
                                    (rule "andLeft" (formula "66"))
                                    (rule "andLeft" (formula "66"))
                                    (rule "andLeft" (formula "66"))
                                    (rule "andLeft" (formula "66"))
                                    (rule "andLeft" (formula "66"))
                                    (rule "andLeft" (formula "66"))
                                    (rule "andLeft" (formula "66"))
                                    (rule "andLeft" (formula "66"))
                                    (rule "andLeft" (formula "66"))
                                    (rule "andLeft" (formula "66"))
                                    (rule "andLeft" (formula "66"))
                                    (rule "andLeft" (formula "66"))
                                    (rule "andLeft" (formula "66"))
                                    (rule "andLeft" (formula "66"))
                                    (rule "translateJavaMulInt" (formula "60") (term "1"))
                                    (rule "mul_literals" (formula "60") (term "1"))
                                    (rule "translateJavaMulInt" (formula "59") (term "1"))
                                    (rule "mul_literals" (formula "59") (term "1"))
                                    (rule "disjointDefinition" (formula "93"))
                                     (builtin "One Step Simplification" (formula "93"))
                                    (rule "notLeft" (formula "93"))
                                    (rule "disjointDefinition" (formula "92"))
                                     (builtin "One Step Simplification" (formula "92"))
                                    (rule "notLeft" (formula "92"))
                                    (rule "disjointDefinition" (formula "91"))
                                     (builtin "One Step Simplification" (formula "91"))
                                    (rule "notLeft" (formula "91"))
                                    (rule "eqSymm" (formula "95"))
                                    (rule "disjointDefinition" (formula "90"))
                                     (builtin "One Step Simplification" (formula "90"))
                                    (rule "notLeft" (formula "90"))
                                    (rule "eqSymm" (formula "94"))
                                    (rule "disjointDefinition" (formula "89"))
                                     (builtin "One Step Simplification" (formula "89"))
                                    (rule "notLeft" (formula "89"))
                                    (rule "eqSymm" (formula "93"))
                                    (rule "disjointDefinition" (formula "88"))
                                     (builtin "One Step Simplification" (formula "88"))
                                    (rule "notLeft" (formula "88"))
                                    (rule "eqSymm" (formula "92"))
                                    (rule "disjointDefinition" (formula "87"))
                                     (builtin "One Step Simplification" (formula "87"))
                                    (rule "notLeft" (formula "87"))
                                    (rule "eqSymm" (formula "91"))
                                    (rule "disjointDefinition" (formula "86"))
                                     (builtin "One Step Simplification" (formula "86"))
                                    (rule "notLeft" (formula "86"))
                                    (rule "eqSymm" (formula "90"))
                                    (rule "disjointDefinition" (formula "85"))
                                     (builtin "One Step Simplification" (formula "85"))
                                    (rule "notLeft" (formula "85"))
                                    (rule "eqSymm" (formula "89"))
                                    (rule "disjointDefinition" (formula "84"))
                                     (builtin "One Step Simplification" (formula "84"))
                                    (rule "notLeft" (formula "84"))
                                    (rule "eqSymm" (formula "88"))
                                    (rule "disjointDefinition" (formula "83"))
                                     (builtin "One Step Simplification" (formula "83"))
                                    (rule "notLeft" (formula "83"))
                                    (rule "eqSymm" (formula "87"))
                                    (rule "disjointDefinition" (formula "82"))
                                     (builtin "One Step Simplification" (formula "82"))
                                    (rule "notLeft" (formula "82"))
                                    (rule "eqSymm" (formula "86"))
                                    (rule "disjointDefinition" (formula "81"))
                                     (builtin "One Step Simplification" (formula "81"))
                                    (rule "notLeft" (formula "81"))
                                    (rule "eqSymm" (formula "85"))
                                    (rule "disjointDefinition" (formula "80"))
                                     (builtin "One Step Simplification" (formula "80"))
                                    (rule "notLeft" (formula "80"))
                                    (rule "eqSymm" (formula "84"))
                                    (rule "disjointDefinition" (formula "79"))
                                     (builtin "One Step Simplification" (formula "79"))
                                    (rule "notLeft" (formula "79"))
                                    (rule "eqSymm" (formula "83"))
                                    (rule "disjointDefinition" (formula "78"))
                                     (builtin "One Step Simplification" (formula "78"))
                                    (rule "notLeft" (formula "78"))
                                    (rule "disjointDefinition" (formula "77"))
                                     (builtin "One Step Simplification" (formula "77"))
                                    (rule "notLeft" (formula "77"))
                                    (rule "eqSymm" (formula "81"))
                                    (rule "disjointDefinition" (formula "76"))
                                     (builtin "One Step Simplification" (formula "76"))
                                    (rule "notLeft" (formula "76"))
                                    (rule "eqSymm" (formula "80"))
                                    (rule "disjointDefinition" (formula "75"))
                                     (builtin "One Step Simplification" (formula "75"))
                                    (rule "notLeft" (formula "75"))
                                    (rule "disjointDefinition" (formula "74"))
                                     (builtin "One Step Simplification" (formula "74"))
                                    (rule "notLeft" (formula "74"))
                                    (rule "disjointDefinition" (formula "73"))
                                     (builtin "One Step Simplification" (formula "73"))
                                    (rule "notLeft" (formula "73"))
                                    (rule "disjointDefinition" (formula "72"))
                                     (builtin "One Step Simplification" (formula "72"))
                                    (rule "notLeft" (formula "72"))
                                    (rule "disjointDefinition" (formula "71"))
                                     (builtin "One Step Simplification" (formula "71"))
                                    (rule "notLeft" (formula "71"))
                                    (rule "disjointDefinition" (formula "70"))
                                     (builtin "One Step Simplification" (formula "70"))
                                    (rule "notLeft" (formula "70"))
                                    (rule "disjointDefinition" (formula "69"))
                                     (builtin "One Step Simplification" (formula "69"))
                                    (rule "notLeft" (formula "69"))
                                    (rule "disjointDefinition" (formula "68"))
                                     (builtin "One Step Simplification" (formula "68"))
                                    (rule "notLeft" (formula "68"))
                                    (rule "disjointDefinition" (formula "66"))
                                     (builtin "One Step Simplification" (formula "66"))
                                    (rule "notLeft" (formula "66"))
                                    (rule "disjointDefinition" (formula "66"))
                                     (builtin "One Step Simplification" (formula "66"))
                                    (rule "notLeft" (formula "66"))
                                    (rule "applyEq" (formula "15") (term "0,1,0,5,0,1,0") (ifseqformula "65"))
                                    (rule "applyEq" (formula "12") (term "0,1,0,2,0") (ifseqformula "65"))
                                    (rule "applyEq" (formula "33") (term "1,0") (ifseqformula "65"))
                                    (rule "applyEq" (formula "14") (term "0,1,0,0") (ifseqformula "65"))
                                    (rule "applyEq" (formula "15") (term "0,1,0,4,0,1,0") (ifseqformula "65"))
                                    (rule "applyEq" (formula "13") (term "0,1,0,0") (ifseqformula "65"))
                                    (rule "applyEq" (formula "46") (term "1,0,1,0") (ifseqformula "65"))
                                    (rule "applyEq" (formula "16") (term "0,1,0,0,0,1") (ifseqformula "65"))
                                    (rule "applyEq" (formula "44") (term "1,0") (ifseqformula "65"))
                                    (rule "applyEq" (formula "104") (term "0,1,0,0") (ifseqformula "65"))
                                    (rule "applyEq" (formula "43") (term "1,0") (ifseqformula "65"))
                                    (rule "applyEq" (formula "15") (term "0,1,0,0,1,0") (ifseqformula "65"))
                                    (rule "distributeIntersection" (formula "33") (term "0"))
                                    (rule "distributeIntersection" (formula "44") (term "0"))
                                    (rule "distributeIntersection" (formula "43") (term "0"))
                                    (rule "unionEqualsEmpty" (formula "33"))
                                    (rule "andLeft" (formula "33"))
                                    (rule "unionEqualsEmpty" (formula "45"))
                                    (rule "andLeft" (formula "45"))
                                    (rule "distributeIntersection" (formula "44") (term "1,0"))
                                    (rule "distributeIntersection" (formula "44") (term "0,0"))
                                    (rule "distributeIntersection" (formula "33") (term "0"))
                                    (rule "distributeIntersection" (formula "34") (term "0"))
                                    (rule "distributeIntersection" (formula "45") (term "0"))
                                    (rule "distributeIntersection" (formula "46") (term "0"))
                                    (rule "distributeIntersection" (formula "44") (term "0,1,0"))
                                    (rule "distributeIntersection" (formula "44") (term "1,1,0"))
                                    (rule "distributeIntersection" (formula "44") (term "0,0,0"))
                                    (rule "distributeIntersection" (formula "44") (term "1,0,0"))
                                    (rule "unionEqualsEmpty" (formula "33"))
                                    (rule "andLeft" (formula "33"))
                                    (rule "distributeIntersection" (formula "35") (term "1,0"))
                                    (rule "distributeIntersection" (formula "35") (term "0,0"))
                                    (rule "distributeIntersection" (formula "46") (term "0,0"))
                                    (rule "distributeIntersection" (formula "46") (term "1,0"))
                                    (rule "distributeIntersection" (formula "47") (term "1,0"))
                                    (rule "distributeIntersection" (formula "47") (term "0,0"))
                                    (rule "unionEqualsEmpty" (formula "45"))
                                    (rule "andLeft" (formula "45"))
                                    (rule "distributeIntersection" (formula "33") (term "0"))
                                    (rule "distributeIntersection" (formula "34") (term "0"))
                                    (rule "unionEqualsEmpty" (formula "35"))
                                    (rule "andLeft" (formula "35"))
                                    (rule "unionEqualsEmpty" (formula "48"))
                                    (rule "andLeft" (formula "48"))
                                    (rule "unionEqualsEmpty" (formula "50"))
                                    (rule "andLeft" (formula "50"))
                                    (rule "unionEqualsEmpty" (formula "47"))
                                    (rule "andLeft" (formula "47"))
                                    (rule "unionEqualsEmpty" (formula "46"))
                                    (rule "andLeft" (formula "46"))
                                    (rule "unionEqualsEmpty" (formula "33"))
                                     (builtin "One Step Simplification" (formula "33"))
                                    (rule "andLeft" (formula "33"))
                                    (rule "notLeft" (formula "34"))
                                    (rule "notLeft" (formula "33"))
                                    (rule "eqSymm" (formula "79"))
                                    (rule "eqSymm" (formula "78"))
                                    (rule "unionEqualsEmpty" (formula "33"))
                                     (builtin "One Step Simplification" (formula "33"))
                                    (rule "andLeft" (formula "33"))
                                    (rule "notLeft" (formula "33"))
                                    (rule "notLeft" (formula "33"))
                                    (rule "eqSymm" (formula "78"))
                                    (rule "eqSymm" (formula "77"))
                                    (rule "unionEqualsEmpty" (formula "33"))
                                     (builtin "One Step Simplification" (formula "33"))
                                    (rule "andLeft" (formula "33"))
                                    (rule "notLeft" (formula "34"))
                                    (rule "notLeft" (formula "33"))
                                    (rule "eqSymm" (formula "77"))
                                    (rule "eqSymm" (formula "76"))
                                    (rule "unionEqualsEmpty" (formula "33"))
                                     (builtin "One Step Simplification" (formula "33"))
                                    (rule "andLeft" (formula "33"))
                                    (rule "notLeft" (formula "33"))
                                    (rule "notLeft" (formula "33"))
                                    (rule "eqSymm" (formula "76"))
                                    (rule "eqSymm" (formula "75"))
                                    (rule "unionEqualsEmpty" (formula "46"))
                                     (builtin "One Step Simplification" (formula "46"))
                                    (rule "andLeft" (formula "46"))
                                    (rule "notLeft" (formula "46"))
                                    (rule "notLeft" (formula "46"))
                                    (rule "eqSymm" (formula "75"))
                                    (rule "eqSymm" (formula "74"))
                                    (rule "sortsDisjointModuloNull" (formula "75"))
                                    (rule "replace_known_right" (formula "75") (term "1") (ifseqformula "116"))
                                     (builtin "One Step Simplification" (formula "75"))
                                    (rule "false_right" (formula "75"))
                                    (rule "sortsDisjointModuloNull" (formula "74"))
                                    (rule "replace_known_right" (formula "74") (term "1") (ifseqformula "115"))
                                     (builtin "One Step Simplification" (formula "74"))
                                    (rule "false_right" (formula "74"))
                                    (rule "unionEqualsEmpty" (formula "46"))
                                     (builtin "One Step Simplification" (formula "46"))
                                    (rule "andLeft" (formula "46"))
                                    (rule "notLeft" (formula "46"))
                                    (rule "notLeft" (formula "46"))
                                    (rule "eqSymm" (formula "74"))
                                    (rule "eqSymm" (formula "73"))
                                    (rule "sortsDisjointModuloNull" (formula "74"))
                                    (rule "replace_known_right" (formula "74") (term "1") (ifseqformula "115"))
                                     (builtin "One Step Simplification" (formula "74"))
                                    (rule "false_right" (formula "74"))
                                    (rule "sortsDisjointModuloNull" (formula "73"))
                                    (rule "replace_known_right" (formula "73") (term "1") (ifseqformula "114"))
                                     (builtin "One Step Simplification" (formula "73"))
                                    (rule "false_right" (formula "73"))
                                    (rule "unionEqualsEmpty" (formula "46"))
                                     (builtin "One Step Simplification" (formula "46"))
                                    (rule "andLeft" (formula "46"))
                                    (rule "notLeft" (formula "46"))
                                    (rule "notLeft" (formula "46"))
                                    (rule "eqSymm" (formula "73"))
                                    (rule "eqSymm" (formula "72"))
                                    (rule "sortsDisjointModuloNull" (formula "73"))
                                    (rule "replace_known_right" (formula "73") (term "1") (ifseqformula "114"))
                                     (builtin "One Step Simplification" (formula "73"))
                                    (rule "false_right" (formula "73"))
                                    (rule "sortsDisjointModuloNull" (formula "72"))
                                    (rule "replace_known_right" (formula "72") (term "1") (ifseqformula "113"))
                                     (builtin "One Step Simplification" (formula "72"))
                                    (rule "false_right" (formula "72"))
                                    (rule "unionEqualsEmpty" (formula "46"))
                                     (builtin "One Step Simplification" (formula "46"))
                                    (rule "andLeft" (formula "46"))
                                    (rule "notLeft" (formula "46"))
                                    (rule "notLeft" (formula "46"))
                                    (rule "eqSymm" (formula "72"))
                                    (rule "eqSymm" (formula "71"))
                                    (rule "sortsDisjointModuloNull" (formula "72"))
                                    (rule "replace_known_right" (formula "72") (term "1") (ifseqformula "113"))
                                     (builtin "One Step Simplification" (formula "72"))
                                    (rule "false_right" (formula "72"))
                                    (rule "sortsDisjointModuloNull" (formula "71"))
                                    (rule "replace_known_right" (formula "71") (term "1") (ifseqformula "112"))
                                     (builtin "One Step Simplification" (formula "71"))
                                    (rule "false_right" (formula "71"))
                                    (rule "unionEqualsEmpty" (formula "44"))
                                     (builtin "One Step Simplification" (formula "44"))
                                    (rule "andLeft" (formula "44"))
                                    (rule "notLeft" (formula "45"))
                                    (rule "notLeft" (formula "44"))
                                    (rule "eqSymm" (formula "71"))
                                    (rule "eqSymm" (formula "70"))
                                    (rule "unionEqualsEmpty" (formula "44"))
                                     (builtin "One Step Simplification" (formula "44"))
                                    (rule "andLeft" (formula "44"))
                                    (rule "notLeft" (formula "44"))
                                    (rule "notLeft" (formula "44"))
                                    (rule "eqSymm" (formula "70"))
                                    (rule "eqSymm" (formula "69"))
                                    (rule "unionEqualsEmpty" (formula "43"))
                                     (builtin "One Step Simplification" (formula "43"))
                                    (rule "andLeft" (formula "43"))
                                    (rule "notLeft" (formula "44"))
                                    (rule "notLeft" (formula "43"))
                                    (rule "eqSymm" (formula "69"))
                                    (rule "eqSymm" (formula "68"))
                                    (rule "unionEqualsEmpty" (formula "42"))
                                     (builtin "One Step Simplification" (formula "42"))
                                    (rule "andLeft" (formula "42"))
                                    (rule "notLeft" (formula "43"))
                                    (rule "notLeft" (formula "42"))
                                    (rule "eqSymm" (formula "68"))
                                    (rule "eqSymm" (formula "67"))
                                    (rule "commuteUnion" (formula "62") (term "1,1,1"))
                                    (rule "commuteUnion_2" (formula "62") (term "0,1"))
                                    (rule "commuteUnion" (formula "15") (term "1,1,0,1,0,5,0,1,0"))
                                    (rule "commuteUnion_2" (formula "15") (term "0,0,1,0,5,0,1,0"))
                                    (rule "commuteUnion_2" (formula "12") (term "0,0,1,0,2,0"))
                                    (rule "commuteUnion" (formula "12") (term "1,1,0,1,0,2,0"))
                                    (rule "commuteUnion" (formula "14") (term "1,1,0,1,0,0"))
                                    (rule "commuteUnion_2" (formula "14") (term "0,0,1,0,0"))
                                    (rule "commuteUnion_2" (formula "15") (term "0,0,1,0,4,0,1,0"))
                                    (rule "commuteUnion" (formula "15") (term "1,1,0,1,0,4,0,1,0"))
                                    (rule "commuteUnion_2" (formula "13") (term "0,0,1,0,0"))
                                    (rule "commuteUnion" (formula "13") (term "1,1,0,1,0,0"))
                                    (rule "commuteUnion" (formula "43") (term "0,0,1,0,1,0"))
                                    (rule "commuteUnion" (formula "43") (term "1,1,1,0,1,0"))
                                    (rule "commuteUnion_2" (formula "16") (term "0,0,1,0,0,0,1"))
                                    (rule "commuteUnion" (formula "16") (term "1,1,0,1,0,0,0,1"))
                                    (rule "commuteUnion_2" (formula "117") (term "0,0,1,0,0"))
                                    (rule "commuteUnion" (formula "117") (term "1,1,0,1,0,0"))
                                    (rule "commuteUnion" (formula "15") (term "0,0,0,1,0,0,1,0"))
                                    (rule "commuteUnion" (formula "15") (term "1,1,0,1,0,0,1,0"))
                                    (rule "commuteUnion" (formula "62") (term "0,0,1"))
                                    (rule "commuteUnion" (formula "15") (term "0,0,0,1,0,5,0,1,0"))
                                    (rule "commuteUnion" (formula "12") (term "0,0,0,1,0,2,0"))
                                    (rule "commuteUnion" (formula "14") (term "0,0,0,1,0,0"))
                                    (rule "commuteUnion" (formula "15") (term "0,0,0,1,0,4,0,1,0"))
                                    (rule "commuteUnion" (formula "13") (term "0,0,0,1,0,0"))
                                    (rule "commuteUnion_2" (formula "43") (term "0,1,0,1,0"))
                                    (rule "commuteUnion" (formula "16") (term "0,0,0,1,0,0,0,1"))
                                    (rule "commuteUnion" (formula "117") (term "0,0,0,1,0,0"))
                                    (rule "commuteUnion" (formula "15") (term "0,0,1,0,0,1,0"))
                                    (rule "commuteUnion_2" (formula "62") (term "0,1"))
                                    (rule "commuteUnion_2" (formula "15") (term "0,0,1,0,5,0,1,0"))
                                    (rule "commuteUnion_2" (formula "12") (term "0,0,1,0,2,0"))
                                    (rule "commuteUnion_2" (formula "14") (term "0,0,1,0,0"))
                                    (rule "commuteUnion_2" (formula "15") (term "0,0,1,0,4,0,1,0"))
                                    (rule "commuteUnion_2" (formula "13") (term "0,0,1,0,0"))
                                    (rule "commuteUnion_2" (formula "43") (term "1,0,1,0"))
                                    (rule "commuteUnion_2" (formula "16") (term "0,0,1,0,0,0,1"))
                                    (rule "commuteUnion_2" (formula "117") (term "0,0,1,0,0"))
                                    (rule "commuteUnion_2" (formula "62") (term "1"))
                                    (rule "commuteUnion_2" (formula "15") (term "0,1,0,5,0,1,0"))
                                    (rule "commuteUnion_2" (formula "12") (term "0,1,0,2,0"))
                                    (rule "commuteUnion_2" (formula "14") (term "0,1,0,0"))
                                    (rule "commuteUnion_2" (formula "15") (term "0,1,0,4,0,1,0"))
                                    (rule "commuteUnion_2" (formula "13") (term "0,1,0,0"))
                                    (rule "commuteUnion" (formula "43") (term "0,0,1,0,1,0"))
                                    (rule "commuteUnion_2" (formula "16") (term "0,1,0,0,0,1"))
                                    (rule "commuteUnion_2" (formula "117") (term "0,1,0,0"))
                                    (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "23"))
                                    (rule "andLeft" (formula "23"))
                                    (rule "notLeft" (formula "24"))
                                    (rule "andLeft" (formula "23"))
                                    (rule "notLeft" (formula "24"))
                                    (rule "andLeft" (formula "23"))
                                    (rule "andLeft" (formula "23"))
                                    (rule "notLeft" (formula "25"))
                                    (rule "andLeft" (formula "23"))
                                    (rule "notLeft" (formula "25"))
                                    (rule "notLeft" (formula "24"))
                                    (rule "andLeft" (formula "23"))
                                    (rule "notLeft" (formula "24"))
                                    (rule "andLeft" (formula "23"))
                                    (rule "notLeft" (formula "23"))
                                    (rule "notLeft" (formula "23"))
                                    (rule "Definition_axiom_for_smallBucketsInRangeSorted_in_de_wiesler_Sorter" (formula "47") (term "0") (inst "b=b"))
                                     (builtin "One Step Simplification" (formula "47"))
                                    (rule "expand_inInt" (formula "47") (term "1,0,0"))
                                    (rule "replace_int_MIN" (formula "47") (term "0,1,1,0,0"))
                                    (rule "replace_int_MAX" (formula "47") (term "1,0,1,0,0"))
                                    (rule "translateJavaAddInt" (formula "47") (term "0,2,5,0,1,0"))
                                    (rule "polySimp_addComm0" (formula "47") (term "0,2,5,0,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "47") (term "1,0,0,0"))
                                    (rule "polySimp_mulAssoc" (formula "47") (term "1,0,0,1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "47") (term "0,1,0,0,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "47") (term "1,0,0,1,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "47") (term "0,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "47") (term "1,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "47") (term "1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "47") (term "1,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "47") (term "1,1,0,0,0"))
                                    (rule "mul_literals" (formula "47") (term "0,1,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "47") (term "1,1,1,0,0,0"))
                                    (rule "Definition_axiom_for_isValidBucketStarts_in_de_wiesler_Functions" (formula "45") (term "0"))
                                     (builtin "One Step Simplification" (formula "45"))
                                    (rule "andLeft" (formula "45"))
                                    (rule "andLeft" (formula "45"))
                                    (rule "andLeft" (formula "45"))
                                    (rule "translateJavaAddInt" (formula "47") (term "3,0"))
                                    (rule "translateJavaAddInt" (formula "46") (term "0"))
                                    (rule "polySimp_addComm0" (formula "47") (term "3,0"))
                                    (rule "polySimp_addComm0" (formula "46") (term "0"))
                                    (rule "inEqSimp_commuteLeq" (formula "45"))
                                    (rule "inEqSimp_commuteLeq" (formula "46"))
                                    (rule "applyEq" (formula "46") (term "0") (ifseqformula "35"))
                                    (rule "inEqSimp_homoInEq1" (formula "46"))
                                    (rule "mul_literals" (formula "46") (term "1,0"))
                                    (rule "polySimp_addComm1" (formula "46") (term "0"))
                                    (rule "add_literals" (formula "46") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "46"))
                                    (rule "mul_literals" (formula "46") (term "1"))
                                    (rule "inEqSimp_subsumption6" (formula "45") (ifseqformula "3"))
                                    (rule "mul_literals" (formula "45") (term "1,1,0"))
                                    (rule "greater_literals" (formula "45") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "45"))
                                    (rule "leq_literals" (formula "45") (term "0"))
                                     (builtin "One Step Simplification" (formula "45"))
                                    (rule "true_left" (formula "45"))
                                    (rule "elimGcdLeq_antec" (formula "45") (inst "elimGcdRightDiv=Z(6(5(2(#))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                                    (rule "mul_literals" (formula "45") (term "0,1,0,0,0,0,1,0"))
                                    (rule "neg_literal" (formula "45") (term "0,0,0,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "45") (term "1,0,1,0"))
                                    (rule "leq_literals" (formula "45") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "45"))
                                    (rule "mul_literals" (formula "45") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_addLiterals" (formula "45") (term "0,0,0,0"))
                                    (rule "add_zero_right" (formula "45") (term "0,0,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "45") (term "0,0"))
                                    (rule "add_literals" (formula "45") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "45") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "45") (term "0,0"))
                                    (rule "qeq_literals" (formula "45") (term "0"))
                                     (builtin "One Step Simplification" (formula "45"))
                                    (rule "inEqSimp_subsumption0" (formula "67") (ifseqformula "45"))
                                    (rule "leq_literals" (formula "67") (term "0"))
                                     (builtin "One Step Simplification" (formula "67"))
                                    (rule "true_left" (formula "67"))
                                    (rule "pullOutSelect" (formula "47") (term "0") (inst "selectSK=arr_1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "47") (ifseqformula "42"))
                                     (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "123")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "47") (term "0,0,1,0,0") (ifseqformula "33"))
                                    (rule "replace_known_left" (formula "47") (term "1,0,0,1,0,0") (ifseqformula "34"))
                                     (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "122")))
                                    (rule "applyEqRigid" (formula "47") (term "1") (ifseqformula "48"))
                                    (rule "ifEqualsInteger" (formula "47"))
                                    (rule "elementOfUnion" (formula "47") (term "0,0,1"))
                                    (rule "elementOfArrayRangeConcrete" (formula "47") (term "1,0,0,1"))
                                    (rule "eqSymm" (formula "47") (term "0,0,1,0,0,1"))
                                    (rule "replace_known_right" (formula "47") (term "0,0,1,0,0,1") (ifseqformula "121"))
                                     (builtin "One Step Simplification" (formula "47"))
                                    (rule "elementOfUnion" (formula "47") (term "0,0,1"))
                                     (builtin "One Step Simplification" (formula "47"))
                                    (rule "andLeft" (formula "47"))
                                    (rule "elementOfUnion" (formula "47"))
                                    (rule "elementOfArrayRangeConcrete" (formula "47") (term "1"))
                                    (rule "eqSymm" (formula "47") (term "0,0,1"))
                                    (rule "replace_known_right" (formula "47") (term "0,0,1") (ifseqformula "122"))
                                     (builtin "One Step Simplification" (formula "47"))
                                    (rule "elementOfUnion" (formula "47"))
                                     (builtin "One Step Simplification" (formula "47"))
                                    (rule "true_left" (formula "47"))
                                    (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "45"))
                                    (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                                    (rule "mul_literals" (formula "7") (term "0,0,0"))
                                    (rule "polySimp_addComm1" (formula "7") (term "0"))
                                    (rule "add_literals" (formula "7") (term "0,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "7"))
                                    (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                                    (rule "polySimp_elimOne" (formula "7") (term "0"))
                                    (rule "inEqSimp_subsumption0" (formula "6") (ifseqformula "7"))
                                    (rule "leq_literals" (formula "6") (term "0"))
                                     (builtin "One Step Simplification" (formula "6"))
                                    (rule "true_left" (formula "6"))
                                    (rule "Definition_axiom_for_allBucketsPartitioned_in_de_wiesler_Sorter" (formula "49") (term "0") (inst "b=b"))
                                     (builtin "One Step Simplification" (formula "49"))
                                    (rule "expand_inInt" (formula "49") (term "1,0,0"))
                                    (rule "replace_int_MIN" (formula "49") (term "0,1,1,0,0"))
                                    (rule "replace_int_MAX" (formula "49") (term "1,0,1,0,0"))
                                    (rule "translateJavaAddInt" (formula "49") (term "0,2,5,0,1,0"))
                                    (rule "polySimp_addComm0" (formula "49") (term "0,2,5,0,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "49") (term "1,0,0,0"))
                                    (rule "polySimp_mulAssoc" (formula "49") (term "1,0,0,1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "49") (term "0,1,0,0,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "49") (term "1,0,0,1,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "49") (term "0,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "49") (term "1,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "49") (term "1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "49") (term "1,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "49") (term "1,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "49") (term "1,1,1,0,0,0"))
                                    (rule "mul_literals" (formula "49") (term "0,1,1,0,0,0"))
                                    (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "65"))
                                    (rule "andLeft" (formula "65"))
                                    (rule "notLeft" (formula "66"))
                                    (rule "andLeft" (formula "65"))
                                    (rule "andLeft" (formula "65"))
                                    (rule "notLeft" (formula "67"))
                                    (rule "andLeft" (formula "65"))
                                    (rule "notLeft" (formula "67"))
                                    (rule "andLeft" (formula "65"))
                                    (rule "notLeft" (formula "67"))
                                    (rule "andLeft" (formula "65"))
                                    (rule "notLeft" (formula "67"))
                                    (rule "notLeft" (formula "66"))
                                    (rule "andLeft" (formula "65"))
                                    (rule "notLeft" (formula "65"))
                                    (rule "notLeft" (formula "65"))
                                    (rule "Definition_axiom_for_equalityBucketsInRange_in_de_wiesler_Sorter" (formula "54") (term "0,1") (inst "b=b"))
                                     (builtin "One Step Simplification" (formula "54"))
                                    (rule "expand_inInt" (formula "54") (term "1,0,0,1"))
                                    (rule "replace_int_MAX" (formula "54") (term "1,0,1,0,0,1"))
                                    (rule "replace_int_MIN" (formula "54") (term "0,1,1,0,0,1"))
                                    (rule "translateJavaMod" (formula "54") (term "0,1,0,0,0,1"))
                                    (rule "translateJavaAddInt" (formula "54") (term "0,2,1,3,0,1,0,1"))
                                    (rule "translateJavaAddInt" (formula "54") (term "2,0,1,0,1"))
                                    (rule "translateJavaAddInt" (formula "54") (term "3,0,1,0,1"))
                                    (rule "polySimp_addComm0" (formula "54") (term "0,2,1,3,0,1,0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "54") (term "1,0,0,0,0,1"))
                                    (rule "polySimp_rightDist" (formula "54") (term "1,0,0,1,0,0,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "54") (term "1,1,0,0,1,0,0,0,0,1"))
                                    (rule "mul_literals" (formula "54") (term "0,1,0,0,1,0,0,0,0,1"))
                                    (rule "polySimp_addAssoc" (formula "54") (term "0,0,1,0,0,0,0,1"))
                                    (rule "add_literals" (formula "54") (term "0,0,0,1,0,0,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "54") (term "0,0,0,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "54") (term "1,1,0,0,1"))
                                    (rule "jmod_axiom" (formula "54") (term "0,1,0,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "54") (term "1,0,1,0,0,0,1"))
                                    (rule "polySimp_homoEq" (formula "54") (term "1,0,0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "54") (term "1,0,1,0,0,0,1"))
                                    (rule "polySimp_rightDist" (formula "54") (term "1,0,1,0,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "54") (term "1,1,0,1,0,0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "54") (term "0,1,0,1,0,0,0,1"))
                                    (rule "polySimp_addAssoc" (formula "54") (term "0,1,0,0,0,1"))
                                    (rule "polySimp_sepPosMonomial" (formula "54") (term "1,0,0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "54") (term "1,1,0,0,0,1"))
                                    (rule "polySimp_rightDist" (formula "54") (term "1,1,0,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "54") (term "1,1,1,0,0,0,1"))
                                    (rule "mul_literals" (formula "54") (term "0,1,1,0,0,0,1"))
                                    (rule "polySimp_elimOne" (formula "54") (term "1,1,1,0,0,0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "54") (term "1,0,0,0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "54") (term "1,1,0,0,0,0,1"))
                                    (rule "polySimp_rightDist" (formula "54") (term "1,1,0,0,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "54") (term "1,1,1,0,0,0,0,1"))
                                    (rule "mul_literals" (formula "54") (term "0,1,1,0,0,0,0,1"))
                                    (rule "Free_class_invariant_axiom_for_de_wiesler_Storage" (formula "31"))
                                     (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "56")) (ifInst ""  (formula "57")) (ifInst ""  (formula "60")) (ifInst ""  (formula "61")) (ifInst ""  (formula "62")) (ifInst ""  (formula "63")))
                                    (rule "andLeft" (formula "31"))
                                    (rule "andLeft" (formula "32"))
                                    (rule "andLeft" (formula "31"))
                                    (rule "andLeft" (formula "33"))
                                    (rule "andLeft" (formula "31"))
                                    (rule "andLeft" (formula "34"))
                                    (rule "andLeft" (formula "34"))
                                    (rule "andLeft" (formula "34"))
                                    (rule "andLeft" (formula "34"))
                                    (rule "andLeft" (formula "34"))
                                    (rule "andLeft" (formula "34"))
                                    (rule "andLeft" (formula "34"))
                                    (rule "andLeft" (formula "34"))
                                    (rule "andLeft" (formula "34"))
                                    (rule "andLeft" (formula "34"))
                                    (rule "andLeft" (formula "34"))
                                    (rule "andLeft" (formula "34"))
                                    (rule "andLeft" (formula "34"))
                                    (rule "andLeft" (formula "34"))
                                    (rule "andLeft" (formula "34"))
                                    (rule "andLeft" (formula "34"))
                                    (rule "andLeft" (formula "34"))
                                    (rule "andLeft" (formula "34"))
                                    (rule "andLeft" (formula "34"))
                                    (rule "andLeft" (formula "34"))
                                    (rule "andLeft" (formula "34"))
                                    (rule "andLeft" (formula "34"))
                                    (rule "andLeft" (formula "34"))
                                    (rule "andLeft" (formula "34"))
                                    (rule "andLeft" (formula "34"))
                                    (rule "translateJavaMulInt" (formula "32") (term "1"))
                                    (rule "mul_literals" (formula "32") (term "1"))
                                    (rule "translateJavaMulInt" (formula "31") (term "1"))
                                    (rule "mul_literals" (formula "31") (term "1"))
                                    (rule "disjointDefinition" (formula "59"))
                                     (builtin "One Step Simplification" (formula "59") (ifInst ""  (formula "146")))
                                    (rule "true_left" (formula "59"))
                                    (rule "disjointDefinition" (formula "58"))
                                     (builtin "One Step Simplification" (formula "58") (ifInst ""  (formula "144")))
                                    (rule "true_left" (formula "58"))
                                    (rule "disjointDefinition" (formula "57"))
                                     (builtin "One Step Simplification" (formula "57"))
                                    (rule "notLeft" (formula "57"))
                                    (rule "eqSymm" (formula "92"))
                                    (rule "disjointDefinition" (formula "56"))
                                     (builtin "One Step Simplification" (formula "56"))
                                    (rule "notLeft" (formula "56"))
                                    (rule "eqSymm" (formula "91"))
                                    (rule "disjointDefinition" (formula "55"))
                                     (builtin "One Step Simplification" (formula "55"))
                                    (rule "notLeft" (formula "55"))
                                    (rule "eqSymm" (formula "90"))
                                    (rule "disjointDefinition" (formula "54"))
                                     (builtin "One Step Simplification" (formula "54"))
                                    (rule "notLeft" (formula "54"))
                                    (rule "eqSymm" (formula "89"))
                                    (rule "disjointDefinition" (formula "53"))
                                     (builtin "One Step Simplification" (formula "53"))
                                    (rule "notLeft" (formula "53"))
                                    (rule "eqSymm" (formula "88"))
                                    (rule "disjointDefinition" (formula "52"))
                                     (builtin "One Step Simplification" (formula "52"))
                                    (rule "notLeft" (formula "52"))
                                    (rule "eqSymm" (formula "87"))
                                    (rule "disjointDefinition" (formula "51"))
                                     (builtin "One Step Simplification" (formula "51"))
                                    (rule "notLeft" (formula "51"))
                                    (rule "eqSymm" (formula "86"))
                                    (rule "disjointDefinition" (formula "50"))
                                     (builtin "One Step Simplification" (formula "50"))
                                    (rule "notLeft" (formula "50"))
                                    (rule "eqSymm" (formula "85"))
                                    (rule "disjointDefinition" (formula "49"))
                                     (builtin "One Step Simplification" (formula "49"))
                                    (rule "notLeft" (formula "49"))
                                    (rule "eqSymm" (formula "84"))
                                    (rule "disjointDefinition" (formula "48"))
                                     (builtin "One Step Simplification" (formula "48"))
                                    (rule "notLeft" (formula "48"))
                                    (rule "eqSymm" (formula "83"))
                                    (rule "disjointDefinition" (formula "47"))
                                     (builtin "One Step Simplification" (formula "47"))
                                    (rule "notLeft" (formula "47"))
                                    (rule "eqSymm" (formula "82"))
                                    (rule "disjointDefinition" (formula "46"))
                                     (builtin "One Step Simplification" (formula "46"))
                                    (rule "notLeft" (formula "46"))
                                    (rule "eqSymm" (formula "81"))
                                    (rule "disjointDefinition" (formula "45"))
                                     (builtin "One Step Simplification" (formula "45"))
                                    (rule "notLeft" (formula "45"))
                                    (rule "eqSymm" (formula "80"))
                                    (rule "disjointDefinition" (formula "44"))
                                     (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "116")))
                                    (rule "true_left" (formula "44"))
                                    (rule "disjointDefinition" (formula "43"))
                                     (builtin "One Step Simplification" (formula "43"))
                                    (rule "notLeft" (formula "43"))
                                    (rule "eqSymm" (formula "78"))
                                    (rule "disjointDefinition" (formula "42"))
                                     (builtin "One Step Simplification" (formula "42"))
                                    (rule "notLeft" (formula "42"))
                                    (rule "eqSymm" (formula "77"))
                                    (rule "disjointDefinition" (formula "41"))
                                     (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "110")))
                                    (rule "true_left" (formula "41"))
                                    (rule "disjointDefinition" (formula "40"))
                                     (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "108")))
                                    (rule "true_left" (formula "40"))
                                    (rule "disjointDefinition" (formula "39"))
                                     (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "106")))
                                    (rule "true_left" (formula "39"))
                                    (rule "disjointDefinition" (formula "38"))
                                     (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "104")))
                                    (rule "true_left" (formula "38"))
                                    (rule "disjointDefinition" (formula "37"))
                                     (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "102")))
                                    (rule "true_left" (formula "37"))
                                    (rule "disjointDefinition" (formula "36"))
                                     (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "100")))
                                    (rule "true_left" (formula "36"))
                                    (rule "disjointDefinition" (formula "35"))
                                     (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "98")))
                                    (rule "true_left" (formula "35"))
                                    (rule "disjointDefinition" (formula "34"))
                                     (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "96")))
                                    (rule "true_left" (formula "34"))
                                    (rule "disjointDefinition" (formula "32"))
                                     (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "94")))
                                    (rule "true_left" (formula "32"))
                                    (rule "disjointDefinition" (formula "32"))
                                     (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "92")))
                                    (rule "true_left" (formula "32"))
                                    (rule "applyEq" (formula "31") (term "0") (ifseqformula "64"))
                                    (rule "eqSymm" (formula "31"))
                                    (rule "commute_or_2" (formula "15") (term "0,0"))
                                    (rule "cut_direct" (formula "16") (term "0"))
                                    (branch "CUT: result_242.equal_buckets = TRUE TRUE"
                                        (builtin "One Step Simplification" (formula "17"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "replace_known_left" (formula "11") (term "0") (ifseqformula "16"))
                                        (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "18")))
                                       (rule "true_left" (formula "11"))
                                       (rule "replace_known_left" (formula "55") (term "0") (ifseqformula "15"))
                                        (builtin "One Step Simplification" (formula "55"))
                                       (rule "applyEqRigid" (formula "16") (term "1,6,0") (ifseqformula "17"))
                                       (rule "applyEqRigid" (formula "8") (term "0") (ifseqformula "17"))
                                       (rule "inEqSimp_homoInEq1" (formula "8"))
                                       (rule "polySimp_mulLiterals" (formula "8") (term "1,0"))
                                       (rule "polySimp_pullOutFactor0" (formula "8") (term "0"))
                                       (rule "add_literals" (formula "8") (term "1,0"))
                                       (rule "times_zero_1" (formula "8") (term "0"))
                                       (rule "leq_literals" (formula "8"))
                                       (rule "true_left" (formula "8"))
                                       (rule "applyEq" (formula "13") (term "1,1,0,0,0,0") (ifseqformula "16"))
                                       (rule "applyEq" (formula "11") (term "7,0") (ifseqformula "16"))
                                       (rule "applyEq" (formula "8") (term "0") (ifseqformula "16"))
                                       (rule "inEqSimp_homoInEq0" (formula "8"))
                                       (rule "polySimp_mulLiterals" (formula "8") (term "1,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "8") (term "0"))
                                       (rule "add_literals" (formula "8") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "8") (term "1,0"))
                                       (rule "add_zero_right" (formula "8") (term "0"))
                                       (rule "qeq_literals" (formula "8"))
                                       (rule "true_left" (formula "8"))
                                       (rule "applyEqRigid" (formula "4") (term "0") (ifseqformula "15"))
                                       (rule "applyEqRigid" (formula "124") (term "0,1") (ifseqformula "15"))
                                       (rule "applyEqRigid" (formula "8") (term "0,0") (ifseqformula "15"))
                                       (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "15"))
                                       (rule "applyEq" (formula "1") (term "0") (ifseqformula "15"))
                                       (rule "inEqSimp_homoInEq0" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                       (rule "mul_literals" (formula "1") (term "0,1"))
                                       (rule "inEqSimp_subsumption6" (formula "4") (ifseqformula "2"))
                                       (rule "times_zero_1" (formula "4") (term "1,1,0"))
                                       (rule "greater_literals" (formula "4") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "4"))
                                       (rule "leq_literals" (formula "4") (term "0"))
                                        (builtin "One Step Simplification" (formula "4"))
                                       (rule "true_left" (formula "4"))
                                       (rule "inEqSimp_subsumption4" (formula "123") (term "1") (ifseqformula "5"))
                                       (rule "greater_literals" (formula "123") (term "0,0,1"))
                                        (builtin "One Step Simplification" (formula "123"))
                                       (rule "mul_literals" (formula "123") (term "0,0,1"))
                                       (rule "leq_literals" (formula "123") (term "0,1"))
                                        (builtin "One Step Simplification" (formula "123"))
                                       (rule "inEqSimp_subsumption6" (formula "1") (ifseqformula "6"))
                                       (rule "greater_literals" (formula "1") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                                       (rule "mul_literals" (formula "1") (term "0,1,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "1") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
                                       (rule "add_literals" (formula "1") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "1") (term "0,0"))
                                       (rule "qeq_literals" (formula "1") (term "0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "polyDiv_pullOut" (formula "3") (term "0") (inst "polyDivCoeff=quotient_0"))
                                       (rule "equal_literals" (formula "3") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,0"))
                                       (rule "polySimp_homoEq" (formula "3"))
                                       (rule "polySimp_pullOutFactor0" (formula "3") (term "0,0,0,1,0"))
                                       (rule "add_literals" (formula "3") (term "1,0,0,0,1,0"))
                                       (rule "times_zero_1" (formula "3") (term "0,0,0,1,0"))
                                       (rule "div_literals" (formula "3") (term "0,0,1,0"))
                                       (rule "add_zero_left" (formula "3") (term "0,1,0"))
                                       (rule "polySimp_pullOutFactor1" (formula "3") (term "0"))
                                       (rule "add_literals" (formula "3") (term "1,0"))
                                       (rule "times_zero_1" (formula "3") (term "0"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "true_left" (formula "3"))
                                       (rule "commute_or_2" (formula "51") (term "0,0"))
                                       (rule "commuteUnion" (formula "27") (term "0,0"))
                                       (rule "commuteUnion" (formula "27") (term "1,1,0"))
                                       (rule "nnf_imp2or" (formula "46") (term "0"))
                                       (rule "cut_direct" (formula "39") (term "0,0,0"))
                                       (branch "CUT: result_242.<created> = TRUE TRUE"
                                           (builtin "One Step Simplification" (formula "40"))
                                          (rule "true_left" (formula "40"))
                                          (rule "commuteUnion" (formula "27") (term "1,0,0"))
                                          (rule "applyEq" (formula "9") (term "0,1,0,0,1,0") (ifseqformula "27"))
                                          (rule "nnf_imp2or" (formula "45") (term "0"))
                                          (rule "Definition_axiom_for_allBucketsPartitioned_in_de_wiesler_Sorter" (formula "8") (term "0") (inst "b=b"))
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "expand_inInt" (formula "8") (term "1,0,0"))
                                          (rule "replace_int_MAX" (formula "8") (term "1,0,1,0,0"))
                                          (rule "replace_int_MIN" (formula "8") (term "0,1,1,0,0"))
                                          (rule "translateJavaAddInt" (formula "8") (term "0,2,5,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "8") (term "0,2,5,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,0"))
                                          (rule "polySimp_mulAssoc" (formula "8") (term "1,0,0,1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "8") (term "0,1,0,0,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,1,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "8") (term "1,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0,0"))
                                          (rule "mul_literals" (formula "8") (term "0,1,1,0,0,0"))
                                          (rule "arrayLengthIsAShort" (formula "59") (term "0"))
                                          (rule "expand_inShort" (formula "59"))
                                          (rule "replace_short_MAX" (formula "59") (term "1,0"))
                                          (rule "replace_short_MIN" (formula "59") (term "0,1"))
                                          (rule "andLeft" (formula "59"))
                                          (rule "inEqSimp_commuteLeq" (formula "60"))
                                          (rule "applyEq" (formula "60") (term "0") (ifseqformula "61"))
                                          (rule "qeq_literals" (formula "60"))
                                          (rule "true_left" (formula "60"))
                                          (rule "applyEq" (formula "59") (term "0") (ifseqformula "60"))
                                          (rule "leq_literals" (formula "59"))
                                          (rule "true_left" (formula "59"))
                                          (rule "arrayLengthNotNegative" (formula "59") (term "0"))
                                          (rule "applyEq" (formula "59") (term "0") (ifseqformula "60"))
                                          (rule "qeq_literals" (formula "59"))
                                          (rule "true_left" (formula "59"))
                                          (rule "arrayLengthIsAShort" (formula "58") (term "0"))
                                          (rule "expand_inShort" (formula "58"))
                                          (rule "replace_short_MAX" (formula "58") (term "1,0"))
                                          (rule "replace_short_MIN" (formula "58") (term "0,1"))
                                          (rule "andLeft" (formula "58"))
                                          (rule "inEqSimp_commuteLeq" (formula "59"))
                                          (rule "applyEq" (formula "59") (term "0") (ifseqformula "60"))
                                          (rule "qeq_literals" (formula "59"))
                                          (rule "true_left" (formula "59"))
                                          (rule "applyEq" (formula "58") (term "0") (ifseqformula "59"))
                                          (rule "leq_literals" (formula "58"))
                                          (rule "true_left" (formula "58"))
                                          (rule "arrayLengthNotNegative" (formula "58") (term "0"))
                                          (rule "applyEq" (formula "58") (term "0") (ifseqformula "59"))
                                          (rule "qeq_literals" (formula "58"))
                                          (rule "true_left" (formula "58"))
                                          (rule "arrayLengthIsAShort" (formula "57") (term "0"))
                                          (rule "expand_inShort" (formula "57"))
                                          (rule "replace_short_MAX" (formula "57") (term "1,0"))
                                          (rule "replace_short_MIN" (formula "57") (term "0,1"))
                                          (rule "andLeft" (formula "57"))
                                          (rule "inEqSimp_commuteLeq" (formula "58"))
                                          (rule "applyEq" (formula "58") (term "0") (ifseqformula "59"))
                                          (rule "qeq_literals" (formula "58"))
                                          (rule "true_left" (formula "58"))
                                          (rule "applyEq" (formula "57") (term "0") (ifseqformula "58"))
                                          (rule "leq_literals" (formula "57"))
                                          (rule "true_left" (formula "57"))
                                          (rule "arrayLengthNotNegative" (formula "57") (term "0"))
                                          (rule "applyEq" (formula "57") (term "0") (ifseqformula "58"))
                                          (rule "qeq_literals" (formula "57"))
                                          (rule "true_left" (formula "57"))
                                          (rule "arrayLengthIsAShort" (formula "56") (term "0"))
                                          (rule "expand_inShort" (formula "56"))
                                          (rule "replace_short_MAX" (formula "56") (term "1,0"))
                                          (rule "replace_short_MIN" (formula "56") (term "0,1"))
                                          (rule "andLeft" (formula "56"))
                                          (rule "inEqSimp_commuteLeq" (formula "57"))
                                          (rule "applyEq" (formula "57") (term "0") (ifseqformula "58"))
                                          (rule "qeq_literals" (formula "57"))
                                          (rule "true_left" (formula "57"))
                                          (rule "applyEq" (formula "56") (term "0") (ifseqformula "57"))
                                          (rule "leq_literals" (formula "56"))
                                          (rule "true_left" (formula "56"))
                                          (rule "arrayLengthNotNegative" (formula "56") (term "0"))
                                          (rule "applyEq" (formula "56") (term "0") (ifseqformula "57"))
                                          (rule "qeq_literals" (formula "56"))
                                          (rule "true_left" (formula "56"))
                                          (rule "arrayLengthNotNegative" (formula "55") (term "0"))
                                          (rule "applyEq" (formula "55") (term "0") (ifseqformula "56"))
                                          (rule "qeq_literals" (formula "55"))
                                          (rule "true_left" (formula "55"))
                                          (rule "arrayLengthIsAShort" (formula "55") (term "0"))
                                          (rule "expand_inShort" (formula "55"))
                                          (rule "replace_short_MIN" (formula "55") (term "0,1"))
                                          (rule "replace_short_MAX" (formula "55") (term "1,0"))
                                          (rule "andLeft" (formula "55"))
                                          (rule "inEqSimp_commuteLeq" (formula "56"))
                                          (rule "applyEq" (formula "55") (term "0") (ifseqformula "57"))
                                          (rule "leq_literals" (formula "55"))
                                          (rule "closeFalse" (formula "55"))
                                       )
                                       (branch "CUT: result_242.<created> = TRUE FALSE"
                                           (builtin "One Step Simplification" (formula "39"))
                                          (rule "commuteUnion" (formula "27") (term "1,0,0"))
                                          (rule "applyEq" (formula "9") (term "0,1,0,0,1,0") (ifseqformula "27"))
                                          (rule "nnf_imp2or" (formula "45") (term "0"))
                                          (rule "Definition_axiom_for_allBucketsPartitioned_in_de_wiesler_Sorter" (formula "8") (term "0") (inst "b=b"))
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "expand_inInt" (formula "8") (term "1,0,0"))
                                          (rule "replace_int_MIN" (formula "8") (term "0,1,1,0,0"))
                                          (rule "replace_int_MAX" (formula "8") (term "1,0,1,0,0"))
                                          (rule "translateJavaAddInt" (formula "8") (term "0,2,5,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "8") (term "0,2,5,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,0"))
                                          (rule "polySimp_mulAssoc" (formula "8") (term "1,0,0,1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "8") (term "0,1,0,0,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,1,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "8") (term "1,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,0"))
                                          (rule "mul_literals" (formula "8") (term "0,1,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0,0"))
                                          (rule "arrayLengthNotNegative" (formula "59") (term "0"))
                                          (rule "applyEq" (formula "59") (term "0") (ifseqformula "60"))
                                          (rule "qeq_literals" (formula "59"))
                                          (rule "true_left" (formula "59"))
                                          (rule "arrayLengthIsAShort" (formula "59") (term "0"))
                                          (rule "expand_inShort" (formula "59"))
                                          (rule "replace_short_MAX" (formula "59") (term "1,0"))
                                          (rule "replace_short_MIN" (formula "59") (term "0,1"))
                                          (rule "andLeft" (formula "59"))
                                          (rule "inEqSimp_commuteLeq" (formula "60"))
                                          (rule "applyEq" (formula "60") (term "0") (ifseqformula "61"))
                                          (rule "qeq_literals" (formula "60"))
                                          (rule "true_left" (formula "60"))
                                          (rule "applyEq" (formula "59") (term "0") (ifseqformula "60"))
                                          (rule "leq_literals" (formula "59"))
                                          (rule "true_left" (formula "59"))
                                          (rule "arrayLengthNotNegative" (formula "58") (term "0"))
                                          (rule "applyEq" (formula "58") (term "0") (ifseqformula "59"))
                                          (rule "qeq_literals" (formula "58"))
                                          (rule "true_left" (formula "58"))
                                          (rule "arrayLengthIsAShort" (formula "58") (term "0"))
                                          (rule "expand_inShort" (formula "58"))
                                          (rule "replace_short_MAX" (formula "58") (term "1,0"))
                                          (rule "replace_short_MIN" (formula "58") (term "0,1"))
                                          (rule "andLeft" (formula "58"))
                                          (rule "inEqSimp_commuteLeq" (formula "59"))
                                          (rule "applyEq" (formula "59") (term "0") (ifseqformula "60"))
                                          (rule "qeq_literals" (formula "59"))
                                          (rule "true_left" (formula "59"))
                                          (rule "applyEq" (formula "58") (term "0") (ifseqformula "59"))
                                          (rule "leq_literals" (formula "58"))
                                          (rule "true_left" (formula "58"))
                                          (rule "arrayLengthNotNegative" (formula "57") (term "0"))
                                          (rule "applyEq" (formula "57") (term "0") (ifseqformula "58"))
                                          (rule "qeq_literals" (formula "57"))
                                          (rule "true_left" (formula "57"))
                                          (rule "arrayLengthIsAShort" (formula "57") (term "0"))
                                          (rule "expand_inShort" (formula "57"))
                                          (rule "replace_short_MAX" (formula "57") (term "1,0"))
                                          (rule "replace_short_MIN" (formula "57") (term "0,1"))
                                          (rule "andLeft" (formula "57"))
                                          (rule "inEqSimp_commuteLeq" (formula "58"))
                                          (rule "applyEq" (formula "58") (term "0") (ifseqformula "59"))
                                          (rule "qeq_literals" (formula "58"))
                                          (rule "true_left" (formula "58"))
                                          (rule "applyEq" (formula "57") (term "0") (ifseqformula "58"))
                                          (rule "leq_literals" (formula "57"))
                                          (rule "true_left" (formula "57"))
                                          (rule "arrayLengthIsAShort" (formula "56") (term "0"))
                                          (rule "expand_inShort" (formula "56"))
                                          (rule "replace_short_MIN" (formula "56") (term "0,1"))
                                          (rule "replace_short_MAX" (formula "56") (term "1,0"))
                                          (rule "andLeft" (formula "56"))
                                          (rule "inEqSimp_commuteLeq" (formula "57"))
                                          (rule "applyEq" (formula "57") (term "0") (ifseqformula "58"))
                                          (rule "qeq_literals" (formula "57"))
                                          (rule "true_left" (formula "57"))
                                          (rule "applyEq" (formula "56") (term "0") (ifseqformula "57"))
                                          (rule "leq_literals" (formula "56"))
                                          (rule "true_left" (formula "56"))
                                          (rule "arrayLengthNotNegative" (formula "56") (term "0"))
                                          (rule "applyEq" (formula "56") (term "0") (ifseqformula "57"))
                                          (rule "qeq_literals" (formula "56"))
                                          (rule "true_left" (formula "56"))
                                          (rule "arrayLengthNotNegative" (formula "55") (term "0"))
                                          (rule "applyEq" (formula "55") (term "0") (ifseqformula "56"))
                                          (rule "qeq_literals" (formula "55"))
                                          (rule "true_left" (formula "55"))
                                          (rule "arrayLengthIsAShort" (formula "55") (term "0"))
                                          (rule "expand_inShort" (formula "55"))
                                          (rule "replace_short_MAX" (formula "55") (term "1,0"))
                                          (rule "replace_short_MIN" (formula "55") (term "0,1"))
                                          (rule "andLeft" (formula "55"))
                                          (rule "inEqSimp_commuteLeq" (formula "56"))
                                          (rule "applyEq" (formula "55") (term "0") (ifseqformula "57"))
                                          (rule "leq_literals" (formula "55"))
                                          (rule "closeFalse" (formula "55"))
                                       )
                                    )
                                    (branch "CUT: result_242.equal_buckets = TRUE FALSE"
                                        (builtin "One Step Simplification" (formula "16"))
                                       (rule "true_left" (formula "16"))
                                       (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "66"))
                                        (builtin "One Step Simplification" (formula "11"))
                                       (rule "true_left" (formula "11"))
                                       (rule "replace_known_right" (formula "52") (term "0") (ifseqformula "65"))
                                        (builtin "One Step Simplification" (formula "52"))
                                       (rule "true_left" (formula "52"))
                                       (rule "commute_or_2" (formula "52") (term "0,0"))
                                       (rule "commuteUnion" (formula "29") (term "0,0,0"))
                                       (rule "commuteUnion" (formula "29") (term "1,1,0"))
                                       (rule "commuteUnion" (formula "29") (term "0,0"))
                                       (rule "applyEq" (formula "14") (term "0,1,0,0,1,0") (ifseqformula "29"))
                                       (rule "nnf_imp2or" (formula "48") (term "0"))
                                       (rule "cut_direct" (formula "41") (term "0,0,0"))
                                       (branch "CUT: result_242.<created> = TRUE TRUE"
                                           (builtin "One Step Simplification" (formula "42"))
                                          (rule "true_left" (formula "42"))
                                          (rule "cut_direct" (formula "123") (term "1"))
                                          (branch "CUT: bucket_0 <= 2147483647 TRUE"
                                              (builtin "One Step Simplification" (formula "124"))
                                             (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "1"))
                                             (rule "polySimp_mulAssoc" (formula "9") (term "0,0"))
                                             (rule "polySimp_mulComm0" (formula "9") (term "0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "9") (term "0,0"))
                                             (rule "polySimp_addComm0" (formula "9") (term "0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                             (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                             (rule "inEqSimp_subsumption4" (formula "9") (ifseqformula "7"))
                                             (rule "greater_literals" (formula "9") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "9"))
                                             (rule "mul_literals" (formula "9") (term "0,0"))
                                             (rule "leq_literals" (formula "9") (term "0"))
                                              (builtin "One Step Simplification" (formula "9"))
                                             (rule "true_left" (formula "9"))
                                             (rule "nnf_imp2or" (formula "48") (term "0"))
                                             (rule "Definition_axiom_for_allBucketsPartitioned_in_de_wiesler_Sorter" (formula "14") (term "0") (inst "b=b"))
                                              (builtin "One Step Simplification" (formula "14"))
                                             (rule "expand_inInt" (formula "14") (term "1,0,0"))
                                             (rule "replace_int_MIN" (formula "14") (term "0,1,1,0,0"))
                                             (rule "replace_int_MAX" (formula "14") (term "1,0,1,0,0"))
                                             (rule "translateJavaAddInt" (formula "14") (term "0,2,5,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "14") (term "0,2,5,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,0"))
                                             (rule "polySimp_mulAssoc" (formula "14") (term "1,0,0,1,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "14") (term "0,1,0,0,1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,1,0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "14") (term "1,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,0"))
                                             (rule "mul_literals" (formula "14") (term "0,1,1,0,0,0"))
                                             (rule "Definition_axiom_for_allBucketsInRangeSorted_in_de_wiesler_Sorter" (formula "13") (term "0") (inst "b=b"))
                                              (builtin "One Step Simplification" (formula "13"))
                                             (rule "expand_inInt" (formula "13") (term "1,0,0"))
                                             (rule "replace_int_MIN" (formula "13") (term "0,1,1,0,0"))
                                             (rule "replace_int_MAX" (formula "13") (term "1,0,1,0,0"))
                                             (rule "translateJavaAddInt" (formula "13") (term "2,0,1,0"))
                                             (rule "translateJavaAddInt" (formula "13") (term "3,0,1,0"))
                                             (rule "translateJavaAddInt" (formula "13") (term "0,2,1,3,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "13") (term "0,2,1,3,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "13") (term "1,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,0"))
                                             (rule "mul_literals" (formula "13") (term "0,1,1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,0"))
                                             (rule "arrayLengthIsAShort" (formula "61") (term "0"))
                                             (rule "expand_inShort" (formula "61"))
                                             (rule "replace_short_MAX" (formula "61") (term "1,0"))
                                             (rule "replace_short_MIN" (formula "61") (term "0,1"))
                                             (rule "andLeft" (formula "61"))
                                             (rule "inEqSimp_commuteLeq" (formula "62"))
                                             (rule "applyEq" (formula "62") (term "0") (ifseqformula "63"))
                                             (rule "qeq_literals" (formula "62"))
                                             (rule "true_left" (formula "62"))
                                             (rule "applyEq" (formula "61") (term "0") (ifseqformula "62"))
                                             (rule "leq_literals" (formula "61"))
                                             (rule "true_left" (formula "61"))
                                             (rule "arrayLengthNotNegative" (formula "61") (term "0"))
                                             (rule "applyEq" (formula "61") (term "0") (ifseqformula "62"))
                                             (rule "qeq_literals" (formula "61"))
                                             (rule "true_left" (formula "61"))
                                             (rule "arrayLengthIsAShort" (formula "60") (term "0"))
                                             (rule "expand_inShort" (formula "60"))
                                             (rule "replace_short_MAX" (formula "60") (term "1,0"))
                                             (rule "replace_short_MIN" (formula "60") (term "0,1"))
                                             (rule "andLeft" (formula "60"))
                                             (rule "inEqSimp_commuteLeq" (formula "61"))
                                             (rule "applyEq" (formula "61") (term "0") (ifseqformula "62"))
                                             (rule "qeq_literals" (formula "61"))
                                             (rule "true_left" (formula "61"))
                                             (rule "applyEq" (formula "60") (term "0") (ifseqformula "61"))
                                             (rule "leq_literals" (formula "60"))
                                             (rule "true_left" (formula "60"))
                                             (rule "arrayLengthNotNegative" (formula "60") (term "0"))
                                             (rule "applyEq" (formula "60") (term "0") (ifseqformula "61"))
                                             (rule "qeq_literals" (formula "60"))
                                             (rule "true_left" (formula "60"))
                                             (rule "arrayLengthNotNegative" (formula "59") (term "0"))
                                             (rule "applyEq" (formula "59") (term "0") (ifseqformula "60"))
                                             (rule "qeq_literals" (formula "59"))
                                             (rule "true_left" (formula "59"))
                                             (rule "arrayLengthIsAShort" (formula "59") (term "0"))
                                             (rule "expand_inShort" (formula "59"))
                                             (rule "replace_short_MIN" (formula "59") (term "0,1"))
                                             (rule "replace_short_MAX" (formula "59") (term "1,0"))
                                             (rule "andLeft" (formula "59"))
                                             (rule "inEqSimp_commuteLeq" (formula "60"))
                                             (rule "applyEq" (formula "59") (term "0") (ifseqformula "61"))
                                             (rule "leq_literals" (formula "59"))
                                             (rule "true_left" (formula "59"))
                                             (rule "applyEq" (formula "59") (term "0") (ifseqformula "60"))
                                             (rule "qeq_literals" (formula "59"))
                                             (rule "true_left" (formula "59"))
                                             (rule "arrayLengthIsAShort" (formula "58") (term "0"))
                                             (rule "expand_inShort" (formula "58"))
                                             (rule "replace_short_MAX" (formula "58") (term "1,0"))
                                             (rule "replace_short_MIN" (formula "58") (term "0,1"))
                                             (rule "andLeft" (formula "58"))
                                             (rule "inEqSimp_commuteLeq" (formula "59"))
                                             (rule "applyEq" (formula "59") (term "0") (ifseqformula "60"))
                                             (rule "qeq_literals" (formula "59"))
                                             (rule "true_left" (formula "59"))
                                             (rule "applyEq" (formula "58") (term "0") (ifseqformula "59"))
                                             (rule "leq_literals" (formula "58"))
                                             (rule "true_left" (formula "58"))
                                             (rule "arrayLengthNotNegative" (formula "58") (term "0"))
                                             (rule "applyEq" (formula "58") (term "0") (ifseqformula "59"))
                                             (rule "qeq_literals" (formula "58"))
                                             (rule "true_left" (formula "58"))
                                             (rule "arrayLengthNotNegative" (formula "57") (term "0"))
                                             (rule "applyEq" (formula "57") (term "0") (ifseqformula "58"))
                                             (rule "qeq_literals" (formula "57"))
                                             (rule "true_left" (formula "57"))
                                             (rule "arrayLengthIsAShort" (formula "57") (term "0"))
                                             (rule "expand_inShort" (formula "57"))
                                             (rule "replace_short_MIN" (formula "57") (term "0,1"))
                                             (rule "replace_short_MAX" (formula "57") (term "1,0"))
                                             (rule "andLeft" (formula "57"))
                                             (rule "inEqSimp_commuteLeq" (formula "58"))
                                             (rule "applyEq" (formula "57") (term "0") (ifseqformula "59"))
                                             (rule "leq_literals" (formula "57"))
                                             (rule "closeFalse" (formula "57"))
                                          )
                                          (branch "CUT: bucket_0 <= 2147483647 FALSE"
                                              (builtin "One Step Simplification" (formula "124"))
                                             (rule "false_right" (formula "124"))
                                             (rule "inEqSimp_leqRight" (formula "123"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                             (rule "mul_literals" (formula "1") (term "1"))
                                             (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "1"))
                                             (rule "leq_literals" (formula "5") (term "0"))
                                              (builtin "One Step Simplification" (formula "5"))
                                             (rule "true_left" (formula "5"))
                                             (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
                                             (rule "mul_literals" (formula "1") (term "0,0"))
                                             (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                             (rule "mul_literals" (formula "1") (term "1"))
                                             (rule "inEqSimp_contradInEq3" (formula "1") (ifseqformula "44"))
                                             (rule "mul_literals" (formula "1") (term "0,1,0"))
                                             (rule "greater_literals" (formula "1") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "qeq_literals" (formula "1") (term "0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                       )
                                       (branch "CUT: result_242.<created> = TRUE FALSE"
                                           (builtin "One Step Simplification" (formula "41"))
                                          (rule "cut_direct" (formula "124") (term "1"))
                                          (branch "CUT: bucket_0 <= 2147483647 TRUE"
                                              (builtin "One Step Simplification" (formula "125"))
                                             (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "1"))
                                             (rule "polySimp_mulAssoc" (formula "9") (term "0,0"))
                                             (rule "polySimp_mulComm0" (formula "9") (term "0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "9") (term "0,0"))
                                             (rule "polySimp_addComm0" (formula "9") (term "0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                             (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                             (rule "inEqSimp_subsumption4" (formula "9") (ifseqformula "7"))
                                             (rule "greater_literals" (formula "9") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "9"))
                                             (rule "mul_literals" (formula "9") (term "0,0"))
                                             (rule "leq_literals" (formula "9") (term "0"))
                                              (builtin "One Step Simplification" (formula "9"))
                                             (rule "true_left" (formula "9"))
                                             (rule "nnf_imp2or" (formula "48") (term "0"))
                                             (rule "Definition_axiom_for_allBucketsPartitioned_in_de_wiesler_Sorter" (formula "14") (term "0") (inst "b=b"))
                                              (builtin "One Step Simplification" (formula "14"))
                                             (rule "expand_inInt" (formula "14") (term "1,0,0"))
                                             (rule "replace_int_MAX" (formula "14") (term "1,0,1,0,0"))
                                             (rule "replace_int_MIN" (formula "14") (term "0,1,1,0,0"))
                                             (rule "translateJavaAddInt" (formula "14") (term "0,2,5,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "14") (term "0,2,5,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,0"))
                                             (rule "polySimp_mulAssoc" (formula "14") (term "1,0,0,1,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "14") (term "0,1,0,0,1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,1,0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "14") (term "1,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,0"))
                                             (rule "mul_literals" (formula "14") (term "0,1,1,0,0,0"))
                                             (rule "Definition_axiom_for_allBucketsInRangeSorted_in_de_wiesler_Sorter" (formula "13") (term "0") (inst "b=b"))
                                              (builtin "One Step Simplification" (formula "13"))
                                             (rule "expand_inInt" (formula "13") (term "1,0,0"))
                                             (rule "replace_int_MAX" (formula "13") (term "1,0,1,0,0"))
                                             (rule "replace_int_MIN" (formula "13") (term "0,1,1,0,0"))
                                             (rule "translateJavaAddInt" (formula "13") (term "3,0,1,0"))
                                             (rule "translateJavaAddInt" (formula "13") (term "2,0,1,0"))
                                             (rule "translateJavaAddInt" (formula "13") (term "0,2,1,3,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "13") (term "0,2,1,3,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "13") (term "1,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,0"))
                                             (rule "mul_literals" (formula "13") (term "0,1,1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,0"))
                                             (rule "arrayLengthIsAShort" (formula "61") (term "0"))
                                             (rule "expand_inShort" (formula "61"))
                                             (rule "replace_short_MIN" (formula "61") (term "0,1"))
                                             (rule "replace_short_MAX" (formula "61") (term "1,0"))
                                             (rule "andLeft" (formula "61"))
                                             (rule "inEqSimp_commuteLeq" (formula "62"))
                                             (rule "applyEq" (formula "61") (term "0") (ifseqformula "63"))
                                             (rule "leq_literals" (formula "61"))
                                             (rule "true_left" (formula "61"))
                                             (rule "applyEq" (formula "61") (term "0") (ifseqformula "62"))
                                             (rule "qeq_literals" (formula "61"))
                                             (rule "true_left" (formula "61"))
                                             (rule "arrayLengthNotNegative" (formula "61") (term "0"))
                                             (rule "applyEq" (formula "61") (term "0") (ifseqformula "62"))
                                             (rule "qeq_literals" (formula "61"))
                                             (rule "true_left" (formula "61"))
                                             (rule "arrayLengthIsAShort" (formula "60") (term "0"))
                                             (rule "expand_inShort" (formula "60"))
                                             (rule "replace_short_MIN" (formula "60") (term "0,1"))
                                             (rule "replace_short_MAX" (formula "60") (term "1,0"))
                                             (rule "andLeft" (formula "60"))
                                             (rule "inEqSimp_commuteLeq" (formula "61"))
                                             (rule "applyEq" (formula "60") (term "0") (ifseqformula "62"))
                                             (rule "leq_literals" (formula "60"))
                                             (rule "true_left" (formula "60"))
                                             (rule "applyEq" (formula "60") (term "0") (ifseqformula "61"))
                                             (rule "qeq_literals" (formula "60"))
                                             (rule "true_left" (formula "60"))
                                             (rule "arrayLengthNotNegative" (formula "60") (term "0"))
                                             (rule "applyEq" (formula "60") (term "0") (ifseqformula "61"))
                                             (rule "qeq_literals" (formula "60"))
                                             (rule "true_left" (formula "60"))
                                             (rule "arrayLengthIsAShort" (formula "59") (term "0"))
                                             (rule "expand_inShort" (formula "59"))
                                             (rule "replace_short_MIN" (formula "59") (term "0,1"))
                                             (rule "replace_short_MAX" (formula "59") (term "1,0"))
                                             (rule "andLeft" (formula "59"))
                                             (rule "inEqSimp_commuteLeq" (formula "60"))
                                             (rule "applyEq" (formula "59") (term "0") (ifseqformula "61"))
                                             (rule "leq_literals" (formula "59"))
                                             (rule "true_left" (formula "59"))
                                             (rule "applyEq" (formula "59") (term "0") (ifseqformula "60"))
                                             (rule "qeq_literals" (formula "59"))
                                             (rule "true_left" (formula "59"))
                                             (rule "arrayLengthNotNegative" (formula "59") (term "0"))
                                             (rule "applyEq" (formula "59") (term "0") (ifseqformula "60"))
                                             (rule "qeq_literals" (formula "59"))
                                             (rule "true_left" (formula "59"))
                                             (rule "arrayLengthIsAShort" (formula "58") (term "0"))
                                             (rule "expand_inShort" (formula "58"))
                                             (rule "replace_short_MIN" (formula "58") (term "0,1"))
                                             (rule "replace_short_MAX" (formula "58") (term "1,0"))
                                             (rule "andLeft" (formula "58"))
                                             (rule "inEqSimp_commuteLeq" (formula "59"))
                                             (rule "applyEq" (formula "58") (term "0") (ifseqformula "60"))
                                             (rule "leq_literals" (formula "58"))
                                             (rule "true_left" (formula "58"))
                                             (rule "applyEq" (formula "58") (term "0") (ifseqformula "59"))
                                             (rule "qeq_literals" (formula "58"))
                                             (rule "true_left" (formula "58"))
                                             (rule "arrayLengthNotNegative" (formula "58") (term "0"))
                                             (rule "applyEq" (formula "58") (term "0") (ifseqformula "59"))
                                             (rule "qeq_literals" (formula "58"))
                                             (rule "true_left" (formula "58"))
                                             (rule "arrayLengthNotNegative" (formula "57") (term "0"))
                                             (rule "applyEq" (formula "57") (term "0") (ifseqformula "58"))
                                             (rule "qeq_literals" (formula "57"))
                                             (rule "true_left" (formula "57"))
                                             (rule "arrayLengthIsAShort" (formula "57") (term "0"))
                                             (rule "expand_inShort" (formula "57"))
                                             (rule "replace_short_MAX" (formula "57") (term "1,0"))
                                             (rule "replace_short_MIN" (formula "57") (term "0,1"))
                                             (rule "andLeft" (formula "57"))
                                             (rule "inEqSimp_commuteLeq" (formula "58"))
                                             (rule "applyEq" (formula "57") (term "0") (ifseqformula "59"))
                                             (rule "leq_literals" (formula "57"))
                                             (rule "closeFalse" (formula "57"))
                                          )
                                          (branch "CUT: bucket_0 <= 2147483647 FALSE"
                                              (builtin "One Step Simplification" (formula "125"))
                                             (rule "false_right" (formula "125"))
                                             (rule "inEqSimp_leqRight" (formula "124"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                             (rule "mul_literals" (formula "1") (term "1"))
                                             (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "1"))
                                             (rule "leq_literals" (formula "5") (term "0"))
                                              (builtin "One Step Simplification" (formula "5"))
                                             (rule "true_left" (formula "5"))
                                             (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "9"))
                                             (rule "mul_literals" (formula "1") (term "0,0"))
                                             (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                             (rule "mul_literals" (formula "1") (term "1"))
                                             (rule "inEqSimp_contradInEq3" (formula "1") (ifseqformula "7"))
                                             (rule "greater_literals" (formula "1") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "mul_literals" (formula "1") (term "0,0"))
                                             (rule "qeq_literals" (formula "1") (term "0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                       )
                                    )
                                 )
                              )
                              (branch "if x_3 false"
                                  (builtin "One Step Simplification" (formula "69"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "replace_known_right" (formula "15") (term "1,0,6,0") (ifseqformula "62"))
                                  (builtin "One Step Simplification" (formula "15"))
                                 (rule "replace_known_right" (formula "13") (term "1,0,7,0") (ifseqformula "62"))
                                  (builtin "One Step Simplification" (formula "13"))
                                 (rule "ifthenelse_negated" (formula "15") (term "6,0"))
                                 (rule "ifthenelse_negated" (formula "13") (term "7,0"))
                                 (rule "inEqSimp_leqRight" (formula "62"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                 (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "5"))
                                 (rule "applyEq" (formula "18") (term "0,1,1") (ifseqformula "1"))
                                 (rule "applyEq" (formula "70") (term "0,1,0,1,1,0") (ifseqformula "1"))
                                 (rule "polySimp_mulLiterals" (formula "70") (term "1,0,1,1,0"))
                                 (rule "polySimp_pullOutFactor0" (formula "70") (term "0,1,1,0"))
                                 (rule "add_literals" (formula "70") (term "1,0,1,1,0"))
                                 (rule "times_zero_1" (formula "70") (term "0,1,1,0"))
                                 (rule "applyEqRigid" (formula "17") (term "2,6,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "6") (term "0") (ifseqformula "1"))
                                 (rule "inEqSimp_homoInEq0" (formula "6"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
                                 (rule "polySimp_pullOutFactor0" (formula "6") (term "0"))
                                 (rule "add_literals" (formula "6") (term "1,0"))
                                 (rule "times_zero_1" (formula "6") (term "0"))
                                 (rule "qeq_literals" (formula "6"))
                                 (rule "true_left" (formula "6"))
                                 (rule "applyEqRigid" (formula "12") (term "0,1") (ifseqformula "1"))
                                 (rule "applyEqRigid" (formula "6") (term "0,0") (ifseqformula "1"))
                                 (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "1"))
                                 (rule "applyEqRigid" (formula "10") (term "0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "5") (term "0") (ifseqformula "1"))
                                 (rule "applyEqRigid" (formula "17") (term "1,6,0,0,1") (ifseqformula "1"))
                                 (rule "applyEq" (formula "69") (term "0,0,0,1,0") (ifseqformula "1"))
                                 (rule "applyEqRigid" (formula "11") (term "0,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "14") (term "2,7,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                 (rule "inEqSimp_homoInEq1" (formula "2"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                                 (rule "polySimp_pullOutFactor0" (formula "2") (term "0"))
                                 (rule "add_literals" (formula "2") (term "1,0"))
                                 (rule "times_zero_1" (formula "2") (term "0"))
                                 (rule "leq_literals" (formula "2"))
                                 (rule "true_left" (formula "2"))
                                 (rule "applyEq" (formula "10") (term "0") (ifseqformula "52"))
                                 (rule "applyEqRigid" (formula "7") (term "0") (ifseqformula "10"))
                                 (rule "inEqSimp_homoInEq1" (formula "7"))
                                 (rule "polySimp_pullOutFactor1" (formula "7") (term "0"))
                                 (rule "add_literals" (formula "7") (term "1,0"))
                                 (rule "times_zero_1" (formula "7") (term "0"))
                                 (rule "leq_literals" (formula "7"))
                                 (rule "true_left" (formula "7"))
                                 (rule "applyEq" (formula "67") (term "0,0,1,0,0,0,0") (ifseqformula "9"))
                                 (rule "applyEq" (formula "49") (term "0,5,0") (ifseqformula "9"))
                                 (rule "applyEq" (formula "12") (term "0,1,1,7,0") (ifseqformula "9"))
                                 (rule "applyEq" (formula "55") (term "0,2,0") (ifseqformula "9"))
                                 (rule "applyEq" (formula "14") (term "0,5,0") (ifseqformula "9"))
                                 (rule "applyEq" (formula "60") (term "0") (ifseqformula "9"))
                                 (rule "applyEqRigid" (formula "12") (term "0,2,7,0") (ifseqformula "9"))
                                 (rule "applyEqRigid" (formula "15") (term "0,5,0,0,1") (ifseqformula "9"))
                                 (rule "applyEqRigid" (formula "7") (term "0,0") (ifseqformula "9"))
                                 (rule "inEqSimp_homoInEq1" (formula "7"))
                                 (rule "polySimp_mulLiterals" (formula "7") (term "1,0"))
                                 (rule "polySimp_pullOutFactor0" (formula "7") (term "0"))
                                 (rule "add_literals" (formula "7") (term "1,0"))
                                 (rule "times_zero_1" (formula "7") (term "0"))
                                 (rule "leq_literals" (formula "7"))
                                 (rule "true_left" (formula "7"))
                                 (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "8"))
                                 (rule "inEqSimp_homoInEq0" (formula "7"))
                                 (rule "polySimp_mulLiterals" (formula "7") (term "1,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "7") (term "0"))
                                 (rule "add_literals" (formula "7") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "7") (term "1,0"))
                                 (rule "add_zero_right" (formula "7") (term "0"))
                                 (rule "qeq_literals" (formula "7"))
                                 (rule "true_left" (formula "7"))
                                 (rule "applyEq" (formula "13") (term "0,0,1,1") (ifseqformula "7"))
                                  (builtin "One Step Simplification" (formula "13"))
                                 (rule "applyEqRigid" (formula "5") (term "0,0,0") (ifseqformula "7"))
                                 (rule "applyEq" (formula "12") (term "0,2,6,0") (ifseqformula "7"))
                                 (rule "applyEqRigid" (formula "4") (term "0,0") (ifseqformula "7"))
                                 (rule "applyEq" (formula "8") (term "0,0,1") (ifseqformula "7"))
                                  (builtin "One Step Simplification" (formula "8"))
                                 (rule "true_left" (formula "8"))
                                 (rule "applyEqRigid" (formula "9") (term "0,5,0") (ifseqformula "7"))
                                 (rule "applyEq" (formula "47") (term "0,5,0") (ifseqformula "7"))
                                 (rule "applyEqRigid" (formula "45") (term "0,2,0") (ifseqformula "7"))
                                 (rule "applyEq" (formula "63") (term "0,0,0,0,1,0") (ifseqformula "7"))
                                 (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "7"))
                                 (rule "applyEq" (formula "10") (term "0,7,0") (ifseqformula "6"))
                                 (rule "applyEq" (formula "46") (term "0,7,0") (ifseqformula "6"))
                                 (rule "applyEqRigid" (formula "10") (term "0,1,1,6,0") (ifseqformula "6"))
                                 (rule "applyEqRigid" (formula "50") (term "0,5,0,1") (ifseqformula "6"))
                                 (rule "applyEqRigid" (formula "47") (term "0,0,0") (ifseqformula "6"))
                                 (rule "applyEq" (formula "9") (term "0,5,0") (ifseqformula "6"))
                                 (rule "applyEqRigid" (formula "50") (term "0,1,7,0,1") (ifseqformula "6"))
                                 (rule "applyEqRigid" (formula "49") (term "0,0,2,0") (ifseqformula "6"))
                                 (rule "applyEq" (formula "11") (term "0,1,6,0,1") (ifseqformula "6"))
                                 (rule "applyEqRigid" (formula "11") (term "0,1,7,0,1") (ifseqformula "6"))
                                 (rule "applyEq" (formula "1") (term "0,1") (ifseqformula "6"))
                                 (rule "applyEq" (formula "47") (term "1") (ifseqformula "6"))
                                 (rule "applyEq" (formula "48") (term "0,1") (ifseqformula "6"))
                                 (rule "inEqSimp_subsumption6" (formula "3") (ifseqformula "2"))
                                 (rule "times_zero_1" (formula "3") (term "1,1,0"))
                                 (rule "greater_literals" (formula "3") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "3"))
                                 (rule "leq_literals" (formula "3") (term "0"))
                                  (builtin "One Step Simplification" (formula "3"))
                                 (rule "true_left" (formula "3"))
                                 (rule "polyDiv_pullOut" (formula "3") (term "0") (inst "polyDivCoeff=quotient_0"))
                                 (rule "equal_literals" (formula "3") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "3"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,0"))
                                 (rule "polySimp_homoEq" (formula "3"))
                                 (rule "polySimp_pullOutFactor0" (formula "3") (term "0,0,0,1,0"))
                                 (rule "add_literals" (formula "3") (term "1,0,0,0,1,0"))
                                 (rule "times_zero_1" (formula "3") (term "0,0,0,1,0"))
                                 (rule "div_literals" (formula "3") (term "0,0,1,0"))
                                 (rule "add_zero_left" (formula "3") (term "0,1,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "3") (term "0"))
                                 (rule "add_literals" (formula "3") (term "1,0"))
                                 (rule "times_zero_1" (formula "3") (term "0"))
                                  (builtin "One Step Simplification" (formula "3"))
                                 (rule "true_left" (formula "3"))
                                 (rule "blockBreak" (formula "60") (term "1"))
                                 (rule "lsBreak" (formula "60") (term "1"))
                                 (rule "assignment" (formula "60") (term "1"))
                                  (builtin "One Step Simplification" (formula "60"))
                                 (rule "jdiv_axiom" (formula "45") (term "0"))
                                 (rule "polySimp_mulLiterals" (formula "45") (term "0,0,2,1"))
                                 (rule "eqSymm" (formula "45"))
                                 (rule "applyEq" (formula "45") (term "1") (ifseqformula "46"))
                                 (rule "inEqSimp_subsumption6" (formula "45") (term "0,0") (ifseqformula "2"))
                                 (rule "times_zero_1" (formula "45") (term "1,1,0,0,0"))
                                 (rule "greater_literals" (formula "45") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "45"))
                                 (rule "leq_literals" (formula "45") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "45"))
                                 (rule "polyDiv_pullOut" (formula "45") (term "0") (inst "polyDivCoeff=quotient_0"))
                                 (rule "equal_literals" (formula "45") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "45"))
                                 (rule "polySimp_mulLiterals" (formula "45") (term "1,0,0,0"))
                                 (rule "polySimp_homoEq" (formula "45"))
                                 (rule "polySimp_pullOutFactor0" (formula "45") (term "0,0,0,1,0"))
                                 (rule "add_literals" (formula "45") (term "1,0,0,0,1,0"))
                                 (rule "times_zero_1" (formula "45") (term "0,0,0,1,0"))
                                 (rule "div_literals" (formula "45") (term "0,0,1,0"))
                                 (rule "add_zero_left" (formula "45") (term "0,1,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "45") (term "0"))
                                 (rule "add_literals" (formula "45") (term "1,0"))
                                 (rule "times_zero_1" (formula "45") (term "0"))
                                  (builtin "One Step Simplification" (formula "45"))
                                 (rule "true_left" (formula "45"))
                                 (rule "ifSplit" (formula "60"))
                                 (branch "if equal_buckets true"
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "replace_known_left" (formula "7") (term "0,7,0") (ifseqformula "1"))
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "replace_known_left" (formula "9") (term "0,6,0") (ifseqformula "1"))
                                     (builtin "One Step Simplification" (formula "9"))
                                    (rule "replace_known_left" (formula "49") (term "0") (ifseqformula "1"))
                                     (builtin "One Step Simplification" (formula "49"))
                                    (rule "replace_known_left" (formula "10") (term "0") (ifseqformula "1"))
                                     (builtin "One Step Simplification" (formula "10"))
                                    (rule "applyEq" (formula "61") (term "0,1,0,0,0,0") (ifseqformula "1"))
                                    (rule "methodCallUnfoldArguments" (formula "61") (term "1"))
                                    (rule "variableDeclarationAssign" (formula "61") (term "1"))
                                    (rule "variableDeclaration" (formula "61") (term "1") (newnames "var_1"))
                                    (rule "assignment" (formula "61") (term "1"))
                                     (builtin "One Step Simplification" (formula "61"))
                                    (rule "variableDeclarationAssign" (formula "61") (term "1"))
                                    (rule "variableDeclaration" (formula "61") (term "1") (newnames "var_2"))
                                    (rule "assignment" (formula "61") (term "1"))
                                     (builtin "One Step Simplification" (formula "61"))
                                    (rule "variableDeclarationAssign" (formula "61") (term "1"))
                                    (rule "variableDeclaration" (formula "61") (term "1") (newnames "var_3"))
                                    (rule "assignment" (formula "61") (term "1"))
                                     (builtin "One Step Simplification" (formula "61"))
                                    (rule "variableDeclarationAssign" (formula "61") (term "1"))
                                    (rule "variableDeclaration" (formula "61") (term "1") (newnames "var_4"))
                                    (rule "assignment" (formula "61") (term "1"))
                                     (builtin "One Step Simplification" (formula "61"))
                                    (rule "variableDeclarationAssign" (formula "61") (term "1"))
                                    (rule "variableDeclaration" (formula "61") (term "1") (newnames "var_5"))
                                    (rule "assignment" (formula "61") (term "1"))
                                     (builtin "One Step Simplification" (formula "61"))
                                    (rule "variableDeclarationAssign" (formula "61") (term "1"))
                                    (rule "variableDeclaration" (formula "61") (term "1") (newnames "var_6"))
                                    (rule "assignment" (formula "61") (term "1"))
                                     (builtin "One Step Simplification" (formula "61"))
                                    (rule "variableDeclarationAssign" (formula "61") (term "1"))
                                    (rule "variableDeclaration" (formula "61") (term "1") (newnames "var_7"))
                                    (rule "assignment" (formula "61") (term "1"))
                                     (builtin "One Step Simplification" (formula "61"))
                                    (rule "variableDeclarationAssign" (formula "61") (term "1"))
                                    (rule "variableDeclaration" (formula "61") (term "1") (newnames "var_8"))
                                    (rule "assignmentSubtractionInt" (formula "61") (term "1"))
                                    (branch "Overflow check"
                                        (builtin "One Step Simplification" (formula "61"))
                                       (rule "expand_inInt" (formula "61"))
                                       (rule "replace_int_MAX" (formula "61") (term "1,0"))
                                       (rule "replace_int_MIN" (formula "61") (term "0,1"))
                                       (rule "polySimp_elimSub" (formula "61") (term "1,1"))
                                       (rule "mul_literals" (formula "61") (term "1,1,1"))
                                       (rule "polySimp_elimSub" (formula "61") (term "0,0"))
                                       (rule "mul_literals" (formula "61") (term "1,0,0"))
                                       (rule "polySimp_addComm0" (formula "61") (term "1,1"))
                                       (rule "polySimp_addComm0" (formula "61") (term "0,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "61") (term "1"))
                                       (rule "mul_literals" (formula "61") (term "1,0,1"))
                                       (rule "polySimp_addComm1" (formula "61") (term "0,1"))
                                       (rule "add_literals" (formula "61") (term "0,0,1"))
                                       (rule "inEqSimp_homoInEq0" (formula "61") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "61") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "61") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "61") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "61") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "61") (term "0,0"))
                                       (rule "add_literals" (formula "61") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "61") (term "1"))
                                       (rule "mul_literals" (formula "61") (term "1,1"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "61") (term "0"))
                                       (rule "polySimp_mulLiterals" (formula "61") (term "0,0"))
                                       (rule "inEqSimp_subsumption6" (formula "61") (term "1") (ifseqformula "3"))
                                       (rule "times_zero_1" (formula "61") (term "1,1,0,1"))
                                       (rule "greater_literals" (formula "61") (term "0,0,1"))
                                        (builtin "One Step Simplification" (formula "61"))
                                       (rule "leq_literals" (formula "61") (term "0,1"))
                                        (builtin "One Step Simplification" (formula "61"))
                                       (rule "inEqSimp_leqRight" (formula "61"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                       (rule "mul_literals" (formula "1") (term "1"))
                                       (rule "inEqSimp_contradInEq3" (formula "1") (ifseqformula "5"))
                                       (rule "mul_literals" (formula "1") (term "0,1,0"))
                                       (rule "greater_literals" (formula "1") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "qeq_literals" (formula "1") (term "0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                    (branch "Usage"
                                        (builtin "One Step Simplification" (formula "61"))
                                       (rule "translateJavaSubInt" (formula "61") (term "0,1,0"))
                                       (rule "polySimp_elimSub" (formula "61") (term "0,1,0"))
                                       (rule "mul_literals" (formula "61") (term "1,0,1,0"))
                                       (rule "polySimp_addComm0" (formula "61") (term "0,1,0"))
                                        (builtin "Use Operation Contract" (formula "61") (newnames "heapBefore_sample_sort_recurse_on,exc_0,heapAfter_sample_sort_recurse_on,anon_heap_sample_sort_recurse_on") (contract "de.wiesler.Sorter[de.wiesler.Sorter::sample_sort_recurse_on([I,int,int,de.wiesler.Storage,[I,int,boolean,int)].JML normal_behavior operation contract.0"))
                                       (branch "Post (sample_sort_recurse_on)"
                                           (builtin "One Step Simplification" (formula "56"))
                                           (builtin "One Step Simplification" (formula "63"))
                                          (rule "andLeft" (formula "56"))
                                          (rule "andLeft" (formula "57"))
                                          (rule "andLeft" (formula "57"))
                                          (rule "andLeft" (formula "59"))
                                          (rule "andLeft" (formula "58"))
                                          (rule "andLeft" (formula "59"))
                                          (rule "andLeft" (formula "60"))
                                          (rule "andLeft" (formula "61"))
                                          (rule "andLeft" (formula "62"))
                                          (rule "translateJavaSubInt" (formula "56") (term "2,0,1,0"))
                                          (rule "translateJavaAddInt" (formula "59") (term "7,0"))
                                          (rule "translateJavaAddInt" (formula "61") (term "6,0"))
                                          (rule "translateJavaSubInt" (formula "62") (term "7,0"))
                                          (rule "translateJavaAddInt" (formula "62") (term "6,0"))
                                          (rule "polySimp_elimSub" (formula "56") (term "2,0,1,0"))
                                          (rule "mul_literals" (formula "56") (term "1,2,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "62") (term "7,0"))
                                          (rule "mul_literals" (formula "62") (term "1,7,0"))
                                          (rule "polySimp_addComm1" (formula "59") (term "7,0"))
                                          (rule "add_literals" (formula "59") (term "0,7,0"))
                                          (rule "add_zero_left" (formula "59") (term "7,0"))
                                          (rule "polySimp_addComm1" (formula "61") (term "6,0"))
                                          (rule "add_literals" (formula "61") (term "0,6,0"))
                                          (rule "add_zero_left" (formula "61") (term "6,0"))
                                          (rule "polySimp_addComm1" (formula "62") (term "6,0"))
                                          (rule "add_literals" (formula "62") (term "0,6,0"))
                                          (rule "add_zero_left" (formula "62") (term "6,0"))
                                          (rule "polySimp_addComm0" (formula "56") (term "2,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "62") (term "7,0"))
                                          (rule "commuteUnion" (formula "56") (term "1,0"))
                                          (rule "tryEmpty" (formula "71") (term "1"))
                                          (rule "blockEmptyLabel" (formula "71") (term "1"))
                                          (rule "blockEmpty" (formula "71") (term "1"))
                                          (rule "methodCallEmpty" (formula "71") (term "1"))
                                           (builtin "One Step Simplification" (formula "71"))
                                          (rule "emptyModality" (formula "71") (term "1"))
                                           (builtin "One Step Simplification" (formula "71"))
                                          (rule "closeTrue" (formula "71"))
                                       )
                                       (branch "Exceptional Post (sample_sort_recurse_on)"
                                           (builtin "One Step Simplification" (formula "63"))
                                           (builtin "One Step Simplification" (formula "56"))
                                          (rule "andLeft" (formula "56"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "57") (term "1,0") (ifseqformula "56"))
                                           (builtin "One Step Simplification" (formula "57"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "57") (term "0,0,1,0") (ifseqformula "40"))
                                           (builtin "One Step Simplification" (formula "57"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "57") (term "0,0,0,0,1,0") (ifseqformula "29"))
                                          (rule "andLeft" (formula "57"))
                                          (rule "andLeft" (formula "57"))
                                          (rule "andLeft" (formula "59"))
                                          (rule "notLeft" (formula "57"))
                                          (rule "close" (formula "60") (ifseqformula "59"))
                                       )
                                       (branch "Pre (sample_sort_recurse_on)"
                                           (builtin "One Step Simplification" (formula "61") (ifInst ""  (formula "60")) (ifInst ""  (formula "59")) (ifInst ""  (formula "58")) (ifInst ""  (formula "60")) (ifInst ""  (formula "59")) (ifInst ""  (formula "58")))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "61") (term "0,1,0,0,1,0") (ifseqformula "40"))
                                           (builtin "One Step Simplification" (formula "61"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "61") (term "0,1,0,0,0,1,0") (ifseqformula "40"))
                                           (builtin "One Step Simplification" (formula "61"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "61") (term "0,0,0,1,0,0,1,0") (ifseqformula "29"))
                                          (rule "wellFormedAnon" (formula "61") (term "0,0,0,0,0,0,0,1,0"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "61") (term "0,0,0,1,0,0,0,1,0") (ifseqformula "29"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "61") (term "0,1,0,0,0,0,0,0,1,0") (ifseqformula "40"))
                                           (builtin "One Step Simplification" (formula "61") (ifInst ""  (formula "54")) (ifInst ""  (formula "11")) (ifInst ""  (formula "15")) (ifInst ""  (formula "57")) (ifInst ""  (formula "30")))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "61") (term "0,0,0,0,0,0,0,1,0") (ifseqformula "29"))
                                          (rule "expand_inInt" (formula "61") (term "1,0,1,0"))
                                          (rule "expand_inInt" (formula "61") (term "1,1,0"))
                                          (rule "expand_inInt" (formula "61") (term "1,0,0,0,1,0"))
                                          (rule "expand_inInt" (formula "61") (term "1,0,0,1,0"))
                                          (rule "replace_int_MAX" (formula "61") (term "1,0,1,0,1,0"))
                                          (rule "replace_int_MIN" (formula "61") (term "0,1,1,0,1,0"))
                                          (rule "replace_int_MIN" (formula "61") (term "0,1,1,1,0"))
                                          (rule "replace_int_MAX" (formula "61") (term "1,0,1,1,0"))
                                          (rule "replace_int_MIN" (formula "61") (term "0,1,1,0,0,0,1,0"))
                                          (rule "replace_int_MAX" (formula "61") (term "1,0,1,0,0,0,1,0"))
                                          (rule "replace_int_MIN" (formula "61") (term "0,1,1,0,0,1,0"))
                                          (rule "replace_int_MAX" (formula "61") (term "1,0,1,0,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "61") (term "0,0,1"))
                                          (rule "replace_known_left" (formula "61") (term "0,0,0,0,0,0,0,0,1,0") (ifseqformula "13"))
                                           (builtin "One Step Simplification" (formula "61"))
                                          (rule "polySimp_elimSub" (formula "61") (term "0,0,1"))
                                          (rule "polySimp_addComm0" (formula "61") (term "0,0,1"))
                                          (rule "measuredByCheck" (formula "61") (term "1") (ifseqformula "16"))
                                          (rule "precOfPair" (formula "61") (term "1"))
                                           (builtin "One Step Simplification" (formula "61"))
                                          (rule "precOfInt" (formula "61") (term "0,1"))
                                          (rule "precOfInt" (formula "61") (term "1,1"))
                                          (rule "leq_literals" (formula "61") (term "0,1,1"))
                                           (builtin "One Step Simplification" (formula "61"))
                                          (rule "less_literals" (formula "61") (term "1,1"))
                                           (builtin "One Step Simplification" (formula "61"))
                                          (rule "inEqSimp_commuteLeq" (formula "61") (term "1,0,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "61") (term "1,1,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "61") (term "1,1,0,0,1"))
                                          (rule "replace_known_left" (formula "61") (term "1,1,0,0,1") (ifseqformula "14"))
                                           (builtin "One Step Simplification" (formula "61"))
                                          (rule "inEqSimp_homoInEq0" (formula "61") (term "0,1,1"))
                                          (rule "polySimp_mulComm0" (formula "61") (term "1,0,0,1,1"))
                                          (rule "polySimp_rightDist" (formula "61") (term "1,0,0,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "61") (term "1,1,0,0,1,1"))
                                          (rule "mul_literals" (formula "61") (term "0,1,0,0,1,1"))
                                          (rule "polySimp_addAssoc" (formula "61") (term "0,0,1,1"))
                                          (rule "add_literals" (formula "61") (term "0,0,0,1,1"))
                                          (rule "inEqSimp_homoInEq0" (formula "61") (term "1,1,1"))
                                          (rule "mul_literals" (formula "61") (term "1,0,1,1,1"))
                                          (rule "polySimp_addComm1" (formula "61") (term "0,1,1,1"))
                                          (rule "add_literals" (formula "61") (term "0,0,1,1,1"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "61") (term "0,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "61") (term "0,0,1,1"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "61") (term "1,1,1"))
                                          (rule "mul_literals" (formula "61") (term "1,1,1,1"))
                                          (rule "inEqSimp_subsumption4" (formula "61") (term "0,1,0,1") (ifseqformula "4"))
                                          (rule "greater_literals" (formula "61") (term "0,0,0,1,0,1"))
                                           (builtin "One Step Simplification" (formula "61"))
                                          (rule "mul_literals" (formula "61") (term "0,0,0,1,0,1"))
                                          (rule "leq_literals" (formula "61") (term "0,0,1,0,1"))
                                           (builtin "One Step Simplification" (formula "61"))
                                          (rule "inEqSimp_subsumption6" (formula "61") (term "1,1,1") (ifseqformula "3"))
                                          (rule "greater_literals" (formula "61") (term "0,0,1,1,1"))
                                           (builtin "One Step Simplification" (formula "61"))
                                          (rule "times_zero_1" (formula "61") (term "1,0,1,1,1"))
                                          (rule "leq_literals" (formula "61") (term "0,1,1,1"))
                                           (builtin "One Step Simplification" (formula "61"))
                                          (rule "inEqSimp_subsumption4" (formula "61") (term "1,1") (ifseqformula "4"))
                                          (rule "mul_literals" (formula "61") (term "0,1,0,1,1"))
                                          (rule "greater_literals" (formula "61") (term "0,0,1,1"))
                                           (builtin "One Step Simplification" (formula "61"))
                                          (rule "leq_literals" (formula "61") (term "0,1,1"))
                                           (builtin "One Step Simplification" (formula "61"))
                                          (rule "inEqSimp_subsumption0" (formula "61") (term "1,0,1") (ifseqformula "21"))
                                          (rule "leq_literals" (formula "61") (term "0,1,0,1"))
                                           (builtin "One Step Simplification" (formula "61"))
                                          (rule "inEqSimp_subsumption1" (formula "61") (term "1,0,1") (ifseqformula "18"))
                                          (rule "leq_literals" (formula "61") (term "0,1,0,1"))
                                           (builtin "One Step Simplification" (formula "61"))
                                          (rule "inEqSimp_subsumption6" (formula "61") (term "1,1") (ifseqformula "3"))
                                          (rule "times_zero_1" (formula "61") (term "1,1,0,1,1"))
                                          (rule "greater_literals" (formula "61") (term "0,0,1,1"))
                                           (builtin "One Step Simplification" (formula "61"))
                                          (rule "leq_literals" (formula "61") (term "0,1,1"))
                                           (builtin "One Step Simplification" (formula "61"))
                                          (rule "inEqSimp_subsumption0" (formula "61") (term "1") (ifseqformula "23"))
                                          (rule "leq_literals" (formula "61") (term "0,1"))
                                           (builtin "One Step Simplification" (formula "61"))
                                          (rule "Definition_axiom_for_equalityBucketsInRange_in_de_wiesler_Sorter" (formula "49") (term "0") (inst "b=b"))
                                           (builtin "One Step Simplification" (formula "49"))
                                          (rule "expand_inInt" (formula "49") (term "1,0,0"))
                                          (rule "replace_int_MIN" (formula "49") (term "0,1,1,0,0"))
                                          (rule "replace_int_MAX" (formula "49") (term "1,0,1,0,0"))
                                          (rule "translateJavaMod" (formula "49") (term "0,1,0,0,0"))
                                          (rule "translateJavaAddInt" (formula "49") (term "3,0,1,0"))
                                          (rule "translateJavaAddInt" (formula "49") (term "2,0,1,0"))
                                          (rule "translateJavaAddInt" (formula "49") (term "0,2,1,3,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "49") (term "0,2,1,3,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "49") (term "1,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "49") (term "1,0,0,1,0,0,0,0"))
                                          (rule "mul_literals" (formula "49") (term "0,1,0,0,1,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "49") (term "1,1,0,0,1,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "49") (term "0,0,1,0,0,0,0"))
                                          (rule "add_literals" (formula "49") (term "0,0,0,1,0,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "49") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "49") (term "1,1,0,0"))
                                          (rule "jmod_axiom" (formula "49") (term "0,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "49") (term "1,0,1,0,0,0"))
                                          (rule "polySimp_homoEq" (formula "49") (term "1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "49") (term "1,0,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "49") (term "1,0,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "49") (term "1,1,0,1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "49") (term "0,1,0,1,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "49") (term "0,1,0,0,0"))
                                          (rule "polySimp_sepPosMonomial" (formula "49") (term "1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "49") (term "1,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "49") (term "1,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "49") (term "1,1,1,0,0,0"))
                                          (rule "mul_literals" (formula "49") (term "0,1,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "49") (term "1,1,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "49") (term "1,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "49") (term "1,1,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "49") (term "1,1,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "49") (term "1,1,1,0,0,0,0"))
                                          (rule "mul_literals" (formula "49") (term "0,1,1,0,0,0,0"))
                                          (rule "nnf_imp2or" (formula "49") (term "0"))
                                          (rule "nnf_notAnd" (formula "49") (term "0,0"))
                                          (rule "nnf_notAnd" (formula "49") (term "0,0,0"))
                                          (rule "nnf_notAnd" (formula "49") (term "1,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "49") (term "0,1,0,0"))
                                          (rule "mul_literals" (formula "49") (term "1,0,0,0,1,0,0"))
                                          (rule "add_literals" (formula "49") (term "0,0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "49") (term "0,1,0,0"))
                                          (rule "mul_literals" (formula "49") (term "1,0,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "49") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "49") (term "1,0,0,1,1,0,0"))
                                          (rule "add_literals" (formula "49") (term "0,0,1,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "49") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "49") (term "1,1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "49") (term "0,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "49") (term "1,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "49") (term "1,0,0,1,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "49") (term "1,1,0,0,1,0,0,0,0"))
                                          (rule "mul_literals" (formula "49") (term "0,1,0,0,1,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "49") (term "0,0,1,0,0,0,0"))
                                          (rule "add_literals" (formula "49") (term "0,0,0,1,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "49") (term "1,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "49") (term "1,1,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "49") (term "1,1,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "49") (term "1,1,1,0,0,0,0"))
                                          (rule "mul_literals" (formula "49") (term "0,1,1,0,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "49") (term "0,0,0,0,0"))
                                          (rule "mul_literals" (formula "49") (term "1,0,0,0,0,0,0,0"))
                                          (rule "add_literals" (formula "49") (term "0,0,0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "49") (term "0,0,0,0,0,0"))
                                          (rule "Free_class_invariant_axiom_for_de_wiesler_Storage" (formula "26"))
                                           (builtin "One Step Simplification" (formula "26"))
                                          (rule "andLeft" (formula "26"))
                                          (rule "andLeft" (formula "26"))
                                          (rule "andLeft" (formula "28"))
                                          (rule "andLeft" (formula "26"))
                                          (rule "andLeft" (formula "29"))
                                          (rule "andLeft" (formula "26"))
                                          (rule "andLeft" (formula "30"))
                                          (rule "andLeft" (formula "26"))
                                          (rule "andLeft" (formula "31"))
                                          (rule "andLeft" (formula "26"))
                                          (rule "andLeft" (formula "32"))
                                          (rule "andLeft" (formula "26"))
                                          (rule "andLeft" (formula "33"))
                                          (rule "andLeft" (formula "26"))
                                          (rule "andLeft" (formula "34"))
                                          (rule "andLeft" (formula "26"))
                                          (rule "andLeft" (formula "35"))
                                          (rule "andLeft" (formula "35"))
                                          (rule "andLeft" (formula "35"))
                                          (rule "andLeft" (formula "35"))
                                          (rule "andLeft" (formula "35"))
                                          (rule "andLeft" (formula "35"))
                                          (rule "andLeft" (formula "35"))
                                          (rule "andLeft" (formula "35"))
                                          (rule "andLeft" (formula "35"))
                                          (rule "andLeft" (formula "35"))
                                          (rule "andLeft" (formula "35"))
                                          (rule "andLeft" (formula "35"))
                                          (rule "andLeft" (formula "35"))
                                          (rule "andLeft" (formula "35"))
                                          (rule "andLeft" (formula "35"))
                                          (rule "andLeft" (formula "35"))
                                          (rule "andLeft" (formula "35"))
                                          (rule "andLeft" (formula "35"))
                                          (rule "andLeft" (formula "35"))
                                          (rule "andLeft" (formula "35"))
                                          (rule "translateJavaMulInt" (formula "29") (term "1"))
                                          (rule "mul_literals" (formula "29") (term "1"))
                                          (rule "translateJavaMulInt" (formula "28") (term "1"))
                                          (rule "mul_literals" (formula "28") (term "1"))
                                          (rule "disjointDefinition" (formula "62"))
                                           (builtin "One Step Simplification" (formula "62"))
                                          (rule "notLeft" (formula "62"))
                                          (rule "disjointDefinition" (formula "61"))
                                           (builtin "One Step Simplification" (formula "61"))
                                          (rule "notLeft" (formula "61"))
                                          (rule "disjointDefinition" (formula "60"))
                                           (builtin "One Step Simplification" (formula "60"))
                                          (rule "notLeft" (formula "60"))
                                          (rule "eqSymm" (formula "88"))
                                          (rule "disjointDefinition" (formula "59"))
                                           (builtin "One Step Simplification" (formula "59"))
                                          (rule "notLeft" (formula "59"))
                                          (rule "eqSymm" (formula "87"))
                                          (rule "disjointDefinition" (formula "58"))
                                           (builtin "One Step Simplification" (formula "58"))
                                          (rule "notLeft" (formula "58"))
                                          (rule "eqSymm" (formula "86"))
                                          (rule "disjointDefinition" (formula "57"))
                                           (builtin "One Step Simplification" (formula "57"))
                                          (rule "notLeft" (formula "57"))
                                          (rule "eqSymm" (formula "85"))
                                          (rule "disjointDefinition" (formula "56"))
                                           (builtin "One Step Simplification" (formula "56"))
                                          (rule "notLeft" (formula "56"))
                                          (rule "eqSymm" (formula "84"))
                                          (rule "disjointDefinition" (formula "55"))
                                           (builtin "One Step Simplification" (formula "55"))
                                          (rule "notLeft" (formula "55"))
                                          (rule "eqSymm" (formula "83"))
                                          (rule "disjointDefinition" (formula "54"))
                                           (builtin "One Step Simplification" (formula "54"))
                                          (rule "notLeft" (formula "54"))
                                          (rule "eqSymm" (formula "82"))
                                          (rule "disjointDefinition" (formula "53"))
                                           (builtin "One Step Simplification" (formula "53"))
                                          (rule "notLeft" (formula "53"))
                                          (rule "eqSymm" (formula "81"))
                                          (rule "disjointDefinition" (formula "52"))
                                           (builtin "One Step Simplification" (formula "52"))
                                          (rule "notLeft" (formula "52"))
                                          (rule "eqSymm" (formula "80"))
                                          (rule "disjointDefinition" (formula "51"))
                                           (builtin "One Step Simplification" (formula "51"))
                                          (rule "notLeft" (formula "51"))
                                          (rule "eqSymm" (formula "79"))
                                          (rule "disjointDefinition" (formula "50"))
                                           (builtin "One Step Simplification" (formula "50"))
                                          (rule "notLeft" (formula "50"))
                                          (rule "eqSymm" (formula "78"))
                                          (rule "disjointDefinition" (formula "49"))
                                           (builtin "One Step Simplification" (formula "49"))
                                          (rule "notLeft" (formula "49"))
                                          (rule "eqSymm" (formula "77"))
                                          (rule "disjointDefinition" (formula "48"))
                                           (builtin "One Step Simplification" (formula "48"))
                                          (rule "notLeft" (formula "48"))
                                          (rule "eqSymm" (formula "76"))
                                          (rule "disjointDefinition" (formula "47"))
                                           (builtin "One Step Simplification" (formula "47"))
                                          (rule "notLeft" (formula "47"))
                                          (rule "disjointDefinition" (formula "46"))
                                           (builtin "One Step Simplification" (formula "46"))
                                          (rule "notLeft" (formula "46"))
                                          (rule "eqSymm" (formula "74"))
                                          (rule "disjointDefinition" (formula "45"))
                                           (builtin "One Step Simplification" (formula "45"))
                                          (rule "notLeft" (formula "45"))
                                          (rule "eqSymm" (formula "73"))
                                          (rule "disjointDefinition" (formula "44"))
                                           (builtin "One Step Simplification" (formula "44"))
                                          (rule "notLeft" (formula "44"))
                                          (rule "disjointDefinition" (formula "43"))
                                           (builtin "One Step Simplification" (formula "43"))
                                          (rule "notLeft" (formula "43"))
                                          (rule "disjointDefinition" (formula "42"))
                                           (builtin "One Step Simplification" (formula "42"))
                                          (rule "notLeft" (formula "42"))
                                          (rule "disjointDefinition" (formula "41"))
                                           (builtin "One Step Simplification" (formula "41"))
                                          (rule "notLeft" (formula "41"))
                                          (rule "disjointDefinition" (formula "40"))
                                           (builtin "One Step Simplification" (formula "40"))
                                          (rule "notLeft" (formula "40"))
                                          (rule "disjointDefinition" (formula "39"))
                                           (builtin "One Step Simplification" (formula "39"))
                                          (rule "notLeft" (formula "39"))
                                          (rule "disjointDefinition" (formula "38"))
                                           (builtin "One Step Simplification" (formula "38"))
                                          (rule "notLeft" (formula "38"))
                                          (rule "disjointDefinition" (formula "37"))
                                           (builtin "One Step Simplification" (formula "37"))
                                          (rule "notLeft" (formula "37"))
                                          (rule "disjointDefinition" (formula "35"))
                                           (builtin "One Step Simplification" (formula "35"))
                                          (rule "notLeft" (formula "35"))
                                          (rule "disjointDefinition" (formula "35"))
                                           (builtin "One Step Simplification" (formula "35"))
                                          (rule "notLeft" (formula "35"))
                                          (rule "applyEq" (formula "7") (term "0,1,0,0") (ifseqformula "34"))
                                          (rule "applyEq" (formula "97") (term "0,1,0") (ifseqformula "34"))
                                          (rule "applyEq" (formula "6") (term "0,1,0,2,0") (ifseqformula "34"))
                                          (rule "applyEq" (formula "10") (term "0,1,0,0") (ifseqformula "34"))
                                          (rule "applyEq" (formula "9") (term "0,1,0,0") (ifseqformula "34"))
                                          (rule "applyEq" (formula "45") (term "1,0") (ifseqformula "34"))
                                          (rule "applyEq" (formula "46") (term "1,0") (ifseqformula "34"))
                                          (rule "applyEq" (formula "35") (term "1,0") (ifseqformula "34"))
                                          (rule "applyEq" (formula "48") (term "1,0,1,0") (ifseqformula "34"))
                                          (rule "applyEq" (formula "8") (term "0,1,0,0") (ifseqformula "34"))
                                          (rule "distributeIntersection" (formula "45") (term "0"))
                                          (rule "distributeIntersection" (formula "46") (term "0"))
                                          (rule "distributeIntersection" (formula "35") (term "0"))
                                          (rule "unionEqualsEmpty" (formula "45"))
                                          (rule "andLeft" (formula "45"))
                                          (rule "distributeIntersection" (formula "47") (term "0,0"))
                                          (rule "distributeIntersection" (formula "47") (term "1,0"))
                                          (rule "distributeIntersection" (formula "35") (term "0,0"))
                                          (rule "distributeIntersection" (formula "35") (term "1,0"))
                                          (rule "distributeIntersection" (formula "46") (term "0"))
                                          (rule "distributeIntersection" (formula "45") (term "0"))
                                          (rule "distributeIntersection" (formula "47") (term "1,0,0"))
                                          (rule "distributeIntersection" (formula "47") (term "0,0,0"))
                                          (rule "distributeIntersection" (formula "47") (term "0,1,0"))
                                          (rule "distributeIntersection" (formula "47") (term "1,1,0"))
                                          (rule "distributeIntersection" (formula "35") (term "0,0,0"))
                                          (rule "distributeIntersection" (formula "35") (term "1,0,0"))
                                          (rule "distributeIntersection" (formula "35") (term "1,1,0"))
                                          (rule "distributeIntersection" (formula "35") (term "0,1,0"))
                                          (rule "unionEqualsEmpty" (formula "46"))
                                          (rule "andLeft" (formula "46"))
                                          (rule "distributeIntersection" (formula "45") (term "1,0"))
                                          (rule "distributeIntersection" (formula "45") (term "0,0"))
                                          (rule "unionEqualsEmpty" (formula "48"))
                                          (rule "andLeft" (formula "48"))
                                          (rule "unionEqualsEmpty" (formula "35"))
                                          (rule "andLeft" (formula "35"))
                                          (rule "distributeIntersection" (formula "47") (term "0"))
                                          (rule "distributeIntersection" (formula "48") (term "0"))
                                          (rule "unionEqualsEmpty" (formula "46"))
                                          (rule "andLeft" (formula "46"))
                                          (rule "unionEqualsEmpty" (formula "50"))
                                          (rule "andLeft" (formula "50"))
                                          (rule "unionEqualsEmpty" (formula "52"))
                                          (rule "andLeft" (formula "52"))
                                          (rule "unionEqualsEmpty" (formula "36"))
                                          (rule "andLeft" (formula "36"))
                                          (rule "unionEqualsEmpty" (formula "35"))
                                          (rule "andLeft" (formula "35"))
                                          (rule "unionEqualsEmpty" (formula "50"))
                                           (builtin "One Step Simplification" (formula "50"))
                                          (rule "andLeft" (formula "50"))
                                          (rule "notLeft" (formula "50"))
                                          (rule "notLeft" (formula "50"))
                                          (rule "eqSymm" (formula "72"))
                                          (rule "eqSymm" (formula "71"))
                                          (rule "unionEqualsEmpty" (formula "50"))
                                           (builtin "One Step Simplification" (formula "50"))
                                          (rule "andLeft" (formula "50"))
                                          (rule "notLeft" (formula "50"))
                                          (rule "notLeft" (formula "50"))
                                          (rule "eqSymm" (formula "71"))
                                          (rule "eqSymm" (formula "70"))
                                          (rule "unionEqualsEmpty" (formula "49"))
                                           (builtin "One Step Simplification" (formula "49"))
                                          (rule "andLeft" (formula "49"))
                                          (rule "notLeft" (formula "49"))
                                          (rule "notLeft" (formula "49"))
                                          (rule "eqSymm" (formula "70"))
                                          (rule "eqSymm" (formula "69"))
                                          (rule "unionEqualsEmpty" (formula "48"))
                                           (builtin "One Step Simplification" (formula "48"))
                                          (rule "andLeft" (formula "48"))
                                          (rule "notLeft" (formula "49"))
                                          (rule "notLeft" (formula "48"))
                                          (rule "eqSymm" (formula "69"))
                                          (rule "eqSymm" (formula "68"))
                                          (rule "unionEqualsEmpty" (formula "48"))
                                           (builtin "One Step Simplification" (formula "48"))
                                          (rule "andLeft" (formula "48"))
                                          (rule "notLeft" (formula "48"))
                                          (rule "notLeft" (formula "48"))
                                          (rule "eqSymm" (formula "68"))
                                          (rule "eqSymm" (formula "67"))
                                          (rule "sortsDisjointModuloNull" (formula "68"))
                                          (rule "replace_known_right" (formula "68") (term "1") (ifseqformula "109"))
                                           (builtin "One Step Simplification" (formula "68"))
                                          (rule "false_right" (formula "68"))
                                          (rule "sortsDisjointModuloNull" (formula "67"))
                                          (rule "replace_known_right" (formula "67") (term "1") (ifseqformula "108"))
                                           (builtin "One Step Simplification" (formula "67"))
                                          (rule "false_right" (formula "67"))
                                          (rule "unionEqualsEmpty" (formula "48"))
                                           (builtin "One Step Simplification" (formula "48"))
                                          (rule "andLeft" (formula "48"))
                                          (rule "notLeft" (formula "48"))
                                          (rule "notLeft" (formula "48"))
                                          (rule "eqSymm" (formula "67"))
                                          (rule "eqSymm" (formula "66"))
                                          (rule "sortsDisjointModuloNull" (formula "67"))
                                          (rule "replace_known_right" (formula "67") (term "1") (ifseqformula "108"))
                                           (builtin "One Step Simplification" (formula "67"))
                                          (rule "false_right" (formula "67"))
                                          (rule "sortsDisjointModuloNull" (formula "66"))
                                          (rule "replace_known_right" (formula "66") (term "1") (ifseqformula "107"))
                                           (builtin "One Step Simplification" (formula "66"))
                                          (rule "false_right" (formula "66"))
                                          (rule "unionEqualsEmpty" (formula "48"))
                                           (builtin "One Step Simplification" (formula "48"))
                                          (rule "andLeft" (formula "48"))
                                          (rule "notLeft" (formula "49"))
                                          (rule "notLeft" (formula "48"))
                                          (rule "eqSymm" (formula "66"))
                                          (rule "eqSymm" (formula "65"))
                                          (rule "sortsDisjointModuloNull" (formula "66"))
                                          (rule "replace_known_right" (formula "66") (term "1") (ifseqformula "107"))
                                           (builtin "One Step Simplification" (formula "66"))
                                          (rule "false_right" (formula "66"))
                                          (rule "sortsDisjointModuloNull" (formula "65"))
                                          (rule "replace_known_right" (formula "65") (term "1") (ifseqformula "106"))
                                           (builtin "One Step Simplification" (formula "65"))
                                          (rule "false_right" (formula "65"))
                                          (rule "unionEqualsEmpty" (formula "48"))
                                           (builtin "One Step Simplification" (formula "48"))
                                          (rule "andLeft" (formula "48"))
                                          (rule "notLeft" (formula "48"))
                                          (rule "notLeft" (formula "48"))
                                          (rule "eqSymm" (formula "65"))
                                          (rule "eqSymm" (formula "64"))
                                          (rule "sortsDisjointModuloNull" (formula "65"))
                                          (rule "replace_known_right" (formula "65") (term "1") (ifseqformula "106"))
                                           (builtin "One Step Simplification" (formula "65"))
                                          (rule "false_right" (formula "65"))
                                          (rule "sortsDisjointModuloNull" (formula "64"))
                                          (rule "replace_known_right" (formula "64") (term "1") (ifseqformula "105"))
                                           (builtin "One Step Simplification" (formula "64"))
                                          (rule "false_right" (formula "64"))
                                          (rule "unionEqualsEmpty" (formula "38"))
                                           (builtin "One Step Simplification" (formula "38"))
                                          (rule "andLeft" (formula "38"))
                                          (rule "notLeft" (formula "38"))
                                          (rule "notLeft" (formula "38"))
                                          (rule "eqSymm" (formula "64"))
                                          (rule "eqSymm" (formula "63"))
                                          (rule "unionEqualsEmpty" (formula "37"))
                                           (builtin "One Step Simplification" (formula "37"))
                                          (rule "andLeft" (formula "37"))
                                          (rule "notLeft" (formula "38"))
                                          (rule "notLeft" (formula "37"))
                                          (rule "eqSymm" (formula "63"))
                                          (rule "eqSymm" (formula "62"))
                                          (rule "unionEqualsEmpty" (formula "36"))
                                           (builtin "One Step Simplification" (formula "36"))
                                          (rule "andLeft" (formula "36"))
                                          (rule "notLeft" (formula "37"))
                                          (rule "notLeft" (formula "36"))
                                          (rule "eqSymm" (formula "62"))
                                          (rule "eqSymm" (formula "61"))
                                          (rule "unionEqualsEmpty" (formula "35"))
                                           (builtin "One Step Simplification" (formula "35"))
                                          (rule "andLeft" (formula "35"))
                                          (rule "notLeft" (formula "35"))
                                          (rule "notLeft" (formula "35"))
                                          (rule "eqSymm" (formula "61"))
                                          (rule "eqSymm" (formula "60"))
                                          (rule "commuteUnion" (formula "34") (term "1,1,1"))
                                          (rule "commuteUnion" (formula "34") (term "0,1"))
                                          (rule "commuteUnion" (formula "7") (term "0,0,1,0,0"))
                                          (rule "commuteUnion" (formula "7") (term "1,1,0,1,0,0"))
                                          (rule "commuteUnion" (formula "110") (term "0,0,1,0"))
                                          (rule "commuteUnion" (formula "110") (term "1,1,0,1,0"))
                                          (rule "commuteUnion" (formula "6") (term "1,1,0,1,0,2,0"))
                                          (rule "commuteUnion" (formula "6") (term "0,0,0,1,0,2,0"))
                                          (rule "commuteUnion" (formula "10") (term "0,0,1,0,0"))
                                          (rule "commuteUnion" (formula "10") (term "1,1,0,1,0,0"))
                                          (rule "commuteUnion" (formula "9") (term "0,0,0,1,0,0"))
                                          (rule "commuteUnion" (formula "9") (term "1,1,0,1,0,0"))
                                          (rule "commuteUnion" (formula "45") (term "1,1,1,0,1,0"))
                                          (rule "commuteUnion" (formula "45") (term "0,1,0,1,0"))
                                          (rule "commuteUnion_2" (formula "8") (term "0,0,1,0,0"))
                                          (rule "commuteUnion" (formula "8") (term "1,1,0,1,0,0"))
                                          (rule "commuteUnion" (formula "34") (term "1,0,1"))
                                          (rule "commuteUnion" (formula "7") (term "1,0,0,1,0,0"))
                                          (rule "commuteUnion" (formula "110") (term "1,0,0,1,0"))
                                          (rule "commuteUnion_2" (formula "6") (term "0,0,1,0,2,0"))
                                          (rule "commuteUnion" (formula "10") (term "1,0,0,1,0,0"))
                                          (rule "commuteUnion" (formula "9") (term "0,0,1,0,0"))
                                          (rule "commuteUnion" (formula "45") (term "1,0,1,0,1,0"))
                                          (rule "commuteUnion" (formula "8") (term "0,0,0,1,0,0"))
                                          (rule "commuteUnion" (formula "6") (term "0,0,0,1,0,2,0"))
                                          (rule "commuteUnion_2" (formula "8") (term "0,0,1,0,0"))
                                          (rule "commuteUnion_2" (formula "6") (term "0,1,0,2,0"))
                                          (rule "commuteUnion_2" (formula "8") (term "0,1,0,0"))
                                          (rule "Definition_axiom_for_isValidBucketStarts_in_de_wiesler_Functions" (formula "48") (term "0"))
                                           (builtin "One Step Simplification" (formula "48"))
                                          (rule "andLeft" (formula "48"))
                                          (rule "andLeft" (formula "48"))
                                          (rule "andLeft" (formula "48"))
                                          (rule "translateJavaAddInt" (formula "50") (term "3,0"))
                                          (rule "translateJavaAddInt" (formula "49") (term "0"))
                                          (rule "polySimp_addComm0" (formula "50") (term "3,0"))
                                          (rule "polySimp_addComm0" (formula "49") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "48"))
                                          (rule "inEqSimp_commuteLeq" (formula "49"))
                                          (rule "applyEq" (formula "49") (term "0") (ifseqformula "38"))
                                          (rule "inEqSimp_homoInEq1" (formula "49"))
                                          (rule "mul_literals" (formula "49") (term "1,0"))
                                          (rule "polySimp_addComm1" (formula "49") (term "0"))
                                          (rule "add_literals" (formula "49") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "49"))
                                          (rule "mul_literals" (formula "49") (term "1"))
                                          (rule "elimGcdLeq_antec" (formula "49") (inst "elimGcdRightDiv=Z(6(5(2(#))))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(2(#))"))
                                          (rule "polySimp_mulLiterals" (formula "49") (term "1,0,1,0"))
                                          (rule "mul_literals" (formula "49") (term "0,1,0,0,0,0,1,0"))
                                          (rule "leq_literals" (formula "49") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "49"))
                                          (rule "neg_literal" (formula "49") (term "0,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "49") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_addLiterals" (formula "49") (term "0,0,0,0"))
                                          (rule "add_zero_right" (formula "49") (term "0,0,0,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "49") (term "0,0"))
                                          (rule "add_literals" (formula "49") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "49") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "49") (term "0,0"))
                                          (rule "qeq_literals" (formula "49") (term "0"))
                                           (builtin "One Step Simplification" (formula "49"))
                                          (rule "inEqSimp_subsumption0" (formula "4") (ifseqformula "49"))
                                          (rule "leq_literals" (formula "4") (term "0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "true_left" (formula "4"))
                                          (rule "elimGcdGeq_antec" (formula "47") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(2(#))"))
                                          (rule "polySimp_mulLiterals" (formula "47") (term "1,0,0,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "47") (term "1,0,1,0"))
                                          (rule "leq_literals" (formula "47") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "47"))
                                          (rule "mul_literals" (formula "47") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_addLiterals" (formula "47") (term "0,0,0,0"))
                                          (rule "add_zero_right" (formula "47") (term "0,0,0,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "47") (term "0,0"))
                                          (rule "add_literals" (formula "47") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "47") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "47") (term "0,0"))
                                          (rule "leq_literals" (formula "47") (term "0"))
                                           (builtin "One Step Simplification" (formula "47"))
                                          (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "47"))
                                          (rule "leq_literals" (formula "3") (term "0"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "true_left" (formula "3"))
                                          (rule "pullOutSelect" (formula "49") (term "0") (inst "selectSK=arr_1"))
                                          (rule "simplifySelectOfAnonEQ" (formula "49") (ifseqformula "43"))
                                           (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "109")))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "49") (term "0,0,1,0,0") (ifseqformula "34"))
                                          (rule "replace_known_right" (formula "49") (term "0,0,0,1,0,0") (ifseqformula "108"))
                                           (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "35")))
                                          (rule "applyEq" (formula "49") (term "1") (ifseqformula "50"))
                                          (rule "ifEqualsInteger" (formula "49"))
                                          (rule "elementOfUnion" (formula "49") (term "0,0,1"))
                                          (rule "elementOfArrayRangeConcrete" (formula "49") (term "1,0,0,1"))
                                          (rule "eqSymm" (formula "49") (term "0,0,1,0,0,1"))
                                          (rule "replace_known_right" (formula "49") (term "0,0,1,0,0,1") (ifseqformula "107"))
                                           (builtin "One Step Simplification" (formula "49"))
                                          (rule "elementOfUnion" (formula "49") (term "0,0"))
                                          (rule "elementOfArrayRangeConcrete" (formula "49") (term "1,0,0"))
                                          (rule "eqSymm" (formula "49") (term "0,0,1,0,0"))
                                          (rule "replace_known_right" (formula "49") (term "0,0,1,0,0") (ifseqformula "107"))
                                           (builtin "One Step Simplification" (formula "49"))
                                          (rule "elementOfUnion" (formula "49") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "49"))
                                          (rule "elementOfUnion" (formula "49") (term "0,0,1"))
                                           (builtin "One Step Simplification" (formula "49"))
                                          (rule "Definition_axiom_for_notAllValuesInOneBucket_in_de_wiesler_Sorter" (formula "57") (term "0") (inst "b=b"))
                                           (builtin "One Step Simplification" (formula "57"))
                                          (rule "expand_inInt" (formula "57") (term "1,0,0"))
                                          (rule "replace_int_MAX" (formula "57") (term "1,0,1,0,0"))
                                          (rule "replace_int_MIN" (formula "57") (term "0,1,1,0,0"))
                                          (rule "translateJavaSubInt" (formula "57") (term "0,1,0"))
                                          (rule "translateJavaAddInt" (formula "57") (term "0,2,0,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "57") (term "0,1,0"))
                                          (rule "polySimp_addComm0" (formula "57") (term "0,1,0"))
                                          (rule "polySimp_addComm0" (formula "57") (term "0,2,1,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "57") (term "1,0,0,0"))
                                          (rule "polySimp_mulAssoc" (formula "57") (term "1,0,0,1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "57") (term "0,1,0,0,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "57") (term "1,0,0,1,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "57") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "57") (term "1,0,0,1,0"))
                                          (rule "polySimp_mulAssoc" (formula "57") (term "0,1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "57") (term "0,0,1,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "57") (term "0,1,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "57") (term "0,1,0,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "57") (term "0,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "57") (term "0,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "57") (term "0,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "57") (term "1,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "57") (term "1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "57") (term "1,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "57") (term "1,1,0,0,0"))
                                          (rule "mul_literals" (formula "57") (term "0,1,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "57") (term "1,1,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "57") (term "1,0"))
                                          (rule "polySimp_mulComm0" (formula "57") (term "1,1,0"))
                                          (rule "polySimp_rightDist" (formula "57") (term "1,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "57") (term "1,1,1,0"))
                                          (rule "polySimp_elimOne" (formula "57") (term "1,1,1,0"))
                                          (rule "polySimp_rightDist" (formula "57") (term "0,1,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "57") (term "1,0,1,1,0"))
                                          (rule "polySimp_elimOne" (formula "57") (term "1,0,1,1,0"))
                                          (rule "polySimp_rightDist" (formula "57") (term "0,0,1,1,0"))
                                          (rule "mul_literals" (formula "57") (term "0,0,0,1,1,0"))
                                          (rule "Free_class_invariant_axiom_for_de_wiesler_Storage" (formula "58"))
                                           (builtin "One Step Simplification" (formula "58") (ifInst ""  (formula "24")) (ifInst ""  (formula "25")) (ifInst ""  (formula "28")) (ifInst ""  (formula "29")) (ifInst ""  (formula "30")) (ifInst ""  (formula "31")))
                                          (rule "andLeft" (formula "58"))
                                          (rule "andLeft" (formula "58"))
                                          (rule "andLeft" (formula "60"))
                                          (rule "andLeft" (formula "58"))
                                          (rule "andLeft" (formula "61"))
                                          (rule "andLeft" (formula "61"))
                                          (rule "andLeft" (formula "61"))
                                          (rule "andLeft" (formula "61"))
                                          (rule "andLeft" (formula "61"))
                                          (rule "andLeft" (formula "61"))
                                          (rule "andLeft" (formula "61"))
                                          (rule "andLeft" (formula "61"))
                                          (rule "andLeft" (formula "61"))
                                          (rule "andLeft" (formula "61"))
                                          (rule "andLeft" (formula "61"))
                                          (rule "andLeft" (formula "61"))
                                          (rule "andLeft" (formula "61"))
                                          (rule "andLeft" (formula "61"))
                                          (rule "andLeft" (formula "61"))
                                          (rule "andLeft" (formula "61"))
                                          (rule "andLeft" (formula "61"))
                                          (rule "andLeft" (formula "61"))
                                          (rule "andLeft" (formula "61"))
                                          (rule "andLeft" (formula "61"))
                                          (rule "andLeft" (formula "61"))
                                          (rule "andLeft" (formula "61"))
                                          (rule "andLeft" (formula "61"))
                                          (rule "andLeft" (formula "61"))
                                          (rule "andLeft" (formula "61"))
                                          (rule "andLeft" (formula "61"))
                                          (rule "translateJavaMulInt" (formula "58") (term "1"))
                                          (rule "mul_literals" (formula "58") (term "1"))
                                          (rule "translateJavaMulInt" (formula "58") (term "1"))
                                          (rule "mul_literals" (formula "58") (term "1"))
                                          (rule "disjointDefinition" (formula "86"))
                                           (builtin "One Step Simplification" (formula "86") (ifInst ""  (formula "133")))
                                          (rule "true_left" (formula "86"))
                                          (rule "disjointDefinition" (formula "85"))
                                           (builtin "One Step Simplification" (formula "85") (ifInst ""  (formula "131")))
                                          (rule "true_left" (formula "85"))
                                          (rule "disjointDefinition" (formula "84"))
                                           (builtin "One Step Simplification" (formula "84"))
                                          (rule "notLeft" (formula "84"))
                                          (rule "eqSymm" (formula "87"))
                                          (rule "disjointDefinition" (formula "83"))
                                           (builtin "One Step Simplification" (formula "83"))
                                          (rule "notLeft" (formula "83"))
                                          (rule "eqSymm" (formula "86"))
                                          (rule "disjointDefinition" (formula "82"))
                                           (builtin "One Step Simplification" (formula "82"))
                                          (rule "notLeft" (formula "82"))
                                          (rule "eqSymm" (formula "85"))
                                          (rule "disjointDefinition" (formula "81"))
                                           (builtin "One Step Simplification" (formula "81"))
                                          (rule "notLeft" (formula "81"))
                                          (rule "eqSymm" (formula "84"))
                                          (rule "disjointDefinition" (formula "80"))
                                           (builtin "One Step Simplification" (formula "80"))
                                          (rule "notLeft" (formula "80"))
                                          (rule "eqSymm" (formula "83"))
                                          (rule "disjointDefinition" (formula "79"))
                                           (builtin "One Step Simplification" (formula "79"))
                                          (rule "notLeft" (formula "79"))
                                          (rule "eqSymm" (formula "82"))
                                          (rule "disjointDefinition" (formula "78"))
                                           (builtin "One Step Simplification" (formula "78"))
                                          (rule "notLeft" (formula "78"))
                                          (rule "eqSymm" (formula "81"))
                                          (rule "disjointDefinition" (formula "77"))
                                           (builtin "One Step Simplification" (formula "77"))
                                          (rule "notLeft" (formula "77"))
                                          (rule "eqSymm" (formula "80"))
                                          (rule "disjointDefinition" (formula "76"))
                                           (builtin "One Step Simplification" (formula "76"))
                                          (rule "notLeft" (formula "76"))
                                          (rule "eqSymm" (formula "79"))
                                          (rule "disjointDefinition" (formula "75"))
                                           (builtin "One Step Simplification" (formula "75"))
                                          (rule "notLeft" (formula "75"))
                                          (rule "eqSymm" (formula "78"))
                                          (rule "disjointDefinition" (formula "74"))
                                           (builtin "One Step Simplification" (formula "74"))
                                          (rule "notLeft" (formula "74"))
                                          (rule "eqSymm" (formula "77"))
                                          (rule "disjointDefinition" (formula "73"))
                                           (builtin "One Step Simplification" (formula "73"))
                                          (rule "notLeft" (formula "73"))
                                          (rule "eqSymm" (formula "76"))
                                          (rule "disjointDefinition" (formula "72"))
                                           (builtin "One Step Simplification" (formula "72"))
                                          (rule "notLeft" (formula "72"))
                                          (rule "eqSymm" (formula "75"))
                                          (rule "disjointDefinition" (formula "71"))
                                           (builtin "One Step Simplification" (formula "71") (ifInst ""  (formula "103")))
                                          (rule "true_left" (formula "71"))
                                          (rule "disjointDefinition" (formula "70"))
                                           (builtin "One Step Simplification" (formula "70"))
                                          (rule "notLeft" (formula "70"))
                                          (rule "eqSymm" (formula "73"))
                                          (rule "disjointDefinition" (formula "69"))
                                           (builtin "One Step Simplification" (formula "69"))
                                          (rule "notLeft" (formula "69"))
                                          (rule "eqSymm" (formula "72"))
                                          (rule "disjointDefinition" (formula "68"))
                                           (builtin "One Step Simplification" (formula "68") (ifInst ""  (formula "97")))
                                          (rule "true_left" (formula "68"))
                                          (rule "disjointDefinition" (formula "67"))
                                           (builtin "One Step Simplification" (formula "67") (ifInst ""  (formula "95")))
                                          (rule "true_left" (formula "67"))
                                          (rule "disjointDefinition" (formula "66"))
                                           (builtin "One Step Simplification" (formula "66") (ifInst ""  (formula "93")))
                                          (rule "true_left" (formula "66"))
                                          (rule "disjointDefinition" (formula "65"))
                                           (builtin "One Step Simplification" (formula "65") (ifInst ""  (formula "91")))
                                          (rule "true_left" (formula "65"))
                                          (rule "disjointDefinition" (formula "64"))
                                           (builtin "One Step Simplification" (formula "64") (ifInst ""  (formula "89")))
                                          (rule "true_left" (formula "64"))
                                          (rule "disjointDefinition" (formula "63"))
                                           (builtin "One Step Simplification" (formula "63") (ifInst ""  (formula "87")))
                                          (rule "true_left" (formula "63"))
                                          (rule "disjointDefinition" (formula "62"))
                                           (builtin "One Step Simplification" (formula "62") (ifInst ""  (formula "85")))
                                          (rule "true_left" (formula "62"))
                                          (rule "disjointDefinition" (formula "61"))
                                           (builtin "One Step Simplification" (formula "61") (ifInst ""  (formula "83")))
                                          (rule "true_left" (formula "61"))
                                          (rule "disjointDefinition" (formula "59"))
                                           (builtin "One Step Simplification" (formula "59") (ifInst ""  (formula "81")))
                                          (rule "true_left" (formula "59"))
                                          (rule "disjointDefinition" (formula "59"))
                                           (builtin "One Step Simplification" (formula "59") (ifInst ""  (formula "79")))
                                          (rule "true_left" (formula "59"))
                                          (rule "applyEq" (formula "58") (term "0") (ifseqformula "32"))
                                          (rule "eqSymm" (formula "58"))
                                          (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "59"))
                                          (rule "andLeft" (formula "59"))
                                          (rule "andLeft" (formula "59"))
                                          (rule "notLeft" (formula "61"))
                                          (rule "andLeft" (formula "59"))
                                          (rule "notLeft" (formula "61"))
                                          (rule "andLeft" (formula "59"))
                                          (rule "notLeft" (formula "61"))
                                          (rule "andLeft" (formula "59"))
                                          (rule "notLeft" (formula "61"))
                                          (rule "andLeft" (formula "59"))
                                          (rule "notLeft" (formula "61"))
                                          (rule "andLeft" (formula "59"))
                                          (rule "notLeft" (formula "61"))
                                          (rule "notLeft" (formula "59"))
                                          (rule "notLeft" (formula "59"))
                                          (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "15"))
                                          (rule "andLeft" (formula "15"))
                                          (rule "notLeft" (formula "16"))
                                          (rule "andLeft" (formula "15"))
                                          (rule "notLeft" (formula "16"))
                                          (rule "andLeft" (formula "15"))
                                          (rule "notLeft" (formula "16"))
                                          (rule "andLeft" (formula "15"))
                                          (rule "notLeft" (formula "16"))
                                          (rule "andLeft" (formula "15"))
                                          (rule "notLeft" (formula "16"))
                                          (rule "andLeft" (formula "15"))
                                          (rule "andLeft" (formula "15"))
                                          (rule "notLeft" (formula "17"))
                                          (rule "notLeft" (formula "16"))
                                          (rule "notLeft" (formula "15"))
                                          (rule "Definition_axiom_for_smallBucketsInRangeSorted_in_de_wiesler_Sorter" (formula "51") (term "0") (inst "b=b"))
                                           (builtin "One Step Simplification" (formula "51"))
                                          (rule "expand_inInt" (formula "51") (term "1,0,0"))
                                          (rule "replace_int_MIN" (formula "51") (term "0,1,1,0,0"))
                                          (rule "replace_int_MAX" (formula "51") (term "1,0,1,0,0"))
                                          (rule "translateJavaAddInt" (formula "51") (term "0,2,5,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "51") (term "0,2,5,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "51") (term "1,0,0,0"))
                                          (rule "polySimp_mulAssoc" (formula "51") (term "1,0,0,1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "51") (term "0,1,0,0,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "51") (term "1,0,0,1,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "51") (term "0,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "51") (term "1,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "51") (term "1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "51") (term "1,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "51") (term "1,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "51") (term "1,1,1,0,0,0"))
                                          (rule "mul_literals" (formula "51") (term "0,1,1,0,0,0"))
                                          (rule "Definition_axiom_for_allBucketsPartitioned_in_de_wiesler_Sorter" (formula "50") (term "0") (inst "b=b"))
                                           (builtin "One Step Simplification" (formula "50"))
                                          (rule "expand_inInt" (formula "50") (term "1,0,0"))
                                          (rule "replace_int_MIN" (formula "50") (term "0,1,1,0,0"))
                                          (rule "replace_int_MAX" (formula "50") (term "1,0,1,0,0"))
                                          (rule "translateJavaAddInt" (formula "50") (term "0,2,5,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "50") (term "0,2,5,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "50") (term "1,0,0,0"))
                                          (rule "polySimp_mulAssoc" (formula "50") (term "1,0,0,1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "50") (term "0,1,0,0,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "50") (term "1,0,0,1,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "50") (term "0,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "50") (term "1,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "50") (term "1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "50") (term "1,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "50") (term "1,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "50") (term "1,1,1,0,0,0"))
                                          (rule "mul_literals" (formula "50") (term "0,1,1,0,0,0"))
                                          (rule "Definition_axiom_for_isEqualityBucket_in_de_wiesler_Sorter" (formula "55") (term "0,1,0") (inst "i=i"))
                                           (builtin "One Step Simplification" (formula "55"))
                                          (rule "expand_inInt" (formula "55") (term "1,0,0,1,0"))
                                          (rule "replace_int_MIN" (formula "55") (term "0,1,1,0,0,1,0"))
                                          (rule "replace_int_MAX" (formula "55") (term "1,0,1,0,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "55") (term "1,1,0,0,0,1,0"))
                                          (rule "eqSymm" (formula "55") (term "1,0,1,0"))
                                          (rule "translateJavaAddInt" (formula "55") (term "0,2,0,1,0,1,0"))
                                          (rule "polySimp_elimSub" (formula "55") (term "1,1,0,0,0,1,0"))
                                          (rule "mul_literals" (formula "55") (term "1,1,1,0,0,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "55") (term "0,2,0,1,0,1,0"))
                                          (rule "polySimp_addComm1" (formula "55") (term "1,1,0,0,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "55") (term "0,1,1,0,0,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "55") (term "1,0,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "55") (term "1,0,0,1,0,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "55") (term "0,1,0,0,1,0,0,0,1,0"))
                                          (rule "mul_literals" (formula "55") (term "0,0,1,0,0,1,0,0,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "55") (term "0,0,1,0,0,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "55") (term "0,0,0,1,0,0,0,1,0"))
                                          (rule "add_literals" (formula "55") (term "0,0,0,0,1,0,0,0,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "55") (term "0,0,0,0,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "55") (term "1,1,0,0,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "55") (term "1,0,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "55") (term "1,1,0,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "55") (term "1,1,0,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "55") (term "1,1,1,0,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "55") (term "1,1,1,0,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "55") (term "0,1,1,0,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "55") (term "1,0,1,1,0,0,0,1,0"))
                                          (rule "mul_literals" (formula "55") (term "0,0,1,1,0,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "55") (term "1,0,1,1,0,0,0,1,0"))
                                          (rule "commuteUnion" (formula "57") (term "0,0,0"))
                                          (rule "commuteUnion" (formula "57") (term "1,1,0"))
                                          (rule "cut_direct" (formula "43") (term "0,0,0"))
                                          (branch "CUT: result_242.<created> = TRUE TRUE"
                                              (builtin "One Step Simplification" (formula "44"))
                                             (rule "true_left" (formula "44"))
                                             (rule "commuteUnion" (formula "57") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "57"))
                                             (rule "true_left" (formula "57"))
                                             (rule "nnf_imp2or" (formula "56") (term "0"))
                                             (rule "Definition_axiom_for_allBucketsInRangeSorted_in_de_wiesler_Sorter" (formula "5") (term "0") (inst "b=b"))
                                              (builtin "One Step Simplification" (formula "5"))
                                             (rule "expand_inInt" (formula "5") (term "1,0,0"))
                                             (rule "replace_int_MAX" (formula "5") (term "1,0,1,0,0"))
                                             (rule "replace_int_MIN" (formula "5") (term "0,1,1,0,0"))
                                             (rule "translateJavaAddInt" (formula "5") (term "3,0,1,0"))
                                             (rule "translateJavaAddInt" (formula "5") (term "2,0,1,0"))
                                             (rule "translateJavaAddInt" (formula "5") (term "0,2,1,3,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "5") (term "0,2,1,3,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,1,0,0,0"))
                                             (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0,0"))
                                             (rule "add_literals" (formula "5") (term "0,0,0,1,0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "5") (term "1,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0,0"))
                                             (rule "mul_literals" (formula "5") (term "0,1,1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0,0"))
                                             (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "117"))
                                             (rule "replace_known_right" (formula "117") (term "0,1,0,0") (ifseqformula "64"))
                                              (builtin "One Step Simplification" (formula "117") (ifInst ""  (formula "60")) (ifInst ""  (formula "59")) (ifInst ""  (formula "61")) (ifInst ""  (formula "62")) (ifInst ""  (formula "63")) (ifInst ""  (formula "65")) (ifInst ""  (formula "66")))
                                             (rule "closeTrue" (formula "117"))
                                          )
                                          (branch "CUT: result_242.<created> = TRUE FALSE"
                                              (builtin "One Step Simplification" (formula "43"))
                                             (rule "commuteUnion_2" (formula "57") (term "0,0"))
                                             (rule "commuteUnion_2" (formula "57") (term "0"))
                                             (rule "eqSymm" (formula "57"))
                                             (rule "applyEq" (formula "119") (term "0,1,0") (ifseqformula "57"))
                                             (rule "applyEq" (formula "8") (term "0,1,0,0") (ifseqformula "57"))
                                             (rule "applyEq" (formula "42") (term "1,0,1,0") (ifseqformula "57"))
                                             (rule "applyEq" (formula "31") (term "1") (ifseqformula "57"))
                                             (rule "applyEq" (formula "5") (term "0,1,0,0") (ifseqformula "57"))
                                             (rule "applyEq" (formula "7") (term "0,1,0,0") (ifseqformula "57"))
                                             (rule "commuteUnion" (formula "57") (term "0,0,1"))
                                             (rule "commuteUnion" (formula "119") (term "0,0,0,1,0"))
                                             (rule "commuteUnion" (formula "8") (term "0,0,0,1,0,0"))
                                             (rule "commuteUnion" (formula "42") (term "0,0,1,0,1,0"))
                                             (rule "commuteUnion" (formula "31") (term "0,0,1"))
                                             (rule "commuteUnion" (formula "5") (term "0,0,0,1,0,0"))
                                             (rule "commuteUnion" (formula "7") (term "0,0,0,1,0,0"))
                                             (rule "nnf_imp2or" (formula "56") (term "0"))
                                             (rule "Definition_axiom_for_allBucketsPartitioned_in_de_wiesler_Sorter" (formula "6") (term "0") (inst "b=b"))
                                              (builtin "One Step Simplification" (formula "6"))
                                             (rule "expand_inInt" (formula "6") (term "1,0,0"))
                                             (rule "replace_int_MIN" (formula "6") (term "0,1,1,0,0"))
                                             (rule "replace_int_MAX" (formula "6") (term "1,0,1,0,0"))
                                             (rule "translateJavaAddInt" (formula "6") (term "0,2,5,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "6") (term "0,2,5,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,0"))
                                             (rule "polySimp_mulAssoc" (formula "6") (term "1,0,0,1,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "6") (term "0,1,0,0,1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0,1,0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "6") (term "1,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0,0"))
                                             (rule "mul_literals" (formula "6") (term "0,1,1,0,0,0"))
                                             (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "47") (term "0") (inst "i=i") (inst "j=j"))
                                              (builtin "One Step Simplification" (formula "47"))
                                             (rule "expand_inInt" (formula "47") (term "1,0,0,1,0"))
                                             (rule "expand_inInt" (formula "47") (term "1,0,0"))
                                             (rule "replace_int_MIN" (formula "47") (term "0,1,1,0,0,1,0"))
                                             (rule "replace_int_MAX" (formula "47") (term "1,0,1,0,0,1,0"))
                                             (rule "replace_int_MIN" (formula "47") (term "0,1,1,0,0"))
                                             (rule "replace_int_MAX" (formula "47") (term "1,0,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "47") (term "1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "47") (term "1,0,0,1,0,0,0"))
                                             (rule "mul_literals" (formula "47") (term "0,1,0,0,1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "47") (term "1,1,0,0,1,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "47") (term "0,0,1,0,0,0"))
                                             (rule "add_literals" (formula "47") (term "0,0,0,1,0,0,0"))
                                             (rule "add_zero_left" (formula "47") (term "0,0,1,0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "47") (term "1,0,0,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "47") (term "1,0,0,1,0,0,0,1,0"))
                                             (rule "mul_literals" (formula "47") (term "0,1,0,0,1,0,0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "47") (term "1,1,0,0,1,0,0,0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "47") (term "0,0,1,0,0,0,1,0"))
                                             (rule "add_literals" (formula "47") (term "0,0,0,1,0,0,0,1,0"))
                                             (rule "add_zero_left" (formula "47") (term "0,0,1,0,0,0,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "47") (term "0,0,0,0,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "47") (term "1,0,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "47") (term "0,0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "47") (term "1,1,0,0,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "47") (term "1,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "47") (term "1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "47") (term "1,1,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "47") (term "1,0,0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "47") (term "1,1,0,0,0,1,0"))
                                             (rule "arrayLengthIsAShort" (formula "30") (term "0"))
                                             (rule "expand_inShort" (formula "30"))
                                             (rule "replace_short_MAX" (formula "30") (term "1,0"))
                                             (rule "replace_short_MIN" (formula "30") (term "0,1"))
                                             (rule "andLeft" (formula "30"))
                                             (rule "inEqSimp_commuteLeq" (formula "31"))
                                             (rule "applyEq" (formula "31") (term "0") (ifseqformula "32"))
                                             (rule "qeq_literals" (formula "31"))
                                             (rule "true_left" (formula "31"))
                                             (rule "applyEq" (formula "30") (term "0") (ifseqformula "31"))
                                             (rule "leq_literals" (formula "30"))
                                             (rule "true_left" (formula "30"))
                                             (rule "arrayLengthNotNegative" (formula "30") (term "0"))
                                             (rule "applyEq" (formula "30") (term "0") (ifseqformula "31"))
                                             (rule "qeq_literals" (formula "30"))
                                             (rule "true_left" (formula "30"))
                                             (rule "arrayLengthIsAShort" (formula "29") (term "0"))
                                             (rule "expand_inShort" (formula "29"))
                                             (rule "replace_short_MAX" (formula "29") (term "1,0"))
                                             (rule "replace_short_MIN" (formula "29") (term "0,1"))
                                             (rule "andLeft" (formula "29"))
                                             (rule "inEqSimp_commuteLeq" (formula "30"))
                                             (rule "applyEq" (formula "30") (term "0") (ifseqformula "31"))
                                             (rule "qeq_literals" (formula "30"))
                                             (rule "true_left" (formula "30"))
                                             (rule "applyEq" (formula "29") (term "0") (ifseqformula "30"))
                                             (rule "leq_literals" (formula "29"))
                                             (rule "true_left" (formula "29"))
                                             (rule "arrayLengthNotNegative" (formula "29") (term "0"))
                                             (rule "applyEq" (formula "29") (term "0") (ifseqformula "30"))
                                             (rule "qeq_literals" (formula "29"))
                                             (rule "true_left" (formula "29"))
                                             (rule "arrayLengthIsAShort" (formula "28") (term "0"))
                                             (rule "expand_inShort" (formula "28"))
                                             (rule "replace_short_MAX" (formula "28") (term "1,0"))
                                             (rule "replace_short_MIN" (formula "28") (term "0,1"))
                                             (rule "andLeft" (formula "28"))
                                             (rule "inEqSimp_commuteLeq" (formula "29"))
                                             (rule "applyEq" (formula "29") (term "0") (ifseqformula "30"))
                                             (rule "qeq_literals" (formula "29"))
                                             (rule "true_left" (formula "29"))
                                             (rule "applyEq" (formula "28") (term "0") (ifseqformula "29"))
                                             (rule "leq_literals" (formula "28"))
                                             (rule "true_left" (formula "28"))
                                             (rule "arrayLengthNotNegative" (formula "28") (term "0"))
                                             (rule "applyEq" (formula "28") (term "0") (ifseqformula "29"))
                                             (rule "qeq_literals" (formula "28"))
                                             (rule "true_left" (formula "28"))
                                             (rule "arrayLengthNotNegative" (formula "27") (term "0"))
                                             (rule "applyEq" (formula "27") (term "0") (ifseqformula "28"))
                                             (rule "qeq_literals" (formula "27"))
                                             (rule "true_left" (formula "27"))
                                             (rule "arrayLengthIsAShort" (formula "27") (term "0"))
                                             (rule "expand_inShort" (formula "27"))
                                             (rule "replace_short_MAX" (formula "27") (term "1,0"))
                                             (rule "replace_short_MIN" (formula "27") (term "0,1"))
                                             (rule "andLeft" (formula "27"))
                                             (rule "inEqSimp_commuteLeq" (formula "28"))
                                             (rule "applyEq" (formula "28") (term "0") (ifseqformula "29"))
                                             (rule "qeq_literals" (formula "28"))
                                             (rule "true_left" (formula "28"))
                                             (rule "applyEq" (formula "27") (term "0") (ifseqformula "28"))
                                             (rule "leq_literals" (formula "27"))
                                             (rule "true_left" (formula "27"))
                                             (rule "arrayLengthNotNegative" (formula "26") (term "0"))
                                             (rule "applyEq" (formula "26") (term "0") (ifseqformula "27"))
                                             (rule "qeq_literals" (formula "26"))
                                             (rule "true_left" (formula "26"))
                                             (rule "arrayLengthIsAShort" (formula "26") (term "0"))
                                             (rule "expand_inShort" (formula "26"))
                                             (rule "replace_short_MAX" (formula "26") (term "1,0"))
                                             (rule "replace_short_MIN" (formula "26") (term "0,1"))
                                             (rule "andLeft" (formula "26"))
                                             (rule "inEqSimp_commuteLeq" (formula "27"))
                                             (rule "applyEq" (formula "27") (term "0") (ifseqformula "28"))
                                             (rule "qeq_literals" (formula "27"))
                                             (rule "true_left" (formula "27"))
                                             (rule "applyEq" (formula "26") (term "0") (ifseqformula "27"))
                                             (rule "leq_literals" (formula "26"))
                                             (rule "closeFalse" (formula "26"))
                                          )
                                       )
                                    )
                                 )
                                 (branch "if equal_buckets false"
                                     (builtin "One Step Simplification" (formula "61"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "replace_known_right" (formula "6") (term "0,7,0") (ifseqformula "54"))
                                     (builtin "One Step Simplification" (formula "6"))
                                    (rule "replace_known_right" (formula "8") (term "0,6,0") (ifseqformula "54"))
                                     (builtin "One Step Simplification" (formula "8"))
                                    (rule "replace_known_right" (formula "48") (term "0") (ifseqformula "54"))
                                     (builtin "One Step Simplification" (formula "48"))
                                    (rule "true_left" (formula "48"))
                                    (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "53"))
                                     (builtin "One Step Simplification" (formula "9"))
                                    (rule "true_left" (formula "9"))
                                    (rule "tryEmpty" (formula "59") (term "1"))
                                    (rule "blockEmptyLabel" (formula "59") (term "1"))
                                    (rule "blockEmpty" (formula "59") (term "1"))
                                    (rule "methodCallEmpty" (formula "59") (term "1"))
                                     (builtin "One Step Simplification" (formula "59"))
                                    (rule "emptyModality" (formula "59") (term "1"))
                                     (builtin "One Step Simplification" (formula "59"))
                                    (rule "closeTrue" (formula "59"))
                                 )
                              )
                           )
                        )
                        (branch "Precondition"
                           (rule "andRight" (formula "51"))
                           (branch
                              (rule "andRight" (formula "51"))
                              (branch
                                  (builtin "One Step Simplification" (formula "51"))
                                 (rule "translateJavaSubInt" (formula "51") (term "0,0"))
                                 (rule "polySimp_elimSub" (formula "51") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "51") (term "0,0"))
                                 (rule "close" (formula "51") (ifseqformula "8"))
                              )
                              (branch
                                  (builtin "One Step Simplification" (formula "51"))
                                 (rule "wellFormedAnonEQ" (formula "51") (ifseqformula "32"))
                                 (rule "wellFormedAnon" (formula "51") (term "0"))
                                 (rule "wellFormedAnonEQ" (formula "51") (term "0,0") (ifseqformula "21"))
                                 (rule "replace_known_left" (formula "51") (term "1") (ifseqformula "31"))
                                  (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "1")) (ifInst ""  (formula "20")) (ifInst ""  (formula "27")))
                                 (rule "closeTrue" (formula "51"))
                              )
                           )
                           (branch
                              (rule "andRight" (formula "51"))
                              (branch
                                 (rule "andRight" (formula "51"))
                                 (branch
                                    (rule "andRight" (formula "51"))
                                    (branch
                                       (rule "andRight" (formula "51"))
                                       (branch
                                          (rule "andRight" (formula "51"))
                                          (branch
                                             (rule "orRight" (formula "51"))
                                              (builtin "One Step Simplification" (formula "52"))
                                              (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "48")))
                                             (rule "false_right" (formula "51"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "51") (ifseqformula "32"))
                                              (builtin "One Step Simplification" (formula "51"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "51") (term "0,0") (ifseqformula "21"))
                                             (rule "orRight" (formula "51"))
                                             (rule "orRight" (formula "51"))
                                             (rule "orRight" (formula "51"))
                                             (rule "close" (formula "51") (ifseqformula "22"))
                                          )
                                          (branch
                                             (rule "orRight" (formula "51"))
                                              (builtin "One Step Simplification" (formula "52"))
                                              (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "49")))
                                             (rule "false_right" (formula "51"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "51") (ifseqformula "32"))
                                              (builtin "One Step Simplification" (formula "51"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "51") (term "0,0") (ifseqformula "21"))
                                             (rule "orRight" (formula "51"))
                                             (rule "orRight" (formula "51"))
                                             (rule "orRight" (formula "51"))
                                             (rule "close" (formula "51") (ifseqformula "7"))
                                          )
                                       )
                                       (branch
                                           (builtin "One Step Simplification" (formula "51"))
                                          (rule "expand_inInt" (formula "51"))
                                          (rule "replace_int_MAX" (formula "51") (term "1,0"))
                                          (rule "replace_int_MIN" (formula "51") (term "0,1"))
                                          (rule "replace_known_left" (formula "51") (term "0") (ifseqformula "5"))
                                           (builtin "One Step Simplification" (formula "51"))
                                          (rule "inEqSimp_leqRight" (formula "51"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "inEqSimp_gtToGeq" (formula "17"))
                                          (rule "mul_literals" (formula "17") (term "1,0,0"))
                                          (rule "add_literals" (formula "17") (term "0,0"))
                                          (rule "polySimp_addAssoc" (formula "17") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0,0,0,0"))
                                          (rule "mul_literals" (formula "25") (term "1,0,0,0,0,0,0,0"))
                                          (rule "add_literals" (formula "25") (term "0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_homoInEq0" (formula "18"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                                          (rule "polySimp_mulAssoc" (formula "18") (term "0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "18") (term "0,1,0"))
                                          (rule "polySimp_elimOne" (formula "18") (term "0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "18") (term "0"))
                                          (rule "jmod_axiom" (formula "39") (term "0"))
                                          (rule "polySimp_mulLiterals" (formula "39") (term "1,0"))
                                          (rule "polySimp_sepNegMonomial" (formula "39"))
                                          (rule "polySimp_mulLiterals" (formula "39") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "17"))
                                          (rule "polySimp_mulComm0" (formula "17") (term "1"))
                                          (rule "polySimp_rightDist" (formula "17") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "17") (term "1,1"))
                                          (rule "mul_literals" (formula "17") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "17") (term "1,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0,0,0"))
                                          (rule "mul_literals" (formula "25") (term "1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "18"))
                                          (rule "polySimp_mulLiterals" (formula "18") (term "0"))
                                          (rule "polySimp_elimOne" (formula "18") (term "0"))
                                          (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "13"))
                                          (rule "leq_literals" (formula "15") (term "0"))
                                           (builtin "One Step Simplification" (formula "15"))
                                          (rule "true_left" (formula "15"))
                                          (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "1"))
                                          (rule "qeq_literals" (formula "7") (term "0"))
                                           (builtin "One Step Simplification" (formula "7"))
                                          (rule "closeFalse" (formula "7"))
                                       )
                                    )
                                    (branch
                                        (builtin "One Step Simplification" (formula "51"))
                                       (rule "expand_inInt" (formula "51"))
                                       (rule "replace_int_MAX" (formula "51") (term "1,0"))
                                       (rule "replace_int_MIN" (formula "51") (term "0,1"))
                                       (rule "inEqSimp_gtToGeq" (formula "16"))
                                       (rule "mul_literals" (formula "16") (term "1,0,0"))
                                       (rule "add_literals" (formula "16") (term "0,0"))
                                       (rule "polySimp_addAssoc" (formula "16") (term "0"))
                                       (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,0,0,0"))
                                       (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0,0,0"))
                                       (rule "add_literals" (formula "24") (term "0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "51") (term "1"))
                                       (rule "inEqSimp_homoInEq0" (formula "17"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "17") (term "1,0"))
                                       (rule "polySimp_mulAssoc" (formula "17") (term "0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "17") (term "0,1,0"))
                                       (rule "polySimp_elimOne" (formula "17") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "17") (term "0"))
                                       (rule "jmod_axiom" (formula "38") (term "0"))
                                       (rule "polySimp_mulLiterals" (formula "38") (term "1,0"))
                                       (rule "polySimp_sepNegMonomial" (formula "38"))
                                       (rule "polySimp_mulLiterals" (formula "38") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                                       (rule "polySimp_mulComm0" (formula "16") (term "1"))
                                       (rule "polySimp_rightDist" (formula "16") (term "1"))
                                       (rule "mul_literals" (formula "16") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "16") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "16") (term "1,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,0,0"))
                                       (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "17"))
                                       (rule "polySimp_mulLiterals" (formula "17") (term "0"))
                                       (rule "polySimp_elimOne" (formula "17") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "12"))
                                       (rule "leq_literals" (formula "14") (term "0"))
                                        (builtin "One Step Simplification" (formula "14"))
                                       (rule "true_left" (formula "14"))
                                       (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "10"))
                                       (rule "leq_literals" (formula "4") (term "0"))
                                        (builtin "One Step Simplification" (formula "4"))
                                       (rule "true_left" (formula "4"))
                                       (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "14"))
                                       (rule "inEqSimp_homoInEq0" (formula "10") (term "0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0"))
                                       (rule "add_literals" (formula "10") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "10") (term "1,0,0"))
                                       (rule "add_literals" (formula "10") (term "0,0"))
                                       (rule "qeq_literals" (formula "10") (term "0"))
                                        (builtin "One Step Simplification" (formula "10"))
                                       (rule "true_left" (formula "10"))
                                       (rule "newSym_eq" (formula "35") (inst "newSymDef=mul(int::final(result_242,
               de.wiesler.PartitionResult::$num_buckets),
    Z(0(#)))") (inst "l=l_0"))
                                       (rule "times_zero_1" (formula "35") (term "1,1"))
                                       (rule "add_zero_right" (formula "35") (term "1"))
                                       (rule "applyEq" (formula "36") (term "0,0") (ifseqformula "35"))
                                       (rule "eqSymm" (formula "36"))
                                       (rule "applyEq" (formula "38") (term "1,7,0,1") (ifseqformula "36"))
                                       (rule "applyEq" (formula "37") (term "0,2,0") (ifseqformula "36"))
                                       (rule "applyEq" (formula "38") (term "5,0,1") (ifseqformula "36"))
                                       (rule "applyEq" (formula "34") (term "7,0") (ifseqformula "36"))
                                       (rule "applyEq" (formula "32") (term "2,0") (ifseqformula "36"))
                                       (rule "replace_known_left" (formula "49") (term "0") (ifseqformula "3"))
                                        (builtin "One Step Simplification" (formula "49"))
                                       (rule "inEqSimp_geqRight" (formula "49"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "applyEq" (formula "40") (term "2,0") (ifseqformula "37"))
                                       (rule "applyEq" (formula "35") (term "5,0") (ifseqformula "37"))
                                       (rule "applyEq" (formula "36") (term "0,0") (ifseqformula "37"))
                                       (rule "applyEq" (formula "34") (term "5,0") (ifseqformula "37"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                       (rule "mul_literals" (formula "1") (term "1"))
                                       (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "10") (term "0"))
                                        (builtin "One Step Simplification" (formula "10"))
                                       (rule "closeFalse" (formula "10"))
                                    )
                                 )
                                 (branch
                                     (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "50")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "51") (ifseqformula "32"))
                                     (builtin "One Step Simplification" (formula "51"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "51") (term "0,0") (ifseqformula "21"))
                                    (rule "orRight" (formula "51"))
                                    (rule "orRight" (formula "51"))
                                    (rule "orRight" (formula "51"))
                                    (rule "close" (formula "51") (ifseqformula "2"))
                                 )
                              )
                              (branch
                                  (builtin "One Step Simplification" (formula "51"))
                                 (rule "expand_inInt" (formula "51"))
                                 (rule "replace_int_MAX" (formula "51") (term "1,0"))
                                 (rule "replace_int_MIN" (formula "51") (term "0,1"))
                                 (rule "inEqSimp_gtToGeq" (formula "16"))
                                 (rule "mul_literals" (formula "16") (term "1,0,0"))
                                 (rule "add_literals" (formula "16") (term "0,0"))
                                 (rule "polySimp_addAssoc" (formula "16") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,0,0,0"))
                                 (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "24") (term "0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "51") (term "1"))
                                 (rule "inEqSimp_homoInEq0" (formula "17"))
                                 (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "17") (term "1,0"))
                                 (rule "polySimp_mulAssoc" (formula "17") (term "0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "17") (term "0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "17") (term "0,1,0"))
                                 (rule "polySimp_elimOne" (formula "17") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "17") (term "0"))
                                 (rule "jmod_axiom" (formula "38") (term "0"))
                                 (rule "polySimp_mulLiterals" (formula "38") (term "1,0"))
                                 (rule "polySimp_sepNegMonomial" (formula "38"))
                                 (rule "polySimp_mulLiterals" (formula "38") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "1"))
                                 (rule "polySimp_rightDist" (formula "16") (term "1"))
                                 (rule "mul_literals" (formula "16") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "16") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "16") (term "1,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,0,0"))
                                 (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "17"))
                                 (rule "polySimp_mulLiterals" (formula "17") (term "0"))
                                 (rule "polySimp_elimOne" (formula "17") (term "0"))
                                 (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "16"))
                                 (rule "inEqSimp_homoInEq0" (formula "11") (term "0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0"))
                                 (rule "add_literals" (formula "11") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "11") (term "1,0,0"))
                                 (rule "add_literals" (formula "11") (term "0,0"))
                                 (rule "qeq_literals" (formula "11") (term "0"))
                                  (builtin "One Step Simplification" (formula "11"))
                                 (rule "true_left" (formula "11"))
                                 (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "10"))
                                 (rule "leq_literals" (formula "4") (term "0"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "true_left" (formula "4"))
                                 (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "10"))
                                 (rule "leq_literals" (formula "12") (term "0"))
                                  (builtin "One Step Simplification" (formula "12"))
                                 (rule "true_left" (formula "12"))
                                 (rule "newSym_eq" (formula "35") (inst "l=l_0") (inst "newSymDef=mul(int::final(result_242,
               de.wiesler.PartitionResult::$num_buckets),
    Z(0(#)))"))
                                 (rule "times_zero_1" (formula "35") (term "1,1"))
                                 (rule "add_zero_right" (formula "35") (term "1"))
                                 (rule "applyEq" (formula "36") (term "0,0") (ifseqformula "35"))
                                 (rule "eqSymm" (formula "36"))
                                 (rule "applyEq" (formula "33") (term "5,0") (ifseqformula "36"))
                                 (rule "applyEq" (formula "35") (term "0,0") (ifseqformula "36"))
                                 (rule "applyEq" (formula "34") (term "5,0") (ifseqformula "36"))
                                 (rule "applyEq" (formula "32") (term "2,0") (ifseqformula "36"))
                                 (rule "applyEq" (formula "49") (term "0,0") (ifseqformula "36"))
                                 (rule "applyEq" (formula "37") (term "0,2,0") (ifseqformula "36"))
                                 (rule "applyEq" (formula "49") (term "0,1") (ifseqformula "36"))
                                 (rule "applyEq" (formula "39") (term "2,0") (ifseqformula "36"))
                                 (rule "applyEq" (formula "34") (term "7,0") (ifseqformula "36"))
                                 (rule "applyEq" (formula "38") (term "1,7,0,1") (ifseqformula "36"))
                                 (rule "applyEq" (formula "38") (term "5,0,1") (ifseqformula "36"))
                                 (rule "elimGcdGeq" (formula "49") (term "1") (inst "elimGcdRightDiv=Z(neglit(4(2(8(1(4(7(3(7(0(1(#))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                                 (rule "polySimp_mulLiterals" (formula "49") (term "1,0,1,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "49") (term "0,0,0,0,1,0,1"))
                                 (rule "sub_literals" (formula "49") (term "0,0,0,0,0,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "49") (term "1,0,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "49") (term "1,0,0,0,0,0,0,1"))
                                 (rule "mul_literals" (formula "49") (term "0,0,0,0,1,0,1"))
                                 (rule "mul_literals" (formula "49") (term "1,0,0,0,0,0,0,1"))
                                 (rule "add_literals" (formula "49") (term "0,0,0,1,0,1"))
                                 (rule "polySimp_addLiterals" (formula "49") (term "0,0,0,0,0,1"))
                                 (rule "add_zero_left" (formula "49") (term "0,0,1,0,1"))
                                 (rule "add_zero_right" (formula "49") (term "0,0,0,0,0,1"))
                                 (rule "polySimp_pullOutFactor0" (formula "49") (term "0,1,0,1"))
                                 (rule "add_literals" (formula "49") (term "1,0,1,0,1"))
                                 (rule "times_zero_1" (formula "49") (term "0,1,0,1"))
                                 (rule "leq_literals" (formula "49") (term "1,0,1"))
                                  (builtin "One Step Simplification" (formula "49"))
                                 (rule "polySimp_pullOutFactor0b" (formula "49") (term "0,0,1"))
                                 (rule "add_literals" (formula "49") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "49") (term "1,0,0,1"))
                                 (rule "add_literals" (formula "49") (term "0,0,1"))
                                 (rule "qeq_literals" (formula "49") (term "0,1"))
                                  (builtin "One Step Simplification" (formula "49"))
                                 (rule "elimGcdLeq" (formula "49") (term "0") (inst "elimGcdRightDiv=Z(3(2(8(1(4(7(3(7(0(1(#)))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                                 (rule "polySimp_mulLiterals" (formula "49") (term "0,0,0,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "49") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "49") (term "1,0,0,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "49") (term "1,0,1,0,0"))
                                 (rule "sub_literals" (formula "49") (term "0,0,0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "49") (term "0,0,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "49") (term "1,0,0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "49") (term "0,0,0,1,0,0"))
                                 (rule "polySimp_addLiterals" (formula "49") (term "0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "49") (term "0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "49") (term "0,0,0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "49") (term "0,1,0,0"))
                                 (rule "add_literals" (formula "49") (term "1,1,0,1,0,0"))
                                 (rule "times_zero_1" (formula "49") (term "1,0,1,0,0"))
                                 (rule "add_zero_right" (formula "49") (term "0,1,0,0"))
                                 (rule "qeq_literals" (formula "49") (term "1,0,0"))
                                  (builtin "One Step Simplification" (formula "49"))
                                 (rule "polySimp_pullOutFactor0" (formula "49") (term "0,0,0"))
                                 (rule "add_literals" (formula "49") (term "1,0,0,0"))
                                 (rule "times_zero_1" (formula "49") (term "0,0,0"))
                                 (rule "leq_literals" (formula "49") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "49"))
                                 (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "14"))
                                 (rule "mul_literals" (formula "5") (term "0,0"))
                                 (rule "polySimp_addAssoc" (formula "5") (term "0"))
                                 (rule "add_literals" (formula "5") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                                 (rule "mul_literals" (formula "5") (term "1"))
                                 (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "10"))
                                 (rule "leq_literals" (formula "5") (term "0"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "true_left" (formula "5"))
                                 (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "4"))
                                 (rule "polySimp_rightDist" (formula "13") (term "0,0"))
                                 (rule "mul_literals" (formula "13") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "13") (term "0"))
                                 (rule "add_literals" (formula "13") (term "0,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "13"))
                                 (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                                 (rule "polySimp_elimOne" (formula "13") (term "0"))
                                 (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "13"))
                                 (rule "leq_literals" (formula "3") (term "0"))
                                  (builtin "One Step Simplification" (formula "3"))
                                 (rule "true_left" (formula "3"))
                                 (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "10"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "11") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "11"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                                 (rule "polySimp_elimOne" (formula "11") (term "0"))
                                 (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "11"))
                                 (rule "leq_literals" (formula "3") (term "0"))
                                  (builtin "One Step Simplification" (formula "3"))
                                 (rule "true_left" (formula "3"))
                                 (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "10"))
                                 (rule "polySimp_rightDist" (formula "13") (term "0,0"))
                                 (rule "mul_literals" (formula "13") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "13") (term "0"))
                                 (rule "add_literals" (formula "13") (term "0,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "13"))
                                 (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                                 (rule "polySimp_elimOne" (formula "13") (term "0"))
                                 (rule "inEqSimp_subsumption0" (formula "12") (ifseqformula "13"))
                                 (rule "leq_literals" (formula "12") (term "0"))
                                  (builtin "One Step Simplification" (formula "12"))
                                 (rule "true_left" (formula "12"))
                                 (rule "inEqSimp_and_subsumption3" (formula "21") (term "0,0,0"))
                                 (rule "leq_literals" (formula "21") (term "0,1,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "21"))
                                 (rule "nnf_imp2or" (formula "21") (term "0"))
                                 (rule "nnf_notAnd" (formula "21") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                                 (rule "mul_literals" (formula "21") (term "1,0,0,1,0,0"))
                                 (rule "add_literals" (formula "21") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                                 (rule "mul_literals" (formula "21") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "21") (term "0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "21") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "21") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "21") (term "1,0,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "21") (term "1,0,0,0"))
                                 (rule "times_zero_1" (formula "21") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "21") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "21") (term "1,1,0,0,0"))
                                 (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "41"))
                                 (rule "andLeft" (formula "41"))
                                 (rule "andLeft" (formula "41"))
                                 (rule "notLeft" (formula "43"))
                                 (rule "andLeft" (formula "41"))
                                 (rule "notLeft" (formula "43"))
                                 (rule "notLeft" (formula "42"))
                                 (rule "andLeft" (formula "41"))
                                 (rule "notLeft" (formula "42"))
                                 (rule "andLeft" (formula "41"))
                                 (rule "andLeft" (formula "41"))
                                 (rule "notLeft" (formula "43"))
                                 (rule "notLeft" (formula "42"))
                                 (rule "andLeft" (formula "41"))
                                 (rule "notLeft" (formula "41"))
                                 (rule "notLeft" (formula "41"))
                                 (rule "Free_class_invariant_axiom_for_de_wiesler_Storage" (formula "15"))
                                  (builtin "One Step Simplification" (formula "15"))
                                 (rule "andLeft" (formula "15"))
                                 (rule "andLeft" (formula "16"))
                                 (rule "andLeft" (formula "15"))
                                 (rule "andLeft" (formula "17"))
                                 (rule "andLeft" (formula "15"))
                                 (rule "andLeft" (formula "18"))
                                 (rule "andLeft" (formula "15"))
                                 (rule "andLeft" (formula "19"))
                                 (rule "andLeft" (formula "15"))
                                 (rule "andLeft" (formula "20"))
                                 (rule "andLeft" (formula "15"))
                                 (rule "andLeft" (formula "21"))
                                 (rule "andLeft" (formula "15"))
                                 (rule "andLeft" (formula "22"))
                                 (rule "andLeft" (formula "15"))
                                 (rule "andLeft" (formula "23"))
                                 (rule "andLeft" (formula "15"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "translateJavaMulInt" (formula "18") (term "1"))
                                 (rule "mul_literals" (formula "18") (term "1"))
                                 (rule "translateJavaMulInt" (formula "17") (term "1"))
                                 (rule "mul_literals" (formula "17") (term "1"))
                                 (rule "disjointDefinition" (formula "51"))
                                  (builtin "One Step Simplification" (formula "51"))
                                 (rule "notLeft" (formula "51"))
                                 (rule "disjointDefinition" (formula "50"))
                                  (builtin "One Step Simplification" (formula "50"))
                                 (rule "notLeft" (formula "50"))
                                 (rule "disjointDefinition" (formula "49"))
                                  (builtin "One Step Simplification" (formula "49"))
                                 (rule "notLeft" (formula "49"))
                                 (rule "eqSymm" (formula "75"))
                                 (rule "disjointDefinition" (formula "48"))
                                  (builtin "One Step Simplification" (formula "48"))
                                 (rule "notLeft" (formula "48"))
                                 (rule "eqSymm" (formula "74"))
                                 (rule "disjointDefinition" (formula "47"))
                                  (builtin "One Step Simplification" (formula "47"))
                                 (rule "notLeft" (formula "47"))
                                 (rule "eqSymm" (formula "73"))
                                 (rule "disjointDefinition" (formula "46"))
                                  (builtin "One Step Simplification" (formula "46"))
                                 (rule "notLeft" (formula "46"))
                                 (rule "eqSymm" (formula "72"))
                                 (rule "disjointDefinition" (formula "45"))
                                  (builtin "One Step Simplification" (formula "45"))
                                 (rule "notLeft" (formula "45"))
                                 (rule "eqSymm" (formula "71"))
                                 (rule "disjointDefinition" (formula "44"))
                                  (builtin "One Step Simplification" (formula "44"))
                                 (rule "notLeft" (formula "44"))
                                 (rule "eqSymm" (formula "70"))
                                 (rule "disjointDefinition" (formula "43"))
                                  (builtin "One Step Simplification" (formula "43"))
                                 (rule "notLeft" (formula "43"))
                                 (rule "eqSymm" (formula "69"))
                                 (rule "disjointDefinition" (formula "42"))
                                  (builtin "One Step Simplification" (formula "42"))
                                 (rule "notLeft" (formula "42"))
                                 (rule "eqSymm" (formula "68"))
                                 (rule "disjointDefinition" (formula "41"))
                                  (builtin "One Step Simplification" (formula "41"))
                                 (rule "notLeft" (formula "41"))
                                 (rule "eqSymm" (formula "67"))
                                 (rule "disjointDefinition" (formula "40"))
                                  (builtin "One Step Simplification" (formula "40"))
                                 (rule "notLeft" (formula "40"))
                                 (rule "eqSymm" (formula "66"))
                                 (rule "disjointDefinition" (formula "39"))
                                  (builtin "One Step Simplification" (formula "39"))
                                 (rule "notLeft" (formula "39"))
                                 (rule "eqSymm" (formula "65"))
                                 (rule "disjointDefinition" (formula "38"))
                                  (builtin "One Step Simplification" (formula "38"))
                                 (rule "notLeft" (formula "38"))
                                 (rule "eqSymm" (formula "64"))
                                 (rule "disjointDefinition" (formula "37"))
                                  (builtin "One Step Simplification" (formula "37"))
                                 (rule "notLeft" (formula "37"))
                                 (rule "eqSymm" (formula "63"))
                                 (rule "disjointDefinition" (formula "36"))
                                  (builtin "One Step Simplification" (formula "36"))
                                 (rule "notLeft" (formula "36"))
                                 (rule "disjointDefinition" (formula "35"))
                                  (builtin "One Step Simplification" (formula "35"))
                                 (rule "notLeft" (formula "35"))
                                 (rule "eqSymm" (formula "61"))
                                 (rule "disjointDefinition" (formula "34"))
                                  (builtin "One Step Simplification" (formula "34"))
                                 (rule "notLeft" (formula "34"))
                                 (rule "eqSymm" (formula "60"))
                                 (rule "disjointDefinition" (formula "33"))
                                  (builtin "One Step Simplification" (formula "33"))
                                 (rule "notLeft" (formula "33"))
                                 (rule "disjointDefinition" (formula "32"))
                                  (builtin "One Step Simplification" (formula "32"))
                                 (rule "notLeft" (formula "32"))
                                 (rule "disjointDefinition" (formula "31"))
                                  (builtin "One Step Simplification" (formula "31"))
                                 (rule "notLeft" (formula "31"))
                                 (rule "disjointDefinition" (formula "30"))
                                  (builtin "One Step Simplification" (formula "30"))
                                 (rule "notLeft" (formula "30"))
                                 (rule "disjointDefinition" (formula "29"))
                                  (builtin "One Step Simplification" (formula "29"))
                                 (rule "notLeft" (formula "29"))
                                 (rule "disjointDefinition" (formula "28"))
                                  (builtin "One Step Simplification" (formula "28"))
                                 (rule "notLeft" (formula "28"))
                                 (rule "disjointDefinition" (formula "27"))
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "notLeft" (formula "27"))
                                 (rule "disjointDefinition" (formula "26"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "notLeft" (formula "26"))
                                 (rule "disjointDefinition" (formula "24"))
                                  (builtin "One Step Simplification" (formula "24"))
                                 (rule "notLeft" (formula "24"))
                                 (rule "disjointDefinition" (formula "24"))
                                  (builtin "One Step Simplification" (formula "24"))
                                 (rule "notLeft" (formula "24"))
                                 (rule "applyEq" (formula "24") (term "1,0") (ifseqformula "23"))
                                 (rule "applyEq" (formula "34") (term "1,0") (ifseqformula "23"))
                                 (rule "applyEq" (formula "37") (term "1,0,1,0") (ifseqformula "23"))
                                 (rule "applyEq" (formula "35") (term "1,0") (ifseqformula "23"))
                                 (rule "distributeIntersection" (formula "24") (term "0"))
                                 (rule "distributeIntersection" (formula "34") (term "0"))
                                 (rule "distributeIntersection" (formula "35") (term "0"))
                                 (rule "distributeIntersection" (formula "24") (term "0,0"))
                                 (rule "distributeIntersection" (formula "24") (term "1,0"))
                                 (rule "distributeIntersection" (formula "34") (term "0,0"))
                                 (rule "distributeIntersection" (formula "34") (term "1,0"))
                                 (rule "distributeIntersection" (formula "35") (term "1,0"))
                                 (rule "distributeIntersection" (formula "35") (term "0,0"))
                                 (rule "distributeIntersection" (formula "24") (term "0,0,0"))
                                 (rule "distributeIntersection" (formula "24") (term "1,0,0"))
                                 (rule "distributeIntersection" (formula "24") (term "0,1,0"))
                                 (rule "distributeIntersection" (formula "24") (term "1,1,0"))
                                 (rule "distributeIntersection" (formula "34") (term "1,0,0"))
                                 (rule "distributeIntersection" (formula "34") (term "0,0,0"))
                                 (rule "distributeIntersection" (formula "34") (term "1,1,0"))
                                 (rule "distributeIntersection" (formula "34") (term "0,1,0"))
                                 (rule "distributeIntersection" (formula "35") (term "1,1,0"))
                                 (rule "distributeIntersection" (formula "35") (term "0,1,0"))
                                 (rule "distributeIntersection" (formula "35") (term "0,0,0"))
                                 (rule "distributeIntersection" (formula "35") (term "1,0,0"))
                                 (rule "unionEqualsEmpty" (formula "24"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "unionEqualsEmpty" (formula "35"))
                                 (rule "andLeft" (formula "35"))
                                 (rule "unionEqualsEmpty" (formula "37"))
                                 (rule "andLeft" (formula "37"))
                                 (rule "unionEqualsEmpty" (formula "24"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "unionEqualsEmpty" (formula "26"))
                                 (rule "andLeft" (formula "26"))
                                 (rule "unionEqualsEmpty" (formula "38"))
                                 (rule "andLeft" (formula "38"))
                                 (rule "unionEqualsEmpty" (formula "37"))
                                 (rule "andLeft" (formula "37"))
                                 (rule "unionEqualsEmpty" (formula "42"))
                                 (rule "andLeft" (formula "42"))
                                 (rule "unionEqualsEmpty" (formula "41"))
                                 (rule "andLeft" (formula "41"))
                                 (rule "unionEqualsEmpty" (formula "25"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "andLeft" (formula "25"))
                                 (rule "notLeft" (formula "26"))
                                 (rule "notLeft" (formula "25"))
                                 (rule "eqSymm" (formula "59"))
                                 (rule "eqSymm" (formula "58"))
                                 (rule "unionEqualsEmpty" (formula "24"))
                                  (builtin "One Step Simplification" (formula "24"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "notLeft" (formula "25"))
                                 (rule "notLeft" (formula "24"))
                                 (rule "eqSymm" (formula "58"))
                                 (rule "eqSymm" (formula "57"))
                                 (rule "unionEqualsEmpty" (formula "24"))
                                  (builtin "One Step Simplification" (formula "24"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "notLeft" (formula "25"))
                                 (rule "notLeft" (formula "24"))
                                 (rule "eqSymm" (formula "57"))
                                 (rule "eqSymm" (formula "56"))
                                 (rule "unionEqualsEmpty" (formula "24"))
                                  (builtin "One Step Simplification" (formula "24"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "notLeft" (formula "24"))
                                 (rule "notLeft" (formula "24"))
                                 (rule "eqSymm" (formula "56"))
                                 (rule "eqSymm" (formula "55"))
                                 (rule "unionEqualsEmpty" (formula "36"))
                                  (builtin "One Step Simplification" (formula "36"))
                                 (rule "andLeft" (formula "36"))
                                 (rule "notLeft" (formula "37"))
                                 (rule "notLeft" (formula "36"))
                                 (rule "eqSymm" (formula "55"))
                                 (rule "eqSymm" (formula "54"))
                                 (rule "unionEqualsEmpty" (formula "35"))
                                  (builtin "One Step Simplification" (formula "35"))
                                 (rule "andLeft" (formula "35"))
                                 (rule "notLeft" (formula "35"))
                                 (rule "notLeft" (formula "35"))
                                 (rule "eqSymm" (formula "54"))
                                 (rule "eqSymm" (formula "53"))
                                 (rule "unionEqualsEmpty" (formula "33"))
                                  (builtin "One Step Simplification" (formula "33"))
                                 (rule "andLeft" (formula "33"))
                                 (rule "notLeft" (formula "34"))
                                 (rule "notLeft" (formula "33"))
                                 (rule "eqSymm" (formula "53"))
                                 (rule "eqSymm" (formula "52"))
                                 (rule "unionEqualsEmpty" (formula "33"))
                                  (builtin "One Step Simplification" (formula "33"))
                                 (rule "andLeft" (formula "33"))
                                 (rule "notLeft" (formula "34"))
                                 (rule "notLeft" (formula "33"))
                                 (rule "eqSymm" (formula "52"))
                                 (rule "eqSymm" (formula "51"))
                                 (rule "unionEqualsEmpty" (formula "36"))
                                  (builtin "One Step Simplification" (formula "36"))
                                 (rule "andLeft" (formula "36"))
                                 (rule "notLeft" (formula "36"))
                                 (rule "notLeft" (formula "36"))
                                 (rule "eqSymm" (formula "51"))
                                 (rule "eqSymm" (formula "50"))
                                 (rule "sortsDisjointModuloNull" (formula "51"))
                                 (rule "replace_known_right" (formula "51") (term "1") (ifseqformula "108"))
                                  (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "102")))
                                 (rule "false_right" (formula "51"))
                                 (rule "sortsDisjointModuloNull" (formula "50"))
                                 (rule "replace_known_right" (formula "50") (term "0") (ifseqformula "102"))
                                  (builtin "One Step Simplification" (formula "50") (ifInst ""  (formula "107")))
                                 (rule "false_right" (formula "50"))
                                 (rule "unionEqualsEmpty" (formula "35"))
                                  (builtin "One Step Simplification" (formula "35"))
                                 (rule "andLeft" (formula "35"))
                                 (rule "notLeft" (formula "35"))
                                 (rule "notLeft" (formula "35"))
                                 (rule "eqSymm" (formula "50"))
                                 (rule "eqSymm" (formula "49"))
                                 (rule "sortsDisjointModuloNull" (formula "50"))
                                 (rule "replace_known_right" (formula "50") (term "0") (ifseqformula "99"))
                                  (builtin "One Step Simplification" (formula "50") (ifInst ""  (formula "107")))
                                 (rule "false_right" (formula "50"))
                                 (rule "sortsDisjointModuloNull" (formula "49"))
                                 (rule "replace_known_right" (formula "49") (term "0") (ifseqformula "99"))
                                  (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "106")))
                                 (rule "false_right" (formula "49"))
                                 (rule "unionEqualsEmpty" (formula "33"))
                                  (builtin "One Step Simplification" (formula "33"))
                                 (rule "andLeft" (formula "33"))
                                 (rule "notLeft" (formula "33"))
                                 (rule "notLeft" (formula "33"))
                                 (rule "eqSymm" (formula "49"))
                                 (rule "eqSymm" (formula "48"))
                                 (rule "sortsDisjointModuloNull" (formula "49"))
                                 (rule "replace_known_right" (formula "49") (term "1") (ifseqformula "106"))
                                  (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "95")))
                                 (rule "false_right" (formula "49"))
                                 (rule "sortsDisjointModuloNull" (formula "48"))
                                 (rule "replace_known_right" (formula "48") (term "0") (ifseqformula "93"))
                                  (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "105")))
                                 (rule "false_right" (formula "48"))
                                 (rule "unionEqualsEmpty" (formula "33"))
                                  (builtin "One Step Simplification" (formula "33"))
                                 (rule "andLeft" (formula "33"))
                                 (rule "notLeft" (formula "33"))
                                 (rule "notLeft" (formula "33"))
                                 (rule "eqSymm" (formula "48"))
                                 (rule "eqSymm" (formula "47"))
                                 (rule "sortsDisjointModuloNull" (formula "48"))
                                 (rule "replace_known_right" (formula "48") (term "0") (ifseqformula "95"))
                                  (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "105")))
                                 (rule "false_right" (formula "48"))
                                 (rule "sortsDisjointModuloNull" (formula "47"))
                                 (rule "replace_known_right" (formula "47") (term "1") (ifseqformula "104"))
                                  (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "95")))
                                 (rule "false_right" (formula "47"))
                                 (rule "commuteUnion_2" (formula "23") (term "0,1"))
                                 (rule "commuteUnion" (formula "23") (term "1,1,1"))
                                 (rule "commuteUnion" (formula "34") (term "1,1,1,0,1,0"))
                                 (rule "commuteUnion_2" (formula "34") (term "0,1,0,1,0"))
                                 (rule "commuteUnion" (formula "23") (term "0,0,1"))
                                 (rule "commuteUnion" (formula "34") (term "0,0,1,0,1,0"))
                                 (rule "commuteUnion_2" (formula "23") (term "0,1"))
                                 (rule "commuteUnion_2" (formula "34") (term "0,1,0,1,0"))
                                 (rule "commuteUnion_2" (formula "23") (term "1"))
                                 (rule "commuteUnion_2" (formula "34") (term "1,0,1,0"))
                                 (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "6"))
                                 (rule "andLeft" (formula "6"))
                                 (rule "notLeft" (formula "7"))
                                 (rule "andLeft" (formula "6"))
                                 (rule "notLeft" (formula "7"))
                                 (rule "andLeft" (formula "6"))
                                 (rule "notLeft" (formula "7"))
                                 (rule "andLeft" (formula "6"))
                                 (rule "notLeft" (formula "7"))
                                 (rule "andLeft" (formula "6"))
                                 (rule "notLeft" (formula "7"))
                                 (rule "andLeft" (formula "6"))
                                 (rule "andLeft" (formula "6"))
                                 (rule "notLeft" (formula "8"))
                                 (rule "notLeft" (formula "7"))
                                 (rule "notLeft" (formula "6"))
                                 (rule "Free_class_invariant_axiom_for_de_wiesler_Storage" (formula "44"))
                                  (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "14")) (ifInst ""  (formula "15")) (ifInst ""  (formula "18")) (ifInst ""  (formula "19")) (ifInst ""  (formula "20")) (ifInst ""  (formula "21")))
                                 (rule "andLeft" (formula "44"))
                                 (rule "andLeft" (formula "45"))
                                 (rule "andLeft" (formula "44"))
                                 (rule "andLeft" (formula "46"))
                                 (rule "andLeft" (formula "44"))
                                 (rule "andLeft" (formula "47"))
                                 (rule "andLeft" (formula "47"))
                                 (rule "andLeft" (formula "47"))
                                 (rule "andLeft" (formula "47"))
                                 (rule "andLeft" (formula "47"))
                                 (rule "andLeft" (formula "47"))
                                 (rule "andLeft" (formula "47"))
                                 (rule "andLeft" (formula "47"))
                                 (rule "andLeft" (formula "47"))
                                 (rule "andLeft" (formula "47"))
                                 (rule "andLeft" (formula "47"))
                                 (rule "andLeft" (formula "47"))
                                 (rule "andLeft" (formula "47"))
                                 (rule "andLeft" (formula "47"))
                                 (rule "andLeft" (formula "47"))
                                 (rule "andLeft" (formula "47"))
                                 (rule "andLeft" (formula "47"))
                                 (rule "andLeft" (formula "47"))
                                 (rule "andLeft" (formula "47"))
                                 (rule "andLeft" (formula "47"))
                                 (rule "andLeft" (formula "47"))
                                 (rule "andLeft" (formula "47"))
                                 (rule "andLeft" (formula "47"))
                                 (rule "andLeft" (formula "47"))
                                 (rule "andLeft" (formula "47"))
                                 (rule "translateJavaMulInt" (formula "44") (term "1"))
                                 (rule "mul_literals" (formula "44") (term "1"))
                                 (rule "translateJavaMulInt" (formula "44") (term "1"))
                                 (rule "mul_literals" (formula "44") (term "1"))
                                 (rule "disjointDefinition" (formula "72"))
                                  (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "117")))
                                 (rule "true_left" (formula "72"))
                                 (rule "disjointDefinition" (formula "71"))
                                  (builtin "One Step Simplification" (formula "71") (ifInst ""  (formula "115")))
                                 (rule "true_left" (formula "71"))
                                 (rule "disjointDefinition" (formula "70"))
                                  (builtin "One Step Simplification" (formula "70"))
                                 (rule "notLeft" (formula "70"))
                                 (rule "eqSymm" (formula "71"))
                                 (rule "disjointDefinition" (formula "69"))
                                  (builtin "One Step Simplification" (formula "69"))
                                 (rule "notLeft" (formula "69"))
                                 (rule "eqSymm" (formula "70"))
                                 (rule "disjointDefinition" (formula "68"))
                                  (builtin "One Step Simplification" (formula "68"))
                                 (rule "notLeft" (formula "68"))
                                 (rule "eqSymm" (formula "69"))
                                 (rule "disjointDefinition" (formula "67"))
                                  (builtin "One Step Simplification" (formula "67"))
                                 (rule "notLeft" (formula "67"))
                                 (rule "eqSymm" (formula "68"))
                                 (rule "disjointDefinition" (formula "66"))
                                  (builtin "One Step Simplification" (formula "66"))
                                 (rule "notLeft" (formula "66"))
                                 (rule "eqSymm" (formula "67"))
                                 (rule "disjointDefinition" (formula "65"))
                                  (builtin "One Step Simplification" (formula "65"))
                                 (rule "notLeft" (formula "65"))
                                 (rule "eqSymm" (formula "66"))
                                 (rule "disjointDefinition" (formula "64"))
                                  (builtin "One Step Simplification" (formula "64"))
                                 (rule "notLeft" (formula "64"))
                                 (rule "eqSymm" (formula "65"))
                                 (rule "disjointDefinition" (formula "63"))
                                  (builtin "One Step Simplification" (formula "63"))
                                 (rule "notLeft" (formula "63"))
                                 (rule "eqSymm" (formula "64"))
                                 (rule "disjointDefinition" (formula "62"))
                                  (builtin "One Step Simplification" (formula "62"))
                                 (rule "notLeft" (formula "62"))
                                 (rule "eqSymm" (formula "63"))
                                 (rule "disjointDefinition" (formula "61"))
                                  (builtin "One Step Simplification" (formula "61"))
                                 (rule "notLeft" (formula "61"))
                                 (rule "eqSymm" (formula "62"))
                                 (rule "disjointDefinition" (formula "60"))
                                  (builtin "One Step Simplification" (formula "60"))
                                 (rule "notLeft" (formula "60"))
                                 (rule "eqSymm" (formula "61"))
                                 (rule "disjointDefinition" (formula "59"))
                                  (builtin "One Step Simplification" (formula "59"))
                                 (rule "notLeft" (formula "59"))
                                 (rule "eqSymm" (formula "60"))
                                 (rule "disjointDefinition" (formula "58"))
                                  (builtin "One Step Simplification" (formula "58"))
                                 (rule "notLeft" (formula "58"))
                                 (rule "eqSymm" (formula "59"))
                                 (rule "disjointDefinition" (formula "57"))
                                  (builtin "One Step Simplification" (formula "57") (ifInst ""  (formula "87")))
                                 (rule "true_left" (formula "57"))
                                 (rule "disjointDefinition" (formula "56"))
                                  (builtin "One Step Simplification" (formula "56"))
                                 (rule "notLeft" (formula "56"))
                                 (rule "eqSymm" (formula "57"))
                                 (rule "disjointDefinition" (formula "55"))
                                  (builtin "One Step Simplification" (formula "55"))
                                 (rule "notLeft" (formula "55"))
                                 (rule "eqSymm" (formula "56"))
                                 (rule "disjointDefinition" (formula "54"))
                                  (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "81")))
                                 (rule "true_left" (formula "54"))
                                 (rule "disjointDefinition" (formula "53"))
                                  (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "79")))
                                 (rule "true_left" (formula "53"))
                                 (rule "disjointDefinition" (formula "52"))
                                  (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "77")))
                                 (rule "true_left" (formula "52"))
                                 (rule "disjointDefinition" (formula "51"))
                                  (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "75")))
                                 (rule "true_left" (formula "51"))
                                 (rule "disjointDefinition" (formula "50"))
                                  (builtin "One Step Simplification" (formula "50") (ifInst ""  (formula "73")))
                                 (rule "true_left" (formula "50"))
                                 (rule "disjointDefinition" (formula "49"))
                                  (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "71")))
                                 (rule "true_left" (formula "49"))
                                 (rule "disjointDefinition" (formula "48"))
                                  (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "69")))
                                 (rule "true_left" (formula "48"))
                                 (rule "disjointDefinition" (formula "47"))
                                  (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "67")))
                                 (rule "true_left" (formula "47"))
                                 (rule "disjointDefinition" (formula "46"))
                                  (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "64")))
                                 (rule "true_left" (formula "46"))
                                 (rule "disjointDefinition" (formula "45"))
                                  (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "64")))
                                 (rule "true_left" (formula "45"))
                                 (rule "applyEq" (formula "44") (term "0") (ifseqformula "22"))
                                 (rule "eqSymm" (formula "44"))
                                 (rule "Definition_axiom_for_allBucketsPartitioned_in_de_wiesler_Sorter" (formula "37") (term "0") (inst "b=b"))
                                  (builtin "One Step Simplification" (formula "37"))
                                 (rule "expand_inInt" (formula "37") (term "1,0,0"))
                                 (rule "replace_int_MIN" (formula "37") (term "0,1,1,0,0"))
                                 (rule "replace_int_MAX" (formula "37") (term "1,0,1,0,0"))
                                 (rule "translateJavaAddInt" (formula "37") (term "0,2,5,0,1,0"))
                                 (rule "polySimp_addComm0" (formula "37") (term "0,2,5,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "37") (term "1,0,0,0"))
                                 (rule "polySimp_mulAssoc" (formula "37") (term "1,0,0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "37") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "37") (term "1,0,0,1,0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "37") (term "0,0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "37") (term "1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "37") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "37") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "37") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "37") (term "1,1,1,0,0,0"))
                                 (rule "Definition_axiom_for_isValidBucketStarts_in_de_wiesler_Functions" (formula "36") (term "0"))
                                  (builtin "One Step Simplification" (formula "36"))
                                 (rule "andLeft" (formula "36"))
                                 (rule "andLeft" (formula "36"))
                                 (rule "andLeft" (formula "36"))
                                 (rule "translateJavaAddInt" (formula "38") (term "3,0"))
                                 (rule "translateJavaAddInt" (formula "37") (term "0"))
                                 (rule "polySimp_addComm0" (formula "38") (term "3,0"))
                                 (rule "polySimp_addComm0" (formula "37") (term "0"))
                                 (rule "inEqSimp_commuteLeq" (formula "36"))
                                 (rule "inEqSimp_commuteLeq" (formula "37"))
                                 (rule "applyEq" (formula "37") (term "0") (ifseqformula "26"))
                                 (rule "inEqSimp_homoInEq1" (formula "37"))
                                 (rule "mul_literals" (formula "37") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "37") (term "0"))
                                 (rule "add_literals" (formula "37") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "37"))
                                 (rule "mul_literals" (formula "37") (term "1"))
                                 (rule "elimGcdLeq_antec" (formula "37") (inst "elimGcdRightDiv=Z(6(5(2(#))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                                 (rule "polySimp_mulLiterals" (formula "37") (term "1,0,0,0,0,1,0"))
                                 (rule "leq_literals" (formula "37") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "37"))
                                 (rule "polySimp_mulLiterals" (formula "37") (term "1,0,0"))
                                 (rule "mul_literals" (formula "37") (term "1,0,0,0,0,0"))
                                 (rule "neg_literal" (formula "37") (term "0,0,0,0,0,0"))
                                 (rule "polySimp_addLiterals" (formula "37") (term "0,0,0,0"))
                                 (rule "add_zero_right" (formula "37") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "37") (term "0,0"))
                                 (rule "add_literals" (formula "37") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "37") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "37") (term "0,0"))
                                 (rule "qeq_literals" (formula "37") (term "0"))
                                  (builtin "One Step Simplification" (formula "37"))
                                 (rule "inEqSimp_subsumption0" (formula "107") (term "0") (ifseqformula "37"))
                                 (rule "leq_literals" (formula "107") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "107"))
                                 (rule "inEqSimp_geqRight" (formula "107"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                 (rule "mul_literals" (formula "1") (term "1"))
                                 (rule "inEqSimp_contradInEq3" (formula "37") (ifseqformula "1"))
                                 (rule "mul_literals" (formula "37") (term "0,1,0"))
                                 (rule "greater_literals" (formula "37") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "37"))
                                 (rule "qeq_literals" (formula "37") (term "0"))
                                  (builtin "One Step Simplification" (formula "37"))
                                 (rule "closeFalse" (formula "37"))
                              )
                           )
                        )
                        (branch "Usage"
                            (builtin "One Step Simplification" (formula "45"))
                            (builtin "One Step Simplification" (formula "52"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "45") (term "0,1,1,0") (ifseqformula "32"))
                            (builtin "One Step Simplification" (formula "45"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "45") (term "0,0,0,1,1,0") (ifseqformula "21"))
                           (rule "andLeft" (formula "45"))
                           (rule "andLeft" (formula "46"))
                           (rule "andLeft" (formula "45"))
                           (rule "andLeft" (formula "48"))
                           (rule "andLeft" (formula "45"))
                           (rule "translateJavaSubInt" (formula "57") (term "2,0,1,0,1,0"))
                           (rule "translateJavaSubInt" (formula "48") (term "2,0,1,0,2,0"))
                           (rule "translateJavaSubInt" (formula "49") (term "2,0,1,0,0"))
                           (rule "translateJavaSubInt" (formula "50") (term "2,0,1,0,0"))
                           (rule "replace_known_left" (formula "47") (term "0") (ifseqformula "45"))
                            (builtin "One Step Simplification" (formula "47"))
                           (rule "true_left" (formula "47"))
                           (rule "polySimp_elimSub" (formula "56") (term "2,0,1,0,1,0"))
                           (rule "mul_literals" (formula "56") (term "1,2,0,1,0,1,0"))
                           (rule "polySimp_elimSub" (formula "47") (term "2,0,1,0,2,0"))
                           (rule "mul_literals" (formula "47") (term "1,2,0,1,0,2,0"))
                           (rule "polySimp_elimSub" (formula "48") (term "2,0,1,0,0"))
                           (rule "mul_literals" (formula "48") (term "1,2,0,1,0,0"))
                           (rule "polySimp_elimSub" (formula "49") (term "2,0,1,0,0"))
                           (rule "mul_literals" (formula "49") (term "1,2,0,1,0,0"))
                           (rule "polySimp_addComm0" (formula "56") (term "2,0,1,0,1,0"))
                           (rule "polySimp_addComm0" (formula "47") (term "2,0,1,0,2,0"))
                           (rule "polySimp_addComm0" (formula "48") (term "2,0,1,0,0"))
                           (rule "polySimp_addComm0" (formula "49") (term "2,0,1,0,0"))
                           (rule "narrowSelectArrayType" (formula "47") (term "2,1") (ifseqformula "1") (ifseqformula "55"))
                           (rule "commuteUnion" (formula "56") (term "1,0,1,0"))
                           (rule "commuteUnion" (formula "47") (term "1,0,2,0"))
                           (rule "commuteUnion" (formula "48") (term "1,0,0"))
                           (rule "commuteUnion" (formula "49") (term "1,0,0"))
                           (rule "ifUnfold" (formula "56") (term "1") (inst "#boolv=x"))
                           (rule "variableDeclaration" (formula "56") (term "1") (newnames "x_2"))
                           (rule "inequality_comparison_simple" (formula "56") (term "1"))
                            (builtin "One Step Simplification" (formula "56"))
                           (rule "replace_known_left" (formula "56") (term "0,0,1,0") (ifseqformula "45"))
                            (builtin "One Step Simplification" (formula "56"))
                           (rule "ifSplit" (formula "56"))
                           (branch "if x_2 true"
                               (builtin "One Step Simplification" (formula "57"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "if x_2 false"
                               (builtin "One Step Simplification" (formula "57"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "blockEmpty" (formula "56") (term "1"))
                               (builtin "Block Contract (Internal)" (formula "56") (newnames "anonOut_heap_1,exc_289,heap_Before_BLOCK_1,savedHeap_Before_BLOCK_1,o,f"))
                              (branch "Validity"
                                  (builtin "One Step Simplification" (formula "57"))
                                  (builtin "One Step Simplification" (formula "50"))
                                 (rule "andLeft" (formula "50"))
                                 (rule "translateJavaSubInt" (formula "50") (term "0,0"))
                                 (rule "polySimp_elimSub" (formula "50") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "50") (term "0,0"))
                                 (rule "narrowSelectArrayType" (formula "47") (term "2,0") (ifseqformula "50") (ifseqformula "56"))
                                 (rule "variableDeclarationAssign" (formula "57") (term "1"))
                                 (rule "variableDeclaration" (formula "57") (term "1") (newnames "exc_289_1"))
                                 (rule "assignment" (formula "57") (term "1"))
                                  (builtin "One Step Simplification" (formula "57"))
                                 (rule "emptyStatement" (formula "57") (term "1"))
                                  (builtin "One Step Simplification" (formula "57"))
                                 (rule "emptyStatement" (formula "57") (term "1"))
                                 (rule "tryEmpty" (formula "57") (term "1"))
                                 (rule "blockEmptyLabel" (formula "57") (term "1"))
                                 (rule "blockEmpty" (formula "57") (term "1"))
                                 (rule "methodCallEmpty" (formula "57") (term "1"))
                                  (builtin "One Step Simplification" (formula "57"))
                                 (rule "emptyModality" (formula "57") (term "1"))
                                  (builtin "One Step Simplification" (formula "57"))
                                 (rule "closeTrue" (formula "57"))
                              )
                              (branch "Precondition"
                                 (rule "andRight" (formula "56"))
                                 (branch
                                     (builtin "One Step Simplification" (formula "56"))
                                    (rule "translateJavaSubInt" (formula "56") (term "0,0"))
                                    (rule "polySimp_elimSub" (formula "56") (term "0,0"))
                                    (rule "polySimp_addComm0" (formula "56") (term "0,0"))
                                    (rule "close" (formula "56") (ifseqformula "8"))
                                 )
                                 (branch
                                     (builtin "One Step Simplification" (formula "56"))
                                    (rule "wellFormedAnon" (formula "56"))
                                    (rule "wellFormedAnonEQ" (formula "56") (term "0") (ifseqformula "32"))
                                    (rule "wellFormedAnon" (formula "56") (term "0,0"))
                                    (rule "wellFormedAnonEQ" (formula "56") (term "0,0,0") (ifseqformula "21"))
                                    (rule "replace_known_left" (formula "56") (term "1,0,0") (ifseqformula "27"))
                                     (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "1")) (ifInst ""  (formula "20")) (ifInst ""  (formula "31")) (ifInst ""  (formula "46")))
                                    (rule "closeTrue" (formula "56"))
                                 )
                              )
                              (branch "Usage"
                                  (builtin "One Step Simplification" (formula "57"))
                                  (builtin "One Step Simplification" (formula "50"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "50") (term "0,0,1,1,0") (ifseqformula "32"))
                                  (builtin "One Step Simplification" (formula "50"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "50") (term "0,0,0,0,1,1,0") (ifseqformula "21"))
                                 (rule "andLeft" (formula "50"))
                                 (rule "andLeft" (formula "50"))
                                 (rule "andLeft" (formula "50"))
                                 (rule "replace_known_left" (formula "52") (term "0") (ifseqformula "50"))
                                  (builtin "One Step Simplification" (formula "52"))
                                 (rule "true_left" (formula "52"))
                                 (rule "ifUnfold" (formula "59") (term "1") (inst "#boolv=x"))
                                 (rule "variableDeclaration" (formula "59") (term "1") (newnames "x_3"))
                                 (rule "inequality_comparison_simple" (formula "59") (term "1"))
                                  (builtin "One Step Simplification" (formula "59"))
                                 (rule "replace_known_left" (formula "59") (term "0,0,1,0") (ifseqformula "50"))
                                  (builtin "One Step Simplification" (formula "59"))
                                 (rule "ifSplit" (formula "59"))
                                 (branch "if x_3 true"
                                     (builtin "One Step Simplification" (formula "60"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                                 (branch "if x_3 false"
                                     (builtin "One Step Simplification" (formula "60"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "methodCallEmpty" (formula "59") (term "1"))
                                    (rule "tryEmpty" (formula "59") (term "1"))
                                    (rule "emptyModality" (formula "59") (term "1"))
                                    (rule "andRight" (formula "59"))
                                    (branch
                                        (builtin "One Step Simplification" (formula "59"))
                                       (rule "inEqSimp_gtToGeq" (formula "16"))
                                       (rule "mul_literals" (formula "16") (term "1,0,0"))
                                       (rule "add_literals" (formula "16") (term "0,0"))
                                       (rule "polySimp_addAssoc" (formula "16") (term "0"))
                                       (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,0,0,0"))
                                       (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0,0,0"))
                                       (rule "add_literals" (formula "24") (term "0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "17"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "17") (term "1,0"))
                                       (rule "polySimp_mulAssoc" (formula "17") (term "0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "17") (term "0,1,0"))
                                       (rule "polySimp_elimOne" (formula "17") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "17") (term "0"))
                                       (rule "jmod_axiom" (formula "38") (term "0"))
                                       (rule "polySimp_mulLiterals" (formula "38") (term "1,0"))
                                       (rule "polySimp_sepNegMonomial" (formula "38"))
                                       (rule "polySimp_mulLiterals" (formula "38") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                                       (rule "polySimp_mulComm0" (formula "16") (term "1"))
                                       (rule "polySimp_rightDist" (formula "16") (term "1"))
                                       (rule "mul_literals" (formula "16") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "16") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "16") (term "1,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,0,0"))
                                       (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "17"))
                                       (rule "polySimp_mulLiterals" (formula "17") (term "0"))
                                       (rule "polySimp_elimOne" (formula "17") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "10"))
                                       (rule "leq_literals" (formula "4") (term "0"))
                                        (builtin "One Step Simplification" (formula "4"))
                                       (rule "true_left" (formula "4"))
                                       (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "15"))
                                       (rule "inEqSimp_homoInEq0" (formula "10") (term "0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0"))
                                       (rule "add_literals" (formula "10") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "10") (term "1,0,0"))
                                       (rule "add_literals" (formula "10") (term "0,0"))
                                       (rule "qeq_literals" (formula "10") (term "0"))
                                        (builtin "One Step Simplification" (formula "10"))
                                       (rule "true_left" (formula "10"))
                                       (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "10"))
                                       (rule "leq_literals" (formula "12") (term "0"))
                                        (builtin "One Step Simplification" (formula "12"))
                                       (rule "true_left" (formula "12"))
                                       (rule "newSym_eq" (formula "35") (inst "newSymDef=mul(int::final(result_242,
               de.wiesler.PartitionResult::$num_buckets),
    Z(0(#)))") (inst "l=l_0"))
                                       (rule "times_zero_1" (formula "35") (term "1,1"))
                                       (rule "add_zero_right" (formula "35") (term "1"))
                                       (rule "applyEq" (formula "36") (term "0,0") (ifseqformula "35"))
                                       (rule "eqSymm" (formula "36"))
                                       (rule "applyEq" (formula "34") (term "7,0") (ifseqformula "36"))
                                       (rule "applyEq" (formula "34") (term "5,0") (ifseqformula "36"))
                                       (rule "applyEq" (formula "38") (term "1,7,0,1") (ifseqformula "36"))
                                       (rule "applyEq" (formula "39") (term "2,0") (ifseqformula "36"))
                                       (rule "applyEq" (formula "38") (term "5,0,1") (ifseqformula "36"))
                                       (rule "applyEq" (formula "33") (term "5,0") (ifseqformula "36"))
                                       (rule "applyEq" (formula "50") (term "5,0") (ifseqformula "36"))
                                       (rule "applyEq" (formula "32") (term "2,0") (ifseqformula "36"))
                                       (rule "applyEq" (formula "37") (term "0,2,0") (ifseqformula "36"))
                                       (rule "applyEq" (formula "35") (term "0,0") (ifseqformula "36"))
                                       (rule "applyEq" (formula "46") (term "7,0") (ifseqformula "36"))
                                       (rule "applyEq" (formula "46") (term "5,0") (ifseqformula "36"))
                                       (rule "applyEq" (formula "47") (term "5,0") (ifseqformula "36"))
                                       (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "4"))
                                       (rule "polySimp_rightDist" (formula "13") (term "0,0"))
                                       (rule "mul_literals" (formula "13") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "13") (term "0"))
                                       (rule "add_literals" (formula "13") (term "0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "13"))
                                       (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                                       (rule "polySimp_elimOne" (formula "13") (term "0"))
                                       (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "13"))
                                       (rule "leq_literals" (formula "3") (term "0"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "true_left" (formula "3"))
                                       (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "10"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "0,0"))
                                       (rule "polySimp_addComm0" (formula "11") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "11"))
                                       (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                                       (rule "polySimp_elimOne" (formula "11") (term "0"))
                                       (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "11"))
                                       (rule "leq_literals" (formula "3") (term "0"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "true_left" (formula "3"))
                                       (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "14"))
                                       (rule "mul_literals" (formula "3") (term "0,0"))
                                       (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                       (rule "add_literals" (formula "3") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                       (rule "mul_literals" (formula "3") (term "1"))
                                       (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "8"))
                                       (rule "leq_literals" (formula "3") (term "0"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "true_left" (formula "3"))
                                       (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "10"))
                                       (rule "polySimp_rightDist" (formula "13") (term "0,0"))
                                       (rule "mul_literals" (formula "13") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "13") (term "0"))
                                       (rule "add_literals" (formula "13") (term "0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "13"))
                                       (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                                       (rule "polySimp_elimOne" (formula "13") (term "0"))
                                       (rule "inEqSimp_subsumption0" (formula "12") (ifseqformula "13"))
                                       (rule "leq_literals" (formula "12") (term "0"))
                                        (builtin "One Step Simplification" (formula "12"))
                                       (rule "true_left" (formula "12"))
                                       (rule "inEqSimp_and_subsumption3" (formula "21") (term "0,0,0"))
                                       (rule "leq_literals" (formula "21") (term "0,1,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "21"))
                                       (rule "nnf_imp2or" (formula "21") (term "0"))
                                       (rule "nnf_notAnd" (formula "21") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                                       (rule "mul_literals" (formula "21") (term "1,0,0,1,0,0"))
                                       (rule "add_literals" (formula "21") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                                       (rule "mul_literals" (formula "21") (term "1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "21") (term "0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "21") (term "1,0,0,0"))
                                       (rule "times_zero_1" (formula "21") (term "1,0,0,1,0,0,0"))
                                       (rule "add_literals" (formula "21") (term "0,0,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "21") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "21") (term "0,0,0,0"))
                                       (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0,0"))
                                       (rule "add_literals" (formula "21") (term "0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "0,0,0,0"))
                                       (rule "mul_literals" (formula "21") (term "1,0,0,0,0"))
                                       (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "6"))
                                       (rule "andLeft" (formula "6"))
                                       (rule "andLeft" (formula "6"))
                                       (rule "notLeft" (formula "8"))
                                       (rule "andLeft" (formula "6"))
                                       (rule "notLeft" (formula "8"))
                                       (rule "andLeft" (formula "6"))
                                       (rule "notLeft" (formula "8"))
                                       (rule "andLeft" (formula "6"))
                                       (rule "notLeft" (formula "8"))
                                       (rule "notLeft" (formula "7"))
                                       (rule "andLeft" (formula "6"))
                                       (rule "notLeft" (formula "7"))
                                       (rule "andLeft" (formula "6"))
                                       (rule "notLeft" (formula "6"))
                                       (rule "notLeft" (formula "6"))
                                       (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "40"))
                                       (rule "andLeft" (formula "40"))
                                       (rule "andLeft" (formula "40"))
                                       (rule "notLeft" (formula "42"))
                                       (rule "notLeft" (formula "41"))
                                       (rule "andLeft" (formula "40"))
                                       (rule "notLeft" (formula "41"))
                                       (rule "andLeft" (formula "40"))
                                       (rule "notLeft" (formula "41"))
                                       (rule "andLeft" (formula "40"))
                                       (rule "andLeft" (formula "40"))
                                       (rule "notLeft" (formula "42"))
                                       (rule "notLeft" (formula "41"))
                                       (rule "andLeft" (formula "40"))
                                       (rule "notLeft" (formula "40"))
                                       (rule "notLeft" (formula "40"))
                                       (rule "Free_class_invariant_axiom_for_de_wiesler_Storage" (formula "39"))
                                        (builtin "One Step Simplification" (formula "39"))
                                       (rule "andLeft" (formula "39"))
                                       (rule "andLeft" (formula "39"))
                                       (rule "andLeft" (formula "41"))
                                       (rule "andLeft" (formula "39"))
                                       (rule "andLeft" (formula "42"))
                                       (rule "andLeft" (formula "39"))
                                       (rule "andLeft" (formula "43"))
                                       (rule "andLeft" (formula "39"))
                                       (rule "andLeft" (formula "44"))
                                       (rule "andLeft" (formula "39"))
                                       (rule "andLeft" (formula "45"))
                                       (rule "andLeft" (formula "39"))
                                       (rule "andLeft" (formula "46"))
                                       (rule "andLeft" (formula "39"))
                                       (rule "andLeft" (formula "47"))
                                       (rule "andLeft" (formula "39"))
                                       (rule "andLeft" (formula "48"))
                                       (rule "andLeft" (formula "48"))
                                       (rule "andLeft" (formula "48"))
                                       (rule "andLeft" (formula "48"))
                                       (rule "andLeft" (formula "48"))
                                       (rule "andLeft" (formula "48"))
                                       (rule "andLeft" (formula "48"))
                                       (rule "andLeft" (formula "48"))
                                       (rule "andLeft" (formula "48"))
                                       (rule "andLeft" (formula "48"))
                                       (rule "andLeft" (formula "48"))
                                       (rule "andLeft" (formula "48"))
                                       (rule "andLeft" (formula "48"))
                                       (rule "andLeft" (formula "48"))
                                       (rule "andLeft" (formula "48"))
                                       (rule "andLeft" (formula "48"))
                                       (rule "andLeft" (formula "48"))
                                       (rule "andLeft" (formula "48"))
                                       (rule "andLeft" (formula "48"))
                                       (rule "andLeft" (formula "48"))
                                       (rule "translateJavaMulInt" (formula "42") (term "1"))
                                       (rule "mul_literals" (formula "42") (term "1"))
                                       (rule "translateJavaMulInt" (formula "41") (term "1"))
                                       (rule "mul_literals" (formula "41") (term "1"))
                                       (rule "disjointDefinition" (formula "75"))
                                        (builtin "One Step Simplification" (formula "75"))
                                       (rule "notLeft" (formula "75"))
                                       (rule "disjointDefinition" (formula "74"))
                                        (builtin "One Step Simplification" (formula "74"))
                                       (rule "notLeft" (formula "74"))
                                       (rule "disjointDefinition" (formula "73"))
                                        (builtin "One Step Simplification" (formula "73"))
                                       (rule "notLeft" (formula "73"))
                                       (rule "eqSymm" (formula "82"))
                                       (rule "disjointDefinition" (formula "72"))
                                        (builtin "One Step Simplification" (formula "72"))
                                       (rule "notLeft" (formula "72"))
                                       (rule "eqSymm" (formula "81"))
                                       (rule "disjointDefinition" (formula "71"))
                                        (builtin "One Step Simplification" (formula "71"))
                                       (rule "notLeft" (formula "71"))
                                       (rule "eqSymm" (formula "80"))
                                       (rule "disjointDefinition" (formula "70"))
                                        (builtin "One Step Simplification" (formula "70"))
                                       (rule "notLeft" (formula "70"))
                                       (rule "eqSymm" (formula "79"))
                                       (rule "disjointDefinition" (formula "69"))
                                        (builtin "One Step Simplification" (formula "69"))
                                       (rule "notLeft" (formula "69"))
                                       (rule "eqSymm" (formula "78"))
                                       (rule "disjointDefinition" (formula "68"))
                                        (builtin "One Step Simplification" (formula "68"))
                                       (rule "notLeft" (formula "68"))
                                       (rule "eqSymm" (formula "77"))
                                       (rule "disjointDefinition" (formula "67"))
                                        (builtin "One Step Simplification" (formula "67"))
                                       (rule "notLeft" (formula "67"))
                                       (rule "eqSymm" (formula "76"))
                                       (rule "disjointDefinition" (formula "66"))
                                        (builtin "One Step Simplification" (formula "66"))
                                       (rule "notLeft" (formula "66"))
                                       (rule "eqSymm" (formula "75"))
                                       (rule "disjointDefinition" (formula "65"))
                                        (builtin "One Step Simplification" (formula "65"))
                                       (rule "notLeft" (formula "65"))
                                       (rule "eqSymm" (formula "74"))
                                       (rule "disjointDefinition" (formula "64"))
                                        (builtin "One Step Simplification" (formula "64"))
                                       (rule "notLeft" (formula "64"))
                                       (rule "eqSymm" (formula "73"))
                                       (rule "disjointDefinition" (formula "63"))
                                        (builtin "One Step Simplification" (formula "63"))
                                       (rule "notLeft" (formula "63"))
                                       (rule "eqSymm" (formula "72"))
                                       (rule "disjointDefinition" (formula "62"))
                                        (builtin "One Step Simplification" (formula "62"))
                                       (rule "notLeft" (formula "62"))
                                       (rule "eqSymm" (formula "71"))
                                       (rule "disjointDefinition" (formula "61"))
                                        (builtin "One Step Simplification" (formula "61"))
                                       (rule "notLeft" (formula "61"))
                                       (rule "eqSymm" (formula "70"))
                                       (rule "disjointDefinition" (formula "60"))
                                        (builtin "One Step Simplification" (formula "60"))
                                       (rule "notLeft" (formula "60"))
                                       (rule "disjointDefinition" (formula "59"))
                                        (builtin "One Step Simplification" (formula "59"))
                                       (rule "notLeft" (formula "59"))
                                       (rule "eqSymm" (formula "68"))
                                       (rule "disjointDefinition" (formula "58"))
                                        (builtin "One Step Simplification" (formula "58"))
                                       (rule "notLeft" (formula "58"))
                                       (rule "eqSymm" (formula "67"))
                                       (rule "disjointDefinition" (formula "57"))
                                        (builtin "One Step Simplification" (formula "57"))
                                       (rule "notLeft" (formula "57"))
                                       (rule "disjointDefinition" (formula "56"))
                                        (builtin "One Step Simplification" (formula "56"))
                                       (rule "notLeft" (formula "56"))
                                       (rule "disjointDefinition" (formula "55"))
                                        (builtin "One Step Simplification" (formula "55"))
                                       (rule "notLeft" (formula "55"))
                                       (rule "disjointDefinition" (formula "54"))
                                        (builtin "One Step Simplification" (formula "54"))
                                       (rule "notLeft" (formula "54"))
                                       (rule "disjointDefinition" (formula "53"))
                                        (builtin "One Step Simplification" (formula "53"))
                                       (rule "notLeft" (formula "53"))
                                       (rule "disjointDefinition" (formula "52"))
                                        (builtin "One Step Simplification" (formula "52"))
                                       (rule "notLeft" (formula "52"))
                                       (rule "disjointDefinition" (formula "51"))
                                        (builtin "One Step Simplification" (formula "51"))
                                       (rule "notLeft" (formula "51"))
                                       (rule "disjointDefinition" (formula "50"))
                                        (builtin "One Step Simplification" (formula "50"))
                                       (rule "notLeft" (formula "50"))
                                       (rule "disjointDefinition" (formula "48"))
                                        (builtin "One Step Simplification" (formula "48"))
                                       (rule "notLeft" (formula "48"))
                                       (rule "disjointDefinition" (formula "48"))
                                        (builtin "One Step Simplification" (formula "48"))
                                       (rule "notLeft" (formula "48"))
                                       (rule "applyEq" (formula "52") (term "0,1,0,0") (ifseqformula "47"))
                                       (rule "applyEq" (formula "56") (term "0,1,0,0,0") (ifseqformula "47"))
                                       (rule "applyEq" (formula "53") (term "0,1,0,0") (ifseqformula "47"))
                                       (rule "applyEq" (formula "51") (term "0,1,0,2,0") (ifseqformula "47"))
                                       (rule "applyEq" (formula "99") (term "0,1,0,0") (ifseqformula "47"))
                                       (rule "applyEq" (formula "26") (term "1,0") (ifseqformula "47"))
                                       (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "47"))
                                       (rule "applyEq" (formula "25") (term "1,0") (ifseqformula "47"))
                                       (rule "applyEq" (formula "28") (term "1,0,1,0") (ifseqformula "47"))
                                       (rule "distributeIntersection" (formula "26") (term "0"))
                                       (rule "distributeIntersection" (formula "15") (term "0"))
                                       (rule "distributeIntersection" (formula "25") (term "0"))
                                       (rule "distributeIntersection" (formula "26") (term "0,0"))
                                       (rule "distributeIntersection" (formula "26") (term "1,0"))
                                       (rule "unionEqualsEmpty" (formula "15"))
                                       (rule "andLeft" (formula "15"))
                                       (rule "distributeIntersection" (formula "26") (term "0,0"))
                                       (rule "distributeIntersection" (formula "26") (term "1,0"))
                                       (rule "distributeIntersection" (formula "27") (term "1,0,0"))
                                       (rule "distributeIntersection" (formula "27") (term "0,0,0"))
                                       (rule "distributeIntersection" (formula "27") (term "0,1,0"))
                                       (rule "distributeIntersection" (formula "27") (term "1,1,0"))
                                       (rule "distributeIntersection" (formula "15") (term "0"))
                                       (rule "distributeIntersection" (formula "16") (term "0"))
                                       (rule "distributeIntersection" (formula "26") (term "0,0,0"))
                                       (rule "distributeIntersection" (formula "26") (term "1,0,0"))
                                       (rule "distributeIntersection" (formula "26") (term "1,1,0"))
                                       (rule "distributeIntersection" (formula "26") (term "0,1,0"))
                                       (rule "unionEqualsEmpty" (formula "27"))
                                       (rule "andLeft" (formula "27"))
                                       (rule "distributeIntersection" (formula "15") (term "0,0"))
                                       (rule "distributeIntersection" (formula "15") (term "1,0"))
                                       (rule "distributeIntersection" (formula "16") (term "1,0"))
                                       (rule "distributeIntersection" (formula "16") (term "0,0"))
                                       (rule "unionEqualsEmpty" (formula "26"))
                                       (rule "andLeft" (formula "26"))
                                       (rule "unionEqualsEmpty" (formula "29"))
                                       (rule "andLeft" (formula "29"))
                                       (rule "unionEqualsEmpty" (formula "28"))
                                       (rule "andLeft" (formula "28"))
                                       (rule "unionEqualsEmpty" (formula "15"))
                                       (rule "andLeft" (formula "15"))
                                       (rule "unionEqualsEmpty" (formula "17"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "unionEqualsEmpty" (formula "28"))
                                       (rule "andLeft" (formula "28"))
                                       (rule "unionEqualsEmpty" (formula "30"))
                                       (rule "andLeft" (formula "30"))
                                       (rule "unionEqualsEmpty" (formula "35"))
                                        (builtin "One Step Simplification" (formula "35"))
                                       (rule "andLeft" (formula "35"))
                                       (rule "notLeft" (formula "36"))
                                       (rule "notLeft" (formula "35"))
                                       (rule "eqSymm" (formula "66"))
                                       (rule "eqSymm" (formula "65"))
                                       (rule "sortsDisjointModuloNull" (formula "66"))
                                       (rule "replace_known_right" (formula "66") (term "1") (ifseqformula "107"))
                                        (builtin "One Step Simplification" (formula "66") (ifInst ""  (formula "102")))
                                       (rule "false_right" (formula "66"))
                                       (rule "sortsDisjointModuloNull" (formula "65"))
                                       (rule "replace_known_right" (formula "65") (term "0") (ifseqformula "100"))
                                        (builtin "One Step Simplification" (formula "65") (ifInst ""  (formula "106")))
                                       (rule "false_right" (formula "65"))
                                       (rule "unionEqualsEmpty" (formula "34"))
                                        (builtin "One Step Simplification" (formula "34"))
                                       (rule "andLeft" (formula "34"))
                                       (rule "notLeft" (formula "34"))
                                       (rule "notLeft" (formula "34"))
                                       (rule "eqSymm" (formula "65"))
                                       (rule "eqSymm" (formula "64"))
                                       (rule "sortsDisjointModuloNull" (formula "65"))
                                       (rule "replace_known_right" (formula "65") (term "1") (ifseqformula "106"))
                                        (builtin "One Step Simplification" (formula "65") (ifInst ""  (formula "98")))
                                       (rule "false_right" (formula "65"))
                                       (rule "sortsDisjointModuloNull" (formula "64"))
                                       (rule "replace_known_right" (formula "64") (term "0") (ifseqformula "98"))
                                        (builtin "One Step Simplification" (formula "64") (ifInst ""  (formula "105")))
                                       (rule "false_right" (formula "64"))
                                       (rule "unionEqualsEmpty" (formula "33"))
                                        (builtin "One Step Simplification" (formula "33"))
                                       (rule "andLeft" (formula "33"))
                                       (rule "notLeft" (formula "33"))
                                       (rule "notLeft" (formula "33"))
                                       (rule "eqSymm" (formula "64"))
                                       (rule "eqSymm" (formula "63"))
                                       (rule "sortsDisjointModuloNull" (formula "64"))
                                       (rule "replace_known_right" (formula "64") (term "0") (ifseqformula "95"))
                                        (builtin "One Step Simplification" (formula "64") (ifInst ""  (formula "105")))
                                       (rule "false_right" (formula "64"))
                                       (rule "sortsDisjointModuloNull" (formula "63"))
                                       (rule "replace_known_right" (formula "63") (term "1") (ifseqformula "104"))
                                        (builtin "One Step Simplification" (formula "63") (ifInst ""  (formula "95")))
                                       (rule "false_right" (formula "63"))
                                       (rule "unionEqualsEmpty" (formula "32"))
                                        (builtin "One Step Simplification" (formula "32"))
                                       (rule "andLeft" (formula "32"))
                                       (rule "notLeft" (formula "32"))
                                       (rule "notLeft" (formula "32"))
                                       (rule "eqSymm" (formula "63"))
                                       (rule "eqSymm" (formula "62"))
                                       (rule "sortsDisjointModuloNull" (formula "63"))
                                       (rule "replace_known_right" (formula "63") (term "1") (ifseqformula "104"))
                                        (builtin "One Step Simplification" (formula "63") (ifInst ""  (formula "93")))
                                       (rule "false_right" (formula "63"))
                                       (rule "sortsDisjointModuloNull" (formula "62"))
                                       (rule "replace_known_right" (formula "62") (term "1") (ifseqformula "103"))
                                        (builtin "One Step Simplification" (formula "62") (ifInst ""  (formula "91")))
                                       (rule "false_right" (formula "62"))
                                       (rule "unionEqualsEmpty" (formula "16"))
                                        (builtin "One Step Simplification" (formula "16"))
                                       (rule "andLeft" (formula "16"))
                                       (rule "notLeft" (formula "17"))
                                       (rule "notLeft" (formula "16"))
                                       (rule "eqSymm" (formula "62"))
                                       (rule "eqSymm" (formula "61"))
                                       (rule "unionEqualsEmpty" (formula "15"))
                                        (builtin "One Step Simplification" (formula "15"))
                                       (rule "andLeft" (formula "15"))
                                       (rule "notLeft" (formula "16"))
                                       (rule "notLeft" (formula "15"))
                                       (rule "eqSymm" (formula "61"))
                                       (rule "eqSymm" (formula "60"))
                                       (rule "unionEqualsEmpty" (formula "15"))
                                        (builtin "One Step Simplification" (formula "15"))
                                       (rule "andLeft" (formula "15"))
                                       (rule "notLeft" (formula "16"))
                                       (rule "notLeft" (formula "15"))
                                       (rule "eqSymm" (formula "60"))
                                       (rule "eqSymm" (formula "59"))
                                       (rule "unionEqualsEmpty" (formula "15"))
                                        (builtin "One Step Simplification" (formula "15"))
                                       (rule "andLeft" (formula "15"))
                                       (rule "notLeft" (formula "15"))
                                       (rule "notLeft" (formula "15"))
                                       (rule "eqSymm" (formula "59"))
                                       (rule "eqSymm" (formula "58"))
                                       (rule "unionEqualsEmpty" (formula "24"))
                                        (builtin "One Step Simplification" (formula "24"))
                                       (rule "andLeft" (formula "24"))
                                       (rule "notLeft" (formula "24"))
                                       (rule "notLeft" (formula "24"))
                                       (rule "eqSymm" (formula "58"))
                                       (rule "eqSymm" (formula "57"))
                                       (rule "unionEqualsEmpty" (formula "24"))
                                        (builtin "One Step Simplification" (formula "24"))
                                       (rule "andLeft" (formula "24"))
                                       (rule "notLeft" (formula "24"))
                                       (rule "notLeft" (formula "24"))
                                       (rule "eqSymm" (formula "57"))
                                       (rule "eqSymm" (formula "56"))
                                       (rule "unionEqualsEmpty" (formula "25"))
                                        (builtin "One Step Simplification" (formula "25"))
                                       (rule "andLeft" (formula "25"))
                                       (rule "notLeft" (formula "26"))
                                       (rule "notLeft" (formula "25"))
                                       (rule "eqSymm" (formula "56"))
                                       (rule "eqSymm" (formula "55"))
                                       (rule "unionEqualsEmpty" (formula "24"))
                                        (builtin "One Step Simplification" (formula "24"))
                                       (rule "andLeft" (formula "24"))
                                       (rule "notLeft" (formula "25"))
                                       (rule "notLeft" (formula "24"))
                                       (rule "eqSymm" (formula "55"))
                                       (rule "eqSymm" (formula "54"))
                                       (rule "commuteUnion" (formula "44") (term "1,1,1"))
                                       (rule "commuteUnion" (formula "44") (term "0,0,1"))
                                       (rule "commuteUnion" (formula "49") (term "1,1,0,1,0,0"))
                                       (rule "commuteUnion" (formula "49") (term "0,0,0,1,0,0"))
                                       (rule "commuteUnion" (formula "53") (term "1,1,0,1,0,0,0"))
                                       (rule "commuteUnion" (formula "53") (term "0,0,0,1,0,0,0"))
                                       (rule "commuteUnion" (formula "50") (term "0,0,1,0,0"))
                                       (rule "commuteUnion" (formula "50") (term "1,1,0,1,0,0"))
                                       (rule "commuteUnion" (formula "48") (term "1,1,0,1,0,2,0"))
                                       (rule "commuteUnion_2" (formula "48") (term "0,0,1,0,2,0"))
                                       (rule "commuteUnion" (formula "112") (term "1,1,0,1,0,0"))
                                       (rule "commuteUnion_2" (formula "112") (term "0,0,1,0,0"))
                                       (rule "commuteUnion" (formula "25") (term "0,0,1,0,1,0"))
                                       (rule "commuteUnion" (formula "25") (term "1,1,1,0,1,0"))
                                       (rule "commuteUnion_2" (formula "44") (term "0,1"))
                                       (rule "commuteUnion_2" (formula "49") (term "0,0,1,0,0"))
                                       (rule "commuteUnion_2" (formula "53") (term "0,0,1,0,0,0"))
                                       (rule "commuteUnion" (formula "50") (term "1,0,0,1,0,0"))
                                       (rule "commuteUnion" (formula "48") (term "0,0,0,1,0,2,0"))
                                       (rule "commuteUnion" (formula "112") (term "0,0,0,1,0,0"))
                                       (rule "commuteUnion_2" (formula "25") (term "0,1,0,1,0"))
                                       (rule "commuteUnion_2" (formula "44") (term "1"))
                                       (rule "commuteUnion_2" (formula "49") (term "0,1,0,0"))
                                       (rule "commuteUnion" (formula "53") (term "0,0,0,1,0,0,0"))
                                       (rule "commuteUnion_2" (formula "48") (term "0,0,1,0,2,0"))
                                       (rule "commuteUnion_2" (formula "112") (term "0,0,1,0,0"))
                                       (rule "commuteUnion_2" (formula "25") (term "1,0,1,0"))
                                       (rule "commuteUnion" (formula "44") (term "0,0,1"))
                                       (rule "commuteUnion" (formula "49") (term "0,0,0,1,0,0"))
                                       (rule "commuteUnion_2" (formula "53") (term "0,1,0,0,0"))
                                       (rule "commuteUnion_2" (formula "48") (term "0,1,0,2,0"))
                                       (rule "commuteUnion_2" (formula "112") (term "0,1,0,0"))
                                       (rule "commuteUnion" (formula "25") (term "0,0,1,0,1,0"))
                                       (rule "Free_class_invariant_axiom_for_de_wiesler_Storage" (formula "14"))
                                        (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "36")) (ifInst ""  (formula "37")) (ifInst ""  (formula "40")) (ifInst ""  (formula "41")) (ifInst ""  (formula "42")) (ifInst ""  (formula "43")))
                                       (rule "andLeft" (formula "14"))
                                       (rule "andLeft" (formula "15"))
                                       (rule "andLeft" (formula "14"))
                                       (rule "andLeft" (formula "16"))
                                       (rule "andLeft" (formula "14"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "translateJavaMulInt" (formula "14") (term "1"))
                                       (rule "mul_literals" (formula "14") (term "1"))
                                       (rule "translateJavaMulInt" (formula "14") (term "1"))
                                       (rule "mul_literals" (formula "14") (term "1"))
                                       (rule "disjointDefinition" (formula "42"))
                                        (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "125")))
                                       (rule "true_left" (formula "42"))
                                       (rule "disjointDefinition" (formula "41"))
                                        (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "123")))
                                       (rule "true_left" (formula "41"))
                                       (rule "disjointDefinition" (formula "40"))
                                        (builtin "One Step Simplification" (formula "40"))
                                       (rule "notLeft" (formula "40"))
                                       (rule "eqSymm" (formula "79"))
                                       (rule "disjointDefinition" (formula "39"))
                                        (builtin "One Step Simplification" (formula "39"))
                                       (rule "notLeft" (formula "39"))
                                       (rule "eqSymm" (formula "78"))
                                       (rule "disjointDefinition" (formula "38"))
                                        (builtin "One Step Simplification" (formula "38"))
                                       (rule "notLeft" (formula "38"))
                                       (rule "eqSymm" (formula "77"))
                                       (rule "disjointDefinition" (formula "37"))
                                        (builtin "One Step Simplification" (formula "37"))
                                       (rule "notLeft" (formula "37"))
                                       (rule "eqSymm" (formula "76"))
                                       (rule "disjointDefinition" (formula "36"))
                                        (builtin "One Step Simplification" (formula "36"))
                                       (rule "notLeft" (formula "36"))
                                       (rule "eqSymm" (formula "75"))
                                       (rule "disjointDefinition" (formula "35"))
                                        (builtin "One Step Simplification" (formula "35"))
                                       (rule "notLeft" (formula "35"))
                                       (rule "eqSymm" (formula "74"))
                                       (rule "disjointDefinition" (formula "34"))
                                        (builtin "One Step Simplification" (formula "34"))
                                       (rule "notLeft" (formula "34"))
                                       (rule "eqSymm" (formula "73"))
                                       (rule "disjointDefinition" (formula "33"))
                                        (builtin "One Step Simplification" (formula "33"))
                                       (rule "notLeft" (formula "33"))
                                       (rule "eqSymm" (formula "72"))
                                       (rule "disjointDefinition" (formula "32"))
                                        (builtin "One Step Simplification" (formula "32"))
                                       (rule "notLeft" (formula "32"))
                                       (rule "eqSymm" (formula "71"))
                                       (rule "disjointDefinition" (formula "31"))
                                        (builtin "One Step Simplification" (formula "31"))
                                       (rule "notLeft" (formula "31"))
                                       (rule "eqSymm" (formula "70"))
                                       (rule "disjointDefinition" (formula "30"))
                                        (builtin "One Step Simplification" (formula "30"))
                                       (rule "notLeft" (formula "30"))
                                       (rule "eqSymm" (formula "69"))
                                       (rule "disjointDefinition" (formula "29"))
                                        (builtin "One Step Simplification" (formula "29"))
                                       (rule "notLeft" (formula "29"))
                                       (rule "eqSymm" (formula "68"))
                                       (rule "disjointDefinition" (formula "28"))
                                        (builtin "One Step Simplification" (formula "28"))
                                       (rule "notLeft" (formula "28"))
                                       (rule "eqSymm" (formula "67"))
                                       (rule "disjointDefinition" (formula "27"))
                                        (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "95")))
                                       (rule "true_left" (formula "27"))
                                       (rule "disjointDefinition" (formula "26"))
                                        (builtin "One Step Simplification" (formula "26"))
                                       (rule "notLeft" (formula "26"))
                                       (rule "eqSymm" (formula "65"))
                                       (rule "disjointDefinition" (formula "25"))
                                        (builtin "One Step Simplification" (formula "25"))
                                       (rule "notLeft" (formula "25"))
                                       (rule "eqSymm" (formula "64"))
                                       (rule "disjointDefinition" (formula "24"))
                                        (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "89")))
                                       (rule "true_left" (formula "24"))
                                       (rule "disjointDefinition" (formula "23"))
                                        (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "87")))
                                       (rule "true_left" (formula "23"))
                                       (rule "disjointDefinition" (formula "22"))
                                        (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "85")))
                                       (rule "true_left" (formula "22"))
                                       (rule "disjointDefinition" (formula "21"))
                                        (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "83")))
                                       (rule "true_left" (formula "21"))
                                       (rule "disjointDefinition" (formula "20"))
                                        (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "81")))
                                       (rule "true_left" (formula "20"))
                                       (rule "disjointDefinition" (formula "19"))
                                        (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "79")))
                                       (rule "true_left" (formula "19"))
                                       (rule "disjointDefinition" (formula "18"))
                                        (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "77")))
                                       (rule "true_left" (formula "18"))
                                       (rule "disjointDefinition" (formula "17"))
                                        (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "75")))
                                       (rule "true_left" (formula "17"))
                                       (rule "disjointDefinition" (formula "16"))
                                        (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "72")))
                                       (rule "true_left" (formula "16"))
                                       (rule "disjointDefinition" (formula "15"))
                                        (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "72")))
                                       (rule "true_left" (formula "15"))
                                       (rule "applyEq" (formula "14") (term "0") (ifseqformula "44"))
                                       (rule "eqSymm" (formula "14"))
                                       (rule "Definition_axiom_for_smallBucketsInRangeSorted_in_de_wiesler_Sorter" (formula "30") (term "0") (inst "b=b"))
                                        (builtin "One Step Simplification" (formula "30"))
                                       (rule "expand_inInt" (formula "30") (term "1,0,0"))
                                       (rule "replace_int_MIN" (formula "30") (term "0,1,1,0,0"))
                                       (rule "replace_int_MAX" (formula "30") (term "1,0,1,0,0"))
                                       (rule "translateJavaAddInt" (formula "30") (term "0,2,5,0,1,0"))
                                       (rule "polySimp_addComm0" (formula "30") (term "0,2,5,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0,0"))
                                       (rule "polySimp_mulAssoc" (formula "30") (term "1,0,0,1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "30") (term "0,1,0,0,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "30") (term "1,0,0,1,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "30") (term "1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0,0"))
                                       (rule "mul_literals" (formula "30") (term "0,1,1,0,0,0"))
                                       (rule "Definition_axiom_for_notAllValuesInOneBucket_in_de_wiesler_Sorter" (formula "35") (term "0") (inst "b=b"))
                                        (builtin "One Step Simplification" (formula "35"))
                                       (rule "expand_inInt" (formula "35") (term "1,0,0"))
                                       (rule "replace_int_MIN" (formula "35") (term "0,1,1,0,0"))
                                       (rule "replace_int_MAX" (formula "35") (term "1,0,1,0,0"))
                                       (rule "translateJavaAddInt" (formula "35") (term "0,2,0,0,1,0"))
                                       (rule "translateJavaSubInt" (formula "35") (term "0,1,0"))
                                       (rule "polySimp_elimSub" (formula "35") (term "0,1,0"))
                                       (rule "polySimp_addComm0" (formula "35") (term "0,2,0,0,1,0"))
                                       (rule "polySimp_addComm0" (formula "35") (term "0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0,0"))
                                       (rule "polySimp_mulAssoc" (formula "35") (term "1,0,0,1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "35") (term "0,1,0,0,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "35") (term "1,0,0,1,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0"))
                                       (rule "polySimp_mulAssoc" (formula "35") (term "0,1,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "35") (term "0,0,1,0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "35") (term "0,1,0,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "35") (term "0,1,0,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "35") (term "0,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "35") (term "1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,0"))
                                       (rule "mul_literals" (formula "35") (term "0,1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0"))
                                       (rule "polySimp_mulComm0" (formula "35") (term "1,1,0"))
                                       (rule "polySimp_rightDist" (formula "35") (term "1,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0"))
                                       (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0"))
                                       (rule "polySimp_rightDist" (formula "35") (term "0,1,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "35") (term "1,0,1,1,0"))
                                       (rule "polySimp_elimOne" (formula "35") (term "1,0,1,1,0"))
                                       (rule "polySimp_rightDist" (formula "35") (term "0,0,1,1,0"))
                                       (rule "mul_literals" (formula "35") (term "0,0,0,1,1,0"))
                                       (rule "Definition_axiom_for_equalityBucketsInRange_in_de_wiesler_Sorter" (formula "34") (term "0,1") (inst "b=b"))
                                        (builtin "One Step Simplification" (formula "34"))
                                       (rule "expand_inInt" (formula "34") (term "1,0,0,1"))
                                       (rule "replace_int_MAX" (formula "34") (term "1,0,1,0,0,1"))
                                       (rule "replace_int_MIN" (formula "34") (term "0,1,1,0,0,1"))
                                       (rule "translateJavaMod" (formula "34") (term "0,1,0,0,0,1"))
                                       (rule "translateJavaAddInt" (formula "34") (term "3,0,1,0,1"))
                                       (rule "translateJavaAddInt" (formula "34") (term "2,0,1,0,1"))
                                       (rule "translateJavaAddInt" (formula "34") (term "0,2,1,3,0,1,0,1"))
                                       (rule "polySimp_addComm0" (formula "34") (term "0,2,1,3,0,1,0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,1,0,0,0,0,1"))
                                       (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,0,0,1"))
                                       (rule "add_literals" (formula "34") (term "0,0,0,1,0,0,0,0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0,0,0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "34") (term "1,1,0,0,1"))
                                       (rule "jmod_axiom" (formula "34") (term "0,1,0,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "34") (term "1,0,1,0,0,0,1"))
                                       (rule "polySimp_homoEq" (formula "34") (term "1,0,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "34") (term "1,0,1,0,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "34") (term "1,0,1,0,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,1,0,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "34") (term "0,1,0,1,0,0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "34") (term "0,1,0,0,0,1"))
                                       (rule "polySimp_sepPosMonomial" (formula "34") (term "1,0,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,0,1"))
                                       (rule "mul_literals" (formula "34") (term "0,1,1,0,0,0,1"))
                                       (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,0,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,0,0,1"))
                                       (rule "mul_literals" (formula "34") (term "0,1,1,0,0,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,0,0,1"))
                                       (rule "Definition_axiom_for_allBucketsPartitioned_in_de_wiesler_Sorter" (formula "29") (term "0") (inst "b=b"))
                                        (builtin "One Step Simplification" (formula "29"))
                                       (rule "expand_inInt" (formula "29") (term "1,0,0"))
                                       (rule "replace_int_MIN" (formula "29") (term "0,1,1,0,0"))
                                       (rule "replace_int_MAX" (formula "29") (term "1,0,1,0,0"))
                                       (rule "translateJavaAddInt" (formula "29") (term "0,2,5,0,1,0"))
                                       (rule "polySimp_addComm0" (formula "29") (term "0,2,5,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0,0"))
                                       (rule "polySimp_mulAssoc" (formula "29") (term "1,0,0,1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "29") (term "0,1,0,0,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "29") (term "1,0,0,1,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "29") (term "1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,0"))
                                       (rule "mul_literals" (formula "29") (term "0,1,1,0,0,0"))
                                       (rule "Definition_axiom_for_isValidBucketStarts_in_de_wiesler_Functions" (formula "28") (term "0"))
                                        (builtin "One Step Simplification" (formula "28"))
                                       (rule "andLeft" (formula "28"))
                                       (rule "andLeft" (formula "28"))
                                       (rule "andLeft" (formula "28"))
                                       (rule "translateJavaAddInt" (formula "30") (term "3,0"))
                                       (rule "translateJavaAddInt" (formula "29") (term "0"))
                                       (rule "polySimp_addComm0" (formula "30") (term "3,0"))
                                       (rule "polySimp_addComm0" (formula "29") (term "0"))
                                       (rule "inEqSimp_commuteLeq" (formula "28"))
                                       (rule "inEqSimp_commuteLeq" (formula "29"))
                                       (rule "applyEq" (formula "29") (term "0") (ifseqformula "18"))
                                       (rule "inEqSimp_homoInEq1" (formula "29"))
                                       (rule "mul_literals" (formula "29") (term "1,0"))
                                       (rule "polySimp_addComm1" (formula "29") (term "0"))
                                       (rule "add_literals" (formula "29") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "29"))
                                       (rule "mul_literals" (formula "29") (term "1"))
                                       (rule "elimGcdLeq_antec" (formula "29") (inst "elimGcd=Z(2(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcdRightDiv=Z(4(6(#)))"))
                                       (rule "neg_literal" (formula "29") (term "0,0,0,0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1,0"))
                                       (rule "leq_literals" (formula "29") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "29"))
                                       (rule "mul_literals" (formula "29") (term "0,1,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_addLiterals" (formula "29") (term "0,0,0,0"))
                                       (rule "add_literals" (formula "29") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "29") (term "0,0"))
                                       (rule "add_literals" (formula "29") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "29") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "29") (term "0,0"))
                                       (rule "qeq_literals" (formula "29") (term "0"))
                                        (builtin "One Step Simplification" (formula "29"))
                                       (rule "true_left" (formula "29"))
                                       (rule "elimGcdGeq_antec" (formula "28") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                                       (rule "polySimp_mulLiterals" (formula "28") (term "1,0,0,0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "28") (term "1,0,1,0"))
                                       (rule "leq_literals" (formula "28") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "28"))
                                       (rule "mul_literals" (formula "28") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_addLiterals" (formula "28") (term "0,0,0,0"))
                                       (rule "add_zero_right" (formula "28") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "28") (term "0,0"))
                                       (rule "add_literals" (formula "28") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "28") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "28") (term "0,0"))
                                       (rule "leq_literals" (formula "28") (term "0"))
                                        (builtin "One Step Simplification" (formula "28"))
                                       (rule "pullOutSelect" (formula "30") (term "0") (inst "selectSK=arr_1"))
                                       (rule "simplifySelectOfAnonEQ" (formula "30") (ifseqformula "25"))
                                        (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "112")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "30") (term "0,0,1,0,0") (ifseqformula "16"))
                                       (rule "replace_known_right" (formula "30") (term "0,0,0,1,0,0") (ifseqformula "111"))
                                        (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "17")))
                                       (rule "applyEqRigid" (formula "30") (term "1") (ifseqformula "31"))
                                       (rule "ifEqualsInteger" (formula "30"))
                                       (rule "elementOfUnion" (formula "30") (term "0,0,1"))
                                       (rule "elementOfArrayRangeConcrete" (formula "30") (term "1,0,0,1"))
                                       (rule "eqSymm" (formula "30") (term "0,0,1,0,0,1"))
                                       (rule "replace_known_right" (formula "30") (term "0,0,1,0,0,1") (ifseqformula "110"))
                                        (builtin "One Step Simplification" (formula "30"))
                                       (rule "elementOfUnion" (formula "30") (term "0,0,1"))
                                        (builtin "One Step Simplification" (formula "30"))
                                       (rule "andLeft" (formula "30"))
                                       (rule "elementOfUnion" (formula "30"))
                                       (rule "elementOfArrayRangeConcrete" (formula "30") (term "1"))
                                       (rule "eqSymm" (formula "30") (term "0,0,1"))
                                       (rule "replace_known_right" (formula "30") (term "0,0,1") (ifseqformula "111"))
                                        (builtin "One Step Simplification" (formula "30"))
                                       (rule "elementOfUnion" (formula "30"))
                                        (builtin "One Step Simplification" (formula "30"))
                                       (rule "true_left" (formula "30"))
                                       (rule "commuteUnion" (formula "14") (term "1,1,0"))
                                       (rule "commuteUnion_2" (formula "14") (term "0,0"))
                                       (rule "commuteUnion" (formula "14") (term "0,0,0"))
                                       (rule "commuteUnion_2" (formula "14") (term "0,0"))
                                       (rule "commuteUnion_2" (formula "14") (term "0"))
                                        (builtin "One Step Simplification" (formula "14"))
                                       (rule "true_left" (formula "14"))
                                       (rule "nnf_imp2or" (formula "32") (term "0"))
                                       (rule "nnf_imp2or" (formula "37") (term "0"))
                                       (rule "nnf_imp2or" (formula "31") (term "0"))
                                       (rule "nnf_imp2or" (formula "36") (term "0,1"))
                                       (rule "nnf_notAnd" (formula "32") (term "0,0"))
                                       (rule "nnf_notAnd" (formula "37") (term "0,0"))
                                       (rule "nnf_notAnd" (formula "31") (term "0,0"))
                                       (rule "nnf_notAnd" (formula "36") (term "0,0,1"))
                                       (rule "nnf_notAnd" (formula "32") (term "0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0,0"))
                                       (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0,0"))
                                       (rule "add_literals" (formula "32") (term "0,0,0,1,0,0,0"))
                                       (rule "add_zero_left" (formula "32") (term "0,0,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0,0"))
                                       (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "32") (term "0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0,0"))
                                       (rule "mul_literals" (formula "32") (term "1,0,0,0,0"))
                                       (rule "nnf_notAnd" (formula "32") (term "1,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "32") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "32") (term "1,0,0,0,1,0,0"))
                                       (rule "add_literals" (formula "32") (term "0,0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "32") (term "1,0,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "32") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "32") (term "1,0,0,1,1,0,0"))
                                       (rule "add_literals" (formula "32") (term "0,0,1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "32") (term "1,1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "37") (term "1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "37") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "37") (term "1,0,0,1,1,0,0"))
                                       (rule "add_literals" (formula "37") (term "0,0,1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "37") (term "1,1,1,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "37") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "37") (term "1,0,0,0,1,0,0"))
                                       (rule "add_literals" (formula "37") (term "0,0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "37") (term "1,0,1,0,0"))
                                       (rule "nnf_notAnd" (formula "37") (term "0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "37") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "37") (term "1,0,0,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0,0,1,0,0,0"))
                                       (rule "mul_literals" (formula "37") (term "0,1,0,0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "37") (term "0,0,1,0,0,0"))
                                       (rule "add_literals" (formula "37") (term "0,0,0,1,0,0,0"))
                                       (rule "add_zero_left" (formula "37") (term "0,0,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "37") (term "0,0,0,0"))
                                       (rule "mul_literals" (formula "37") (term "1,0,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "37") (term "0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "0,0,0,0"))
                                       (rule "mul_literals" (formula "37") (term "1,0,0,0,0"))
                                       (rule "nnf_notAnd" (formula "31") (term "1,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "31") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "31") (term "1,0,0,0,1,0,0"))
                                       (rule "add_literals" (formula "31") (term "0,0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "31") (term "1,0,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "31") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "31") (term "1,0,0,1,1,0,0"))
                                       (rule "add_literals" (formula "31") (term "0,0,1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "31") (term "1,1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "31") (term "0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0,1,0,0,0"))
                                       (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0,0"))
                                       (rule "add_literals" (formula "31") (term "0,0,0,1,0,0,0"))
                                       (rule "add_zero_left" (formula "31") (term "0,0,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0,0"))
                                       (rule "mul_literals" (formula "31") (term "1,0,0,0,0,0,0"))
                                       (rule "add_literals" (formula "31") (term "0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0,0"))
                                       (rule "mul_literals" (formula "31") (term "1,0,0,0,0"))
                                       (rule "nnf_notAnd" (formula "36") (term "0,0,0,1"))
                                       (rule "nnf_notAnd" (formula "36") (term "1,0,0,1"))
                                       (rule "inEqSimp_notGeq" (formula "36") (term "1,1,0,0,1"))
                                       (rule "mul_literals" (formula "36") (term "1,0,0,1,1,0,0,1"))
                                       (rule "add_literals" (formula "36") (term "0,0,1,1,0,0,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,1,0,0,1"))
                                       (rule "mul_literals" (formula "36") (term "1,1,1,0,0,1"))
                                       (rule "inEqSimp_notLeq" (formula "36") (term "0,1,0,0,1"))
                                       (rule "mul_literals" (formula "36") (term "1,0,0,0,1,0,0,1"))
                                       (rule "add_literals" (formula "36") (term "0,0,0,1,0,0,1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "0,1,0,0,1"))
                                       (rule "mul_literals" (formula "36") (term "1,0,1,0,0,1"))
                                       (rule "nnf_notAnd" (formula "36") (term "0,0,0,0,1"))
                                       (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0,0,0,1"))
                                       (rule "mul_literals" (formula "36") (term "1,0,0,0,0,0,0,0,1"))
                                       (rule "add_literals" (formula "36") (term "0,0,0,0,0,0,0,1"))
                                       (rule "add_zero_left" (formula "36") (term "0,0,0,0,0,0,1"))
                                       (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0,0,0,1"))
                                       (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0,1,0,0,0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0,0,0,1"))
                                       (rule "add_literals" (formula "36") (term "0,0,0,1,0,0,0,0,1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0,0,0,1"))
                                       (rule "mul_literals" (formula "36") (term "0,1,1,0,0,0,0,1"))
                                       (rule "Contract_axiom_for_sortednessFromPartitionSorted_in_Sorter" (formula "55") (term "0"))
                                       (rule "wellFormedAnon" (formula "55") (term "1,0"))
                                       (rule "wellFormedAnon" (formula "55") (term "0,1,0"))
                                       (rule "wellFormedAnonEQ" (formula "55") (term "0,0,1,0") (ifseqformula "24"))
                                       (rule "wellFormedAnon" (formula "55") (term "0,0,0,1,0"))
                                       (rule "wellFormedAnonEQ" (formula "55") (term "0,0,0,0,1,0") (ifseqformula "15"))
                                       (rule "translateJavaSubInt" (formula "55") (term "1,0,1,1,0,0"))
                                       (rule "translateJavaSubInt" (formula "55") (term "3,0,0,1,1,1,1,1,0,0"))
                                       (rule "replace_known_left" (formula "55") (term "1,1,0") (ifseqformula "54"))
                                        (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "114")) (ifInst ""  (formula "112")) (ifInst ""  (formula "1")) (ifInst ""  (formula "14")) (ifInst ""  (formula "21")) (ifInst ""  (formula "23")) (ifInst ""  (formula "49")) (ifInst ""  (formula "56")))
                                       (rule "true_left" (formula "55"))
                                       (rule "Definition_axiom_for_allBucketsInRangeSorted_in_de_wiesler_Sorter" (formula "51") (term "0") (inst "b=b"))
                                        (builtin "One Step Simplification" (formula "51"))
                                       (rule "expand_inInt" (formula "51") (term "1,0,0"))
                                       (rule "replace_int_MAX" (formula "51") (term "1,0,1,0,0"))
                                       (rule "replace_int_MIN" (formula "51") (term "0,1,1,0,0"))
                                       (rule "translateJavaAddInt" (formula "51") (term "2,0,1,0"))
                                       (rule "translateJavaAddInt" (formula "51") (term "0,2,1,3,0,1,0"))
                                       (rule "translateJavaAddInt" (formula "51") (term "3,0,1,0"))
                                       (rule "polySimp_addComm0" (formula "51") (term "0,2,1,3,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "51") (term "1,0,0,0"))
                                       (rule "polySimp_mulAssoc" (formula "51") (term "1,0,0,1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "51") (term "0,1,0,0,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "51") (term "1,0,0,1,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "51") (term "0,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "51") (term "1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "51") (term "1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "51") (term "1,1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "51") (term "1,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "51") (term "1,1,1,0,0,0"))
                                       (rule "mul_literals" (formula "51") (term "0,1,1,0,0,0"))
                                       (rule "nnf_imp2or" (formula "51") (term "0"))
                                       (rule "nnf_notAnd" (formula "51") (term "0,0"))
                                       (rule "nnf_notAnd" (formula "51") (term "0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "51") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "51") (term "1,0,0,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "51") (term "1,1,0,0,1,0,0,0"))
                                       (rule "mul_literals" (formula "51") (term "0,1,0,0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "51") (term "0,0,1,0,0,0"))
                                       (rule "add_literals" (formula "51") (term "0,0,0,1,0,0,0"))
                                       (rule "add_zero_left" (formula "51") (term "0,0,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "51") (term "1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "51") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "51") (term "0,0,0,0"))
                                       (rule "times_zero_1" (formula "51") (term "1,0,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "51") (term "0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "51") (term "0,0,0,0"))
                                       (rule "mul_literals" (formula "51") (term "1,0,0,0,0"))
                                       (rule "nnf_notAnd" (formula "51") (term "1,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "51") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "51") (term "1,0,0,0,1,0,0"))
                                       (rule "add_literals" (formula "51") (term "0,0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "51") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "51") (term "1,0,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "51") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "51") (term "1,0,0,1,1,0,0"))
                                       (rule "add_literals" (formula "51") (term "0,0,1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "51") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "51") (term "1,1,1,0,0"))
                                       (rule "Definition_axiom_for_sortednessFromPartitionSorted_in_de_wiesler_Sorter" (formula "55") (term "0"))
                                       (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "28") (term "0") (inst "i=i") (inst "j=j"))
                                        (builtin "One Step Simplification" (formula "28"))
                                       (rule "expand_inInt" (formula "28") (term "1,0,0"))
                                       (rule "expand_inInt" (formula "28") (term "1,0,0,1,0"))
                                       (rule "replace_int_MIN" (formula "28") (term "0,1,1,0,0"))
                                       (rule "replace_int_MAX" (formula "28") (term "1,0,1,0,0"))
                                       (rule "replace_int_MIN" (formula "28") (term "0,1,1,0,0,1,0"))
                                       (rule "replace_int_MAX" (formula "28") (term "1,0,1,0,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0,0,1,0"))
                                       (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0,1,0,0,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0,0,1,0"))
                                       (rule "add_literals" (formula "28") (term "0,0,0,1,0,0,0,1,0"))
                                       (rule "add_zero_left" (formula "28") (term "0,0,1,0,0,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0,0"))
                                       (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0,0"))
                                       (rule "add_literals" (formula "28") (term "0,0,0,1,0,0,0"))
                                       (rule "add_zero_left" (formula "28") (term "0,0,1,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0,0,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "28") (term "1,0,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "28") (term "1,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "28") (term "1,1,0,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0,0"))
                                       (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "114"))
                                       (rule "replace_known_right" (formula "114") (term "0,1") (ifseqformula "107"))
                                        (builtin "One Step Simplification" (formula "114") (ifInst ""  (formula "101")) (ifInst ""  (formula "100")) (ifInst ""  (formula "102")) (ifInst ""  (formula "103")) (ifInst ""  (formula "104")) (ifInst ""  (formula "105")) (ifInst ""  (formula "106")))
                                       (rule "closeTrue" (formula "114"))
                                    )
                                    (branch
                                        (builtin "One Step Simplification" (formula "59"))
                                       (rule "closeTrue" (formula "59"))
                                    )
                                 )
                              )
                           )
                        )
                     )
                     (branch "Null Reference (partition = null)"
                        (rule "false_right" (formula "52"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
                  (branch "Null Reference (partition = null)"
                     (rule "false_right" (formula "52"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")))
                     (rule "closeFalse" (formula "1"))
                  )
               )
            )
            (branch "Exceptional Post (partition)"
                (builtin "One Step Simplification" (formula "32"))
                (builtin "One Step Simplification" (formula "38"))
               (rule "andLeft" (formula "32"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "33") (term "1,0") (ifseqformula "32"))
                (builtin "One Step Simplification" (formula "33"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "33") (term "0,0,1,0") (ifseqformula "21"))
               (rule "andLeft" (formula "33"))
               (rule "andLeft" (formula "34"))
               (rule "andLeft" (formula "33"))
               (rule "notLeft" (formula "33"))
               (rule "close" (formula "36") (ifseqformula "35"))
            )
            (branch "Pre (partition)"
                (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "35")) (ifInst ""  (formula "33")) (ifInst ""  (formula "34")) (ifInst ""  (formula "35")) (ifInst ""  (formula "33")) (ifInst ""  (formula "34")))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "0,1,1,0") (ifseqformula "21"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "0,1,0,1,0") (ifseqformula "21"))
               (rule "wellFormedAnon" (formula "36") (term "0,0,0,0,0,1,0"))
               (rule "wellFormedAnonEQ" (formula "36") (term "0,0,0,0,0,0,1,0") (ifseqformula "21"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "0,1,0,0,0,0,1,0") (ifseqformula "21"))
               (rule "expand_inInt" (formula "36") (term "1,0,0,0,1,0"))
               (rule "expand_inInt" (formula "36") (term "1,0,0,1,0"))
               (rule "replace_int_MAX" (formula "36") (term "1,0,1,0,0,0,1,0"))
               (rule "replace_int_MIN" (formula "36") (term "0,1,1,0,0,0,1,0"))
               (rule "replace_int_MIN" (formula "36") (term "0,1,1,0,0,1,0"))
               (rule "replace_int_MAX" (formula "36") (term "1,0,1,0,0,1,0"))
               (rule "translateJavaSubInt" (formula "36") (term "0,0,1"))
               (rule "replace_known_left" (formula "36") (term "0,0,1,1,0") (ifseqformula "7"))
                (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "1")) (ifInst ""  (formula "20")) (ifInst ""  (formula "27")) (ifInst ""  (formula "2")) (ifInst ""  (formula "3")) (ifInst ""  (formula "5")) (ifInst ""  (formula "32")) (ifInst ""  (formula "22")))
               (rule "polySimp_elimSub" (formula "36") (term "0,0,1"))
               (rule "polySimp_addComm0" (formula "36") (term "0,0,1"))
               (rule "measuredByCheck" (formula "36") (term "1") (ifseqformula "8"))
               (rule "precOfPair" (formula "36") (term "1"))
                (builtin "One Step Simplification" (formula "36"))
               (rule "inEqSimp_gtToGeq" (formula "16"))
               (rule "mul_literals" (formula "16") (term "1,0,0"))
               (rule "add_literals" (formula "16") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "16") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,0,0,0"))
               (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0,0,0"))
               (rule "add_literals" (formula "24") (term "0,0,0,0,0,0,0"))
               (rule "precOfInt" (formula "36") (term "1,1"))
               (rule "less_literals" (formula "36") (term "1,1,1"))
                (builtin "One Step Simplification" (formula "36"))
               (rule "leq_literals" (formula "36") (term "1,1"))
                (builtin "One Step Simplification" (formula "36"))
               (rule "inEqSimp_commuteLeq" (formula "36") (term "1,1"))
               (rule "replace_known_left" (formula "36") (term "1,1") (ifseqformula "6"))
                (builtin "One Step Simplification" (formula "36"))
               (rule "inEqSimp_commuteLeq" (formula "36") (term "1"))
               (rule "replace_known_left" (formula "36") (term "1") (ifseqformula "4"))
                (builtin "One Step Simplification" (formula "36"))
               (rule "inEqSimp_homoInEq0" (formula "17"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,0"))
               (rule "polySimp_mulAssoc" (formula "17") (term "0,1,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "0,1,0"))
               (rule "polySimp_elimOne" (formula "17") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "17") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "16"))
               (rule "polySimp_mulComm0" (formula "16") (term "1"))
               (rule "polySimp_rightDist" (formula "16") (term "1"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,1"))
               (rule "mul_literals" (formula "16") (term "0,1"))
               (rule "polySimp_elimOne" (formula "16") (term "1,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,0,0"))
               (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "17"))
               (rule "polySimp_mulLiterals" (formula "17") (term "0"))
               (rule "polySimp_elimOne" (formula "17") (term "0"))
               (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "12"))
               (rule "leq_literals" (formula "14") (term "0"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "true_left" (formula "14"))
               (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "10"))
               (rule "leq_literals" (formula "4") (term "0"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "true_left" (formula "4"))
               (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "14"))
               (rule "inEqSimp_homoInEq0" (formula "10") (term "0"))
               (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0"))
               (rule "add_literals" (formula "10") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "10") (term "1,0,0"))
               (rule "add_literals" (formula "10") (term "0,0"))
               (rule "qeq_literals" (formula "10") (term "0"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "true_left" (formula "10"))
               (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "14"))
               (rule "mul_literals" (formula "5") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "5") (term "0"))
               (rule "add_literals" (formula "5") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "5"))
               (rule "mul_literals" (formula "5") (term "1"))
               (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "10"))
               (rule "leq_literals" (formula "5") (term "0"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "true_left" (formula "5"))
               (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "4"))
               (rule "polySimp_rightDist" (formula "13") (term "0,0"))
               (rule "mul_literals" (formula "13") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "13") (term "0"))
               (rule "add_literals" (formula "13") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "13"))
               (rule "polySimp_mulLiterals" (formula "13") (term "0"))
               (rule "polySimp_elimOne" (formula "13") (term "0"))
               (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "13"))
               (rule "leq_literals" (formula "3") (term "0"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "true_left" (formula "3"))
               (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "10"))
               (rule "polySimp_mulComm0" (formula "11") (term "0,0"))
               (rule "polySimp_addComm0" (formula "11") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "11"))
               (rule "polySimp_mulLiterals" (formula "11") (term "0"))
               (rule "polySimp_elimOne" (formula "11") (term "0"))
               (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "11"))
               (rule "leq_literals" (formula "3") (term "0"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "true_left" (formula "3"))
               (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "10"))
               (rule "polySimp_rightDist" (formula "13") (term "0,0"))
               (rule "mul_literals" (formula "13") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "13") (term "0"))
               (rule "add_literals" (formula "13") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "13"))
               (rule "polySimp_mulLiterals" (formula "13") (term "0"))
               (rule "polySimp_elimOne" (formula "13") (term "0"))
               (rule "inEqSimp_subsumption0" (formula "12") (ifseqformula "13"))
               (rule "leq_literals" (formula "12") (term "0"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "true_left" (formula "12"))
               (rule "inEqSimp_and_subsumption3" (formula "21") (term "0,0,0"))
               (rule "leq_literals" (formula "21") (term "0,1,0,0,0,0"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "nnf_imp2or" (formula "21") (term "0"))
               (rule "nnf_notAnd" (formula "21") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
               (rule "mul_literals" (formula "21") (term "1,0,0,1,0,0"))
               (rule "add_literals" (formula "21") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
               (rule "mul_literals" (formula "21") (term "1,1,0,0"))
               (rule "nnf_notAnd" (formula "21") (term "0,0,0"))
               (rule "inEqSimp_notGeq" (formula "21") (term "1,0,0,0"))
               (rule "times_zero_1" (formula "21") (term "1,0,0,1,0,0,0"))
               (rule "add_zero_right" (formula "21") (term "0,0,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,0"))
               (rule "mul_literals" (formula "21") (term "1,1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "21") (term "0,0,0,0"))
               (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0,0"))
               (rule "add_literals" (formula "21") (term "0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "0,0,0,0"))
               (rule "mul_literals" (formula "21") (term "1,0,0,0,0"))
               (rule "Free_class_invariant_axiom_for_de_wiesler_Storage" (formula "15"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "andLeft" (formula "15"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "15"))
               (rule "andLeft" (formula "17"))
               (rule "andLeft" (formula "15"))
               (rule "andLeft" (formula "18"))
               (rule "andLeft" (formula "15"))
               (rule "andLeft" (formula "19"))
               (rule "andLeft" (formula "15"))
               (rule "andLeft" (formula "20"))
               (rule "andLeft" (formula "15"))
               (rule "andLeft" (formula "21"))
               (rule "andLeft" (formula "15"))
               (rule "andLeft" (formula "22"))
               (rule "andLeft" (formula "15"))
               (rule "andLeft" (formula "23"))
               (rule "andLeft" (formula "15"))
               (rule "andLeft" (formula "24"))
               (rule "andLeft" (formula "24"))
               (rule "andLeft" (formula "24"))
               (rule "andLeft" (formula "24"))
               (rule "andLeft" (formula "24"))
               (rule "andLeft" (formula "24"))
               (rule "andLeft" (formula "24"))
               (rule "andLeft" (formula "24"))
               (rule "andLeft" (formula "24"))
               (rule "andLeft" (formula "24"))
               (rule "andLeft" (formula "24"))
               (rule "andLeft" (formula "24"))
               (rule "andLeft" (formula "24"))
               (rule "andLeft" (formula "24"))
               (rule "andLeft" (formula "24"))
               (rule "andLeft" (formula "24"))
               (rule "andLeft" (formula "24"))
               (rule "andLeft" (formula "24"))
               (rule "andLeft" (formula "24"))
               (rule "translateJavaMulInt" (formula "18") (term "1"))
               (rule "mul_literals" (formula "18") (term "1"))
               (rule "translateJavaMulInt" (formula "17") (term "1"))
               (rule "mul_literals" (formula "17") (term "1"))
               (rule "disjointDefinition" (formula "51"))
                (builtin "One Step Simplification" (formula "51"))
               (rule "notLeft" (formula "51"))
               (rule "disjointDefinition" (formula "50"))
                (builtin "One Step Simplification" (formula "50"))
               (rule "notLeft" (formula "50"))
               (rule "disjointDefinition" (formula "49"))
                (builtin "One Step Simplification" (formula "49"))
               (rule "notLeft" (formula "49"))
               (rule "eqSymm" (formula "61"))
               (rule "disjointDefinition" (formula "48"))
                (builtin "One Step Simplification" (formula "48"))
               (rule "notLeft" (formula "48"))
               (rule "eqSymm" (formula "60"))
               (rule "disjointDefinition" (formula "47"))
                (builtin "One Step Simplification" (formula "47"))
               (rule "notLeft" (formula "47"))
               (rule "eqSymm" (formula "59"))
               (rule "disjointDefinition" (formula "46"))
                (builtin "One Step Simplification" (formula "46"))
               (rule "notLeft" (formula "46"))
               (rule "eqSymm" (formula "58"))
               (rule "disjointDefinition" (formula "45"))
                (builtin "One Step Simplification" (formula "45"))
               (rule "notLeft" (formula "45"))
               (rule "eqSymm" (formula "57"))
               (rule "disjointDefinition" (formula "44"))
                (builtin "One Step Simplification" (formula "44"))
               (rule "notLeft" (formula "44"))
               (rule "eqSymm" (formula "56"))
               (rule "disjointDefinition" (formula "43"))
                (builtin "One Step Simplification" (formula "43"))
               (rule "notLeft" (formula "43"))
               (rule "eqSymm" (formula "55"))
               (rule "disjointDefinition" (formula "42"))
                (builtin "One Step Simplification" (formula "42"))
               (rule "notLeft" (formula "42"))
               (rule "eqSymm" (formula "54"))
               (rule "disjointDefinition" (formula "41"))
                (builtin "One Step Simplification" (formula "41"))
               (rule "notLeft" (formula "41"))
               (rule "eqSymm" (formula "53"))
               (rule "disjointDefinition" (formula "40"))
                (builtin "One Step Simplification" (formula "40"))
               (rule "notLeft" (formula "40"))
               (rule "eqSymm" (formula "52"))
               (rule "disjointDefinition" (formula "39"))
                (builtin "One Step Simplification" (formula "39"))
               (rule "notLeft" (formula "39"))
               (rule "eqSymm" (formula "51"))
               (rule "disjointDefinition" (formula "38"))
                (builtin "One Step Simplification" (formula "38"))
               (rule "notLeft" (formula "38"))
               (rule "eqSymm" (formula "50"))
               (rule "disjointDefinition" (formula "37"))
                (builtin "One Step Simplification" (formula "37"))
               (rule "notLeft" (formula "37"))
               (rule "eqSymm" (formula "49"))
               (rule "disjointDefinition" (formula "36"))
                (builtin "One Step Simplification" (formula "36"))
               (rule "notLeft" (formula "36"))
               (rule "disjointDefinition" (formula "35"))
                (builtin "One Step Simplification" (formula "35"))
               (rule "notLeft" (formula "35"))
               (rule "eqSymm" (formula "47"))
               (rule "disjointDefinition" (formula "34"))
                (builtin "One Step Simplification" (formula "34"))
               (rule "notLeft" (formula "34"))
               (rule "eqSymm" (formula "46"))
               (rule "disjointDefinition" (formula "33"))
                (builtin "One Step Simplification" (formula "33"))
               (rule "notLeft" (formula "33"))
               (rule "disjointDefinition" (formula "32"))
                (builtin "One Step Simplification" (formula "32"))
               (rule "notLeft" (formula "32"))
               (rule "disjointDefinition" (formula "31"))
                (builtin "One Step Simplification" (formula "31"))
               (rule "notLeft" (formula "31"))
               (rule "disjointDefinition" (formula "30"))
                (builtin "One Step Simplification" (formula "30"))
               (rule "notLeft" (formula "30"))
               (rule "disjointDefinition" (formula "29"))
                (builtin "One Step Simplification" (formula "29"))
               (rule "notLeft" (formula "29"))
               (rule "disjointDefinition" (formula "28"))
                (builtin "One Step Simplification" (formula "28"))
               (rule "notLeft" (formula "28"))
               (rule "disjointDefinition" (formula "27"))
                (builtin "One Step Simplification" (formula "27"))
               (rule "notLeft" (formula "27"))
               (rule "disjointDefinition" (formula "26"))
                (builtin "One Step Simplification" (formula "26"))
               (rule "notLeft" (formula "26"))
               (rule "disjointDefinition" (formula "25"))
                (builtin "One Step Simplification" (formula "25"))
               (rule "notLeft" (formula "25"))
               (rule "disjointDefinition" (formula "24"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "notLeft" (formula "24"))
               (rule "applyEq" (formula "35") (term "1,0") (ifseqformula "23"))
               (rule "applyEq" (formula "24") (term "1,0") (ifseqformula "23"))
               (rule "applyEq" (formula "34") (term "1,0") (ifseqformula "23"))
               (rule "distributeIntersection" (formula "35") (term "0"))
               (rule "distributeIntersection" (formula "24") (term "0"))
               (rule "distributeIntersection" (formula "34") (term "0"))
               (rule "distributeIntersection" (formula "35") (term "0,0"))
               (rule "distributeIntersection" (formula "35") (term "1,0"))
               (rule "distributeIntersection" (formula "24") (term "1,0"))
               (rule "distributeIntersection" (formula "24") (term "0,0"))
               (rule "unionEqualsEmpty" (formula "34"))
               (rule "andLeft" (formula "34"))
               (rule "distributeIntersection" (formula "36") (term "0,0,0"))
               (rule "distributeIntersection" (formula "36") (term "1,0,0"))
               (rule "distributeIntersection" (formula "36") (term "1,1,0"))
               (rule "distributeIntersection" (formula "36") (term "0,1,0"))
               (rule "distributeIntersection" (formula "24") (term "0,1,0"))
               (rule "distributeIntersection" (formula "24") (term "1,1,0"))
               (rule "distributeIntersection" (formula "24") (term "1,0,0"))
               (rule "distributeIntersection" (formula "24") (term "0,0,0"))
               (rule "distributeIntersection" (formula "35") (term "0"))
               (rule "distributeIntersection" (formula "34") (term "0"))
               (rule "unionEqualsEmpty" (formula "36"))
               (rule "andLeft" (formula "36"))
               (rule "unionEqualsEmpty" (formula "24"))
               (rule "andLeft" (formula "24"))
               (rule "distributeIntersection" (formula "36") (term "1,0"))
               (rule "distributeIntersection" (formula "36") (term "0,0"))
               (rule "unionEqualsEmpty" (formula "35"))
               (rule "andLeft" (formula "35"))
               (rule "unionEqualsEmpty" (formula "38"))
               (rule "andLeft" (formula "38"))
               (rule "unionEqualsEmpty" (formula "40"))
               (rule "andLeft" (formula "40"))
               (rule "unionEqualsEmpty" (formula "24"))
               (rule "andLeft" (formula "24"))
               (rule "unionEqualsEmpty" (formula "26"))
               (rule "andLeft" (formula "26"))
               (rule "unionEqualsEmpty" (formula "39"))
               (rule "andLeft" (formula "39"))
               (rule "distributeIntersection" (formula "38") (term "0"))
               (rule "distributeIntersection" (formula "37") (term "0"))
               (rule "unionEqualsEmpty" (formula "41"))
                (builtin "One Step Simplification" (formula "41"))
               (rule "andLeft" (formula "41"))
               (rule "notLeft" (formula "41"))
               (rule "notLeft" (formula "41"))
               (rule "eqSymm" (formula "45"))
               (rule "eqSymm" (formula "44"))
               (rule "sortsDisjointModuloNull" (formula "45"))
               (rule "replace_known_right" (formula "45") (term "1") (ifseqformula "77"))
                (builtin "One Step Simplification" (formula "45"))
               (rule "false_right" (formula "45"))
               (rule "sortsDisjointModuloNull" (formula "44"))
               (rule "replace_known_right" (formula "44") (term "1") (ifseqformula "76"))
                (builtin "One Step Simplification" (formula "44"))
               (rule "false_right" (formula "44"))
               (rule "unionEqualsEmpty" (formula "41"))
                (builtin "One Step Simplification" (formula "41"))
               (rule "andLeft" (formula "41"))
               (rule "notLeft" (formula "41"))
               (rule "notLeft" (formula "41"))
               (rule "eqSymm" (formula "44"))
               (rule "eqSymm" (formula "43"))
               (rule "sortsDisjointModuloNull" (formula "44"))
               (rule "replace_known_right" (formula "44") (term "1") (ifseqformula "76"))
                (builtin "One Step Simplification" (formula "44"))
               (rule "false_right" (formula "44"))
               (rule "sortsDisjointModuloNull" (formula "43"))
               (rule "replace_known_right" (formula "43") (term "1") (ifseqformula "75"))
                (builtin "One Step Simplification" (formula "43"))
               (rule "false_right" (formula "43"))
               (rule "unionEqualsEmpty" (formula "41"))
                (builtin "One Step Simplification" (formula "41"))
               (rule "andLeft" (formula "41"))
               (rule "notLeft" (formula "41"))
               (rule "notLeft" (formula "41"))
               (rule "eqSymm" (formula "43"))
               (rule "eqSymm" (formula "42"))
               (rule "sortsDisjointModuloNull" (formula "43"))
               (rule "replace_known_right" (formula "43") (term "1") (ifseqformula "75"))
                (builtin "One Step Simplification" (formula "43"))
               (rule "false_right" (formula "43"))
               (rule "sortsDisjointModuloNull" (formula "42"))
               (rule "replace_known_right" (formula "42") (term "1") (ifseqformula "74"))
                (builtin "One Step Simplification" (formula "42"))
               (rule "false_right" (formula "42"))
               (rule "unionEqualsEmpty" (formula "41"))
                (builtin "One Step Simplification" (formula "41"))
               (rule "andLeft" (formula "41"))
               (rule "notLeft" (formula "41"))
               (rule "notLeft" (formula "41"))
               (rule "eqSymm" (formula "42"))
               (rule "eqSymm" (formula "41"))
               (rule "sortsDisjointModuloNull" (formula "42"))
               (rule "replace_known_right" (formula "42") (term "1") (ifseqformula "74"))
                (builtin "One Step Simplification" (formula "42"))
               (rule "false_right" (formula "42"))
               (rule "sortsDisjointModuloNull" (formula "41"))
               (rule "replace_known_right" (formula "41") (term "1") (ifseqformula "73"))
                (builtin "One Step Simplification" (formula "41"))
               (rule "false_right" (formula "41"))
               (rule "unionEqualsEmpty" (formula "25"))
                (builtin "One Step Simplification" (formula "25"))
               (rule "andLeft" (formula "25"))
               (rule "notLeft" (formula "25"))
               (rule "notLeft" (formula "25"))
               (rule "eqSymm" (formula "41"))
               (rule "eqSymm" (formula "40"))
               (rule "unionEqualsEmpty" (formula "24"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "andLeft" (formula "24"))
               (rule "notLeft" (formula "24"))
               (rule "notLeft" (formula "24"))
               (rule "eqSymm" (formula "40"))
               (rule "eqSymm" (formula "39"))
               (rule "unionEqualsEmpty" (formula "25"))
                (builtin "One Step Simplification" (formula "25"))
               (rule "andLeft" (formula "25"))
               (rule "notLeft" (formula "25"))
               (rule "notLeft" (formula "25"))
               (rule "eqSymm" (formula "39"))
               (rule "eqSymm" (formula "38"))
               (rule "unionEqualsEmpty" (formula "24"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "andLeft" (formula "24"))
               (rule "notLeft" (formula "24"))
               (rule "notLeft" (formula "24"))
               (rule "eqSymm" (formula "38"))
               (rule "eqSymm" (formula "37"))
               (rule "unionEqualsEmpty" (formula "36"))
                (builtin "One Step Simplification" (formula "36"))
               (rule "andLeft" (formula "36"))
               (rule "notLeft" (formula "37"))
               (rule "notLeft" (formula "36"))
               (rule "eqSymm" (formula "37"))
               (rule "eqSymm" (formula "36"))
               (rule "unionEqualsEmpty" (formula "35"))
                (builtin "One Step Simplification" (formula "35"))
               (rule "andLeft" (formula "35"))
               (rule "notLeft" (formula "35"))
               (rule "notLeft" (formula "35"))
               (rule "eqSymm" (formula "36"))
               (rule "eqSymm" (formula "35"))
               (rule "unionEqualsEmpty" (formula "34"))
                (builtin "One Step Simplification" (formula "34"))
               (rule "andLeft" (formula "34"))
               (rule "notLeft" (formula "34"))
               (rule "notLeft" (formula "34"))
               (rule "eqSymm" (formula "35"))
               (rule "eqSymm" (formula "34"))
               (rule "unionEqualsEmpty" (formula "33"))
                (builtin "One Step Simplification" (formula "33"))
               (rule "andLeft" (formula "33"))
               (rule "notLeft" (formula "34"))
               (rule "notLeft" (formula "33"))
               (rule "eqSymm" (formula "34"))
               (rule "eqSymm" (formula "33"))
               (rule "commuteUnion" (formula "23") (term "0,1"))
               (rule "commuteUnion" (formula "23") (term "1,1,1"))
               (rule "commuteUnion" (formula "23") (term "1,0,1"))
               (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "6"))
               (rule "andLeft" (formula "6"))
               (rule "notLeft" (formula "7"))
               (rule "andLeft" (formula "6"))
               (rule "notLeft" (formula "7"))
               (rule "andLeft" (formula "6"))
               (rule "notLeft" (formula "7"))
               (rule "andLeft" (formula "6"))
               (rule "notLeft" (formula "7"))
               (rule "andLeft" (formula "6"))
               (rule "notLeft" (formula "7"))
               (rule "andLeft" (formula "6"))
               (rule "andLeft" (formula "6"))
               (rule "notLeft" (formula "8"))
               (rule "notLeft" (formula "7"))
               (rule "notLeft" (formula "6"))
               (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "89"))
               (rule "replace_known_right" (formula "89") (term "0,1,0") (ifseqformula "38"))
                (builtin "One Step Simplification" (formula "89") (ifInst ""  (formula "32")) (ifInst ""  (formula "33")) (ifInst ""  (formula "34")) (ifInst ""  (formula "35")) (ifInst ""  (formula "36")) (ifInst ""  (formula "37")) (ifInst ""  (formula "39")))
               (rule "closeTrue" (formula "89"))
            )
         )
      )
   )
   (branch "Exceptional Post (createArray)"
       (builtin "One Step Simplification" (formula "21"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "andLeft" (formula "18"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "1,0") (ifseqformula "18"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "20"))
      (rule "andLeft" (formula "19"))
      (rule "notLeft" (formula "21"))
      (rule "notLeft" (formula "19"))
      (rule "close" (formula "21") (ifseqformula "20"))
   )
   (branch "Pre (createArray)"
       (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "1")))
      (rule "expand_inInt" (formula "19"))
      (rule "replace_int_MAX" (formula "19") (term "1,0"))
      (rule "replace_int_MIN" (formula "19") (term "0,1"))
      (rule "leq_literals" (formula "19") (term "0"))
       (builtin "One Step Simplification" (formula "19"))
      (rule "leq_literals" (formula "19"))
      (rule "closeTrue" (formula "19"))
   )
)
)
}
