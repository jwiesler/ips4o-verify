\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sun Apr 16 14:20:05 CEST 2023
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L , finalFields-finalFields\\:immutable
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../src";

\proofObligation "#Proof Obligation Settings
#Sun Apr 16 14:20:05 CEST 2023
contract=de.wiesler.Classifier[de.wiesler.Classifier\\:\\:calculate_bucket_starts([I,int,int,int,[I,de.wiesler.Buffers)].JML normal_behavior operation contract.0
name=de.wiesler.Classifier[de.wiesler.Classifier\\:\\:calculate_bucket_starts([I,int,int,int,[I,de.wiesler.Buffers)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "802059dea3"))
(keyLog "1" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))
(keyLog "2" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))
(keyLog "3" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))

(autoModeTime "140621")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "heapAtPre,o,f"))
(rule "translateJavaSubInt" (formula "1") (term "0,1,0,0,1,0,0,0,1,1"))
(rule "translateJavaAddInt" (formula "1") (term "1,1,0,0,1,0,0,0,1,1"))
(rule "translateJavaSubInt" (formula "1") (term "1,1,0,0,0,0,1,1"))
(rule "translateJavaAddInt" (formula "1") (term "1,0,1,1,0"))
(rule "translateJavaSubInt" (formula "1") (term "0,0,0,1,1,1,1,1,1,1,1,0"))
(rule "translateJavaAddInt" (formula "1") (term "0,2,0,0,1,0,0,1,0,0,0,1,1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "12"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "11"))
(rule "andLeft" (formula "15"))
(rule "andLeft" (formula "14"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "16"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "18"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "19"))
(rule "andLeft" (formula "21"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "23"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "25"))
(rule "andLeft" (formula "13"))
(rule "notLeft" (formula "26"))
(rule "andLeft" (formula "26"))
(rule "andLeft" (formula "13"))
(rule "notLeft" (formula "27"))
(rule "notLeft" (formula "27"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "13"))
(rule "eqSymm" (formula "38") (term "1,0,0,1,0,1"))
(rule "eqSymm" (formula "28"))
(rule "replace_known_right" (formula "4") (term "0") (ifseqformula "36"))
 (builtin "One Step Simplification" (formula "4"))
(rule "replace_known_right" (formula "6") (term "0") (ifseqformula "34"))
 (builtin "One Step Simplification" (formula "6"))
(rule "replace_known_right" (formula "5") (term "0") (ifseqformula "35"))
 (builtin "One Step Simplification" (formula "5"))
(rule "polySimp_elimSub" (formula "38") (term "1,1,0,0,0,0,1"))
(rule "polySimp_elimSub" (formula "38") (term "0,1,0,0,1,0,0,0,1"))
(rule "polySimp_elimSub" (formula "32") (term "0,0"))
(rule "polySimp_addComm0" (formula "38") (term "1,1,0,0,1,0,0,0,1"))
(rule "polySimp_addComm0" (formula "9") (term "1"))
(rule "polySimp_addComm0" (formula "38") (term "1,1,0,0,0,0,1"))
(rule "polySimp_addComm0" (formula "38") (term "0,2,0,0,1,0,0,1,0,0,0,1"))
(rule "polySimp_addComm0" (formula "32") (term "0,0"))
(rule "polySimp_addComm0" (formula "38") (term "0,1,0,0,1,0,0,0,1"))
(rule "disjointDefinition" (formula "27"))
 (builtin "One Step Simplification" (formula "27"))
(rule "notLeft" (formula "27"))
(rule "eqSymm" (formula "33"))
(rule "disjointDefinition" (formula "26"))
 (builtin "One Step Simplification" (formula "26"))
(rule "notLeft" (formula "26"))
(rule "eqSymm" (formula "32"))
(rule "disjointDefinition" (formula "25"))
 (builtin "One Step Simplification" (formula "25"))
(rule "notLeft" (formula "25"))
(rule "eqSymm" (formula "31"))
(rule "disjointDefinition" (formula "24"))
 (builtin "One Step Simplification" (formula "24"))
(rule "notLeft" (formula "24"))
(rule "eqSymm" (formula "30"))
(rule "disjointDefinition" (formula "23"))
 (builtin "One Step Simplification" (formula "23"))
(rule "notLeft" (formula "23"))
(rule "eqSymm" (formula "29"))
(rule "disjointDefinition" (formula "22"))
 (builtin "One Step Simplification" (formula "22"))
(rule "notLeft" (formula "22"))
(rule "eqSymm" (formula "28"))
(rule "disjointDefinition" (formula "21"))
 (builtin "One Step Simplification" (formula "21"))
(rule "notLeft" (formula "21"))
(rule "eqSymm" (formula "27"))
(rule "disjointDefinition" (formula "20"))
 (builtin "One Step Simplification" (formula "20"))
(rule "notLeft" (formula "20"))
(rule "eqSymm" (formula "26"))
(rule "disjointDefinition" (formula "19"))
 (builtin "One Step Simplification" (formula "19"))
(rule "notLeft" (formula "19"))
(rule "eqSymm" (formula "25"))
(rule "disjointDefinition" (formula "18"))
 (builtin "One Step Simplification" (formula "18"))
(rule "notLeft" (formula "18"))
(rule "eqSymm" (formula "24"))
(rule "disjointDefinition" (formula "17"))
 (builtin "One Step Simplification" (formula "17"))
(rule "notLeft" (formula "17"))
(rule "eqSymm" (formula "23"))
(rule "disjointDefinition" (formula "16"))
 (builtin "One Step Simplification" (formula "16"))
(rule "notLeft" (formula "16"))
(rule "eqSymm" (formula "22"))
(rule "disjointDefinition" (formula "15"))
 (builtin "One Step Simplification" (formula "15"))
(rule "notLeft" (formula "15"))
(rule "eqSymm" (formula "21"))
(rule "disjointDefinition" (formula "13"))
 (builtin "One Step Simplification" (formula "13"))
(rule "notLeft" (formula "13"))
(rule "disjointDefinition" (formula "13"))
 (builtin "One Step Simplification" (formula "13"))
(rule "notLeft" (formula "13"))
(rule "eqSymm" (formula "19"))
(rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "12"))
(rule "inEqSimp_commuteLeq" (formula "10"))
(rule "inEqSimp_commuteLeq" (formula "11"))
(rule "inEqSimp_commuteLeq" (formula "15"))
(rule "assignment" (formula "38") (term "1"))
 (builtin "One Step Simplification" (formula "38"))
(rule "applyEq" (formula "9") (term "1,1") (ifseqformula "13"))
(rule "elementOfArrayRange" (formula "38") (term "0,0,0,0,1,0,1") (inst "iv=iv"))
(rule "inEqSimp_commuteLeq" (formula "38") (term "1,0,0,1,0,0,0,0,1,0,1"))
(rule "methodBodyExpand" (formula "38") (term "1") (newnames "heapBefore_calculate_bucket_starts,savedHeapBefore_calculate_bucket_starts,_beginBefore_calculate_bucket_starts,_bucket_startsBefore_calculate_bucket_starts,_buffersBefore_calculate_bucket_starts,_endBefore_calculate_bucket_starts,_valuesBefore_calculate_bucket_starts,_writeBefore_calculate_bucket_starts"))
 (builtin "One Step Simplification" (formula "38"))
(rule "variableDeclarationAssign" (formula "38") (term "1"))
(rule "variableDeclaration" (formula "38") (term "1") (newnames "sum_1"))
(rule "assignment" (formula "38") (term "1"))
 (builtin "One Step Simplification" (formula "38"))
(rule "for_to_while" (formula "38") (term "1") (inst "#innerLabel=_label0") (inst "#outerLabel=_label1"))
(rule "variableDeclarationAssign" (formula "38") (term "1"))
(rule "variableDeclaration" (formula "38") (term "1") (newnames "j"))
(rule "assignment" (formula "38") (term "1"))
 (builtin "One Step Simplification" (formula "38"))
(rule "elim_double_block_3" (formula "38") (term "1"))
(rule "arrayLengthIsAShort" (formula "9") (term "0"))
 (builtin "One Step Simplification" (formula "9"))
(rule "true_left" (formula "9"))
(rule "arrayLengthNotNegative" (formula "9") (term "0"))
(rule "loopScopeInvDia" (formula "39") (term "1") (newnames "j_0,sum_1_0,o,f") (inst "anon_heap_LOOP=anon_heap_LOOP_0") (inst "anon_savedHeap_LOOP=anon_savedHeap_LOOP_0") (inst "anon_permissions_LOOP=anon_permissions_LOOP_0") (inst "#heapBefore_LOOP=h") (inst "#savedHeapBefore_LOOP=h_1") (inst "#permissionsBefore_LOOP=h_2") (inst "#variant=x") (inst "#x=x_1"))
(branch "Invariant Initially Valid"
   (rule "andRight" (formula "39"))
   (branch "Case 1"
      (rule "andRight" (formula "39"))
      (branch "Case 1"
         (rule "andRight" (formula "39"))
         (branch "Case 1"
            (rule "andRight" (formula "39"))
            (branch "Case 1"
               (rule "andRight" (formula "39"))
               (branch "Case 1"
                  (rule "andRight" (formula "39"))
                  (branch "Case 1"
                      (builtin "One Step Simplification" (formula "39"))
                     (rule "leq_literals" (formula "39"))
                     (rule "closeTrue" (formula "39"))
                  )
                  (branch "Case 2"
                      (builtin "One Step Simplification" (formula "39"))
                     (rule "inEqSimp_leqRight" (formula "39"))
                     (rule "add_zero_right" (formula "1") (term "0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                     (rule "inEqSimp_homoInEq1" (formula "11"))
                     (rule "polySimp_addComm1" (formula "11") (term "0"))
                     (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "15"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "11"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1"))
                     (rule "polySimp_rightDist" (formula "11") (term "1"))
                     (rule "mul_literals" (formula "11") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "11") (term "1,1"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "18"))
                     (rule "polySimp_mulComm0" (formula "17") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "17"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1"))
                     (rule "polySimp_elimOne" (formula "17") (term "1"))
                     (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "9") (inst "b=b"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "translateJavaMulInt" (formula "9") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "9") (term "1,1,0,0,0"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "11"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "notLeft" (formula "11"))
                     (rule "notLeft" (formula "9"))
                     (rule "notLeft" (formula "9"))
                     (rule "eqSymm" (formula "27"))
                     (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "13") (term "0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "11"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
                     (rule "inEqSimp_subsumption0" (formula "12") (ifseqformula "1"))
                     (rule "leq_literals" (formula "12") (term "0"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "true_left" (formula "12"))
                     (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "11"))
                     (rule "qeq_literals" (formula "1") (term "0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
               )
               (branch "Case 2"
                  (rule "impRight" (formula "39"))
                  (rule "andRight" (formula "40"))
                  (branch "Case 1"
                      (builtin "One Step Simplification" (formula "1"))
                      (builtin "One Step Simplification" (formula "40"))
                     (rule "irrflConcrete1" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "Case 2"
                      (builtin "One Step Simplification" (formula "1"))
                      (builtin "One Step Simplification" (formula "40"))
                     (rule "irrflConcrete1" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
               )
            )
            (branch "Case 2"
                (builtin "One Step Simplification" (formula "39"))
               (rule "bsum_lower_equals_upper" (formula "39") (term "0,1"))
               (rule "translateJavaCastInt" (formula "39") (term "1"))
                (builtin "One Step Simplification" (formula "39"))
               (rule "closeTrue" (formula "39"))
            )
         )
         (branch "Case 2"
             (builtin "One Step Simplification" (formula "39"))
            (rule "inEqSimp_homoInEq1" (formula "10"))
            (rule "polySimp_addComm1" (formula "10") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "10"))
            (rule "polySimp_mulComm0" (formula "10") (term "1"))
            (rule "polySimp_rightDist" (formula "10") (term "1"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,1"))
            (rule "mul_literals" (formula "10") (term "0,1"))
            (rule "polySimp_elimOne" (formula "10") (term "1,1"))
            (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "17"))
            (rule "polySimp_mulComm0" (formula "16") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "16"))
            (rule "polySimp_mulLiterals" (formula "16") (term "1"))
            (rule "polySimp_elimOne" (formula "16") (term "1"))
            (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "39") (term "0"))
            (rule "replace_known_left" (formula "1") (term "1,0") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "37")) (ifInst ""  (formula "40")))
            (rule "true_left" (formula "1"))
            (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "18") (term "0"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "translateJavaMod" (formula "18") (term "0"))
            (rule "jmod_axiom" (formula "18") (term "0"))
            (rule "polySimp_mulLiterals" (formula "18") (term "1,0"))
            (rule "polySimp_sepNegMonomial" (formula "18"))
            (rule "polySimp_mulLiterals" (formula "18") (term "0"))
            (rule "newSym_eq" (formula "18") (inst "newSymDef=add(mul(begin, Z(0(#))), mul(write, Z(0(#))))") (inst "l=l_0"))
            (rule "times_zero_1" (formula "18") (term "1,1,1"))
            (rule "times_zero_1" (formula "18") (term "0,1,1"))
            (rule "add_zero_left" (formula "18") (term "1,1"))
            (rule "add_zero_right" (formula "18") (term "1"))
            (rule "applyEq" (formula "19") (term "0,0") (ifseqformula "18"))
            (rule "polySimp_homoEq" (formula "19"))
            (rule "polySimp_mulLiterals" (formula "19") (term "1,0"))
            (rule "polySimp_addComm1" (formula "19") (term "0"))
            (rule "polySimp_addComm0" (formula "19") (term "0,0"))
            (rule "polySimp_sepPosMonomial" (formula "19"))
            (rule "polySimp_mulComm0" (formula "19") (term "1"))
            (rule "polySimp_rightDist" (formula "19") (term "1"))
            (rule "polySimp_mulLiterals" (formula "19") (term "1,1"))
            (rule "polySimp_elimOne" (formula "19") (term "1,1"))
            (rule "polySimp_mulComm0" (formula "19") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "19") (term "0,1"))
            (rule "applyEq" (formula "17") (term "0") (ifseqformula "19"))
            (rule "inEqSimp_commuteLeq" (formula "17"))
            (rule "applyEq" (formula "16") (term "0") (ifseqformula "19"))
            (rule "inEqSimp_homoInEq1" (formula "16"))
            (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
            (rule "polySimp_rightDist" (formula "16") (term "1,0"))
            (rule "polySimp_mulAssoc" (formula "16") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "16") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "16") (term "0"))
            (rule "polySimp_addComm0" (formula "16") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "16") (term "0"))
            (rule "add_literals" (formula "16") (term "1,1,0"))
            (rule "times_zero_1" (formula "16") (term "1,0"))
            (rule "add_zero_right" (formula "16") (term "0"))
            (rule "applyEq" (formula "18") (term "1,0,0") (ifseqformula "19"))
            (rule "polySimp_addAssoc" (formula "18") (term "0,0"))
            (rule "polySimp_addComm0" (formula "18") (term "0,0,0"))
            (rule "polySimp_pullOutFactor2b" (formula "18") (term "0,0"))
            (rule "add_literals" (formula "18") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "18") (term "1,0,0"))
            (rule "add_zero_right" (formula "18") (term "0,0"))
            (rule "applyEq" (formula "15") (term "4,0") (ifseqformula "19"))
            (rule "inEqSimp_invertInEq0" (formula "16"))
            (rule "polySimp_mulLiterals" (formula "16") (term "0"))
            (rule "times_zero_2" (formula "16") (term "1"))
            (rule "elimGcdGeq_antec" (formula "16") (inst "elimGcd=Z(6(5(2(#))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcdRightDiv=Z(0(#))"))
            (rule "polySimp_mulLiterals" (formula "16") (term "1,0,1,0"))
            (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,1,0"))
            (rule "leq_literals" (formula "16") (term "0,0"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "add_zero_right" (formula "16") (term "0,0,0,0"))
            (rule "add_zero_right" (formula "16") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,0"))
            (rule "add_literals" (formula "16") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "16") (term "1,0,0"))
            (rule "add_literals" (formula "16") (term "0,0"))
            (rule "leq_literals" (formula "16") (term "0"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "8") (inst "b=b"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "translateJavaMulInt" (formula "8") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "8") (term "1,1,0,0,0"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "10"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "8"))
            (rule "notLeft" (formula "10"))
            (rule "notLeft" (formula "9"))
            (rule "notLeft" (formula "8"))
            (rule "eqSymm" (formula "27"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "10"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
            (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
            (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "14"))
            (rule "times_zero_1" (formula "10") (term "0,0"))
            (rule "add_zero_left" (formula "10") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "10"))
            (rule "mul_literals" (formula "10") (term "1"))
            (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "10"))
            (rule "leq_literals" (formula "14") (term "0"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "true_left" (formula "14"))
            (rule "nnf_imp2or" (formula "13") (term "0"))
            (rule "nnf_notAnd" (formula "13") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
            (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "13") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
            (rule "mul_literals" (formula "13") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
            (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "46") (term "0"))
            (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "44"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "2")) (ifInst ""  (formula "47")))
            (rule "true_left" (formula "1"))
            (rule "Definition_axiom_for_isClassifiedUntil_in_de_wiesler_Classifier" (formula "19") (term "0") (inst "b=b"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "translateJavaSubInt" (formula "19") (term "1,1"))
            (rule "andLeft" (formula "19"))
            (rule "andLeft" (formula "19"))
            (rule "andLeft" (formula "19"))
            (rule "andLeft" (formula "19"))
            (rule "polySimp_elimSub" (formula "23") (term "1"))
            (rule "polySimp_mulComm0" (formula "23") (term "1,1"))
            (rule "polySimp_rightDist" (formula "23") (term "1,1"))
            (rule "polySimp_mulAssoc" (formula "23") (term "0,1,1"))
            (rule "polySimp_mulComm0" (formula "23") (term "0,0,1,1"))
            (rule "polySimp_mulLiterals" (formula "23") (term "0,1,1"))
            (rule "polySimp_addComm0" (formula "23") (term "1"))
            (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
            (rule "applyEq" (formula "22") (term "0,1,0,0,1,0,0") (ifseqformula "18"))
            (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
            (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
            (rule "nnf_imp2or" (formula "22") (term "0"))
            (rule "nnf_notAnd" (formula "22") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
            (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "22") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
            (rule "mul_literals" (formula "22") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
            (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "28"))
             (builtin "One Step Simplification" (formula "28"))
            (rule "translateJavaSubInt" (formula "28") (term "0,2,0,1,0"))
            (rule "translateJavaSubInt" (formula "28") (term "0,2,1,1,0"))
            (rule "translateJavaMulInt" (formula "28") (term "1,1,1,0,0,0,0"))
            (rule "andLeft" (formula "28"))
            (rule "andLeft" (formula "28"))
            (rule "andLeft" (formula "28"))
            (rule "andLeft" (formula "28"))
            (rule "andLeft" (formula "28"))
            (rule "andLeft" (formula "28"))
            (rule "andLeft" (formula "28"))
            (rule "andLeft" (formula "30"))
            (rule "notLeft" (formula "28"))
            (rule "notLeft" (formula "28"))
            (rule "eqSymm" (formula "33"))
            (rule "eqSymm" (formula "30"))
            (rule "polySimp_elimSub" (formula "33") (term "0,2,0"))
            (rule "mul_literals" (formula "33") (term "1,0,2,0"))
            (rule "eqSymm" (formula "33"))
            (rule "polySimp_elimSub" (formula "33") (term "0,2,0"))
            (rule "mul_literals" (formula "33") (term "1,0,2,0"))
            (rule "eqSymm" (formula "33"))
            (rule "polySimp_mulComm0" (formula "30") (term "1,0"))
            (rule "polySimp_addComm0" (formula "33") (term "0,2,0"))
            (rule "eqSymm" (formula "33"))
            (rule "polySimp_addComm0" (formula "33") (term "0,2,0"))
            (rule "eqSymm" (formula "33"))
            (rule "inEqSimp_commuteLeq" (formula "28"))
            (rule "applyEq" (formula "29") (term "0") (ifseqformula "18"))
            (rule "applyEq" (formula "28") (term "0") (ifseqformula "18"))
            (rule "applyEq" (formula "29") (term "1") (ifseqformula "18"))
            (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "28"))
            (rule "leq_literals" (formula "11") (term "0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "inEqSimp_exactShadow3" (formula "27") (ifseqformula "13"))
            (rule "mul_literals" (formula "27") (term "0,0"))
            (rule "polySimp_addAssoc" (formula "27") (term "0"))
            (rule "add_literals" (formula "27") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "27"))
            (rule "mul_literals" (formula "27") (term "1"))
            (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "27"))
            (rule "leq_literals" (formula "10") (term "0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "true_left" (formula "10"))
            (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "56") (term "0") (inst "i=i"))
             (builtin "One Step Simplification" (formula "56"))
            (rule "translateJavaSubInt" (formula "56") (term "1,1,0,0"))
            (rule "translateJavaAddInt" (formula "56") (term "0,2,1,1,0"))
            (rule "sub_literals" (formula "56") (term "1,1,0,0"))
            (rule "allRight" (formula "56") (inst "sk=i_0"))
            (rule "impRight" (formula "56"))
            (rule "andLeft" (formula "1"))
            (rule "polySimp_addComm0" (formula "58") (term "0,2,1"))
            (rule "inEqSimp_leqRight" (formula "58"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "3"))
            (rule "mul_literals" (formula "3") (term "1,0,0"))
            (rule "add_literals" (formula "3") (term "0,0"))
            (rule "inEqSimp_commuteLeq" (formula "2"))
            (rule "inEqSimp_sepNegMonomial1" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "3"))
            (rule "mul_literals" (formula "3") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "2"))
            (rule "qeq_literals" (formula "3") (term "0"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "closeFalse" (formula "3"))
         )
      )
      (branch "Case 2"
          (builtin "One Step Simplification" (formula "39"))
         (rule "allRight" (formula "39") (inst "sk=b_0") (userinteraction))
         (rule "impRight" (formula "39"))
         (rule "andLeft" (formula "1"))
         (rule "inEqSimp_ltToLeq" (formula "2"))
         (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "2") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "1"))
         (rule "inEqSimp_homoInEq1" (formula "12"))
         (rule "polySimp_addComm1" (formula "12") (term "0"))
         (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "16"))
         (rule "inEqSimp_sepPosMonomial0" (formula "12"))
         (rule "polySimp_mulComm0" (formula "12") (term "1"))
         (rule "polySimp_rightDist" (formula "12") (term "1"))
         (rule "mul_literals" (formula "12") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
         (rule "polySimp_elimOne" (formula "12") (term "1,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "2"))
         (rule "polySimp_mulLiterals" (formula "2") (term "0"))
         (rule "polySimp_elimOne" (formula "2") (term "0"))
         (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "12"))
         (rule "polySimp_rightDist" (formula "2") (term "0,0"))
         (rule "mul_literals" (formula "2") (term "0,0,0"))
         (rule "polySimp_addAssoc" (formula "2") (term "0"))
         (rule "polySimp_addComm1" (formula "2") (term "0,0"))
         (rule "add_literals" (formula "2") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "2"))
         (rule "polySimp_mulComm0" (formula "2") (term "1"))
         (rule "polySimp_rightDist" (formula "2") (term "1"))
         (rule "mul_literals" (formula "2") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
         (rule "polySimp_elimOne" (formula "2") (term "1,1"))
         (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "20"))
         (rule "polySimp_mulComm0" (formula "19") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "19"))
         (rule "polySimp_mulLiterals" (formula "19") (term "1"))
         (rule "polySimp_elimOne" (formula "19") (term "1"))
         (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "11") (inst "b=b"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "translateJavaMulInt" (formula "11") (term "1,1,0,0,0"))
         (rule "mul_literals" (formula "11") (term "1,1,0,0,0"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "13"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "11"))
         (rule "notLeft" (formula "13"))
         (rule "notLeft" (formula "12"))
         (rule "notLeft" (formula "11"))
         (rule "eqSymm" (formula "29"))
         (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "15") (term "0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "13"))
         (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
         (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
         (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "14"))
         (rule "polySimp_rightDist" (formula "3") (term "0,0"))
         (rule "mul_literals" (formula "3") (term "0,0,0"))
         (rule "polySimp_addComm1" (formula "3") (term "0"))
         (rule "add_literals" (formula "3") (term "0,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "3"))
         (rule "polySimp_mulLiterals" (formula "3") (term "0"))
         (rule "polySimp_elimOne" (formula "3") (term "0"))
         (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "18"))
         (rule "times_zero_1" (formula "14") (term "0,0"))
         (rule "add_zero_left" (formula "14") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "14"))
         (rule "mul_literals" (formula "14") (term "1"))
         (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "14"))
         (rule "leq_literals" (formula "18") (term "0"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "true_left" (formula "18"))
         (rule "nnf_imp2or" (formula "17") (term "0"))
         (rule "nnf_notAnd" (formula "17") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
         (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "17") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
         (rule "mul_literals" (formula "17") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
         (rule "Definition_axiom_for_isClassifiedUntil_in_de_wiesler_Classifier" (formula "23") (term "0") (inst "b=b"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "translateJavaSubInt" (formula "23") (term "1,1"))
         (rule "andLeft" (formula "23"))
         (rule "andLeft" (formula "23"))
         (rule "andLeft" (formula "23"))
         (rule "andLeft" (formula "23"))
         (rule "polySimp_elimSub" (formula "27") (term "1"))
         (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
         (rule "applyEq" (formula "26") (term "0,1,0,0,1,0,0") (ifseqformula "22"))
         (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "26") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
         (rule "nnf_imp2or" (formula "26") (term "0"))
         (rule "nnf_notAnd" (formula "26") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
         (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
         (rule "mul_literals" (formula "26") (term "1,0,0,0"))
         (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "30") (term "0"))
          (builtin "One Step Simplification" (formula "30"))
         (rule "translateJavaMod" (formula "30") (term "0"))
         (rule "jmod_axiom" (formula "30") (term "0"))
         (rule "polySimp_mulLiterals" (formula "30") (term "1,0"))
         (rule "polySimp_sepNegMonomial" (formula "30"))
         (rule "polySimp_mulLiterals" (formula "30") (term "0"))
         (rule "newSym_eq" (formula "30") (inst "newSymDef=add(mul(begin, Z(0(#))), mul(write, Z(0(#))))") (inst "l=l_0"))
         (rule "times_zero_1" (formula "30") (term "1,1,1"))
         (rule "times_zero_1" (formula "30") (term "0,1,1"))
         (rule "add_zero_left" (formula "30") (term "1,1"))
         (rule "add_zero_right" (formula "30") (term "1"))
         (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "30"))
         (rule "polySimp_homoEq" (formula "31"))
         (rule "polySimp_mulLiterals" (formula "31") (term "1,0"))
         (rule "polySimp_addComm1" (formula "31") (term "0"))
         (rule "polySimp_addComm0" (formula "31") (term "0,0"))
         (rule "polySimp_sepPosMonomial" (formula "31"))
         (rule "polySimp_mulComm0" (formula "31") (term "1"))
         (rule "polySimp_rightDist" (formula "31") (term "1"))
         (rule "polySimp_mulLiterals" (formula "31") (term "1,1"))
         (rule "polySimp_elimOne" (formula "31") (term "1,1"))
         (rule "polySimp_mulComm0" (formula "31") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "31") (term "0,1"))
         (rule "applyEq" (formula "30") (term "1,0,0") (ifseqformula "31"))
         (rule "polySimp_addAssoc" (formula "30") (term "0,0"))
         (rule "polySimp_addComm0" (formula "30") (term "0,0,0"))
         (rule "polySimp_pullOutFactor2b" (formula "30") (term "0,0"))
         (rule "add_literals" (formula "30") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "30") (term "1,0,0"))
         (rule "add_zero_right" (formula "30") (term "0,0"))
         (rule "applyEq" (formula "29") (term "0") (ifseqformula "31"))
         (rule "inEqSimp_commuteLeq" (formula "29"))
         (rule "applyEq" (formula "24") (term "4,0") (ifseqformula "31"))
         (rule "applyEq" (formula "28") (term "0") (ifseqformula "31"))
         (rule "inEqSimp_homoInEq1" (formula "28"))
         (rule "polySimp_mulComm0" (formula "28") (term "1,0"))
         (rule "polySimp_rightDist" (formula "28") (term "1,0"))
         (rule "polySimp_mulAssoc" (formula "28") (term "0,1,0"))
         (rule "polySimp_mulComm0" (formula "28") (term "0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "28") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "28") (term "0"))
         (rule "polySimp_addComm0" (formula "28") (term "0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "28") (term "0"))
         (rule "add_literals" (formula "28") (term "1,1,0"))
         (rule "times_zero_1" (formula "28") (term "1,0"))
         (rule "add_zero_right" (formula "28") (term "0"))
         (rule "applyEq" (formula "23") (term "4,0") (ifseqformula "31"))
         (rule "applyEq" (formula "27") (term "0,1,1") (ifseqformula "31"))
         (rule "polySimp_mulComm0" (formula "27") (term "1,1"))
         (rule "polySimp_rightDist" (formula "27") (term "1,1"))
         (rule "polySimp_mulAssoc" (formula "27") (term "0,1,1"))
         (rule "polySimp_mulComm0" (formula "27") (term "0,0,1,1"))
         (rule "polySimp_mulLiterals" (formula "27") (term "0,1,1"))
         (rule "polySimp_addComm0" (formula "27") (term "1"))
         (rule "applyEq" (formula "54") (term "4,1") (ifseqformula "31"))
         (rule "inEqSimp_invertInEq0" (formula "28"))
         (rule "mul_literals" (formula "28") (term "1"))
         (rule "polySimp_mulLiterals" (formula "28") (term "0"))
         (rule "elimGcdGeq_antec" (formula "28") (inst "elimGcd=Z(6(5(2(#))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcdRightDiv=Z(0(#))"))
         (rule "leq_literals" (formula "28") (term "0,0"))
          (builtin "One Step Simplification" (formula "28"))
         (rule "add_zero_right" (formula "28") (term "0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "28") (term "1,0,0"))
         (rule "times_zero_1" (formula "28") (term "1,0,0,0,0"))
         (rule "add_zero_right" (formula "28") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "28") (term "0,0"))
         (rule "add_literals" (formula "28") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "28") (term "1,0,0"))
         (rule "add_zero_right" (formula "28") (term "0,0"))
         (rule "leq_literals" (formula "28") (term "0"))
          (builtin "One Step Simplification" (formula "28"))
         (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "32"))
          (builtin "One Step Simplification" (formula "32"))
         (rule "translateJavaMulInt" (formula "32") (term "1,1,1,0,0,0,0"))
         (rule "translateJavaSubInt" (formula "32") (term "0,2,0,1,0"))
         (rule "translateJavaSubInt" (formula "32") (term "0,2,1,1,0"))
         (rule "andLeft" (formula "32"))
         (rule "andLeft" (formula "32"))
         (rule "andLeft" (formula "32"))
         (rule "andLeft" (formula "32"))
         (rule "andLeft" (formula "32"))
         (rule "andLeft" (formula "32"))
         (rule "andLeft" (formula "32"))
         (rule "andLeft" (formula "34"))
         (rule "notLeft" (formula "32"))
         (rule "notLeft" (formula "32"))
         (rule "eqSymm" (formula "37"))
         (rule "eqSymm" (formula "34"))
         (rule "polySimp_elimSub" (formula "37") (term "0,2,0"))
         (rule "mul_literals" (formula "37") (term "1,0,2,0"))
         (rule "eqSymm" (formula "37"))
         (rule "polySimp_elimSub" (formula "37") (term "0,2,0"))
         (rule "mul_literals" (formula "37") (term "1,0,2,0"))
         (rule "eqSymm" (formula "37"))
         (rule "polySimp_mulComm0" (formula "34") (term "1,0"))
         (rule "polySimp_addComm0" (formula "37") (term "0,2,0"))
         (rule "eqSymm" (formula "37"))
         (rule "polySimp_addComm0" (formula "37") (term "0,2,0"))
         (rule "eqSymm" (formula "37"))
         (rule "inEqSimp_commuteLeq" (formula "32"))
         (rule "applyEq" (formula "32") (term "0") (ifseqformula "22"))
         (rule "applyEq" (formula "33") (term "0") (ifseqformula "22"))
         (rule "applyEq" (formula "33") (term "1") (ifseqformula "22"))
         (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "32"))
         (rule "leq_literals" (formula "15") (term "0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "true_left" (formula "15"))
         (rule "inEqSimp_exactShadow3" (formula "31") (ifseqformula "17"))
         (rule "mul_literals" (formula "31") (term "0,0"))
         (rule "polySimp_addAssoc" (formula "31") (term "0"))
         (rule "add_literals" (formula "31") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "31"))
         (rule "mul_literals" (formula "31") (term "1"))
         (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "31"))
         (rule "leq_literals" (formula "14") (term "0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "true_left" (formula "14"))
         (rule "Contract_axiom_for_count_in_Buffers" (formula "25") (term "0"))
         (rule "replace_known_left" (formula "25") (term "1,0,0") (ifseqformula "10"))
          (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "5")) (ifInst ""  (formula "57")))
         (rule "true_left" (formula "25"))
         (rule "Definition_axiom_for_count_in_de_wiesler_Buffers" (formula "25") (term "0") (inst "b=b"))
         (rule "translateJavaCastInt" (formula "25") (term "0"))
         (rule "Contract_axiom_for_isClassifiedWith_in_Buffers" (formula "23") (term "0"))
         (rule "replace_known_left" (formula "23") (term "1,0,0,0") (ifseqformula "5"))
          (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "20")) (ifInst ""  (formula "60")) (ifInst ""  (formula "10")) (ifInst ""  (formula "57")))
         (rule "Definition_axiom_for_isClassifiedWith_in_de_wiesler_Buffers" (formula "24") (term "0") (inst "b=b"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "translateJavaMulInt" (formula "24") (term "0,4,0,1,0"))
         (rule "translateJavaMulInt" (formula "24") (term "3,0,1,0"))
         (rule "translateJavaAddInt" (formula "24") (term "4,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
         (rule "nnf_imp2or" (formula "24") (term "0"))
         (rule "nnf_notAnd" (formula "24") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
         (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "24") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
         (rule "mul_literals" (formula "24") (term "1,0,0,0"))
         (rule "Definition_axiom_for_isValidBufferLen_in_de_wiesler_Classifier" (formula "25") (term "0,1,0"))
          (builtin "One Step Simplification" (formula "25"))
         (rule "inEqSimp_ltToLeq" (formula "25") (term "0,1,1,0"))
         (rule "add_zero_right" (formula "25") (term "0,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "25") (term "0,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "25") (term "0,0,1,1,0"))
         (rule "nnf_imp2or" (formula "25") (term "1,1,0"))
         (rule "inEqSimp_notGeq" (formula "25") (term "0,1,1,0"))
         (rule "mul_literals" (formula "25") (term "1,0,0,0,1,1,0"))
         (rule "add_literals" (formula "25") (term "0,0,0,1,1,0"))
         (rule "add_zero_left" (formula "25") (term "0,0,1,1,0"))
         (rule "Contract_axiom_for_isClassifiedBlocksRange_in_Classifier" (formula "22") (term "0"))
         (rule "translateJavaSubInt" (formula "22") (term "0,0,0,0,0,0,0"))
         (rule "replace_known_left" (formula "22") (term "1,0,0") (ifseqformula "6"))
          (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "60")) (ifInst ""  (formula "5")) (ifInst ""  (formula "61")))
         (rule "polySimp_elimSub" (formula "22") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,0,0"))
         (rule "add_literals" (formula "22") (term "1,1,0,0,0,0"))
         (rule "times_zero_1" (formula "22") (term "1,0,0,0,0"))
         (rule "add_zero_right" (formula "22") (term "0,0,0,0"))
         (rule "Definition_axiom_for_isClassifiedBlocksRange_in_de_wiesler_Classifier" (formula "23") (term "0") (inst "block=block"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "translateJavaSubInt" (formula "23") (term "0,1,1,0,0"))
         (rule "translateJavaAddInt" (formula "23") (term "4,0,1,0"))
         (rule "translateJavaAddInt" (formula "23") (term "3,0,1,0"))
         (rule "translateJavaDivInt" (formula "23") (term "1,1,0,0"))
         (rule "translateJavaMulInt" (formula "23") (term "1,4,0,1,0"))
         (rule "translateJavaMulInt" (formula "23") (term "1,3,0,1,0"))
         (rule "translateJavaAddInt" (formula "23") (term "0,1,4,0,1,0"))
         (rule "polySimp_elimSub" (formula "23") (term "0,1,1,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,1,1,0,0"))
         (rule "add_literals" (formula "23") (term "1,1,0,1,1,0,0"))
         (rule "times_zero_1" (formula "23") (term "1,0,1,1,0,0"))
         (rule "add_zero_right" (formula "23") (term "0,1,1,0,0"))
         (rule "polySimp_mulComm0" (formula "23") (term "1,4,0,1,0"))
         (rule "polySimp_addComm0" (formula "23") (term "1,1,4,0,1,0"))
         (rule "polySimp_rightDist" (formula "23") (term "1,4,0,1,0"))
         (rule "mul_literals" (formula "23") (term "0,1,4,0,1,0"))
         (rule "polySimp_addAssoc" (formula "23") (term "4,0,1,0"))
         (rule "polySimp_addComm0" (formula "23") (term "0,4,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
         (rule "applyEqRigid" (formula "23") (term "0,1,0,0,1,0,0") (ifseqformula "30"))
         (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
         (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
         (rule "nnf_imp2or" (formula "23") (term "0"))
         (rule "nnf_notAnd" (formula "23") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
         (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "23") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
         (rule "mul_literals" (formula "23") (term "1,0,0,0"))
         (rule "cnf_rightDist" (formula "15") (term "0"))
         (rule "Contract_axiom_for_allElementsCounted_in_Classifier" (formula "21") (term "0"))
         (rule "replace_known_right" (formula "21") (term "0,1,1,1,0,0,0,0") (ifseqformula "60"))
          (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "61")) (ifInst ""  (formula "5")) (ifInst ""  (formula "6")) (ifInst ""  (formula "62")))
         (rule "inEqSimp_commuteGeq" (formula "21") (term "0,0"))
         (rule "applyEq" (formula "21") (term "0,0,0") (ifseqformula "20"))
         (rule "inEqSimp_subsumption0" (formula "21") (term "0,0") (ifseqformula "16"))
         (rule "inEqSimp_homoInEq0" (formula "21") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,0"))
         (rule "mul_literals" (formula "21") (term "0,1,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,0"))
         (rule "polySimp_addComm0" (formula "21") (term "0,0,0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,0,0"))
         (rule "add_literals" (formula "21") (term "1,1,0,0,0,0"))
         (rule "times_zero_1" (formula "21") (term "1,0,0,0,0"))
         (rule "add_zero_right" (formula "21") (term "0,0,0,0"))
         (rule "qeq_literals" (formula "21") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "true_left" (formula "21"))
         (rule "Definition_axiom_for_allElementsCounted_in_de_wiesler_Classifier" (formula "21") (term "0") (inst "b_0=b_0") (inst "b=b"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "translateJavaCastInt" (formula "21") (term "0,1"))
         (rule "translateJavaSubInt" (formula "21") (term "1,1"))
         (rule "andLeft" (formula "21"))
         (rule "polySimp_elimSub" (formula "22") (term "1"))
         (rule "polySimp_pullOutFactor1b" (formula "22") (term "1"))
         (rule "add_literals" (formula "22") (term "1,1,1"))
         (rule "times_zero_1" (formula "22") (term "1,1"))
         (rule "add_zero_right" (formula "22") (term "1"))
         (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
         (rule "applyEq" (formula "22") (term "1,0") (ifseqformula "20"))
         (rule "applyEq" (formula "21") (term "0,1,0,0,1,0,0") (ifseqformula "20"))
         (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
         (rule "nnf_imp2or" (formula "21") (term "0"))
         (rule "nnf_notAnd" (formula "21") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
         (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "21") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
         (rule "mul_literals" (formula "21") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
         (rule "Contract_axiom_for_countClassOfSliceEq_in_Classifier" (formula "63") (term "1"))
         (rule "replace_known_right" (formula "1") (term "0,1,0,0,0,0") (ifseqformula "62"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")) (ifInst ""  (formula "7")) (ifInst ""  (formula "63")))
         (rule "true_left" (formula "1"))
         (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "63") (term "1") (inst "i=i"))
         (rule "eqSymm" (formula "63"))
         (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "39"))
          (builtin "One Step Simplification" (formula "39"))
         (rule "translateJavaSubInt" (formula "39") (term "3,0,1"))
         (rule "andLeft" (formula "39"))
         (rule "andLeft" (formula "39"))
         (rule "andLeft" (formula "39"))
         (rule "andLeft" (formula "39"))
         (rule "andLeft" (formula "41"))
         (rule "andLeft" (formula "39"))
         (rule "andLeft" (formula "39"))
         (rule "andLeft" (formula "41"))
         (rule "notLeft" (formula "40"))
         (rule "notLeft" (formula "39"))
         (rule "polySimp_elimSub" (formula "45") (term "3,0"))
         (rule "mul_literals" (formula "45") (term "1,3,0"))
         (rule "polySimp_addComm0" (formula "45") (term "3,0"))
         (rule "inEqSimp_commuteLeq" (formula "44"))
         (rule "inEqSimp_commuteLeq" (formula "43"))
         (rule "inEqSimp_commuteLeq" (formula "42"))
         (rule "inEqSimp_commuteLeq" (formula "39"))
         (rule "applyEq" (formula "43") (term "1") (ifseqformula "41"))
         (rule "applyEq" (formula "45") (term "1,3,0") (ifseqformula "41"))
         (rule "applyEq" (formula "35") (term "0,1,0") (ifseqformula "41"))
         (rule "applyEq" (formula "44") (term "1") (ifseqformula "41"))
         (rule "applyEq" (formula "44") (term "0,0") (ifseqformula "36"))
         (rule "inEqSimp_commuteGeq" (formula "44"))
         (rule "applyEq" (formula "37") (term "3,0") (ifseqformula "41"))
         (rule "applyEq" (formula "35") (term "2,0") (ifseqformula "41"))
         (rule "applyEq" (formula "42") (term "0") (ifseqformula "41"))
         (rule "applyEq" (formula "46") (term "0") (ifseqformula "36"))
         (rule "applyEq" (formula "38") (term "1,0,2,0") (ifseqformula "41"))
         (rule "eqSymm" (formula "38"))
         (rule "applyEq" (formula "45") (term "1,0") (ifseqformula "36"))
         (rule "applyEq" (formula "38") (term "1,0,2,0") (ifseqformula "41"))
         (rule "eqSymm" (formula "38"))
         (rule "inEqSimp_exactShadow3" (formula "42") (ifseqformula "44"))
         (rule "mul_literals" (formula "42") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "42"))
         (rule "mul_literals" (formula "42") (term "1"))
         (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "28") (term "2,0"))
         (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "25") (term "1,0") (inst "b=b"))
          (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "50")) (ifInst ""  (formula "51")) (ifInst ""  (formula "13")) (ifInst ""  (formula "14")))
         (rule "translateJavaMulInt" (formula "25") (term "1,1,0,0,1,0"))
         (rule "mul_literals" (formula "25") (term "1,1,0,0,1,0"))
         (rule "eqSymm" (formula "25") (term "0,0,0,0,1,0"))
         (rule "replace_known_left" (formula "25") (term "1,0,0,1,0") (ifseqformula "12"))
          (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "61")))
         (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,1,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "25") (term "0,1,0,1,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "25") (term "0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,1,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,1,1,0"))
         (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,1,1,0"))
         (rule "mul_literals" (formula "25") (term "0,1,1,0,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,1,1,0"))
         (rule "inEqSimp_subsumption1" (formula "25") (term "0,1,0") (ifseqformula "34"))
         (rule "leq_literals" (formula "25") (term "0,0,1,0"))
          (builtin "One Step Simplification" (formula "25"))
         (rule "nnf_imp2or" (formula "25") (term "0,1,0"))
         (rule "nnf_notAnd" (formula "25") (term "0,0,1,0"))
         (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0,1,0"))
         (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0,1,0"))
         (rule "add_zero_right" (formula "25") (term "0,0,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0,1,0"))
         (rule "mul_literals" (formula "25") (term "1,0,0,0,1,0"))
         (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,1,0"))
         (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,1,0"))
         (rule "add_literals" (formula "25") (term "0,0,0,1,0,0,1,0"))
         (rule "add_zero_left" (formula "25") (term "0,0,1,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,1,0"))
         (rule "Contract_axiom_for_isClassOfSlice_in_Classifier" (formula "26") (term "0,1,0"))
         (rule "replace_known_left" (formula "26") (term "1,0,0") (ifseqformula "6"))
          (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "51")) (ifInst ""  (formula "5")) (ifInst ""  (formula "71")))
         (rule "true_left" (formula "26"))
         (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "26") (term "1,4,0,1,0"))
         (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "27") (term "0,1,0,1,0"))
          (builtin "One Step Simplification" (formula "27"))
         (rule "translateJavaMod" (formula "27") (term "0,1,0,1,0"))
         (rule "jmod_axiom" (formula "27") (term "0,1,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1,0,1,0"))
         (rule "polySimp_sepNegMonomial" (formula "27") (term "1,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "27") (term "0,1,0,1,0"))
         (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "23") (term "1,0"))
          (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "49")) (ifInst ""  (formula "48")) (ifInst ""  (formula "36")))
         (rule "translateJavaSubInt" (formula "23") (term "0,2,0,1,0,1,0"))
         (rule "translateJavaSubInt" (formula "23") (term "0,2,1,1,0,1,0"))
         (rule "translateJavaMulInt" (formula "23") (term "1,1,1,0,0,0,1,0"))
         (rule "eqSymm" (formula "23") (term "1,0,1,0"))
         (rule "eqSymm" (formula "23") (term "1,0,0,0,1,0"))
         (rule "polySimp_elimSub" (formula "23") (term "0,2,1,1,0,1,0"))
         (rule "mul_literals" (formula "23") (term "1,0,2,1,1,0,1,0"))
         (rule "polySimp_elimSub" (formula "23") (term "0,2,0,1,0,1,0"))
         (rule "mul_literals" (formula "23") (term "1,0,2,0,1,0,1,0"))
         (rule "polySimp_mulComm0" (formula "23") (term "1,0,1,0,0,0,1,0"))
         (rule "polySimp_addComm0" (formula "23") (term "0,2,1,1,0,1,0"))
         (rule "polySimp_addComm0" (formula "23") (term "0,2,0,1,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,0,0,1,0"))
         (rule "applyEq" (formula "23") (term "3,0,1,0,0,1,0") (ifseqformula "41"))
         (rule "replace_known_left" (formula "23") (term "1,0,0,1,0") (ifseqformula "37"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "applyEq" (formula "23") (term "1,0,2,0,1,0,1,0") (ifseqformula "41"))
         (rule "eqSymm" (formula "23") (term "1,0,1,0"))
         (rule "applyEq" (formula "23") (term "2,0,1,0,0,1,0") (ifseqformula "41"))
         (rule "applyEq" (formula "23") (term "0,0,0,0,0,1,0") (ifseqformula "20"))
         (rule "replace_known_left" (formula "23") (term "0,0,0,0,1,0") (ifseqformula "34"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "applyEq" (formula "23") (term "1,0,2,0,1,0,1,0") (ifseqformula "41"))
         (rule "eqSymm" (formula "23") (term "1,0,1,0"))
         (rule "replace_known_left" (formula "23") (term "1,0,1,0") (ifseqformula "38"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "applyEq" (formula "23") (term "0,0,0,1,0") (ifseqformula "20"))
         (rule "replace_known_left" (formula "23") (term "0,0,1,0") (ifseqformula "14"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "applyEq" (formula "23") (term "0,1,0,0,1,0") (ifseqformula "41"))
         (rule "applyEq" (formula "23") (term "0,0,1,0") (ifseqformula "35"))
         (rule "eqSymm" (formula "23") (term "0,1,0"))
         (rule "replace_known_left" (formula "23") (term "0,1,0") (ifseqformula "20"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "distr_forallAnd" (formula "15"))
         (rule "andLeft" (formula "15"))
         (rule "Definition_axiom_for_isClassifiedBlock_in_de_wiesler_Classifier" (formula "25") (term "0,1,0") (inst "bucket=bucket"))
          (builtin "One Step Simplification" (formula "25"))
         (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,1,0"))
         (rule "applyEq" (formula "25") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "21"))
         (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,1,0"))
         (rule "mul_literals" (formula "25") (term "0,1,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,1,0"))
         (rule "arrayLengthIsAShort" (formula "2") (term "0"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "true_left" (formula "2"))
         (rule "arrayLengthNotNegative" (formula "2") (term "0"))
         (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "35"))
         (rule "leq_literals" (formula "2") (term "0"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "true_left" (formula "2"))
         (rule "arrayLengthNotNegative" (formula "20") (term "0"))
         (rule "arrayLengthIsAShort" (formula "21") (term "0"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "true_left" (formula "21"))
         (rule "arrayLengthNotNegative" (formula "13") (term "0"))
         (rule "applyEq" (formula "13") (term "0") (ifseqformula "14"))
         (rule "qeq_literals" (formula "13"))
         (rule "true_left" (formula "13"))
         (rule "arrayLengthIsAShort" (formula "13") (term "0"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "true_left" (formula "13"))
         (rule "arrayLengthIsAShort" (formula "12") (term "0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "true_left" (formula "12"))
         (rule "arrayLengthNotNegative" (formula "12") (term "0"))
         (rule "applyEq" (formula "12") (term "0") (ifseqformula "13"))
         (rule "qeq_literals" (formula "12"))
         (rule "true_left" (formula "12"))
         (rule "Contract_axiom_for_countClassOfSliceEq_in_Classifier" (formula "23") (term "1,1,0"))
         (rule "replace_known_left" (formula "23") (term "1,0,0,0") (ifseqformula "5"))
          (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "72")) (ifInst ""  (formula "6")) (ifInst ""  (formula "73")))
         (rule "true_left" (formula "23"))
         (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "23") (term "1,1,0") (inst "i=i"))
         (rule "eqSymm" (formula "23") (term "1,0"))
         (rule "jdiv_axiom" (formula "33") (term "0"))
         (rule "polySimp_mulLiterals" (formula "33") (term "0,0,2,1"))
         (rule "eqSymm" (formula "33"))
         (rule "applyEq" (formula "33") (term "1") (ifseqformula "34"))
         (rule "inEqSimp_subsumption6" (formula "33") (term "0,0") (ifseqformula "31"))
         (rule "times_zero_1" (formula "33") (term "1,1,0,0,0"))
         (rule "greater_literals" (formula "33") (term "0,0,0,0"))
          (builtin "One Step Simplification" (formula "33"))
         (rule "leq_literals" (formula "33") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "33"))
         (rule "polyDiv_pullOut" (formula "33") (term "0") (inst "polyDivCoeff=l_0"))
         (rule "equal_literals" (formula "33") (term "0,0"))
          (builtin "One Step Simplification" (formula "33"))
         (rule "polySimp_mulLiterals" (formula "33") (term "1,0,0,0"))
         (rule "polySimp_pullOutFactor0" (formula "33") (term "0,0,0"))
         (rule "add_literals" (formula "33") (term "1,0,0,0"))
         (rule "times_zero_1" (formula "33") (term "0,0,0"))
         (rule "div_literals" (formula "33") (term "0,0"))
         (rule "add_zero_left" (formula "33") (term "0"))
          (builtin "One Step Simplification" (formula "33"))
         (rule "true_left" (formula "33"))
         (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "73") (term "0,0,2,0"))
         (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "39") (term "0"))
         (rule "replace_known_right" (formula "39") (term "0,0,0") (ifseqformula "51"))
          (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "5")) (ifInst ""  (formula "40")))
         (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "40") (term "0") (inst "j=j_1") (inst "i=i"))
          (builtin "One Step Simplification" (formula "40"))
         (rule "inEqSimp_ltToLeq" (formula "40") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "40") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,1,0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "40") (term "1,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "40") (term "1,1,0,0"))
         (rule "mul_literals" (formula "40") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "40") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "40") (term "1,1,0,0,1,0"))
         (rule "mul_literals" (formula "40") (term "0,1,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "40") (term "1,1,1,0,0,1,0"))
         (rule "nnf_imp2or" (formula "40") (term "0"))
         (rule "nnf_notAnd" (formula "40") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "40") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "40") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "40") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "40") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "40") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "40") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "40") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "40") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "40") (term "0,0,0"))
         (rule "times_zero_1" (formula "40") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "40") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "0,0,0"))
         (rule "mul_literals" (formula "40") (term "1,0,0,0"))
         (rule "nnf_imp2or" (formula "40") (term "0,1,0"))
         (rule "nnf_notAnd" (formula "40") (term "0,0,1,0"))
         (rule "inEqSimp_notGeq" (formula "40") (term "0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "40") (term "1,0,0,0,1,0"))
         (rule "mul_literals" (formula "40") (term "0,1,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "40") (term "1,1,0,0,0,1,0"))
         (rule "inEqSimp_notLeq" (formula "40") (term "1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "40") (term "1,0,0,1,0,0,1,0"))
         (rule "mul_literals" (formula "40") (term "0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "40") (term "0,0,1,0,0,1,0"))
         (rule "add_literals" (formula "40") (term "0,0,0,1,0,0,1,0"))
         (rule "add_zero_left" (formula "40") (term "0,0,1,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "40") (term "1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "40") (term "1,1,0,0,1,0"))
         (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "49") (term "0") (inst "j=j_1") (inst "i=i"))
          (builtin "One Step Simplification" (formula "49"))
         (rule "inEqSimp_ltToLeq" (formula "49") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "49") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "49") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "49") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "49") (term "0,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "49") (term "1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "49") (term "1,0,0,1,0,0,1,0"))
         (rule "mul_literals" (formula "49") (term "0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "49") (term "0,0,1,0,0,1,0"))
         (rule "add_literals" (formula "49") (term "0,0,0,1,0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "49") (term "1,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "49") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "49") (term "0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "49") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "49") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "49") (term "1,1,0,0"))
         (rule "mul_literals" (formula "49") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "49") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "49") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "49") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "49") (term "1,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "49") (term "1,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "49") (term "1,1,1,0,0,1,0"))
         (rule "mul_literals" (formula "49") (term "0,1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "49") (term "1,1,1,0,0,1,0"))
         (rule "nnf_imp2or" (formula "49") (term "0"))
         (rule "nnf_notAnd" (formula "49") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "49") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "49") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "49") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "49") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "49") (term "0,0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "49") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "49") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "49") (term "1,1,0,0"))
         (rule "mul_literals" (formula "49") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "49") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "49") (term "1,1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "49") (term "0,0,0"))
         (rule "times_zero_1" (formula "49") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "49") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "49") (term "0,0,0"))
         (rule "mul_literals" (formula "49") (term "1,0,0,0"))
         (rule "nnf_imp2or" (formula "49") (term "0,1,0"))
         (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "27") (term "1") (inst "b=b"))
          (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "53")) (ifInst ""  (formula "54")) (ifInst ""  (formula "13")) (ifInst ""  (formula "14")))
         (rule "translateJavaMulInt" (formula "27") (term "1,1,0,0,1"))
         (rule "mul_literals" (formula "27") (term "1,1,0,0,1"))
         (rule "eqSymm" (formula "27") (term "0,0,0,0,1"))
         (rule "replace_known_left" (formula "27") (term "1,0,0,1") (ifseqformula "12"))
          (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "64")))
         (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0,1,1"))
         (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "27") (term "0,1,0,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "27") (term "0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,1,1"))
         (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,1,1"))
         (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,1,1"))
         (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,1,1"))
         (rule "mul_literals" (formula "27") (term "0,1,1,0,0,1,1"))
         (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,1,1"))
         (rule "inEqSimp_subsumption1" (formula "27") (term "0,1") (ifseqformula "36"))
         (rule "leq_literals" (formula "27") (term "0,0,1"))
          (builtin "One Step Simplification" (formula "27"))
         (rule "Definition_axiom_for_isClassOfSlice_in_de_wiesler_Classifier" (formula "28") (term "0,1,0") (inst "i=i"))
          (builtin "One Step Simplification" (formula "28"))
         (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0,1,0"))
         (rule "polySimp_mulAssoc" (formula "28") (term "0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "28") (term "0,0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "28") (term "0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "28") (term "0,1,1,0,0,1,0"))
         (rule "mul_literals" (formula "28") (term "0,0,1,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "28") (term "1,0,1,1,0,0,1,0"))
         (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "29") (term "0,0,1,1,1,0"))
         (rule "nnf_notAnd" (formula "49") (term "0,0,1,0"))
         (rule "inEqSimp_notGeq" (formula "49") (term "0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "49") (term "1,0,0,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "49") (term "0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "49") (term "1,0,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "49") (term "1,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "49") (term "1,1,0,0,0,1,0"))
         (rule "mul_literals" (formula "49") (term "0,1,0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "49") (term "1,1,0,0,0,1,0"))
         (rule "inEqSimp_notLeq" (formula "49") (term "1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "49") (term "1,0,0,1,0,0,1,0"))
         (rule "mul_literals" (formula "49") (term "0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "49") (term "0,0,1,0,0,1,0"))
         (rule "add_literals" (formula "49") (term "0,0,0,1,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "49") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "49") (term "1,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "49") (term "1,1,0,0,1,0"))
         (rule "mul_literals" (formula "49") (term "0,1,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "49") (term "1,1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "49") (term "1,1,1,0,0,1,0"))
         (rule "nnf_imp2or" (formula "27") (term "0,1"))
         (rule "nnf_imp2or" (formula "28") (term "0,1,0"))
         (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "25") (term "1"))
          (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "52")) (ifInst ""  (formula "51")) (ifInst ""  (formula "38")))
         (rule "translateJavaSubInt" (formula "25") (term "0,2,0,1,0,1"))
         (rule "translateJavaMulInt" (formula "25") (term "1,1,1,0,0,0,1"))
         (rule "translateJavaSubInt" (formula "25") (term "0,2,1,1,0,1"))
         (rule "eqSymm" (formula "25") (term "1,0,0,0,1"))
         (rule "eqSymm" (formula "25") (term "1,0,1"))
         (rule "polySimp_elimSub" (formula "25") (term "0,2,1,1,0,1"))
         (rule "mul_literals" (formula "25") (term "1,0,2,1,1,0,1"))
         (rule "polySimp_elimSub" (formula "25") (term "0,2,0,1,0,1"))
         (rule "mul_literals" (formula "25") (term "1,0,2,0,1,0,1"))
         (rule "polySimp_mulComm0" (formula "25") (term "1,0,1,0,0,0,1"))
         (rule "polySimp_addComm0" (formula "25") (term "0,2,1,1,0,1"))
         (rule "polySimp_addComm0" (formula "25") (term "0,2,0,1,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,0,0,1"))
         (rule "applyEq" (formula "25") (term "0,0,0,0,0,0,1") (ifseqformula "22"))
         (rule "replace_known_left" (formula "25") (term "0,0,0,0,0,1") (ifseqformula "36"))
          (builtin "One Step Simplification" (formula "25"))
         (rule "applyEq" (formula "25") (term "0,1,0,1,0,0,0,1") (ifseqformula "44"))
         (rule "applyEq" (formula "25") (term "3,0,1,0,0,1") (ifseqformula "44"))
         (rule "applyEq" (formula "25") (term "2,0,1,0,0,0,1") (ifseqformula "44"))
         (rule "applyEq" (formula "25") (term "0,0,0,0,0,1") (ifseqformula "22"))
         (rule "replace_known_left" (formula "25") (term "0,0,0,0,1") (ifseqformula "14"))
          (builtin "One Step Simplification" (formula "25"))
         (rule "applyEq" (formula "25") (term "1,0,2,0,1,0,1") (ifseqformula "44"))
         (rule "eqSymm" (formula "25") (term "1,0,1"))
         (rule "applyEq" (formula "25") (term "0,0,0,0,1") (ifseqformula "37"))
         (rule "eqSymm" (formula "25") (term "0,0,0,1"))
         (rule "replace_known_left" (formula "25") (term "0,0,0,1") (ifseqformula "22"))
          (builtin "One Step Simplification" (formula "25"))
         (rule "applyEq" (formula "25") (term "1,0,2,0,1,0,1") (ifseqformula "44"))
         (rule "eqSymm" (formula "25") (term "1,0,1"))
         (rule "replace_known_left" (formula "25") (term "1,0,1") (ifseqformula "41"))
          (builtin "One Step Simplification" (formula "25"))
         (rule "Contract_axiom_for_isClassOfSlice_in_Classifier" (formula "26") (term "0,1,0,1,0"))
         (rule "replace_known_left" (formula "26") (term "1,0,0") (ifseqformula "6"))
          (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "73")) (ifInst ""  (formula "5")) (ifInst ""  (formula "74")))
         (rule "true_left" (formula "26"))
         (rule "Definition_axiom_for_isClassOfSlice_in_de_wiesler_Classifier" (formula "26") (term "0,1,0,1,0") (inst "i=i"))
          (builtin "One Step Simplification" (formula "26"))
         (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,1,0,1,0"))
         (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,1,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,1,0,0,1,0,1,0"))
         (rule "polySimp_rightDist" (formula "26") (term "0,1,0,0,1,0,0,1,0,1,0"))
         (rule "mul_literals" (formula "26") (term "0,0,1,0,0,1,0,0,1,0,1,0"))
         (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,1,0,1,0"))
         (rule "polySimp_addAssoc" (formula "26") (term "0,0,0,1,0,0,1,0,1,0"))
         (rule "add_literals" (formula "26") (term "0,0,0,0,1,0,0,1,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,1,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,1,0,1,0"))
         (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,1,0,1,0"))
         (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,1,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,1,0,1,0"))
         (rule "polySimp_rightDist" (formula "26") (term "0,1,1,0,0,1,0,1,0"))
         (rule "mul_literals" (formula "26") (term "0,0,1,1,0,0,1,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "26") (term "1,0,1,1,0,0,1,0,1,0"))
         (rule "polySimp_elimOne" (formula "26") (term "1,0,1,1,0,0,1,0,1,0"))
         (rule "nnf_notAnd" (formula "27") (term "0,0,1"))
         (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0,1"))
         (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,1"))
         (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0,1"))
         (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,1"))
         (rule "add_literals" (formula "27") (term "0,0,0,1,0,0,1"))
         (rule "add_zero_left" (formula "27") (term "0,0,1,0,0,1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,1"))
         (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,1"))
         (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0,1"))
         (rule "mul_literals" (formula "27") (term "1,0,0,0,0,0,1"))
         (rule "add_zero_right" (formula "27") (term "0,0,0,0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0,1"))
         (rule "mul_literals" (formula "27") (term "1,0,0,0,1"))
         (rule "commute_or" (formula "16") (term "0"))
         (rule "nnf_notAnd" (formula "28") (term "0,0,1,0"))
         (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "28") (term "0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "28") (term "1,0,1,0,0,1,0,0,1,0"))
         (rule "mul_literals" (formula "28") (term "0,0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "28") (term "0,0,0,1,0,0,1,0"))
         (rule "add_literals" (formula "28") (term "0,0,0,0,1,0,0,1,0"))
         (rule "add_zero_left" (formula "28") (term "0,0,0,1,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "28") (term "0,1,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "28") (term "0,1,1,0,0,1,0"))
         (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0,1,0"))
         (rule "polySimp_mulAssoc" (formula "28") (term "1,0,0,0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "28") (term "0,1,0,0,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "28") (term "1,0,0,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "28") (term "1,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0,0,1,0"))
         (rule "mul_literals" (formula "28") (term "0,1,0,0,0,1,0"))
         (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "23") (term "0,0,2,0,1,0"))
         (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "39") (term "0"))
         (rule "replace_known_right" (formula "39") (term "0,0,0") (ifseqformula "52"))
          (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "5")) (ifInst ""  (formula "40")))
         (rule "replace_known_left" (formula "25") (term "0,1") (ifseqformula "39"))
          (builtin "One Step Simplification" (formula "25"))
         (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "40") (term "0") (inst "i=i"))
          (builtin "One Step Simplification" (formula "40"))
         (rule "translateJavaSubInt" (formula "40") (term "1,1,0,0"))
         (rule "translateJavaAddInt" (formula "40") (term "0,2,1,1,0"))
         (rule "polySimp_elimSub" (formula "40") (term "1,1,0,0"))
         (rule "mul_literals" (formula "40") (term "1,1,1,0,0"))
         (rule "polySimp_addComm0" (formula "40") (term "0,2,1,1,0"))
         (rule "polySimp_addComm0" (formula "40") (term "1,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "40") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "40") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "40") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "40") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "40") (term "0,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "40") (term "1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "40") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "40") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "40") (term "1,1,1,0,0"))
         (rule "nnf_imp2or" (formula "26") (term "0,1,0,1,0"))
         (rule "nnf_imp2or" (formula "40") (term "0"))
         (rule "nnf_notAnd" (formula "40") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "40") (term "0,0,0"))
         (rule "mul_literals" (formula "40") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "40") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "0,0,0"))
         (rule "mul_literals" (formula "40") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "40") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "40") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "40") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "40") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "40") (term "0,0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "40") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "40") (term "1,1,0,0"))
         (rule "mul_literals" (formula "40") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "40") (term "1,1,1,0,0"))
         (rule "nnf_notAnd" (formula "26") (term "0,0,1,0,1,0"))
         (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,1,0,1,0"))
         (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0,0,0,1,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0,0,0,1,0,1,0"))
         (rule "polySimp_mulComm0" (formula "26") (term "0,1,0,0,0,0,0,1,0,1,0"))
         (rule "polySimp_addAssoc" (formula "26") (term "0,0,0,0,0,1,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,1,0,1,0"))
         (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,1,0,1,0"))
         (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0,1,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0,1,0,1,0"))
         (rule "polySimp_rightDist" (formula "26") (term "0,1,0,0,0,1,0,1,0"))
         (rule "mul_literals" (formula "26") (term "0,0,1,0,0,0,1,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "26") (term "1,0,1,0,0,0,1,0,1,0"))
         (rule "polySimp_elimOne" (formula "26") (term "1,0,1,0,0,0,1,0,1,0"))
         (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,1,0,1,0"))
         (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,1,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,1,0,0,1,0,1,0"))
         (rule "polySimp_rightDist" (formula "26") (term "0,1,0,0,1,0,0,1,0,1,0"))
         (rule "mul_literals" (formula "26") (term "0,0,1,0,0,1,0,0,1,0,1,0"))
         (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,1,0,1,0"))
         (rule "polySimp_addAssoc" (formula "26") (term "0,0,0,1,0,0,1,0,1,0"))
         (rule "add_literals" (formula "26") (term "0,0,0,0,1,0,0,1,0,1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,1,0,1,0"))
         (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,1,0,1,0"))
         (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,1,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,1,0,1,0"))
         (rule "polySimp_rightDist" (formula "26") (term "0,1,1,0,0,1,0,1,0"))
         (rule "mul_literals" (formula "26") (term "0,0,1,1,0,0,1,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "26") (term "1,0,1,1,0,0,1,0,1,0"))
         (rule "polySimp_elimOne" (formula "26") (term "1,0,1,1,0,0,1,0,1,0"))
         (rule "ifthenelse_split" (formula "37") (term "0"))
         (branch "self.equal_buckets = TRUE TRUE"
            (rule "newSym_eq" (formula "38") (inst "newSymDef=mul(int::final(buffers,
               de.wiesler.Buffers::$num_buckets),
    Z(0(#)))") (inst "l=l_1"))
            (rule "times_zero_1" (formula "38") (term "1,1"))
            (rule "add_zero_right" (formula "38") (term "1"))
            (rule "applyEq" (formula "51") (term "0") (ifseqformula "38"))
            (rule "inEqSimp_commuteLeq" (formula "51"))
            (rule "applyEq" (formula "50") (term "1") (ifseqformula "38"))
            (rule "applyEq" (formula "41") (term "3,0") (ifseqformula "38"))
            (rule "applyEq" (formula "39") (term "0,0") (ifseqformula "38"))
            (rule "eqSymm" (formula "39"))
            (rule "applyEq" (formula "44") (term "1,0,2,0") (ifseqformula "38"))
            (rule "eqSymm" (formula "44"))
            (rule "applyEq" (formula "52") (term "1,1,1,0,0,1,0") (ifseqformula "38"))
            (rule "applyEq" (formula "43") (term "1,1,0,0") (ifseqformula "38"))
            (rule "applyEq" (formula "42") (term "1,1,1,0,0") (ifseqformula "38"))
            (rule "applyEq" (formula "49") (term "0") (ifseqformula "38"))
            (rule "applyEq" (formula "43") (term "1,1,0,0,1,0") (ifseqformula "38"))
            (rule "applyEq" (formula "52") (term "1,1,1,0,0") (ifseqformula "38"))
            (rule "applyEq" (formula "15") (term "1,1,0,0") (ifseqformula "39"))
            (rule "applyEq" (formula "23") (term "1,1,0,0") (ifseqformula "39"))
            (rule "applyEq" (formula "17") (term "0") (ifseqformula "39"))
            (rule "inEqSimp_homoInEq0" (formula "17"))
            (rule "polySimp_mulLiterals" (formula "17") (term "1,0"))
            (rule "polySimp_addComm1" (formula "17") (term "0"))
            (rule "applyEq" (formula "24") (term "1,0") (ifseqformula "39"))
            (rule "applyEq" (formula "29") (term "1,1,0,0") (ifseqformula "39"))
            (rule "applyEq" (formula "28") (term "1,1,0,0") (ifseqformula "39"))
            (rule "applyEq" (formula "44") (term "1,0,2,0") (ifseqformula "38"))
            (rule "eqSymm" (formula "44"))
            (rule "applyEq" (formula "14") (term "0") (ifseqformula "39"))
            (rule "applyEq" (formula "4") (term "0") (ifseqformula "39"))
            (rule "inEqSimp_homoInEq1" (formula "4"))
            (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
            (rule "polySimp_addComm1" (formula "4") (term "0"))
            (rule "applyEq" (formula "36") (term "0") (ifseqformula "39"))
            (rule "applyEq" (formula "30") (term "1,0") (ifseqformula "39"))
            (rule "applyEq" (formula "16") (term "1,1,0,0") (ifseqformula "39"))
            (rule "applyEq" (formula "26") (term "1,1,1,0,0,1,0") (ifseqformula "39"))
            (rule "applyEq" (formula "27") (term "1,1,0,0,1,0") (ifseqformula "39"))
            (rule "applyEq" (formula "27") (term "1,1,0,0,1") (ifseqformula "39"))
            (rule "applyEq" (formula "22") (term "1") (ifseqformula "39"))
            (rule "applyEq" (formula "47") (term "1") (ifseqformula "38"))
            (rule "inEqSimp_sepPosMonomial1" (formula "17"))
            (rule "polySimp_mulComm0" (formula "17") (term "1"))
            (rule "polySimp_rightDist" (formula "17") (term "1"))
            (rule "polySimp_mulLiterals" (formula "17") (term "1,1"))
            (rule "mul_literals" (formula "17") (term "0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "4"))
            (rule "polySimp_mulComm0" (formula "4") (term "1"))
            (rule "polySimp_rightDist" (formula "4") (term "1"))
            (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
            (rule "mul_literals" (formula "4") (term "0,1"))
            (rule "inEqSimp_subsumption6" (formula "36") (ifseqformula "49"))
            (rule "greater_literals" (formula "36") (term "0,0"))
             (builtin "One Step Simplification" (formula "36"))
            (rule "mul_literals" (formula "36") (term "1,0"))
            (rule "leq_literals" (formula "36") (term "0"))
             (builtin "One Step Simplification" (formula "36"))
            (rule "true_left" (formula "36"))
            (rule "elimGcdLeq_antec" (formula "14") (inst "elimGcd=Z(2(#))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcdRightDiv=Z(4(6(#)))"))
            (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,0"))
            (rule "leq_literals" (formula "14") (term "0,0"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0,0,0"))
            (rule "neg_literal" (formula "14") (term "0,0,0,0,0,0"))
            (rule "mul_literals" (formula "14") (term "1,0,0,0,0,0"))
            (rule "add_literals" (formula "14") (term "0,0,0,0,0"))
            (rule "add_literals" (formula "14") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,0"))
            (rule "add_literals" (formula "14") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "14") (term "1,0,0"))
            (rule "add_zero_right" (formula "14") (term "0,0"))
            (rule "qeq_literals" (formula "14") (term "0"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "4"))
            (rule "times_zero_1" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "inEqSimp_subsumption6" (formula "1") (ifseqformula "49"))
            (rule "mul_literals" (formula "1") (term "1,1,0"))
            (rule "greater_literals" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "leq_literals" (formula "1") (term "0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "14"))
            (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "24") (term "1,0"))
             (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "51")) (ifInst ""  (formula "44")))
            (rule "translateJavaSubInt" (formula "24") (term "3,0,1,1,0"))
            (rule "polySimp_elimSub" (formula "24") (term "3,0,1,1,0"))
            (rule "mul_literals" (formula "24") (term "1,3,0,1,1,0"))
            (rule "polySimp_addComm0" (formula "24") (term "3,0,1,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "24") (term "1,1,0,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "24") (term "0,1,0,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "24") (term "1,0,0,0,0,1,0"))
            (rule "replace_known_left" (formula "24") (term "1,0,0,0,0,1,0") (ifseqformula "43"))
             (builtin "One Step Simplification" (formula "24"))
            (rule "inEqSimp_commuteLeq" (formula "24") (term "1,0,1,0"))
            (rule "applyEq" (formula "24") (term "1,3,0,1,1,0") (ifseqformula "45"))
            (rule "applyEq" (formula "24") (term "0,0,0,0,0,0,1,0") (ifseqformula "38"))
            (rule "replace_known_right" (formula "24") (term "0,0,0,0,0,1,0") (ifseqformula "52"))
             (builtin "One Step Simplification" (formula "24"))
            (rule "applyEq" (formula "24") (term "0,0,1,0,0,1,0") (ifseqformula "45"))
            (rule "replace_known_left" (formula "24") (term "0,1,0,0,1,0") (ifseqformula "47"))
             (builtin "One Step Simplification" (formula "24"))
            (rule "applyEq" (formula "24") (term "0,0,1,0,1,0") (ifseqformula "38"))
            (rule "inEqSimp_commuteGeq" (formula "24") (term "1,0,1,0"))
            (rule "applyEq" (formula "24") (term "1,0,1,1,0") (ifseqformula "38"))
            (rule "applyEq" (formula "24") (term "1,1,0,0,1,0") (ifseqformula "45"))
            (rule "replace_known_left" (formula "24") (term "1,0,0,1,0") (ifseqformula "48"))
             (builtin "One Step Simplification" (formula "24"))
            (rule "applyEq" (formula "24") (term "0,1,0,1,0") (ifseqformula "45"))
            (rule "inEqSimp_commuteLeq" (formula "24") (term "1,0,1,0"))
            (rule "replace_known_left" (formula "24") (term "1,0,1,0") (ifseqformula "49"))
             (builtin "One Step Simplification" (formula "24"))
            (rule "applyEq" (formula "24") (term "0,0,1,0") (ifseqformula "45"))
            (rule "eqSymm" (formula "24") (term "0,1,0"))
            (rule "replace_known_left" (formula "24") (term "0,1,0") (ifseqformula "36"))
             (builtin "One Step Simplification" (formula "24"))
            (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "26") (term "0,0"))
             (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "53")) (ifInst ""  (formula "52")) (ifInst ""  (formula "35")) (ifInst ""  (formula "38")))
            (rule "translateJavaSubInt" (formula "26") (term "0,2,0,1,0,0,0"))
            (rule "translateJavaMulInt" (formula "26") (term "1,1,0,0,0,0,0"))
            (rule "translateJavaSubInt" (formula "26") (term "0,2,1,1,0,0,0"))
            (rule "eqSymm" (formula "26") (term "1,0,0,0"))
            (rule "polySimp_elimSub" (formula "26") (term "0,2,0,1,0,0,0"))
            (rule "mul_literals" (formula "26") (term "1,0,2,0,1,0,0,0"))
            (rule "eqSymm" (formula "26") (term "1,0,0,0"))
            (rule "polySimp_elimSub" (formula "26") (term "0,2,0,1,0,0,0"))
            (rule "mul_literals" (formula "26") (term "1,0,2,0,1,0,0,0"))
            (rule "eqSymm" (formula "26") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,0,0,0"))
            (rule "eqSymm" (formula "26") (term "1,0,0,0,0,0"))
            (rule "polySimp_addComm0" (formula "26") (term "0,2,0,1,0,0,0"))
            (rule "eqSymm" (formula "26") (term "1,0,0,0"))
            (rule "polySimp_addComm0" (formula "26") (term "0,2,0,1,0,0,0"))
            (rule "eqSymm" (formula "26") (term "1,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,0,0,0,0"))
            (rule "applyEq" (formula "26") (term "0,0,1,0,0,0,0,0") (ifseqformula "45"))
            (rule "eqSymm" (formula "26") (term "1,0,0,0,0,0"))
            (rule "replace_known_left" (formula "26") (term "1,0,0,0,0,0") (ifseqformula "21"))
             (builtin "One Step Simplification" (formula "26"))
            (rule "applyEq" (formula "26") (term "0,0,0,0,0,0,0") (ifseqformula "21"))
            (rule "applyEq" (formula "26") (term "3,0,1,0,0,0,0") (ifseqformula "45"))
            (rule "replace_known_left" (formula "26") (term "1,0,0,0,0") (ifseqformula "39"))
             (builtin "One Step Simplification" (formula "26"))
            (rule "applyEq" (formula "26") (term "1,0,2,0,1,0,0,0") (ifseqformula "45"))
            (rule "eqSymm" (formula "26") (term "1,0,0,0"))
            (rule "applyEq" (formula "26") (term "0,1,0,0,0,0") (ifseqformula "21"))
            (rule "applyEq" (formula "26") (term "1,0,2,0,1,0,0,0") (ifseqformula "45"))
            (rule "eqSymm" (formula "26") (term "1,0,0,0"))
            (rule "replace_known_left" (formula "26") (term "1,0,0,0") (ifseqformula "42"))
             (builtin "One Step Simplification" (formula "26"))
            (rule "inEqSimp_subsumption6" (formula "26") (term "0,0,0,0") (ifseqformula "47"))
            (rule "greater_literals" (formula "26") (term "0,0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "26"))
            (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0"))
            (rule "leq_literals" (formula "26") (term "0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "26"))
            (rule "elimGcdLeq" (formula "26") (term "0,0,0") (inst "elimGcdRightDiv=Z(6(5(2(#))))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(2(#))"))
            (rule "sub_literals" (formula "26") (term "0,0,0,0,0,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "26") (term "1,0,1,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "26") (term "1,0,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "26") (term "1,0,0,0,0,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "26") (term "0,0,0,0,1,0,0,0,0"))
            (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "26") (term "0,0,0,0,1,0,0,0,0"))
            (rule "polySimp_addLiterals" (formula "26") (term "0,0,0,0,0,0,0,0"))
            (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,0,0"))
            (rule "add_zero_right" (formula "26") (term "0,0,0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "26") (term "0,0,1,0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "26") (term "0,0,0,0,0,0"))
            (rule "add_literals" (formula "26") (term "1,1,0,0,0,0,0,0"))
            (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0,0"))
            (rule "add_zero_right" (formula "26") (term "0,0,0,0,0,0"))
            (rule "leq_literals" (formula "26") (term "0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "26"))
            (rule "polySimp_pullOutFactor0" (formula "26") (term "0,0,0,0,0"))
            (rule "add_literals" (formula "26") (term "1,0,0,0,0,0"))
            (rule "times_zero_1" (formula "26") (term "0,0,0,0,0"))
            (rule "qeq_literals" (formula "26") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "26"))
            (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "25") (term "0,1,0,1,0,1,0"))
            (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "39") (term "0"))
            (rule "replace_known_left" (formula "39") (term "1,0") (ifseqformula "5"))
             (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "53")) (ifInst ""  (formula "40")))
            (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "27") (term "0,1,0,1,0"))
            (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "40") (term "0") (inst "i=i") (inst "j=j_1"))
             (builtin "One Step Simplification" (formula "40"))
            (rule "inEqSimp_ltToLeq" (formula "40") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,1,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "40") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "40") (term "1,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "40") (term "1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,0,1,0"))
            (rule "mul_literals" (formula "40") (term "0,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "40") (term "1,1,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "40") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "40") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "40") (term "1,1,1,0,0"))
            (rule "nnf_imp2or" (formula "40") (term "0"))
            (rule "nnf_notAnd" (formula "40") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "40") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "40") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "40") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "40") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "40") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "40") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "40") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "40") (term "1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "40") (term "0,0,0"))
            (rule "times_zero_1" (formula "40") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "40") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "0,0,0"))
            (rule "mul_literals" (formula "40") (term "1,0,0,0"))
            (rule "nnf_imp2or" (formula "40") (term "0,1,0"))
            (rule "nnf_notAnd" (formula "40") (term "0,0,1,0"))
            (rule "inEqSimp_notGeq" (formula "40") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "40") (term "1,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,0,0,1,0"))
            (rule "mul_literals" (formula "40") (term "0,1,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "40") (term "1,1,0,0,0,1,0"))
            (rule "inEqSimp_notLeq" (formula "40") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "40") (term "1,0,0,1,0,0,1,0"))
            (rule "mul_literals" (formula "40") (term "0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "40") (term "0,0,1,0,0,1,0"))
            (rule "add_literals" (formula "40") (term "0,0,0,1,0,0,1,0"))
            (rule "add_zero_left" (formula "40") (term "0,0,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "40") (term "1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "40") (term "1,1,0,0,1,0"))
            (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "24") (term "1"))
             (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "51")) (ifInst ""  (formula "44")))
            (rule "translateJavaSubInt" (formula "24") (term "3,0,1,1"))
            (rule "polySimp_elimSub" (formula "24") (term "3,0,1,1"))
            (rule "mul_literals" (formula "24") (term "1,3,0,1,1"))
            (rule "polySimp_addComm0" (formula "24") (term "3,0,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "24") (term "1,1,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "24") (term "1,0,0,0,0,1"))
            (rule "replace_known_left" (formula "24") (term "1,0,0,0,0,1") (ifseqformula "43"))
             (builtin "One Step Simplification" (formula "24"))
            (rule "inEqSimp_commuteLeq" (formula "24") (term "1,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "24") (term "0,1,0,0,1"))
            (rule "applyEq" (formula "24") (term "0,0,0,0,0,0,1") (ifseqformula "38"))
            (rule "replace_known_right" (formula "24") (term "0,0,0,0,0,1") (ifseqformula "52"))
             (builtin "One Step Simplification" (formula "24"))
            (rule "applyEq" (formula "24") (term "1,1,0,1") (ifseqformula "45"))
            (rule "applyEq" (formula "24") (term "1,0,1,1") (ifseqformula "38"))
            (rule "applyEq" (formula "24") (term "0,0,1,0,1") (ifseqformula "38"))
            (rule "replace_known_left" (formula "24") (term "1,0,1") (ifseqformula "49"))
             (builtin "One Step Simplification" (formula "24"))
            (rule "applyEq" (formula "24") (term "1,1,1,0,1") (ifseqformula "45"))
            (rule "replace_known_left" (formula "24") (term "1,1,0,1") (ifseqformula "48"))
             (builtin "One Step Simplification" (formula "24"))
            (rule "applyEq" (formula "24") (term "1,3,0,1,1") (ifseqformula "45"))
            (rule "applyEq" (formula "24") (term "0,0,0,1") (ifseqformula "45"))
            (rule "eqSymm" (formula "24") (term "0,0,1"))
            (rule "replace_known_left" (formula "24") (term "0,0,1") (ifseqformula "36"))
             (builtin "One Step Simplification" (formula "24"))
            (rule "applyEq" (formula "24") (term "0,0,1") (ifseqformula "45"))
            (rule "replace_known_left" (formula "24") (term "0,1") (ifseqformula "47"))
             (builtin "One Step Simplification" (formula "24"))
            (rule "cnf_rightDist" (formula "28") (term "0"))
            (rule "commute_or" (formula "41") (term "0,0,1,0"))
            (rule "commute_or" (formula "50") (term "0,0,1,0"))
            (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "26") (term "1,0,0"))
             (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "51")) (ifInst ""  (formula "44")))
            (rule "translateJavaSubInt" (formula "26") (term "3,0,1,1,0,0"))
            (rule "polySimp_elimSub" (formula "26") (term "3,0,1,1,0,0"))
            (rule "mul_literals" (formula "26") (term "1,3,0,1,1,0,0"))
            (rule "polySimp_addComm0" (formula "26") (term "3,0,1,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "26") (term "1,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "26") (term "1,0,0,0,0,1,0,0"))
            (rule "replace_known_left" (formula "26") (term "1,0,0,0,0,1,0,0") (ifseqformula "43"))
             (builtin "One Step Simplification" (formula "26"))
            (rule "inEqSimp_commuteLeq" (formula "26") (term "0,1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "26") (term "1,1,0,0,1,0,0"))
            (rule "applyEq" (formula "26") (term "1,1,1,0,0,1,0,0") (ifseqformula "45"))
            (rule "replace_known_left" (formula "26") (term "1,1,0,0,1,0,0") (ifseqformula "48"))
             (builtin "One Step Simplification" (formula "26"))
            (rule "applyEq" (formula "26") (term "1,1,0,1,0,0") (ifseqformula "45"))
            (rule "applyEq" (formula "26") (term "1,0,1,1,0,0") (ifseqformula "38"))
            (rule "applyEq" (formula "26") (term "0,0,1,0,1,0,0") (ifseqformula "38"))
            (rule "replace_known_left" (formula "26") (term "1,0,1,0,0") (ifseqformula "49"))
             (builtin "One Step Simplification" (formula "26"))
            (rule "applyEq" (formula "26") (term "0,1,0,0,1,0,0") (ifseqformula "45"))
            (rule "eqSymm" (formula "26") (term "1,0,0,1,0,0"))
            (rule "replace_known_left" (formula "26") (term "1,0,0,1,0,0") (ifseqformula "36"))
             (builtin "One Step Simplification" (formula "26"))
            (rule "applyEq" (formula "26") (term "0,0,0,0,1,0,0") (ifseqformula "38"))
            (rule "replace_known_right" (formula "26") (term "0,0,0,1,0,0") (ifseqformula "52"))
             (builtin "One Step Simplification" (formula "26"))
            (rule "applyEq" (formula "26") (term "1,3,0,1,1,0,0") (ifseqformula "45"))
            (rule "applyEq" (formula "26") (term "0,0,1,0,0") (ifseqformula "45"))
            (rule "replace_known_left" (formula "26") (term "0,1,0,0") (ifseqformula "47"))
             (builtin "One Step Simplification" (formula "26"))
            (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "39") (term "0"))
            (rule "replace_known_right" (formula "39") (term "0,0,0") (ifseqformula "53"))
             (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "5")) (ifInst ""  (formula "40")))
            (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "40") (term "0") (inst "i=i"))
             (builtin "One Step Simplification" (formula "40"))
            (rule "translateJavaAddInt" (formula "40") (term "0,2,1,1,0"))
            (rule "translateJavaSubInt" (formula "40") (term "1,1,0,0"))
            (rule "polySimp_elimSub" (formula "40") (term "1,1,0,0"))
            (rule "mul_literals" (formula "40") (term "1,1,1,0,0"))
            (rule "polySimp_addComm0" (formula "40") (term "0,2,1,1,0"))
            (rule "polySimp_addComm0" (formula "40") (term "1,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "40") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "40") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "40") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "40") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "40") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "40") (term "1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "40") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "40") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "40") (term "1,1,1,0,0"))
            (rule "nnf_imp2or" (formula "40") (term "0"))
            (rule "nnf_notAnd" (formula "40") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "40") (term "0,0,0"))
            (rule "times_zero_1" (formula "40") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "40") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "0,0,0"))
            (rule "mul_literals" (formula "40") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "40") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "40") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "40") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "40") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "40") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "40") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "40") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "40") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "40") (term "1,1,1,0,0"))
            (rule "distr_forallAnd" (formula "28"))
            (rule "andLeft" (formula "28"))
            (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "24") (term "0,1"))
            (rule "replace_known_right" (formula "24") (term "0,0,0") (ifseqformula "54"))
             (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "5")))
            (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "25") (term "0,1,0") (inst "i=i") (inst "j=j_1"))
             (builtin "One Step Simplification" (formula "25"))
            (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,1,0,1,0"))
            (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,1,0,1,0"))
            (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0,1,0,1,0"))
            (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,1,0,1,0"))
            (rule "add_literals" (formula "25") (term "0,0,0,1,0,0,1,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,1,0"))
            (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,1,0"))
            (rule "add_literals" (formula "25") (term "0,0,0,1,0,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,1,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "25") (term "1,0,1,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,1,0,1,0"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,1,0,1,0"))
            (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,1,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,1,0,1,0"))
            (rule "mul_literals" (formula "25") (term "0,1,1,0,0,1,0,1,0"))
            (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,1,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,1,0"))
            (rule "mul_literals" (formula "25") (term "0,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,1,0"))
            (rule "nnf_imp2or" (formula "25") (term "0,1,0"))
            (rule "nnf_notAnd" (formula "25") (term "0,0,1,0"))
            (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0,1,0"))
            (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0,1,0"))
            (rule "add_literals" (formula "25") (term "0,0,0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0,1,0"))
            (rule "mul_literals" (formula "25") (term "1,0,0,0,1,0"))
            (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,1,0"))
            (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,1,0"))
            (rule "add_literals" (formula "25") (term "0,0,0,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,1,0"))
            (rule "mul_literals" (formula "25") (term "0,1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,1,0"))
            (rule "nnf_imp2or" (formula "25") (term "0,1,0,1,0"))
            (rule "nnf_notAnd" (formula "25") (term "0,0,1,0,1,0"))
            (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0,1,0,1,0"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,0,0,1,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0,1,0,1,0"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,1,0,1,0"))
            (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,1,0,1,0"))
            (rule "mul_literals" (formula "25") (term "0,1,0,0,0,1,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,0,1,0,1,0"))
            (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,0,1,0,1,0"))
            (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0,1,0,1,0"))
            (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,1,0,1,0"))
            (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0,1,0,1,0"))
            (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,1,0,1,0"))
            (rule "add_literals" (formula "25") (term "0,0,0,1,0,0,1,0,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0,1,0,1,0"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,1,0,1,0"))
            (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,1,0,1,0"))
            (rule "mul_literals" (formula "25") (term "0,1,1,0,0,1,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,1,0,1,0"))
            (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,1,0,1,0"))
            (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "27") (term "0,1,0,0") (inst "i=i") (inst "j=j_1"))
             (builtin "One Step Simplification" (formula "27"))
            (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,1,0,0"))
            (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,1,0,0"))
            (rule "add_literals" (formula "27") (term "0,0,0,1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0,1,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,1,0,1,0,0"))
            (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0,1,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,1,0,1,0,0"))
            (rule "add_literals" (formula "27") (term "0,0,0,1,0,0,1,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "27") (term "1,0,1,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,1,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,1,0,0"))
            (rule "mul_literals" (formula "27") (term "0,1,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,1,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,1,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,1,0,1,0,0"))
            (rule "mul_literals" (formula "27") (term "0,1,1,0,0,1,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,1,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,1,0,1,0,0"))
            (rule "nnf_imp2or" (formula "27") (term "0,1,0,0"))
            (rule "nnf_notAnd" (formula "27") (term "0,0,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0,1,0,0"))
            (rule "mul_literals" (formula "27") (term "1,0,0,0,0,0,1,0,0"))
            (rule "add_zero_right" (formula "27") (term "0,0,0,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0,1,0,0"))
            (rule "mul_literals" (formula "27") (term "1,0,0,0,1,0,0"))
            (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,1,0,0"))
            (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,1,0,0"))
            (rule "add_literals" (formula "27") (term "0,0,0,1,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,1,0,0"))
            (rule "mul_literals" (formula "27") (term "0,1,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,1,0,0"))
            (rule "nnf_imp2or" (formula "27") (term "0,1,0,1,0,0"))
            (rule "nnf_notAnd" (formula "27") (term "0,0,1,0,1,0,0"))
            (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0,1,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,1,0,1,0,0"))
            (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0,1,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,1,0,1,0,0"))
            (rule "add_literals" (formula "27") (term "0,0,0,1,0,0,1,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0,1,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,1,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,1,0,1,0,0"))
            (rule "mul_literals" (formula "27") (term "0,1,1,0,0,1,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,1,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,1,0,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0,1,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,0,0,1,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0,1,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,1,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0,1,0,1,0,0"))
            (rule "mul_literals" (formula "27") (term "0,1,0,0,0,1,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,0,1,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,0,1,0,1,0,0"))
            (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "41") (term "0") (inst "i=i") (inst "j=j_1"))
             (builtin "One Step Simplification" (formula "41"))
            (rule "inEqSimp_ltToLeq" (formula "41") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,1,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "41") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "41") (term "1,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "41") (term "0,0,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "41") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "41") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "41") (term "1,1,0,0,1,0"))
            (rule "mul_literals" (formula "41") (term "0,1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "41") (term "1,1,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "41") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "41") (term "1,1,0,0"))
            (rule "mul_literals" (formula "41") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "41") (term "1,1,1,0,0"))
            (rule "nnf_imp2or" (formula "41") (term "0"))
            (rule "nnf_notAnd" (formula "41") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "41") (term "0,0,0"))
            (rule "times_zero_1" (formula "41") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "41") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "0,0,0"))
            (rule "mul_literals" (formula "41") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "41") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "41") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "41") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "41") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "41") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "41") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "41") (term "1,1,0,0"))
            (rule "nnf_imp2or" (formula "41") (term "0,1,0"))
            (rule "nnf_notAnd" (formula "41") (term "0,0,1,0"))
            (rule "inEqSimp_notGeq" (formula "41") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "41") (term "1,0,0,0,1,0"))
            (rule "mul_literals" (formula "41") (term "0,1,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "41") (term "1,1,0,0,0,1,0"))
            (rule "inEqSimp_notLeq" (formula "41") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "41") (term "1,0,0,1,0,0,1,0"))
            (rule "mul_literals" (formula "41") (term "0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "41") (term "0,0,1,0,0,1,0"))
            (rule "add_literals" (formula "41") (term "0,0,0,1,0,0,1,0"))
            (rule "add_zero_left" (formula "41") (term "0,0,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "41") (term "1,1,0,0,1,0"))
            (rule "allLeft" (formula "22") (inst "t=b_0"))
            (rule "replace_known_right" (formula "22") (term "1") (ifseqformula "78"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "inEqSimp_contradInEq0" (formula "22") (term "1") (ifseqformula "4"))
            (rule "inEqSimp_homoInEq1" (formula "22") (term "0,1"))
            (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1"))
            (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1"))
            (rule "mul_literals" (formula "22") (term "0,1,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,1"))
            (rule "polySimp_addAssoc" (formula "22") (term "0,0,1"))
            (rule "polySimp_addComm0" (formula "22") (term "0,0,0,1"))
            (rule "polySimp_pullOutFactor0b" (formula "22") (term "0,0,1"))
            (rule "add_literals" (formula "22") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "22") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "22") (term "0,0,1"))
            (rule "leq_literals" (formula "22") (term "0,1"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "22"))
            (rule "qeq_literals" (formula "1") (term "0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "self.equal_buckets = TRUE FALSE"
            (rule "applyEq" (formula "50") (term "1,1,1,0,0") (ifseqformula "37"))
            (rule "applyEq" (formula "42") (term "1,0,2,0") (ifseqformula "37"))
            (rule "eqSymm" (formula "42"))
            (rule "applyEq" (formula "47") (term "0") (ifseqformula "37"))
            (rule "applyEq" (formula "48") (term "0") (ifseqformula "37"))
            (rule "inEqSimp_commuteLeq" (formula "48"))
            (rule "applyEq" (formula "40") (term "1,1,1,0,0") (ifseqformula "37"))
            (rule "applyEq" (formula "41") (term "1,1,0,0") (ifseqformula "37"))
            (rule "applyEq" (formula "41") (term "1,1,0,0,1,0") (ifseqformula "37"))
            (rule "applyEq" (formula "47") (term "1") (ifseqformula "37"))
            (rule "applyEq" (formula "49") (term "1,1,1,0,0,1,0") (ifseqformula "37"))
            (rule "applyEq" (formula "39") (term "3,0") (ifseqformula "37"))
            (rule "applyEq" (formula "42") (term "1,0,2,0") (ifseqformula "37"))
            (rule "eqSymm" (formula "42"))
            (rule "applyEq" (formula "45") (term "1") (ifseqformula "37"))
            (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "27") (term "0,0"))
             (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "53")) (ifInst ""  (formula "52")) (ifInst ""  (formula "50")) (ifInst ""  (formula "38")))
            (rule "translateJavaSubInt" (formula "27") (term "0,2,1,1,0,0,0"))
            (rule "translateJavaSubInt" (formula "27") (term "0,2,0,1,0,0,0"))
            (rule "eqSymm" (formula "27") (term "1,0,0,0,0,0"))
            (rule "eqSymm" (formula "27") (term "1,0,0,0"))
            (rule "polySimp_elimSub" (formula "27") (term "0,2,1,1,0,0,0"))
            (rule "mul_literals" (formula "27") (term "1,0,2,1,1,0,0,0"))
            (rule "polySimp_elimSub" (formula "27") (term "0,2,0,1,0,0,0"))
            (rule "mul_literals" (formula "27") (term "1,0,2,0,1,0,0,0"))
            (rule "polySimp_addComm0" (formula "27") (term "0,2,1,1,0,0,0"))
            (rule "polySimp_addComm0" (formula "27") (term "0,2,0,1,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,0,0,0,0"))
            (rule "applyEq" (formula "27") (term "0,1,0,0,0,0,0") (ifseqformula "45"))
            (rule "eqSymm" (formula "27") (term "1,0,0,0,0,0"))
            (rule "replace_known_left" (formula "27") (term "1,0,0,0,0,0") (ifseqformula "22"))
             (builtin "One Step Simplification" (formula "27"))
            (rule "applyEq" (formula "27") (term "0,1,0,0,0,0,0") (ifseqformula "22"))
            (rule "replace_known_left" (formula "27") (term "1,0,0,0,0,0") (ifseqformula "14"))
             (builtin "One Step Simplification" (formula "27"))
            (rule "applyEq" (formula "27") (term "3,0,1,0,0,0,0") (ifseqformula "45"))
            (rule "replace_known_left" (formula "27") (term "1,0,0,0,0") (ifseqformula "39"))
             (builtin "One Step Simplification" (formula "27"))
            (rule "applyEq" (formula "27") (term "0,0,0,0,0") (ifseqformula "22"))
            (rule "replace_known_left" (formula "27") (term "0,0,0,0") (ifseqformula "36"))
             (builtin "One Step Simplification" (formula "27"))
            (rule "applyEq" (formula "27") (term "1,0,2,0,0,0,0") (ifseqformula "45"))
            (rule "eqSymm" (formula "27") (term "0,0,0"))
            (rule "applyEq" (formula "27") (term "1,0,2,0,0,0,0") (ifseqformula "45"))
            (rule "eqSymm" (formula "27") (term "0,0,0"))
            (rule "replace_known_left" (formula "27") (term "0,0,0") (ifseqformula "42"))
             (builtin "One Step Simplification" (formula "27"))
            (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "28") (term "0,1,0,1,0"))
            (rule "arrayLengthIsAShort" (formula "47") (term "0"))
             (builtin "One Step Simplification" (formula "47"))
            (rule "true_left" (formula "47"))
            (rule "arrayLengthNotNegative" (formula "47") (term "0"))
            (rule "arrayLengthNotNegative" (formula "46") (term "0"))
            (rule "inEqSimp_subsumption1" (formula "46") (ifseqformula "47"))
            (rule "leq_literals" (formula "46") (term "0"))
             (builtin "One Step Simplification" (formula "46"))
            (rule "true_left" (formula "46"))
            (rule "arrayLengthIsAShort" (formula "46") (term "0"))
             (builtin "One Step Simplification" (formula "46"))
            (rule "true_left" (formula "46"))
            (rule "cnf_rightDist" (formula "29") (term "0"))
            (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "25") (term "1"))
             (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "52")) (ifInst ""  (formula "44")))
            (rule "translateJavaSubInt" (formula "25") (term "3,0,1,1"))
            (rule "polySimp_elimSub" (formula "25") (term "3,0,1,1"))
            (rule "mul_literals" (formula "25") (term "1,3,0,1,1"))
            (rule "polySimp_addComm0" (formula "25") (term "3,0,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "25") (term "1,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "25") (term "0,1,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "25") (term "1,1,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "25") (term "1,0,0,0,0,1"))
            (rule "replace_known_left" (formula "25") (term "1,0,0,0,0,1") (ifseqformula "43"))
             (builtin "One Step Simplification" (formula "25"))
            (rule "applyEq" (formula "25") (term "1,1,0,1") (ifseqformula "45"))
            (rule "applyEq" (formula "25") (term "1,0,1,1") (ifseqformula "38"))
            (rule "applyEq" (formula "25") (term "0,0,1,0,1") (ifseqformula "38"))
            (rule "replace_known_left" (formula "25") (term "1,0,1") (ifseqformula "49"))
             (builtin "One Step Simplification" (formula "25"))
            (rule "applyEq" (formula "25") (term "1,1,1,0,1") (ifseqformula "45"))
            (rule "replace_known_left" (formula "25") (term "1,1,0,1") (ifseqformula "48"))
             (builtin "One Step Simplification" (formula "25"))
            (rule "applyEq" (formula "25") (term "0,0,0,0,0,1") (ifseqformula "38"))
            (rule "replace_known_right" (formula "25") (term "0,0,0,0,1") (ifseqformula "53"))
             (builtin "One Step Simplification" (formula "25"))
            (rule "applyEq" (formula "25") (term "0,1,0,1") (ifseqformula "45"))
            (rule "replace_known_left" (formula "25") (term "1,0,1") (ifseqformula "36"))
             (builtin "One Step Simplification" (formula "25"))
            (rule "applyEq" (formula "25") (term "1,3,0,1,1") (ifseqformula "45"))
            (rule "applyEq" (formula "25") (term "0,0,1") (ifseqformula "45"))
            (rule "eqSymm" (formula "25") (term "0,1"))
            (rule "replace_known_left" (formula "25") (term "0,1") (ifseqformula "37"))
             (builtin "One Step Simplification" (formula "25"))
            (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "26") (term "0,1,0,1,0,1,0"))
            (rule "onlyCreatedObjectsAreReferencedFinal" (formula "71") (term "1") (ifseqformula "5") (ifseqformula "6"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "54"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferencedFinal" (formula "72") (term "0,0") (ifseqformula "6") (ifseqformula "7"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "56"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferencedFinal" (formula "71") (term "1") (ifseqformula "7") (ifseqformula "12"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "59"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferencedFinal" (formula "65") (term "0") (ifseqformula "8") (ifseqformula "13"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "59"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "distr_forallAnd" (formula "33"))
            (rule "andLeft" (formula "33"))
            (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "44") (term "0") (inst "j=j_1") (inst "i=i"))
             (builtin "One Step Simplification" (formula "44"))
            (rule "inEqSimp_ltToLeq" (formula "44") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,1,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "44") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "44") (term "1,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "44") (term "0,0,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "44") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "44") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "44") (term "1,1,0,0,1,0"))
            (rule "mul_literals" (formula "44") (term "0,1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "44") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "44") (term "1,1,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "44") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "44") (term "1,1,0,0"))
            (rule "mul_literals" (formula "44") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "44") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "44") (term "1,1,1,0,0"))
            (rule "nnf_imp2or" (formula "44") (term "0"))
            (rule "nnf_notAnd" (formula "44") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "44") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "44") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "44") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "44") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "44") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "44") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "44") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "44") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "44") (term "1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "44") (term "0,0,0"))
            (rule "times_zero_1" (formula "44") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "44") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "0,0,0"))
            (rule "mul_literals" (formula "44") (term "1,0,0,0"))
            (rule "nnf_imp2or" (formula "44") (term "0,1,0"))
            (rule "nnf_notAnd" (formula "44") (term "0,0,1,0"))
            (rule "inEqSimp_notGeq" (formula "44") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "44") (term "1,0,0,0,1,0"))
            (rule "mul_literals" (formula "44") (term "0,1,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "44") (term "1,1,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "44") (term "1,1,0,0,0,1,0"))
            (rule "inEqSimp_notLeq" (formula "44") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "44") (term "1,0,0,1,0,0,1,0"))
            (rule "mul_literals" (formula "44") (term "0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "44") (term "0,0,1,0,0,1,0"))
            (rule "add_literals" (formula "44") (term "0,0,0,1,0,0,1,0"))
            (rule "add_zero_left" (formula "44") (term "0,0,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "44") (term "1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "44") (term "1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "44") (term "1,1,0,0,1,0"))
            (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "31") (term "0,0"))
             (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "56")) (ifInst ""  (formula "48")))
            (rule "translateJavaSubInt" (formula "31") (term "3,0,1,0,0"))
            (rule "polySimp_elimSub" (formula "31") (term "3,0,1,0,0"))
            (rule "mul_literals" (formula "31") (term "1,3,0,1,0,0"))
            (rule "polySimp_addComm0" (formula "31") (term "3,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "31") (term "1,0,0,0,0,0,0"))
            (rule "replace_known_left" (formula "31") (term "1,0,0,0,0,0,0") (ifseqformula "47"))
             (builtin "One Step Simplification" (formula "31"))
            (rule "inEqSimp_commuteLeq" (formula "31") (term "1,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "31") (term "0,1,0,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "31") (term "1,1,0,0,0,0"))
            (rule "applyEq" (formula "31") (term "0,0,1,0,0,0,0") (ifseqformula "49"))
            (rule "replace_known_left" (formula "31") (term "0,1,0,0,0,0") (ifseqformula "41"))
             (builtin "One Step Simplification" (formula "31"))
            (rule "applyEq" (formula "31") (term "0,0,1,0,0,0") (ifseqformula "43"))
            (rule "inEqSimp_commuteGeq" (formula "31") (term "1,0,0,0"))
            (rule "applyEq" (formula "31") (term "0,0,0,0,0,0,0,0") (ifseqformula "43"))
            (rule "replace_known_right" (formula "31") (term "0,0,0,0,0,0,0") (ifseqformula "57"))
             (builtin "One Step Simplification" (formula "31"))
            (rule "applyEq" (formula "31") (term "0,0,0,0,0,0") (ifseqformula "49"))
            (rule "eqSymm" (formula "31") (term "0,0,0,0,0"))
            (rule "replace_known_left" (formula "31") (term "0,0,0,0,0") (ifseqformula "42"))
             (builtin "One Step Simplification" (formula "31"))
            (rule "applyEq" (formula "31") (term "1,3,0,1,0,0") (ifseqformula "49"))
            (rule "applyEq" (formula "31") (term "1,0,1,0,0") (ifseqformula "43"))
            (rule "applyEq" (formula "31") (term "1,0,0,0,0") (ifseqformula "49"))
            (rule "replace_known_left" (formula "31") (term "0,0,0,0") (ifseqformula "52"))
             (builtin "One Step Simplification" (formula "31"))
            (rule "applyEq" (formula "31") (term "0,0,0,0") (ifseqformula "49"))
            (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0"))
            (rule "replace_known_left" (formula "31") (term "0,0,0") (ifseqformula "53"))
             (builtin "One Step Simplification" (formula "31"))
            (rule "commute_or" (formula "45") (term "0,0,1,0"))
            (rule "commute_or" (formula "54") (term "0,0,1,0"))
            (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "29") (term "1,0"))
             (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "56")) (ifInst ""  (formula "48")))
            (rule "translateJavaSubInt" (formula "29") (term "3,0,1,1,0"))
            (rule "polySimp_elimSub" (formula "29") (term "3,0,1,1,0"))
            (rule "mul_literals" (formula "29") (term "1,3,0,1,1,0"))
            (rule "polySimp_addComm0" (formula "29") (term "3,0,1,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "29") (term "1,0,0,0,0,1,0"))
            (rule "replace_known_left" (formula "29") (term "1,0,0,0,0,1,0") (ifseqformula "47"))
             (builtin "One Step Simplification" (formula "29"))
            (rule "inEqSimp_commuteLeq" (formula "29") (term "1,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "29") (term "1,1,0,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "29") (term "0,1,0,0,1,0"))
            (rule "applyEq" (formula "29") (term "1,1,1,0,0,1,0") (ifseqformula "49"))
            (rule "replace_known_left" (formula "29") (term "1,1,0,0,1,0") (ifseqformula "52"))
             (builtin "One Step Simplification" (formula "29"))
            (rule "applyEq" (formula "29") (term "0,1,0,0,1,0") (ifseqformula "49"))
            (rule "replace_known_left" (formula "29") (term "1,0,0,1,0") (ifseqformula "41"))
             (builtin "One Step Simplification" (formula "29"))
            (rule "applyEq" (formula "29") (term "0,0,1,0,1,0") (ifseqformula "43"))
            (rule "inEqSimp_commuteGeq" (formula "29") (term "1,0,1,0"))
            (rule "applyEq" (formula "29") (term "0,0,0,0,0,1,0") (ifseqformula "43"))
            (rule "replace_known_right" (formula "29") (term "0,0,0,0,1,0") (ifseqformula "57"))
             (builtin "One Step Simplification" (formula "29"))
            (rule "applyEq" (formula "29") (term "1,3,0,1,1,0") (ifseqformula "49"))
            (rule "applyEq" (formula "29") (term "1,0,1,1,0") (ifseqformula "43"))
            (rule "applyEq" (formula "29") (term "0,1,0,1,0") (ifseqformula "49"))
            (rule "inEqSimp_commuteLeq" (formula "29") (term "1,0,1,0"))
            (rule "replace_known_left" (formula "29") (term "1,0,1,0") (ifseqformula "53"))
             (builtin "One Step Simplification" (formula "29"))
            (rule "applyEq" (formula "29") (term "0,0,1,0") (ifseqformula "49"))
            (rule "eqSymm" (formula "29") (term "0,1,0"))
            (rule "replace_known_left" (formula "29") (term "0,1,0") (ifseqformula "42"))
             (builtin "One Step Simplification" (formula "29"))
            (rule "commute_or_2" (formula "34") (term "0"))
            (rule "allLeft" (formula "27") (inst "t=b_0"))
            (rule "replace_known_right" (formula "27") (term "1") (ifseqformula "81"))
             (builtin "One Step Simplification" (formula "27"))
            (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "27") (term "0") (ifseqformula "5"))
            (rule "qeq_literals" (formula "27") (term "0,0"))
             (builtin "One Step Simplification" (formula "27"))
            (rule "inEqSimp_contradInEq1" (formula "27") (ifseqformula "8"))
            (rule "andLeft" (formula "27"))
            (rule "inEqSimp_homoInEq1" (formula "27"))
            (rule "polySimp_pullOutFactor1b" (formula "27") (term "0"))
            (rule "add_literals" (formula "27") (term "1,1,0"))
            (rule "times_zero_1" (formula "27") (term "1,0"))
            (rule "add_zero_right" (formula "27") (term "0"))
            (rule "leq_literals" (formula "27"))
            (rule "closeFalse" (formula "27"))
         )
      )
   )
   (branch "Case 2"
       (builtin "One Step Simplification" (formula "39"))
      (rule "translateJavaAddInt" (formula "39") (term "0,2,2,0,0,1,0"))
      (rule "translateJavaAddInt" (formula "39") (term "1,1,0"))
      (rule "translateJavaAddInt" (formula "39") (term "0,0,0,0,1,0"))
      (rule "translateJavaSubInt" (formula "39") (term "0,1,0"))
      (rule "allRight" (formula "39") (inst "sk=b_0"))
      (rule "impRight" (formula "39"))
      (rule "andLeft" (formula "1"))
      (rule "polySimp_elimSub" (formula "41") (term "0"))
      (rule "polySimp_homoEq" (formula "41"))
      (rule "polySimp_mulComm0" (formula "41") (term "1,0"))
      (rule "polySimp_addComm0" (formula "41") (term "0,0"))
      (rule "polySimp_addComm0" (formula "41") (term "1,1,0"))
      (rule "polySimp_addComm0" (formula "41") (term "0,2,2,1,1,1,0"))
      (rule "polySimp_addComm0" (formula "41") (term "0,0,1,1,1,0"))
      (rule "polySimp_rightDist" (formula "41") (term "1,0"))
      (rule "polySimp_mulAssoc" (formula "41") (term "0,1,0"))
      (rule "polySimp_mulComm0" (formula "41") (term "0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "41") (term "0,1,0"))
      (rule "polySimp_elimOne" (formula "41") (term "0,1,0"))
      (rule "polySimp_addAssoc" (formula "41") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "2"))
      (rule "times_zero_1" (formula "2") (term "1,0,0"))
      (rule "add_zero_right" (formula "2") (term "0,0"))
      (rule "inEqSimp_commuteLeq" (formula "1"))
      (rule "inEqSimp_homoInEq1" (formula "12"))
      (rule "polySimp_addComm1" (formula "12") (term "0"))
      (rule "polySimp_sepNegMonomial" (formula "41"))
      (rule "polySimp_mulLiterals" (formula "41") (term "0"))
      (rule "polySimp_elimOne" (formula "41") (term "0"))
      (rule "polySimp_sepPosMonomial" (formula "41") (term "0,0"))
      (rule "mul_literals" (formula "41") (term "1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "2"))
      (rule "mul_literals" (formula "2") (term "1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "12"))
      (rule "polySimp_mulComm0" (formula "12") (term "1"))
      (rule "polySimp_rightDist" (formula "12") (term "1"))
      (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
      (rule "mul_literals" (formula "12") (term "0,1"))
      (rule "polySimp_elimOne" (formula "12") (term "1,1"))
      (rule "inEqSimp_contradEq7" (formula "41") (term "0,0") (ifseqformula "1"))
      (rule "add_zero_left" (formula "41") (term "0,0,0,0"))
      (rule "mul_literals" (formula "41") (term "0,0,0,0"))
      (rule "leq_literals" (formula "41") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "41"))
      (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "2"))
      (rule "qeq_literals" (formula "1") (term "0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "Invariant Preserved and Used"
    (builtin "One Step Simplification" (formula "40"))
   (rule "translateJavaCastInt" (formula "40") (term "1,1,0,0,0,0,0,1,1,0,1,1"))
   (rule "translateJavaCastInt" (formula "40") (term "1,1,0,0,0,0"))
   (rule "translateJavaSubInt" (formula "40") (term "0,1,0,1,0,0,1,1,0,1,1"))
   (rule "translateJavaSubInt" (formula "40") (term "0,1,1,0,1"))
   (rule "translateJavaAddInt" (formula "40") (term "1,1,0,1,0,0,1,1,0,1,1"))
   (rule "translateJavaAddInt" (formula "40") (term "1,1,0,1,0"))
   (rule "translateJavaSubInt" (formula "40") (term "0,2,0,0,1,1,0,0,0,0,0,0,1,1,0,1,1"))
   (rule "translateJavaSubInt" (formula "40") (term "0,2,0,0,1,1,0,0,0,0,0"))
   (rule "translateJavaSubInt" (formula "40") (term "0,1,0,1,0"))
   (rule "translateJavaSubInt" (formula "40") (term "0,1,1,1,0,1,1"))
   (rule "translateJavaAddInt" (formula "40") (term "2,1,1,0,0,0,0,0,1,1,0,1,1"))
   (rule "translateJavaAddInt" (formula "40") (term "2,1,1,0,0,0,0"))
   (rule "translateJavaAddInt" (formula "40") (term "0,0,0,0,1,0,1,0,0,1,1,0,1,1"))
   (rule "translateJavaAddInt" (formula "40") (term "0,2,2,0,0,1,0,1,0,0,1,1,0,1,1"))
   (rule "translateJavaAddInt" (formula "40") (term "0,0,0,0,1,0,1,0"))
   (rule "translateJavaAddInt" (formula "40") (term "0,2,2,0,0,1,0,1,0"))
   (rule "impRight" (formula "40"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "eqSymm" (formula "47") (term "1,0,0,0,0,0,1,1,0,1"))
   (rule "eqSymm" (formula "47") (term "1,0,0,1,0,1,1,0,1"))
   (rule "eqSymm" (formula "4"))
   (rule "polySimp_elimSub" (formula "47") (term "0,1,1,1,0,1"))
   (rule "polySimp_elimSub" (formula "47") (term "0,1,0,1,0,0,1,1,0,1"))
   (rule "polySimp_elimSub" (formula "47") (term "0,2,0,0,1,1,0,0,0,0,0,0,1,1,0,1"))
   (rule "mul_literals" (formula "47") (term "1,0,2,0,0,1,1,0,0,0,0,0,0,1,1,0,1"))
   (rule "polySimp_elimSub" (formula "47") (term "0,1,1,0"))
   (rule "polySimp_elimSub" (formula "7") (term "0,1,0"))
   (rule "polySimp_elimSub" (formula "3") (term "0,2,0,0,1"))
   (rule "mul_literals" (formula "3") (term "1,0,2,0,0,1"))
   (rule "polySimp_addComm0" (formula "47") (term "1,1,0,1,0,0,1,1,0,1"))
   (rule "polySimp_addComm0" (formula "7") (term "1,1,0"))
   (rule "polySimp_addComm0" (formula "47") (term "2,0,1,0,0,0,0,0,1,1,0,1"))
   (rule "polySimp_addComm0" (formula "4") (term "2,0"))
   (rule "polySimp_addComm0" (formula "47") (term "0,1,1,1,0,1"))
   (rule "polySimp_addComm0" (formula "47") (term "0,0,0,0,1,0,1,0,0,1,1,0,1"))
   (rule "polySimp_addComm0" (formula "47") (term "0,2,2,0,0,1,0,1,0,0,1,1,0,1"))
   (rule "polySimp_addComm0" (formula "47") (term "0,2,0,0,1,1,0,0,0,0,0,0,1,1,0,1"))
   (rule "polySimp_addComm0" (formula "47") (term "0,1,1,0"))
   (rule "polySimp_addComm0" (formula "7") (term "0,0,0,0,1,0"))
   (rule "polySimp_addComm0" (formula "7") (term "0,2,2,0,0,1,0"))
   (rule "polySimp_addComm0" (formula "3") (term "0,2,0,0,1"))
   (rule "polySimp_addComm0" (formula "47") (term "0,1,0,1,0,0,1,1,0,1"))
   (rule "polySimp_addComm0" (formula "7") (term "0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "47") (term "0,0,0,1,0,0,0,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "47") (term "0,0,0,0,0,0,0,0,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "47") (term "1,0,0,0,0,0,0,0,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "47") (term "0,0,0,1,0,0,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "1"))
   (rule "inEqSimp_commuteLeq" (formula "2"))
   (rule "variableDeclaration" (formula "47") (term "1") (newnames "x_1"))
   (rule "applyEq" (formula "7") (term "2,1,0,2,1,0,1,0") (ifseqformula "22"))
   (rule "applyEq" (formula "47") (term "1,0,1,1,0") (ifseqformula "22"))
   (rule "applyEq" (formula "3") (term "2,1,0,0,1,1") (ifseqformula "22"))
   (rule "applyEq" (formula "3") (term "2,1,0,0,0,1") (ifseqformula "22"))
   (rule "applyEq" (formula "2") (term "0") (ifseqformula "22"))
   (rule "applyEq" (formula "6") (term "1,1,0,0") (ifseqformula "22"))
   (rule "applyEq" (formula "47") (term "2,1,0,1,0,1,0") (ifseqformula "22"))
   (rule "applyEq" (formula "5") (term "2,1,0,0") (ifseqformula "22"))
   (rule "applyEq" (formula "6") (term "2,1,0,0,1,0") (ifseqformula "22"))
   (rule "applyEq" (formula "7") (term "2,1,0,0,0,0,1,0") (ifseqformula "22"))
   (rule "elementOfArrayRange" (formula "47") (term "0,0,0,0,1,0,1,1,0,1") (inst "iv=iv"))
   (rule "inEqSimp_commuteLeq" (formula "47") (term "1,0,0,1,0,0,0,0,1,0,1,1,0,1"))
   (rule "pullOutSelect" (formula "3") (term "0,1,1") (inst "selectSK=arr_0"))
   (rule "simplifySelectOfAnon" (formula "3"))
    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "45")) (ifInst ""  (formula "14")))
   (rule "elementOfArrayRangeConcrete" (formula "3") (term "0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "leq_literals" (formula "3") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0"))
   (rule "pullOutSelect" (formula "4") (term "0,0,1") (inst "selectSK=arr_1"))
   (rule "simplifySelectOfAnon" (formula "4"))
    (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "46")) (ifInst ""  (formula "15")))
   (rule "elementOfArrayRangeConcrete" (formula "4") (term "0,0"))
    (builtin "One Step Simplification" (formula "4"))
   (rule "inEqSimp_commuteLeq" (formula "5") (term "0,1"))
   (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,0"))
   (rule "commute_and" (formula "9") (term "0,0"))
   (rule "commute_and" (formula "5") (term "1"))
   (rule "commute_and" (formula "8") (term "0,0"))
   (rule "ifElseUnfold" (formula "49") (term "1") (inst "#boolv=x_2"))
   (rule "variableDeclaration" (formula "49") (term "1") (newnames "x_2"))
   (rule "compound_less_than_comparison_2" (formula "49") (term "1") (inst "#v0=x_3") (inst "#v1=x_4"))
   (rule "variableDeclarationAssign" (formula "49") (term "1"))
   (rule "variableDeclaration" (formula "49") (term "1") (newnames "x_3"))
   (rule "assignment" (formula "49") (term "1"))
    (builtin "One Step Simplification" (formula "49"))
   (rule "variableDeclarationAssign" (formula "49") (term "1"))
   (rule "variableDeclaration" (formula "49") (term "1") (newnames "x_4"))
   (rule "assignment_read_attribute_this_final" (formula "49"))
    (builtin "One Step Simplification" (formula "49"))
   (rule "applyEq" (formula "49") (term "0,1,0") (ifseqformula "24"))
   (rule "less_than_comparison_simple" (formula "49") (term "1"))
    (builtin "One Step Simplification" (formula "49"))
   (rule "arrayLengthNotNegative" (formula "23") (term "0"))
   (rule "arrayLengthIsAShort" (formula "24") (term "0"))
    (builtin "One Step Simplification" (formula "24"))
   (rule "true_left" (formula "24"))
   (rule "ifElseSplit" (formula "50"))
   (branch "if x_2 true"
       (builtin "Block Contract (Internal)" (formula "51") (newnames "exc_25,heap_Before_BLOCK,savedHeap_Before_BLOCK,o,f"))
      (branch "Validity"
          (builtin "One Step Simplification" (formula "1"))
          (builtin "One Step Simplification" (formula "52"))
          (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "18")) (ifInst ""  (formula "14")) (ifInst ""  (formula "51")) (ifInst ""  (formula "13")))
         (rule "eqSymm" (formula "52") (term "0,0,1,0,1"))
         (rule "variableDeclarationAssign" (formula "52") (term "1"))
         (rule "variableDeclaration" (formula "52") (term "1") (newnames "exc_25_1"))
         (rule "assignment" (formula "52") (term "1"))
          (builtin "One Step Simplification" (formula "52"))
         (rule "emptyStatement" (formula "52") (term "1"))
         (rule "emptyStatement" (formula "52") (term "1"))
         (rule "tryEmpty" (formula "52") (term "1"))
         (rule "blockEmptyLabel" (formula "52") (term "1"))
         (rule "blockEmpty" (formula "52") (term "1"))
         (rule "methodCallEmpty" (formula "52") (term "1"))
         (rule "emptyModality" (formula "52") (term "1"))
         (rule "andRight" (formula "52"))
         (branch "Case 1"
            (rule "andRight" (formula "52"))
            (branch "Case 1"
                (builtin "One Step Simplification" (formula "52"))
               (rule "closeTrue" (formula "52"))
            )
            (branch "Case 2"
                (builtin "One Step Simplification" (formula "52"))
                (builtin "Use Dependency Contract" (formula "52") (ifInst ""  (formula "19")) (contract "de.wiesler.Buffers[java.lang.Object::<inv>()].JML accessible clause.0") (userinteraction))
               (rule "wellFormedAnon" (formula "33") (term "1,1,0,0,0"))
               (rule "replace_known_left" (formula "33") (term "0,1,0,0,0") (ifseqformula "12"))
                (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "49")) (ifInst ""  (formula "17")) (ifInst ""  (formula "12")) (ifInst ""  (formula "11")) (ifInst ""  (formula "19")) (ifInst ""  (formula "53")) (ifInst ""  (formula "19")))
               (rule "notLeft" (formula "33"))
               (rule "polySimp_homoEq" (formula "10") (term "1,0"))
               (rule "polySimp_homoEq" (formula "10") (term "0,1,0,1,0,1,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,1,0,1,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,1,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,0,1,0"))
               (rule "polySimp_mulAssoc" (formula "10") (term "0,1,0,1,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,1,0"))
               (rule "polySimp_elimOne" (formula "10") (term "0,1,0,1,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,1,1,0,1,0"))
               (rule "mul_literals" (formula "10") (term "0,1,0,0,0,1,1,0,1,0"))
               (rule "disjointDefinition" (formula "33"))
               (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,1,1,0,1,0"))
               (rule "polySimp_addComm0" (formula "10") (term "0,0,0,0,1,1,0,1,0"))
               (rule "polySimp_addAssoc" (formula "10") (term "0,1,0"))
               (rule "disjointArrayRangeAllFields2" (formula "33"))
               (rule "notRight" (formula "33"))
               (rule "andLeft" (formula "1"))
               (rule "eqSymm" (formula "1"))
               (rule "close" (formula "41") (ifseqformula "1"))
            )
         )
         (branch "Case 2"
             (builtin "One Step Simplification" (formula "52"))
            (rule "closeTrue" (formula "52"))
         )
      )
      (branch "Precondition"
         (rule "andRight" (formula "51"))
         (branch "Case 1"
            (rule "andRight" (formula "51"))
            (branch "Case 1"
                (builtin "One Step Simplification" (formula "1"))
                (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "18")))
               (rule "closeTrue" (formula "51"))
            )
            (branch "Case 2"
                (builtin "One Step Simplification" (formula "1"))
                (builtin "One Step Simplification" (formula "51"))
               (rule "wellFormedAnon" (formula "51"))
               (rule "replace_known_left" (formula "51") (term "1") (ifseqformula "11"))
                (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "12")))
               (rule "closeTrue" (formula "51"))
            )
         )
         (branch "Case 2"
            (rule "andRight" (formula "51"))
            (branch "Case 1"
               (rule "andRight" (formula "51"))
               (branch "Case 1"
                   (builtin "One Step Simplification" (formula "1"))
                   (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "50")))
                  (rule "closeTrue" (formula "51"))
               )
               (branch "Case 2"
                   (builtin "One Step Simplification" (formula "1"))
                   (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "13")))
                  (rule "closeTrue" (formula "51"))
               )
            )
            (branch "Case 2"
                (builtin "One Step Simplification" (formula "1"))
                (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "14")))
               (rule "closeTrue" (formula "51"))
            )
         )
      )
      (branch "Usage"
          (builtin "One Step Simplification" (formula "1"))
          (builtin "One Step Simplification" (formula "32"))
          (builtin "One Step Simplification" (formula "52"))
         (rule "andLeft" (formula "32"))
         (rule "andLeft" (formula "32"))
         (rule "replace_known_left" (formula "34") (term "0") (ifseqformula "32"))
          (builtin "One Step Simplification" (formula "34"))
         (rule "true_left" (formula "34"))
         (rule "elim_double_block_2" (formula "53") (term "1"))
         (rule "ifUnfold" (formula "53") (term "1") (inst "#boolv=x_2"))
         (rule "variableDeclaration" (formula "53") (term "1") (newnames "x_5"))
         (rule "inequality_comparison_simple" (formula "53") (term "1"))
          (builtin "One Step Simplification" (formula "53"))
         (rule "replace_known_left" (formula "53") (term "0,0,1,0") (ifseqformula "32"))
          (builtin "One Step Simplification" (formula "53"))
         (rule "ifSplit" (formula "53"))
         (branch "if x_5 true"
             (builtin "One Step Simplification" (formula "54"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "if x_5 false"
             (builtin "One Step Simplification" (formula "54"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "blockEmpty" (formula "53") (term "1"))
             (builtin "Block Contract (Internal)" (formula "53") (newnames "exc_26,heap_Before_BLOCK_0,savedHeap_Before_BLOCK_0,o,f"))
            (branch "Validity"
                (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "18")) (ifInst ""  (formula "14")) (ifInst ""  (formula "53")) (ifInst ""  (formula "13")))
                (builtin "One Step Simplification" (formula "54"))
               (rule "eqSymm" (formula "54") (term "0,0,1,0,1"))
               (rule "eqSymm" (formula "54") (term "0,1,0,0,1"))
               (rule "eqSymm" (formula "54") (term "1,1,0,0,1"))
               (rule "variableDeclarationAssign" (formula "54") (term "1"))
               (rule "variableDeclaration" (formula "54") (term "1") (newnames "exc_26_1"))
               (rule "assignment" (formula "54") (term "1"))
                (builtin "One Step Simplification" (formula "54"))
               (rule "emptyStatement" (formula "54") (term "1"))
               (rule "emptyStatement" (formula "54") (term "1"))
               (rule "tryEmpty" (formula "54") (term "1"))
               (rule "blockEmptyLabel" (formula "54") (term "1"))
               (rule "blockEmpty" (formula "54") (term "1"))
               (rule "methodCallEmpty" (formula "54") (term "1"))
               (rule "emptyModality" (formula "54") (term "1"))
               (rule "andRight" (formula "54"))
               (branch "Case 1"
                  (rule "andRight" (formula "54"))
                  (branch "Case 1"
                      (builtin "One Step Simplification" (formula "54"))
                     (rule "closeTrue" (formula "54"))
                  )
                  (branch "Case 2"
                     (rule "andRight" (formula "54"))
                     (branch "Case 1"
                         (builtin "One Step Simplification" (formula "54"))
                        (rule "eqSymm" (formula "54"))
                        (rule "polySimp_homoEq" (formula "10") (term "1,0"))
                        (rule "polySimp_homoEq" (formula "10") (term "0,1,0,1,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,1,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,1,1,0,1,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,0,0,1,1,1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,0,1,0"))
                        (rule "polySimp_mulAssoc" (formula "10") (term "0,1,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,1,1,0,1,0"))
                        (rule "polySimp_addComm0" (formula "10") (term "0,0,0,0,1,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "6") (term "0"))
                        (rule "add_zero_right" (formula "6") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "21"))
                        (rule "polySimp_addComm1" (formula "21") (term "0"))
                        (rule "inEqSimp_homoInEq0" (formula "5") (term "0,0,0"))
                        (rule "times_zero_2" (formula "5") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "5") (term "0,0,0,0"))
                        (rule "polySimp_sepNegMonomial" (formula "10") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "0,1,0"))
                        (rule "polySimp_sepNegMonomial" (formula "10") (term "0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "0,0,0,1,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "0,0"))
                        (rule "polySimp_elimOne" (formula "6") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "21"))
                        (rule "polySimp_mulComm0" (formula "21") (term "1"))
                        (rule "polySimp_rightDist" (formula "21") (term "1"))
                        (rule "mul_literals" (formula "21") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "21") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "21") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "0,0,0"))
                        (rule "mul_literals" (formula "5") (term "1,0,0,0"))
                        (rule "inEqSimp_subsumption1" (formula "5") (term "1,0,0") (ifseqformula "3"))
                        (rule "inEqSimp_homoInEq0" (formula "5") (term "0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0"))
                        (rule "polySimp_addComm0" (formula "5") (term "0,0,0,1,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "5") (term "1,1,0,0,1,0,0"))
                        (rule "times_zero_1" (formula "5") (term "1,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "5") (term "0,0,1,0,0"))
                        (rule "qeq_literals" (formula "5") (term "0,1,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq0" (formula "3") (term "0"))
                        (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0"))
                        (rule "qeq_literals" (formula "3") (term "0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "pullOutSelect" (formula "53") (term "0") (inst "selectSK=arr_2"))
                        (rule "simplifySelectOfAnon" (formula "1"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "51")) (ifInst ""  (formula "16")))
                        (rule "eqSymm" (formula "54"))
                        (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
                        (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0"))
                        (rule "inEqSimp_subsumption1" (formula "1") (term "0,0") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq0" (formula "1") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0,0"))
                        (rule "add_literals" (formula "1") (term "1,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0,0,0"))
                        (rule "qeq_literals" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "applyEqReverse" (formula "54") (term "1") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "eqSymm" (formula "53"))
                        (rule "inEqSimp_exactShadow3" (formula "27") (ifseqformula "28"))
                        (rule "polySimp_mulComm0" (formula "27") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "27"))
                        (rule "polySimp_mulLiterals" (formula "27") (term "1"))
                        (rule "polySimp_elimOne" (formula "27") (term "1"))
                        (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "20"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1"))
                        (rule "mul_literals" (formula "1") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                        (rule "nnf_imp2or" (formula "9") (term "0"))
                        (rule "nnf_imp2or" (formula "10") (term "0"))
                        (rule "nnf_notAnd" (formula "9") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "9") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "9") (term "0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "9") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "9") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                        (rule "nnf_notAnd" (formula "10") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "10") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "10") (term "0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "10") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "1,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "10") (term "1,0,0"))
                        (rule "times_zero_1" (formula "10") (term "1,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "10") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                        (rule "mul_literals" (formula "10") (term "1,1,0,0"))
                        (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "8") (term "0"))
                        (rule "wellFormedAnon" (formula "8") (term "1,0"))
                        (rule "replace_known_left" (formula "8") (term "0,1") (ifseqformula "9"))
                         (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "52")) (ifInst ""  (formula "13")) (ifInst ""  (formula "12")))
                        (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "9") (term "0") (inst "i=i"))
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "translateJavaSubInt" (formula "9") (term "1,1,0,0"))
                        (rule "translateJavaAddInt" (formula "9") (term "0,2,1,1,0"))
                        (rule "polySimp_elimSub" (formula "9") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "9") (term "1,1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "9") (term "0,2,1,1,0"))
                        (rule "polySimp_addComm0" (formula "9") (term "1,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                        (rule "nnf_imp2or" (formula "9") (term "0"))
                        (rule "nnf_notAnd" (formula "9") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
                        (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
                        (rule "add_literals" (formula "9") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                        (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                        (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "7") (term "0,2,0"))
                        (rule "polySimp_addComm0" (formula "7") (term "2,0"))
                        (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "32"))
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "translateJavaSubInt" (formula "32") (term "0,2,1,1,0"))
                        (rule "translateJavaSubInt" (formula "32") (term "0,2,0,1,0"))
                        (rule "translateJavaMulInt" (formula "32") (term "1,1,1,0,0,0,0"))
                        (rule "andLeft" (formula "32"))
                        (rule "andLeft" (formula "32"))
                        (rule "andLeft" (formula "32"))
                        (rule "andLeft" (formula "32"))
                        (rule "andLeft" (formula "32"))
                        (rule "andLeft" (formula "32"))
                        (rule "andLeft" (formula "33"))
                        (rule "andLeft" (formula "32"))
                        (rule "notLeft" (formula "33"))
                        (rule "notLeft" (formula "32"))
                        (rule "eqSymm" (formula "37"))
                        (rule "eqSymm" (formula "34"))
                        (rule "polySimp_elimSub" (formula "37") (term "0,2,1"))
                        (rule "mul_literals" (formula "37") (term "1,0,2,1"))
                        (rule "polySimp_elimSub" (formula "37") (term "0,2,0"))
                        (rule "mul_literals" (formula "37") (term "1,0,2,0"))
                        (rule "polySimp_mulComm0" (formula "34") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "37") (term "0,2,1"))
                        (rule "polySimp_addComm0" (formula "37") (term "0,2,0"))
                        (rule "inEqSimp_commuteLeq" (formula "32"))
                        (rule "applyEq" (formula "32") (term "0") (ifseqformula "27"))
                        (rule "applyEq" (formula "33") (term "0") (ifseqformula "27"))
                        (rule "applyEq" (formula "34") (term "1") (ifseqformula "27"))
                        (rule "inEqSimp_subsumption1" (formula "4") (term "0,0") (ifseqformula "32"))
                        (rule "leq_literals" (formula "4") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "applyEqReverse" (formula "6") (term "0,0,1") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "32"))
                        (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                        (rule "mul_literals" (formula "2") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "add_literals" (formula "2") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "inEqSimp_exactShadow3" (formula "32") (ifseqformula "22"))
                        (rule "mul_literals" (formula "32") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "32") (term "0"))
                        (rule "add_literals" (formula "32") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "32"))
                        (rule "mul_literals" (formula "32") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "21") (ifseqformula "32"))
                        (rule "leq_literals" (formula "21") (term "0"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "true_left" (formula "21"))
                        (rule "Contract_axiom_for_isClassifiedUntil_in_Classifier" (formula "27") (term "0"))
                        (rule "translateJavaSubInt" (formula "27") (term "0,0,0,1,1,1,0,0,0,0"))
                        (rule "eqSymm" (formula "27") (term "0,1,1,0,0,0,0"))
                        (rule "replace_known_right" (formula "27") (term "0,1,1,1,1,1,1,1,0,0,0,0") (ifseqformula "60"))
                         (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "20")) (ifInst ""  (formula "26")) (ifInst ""  (formula "62")) (ifInst ""  (formula "61")) (ifInst ""  (formula "13")) (ifInst ""  (formula "14")) (ifInst ""  (formula "63")))
                        (rule "polySimp_elimSub" (formula "27") (term "0,0,0,1,0"))
                        (rule "polySimp_addComm0" (formula "27") (term "0,0,0,1,0"))
                        (rule "replace_known_left" (formula "27") (term "0,1,0") (ifseqformula "31"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "inEqSimp_commuteGeq" (formula "27") (term "0,0"))
                        (rule "applyEq" (formula "27") (term "0,0,0") (ifseqformula "26"))
                        (rule "inEqSimp_subsumption0" (formula "27") (term "0,0") (ifseqformula "21"))
                        (rule "inEqSimp_homoInEq0" (formula "27") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0,0"))
                        (rule "mul_literals" (formula "27") (term "0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "27") (term "0,0,0,0"))
                        (rule "polySimp_addComm0" (formula "27") (term "0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,0,0"))
                        (rule "add_literals" (formula "27") (term "1,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "27") (term "1,0,0,0,0"))
                        (rule "add_literals" (formula "27") (term "0,0,0,0"))
                        (rule "qeq_literals" (formula "27") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "true_left" (formula "27"))
                        (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "30") (term "0"))
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "translateJavaMod" (formula "30") (term "0"))
                        (rule "jmod_axiom" (formula "30") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "1,0"))
                        (rule "polySimp_sepNegMonomial" (formula "30"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                        (rule "newSym_eq" (formula "30") (inst "l=l_0") (inst "newSymDef=add(mul(begin, Z(0(#))), mul(write, Z(0(#))))"))
                        (rule "times_zero_1" (formula "30") (term "0,1,1"))
                        (rule "times_zero_1" (formula "30") (term "1,1,1"))
                        (rule "add_zero_left" (formula "30") (term "1,1"))
                        (rule "add_zero_right" (formula "30") (term "1"))
                        (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "30"))
                        (rule "polySimp_homoEq" (formula "31"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "31") (term "0"))
                        (rule "polySimp_addComm0" (formula "31") (term "0,0"))
                        (rule "polySimp_sepPosMonomial" (formula "31"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1"))
                        (rule "polySimp_rightDist" (formula "31") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "31") (term "1,1"))
                        (rule "polySimp_mulComm0" (formula "31") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "0,1"))
                        (rule "applyEq" (formula "27") (term "4,0") (ifseqformula "31"))
                        (rule "applyEq" (formula "30") (term "1,0,0") (ifseqformula "31"))
                        (rule "polySimp_addAssoc" (formula "30") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "30") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "30") (term "0,0"))
                        (rule "add_literals" (formula "30") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "30") (term "1,0,0"))
                        (rule "add_zero_right" (formula "30") (term "0,0"))
                        (rule "applyEq" (formula "29") (term "0") (ifseqformula "31"))
                        (rule "inEqSimp_commuteLeq" (formula "29"))
                        (rule "applyEq" (formula "28") (term "0") (ifseqformula "31"))
                        (rule "inEqSimp_homoInEq1" (formula "28"))
                        (rule "polySimp_mulComm0" (formula "28") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "28") (term "1,0"))
                        (rule "polySimp_mulAssoc" (formula "28") (term "0,1,0"))
                        (rule "polySimp_mulComm0" (formula "28") (term "0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "28") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "28") (term "0"))
                        (rule "polySimp_addComm0" (formula "28") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "28") (term "0"))
                        (rule "add_literals" (formula "28") (term "1,1,0"))
                        (rule "times_zero_1" (formula "28") (term "1,0"))
                        (rule "add_zero_right" (formula "28") (term "0"))
                        (rule "applyEq" (formula "7") (term "4,0,2,0") (ifseqformula "31"))
                        (rule "applyEq" (formula "10") (term "4,1,1,0") (ifseqformula "31"))
                        (rule "applyEq" (formula "64") (term "4,1") (ifseqformula "31"))
                        (rule "applyEq" (formula "11") (term "4,1,0,1,1,0") (ifseqformula "31"))
                        (rule "inEqSimp_invertInEq0" (formula "28"))
                        (rule "times_zero_2" (formula "28") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                        (rule "elimGcdGeq_antec" (formula "28") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
                        (rule "add_zero_right" (formula "28") (term "0,0,0,1,0"))
                        (rule "leq_literals" (formula "28") (term "0,0"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "times_zero_1" (formula "28") (term "1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "28") (term "1,0,0"))
                        (rule "add_zero_right" (formula "28") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "28") (term "0,0"))
                        (rule "add_literals" (formula "28") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "28") (term "1,0,0"))
                        (rule "add_zero_right" (formula "28") (term "0,0"))
                        (rule "leq_literals" (formula "28") (term "0"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "20") (inst "b=b"))
                         (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "34")))
                        (rule "translateJavaMulInt" (formula "20") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "20") (term "1,1,0,0,0"))
                        (rule "andLeft" (formula "20"))
                        (rule "andLeft" (formula "20"))
                        (rule "andLeft" (formula "20"))
                        (rule "andLeft" (formula "20"))
                        (rule "andLeft" (formula "20"))
                        (rule "andLeft" (formula "20"))
                        (rule "notLeft" (formula "22"))
                        (rule "notLeft" (formula "20"))
                        (rule "notLeft" (formula "20"))
                        (rule "eqSymm" (formula "48"))
                        (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "23") (term "0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "22"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                        (rule "inEqSimp_subsumption1" (formula "22") (ifseqformula "36"))
                        (rule "leq_literals" (formula "22") (term "0"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "true_left" (formula "22"))
                        (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "43") (inst "b=b"))
                         (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "46")) (ifInst ""  (formula "45")) (ifInst ""  (formula "21")) (ifInst ""  (formula "36")))
                        (rule "translateJavaMulInt" (formula "43") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "43") (term "1,1,0,0"))
                        (rule "andLeft" (formula "43"))
                        (rule "andLeft" (formula "43"))
                        (rule "andLeft" (formula "43"))
                        (rule "notLeft" (formula "43"))
                        (rule "eqSymm" (formula "46"))
                        (rule "inEqSimp_ltToLeq" (formula "44") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "44") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "44") (term "0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "43"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "44") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "44") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "44") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "44") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "44") (term "1,1,1,0,0"))
                        (rule "inEqSimp_subsumption1" (formula "43") (ifseqformula "35"))
                        (rule "leq_literals" (formula "43") (term "0"))
                         (builtin "One Step Simplification" (formula "43"))
                        (rule "true_left" (formula "43"))
                        (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "11") (term "0,0,1,1,0"))
                        (rule "polySimp_addComm0" (formula "11") (term "0,1,1,0"))
                        (rule "nnf_imp2or" (formula "22") (term "0"))
                        (rule "nnf_imp2or" (formula "43") (term "0"))
                        (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "8") (term "0"))
                        (rule "wellFormedAnon" (formula "8") (term "1,0"))
                        (rule "replace_known_left" (formula "8") (term "0,1") (ifseqformula "9"))
                         (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "66")) (ifInst ""  (formula "14")) (ifInst ""  (formula "13")))
                        (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "9") (term "0") (inst "i=i") (inst "j=j_1"))
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,1,0"))
                        (rule "nnf_notAnd" (formula "23") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                        (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "23") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                        (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                        (rule "nnf_notAnd" (formula "44") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "44") (term "0,0,0"))
                        (rule "times_zero_1" (formula "44") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "44") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "0,0,0"))
                        (rule "mul_literals" (formula "44") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "44") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "44") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "44") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "44") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "44") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "44") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "44") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "44") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "44") (term "1,1,0,0"))
                        (rule "commute_or" (formula "11") (term "0,0"))
                        (rule "nnf_imp2or" (formula "9") (term "0"))
                        (rule "commute_or" (formula "12") (term "0,0"))
                        (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "42"))
                         (builtin "One Step Simplification" (formula "42"))
                        (rule "translateJavaSubInt" (formula "42") (term "3,0,1"))
                        (rule "andLeft" (formula "42"))
                        (rule "andLeft" (formula "42"))
                        (rule "andLeft" (formula "42"))
                        (rule "andLeft" (formula "42"))
                        (rule "andLeft" (formula "44"))
                        (rule "andLeft" (formula "42"))
                        (rule "andLeft" (formula "42"))
                        (rule "andLeft" (formula "44"))
                        (rule "notLeft" (formula "43"))
                        (rule "notLeft" (formula "42"))
                        (rule "polySimp_elimSub" (formula "48") (term "3,0"))
                        (rule "mul_literals" (formula "48") (term "1,3,0"))
                        (rule "polySimp_addComm0" (formula "48") (term "3,0"))
                        (rule "inEqSimp_commuteLeq" (formula "47"))
                        (rule "inEqSimp_commuteLeq" (formula "46"))
                        (rule "inEqSimp_commuteLeq" (formula "45"))
                        (rule "inEqSimp_commuteLeq" (formula "42"))
                        (rule "applyEq" (formula "47") (term "0,0") (ifseqformula "39"))
                        (rule "inEqSimp_commuteGeq" (formula "47"))
                        (rule "applyEq" (formula "48") (term "1,3,0") (ifseqformula "44"))
                        (rule "applyEq" (formula "41") (term "1,0,2,0") (ifseqformula "44"))
                        (rule "eqSymm" (formula "41"))
                        (rule "applyEq" (formula "45") (term "0") (ifseqformula "44"))
                        (rule "applyEq" (formula "52") (term "0") (ifseqformula "39"))
                        (rule "applyEq" (formula "46") (term "1") (ifseqformula "44"))
                        (rule "applyEq" (formula "38") (term "0,1,0") (ifseqformula "44"))
                        (rule "applyEq" (formula "40") (term "3,0") (ifseqformula "44"))
                        (rule "applyEq" (formula "38") (term "2,0") (ifseqformula "44"))
                        (rule "applyEq" (formula "48") (term "1,0") (ifseqformula "39"))
                        (rule "applyEq" (formula "47") (term "0") (ifseqformula "44"))
                        (rule "applyEq" (formula "41") (term "1,0,2,0") (ifseqformula "44"))
                        (rule "eqSymm" (formula "41"))
                        (rule "inEqSimp_exactShadow3" (formula "45") (ifseqformula "47"))
                        (rule "mul_literals" (formula "45") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "45"))
                        (rule "mul_literals" (formula "45") (term "1"))
                        (rule "nnf_notAnd" (formula "9") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
                        (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                        (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
                        (rule "nnf_imp2or" (formula "9") (term "0,1,0"))
                        (rule "commute_and" (formula "6") (term "1"))
                        (rule "Contract_axiom_for_isClassifiedUntil_in_Classifier" (formula "30") (term "0"))
                        (rule "translateJavaSubInt" (formula "30") (term "0,0,0,1,1,1,0,0,0,0"))
                        (rule "eqSymm" (formula "30") (term "0,1,1,0,0,0,0"))
                        (rule "replace_known_right" (formula "30") (term "0,1,0") (ifseqformula "77"))
                         (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "29")) (ifInst ""  (formula "76")) (ifInst ""  (formula "75")) (ifInst ""  (formula "74")) (ifInst ""  (formula "14")) (ifInst ""  (formula "15")))
                        (rule "polySimp_elimSub" (formula "30") (term "0,0,0,1,1,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,0,1,1,0"))
                        (rule "add_literals" (formula "30") (term "1,1,0,0,0,1,1,0"))
                        (rule "times_zero_1" (formula "30") (term "1,0,0,0,1,1,0"))
                        (rule "add_zero_right" (formula "30") (term "0,0,0,1,1,0"))
                        (rule "inEqSimp_commuteGeq" (formula "30") (term "0,1,0"))
                        (rule "applyEq" (formula "30") (term "0,0,1,0") (ifseqformula "29"))
                        (rule "inEqSimp_subsumption0" (formula "30") (term "0,1,0") (ifseqformula "24"))
                        (rule "inEqSimp_homoInEq0" (formula "30") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "30") (term "1,0,0,0,1,0"))
                        (rule "mul_literals" (formula "30") (term "0,1,0,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "30") (term "0,0,0,1,0"))
                        (rule "polySimp_addComm0" (formula "30") (term "0,0,0,0,1,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,0,1,0"))
                        (rule "add_literals" (formula "30") (term "1,1,0,0,0,1,0"))
                        (rule "times_zero_1" (formula "30") (term "1,0,0,0,1,0"))
                        (rule "add_zero_right" (formula "30") (term "0,0,0,1,0"))
                        (rule "qeq_literals" (formula "30") (term "0,0,1,0"))
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "Definition_axiom_for_isClassifiedUntil_in_de_wiesler_Classifier" (formula "31") (term "0") (inst "b=b"))
                         (builtin "One Step Simplification" (formula "31"))
                        (rule "translateJavaSubInt" (formula "31") (term "1,1"))
                        (rule "andLeft" (formula "31"))
                        (rule "andLeft" (formula "31"))
                        (rule "andLeft" (formula "31"))
                        (rule "andLeft" (formula "31"))
                        (rule "polySimp_elimSub" (formula "35") (term "1"))
                        (rule "polySimp_mulComm0" (formula "35") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "35") (term "1,1"))
                        (rule "polySimp_mulAssoc" (formula "35") (term "0,1,1"))
                        (rule "polySimp_mulComm0" (formula "35") (term "0,0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "35") (term "0,1,1"))
                        (rule "polySimp_addComm0" (formula "35") (term "1"))
                        (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0"))
                        (rule "applyEq" (formula "34") (term "0,1,0,0,1,0,0") (ifseqformula "29"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "34") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0"))
                        (rule "nnf_notAnd" (formula "9") (term "0,0,1,0"))
                        (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,1,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,1,0"))
                        (rule "add_literals" (formula "9") (term "0,0,0,1,0,0,1,0"))
                        (rule "add_zero_left" (formula "9") (term "0,0,1,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,1,0"))
                        (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,1,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0,1,0"))
                        (rule "nnf_imp2or" (formula "34") (term "0"))
                        (rule "Contract_axiom_for_countClassOfSliceEq_in_Classifier" (formula "7") (term "0,2,0"))
                        (rule "replace_known_right" (formula "7") (term "0,1,0") (ifseqformula "82"))
                         (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "81")) (ifInst ""  (formula "15")) (ifInst ""  (formula "16")))
                        (rule "true_left" (formula "7"))
                        (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "7") (term "0,2,0") (inst "i=i"))
                        (rule "polySimp_addComm0" (formula "7") (term "2,0"))
                        (rule "Contract_axiom_for_countClassOfSliceEq_in_Classifier" (formula "11") (term "1,1,0"))
                        (rule "replace_known_right" (formula "11") (term "0,1,0") (ifseqformula "82"))
                         (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "81")) (ifInst ""  (formula "15")) (ifInst ""  (formula "16")))
                        (rule "true_left" (formula "11"))
                        (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "11") (term "1,1,0") (inst "i=i"))
                        (rule "eqSymm" (formula "11") (term "1,0"))
                        (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "82") (term "1") (inst "i=i"))
                        (rule "eqSymm" (formula "82"))
                        (rule "ifthenelse_split" (formula "5") (term "0"))
                        (branch "j_0 >= 1 TRUE"
                           (rule "applyEqReverse" (formula "7") (term "1,0,1") (ifseqformula "6"))
                           (rule "hideAuxiliaryEq" (formula "6"))
                           (rule "replace_known_left" (formula "6") (term "0") (ifseqformula "5"))
                            (builtin "One Step Simplification" (formula "6"))
                           (rule "andLeft" (formula "6"))
                           (rule "inEqSimp_commuteGeq" (formula "6"))
                           (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "5"))
                           (rule "leq_literals" (formula "4") (term "0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "arrayLengthIsAShort" (formula "28") (term "0"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "arrayLengthNotNegative" (formula "28") (term "0"))
                           (rule "nnf_notAnd" (formula "34") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "34") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "34") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0"))
                           (rule "times_zero_1" (formula "34") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "34") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0"))
                           (rule "mul_literals" (formula "34") (term "1,0,0,0"))
                           (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "12") (term "0,0,1,1,0") (inst "i=i"))
                           (rule "polySimp_homoEq" (formula "12") (term "1,0"))
                           (rule "polySimp_addComm0" (formula "12") (term "0,0,0,1,0"))
                           (rule "polySimp_addComm1" (formula "12") (term "0,0,1,0"))
                           (rule "polySimp_addComm1" (formula "12") (term "0,1,0"))
                           (rule "polySimp_sepPosMonomial" (formula "12") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,1,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "0,0,1,1,0"))
                           (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "8") (term "0") (inst "i=i"))
                            (builtin "One Step Simplification" (formula "8"))
                           (rule "translateJavaSubInt" (formula "8") (term "1,1,0,0"))
                           (rule "translateJavaAddInt" (formula "8") (term "0,2,1,1,0"))
                           (rule "polySimp_elimSub" (formula "8") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "8") (term "1,1,1,0,0"))
                           (rule "polySimp_addComm0" (formula "8") (term "0,2,1,1,0"))
                           (rule "polySimp_addComm0" (formula "8") (term "1,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "8") (term "1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
                           (rule "arrayLengthNotNegative" (formula "24") (term "1,1"))
                           (rule "inEqSimp_subsumption1" (formula "24") (ifseqformula "41"))
                           (rule "leq_literals" (formula "24") (term "0"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "true_left" (formula "24"))
                           (rule "arrayLengthIsAShort" (formula "24") (term "1,1"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "true_left" (formula "24"))
                           (rule "nnf_imp2or" (formula "8") (term "0"))
                           (rule "nnf_notAnd" (formula "8") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
                           (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
                           (rule "mul_literals" (formula "8") (term "1,0,0,0"))
                           (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "44") (term "0"))
                           (rule "replace_known_right" (formula "44") (term "0,0,0") (ifseqformula "62"))
                            (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "13")) (ifInst ""  (formula "45")))
                           (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "45") (term "0") (inst "i=i") (inst "j=j_1"))
                            (builtin "One Step Simplification" (formula "45"))
                           (rule "inEqSimp_ltToLeq" (formula "45") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "45") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "45") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "45") (term "1,0,0,1,0,0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "45") (term "0,0,0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "45") (term "1,0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "45") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "45") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "45") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "45") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "45") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "45") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "45") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "45") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "45") (term "1,1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "45") (term "1,1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "45") (term "1,1,1,0,0,1,0"))
                           (rule "mul_literals" (formula "45") (term "0,1,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "45") (term "1,1,1,0,0,1,0"))
                           (rule "nnf_imp2or" (formula "45") (term "0"))
                           (rule "nnf_notAnd" (formula "45") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "45") (term "0,0,0"))
                           (rule "times_zero_1" (formula "45") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "45") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "45") (term "0,0,0"))
                           (rule "mul_literals" (formula "45") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "45") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "45") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "45") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "45") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "45") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "45") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "45") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "45") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "45") (term "1,1,0,0"))
                           (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "54") (term "0"))
                           (rule "replace_known_left" (formula "54") (term "1,0") (ifseqformula "13"))
                            (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "63")) (ifInst ""  (formula "55")))
                           (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "55") (term "0") (inst "i=i") (inst "j=j_1"))
                            (builtin "One Step Simplification" (formula "55"))
                           (rule "inEqSimp_ltToLeq" (formula "55") (term "1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "55") (term "1,0,0,1,0,0,1,0"))
                           (rule "mul_literals" (formula "55") (term "0,1,0,0,1,0,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "55") (term "0,0,1,0,0,1,0"))
                           (rule "add_literals" (formula "55") (term "0,0,0,1,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "55") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "55") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "55") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "55") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "55") (term "0,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "55") (term "1,0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "55") (term "0,0,0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "55") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "55") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "55") (term "1,1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "55") (term "1,1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "55") (term "1,1,1,0,0,1,0"))
                           (rule "mul_literals" (formula "55") (term "0,1,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "55") (term "1,1,1,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "55") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "55") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "55") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "55") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "55") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "55") (term "1,1,1,0,0"))
                           (rule "nnf_imp2or" (formula "45") (term "0,1,0"))
                           (rule "cnf_rightDist" (formula "22") (term "0"))
                           (rule "nnf_imp2or" (formula "55") (term "0"))
                           (rule "cnf_rightDist" (formula "57") (term "0"))
                           (rule "nnf_notAnd" (formula "55") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "55") (term "0,0,0"))
                           (rule "times_zero_1" (formula "55") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "55") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "55") (term "0,0,0"))
                           (rule "mul_literals" (formula "55") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "55") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "55") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "55") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "55") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "55") (term "0,0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "55") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "55") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "55") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "55") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "55") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "55") (term "1,1,1,0,0"))
                           (rule "nnf_imp2or" (formula "55") (term "0,1,0"))
                           (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "29") (term "0,0") (inst "b=b"))
                            (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "61")) (ifInst ""  (formula "60")) (ifInst ""  (formula "21")) (ifInst ""  (formula "41")))
                           (rule "translateJavaMulInt" (formula "29") (term "1,1,0,0,0,0"))
                           (rule "mul_literals" (formula "29") (term "1,1,0,0,0,0"))
                           (rule "eqSymm" (formula "29") (term "0,0,0,0,0,0"))
                           (rule "replace_known_left" (formula "29") (term "1,0,0,0,0") (ifseqformula "20"))
                            (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "73")))
                           (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "29") (term "0,1,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "29") (term "0,1,1,0,0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,1,0,0"))
                           (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,1,0,0"))
                           (rule "inEqSimp_subsumption1" (formula "29") (term "0,0,0") (ifseqformula "40"))
                           (rule "leq_literals" (formula "29") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "Definition_axiom_for_count_in_de_wiesler_Buffers" (formula "34") (term "0") (inst "b=b"))
                           (rule "translateJavaCastInt" (formula "34") (term "0"))
                           (rule "Definition_axiom_for_isClassifiedWith_in_de_wiesler_Buffers" (formula "32") (term "0") (inst "b=b"))
                            (builtin "One Step Simplification" (formula "32"))
                           (rule "translateJavaAddInt" (formula "32") (term "4,0,1,0"))
                           (rule "translateJavaMulInt" (formula "32") (term "3,0,1,0"))
                           (rule "translateJavaMulInt" (formula "32") (term "0,4,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "32") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0"))
                           (rule "Definition_axiom_for_isClassifiedBlocksRange_in_de_wiesler_Classifier" (formula "31") (term "0") (inst "block=block"))
                            (builtin "One Step Simplification" (formula "31"))
                           (rule "translateJavaAddInt" (formula "31") (term "0,1,4,0,1,0"))
                           (rule "translateJavaAddInt" (formula "31") (term "3,0,1,0"))
                           (rule "translateJavaSubInt" (formula "31") (term "0,1,1,0,0"))
                           (rule "translateJavaMulInt" (formula "31") (term "1,4,0,1,0"))
                           (rule "translateJavaMulInt" (formula "31") (term "1,3,0,1,0"))
                           (rule "translateJavaDivInt" (formula "31") (term "1,1,0,0"))
                           (rule "translateJavaAddInt" (formula "31") (term "4,0,1,0"))
                           (rule "polySimp_elimSub" (formula "31") (term "0,1,1,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,1,1,0,0"))
                           (rule "add_literals" (formula "31") (term "1,1,0,1,1,0,0"))
                           (rule "times_zero_1" (formula "31") (term "1,0,1,1,0,0"))
                           (rule "add_zero_right" (formula "31") (term "0,1,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "31") (term "1,4,0,1,0"))
                           (rule "polySimp_addComm0" (formula "31") (term "1,1,4,0,1,0"))
                           (rule "polySimp_rightDist" (formula "31") (term "1,4,0,1,0"))
                           (rule "mul_literals" (formula "31") (term "0,1,4,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "31") (term "4,0,1,0"))
                           (rule "polySimp_addComm0" (formula "31") (term "0,4,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0"))
                           (rule "applyEq" (formula "31") (term "0,1,0,0,1,0,0") (ifseqformula "37"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "31") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0"))
                           (rule "Contract_axiom_for_allElementsCounted_in_Classifier" (formula "30") (term "0"))
                           (rule "replace_known_right" (formula "30") (term "0,1,0") (ifseqformula "83"))
                            (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "82")) (ifInst ""  (formula "81")) (ifInst ""  (formula "13")) (ifInst ""  (formula "14")))
                           (rule "inEqSimp_commuteGeq" (formula "30") (term "0,0"))
                           (rule "applyEq" (formula "30") (term "0,0,0") (ifseqformula "28"))
                           (rule "inEqSimp_subsumption0" (formula "30") (term "0,0") (ifseqformula "23"))
                           (rule "inEqSimp_homoInEq0" (formula "30") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "30") (term "1,0,0,0,0"))
                           (rule "mul_literals" (formula "30") (term "0,1,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "30") (term "0,0,0,0"))
                           (rule "polySimp_addComm0" (formula "30") (term "0,0,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,0,0"))
                           (rule "add_literals" (formula "30") (term "1,1,0,0,0,0"))
                           (rule "times_zero_1" (formula "30") (term "1,0,0,0,0"))
                           (rule "add_zero_right" (formula "30") (term "0,0,0,0"))
                           (rule "qeq_literals" (formula "30") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "true_left" (formula "30"))
                           (rule "nnf_notAnd" (formula "45") (term "0,0,1,0"))
                           (rule "inEqSimp_notLeq" (formula "45") (term "1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "45") (term "1,0,0,1,0,0,1,0"))
                           (rule "mul_literals" (formula "45") (term "0,1,0,0,1,0,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "45") (term "0,0,1,0,0,1,0"))
                           (rule "add_literals" (formula "45") (term "0,0,0,1,0,0,1,0"))
                           (rule "add_zero_left" (formula "45") (term "0,0,1,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "45") (term "1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "45") (term "1,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "45") (term "1,1,0,0,1,0"))
                           (rule "inEqSimp_notGeq" (formula "45") (term "0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "45") (term "1,0,0,0,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "45") (term "0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "45") (term "1,0,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "45") (term "1,0,0,0,1,0"))
                           (rule "mul_literals" (formula "45") (term "0,1,0,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "45") (term "1,1,0,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "45") (term "1,1,0,0,0,1,0"))
                           (rule "Definition_axiom_for_allElementsCounted_in_de_wiesler_Classifier" (formula "30") (term "0") (inst "b=b") (inst "b_0=b_0"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "translateJavaSubInt" (formula "30") (term "1,1"))
                           (rule "translateJavaCastInt" (formula "30") (term "0,1"))
                           (rule "andLeft" (formula "30"))
                           (rule "polySimp_elimSub" (formula "31") (term "1"))
                           (rule "polySimp_pullOutFactor1b" (formula "31") (term "1"))
                           (rule "add_literals" (formula "31") (term "1,1,1"))
                           (rule "times_zero_1" (formula "31") (term "1,1"))
                           (rule "add_zero_right" (formula "31") (term "1"))
                           (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0"))
                           (rule "applyEq" (formula "31") (term "1,0") (ifseqformula "28"))
                           (rule "applyEq" (formula "30") (term "0,1,0,0,1,0,0") (ifseqformula "28"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "30") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0"))
                           (rule "jdiv_axiom" (formula "38") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "38") (term "0,0,2,1"))
                           (rule "eqSymm" (formula "38"))
                           (rule "applyEq" (formula "38") (term "1") (ifseqformula "39"))
                           (rule "inEqSimp_subsumption6" (formula "38") (term "0,0") (ifseqformula "36"))
                           (rule "greater_literals" (formula "38") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "38"))
                           (rule "times_zero_1" (formula "38") (term "1,0,0,0"))
                           (rule "leq_literals" (formula "38") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "38"))
                           (rule "polyDiv_pullOut" (formula "38") (term "0") (inst "polyDivCoeff=l_0"))
                           (rule "polySimp_mulLiterals" (formula "38") (term "1,0,0,2,0"))
                           (rule "equal_literals" (formula "38") (term "0,0"))
                            (builtin "One Step Simplification" (formula "38"))
                           (rule "polySimp_pullOutFactor0" (formula "38") (term "0,0,0"))
                           (rule "add_literals" (formula "38") (term "1,0,0,0"))
                           (rule "times_zero_1" (formula "38") (term "0,0,0"))
                           (rule "div_literals" (formula "38") (term "0,0"))
                           (rule "add_zero_left" (formula "38") (term "0"))
                            (builtin "One Step Simplification" (formula "38"))
                           (rule "true_left" (formula "38"))
                           (rule "nnf_notAnd" (formula "56") (term "0,0,1,0"))
                           (rule "inEqSimp_notLeq" (formula "56") (term "1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "56") (term "1,0,0,1,0,0,1,0"))
                           (rule "mul_literals" (formula "56") (term "0,1,0,0,1,0,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "56") (term "0,0,1,0,0,1,0"))
                           (rule "add_literals" (formula "56") (term "0,0,0,1,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "56") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "56") (term "1,1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "56") (term "1,1,0,0,1,0"))
                           (rule "mul_literals" (formula "56") (term "0,1,1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "56") (term "1,1,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "56") (term "1,1,1,0,0,1,0"))
                           (rule "inEqSimp_notGeq" (formula "56") (term "0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "56") (term "1,0,0,0,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "56") (term "0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "56") (term "1,0,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "56") (term "1,0,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "56") (term "1,1,0,0,0,1,0"))
                           (rule "mul_literals" (formula "56") (term "0,1,0,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "56") (term "1,1,0,0,0,1,0"))
                           (rule "nnf_imp2or" (formula "33") (term "0"))
                           (rule "nnf_imp2or" (formula "29") (term "0,0,0"))
                           (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "34") (term "0,0,1,0"))
                           (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "7") (term "0,0,2,1,2,0"))
                           (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "10") (term "0,0,2,0,1,0"))
                           (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "84") (term "0,0,2,0"))
                           (rule "nnf_imp2or" (formula "32") (term "0"))
                           (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "11") (term "0,0,2,0,1,0"))
                           (rule "commute_or" (formula "8") (term "0,0,1,0"))
                           (rule "nnf_imp2or" (formula "30") (term "0"))
                           (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "45") (term "0"))
                           (rule "replace_known_left" (formula "45") (term "0,1") (ifseqformula "46"))
                            (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "65")) (ifInst ""  (formula "13")))
                           (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "46") (term "0") (inst "i=i"))
                            (builtin "One Step Simplification" (formula "46"))
                           (rule "translateJavaSubInt" (formula "46") (term "1,1,0,0"))
                           (rule "translateJavaAddInt" (formula "46") (term "0,2,1,1,0"))
                           (rule "polySimp_elimSub" (formula "46") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "46") (term "1,1,1,0,0"))
                           (rule "polySimp_addComm0" (formula "46") (term "0,2,1,1,0"))
                           (rule "polySimp_addComm0" (formula "46") (term "1,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "46") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "46") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "46") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "46") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "46") (term "0,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "46") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "46") (term "1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "46") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "46") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "46") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "46") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "46") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "46") (term "1,1,1,0,0"))
                           (rule "arrayLengthNotNegative" (formula "21") (term "0"))
                           (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
                           (rule "qeq_literals" (formula "21"))
                           (rule "true_left" (formula "21"))
                           (rule "arrayLengthIsAShort" (formula "21") (term "0"))
                            (builtin "One Step Simplification" (formula "21"))
                           (rule "true_left" (formula "21"))
                           (rule "arrayLengthNotNegative" (formula "20") (term "0"))
                           (rule "applyEq" (formula "20") (term "0") (ifseqformula "21"))
                           (rule "qeq_literals" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "arrayLengthIsAShort" (formula "20") (term "0"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "distr_forallAnd" (formula "22"))
                           (rule "andLeft" (formula "22"))
                           (rule "distr_forallAnd" (formula "60"))
                           (rule "andLeft" (formula "60"))
                           (rule "nnf_notAnd" (formula "34") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0"))
                           (rule "mul_literals" (formula "34") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "34") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0"))
                           (rule "mul_literals" (formula "34") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "34") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "34") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "33") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "33") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "33") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0"))
                           (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "33") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0"))
                           (rule "mul_literals" (formula "33") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "31") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "31") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "31") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0"))
                           (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "31") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0"))
                           (rule "mul_literals" (formula "31") (term "1,0,0,0"))
                           (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "57") (term "0") (inst "i=i"))
                            (builtin "One Step Simplification" (formula "57"))
                           (rule "translateJavaAddInt" (formula "57") (term "0,2,1,1,0"))
                           (rule "translateJavaSubInt" (formula "57") (term "1,1,0,0"))
                           (rule "polySimp_elimSub" (formula "57") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "57") (term "1,1,1,0,0"))
                           (rule "polySimp_addComm0" (formula "57") (term "0,2,1,1,0"))
                           (rule "polySimp_addComm1" (formula "57") (term "1,1,0,0"))
                           (rule "add_literals" (formula "57") (term "0,1,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "57") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "57") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "57") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "57") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "57") (term "0,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "57") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "57") (term "1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "57") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "57") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "57") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "57") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "57") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "57") (term "1,1,1,0,0"))
                           (rule "nnf_notAnd" (formula "30") (term "0,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0,0,0"))
                           (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "30") (term "0,0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0,0,0"))
                           (rule "mul_literals" (formula "30") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0,0,0"))
                           (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0,0,0"))
                           (rule "add_literals" (formula "30") (term "0,0,0,1,0,0,0,0"))
                           (rule "add_zero_left" (formula "30") (term "0,0,1,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0,0,0"))
                           (rule "nnf_imp2or" (formula "47") (term "0"))
                           (rule "ifthenelse_split" (formula "44") (term "0"))
                           (branch "self.equal_buckets = TRUE TRUE"
                              (rule "newSym_eq" (formula "45") (inst "l=l_1") (inst "newSymDef=mul(int::final(buffers,
               de.wiesler.Buffers::$num_buckets),
    Z(0(#)))"))
                              (rule "times_zero_1" (formula "45") (term "1,1"))
                              (rule "add_zero_right" (formula "45") (term "1"))
                              (rule "applyEq" (formula "60") (term "1,1,1,0,0") (ifseqformula "45"))
                              (rule "applyEq" (formula "49") (term "1,1,1,0,0,0") (ifseqformula "45"))
                              (rule "applyEq" (formula "59") (term "1,1,1,0,0") (ifseqformula "45"))
                              (rule "applyEq" (formula "46") (term "0,0") (ifseqformula "45"))
                              (rule "eqSymm" (formula "46"))
                              (rule "applyEq" (formula "50") (term "1,1,0,0,1,0") (ifseqformula "45"))
                              (rule "applyEq" (formula "48") (term "3,0") (ifseqformula "45"))
                              (rule "applyEq" (formula "51") (term "1,0,2,0") (ifseqformula "45"))
                              (rule "eqSymm" (formula "51"))
                              (rule "applyEq" (formula "57") (term "1") (ifseqformula "45"))
                              (rule "applyEq" (formula "56") (term "0") (ifseqformula "45"))
                              (rule "applyEq" (formula "58") (term "0") (ifseqformula "45"))
                              (rule "inEqSimp_commuteLeq" (formula "58"))
                              (rule "applyEq" (formula "50") (term "1,1,0,0") (ifseqformula "45"))
                              (rule "applyEq" (formula "60") (term "1,1,1,0,0,1,0") (ifseqformula "45"))
                              (rule "applyEq" (formula "36") (term "1,0") (ifseqformula "46"))
                              (rule "applyEq" (formula "23") (term "1,1,1,0") (ifseqformula "46"))
                              (rule "applyEq" (formula "42") (term "0") (ifseqformula "46"))
                              (rule "applyEq" (formula "43") (term "0") (ifseqformula "46"))
                              (rule "applyEq" (formula "62") (term "2,1,0,0,1,0") (ifseqformula "46"))
                              (rule "applyEq" (formula "31") (term "1,1,0,0") (ifseqformula "46"))
                              (rule "applyEq" (formula "63") (term "1,1,1,0") (ifseqformula "46"))
                              (rule "applyEq" (formula "32") (term "1,0") (ifseqformula "46"))
                              (rule "applyEq" (formula "35") (term "1,1,0,0") (ifseqformula "46"))
                              (rule "applyEq" (formula "8") (term "2,1,0,1,1,0,1,0") (ifseqformula "46"))
                              (rule "applyEq" (formula "8") (term "2,1,0,0,1,0,1,0") (ifseqformula "46"))
                              (rule "applyEq" (formula "9") (term "2,1,0,1,1,0") (ifseqformula "46"))
                              (rule "applyEq" (formula "10") (term "1,1,0,0") (ifseqformula "46"))
                              (rule "applyEq" (formula "30") (term "1,1,0,0,0,0") (ifseqformula "46"))
                              (rule "applyEq" (formula "64") (term "2,1,0") (ifseqformula "46"))
                              (rule "applyEq" (formula "63") (term "2,1,0,0,0,0") (ifseqformula "46"))
                              (rule "applyEq" (formula "22") (term "1,1,0,0") (ifseqformula "46"))
                              (rule "applyEq" (formula "3") (term "0") (ifseqformula "46"))
                              (rule "inEqSimp_homoInEq1" (formula "3"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                              (rule "polySimp_addComm1" (formula "3") (term "0"))
                              (rule "applyEq" (formula "34") (term "1,1,0,0") (ifseqformula "46"))
                              (rule "applyEq" (formula "24") (term "0") (ifseqformula "46"))
                              (rule "inEqSimp_homoInEq0" (formula "24"))
                              (rule "polySimp_mulLiterals" (formula "24") (term "1,0"))
                              (rule "polySimp_addComm1" (formula "24") (term "0"))
                              (rule "applyEq" (formula "9") (term "2,1,0,0,1,0") (ifseqformula "46"))
                              (rule "applyEq" (formula "62") (term "1,1,0,0") (ifseqformula "46"))
                              (rule "applyEq" (formula "51") (term "1,0,2,0") (ifseqformula "45"))
                              (rule "eqSymm" (formula "51"))
                              (rule "applyEq" (formula "11") (term "2,1,0,2,1,1,1,0") (ifseqformula "46"))
                              (rule "applyEq" (formula "54") (term "1") (ifseqformula "45"))
                              (rule "applyEq" (formula "10") (term "2,1,0,1,1,0") (ifseqformula "46"))
                              (rule "applyEq" (formula "29") (term "1") (ifseqformula "46"))
                              (rule "applyEq" (formula "11") (term "2,1,0,0,1,0,1,1,0") (ifseqformula "46"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1"))
                              (rule "polySimp_rightDist" (formula "3") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                              (rule "mul_literals" (formula "3") (term "0,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "24"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1"))
                              (rule "polySimp_rightDist" (formula "24") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "24") (term "1,1"))
                              (rule "mul_literals" (formula "24") (term "0,1"))
                              (rule "inEqSimp_subsumption6" (formula "42") (ifseqformula "56"))
                              (rule "greater_literals" (formula "42") (term "0,0"))
                               (builtin "One Step Simplification" (formula "42"))
                              (rule "mul_literals" (formula "42") (term "1,0"))
                              (rule "leq_literals" (formula "42") (term "0"))
                               (builtin "One Step Simplification" (formula "42"))
                              (rule "true_left" (formula "42"))
                              (rule "elimGcdLeq_antec" (formula "42") (inst "elimGcdRightDiv=Z(6(5(2(#))))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(2(#))"))
                              (rule "polySimp_mulLiterals" (formula "42") (term "1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "42") (term "1,0,0,0,0,1,0"))
                              (rule "leq_literals" (formula "42") (term "0,0"))
                               (builtin "One Step Simplification" (formula "42"))
                              (rule "neg_literal" (formula "42") (term "0,0,0,0,0,0"))
                              (rule "mul_literals" (formula "42") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "42") (term "0,0,0,0,0"))
                              (rule "add_literals" (formula "42") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "42") (term "0,0"))
                              (rule "add_literals" (formula "42") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "42") (term "1,0,0"))
                              (rule "add_zero_right" (formula "42") (term "0,0"))
                              (rule "qeq_literals" (formula "42") (term "0"))
                               (builtin "One Step Simplification" (formula "42"))
                              (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "3"))
                              (rule "mul_literals" (formula "4") (term "0,0"))
                              (rule "polySimp_addAssoc" (formula "4") (term "0"))
                              (rule "add_literals" (formula "4") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                              (rule "mul_literals" (formula "4") (term "1"))
                              (rule "inEqSimp_subsumption6" (formula "4") (ifseqformula "56"))
                              (rule "greater_literals" (formula "4") (term "0,0"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "mul_literals" (formula "4") (term "1,0"))
                              (rule "leq_literals" (formula "4") (term "0"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "true_left" (formula "4"))
                              (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "30") (term "1,1,0"))
                               (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "67")) (ifInst ""  (formula "68")) (ifInst ""  (formula "43")) (ifInst ""  (formula "46")))
                              (rule "translateJavaSubInt" (formula "30") (term "0,2,1,1,0,1,1,0"))
                              (rule "translateJavaSubInt" (formula "30") (term "0,2,0,1,0,1,1,0"))
                              (rule "translateJavaMulInt" (formula "30") (term "1,1,0,0,0,1,1,0"))
                              (rule "eqSymm" (formula "30") (term "1,0,1,1,0"))
                              (rule "polySimp_elimSub" (formula "30") (term "0,2,0,1,0,1,1,0"))
                              (rule "mul_literals" (formula "30") (term "1,0,2,0,1,0,1,1,0"))
                              (rule "eqSymm" (formula "30") (term "1,0,1,1,0"))
                              (rule "polySimp_elimSub" (formula "30") (term "0,2,0,1,0,1,1,0"))
                              (rule "mul_literals" (formula "30") (term "1,0,2,0,1,0,1,1,0"))
                              (rule "eqSymm" (formula "30") (term "1,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0,0,1,1,0"))
                              (rule "eqSymm" (formula "30") (term "1,0,0,0,1,1,0"))
                              (rule "polySimp_addComm0" (formula "30") (term "0,2,0,1,0,1,1,0"))
                              (rule "eqSymm" (formula "30") (term "1,0,1,1,0"))
                              (rule "polySimp_addComm0" (formula "30") (term "0,2,0,1,0,1,1,0"))
                              (rule "eqSymm" (formula "30") (term "1,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0,0,0,1,1,0"))
                              (rule "applyEq" (formula "30") (term "3,0,1,0,0,1,1,0") (ifseqformula "53"))
                              (rule "replace_known_left" (formula "30") (term "1,0,0,1,1,0") (ifseqformula "47"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "applyEq" (formula "30") (term "0,0,0,0,0,1,1,0") (ifseqformula "29"))
                              (rule "applyEq" (formula "30") (term "0,1,0,0,0,1,1,0") (ifseqformula "29"))
                              (rule "applyEq" (formula "30") (term "1,0,2,0,1,0,1,1,0") (ifseqformula "53"))
                              (rule "eqSymm" (formula "30") (term "1,0,1,1,0"))
                              (rule "applyEq" (formula "30") (term "0,0,1,0,0,1,1,0") (ifseqformula "53"))
                              (rule "eqSymm" (formula "30") (term "1,0,0,1,1,0"))
                              (rule "replace_known_left" (formula "30") (term "1,0,0,1,1,0") (ifseqformula "29"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "applyEq" (formula "30") (term "1,0,2,0,1,0,1,1,0") (ifseqformula "53"))
                              (rule "eqSymm" (formula "30") (term "1,0,1,1,0"))
                              (rule "replace_known_left" (formula "30") (term "1,0,1,1,0") (ifseqformula "50"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "inEqSimp_subsumption4" (formula "30") (term "1,0,1,1,0") (ifseqformula "42"))
                              (rule "mul_literals" (formula "30") (term "0,1,0,1,0,1,1,0"))
                              (rule "greater_literals" (formula "30") (term "0,0,1,0,1,1,0"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "leq_literals" (formula "30") (term "0,1,0,1,1,0"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "inEqSimp_subsumption6" (formula "30") (term "0,1,1,0") (ifseqformula "55"))
                              (rule "mul_literals" (formula "30") (term "1,1,0,0,1,1,0"))
                              (rule "greater_literals" (formula "30") (term "0,0,0,1,1,0"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "leq_literals" (formula "30") (term "0,0,1,1,0"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "36") (term "2,0"))
                              (rule "arrayLengthIsAShort" (formula "56") (term "0"))
                               (builtin "One Step Simplification" (formula "56"))
                              (rule "true_left" (formula "56"))
                              (rule "arrayLengthNotNegative" (formula "56") (term "0"))
                              (rule "nnf_imp2or" (formula "59") (term "0"))
                              (rule "arrayLengthNotNegative" (formula "54") (term "0"))
                              (rule "inEqSimp_subsumption1" (formula "54") (ifseqformula "55"))
                              (rule "leq_literals" (formula "54") (term "0"))
                               (builtin "One Step Simplification" (formula "54"))
                              (rule "true_left" (formula "54"))
                              (rule "arrayLengthIsAShort" (formula "54") (term "0"))
                               (builtin "One Step Simplification" (formula "54"))
                              (rule "true_left" (formula "54"))
                              (rule "nnf_notAnd" (formula "48") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "48") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "48") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "48") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "48") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "48") (term "0,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "48") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "48") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "48") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "48") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "48") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "48") (term "1,1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "48") (term "0,0,0"))
                              (rule "mul_literals" (formula "48") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "48") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "48") (term "0,0,0"))
                              (rule "mul_literals" (formula "48") (term "1,0,0,0"))
                              (rule "Definition_axiom_for_isClassOfSlice_in_de_wiesler_Classifier" (formula "34") (term "0,1,0") (inst "i=i"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,1,0"))
                              (rule "polySimp_mulAssoc" (formula "34") (term "0,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "34") (term "0,0,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "34") (term "0,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "34") (term "0,1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "34") (term "1,0,1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "34") (term "0,0,1,1,0,0,1,0"))
                              (rule "Definition_axiom_for_isValidBufferLen_in_de_wiesler_Classifier" (formula "35") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "35"))
                              (rule "inEqSimp_ltToLeq" (formula "35") (term "0,1,1,0"))
                              (rule "add_zero_right" (formula "35") (term "0,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "35") (term "0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "35") (term "0,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "35") (term "0,0,1,1,0"))
                              (rule "Contract_axiom_for_isClassifiedBlock_in_Classifier" (formula "33") (term "0,1,0"))
                              (rule "replace_known_left" (formula "33") (term "1,0,0,0") (ifseqformula "13"))
                               (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "88")) (ifInst ""  (formula "14")) (ifInst ""  (formula "89")))
                              (rule "true_left" (formula "33"))
                              (rule "Definition_axiom_for_isClassifiedBlock_in_de_wiesler_Classifier" (formula "33") (term "0,1,0") (inst "bucket=bucket"))
                               (builtin "One Step Simplification" (formula "33"))
                              (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0,1,0"))
                              (rule "applyEq" (formula "33") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "29"))
                              (rule "polySimp_mulLiterals" (formula "33") (term "1,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "33") (term "0,1,1,0,0,1,0"))
                              (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "31") (term "1,1,0") (inst "i=i"))
                              (rule "eqSymm" (formula "31") (term "1,0"))
                              (rule "onlyCreatedObjectsAreReferencedFinal" (formula "84") (term "0,0") (ifseqformula "13") (ifseqformula "14"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "69"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferencedFinal" (formula "77") (term "0") (ifseqformula "14") (ifseqformula "19"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "68"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferencedFinal" (formula "79") (term "0") (ifseqformula "15") (ifseqformula "16"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "72"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferencedFinal" (formula "82") (term "1") (ifseqformula "16") (ifseqformula "21"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "71"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "nnf_notAnd" (formula "63") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "63") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "63") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "63") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "63") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "63") (term "0,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "63") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "63") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "63") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "63") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "63") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "63") (term "1,1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "63") (term "0,0,0"))
                              (rule "times_zero_1" (formula "63") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "63") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "63") (term "0,0,0"))
                              (rule "mul_literals" (formula "63") (term "1,0,0,0"))
                              (rule "nnf_imp2or" (formula "38") (term "0,1,0"))
                              (rule "nnf_imp2or" (formula "39") (term "1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "39") (term "0,1,1,0"))
                              (rule "mul_literals" (formula "39") (term "1,0,0,0,1,1,0"))
                              (rule "add_literals" (formula "39") (term "0,0,0,1,1,0"))
                              (rule "add_zero_left" (formula "39") (term "0,0,1,1,0"))
                              (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "51") (term "0") (inst "i=i") (inst "j=j_1"))
                               (builtin "One Step Simplification" (formula "51"))
                              (rule "inEqSimp_ltToLeq" (formula "51") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "51") (term "1,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "51") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "51") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "51") (term "1,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "51") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "51") (term "0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "51") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "51") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "51") (term "1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "51") (term "0,1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "51") (term "1,1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "51") (term "1,1,1,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "51") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "51") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "51") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "51") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "51") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "51") (term "1,1,1,0,0"))
                              (rule "nnf_imp2or" (formula "51") (term "0"))
                              (rule "nnf_notAnd" (formula "38") (term "0,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "38") (term "0,0,0,1,0"))
                              (rule "polySimp_mulAssoc" (formula "38") (term "1,0,0,0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "38") (term "0,1,0,0,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "38") (term "1,0,0,0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "38") (term "1,0,0,0,1,0"))
                              (rule "mul_literals" (formula "38") (term "0,1,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0,0,1,0"))
                              (rule "inEqSimp_notLeq" (formula "38") (term "1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "38") (term "0,1,0,0,1,0,0,1,0"))
                              (rule "mul_literals" (formula "38") (term "0,0,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "38") (term "1,0,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "38") (term "0,0,0,1,0,0,1,0"))
                              (rule "add_literals" (formula "38") (term "0,0,0,0,1,0,0,1,0"))
                              (rule "add_zero_left" (formula "38") (term "0,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "38") (term "0,1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "38") (term "0,1,1,0,0,1,0"))
                              (rule "commute_or" (formula "27") (term "0"))
                              (rule "nnf_notAnd" (formula "51") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "51") (term "0,0,0"))
                              (rule "times_zero_1" (formula "51") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "51") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "51") (term "0,0,0"))
                              (rule "mul_literals" (formula "51") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "51") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "51") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "51") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "51") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "51") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "51") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "51") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "51") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "51") (term "1,1,0,0"))
                              (rule "commute_or" (formula "67") (term "0"))
                              (rule "nnf_imp2or" (formula "51") (term "0,1,0"))
                              (rule "commute_or" (formula "53") (term "0,0,1,0"))
                              (rule "commute_or" (formula "64") (term "0,0,1,0"))
                              (rule "nnf_notAnd" (formula "51") (term "0,0,1,0"))
                              (rule "inEqSimp_notLeq" (formula "51") (term "1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "51") (term "1,0,0,1,0,0,1,0"))
                              (rule "mul_literals" (formula "51") (term "0,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "51") (term "0,0,1,0,0,1,0"))
                              (rule "add_literals" (formula "51") (term "0,0,0,1,0,0,1,0"))
                              (rule "add_zero_left" (formula "51") (term "0,0,1,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "51") (term "1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "51") (term "1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "51") (term "1,1,0,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "51") (term "0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "51") (term "1,0,0,0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "51") (term "0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "51") (term "1,0,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "51") (term "1,0,0,0,1,0"))
                              (rule "mul_literals" (formula "51") (term "0,1,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "51") (term "1,1,0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "51") (term "1,1,0,0,0,1,0"))
                              (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "34") (term "1"))
                               (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "72")) (ifInst ""  (formula "73")) (ifInst ""  (formula "47")) (ifInst ""  (formula "50")))
                              (rule "translateJavaMulInt" (formula "34") (term "1,1,0,0,0,1"))
                              (rule "translateJavaSubInt" (formula "34") (term "0,2,0,1,0,1"))
                              (rule "translateJavaSubInt" (formula "34") (term "0,2,1,1,0,1"))
                              (rule "eqSymm" (formula "34") (term "1,0,1"))
                              (rule "polySimp_elimSub" (formula "34") (term "0,2,0,1,0,1"))
                              (rule "mul_literals" (formula "34") (term "1,0,2,0,1,0,1"))
                              (rule "eqSymm" (formula "34") (term "1,0,1"))
                              (rule "polySimp_elimSub" (formula "34") (term "0,2,0,1,0,1"))
                              (rule "mul_literals" (formula "34") (term "1,0,2,0,1,0,1"))
                              (rule "eqSymm" (formula "34") (term "1,0,1"))
                              (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,0,1"))
                              (rule "eqSymm" (formula "34") (term "1,0,0,0,1"))
                              (rule "polySimp_addComm0" (formula "34") (term "0,2,0,1,0,1"))
                              (rule "eqSymm" (formula "34") (term "1,0,1"))
                              (rule "polySimp_addComm0" (formula "34") (term "0,2,0,1,0,1"))
                              (rule "eqSymm" (formula "34") (term "1,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0,0,0,1"))
                              (rule "applyEq" (formula "34") (term "0,0,0,0,0,0,1") (ifseqformula "33"))
                              (rule "applyEq" (formula "34") (term "1,0,2,0,1,0,1") (ifseqformula "57"))
                              (rule "eqSymm" (formula "34") (term "1,0,1"))
                              (rule "applyEq" (formula "34") (term "0,1,0,0,0,0,1") (ifseqformula "33"))
                              (rule "applyEq" (formula "34") (term "0,0,1,0,0,0,1") (ifseqformula "57"))
                              (rule "eqSymm" (formula "34") (term "1,0,0,0,1"))
                              (rule "replace_known_left" (formula "34") (term "1,0,0,0,1") (ifseqformula "33"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "applyEq" (formula "34") (term "3,0,1,0,0,1") (ifseqformula "57"))
                              (rule "applyEq" (formula "34") (term "1,0,2,0,1,0,1") (ifseqformula "57"))
                              (rule "eqSymm" (formula "34") (term "1,0,1"))
                              (rule "replace_known_left" (formula "34") (term "1,0,1") (ifseqformula "54"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "inEqSimp_subsumption4" (formula "34") (term "1,0,0,1") (ifseqformula "46"))
                              (rule "greater_literals" (formula "34") (term "0,0,1,0,0,1"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "mul_literals" (formula "34") (term "0,0,1,0,0,1"))
                              (rule "leq_literals" (formula "34") (term "0,1,0,0,1"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "inEqSimp_subsumption6" (formula "34") (term "0,0,1") (ifseqformula "59"))
                              (rule "greater_literals" (formula "34") (term "0,0,0,0,1"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "mul_literals" (formula "34") (term "1,0,0,0,1"))
                              (rule "leq_literals" (formula "34") (term "0,0,0,1"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "39") (term "0,1,0,1,0"))
                               (builtin "One Step Simplification" (formula "39"))
                              (rule "translateJavaMod" (formula "39") (term "0,1,0,1,0"))
                              (rule "jmod_axiom" (formula "39") (term "0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "39") (term "1,0,1,0,1,0"))
                              (rule "polySimp_sepNegMonomial" (formula "39") (term "1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "39") (term "0,1,0,1,0"))
                              (rule "Contract_axiom_for_isClassOfSlice_in_Classifier" (formula "37") (term "0,1,0,1,0"))
                              (rule "replace_known_left" (formula "37") (term "1,0,0") (ifseqformula "18"))
                               (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "92")) (ifInst ""  (formula "17")) (ifInst ""  (formula "93")))
                              (rule "true_left" (formula "37"))
                              (rule "Definition_axiom_for_isClassOfSlice_in_de_wiesler_Classifier" (formula "37") (term "0,1,0,1,0") (inst "i=i"))
                               (builtin "One Step Simplification" (formula "37"))
                              (rule "inEqSimp_ltToLeq" (formula "37") (term "1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "37") (term "1,0,0,1,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0,0,1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "37") (term "0,1,0,0,1,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "37") (term "0,0,1,0,0,1,0,0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "37") (term "0,0,1,0,0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "37") (term "0,0,0,1,0,0,1,0,1,0"))
                              (rule "add_literals" (formula "37") (term "0,0,0,0,1,0,0,1,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "37") (term "0,0,0,1,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0,0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "37") (term "1,1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "37") (term "1,1,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "37") (term "1,1,1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "37") (term "0,1,1,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "37") (term "1,0,1,1,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "37") (term "0,0,1,1,0,0,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "37") (term "1,0,1,1,0,0,1,0,1,0"))
                              (rule "nnf_imp2or" (formula "37") (term "0,1,0,1,0"))
                              (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "35") (term "0,0,2,0,1,0"))
                              (rule "nnf_notAnd" (formula "37") (term "0,0,1,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "37") (term "0,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "37") (term "1,0,0,0,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0,0,0,0,0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "37") (term "0,1,0,0,0,0,0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "37") (term "0,0,0,0,0,1,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "0,0,0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "37") (term "1,0,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "37") (term "0,1,0,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "37") (term "1,0,1,0,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "37") (term "0,0,1,0,0,0,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "37") (term "1,0,1,0,0,0,1,0,1,0"))
                              (rule "inEqSimp_notLeq" (formula "37") (term "1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "37") (term "1,0,0,1,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0,0,1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "37") (term "0,1,0,0,1,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "37") (term "0,0,1,0,0,1,0,0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "37") (term "0,0,1,0,0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "37") (term "0,0,0,1,0,0,1,0,1,0"))
                              (rule "add_literals" (formula "37") (term "0,0,0,0,1,0,0,1,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "1,0,0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "37") (term "1,1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "37") (term "1,1,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "37") (term "1,1,1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "37") (term "0,1,1,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "37") (term "1,0,1,1,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "37") (term "0,0,1,1,0,0,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "37") (term "1,0,1,1,0,0,1,0,1,0"))
                              (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "38") (term "0,1,0,1,0"))
                              (rule "all_pull_out3" (formula "12") (term "0"))
                              (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "38") (term "1,1,1,0,0,1,0"))
                              (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "34") (term "0,0,1,0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "translateJavaMod" (formula "34") (term "0,0,1,0"))
                              (rule "jmod_axiom" (formula "34") (term "0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "34") (term "1,0,0,1,0"))
                              (rule "applyEqRigid" (formula "34") (term "0,1,0,0,1,0") (ifseqformula "43"))
                              (rule "polySimp_pullOutFactor0" (formula "34") (term "0,0,1,0"))
                              (rule "add_literals" (formula "34") (term "1,0,0,1,0"))
                              (rule "times_zero_1" (formula "34") (term "0,0,1,0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "37") (term "0,1,0,1,0,1,0"))
                              (rule "commute_or" (formula "51") (term "0,0,1,0"))
                              (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "34") (term "1,0"))
                               (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "68")) (ifInst ""  (formula "55")))
                              (rule "translateJavaSubInt" (formula "34") (term "3,0,1,1,0"))
                              (rule "polySimp_elimSub" (formula "34") (term "3,0,1,1,0"))
                              (rule "mul_literals" (formula "34") (term "1,3,0,1,1,0"))
                              (rule "polySimp_addComm0" (formula "34") (term "3,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "34") (term "0,1,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "34") (term "1,0,0,0,0,1,0"))
                              (rule "replace_known_left" (formula "34") (term "1,0,0,0,0,1,0") (ifseqformula "54"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "inEqSimp_commuteLeq" (formula "34") (term "1,1,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "34") (term "1,0,1,0"))
                              (rule "applyEq" (formula "34") (term "0,0,1,0,1,0") (ifseqformula "50"))
                              (rule "inEqSimp_commuteGeq" (formula "34") (term "1,0,1,0"))
                              (rule "applyEq" (formula "34") (term "0,0,1,0,0,1,0") (ifseqformula "56"))
                              (rule "replace_known_left" (formula "34") (term "0,1,0,0,1,0") (ifseqformula "58"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "applyEq" (formula "34") (term "0,0,0,0,0,0,1,0") (ifseqformula "50"))
                              (rule "replace_known_right" (formula "34") (term "0,0,0,0,0,1,0") (ifseqformula "72"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "applyEq" (formula "34") (term "1,1,0,0,1,0") (ifseqformula "56"))
                              (rule "replace_known_left" (formula "34") (term "1,0,0,1,0") (ifseqformula "60"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "applyEq" (formula "34") (term "0,1,0,1,0") (ifseqformula "56"))
                              (rule "inEqSimp_commuteLeq" (formula "34") (term "1,0,1,0"))
                              (rule "replace_known_left" (formula "34") (term "1,0,1,0") (ifseqformula "61"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "applyEq" (formula "34") (term "0,0,1,0") (ifseqformula "56"))
                              (rule "eqSymm" (formula "34") (term "0,1,0"))
                              (rule "replace_known_left" (formula "34") (term "0,1,0") (ifseqformula "48"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "applyEq" (formula "34") (term "1,3,0,1,0") (ifseqformula "56"))
                              (rule "applyEq" (formula "34") (term "1,0,1,0") (ifseqformula "50"))
                              (rule "cnf_rightDist" (formula "39") (term "0"))
                              (rule "distr_forallAnd" (formula "39"))
                              (rule "andLeft" (formula "39"))
                              (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "34") (term "0,0,1") (inst "i=i") (inst "j=j_1"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0,1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0,1,0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "34") (term "1,0,1,0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0,1,0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,0,1"))
                              (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,0,1"))
                              (rule "mul_literals" (formula "34") (term "0,1,1,0,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,0,1"))
                              (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0,1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,1,0,0,1"))
                              (rule "mul_literals" (formula "34") (term "0,1,1,0,0,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,1,0,0,1"))
                              (rule "nnf_imp2or" (formula "34") (term "0,0,1"))
                              (rule "nnf_notAnd" (formula "34") (term "0,0,0,1"))
                              (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0,0,1"))
                              (rule "times_zero_1" (formula "34") (term "1,0,0,0,0,0,0,1"))
                              (rule "add_literals" (formula "34") (term "0,0,0,0,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0,0,1"))
                              (rule "mul_literals" (formula "34") (term "1,0,0,0,0,1"))
                              (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0,0,1"))
                              (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,0,1"))
                              (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,0,1"))
                              (rule "add_literals" (formula "34") (term "0,0,0,1,0,0,0,1"))
                              (rule "add_zero_left" (formula "34") (term "0,0,1,0,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,0,1"))
                              (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,0,1"))
                              (rule "nnf_imp2or" (formula "34") (term "0,1,0,0,1"))
                              (rule "nnf_notAnd" (formula "34") (term "0,0,1,0,0,1"))
                              (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0,1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0,0,0,1,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0,1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0,1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "34") (term "1,0,0,0,1,0,0,1"))
                              (rule "mul_literals" (formula "34") (term "0,1,0,0,0,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,0,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,0,1,0,0,1"))
                              (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0,1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,1,0,0,1"))
                              (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,1,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,1,0,0,1"))
                              (rule "add_literals" (formula "34") (term "0,0,0,1,0,0,1,0,0,1"))
                              (rule "add_zero_left" (formula "34") (term "0,0,1,0,0,1,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,1,0,0,1"))
                              (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "34") (term "0,1,0"))
                              (rule "replace_known_right" (formula "34") (term "0,0,0") (ifseqformula "74"))
                               (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "17")))
                              (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "35") (term "0,1,0") (inst "i=i") (inst "j=j_1"))
                               (builtin "One Step Simplification" (formula "35"))
                              (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,1,0,1,0"))
                              (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,1,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,1,0"))
                              (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,1,0"))
                              (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0,1,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "35") (term "1,0,1,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "35") (term "0,1,1,0,0,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,1,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "35") (term "0,1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,1,0"))
                              (rule "nnf_imp2or" (formula "35") (term "0,1,0"))
                              (rule "nnf_notAnd" (formula "35") (term "0,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0,1,0"))
                              (rule "mul_literals" (formula "35") (term "1,0,0,0,0,0,1,0"))
                              (rule "add_literals" (formula "35") (term "0,0,0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0,1,0"))
                              (rule "mul_literals" (formula "35") (term "1,0,0,0,1,0"))
                              (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,1,0"))
                              (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,1,0"))
                              (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "35") (term "0,1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,1,0"))
                              (rule "nnf_imp2or" (formula "35") (term "0,1,0,1,0"))
                              (rule "nnf_notAnd" (formula "35") (term "0,0,1,0,1,0"))
                              (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,1,0,1,0"))
                              (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,1,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "35") (term "0,1,1,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,1,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0,0,0,1,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "35") (term "1,0,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "35") (term "0,1,0,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,0,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0,0,1,0,1,0"))
                              (rule "shift_paren_or" (formula "12") (term "0,0"))
                              (rule "commute_or_2" (formula "41") (term "0"))
                              (rule "all_pull_out3" (formula "54") (term "0"))
                              (rule "all_pull_out3" (formula "65") (term "0"))
                              (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "34") (term "0,0") (inst "i=i") (inst "j=j_1"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0,1,0,0"))
                              (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,1,0,0"))
                              (rule "add_literals" (formula "34") (term "0,0,0,1,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,0"))
                              (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,0"))
                              (rule "add_literals" (formula "34") (term "0,0,0,1,0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "34") (term "1,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,1,0,0"))
                              (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "34") (term "0,1,1,0,0,1,0,0"))
                              (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,0"))
                              (rule "mul_literals" (formula "34") (term "0,1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,0"))
                              (rule "nnf_imp2or" (formula "34") (term "0,0"))
                              (rule "nnf_notAnd" (formula "34") (term "0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0,0"))
                              (rule "times_zero_1" (formula "34") (term "1,0,0,0,0,0,0"))
                              (rule "add_literals" (formula "34") (term "0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0,0"))
                              (rule "mul_literals" (formula "34") (term "1,0,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,0"))
                              (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,0"))
                              (rule "add_literals" (formula "34") (term "0,0,0,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,0"))
                              (rule "mul_literals" (formula "34") (term "0,1,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,0"))
                              (rule "nnf_imp2or" (formula "34") (term "0,1,0,0"))
                              (rule "nnf_notAnd" (formula "34") (term "0,0,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0,1,0,0"))
                              (rule "polySimp_rightDist" (formula "34") (term "1,0,0,0,1,0,0"))
                              (rule "mul_literals" (formula "34") (term "0,1,0,0,0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,0,1,0,0"))
                              (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,0,1,0,0"))
                              (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0,1,0,0"))
                              (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,1,0,0"))
                              (rule "add_literals" (formula "34") (term "0,0,0,1,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,1,0,0"))
                              (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "34") (term "0,1,1,0,0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,1,0,0"))
                              (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,1,0,0"))
                              (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "35") (term "1,1"))
                               (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "70")) (ifInst ""  (formula "57")))
                              (rule "translateJavaSubInt" (formula "35") (term "3,0,1,1,1"))
                              (rule "polySimp_elimSub" (formula "35") (term "3,0,1,1,1"))
                              (rule "mul_literals" (formula "35") (term "1,3,0,1,1,1"))
                              (rule "polySimp_addComm0" (formula "35") (term "3,0,1,1,1"))
                              (rule "inEqSimp_commuteLeq" (formula "35") (term "1,0,1,1"))
                              (rule "inEqSimp_commuteLeq" (formula "35") (term "1,1,0,0,1,1"))
                              (rule "inEqSimp_commuteLeq" (formula "35") (term "0,1,0,0,1,1"))
                              (rule "inEqSimp_commuteLeq" (formula "35") (term "1,0,0,0,0,1,1"))
                              (rule "replace_known_left" (formula "35") (term "1,0,0,0,0,1,1") (ifseqformula "56"))
                               (builtin "One Step Simplification" (formula "35"))
                              (rule "applyEq" (formula "35") (term "1,1,0,1,1") (ifseqformula "58"))
                              (rule "applyEq" (formula "35") (term "1,1,1,0,0,1,1") (ifseqformula "58"))
                              (rule "replace_known_left" (formula "35") (term "1,1,0,0,1,1") (ifseqformula "62"))
                               (builtin "One Step Simplification" (formula "35"))
                              (rule "applyEq" (formula "35") (term "1,3,0,1,1,1") (ifseqformula "58"))
                              (rule "applyEq" (formula "35") (term "0,1,0,0,0,1,1") (ifseqformula "58"))
                              (rule "eqSymm" (formula "35") (term "1,0,0,0,1,1"))
                              (rule "replace_known_left" (formula "35") (term "1,0,0,0,1,1") (ifseqformula "50"))
                               (builtin "One Step Simplification" (formula "35"))
                              (rule "applyEq" (formula "35") (term "0,0,1,0,1,1") (ifseqformula "52"))
                              (rule "replace_known_left" (formula "35") (term "1,0,1,1") (ifseqformula "63"))
                               (builtin "One Step Simplification" (formula "35"))
                              (rule "applyEq" (formula "35") (term "0,0,0,0,1,1") (ifseqformula "52"))
                              (rule "replace_known_right" (formula "35") (term "0,0,0,1,1") (ifseqformula "74"))
                               (builtin "One Step Simplification" (formula "35"))
                              (rule "applyEq" (formula "35") (term "1,0,1,1,1") (ifseqformula "52"))
                              (rule "applyEq" (formula "35") (term "0,0,1,1") (ifseqformula "58"))
                              (rule "replace_known_left" (formula "35") (term "0,1,1") (ifseqformula "60"))
                               (builtin "One Step Simplification" (formula "35"))
                              (rule "cnf_rightDist" (formula "40") (term "0"))
                              (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "34") (term "0,1"))
                              (rule "replace_known_left" (formula "34") (term "1,0") (ifseqformula "17"))
                               (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "75")))
                              (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "35") (term "0,1") (inst "i=i"))
                               (builtin "One Step Simplification" (formula "35"))
                              (rule "translateJavaSubInt" (formula "35") (term "1,1,0,0,1"))
                              (rule "translateJavaAddInt" (formula "35") (term "0,2,1,1,0,1"))
                              (rule "polySimp_elimSub" (formula "35") (term "1,1,0,0,1"))
                              (rule "mul_literals" (formula "35") (term "1,1,1,0,0,1"))
                              (rule "polySimp_addComm0" (formula "35") (term "0,2,1,1,0,1"))
                              (rule "polySimp_addComm1" (formula "35") (term "1,1,0,0,1"))
                              (rule "add_literals" (formula "35") (term "0,1,1,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,1"))
                              (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,1"))
                              (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "35") (term "1,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1"))
                              (rule "mul_literals" (formula "35") (term "0,1,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,1"))
                              (rule "nnf_imp2or" (formula "35") (term "0,1"))
                              (rule "nnf_notAnd" (formula "35") (term "0,0,1"))
                              (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0,1"))
                              (rule "mul_literals" (formula "35") (term "1,0,0,0,0,0,1"))
                              (rule "add_zero_right" (formula "35") (term "0,0,0,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0,1"))
                              (rule "mul_literals" (formula "35") (term "1,0,0,0,1"))
                              (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,1"))
                              (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,1"))
                              (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1"))
                              (rule "mul_literals" (formula "35") (term "0,1,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,1"))
                              (rule "replace_known_left" (formula "35") (term "1") (ifseqformula "65"))
                               (builtin "One Step Simplification" (formula "35"))
                              (rule "true_left" (formula "35"))
                              (rule "commute_or" (formula "41") (term "0,0"))
                              (rule "distr_forallAnd" (formula "40"))
                              (rule "andLeft" (formula "40"))
                              (rule "all_pull_out3" (formula "39") (term "0"))
                              (rule "shift_paren_or" (formula "55") (term "0,0"))
                              (rule "shift_paren_or" (formula "66") (term "0,0"))
                              (rule "all_pull_out1" (formula "38") (term "0,1,0"))
                              (rule "shift_paren_or" (formula "12") (term "0,0,0"))
                              (rule "allLeft" (formula "68") (inst "t=add(Z(neglit(1(#))), l_1)"))
                              (rule "inEqSimp_homoInEq1" (formula "68") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "68") (term "1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "68") (term "1,0,1,0"))
                              (rule "mul_literals" (formula "68") (term "0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "68") (term "0,1,0"))
                              (rule "polySimp_addComm0" (formula "68") (term "0,0,1,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "68") (term "0,1,0"))
                              (rule "add_literals" (formula "68") (term "1,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "68") (term "1,0,1,0"))
                              (rule "inEqSimp_homoInEq0" (formula "68") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "68") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "68") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "68") (term "0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "68") (term "0,0,0"))
                              (rule "add_literals" (formula "68") (term "0,0,0,0"))
                              (rule "add_zero_left" (formula "68") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "68") (term "1,0"))
                              (rule "mul_literals" (formula "68") (term "1,1,0"))
                              (rule "inEqSimp_invertInEq1" (formula "68") (term "0,0"))
                              (rule "mul_literals" (formula "68") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "68") (term "0,0,0"))
                              (rule "polySimp_elimOne" (formula "68") (term "0,0,0"))
                              (rule "inEqSimp_contradInEq1" (formula "68") (term "1,0") (ifseqformula "61"))
                              (rule "qeq_literals" (formula "68") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "68"))
                              (rule "inEqSimp_contradInEq1" (formula "68") (term "0") (ifseqformula "61"))
                              (rule "qeq_literals" (formula "68") (term "0,0"))
                               (builtin "One Step Simplification" (formula "68"))
                              (rule "pullOutSelect" (formula "68") (term "0") (inst "selectSK=arr_3"))
                              (rule "simplifySelectOfAnon" (formula "68"))
                               (builtin "One Step Simplification" (formula "68") (ifInst ""  (formula "74")) (ifInst ""  (formula "3")))
                              (rule "elementOfArrayRangeConcrete" (formula "68") (term "0,0"))
                              (rule "replace_known_right" (formula "68") (term "0,0,0,0") (ifseqformula "84"))
                               (builtin "One Step Simplification" (formula "68"))
                              (rule "applyEqReverse" (formula "69") (term "0") (ifseqformula "68"))
                              (rule "hideAuxiliaryEq" (formula "68"))
                              (rule "allLeft" (formula "69") (inst "t=j_0"))
                              (rule "inEqSimp_contradInEq0" (formula "69") (term "1,0") (ifseqformula "7"))
                              (rule "inEqSimp_homoInEq1" (formula "69") (term "0,1,0"))
                              (rule "polySimp_mulComm0" (formula "69") (term "1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "69") (term "1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "69") (term "1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "69") (term "0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "69") (term "0,0,1,0"))
                              (rule "polySimp_addComm0" (formula "69") (term "0,0,0,1,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "69") (term "0,0,1,0"))
                              (rule "add_literals" (formula "69") (term "1,1,0,0,1,0"))
                              (rule "times_zero_1" (formula "69") (term "1,0,0,1,0"))
                              (rule "add_zero_right" (formula "69") (term "0,0,1,0"))
                              (rule "leq_literals" (formula "69") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "69"))
                              (rule "inEqSimp_contradInEq1" (formula "69") (term "0") (ifseqformula "8"))
                              (rule "qeq_literals" (formula "69") (term "0,0"))
                               (builtin "One Step Simplification" (formula "69"))
                              (rule "pullOutSelect" (formula "69") (term "0") (inst "selectSK=arr_4"))
                              (rule "simplifySelectOfAnon" (formula "69"))
                               (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "75")) (ifInst ""  (formula "3")))
                              (rule "elementOfArrayRangeConcrete" (formula "69") (term "0,0"))
                              (rule "replace_known_right" (formula "69") (term "0,0,0,0") (ifseqformula "85"))
                               (builtin "One Step Simplification" (formula "69"))
                              (rule "applyEqReverse" (formula "70") (term "0") (ifseqformula "69"))
                              (rule "hideAuxiliaryEq" (formula "69"))
                              (rule "allLeft" (formula "70") (inst "t=add(Z(neglit(2(#))), l_1)"))
                              (rule "inEqSimp_homoInEq0" (formula "70") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "70") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "70") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "70") (term "0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "70") (term "0,0,0"))
                              (rule "add_literals" (formula "70") (term "0,0,0,0"))
                              (rule "inEqSimp_homoInEq1" (formula "70") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "70") (term "1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "70") (term "1,0,1,0"))
                              (rule "mul_literals" (formula "70") (term "0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "70") (term "0,1,0"))
                              (rule "polySimp_addComm0" (formula "70") (term "0,0,1,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "70") (term "0,1,0"))
                              (rule "add_literals" (formula "70") (term "1,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "70") (term "1,0,1,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "70") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "70") (term "0,0,0"))
                              (rule "polySimp_elimOne" (formula "70") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "70") (term "1,0"))
                              (rule "mul_literals" (formula "70") (term "1,1,0"))
                              (rule "inEqSimp_contradInEq1" (formula "70") (term "1,0") (ifseqformula "61"))
                              (rule "qeq_literals" (formula "70") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "70"))
                              (rule "inEqSimp_contradInEq1" (formula "70") (term "0") (ifseqformula "61"))
                              (rule "qeq_literals" (formula "70") (term "0,0"))
                               (builtin "One Step Simplification" (formula "70"))
                              (rule "pullOutSelect" (formula "70") (term "0") (inst "selectSK=arr_5"))
                              (rule "simplifySelectOfAnon" (formula "70"))
                               (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "76")) (ifInst ""  (formula "3")))
                              (rule "elementOfArrayRangeConcrete" (formula "70") (term "0,0"))
                              (rule "replace_known_right" (formula "70") (term "0,0,0,0") (ifseqformula "86"))
                               (builtin "One Step Simplification" (formula "70"))
                              (rule "applyEqReverse" (formula "71") (term "0") (ifseqformula "70"))
                              (rule "hideAuxiliaryEq" (formula "70"))
                              (rule "allLeft" (formula "71") (inst "t=add(Z(neglit(1(#))), j_0)"))
                              (rule "inEqSimp_homoInEq0" (formula "71") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "71") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "71") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "71") (term "0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "71") (term "0,0,0"))
                              (rule "add_literals" (formula "71") (term "0,0,0,0"))
                              (rule "add_zero_left" (formula "71") (term "0,0,0"))
                              (rule "inEqSimp_homoInEq1" (formula "71") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "71") (term "1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "71") (term "1,0,1,0"))
                              (rule "mul_literals" (formula "71") (term "0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "71") (term "0,1,0"))
                              (rule "polySimp_addComm0" (formula "71") (term "0,0,1,0"))
                              (rule "inEqSimp_invertInEq1" (formula "71") (term "0,0"))
                              (rule "times_zero_2" (formula "71") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "71") (term "0,0,0"))
                              (rule "polySimp_elimOne" (formula "71") (term "0,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "71") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "71") (term "0,1,0"))
                              (rule "polySimp_elimOne" (formula "71") (term "0,1,0"))
                              (rule "inEqSimp_contradInEq0" (formula "71") (term "1,0") (ifseqformula "7"))
                              (rule "inEqSimp_homoInEq1" (formula "71") (term "0,1,0"))
                              (rule "polySimp_mulComm0" (formula "71") (term "1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "71") (term "1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "71") (term "1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "71") (term "0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "71") (term "0,0,1,0"))
                              (rule "polySimp_addComm1" (formula "71") (term "0,0,0,1,0"))
                              (rule "add_literals" (formula "71") (term "0,0,0,0,1,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "71") (term "0,0,1,0"))
                              (rule "add_literals" (formula "71") (term "1,1,0,0,1,0"))
                              (rule "times_zero_1" (formula "71") (term "1,0,0,1,0"))
                              (rule "add_zero_right" (formula "71") (term "0,0,1,0"))
                              (rule "leq_literals" (formula "71") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "71"))
                              (rule "inEqSimp_contradInEq1" (formula "71") (term "0") (ifseqformula "8"))
                              (rule "qeq_literals" (formula "71") (term "0,0"))
                               (builtin "One Step Simplification" (formula "71"))
                              (rule "pullOutSelect" (formula "71") (term "0") (inst "selectSK=arr_6"))
                              (rule "simplifySelectOfAnon" (formula "71"))
                               (builtin "One Step Simplification" (formula "71") (ifInst ""  (formula "77")) (ifInst ""  (formula "3")))
                              (rule "elementOfArrayRangeConcrete" (formula "71") (term "0,0"))
                              (rule "replace_known_right" (formula "71") (term "0,0,0,0") (ifseqformula "87"))
                               (builtin "One Step Simplification" (formula "71"))
                              (rule "applyEqReverse" (formula "72") (term "0") (ifseqformula "71"))
                              (rule "hideAuxiliaryEq" (formula "71"))
                              (rule "allLeft" (formula "15") (inst "t=Z(0(#))"))
                              (rule "leq_literals" (formula "15") (term "0,0"))
                               (builtin "One Step Simplification" (formula "15"))
                              (rule "add_literals" (formula "15") (term "0,2,2,1,1,1"))
                              (rule "polySimp_homoEq" (formula "15") (term "0,1,1,1"))
                              (rule "mul_literals" (formula "15") (term "1,0,0,1,1,1"))
                              (rule "add_zero_right" (formula "15") (term "0,0,1,1,1"))
                              (rule "inEqSimp_commuteGeq" (formula "15") (term "0"))
                              (rule "polySimp_sepPosMonomial" (formula "15") (term "0,1,1,1"))
                              (rule "mul_literals" (formula "15") (term "1,0,1,1,1"))
                              (rule "inEqSimp_contradInEq1" (formula "15") (term "0") (ifseqformula "8"))
                              (rule "qeq_literals" (formula "15") (term "0,0"))
                               (builtin "One Step Simplification" (formula "15"))
                              (rule "pullOutSelect" (formula "15") (term "2,1,1") (inst "selectSK=arr_7"))
                              (rule "simplifySelectOfAnon" (formula "15"))
                               (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "98")) (ifInst ""  (formula "23")))
                              (rule "elementOfArrayRangeConcrete" (formula "15") (term "0,0"))
                               (builtin "One Step Simplification" (formula "15"))
                              (rule "leq_literals" (formula "15") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "15"))
                              (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0"))
                              (rule "inEqSimp_subsumption6" (formula "15") (term "0,0") (ifseqformula "63"))
                              (rule "greater_literals" (formula "15") (term "0,0,0,0"))
                               (builtin "One Step Simplification" (formula "15"))
                              (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                              (rule "leq_literals" (formula "15") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "15"))
                              (rule "applyEqReverse" (formula "16") (term "2,1,1") (ifseqformula "15"))
                              (rule "hideAuxiliaryEq" (formula "15"))
                              (rule "pullOutSelect" (formula "15") (term "0,1,0,1") (inst "selectSK=arr_8"))
                              (rule "simplifySelectOfAnon" (formula "15"))
                               (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "98")) (ifInst ""  (formula "23")))
                              (rule "polySimp_addComm0" (formula "16") (term "0,1"))
                              (rule "elementOfArrayRangeConcrete" (formula "15") (term "0,0"))
                               (builtin "One Step Simplification" (formula "15"))
                              (rule "leq_literals" (formula "15") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "15"))
                              (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0"))
                              (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "10"))
                              (rule "inEqSimp_subsumption6" (formula "15") (term "0,0") (ifseqformula "63"))
                              (rule "greater_literals" (formula "15") (term "0,0,0,0"))
                               (builtin "One Step Simplification" (formula "15"))
                              (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                              (rule "leq_literals" (formula "15") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "15"))
                              (rule "applyEqReverse" (formula "16") (term "0,0,0,1") (ifseqformula "15"))
                              (rule "times_zero_2" (formula "16") (term "0,0,1"))
                              (rule "add_zero_left" (formula "16") (term "0,1"))
                              (rule "hideAuxiliaryEq" (formula "15"))
                              (rule "allLeft" (formula "16") (inst "t=add(Z(neglit(1(#))), j_0)"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "polySimp_addComm1" (formula "16") (term "1,1"))
                              (rule "polySimp_addComm0" (formula "16") (term "0,1,1"))
                              (rule "inEqSimp_homoInEq0" (formula "16") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "16") (term "0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "16") (term "0,0,0"))
                              (rule "add_literals" (formula "16") (term "0,0,0,0"))
                              (rule "add_zero_left" (formula "16") (term "0,0,0"))
                              (rule "inEqSimp_homoInEq1" (formula "16") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "16") (term "1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "16") (term "1,0,1,0"))
                              (rule "mul_literals" (formula "16") (term "0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "16") (term "0,1,0"))
                              (rule "polySimp_addComm0" (formula "16") (term "0,0,1,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,1,0"))
                              (rule "add_literals" (formula "16") (term "1,1,0,1,0"))
                              (rule "times_zero_1" (formula "16") (term "1,0,1,0"))
                              (rule "add_literals" (formula "16") (term "0,1,0"))
                              (rule "leq_literals" (formula "16") (term "1,0"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "inEqSimp_invertInEq1" (formula "16") (term "0"))
                              (rule "mul_literals" (formula "16") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "16") (term "0,0"))
                              (rule "polySimp_elimOne" (formula "16") (term "0,0"))
                              (rule "inEqSimp_contradInEq1" (formula "16") (term "0") (ifseqformula "8"))
                              (rule "qeq_literals" (formula "16") (term "0,0"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "pullOutSelect" (formula "16") (term "0,1,1") (inst "selectSK=arr_9"))
                              (rule "simplifySelectOfAnon" (formula "16"))
                               (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "99")) (ifInst ""  (formula "24")))
                              (rule "polySimp_addComm1" (formula "17") (term "1"))
                              (rule "polySimp_addComm0" (formula "17") (term "0,1"))
                              (rule "elementOfArrayRangeConcrete" (formula "16") (term "0,0"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "inEqSimp_homoInEq0" (formula "16") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "16") (term "1,0,1,0,0"))
                              (rule "polySimp_rightDist" (formula "16") (term "1,0,1,0,0"))
                              (rule "mul_literals" (formula "16") (term "0,1,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "16") (term "0,1,0,0"))
                              (rule "polySimp_addComm0" (formula "16") (term "0,0,1,0,0"))
                              (rule "inEqSimp_homoInEq0" (formula "16") (term "0,0,0"))
                              (rule "mul_literals" (formula "16") (term "1,0,0,0,0"))
                              (rule "add_zero_right" (formula "16") (term "0,0,0,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "16") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0,0"))
                              (rule "polySimp_elimOne" (formula "16") (term "0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0,0,0"))
                              (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                              (rule "replace_known_left" (formula "16") (term "0,0,0") (ifseqformula "8"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "inEqSimp_subsumption0" (formula "16") (term "0,0") (ifseqformula "7"))
                              (rule "inEqSimp_homoInEq0" (formula "16") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0"))
                              (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,0"))
                              (rule "polySimp_addComm1" (formula "16") (term "0,0,0,0,0"))
                              (rule "add_literals" (formula "16") (term "0,0,0,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,0,0,0"))
                              (rule "add_literals" (formula "16") (term "1,1,0,0,0,0"))
                              (rule "times_zero_1" (formula "16") (term "1,0,0,0,0"))
                              (rule "add_literals" (formula "16") (term "0,0,0,0"))
                              (rule "qeq_literals" (formula "16") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "applyEqReverse" (formula "17") (term "0,0,0,1") (ifseqformula "16"))
                              (rule "hideAuxiliaryEq" (formula "16"))
                              (rule "polySimp_addComm0" (formula "16") (term "0,1"))
                              (rule "polySimp_addComm1" (formula "16") (term "1"))
                              (rule "allLeft" (formula "14") (inst "t=j_0"))
                              (rule "inEqSimp_homoInEq0" (formula "14") (term "0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,0"))
                              (rule "add_literals" (formula "14") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "14") (term "1,0,0,0"))
                              (rule "add_literals" (formula "14") (term "0,0,0"))
                              (rule "qeq_literals" (formula "14") (term "0,0"))
                               (builtin "One Step Simplification" (formula "14"))
                              (rule "inEqSimp_contradInEq0" (formula "14") (term "0") (ifseqformula "7"))
                              (rule "inEqSimp_homoInEq1" (formula "14") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
                              (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "14") (term "0,0,0"))
                              (rule "polySimp_addComm0" (formula "14") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,0,0"))
                              (rule "add_literals" (formula "14") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "14") (term "1,0,0,0"))
                              (rule "add_literals" (formula "14") (term "0,0,0"))
                              (rule "leq_literals" (formula "14") (term "0,0"))
                               (builtin "One Step Simplification" (formula "14"))
                              (rule "applyEq" (formula "102") (term "0") (ifseqformula "14"))
                              (rule "pullOutSelect" (formula "14") (term "1") (inst "selectSK=arr_10"))
                              (rule "applyEq" (formula "103") (term "0") (ifseqformula "14"))
                              (rule "simplifySelectOfAnon" (formula "14"))
                               (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "100")) (ifInst ""  (formula "25")))
                              (rule "eqSymm" (formula "103"))
                              (rule "elementOfArrayRangeConcrete" (formula "14") (term "0,0"))
                               (builtin "One Step Simplification" (formula "14"))
                              (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                              (rule "inEqSimp_subsumption0" (formula "14") (term "1,0,0") (ifseqformula "7"))
                              (rule "inEqSimp_homoInEq0" (formula "14") (term "0,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                              (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
                              (rule "polySimp_addComm0" (formula "14") (term "0,0,0,1,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "14") (term "1,1,0,0,1,0,0"))
                              (rule "times_zero_1" (formula "14") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "14") (term "0,0,1,0,0"))
                              (rule "qeq_literals" (formula "14") (term "0,1,0,0"))
                               (builtin "One Step Simplification" (formula "14"))
                              (rule "inEqSimp_subsumption1" (formula "14") (term "0,0") (ifseqformula "8"))
                              (rule "leq_literals" (formula "14") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "103")))
                              (rule "closeFalse" (formula "14"))
                           )
                           (branch "self.equal_buckets = TRUE FALSE"
                              (rule "applyEq" (formula "48") (term "1,1,0,0") (ifseqformula "44"))
                              (rule "applyEq" (formula "54") (term "0") (ifseqformula "44"))
                              (rule "applyEq" (formula "57") (term "1,1,1,0,0,1,0") (ifseqformula "44"))
                              (rule "applyEq" (formula "55") (term "0") (ifseqformula "44"))
                              (rule "inEqSimp_commuteLeq" (formula "55"))
                              (rule "applyEq" (formula "47") (term "1,1,1,0,0,0") (ifseqformula "44"))
                              (rule "applyEq" (formula "57") (term "1,1,1,0,0") (ifseqformula "44"))
                              (rule "applyEq" (formula "46") (term "3,0") (ifseqformula "44"))
                              (rule "applyEq" (formula "56") (term "1,1,1,0,0") (ifseqformula "44"))
                              (rule "applyEq" (formula "48") (term "1,1,0,0,1,0") (ifseqformula "44"))
                              (rule "applyEq" (formula "54") (term "1") (ifseqformula "44"))
                              (rule "applyEq" (formula "49") (term "1,0,2,0") (ifseqformula "44"))
                              (rule "eqSymm" (formula "49"))
                              (rule "applyEq" (formula "49") (term "1,0,2,0") (ifseqformula "44"))
                              (rule "eqSymm" (formula "49"))
                              (rule "applyEq" (formula "52") (term "1") (ifseqformula "44"))
                              (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "30") (term "1,1,0"))
                               (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "66")) (ifInst ""  (formula "67")) (ifInst ""  (formula "62")) (ifInst ""  (formula "45")))
                              (rule "translateJavaSubInt" (formula "30") (term "0,2,0,1,0,1,1,0"))
                              (rule "translateJavaSubInt" (formula "30") (term "0,2,1,1,0,1,1,0"))
                              (rule "eqSymm" (formula "30") (term "1,0,0,0,1,1,0"))
                              (rule "eqSymm" (formula "30") (term "1,0,1,1,0"))
                              (rule "polySimp_elimSub" (formula "30") (term "0,2,1,1,0,1,1,0"))
                              (rule "mul_literals" (formula "30") (term "1,0,2,1,1,0,1,1,0"))
                              (rule "polySimp_elimSub" (formula "30") (term "0,2,0,1,0,1,1,0"))
                              (rule "mul_literals" (formula "30") (term "1,0,2,0,1,0,1,1,0"))
                              (rule "polySimp_addComm0" (formula "30") (term "0,2,1,1,0,1,1,0"))
                              (rule "polySimp_addComm0" (formula "30") (term "0,2,0,1,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0,0,0,1,1,0"))
                              (rule "applyEq" (formula "30") (term "1,0,2,0,1,0,1,1,0") (ifseqformula "52"))
                              (rule "eqSymm" (formula "30") (term "1,0,1,1,0"))
                              (rule "applyEq" (formula "30") (term "0,0,0,0,0,0,1,1,0") (ifseqformula "29"))
                              (rule "replace_known_left" (formula "30") (term "0,0,0,0,0,1,1,0") (ifseqformula "42"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "applyEq" (formula "30") (term "3,0,1,0,0,1,1,0") (ifseqformula "52"))
                              (rule "replace_known_left" (formula "30") (term "1,0,0,1,1,0") (ifseqformula "46"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "applyEq" (formula "30") (term "0,0,0,0,1,1,0") (ifseqformula "29"))
                              (rule "replace_known_left" (formula "30") (term "0,0,0,1,1,0") (ifseqformula "43"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "applyEq" (formula "30") (term "1,0,2,0,1,0,1,1,0") (ifseqformula "52"))
                              (rule "eqSymm" (formula "30") (term "1,0,1,1,0"))
                              (rule "replace_known_left" (formula "30") (term "1,0,1,1,0") (ifseqformula "49"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "applyEq" (formula "30") (term "0,0,1,1,0") (ifseqformula "52"))
                              (rule "eqSymm" (formula "30") (term "0,1,1,0"))
                              (rule "replace_known_left" (formula "30") (term "0,1,1,0") (ifseqformula "29"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "36") (term "2,0"))
                              (rule "arrayLengthIsAShort" (formula "54") (term "0"))
                               (builtin "One Step Simplification" (formula "54"))
                              (rule "true_left" (formula "54"))
                              (rule "arrayLengthNotNegative" (formula "54") (term "0"))
                              (rule "arrayLengthNotNegative" (formula "53") (term "0"))
                              (rule "inEqSimp_subsumption1" (formula "53") (ifseqformula "54"))
                              (rule "leq_literals" (formula "53") (term "0"))
                               (builtin "One Step Simplification" (formula "53"))
                              (rule "true_left" (formula "53"))
                              (rule "arrayLengthIsAShort" (formula "53") (term "0"))
                               (builtin "One Step Simplification" (formula "53"))
                              (rule "true_left" (formula "53"))
                              (rule "nnf_imp2or" (formula "57") (term "0"))
                              (rule "nnf_notAnd" (formula "47") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "47") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "47") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "47") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "47") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "47") (term "0,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "47") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "47") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "47") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "47") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "47") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "47") (term "1,1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "47") (term "0,0,0"))
                              (rule "times_zero_1" (formula "47") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "47") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "47") (term "0,0,0"))
                              (rule "mul_literals" (formula "47") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "57") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "57") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "57") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "57") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "57") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "57") (term "0,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "57") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "57") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "57") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "57") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "57") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "57") (term "1,1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "57") (term "0,0,0"))
                              (rule "times_zero_1" (formula "57") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "57") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "57") (term "0,0,0"))
                              (rule "mul_literals" (formula "57") (term "1,0,0,0"))
                              (rule "Definition_axiom_for_isClassOfSlice_in_de_wiesler_Classifier" (formula "34") (term "0,1,0") (inst "i=i"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,1,0"))
                              (rule "polySimp_mulAssoc" (formula "34") (term "0,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "34") (term "0,0,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "34") (term "0,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "34") (term "0,1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "34") (term "1,0,1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "34") (term "0,0,1,1,0,0,1,0"))
                              (rule "Definition_axiom_for_isValidBufferLen_in_de_wiesler_Classifier" (formula "35") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "35"))
                              (rule "inEqSimp_ltToLeq" (formula "35") (term "0,1,1,0"))
                              (rule "add_zero_right" (formula "35") (term "0,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "35") (term "0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "35") (term "0,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "35") (term "0,0,1,1,0"))
                              (rule "Contract_axiom_for_isClassifiedBlock_in_Classifier" (formula "33") (term "0,1,0"))
                              (rule "replace_known_left" (formula "33") (term "1,0,0,0") (ifseqformula "13"))
                               (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "87")) (ifInst ""  (formula "14")) (ifInst ""  (formula "88")))
                              (rule "true_left" (formula "33"))
                              (rule "Definition_axiom_for_isClassifiedBlock_in_de_wiesler_Classifier" (formula "33") (term "0,1,0") (inst "bucket=bucket"))
                               (builtin "One Step Simplification" (formula "33"))
                              (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0,1,0"))
                              (rule "applyEq" (formula "33") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "29"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "33") (term "0,1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0,1,0"))
                              (rule "Contract_axiom_for_countClassOfSliceEq_in_Classifier" (formula "31") (term "1,1,0"))
                              (rule "replace_known_right" (formula "31") (term "0,1,0,0,0,0") (ifseqformula "87"))
                               (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "13")) (ifInst ""  (formula "14")) (ifInst ""  (formula "88")))
                              (rule "true_left" (formula "31"))
                              (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "31") (term "1,1,0") (inst "i=i"))
                              (rule "eqSymm" (formula "31") (term "1,0"))
                              (rule "onlyCreatedObjectsAreReferencedFinal" (formula "69") (term "0") (ifseqformula "13") (ifseqformula "18"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "67"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferencedFinal" (formula "77") (term "0") (ifseqformula "14") (ifseqformula "15"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "70"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferencedFinal" (formula "84") (term "0,0") (ifseqformula "15") (ifseqformula "16"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "70"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferencedFinal" (formula "78") (term "0") (ifseqformula "16") (ifseqformula "21"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "69"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "nnf_imp2or" (formula "38") (term "0,1,0"))
                              (rule "nnf_imp2or" (formula "39") (term "1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "39") (term "0,1,1,0"))
                              (rule "mul_literals" (formula "39") (term "1,0,0,0,1,1,0"))
                              (rule "add_literals" (formula "39") (term "0,0,0,1,1,0"))
                              (rule "add_zero_left" (formula "39") (term "0,0,1,1,0"))
                              (rule "commute_or" (formula "27") (term "0"))
                              (rule "commute_or" (formula "65") (term "0"))
                              (rule "nnf_notAnd" (formula "38") (term "0,0,1,0"))
                              (rule "inEqSimp_notLeq" (formula "38") (term "1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "38") (term "0,1,0,0,1,0,0,1,0"))
                              (rule "mul_literals" (formula "38") (term "0,0,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "38") (term "1,0,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "38") (term "0,0,0,1,0,0,1,0"))
                              (rule "add_literals" (formula "38") (term "0,0,0,0,1,0,0,1,0"))
                              (rule "add_zero_left" (formula "38") (term "0,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "38") (term "0,1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "38") (term "0,1,1,0,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "38") (term "0,0,0,1,0"))
                              (rule "polySimp_mulAssoc" (formula "38") (term "1,0,0,0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "38") (term "0,1,0,0,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "38") (term "1,0,0,0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "38") (term "1,0,0,0,1,0"))
                              (rule "mul_literals" (formula "38") (term "0,1,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0,0,1,0"))
                              (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "50") (term "0") (inst "i=i") (inst "j=j_1"))
                               (builtin "One Step Simplification" (formula "50"))
                              (rule "inEqSimp_ltToLeq" (formula "50") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "50") (term "1,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "50") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "50") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "50") (term "0,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "50") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "50") (term "1,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "50") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "50") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "50") (term "1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "50") (term "1,1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "50") (term "0,1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "50") (term "1,1,1,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "50") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "50") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "50") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "50") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "50") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "50") (term "1,1,1,0,0"))
                              (rule "nnf_imp2or" (formula "50") (term "0"))
                              (rule "nnf_notAnd" (formula "50") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "50") (term "0,0,0"))
                              (rule "times_zero_1" (formula "50") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "50") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "50") (term "0,0,0"))
                              (rule "mul_literals" (formula "50") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "50") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "50") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "50") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "50") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "50") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "50") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "50") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "50") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "50") (term "1,1,0,0"))
                              (rule "nnf_imp2or" (formula "50") (term "0,1,0"))
                              (rule "nnf_notAnd" (formula "50") (term "0,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "50") (term "0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "50") (term "1,0,0,0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "50") (term "0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "50") (term "1,0,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "50") (term "1,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "50") (term "1,1,0,0,0,1,0"))
                              (rule "mul_literals" (formula "50") (term "0,1,0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "50") (term "1,1,0,0,0,1,0"))
                              (rule "inEqSimp_notLeq" (formula "50") (term "1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "50") (term "1,0,0,1,0,0,1,0"))
                              (rule "mul_literals" (formula "50") (term "0,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "50") (term "0,0,1,0,0,1,0"))
                              (rule "add_literals" (formula "50") (term "0,0,0,1,0,0,1,0"))
                              (rule "add_zero_left" (formula "50") (term "0,0,1,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "50") (term "1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "50") (term "1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "50") (term "1,1,0,0,1,0"))
                              (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "34") (term "1"))
                               (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "70")) (ifInst ""  (formula "71")) (ifInst ""  (formula "66")) (ifInst ""  (formula "49")))
                              (rule "translateJavaSubInt" (formula "34") (term "0,2,0,1,0,1"))
                              (rule "translateJavaSubInt" (formula "34") (term "0,2,1,1,0,1"))
                              (rule "eqSymm" (formula "34") (term "1,0,0,0,1"))
                              (rule "eqSymm" (formula "34") (term "1,0,1"))
                              (rule "polySimp_elimSub" (formula "34") (term "0,2,0,1,0,1"))
                              (rule "mul_literals" (formula "34") (term "1,0,2,0,1,0,1"))
                              (rule "eqSymm" (formula "34") (term "1,0,1"))
                              (rule "polySimp_elimSub" (formula "34") (term "0,2,0,1,0,1"))
                              (rule "mul_literals" (formula "34") (term "1,0,2,0,1,0,1"))
                              (rule "eqSymm" (formula "34") (term "1,0,1"))
                              (rule "polySimp_addComm0" (formula "34") (term "0,2,0,1,0,1"))
                              (rule "eqSymm" (formula "34") (term "1,0,1"))
                              (rule "polySimp_addComm0" (formula "34") (term "0,2,0,1,0,1"))
                              (rule "eqSymm" (formula "34") (term "1,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0,0,0,1"))
                              (rule "applyEq" (formula "34") (term "1,0,2,0,1,0,1") (ifseqformula "55"))
                              (rule "eqSymm" (formula "34") (term "1,0,1"))
                              (rule "applyEq" (formula "34") (term "0,0,0,0,0,0,1") (ifseqformula "33"))
                              (rule "replace_known_left" (formula "34") (term "0,0,0,0,0,1") (ifseqformula "46"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "applyEq" (formula "34") (term "0,0,0,0,0,1") (ifseqformula "33"))
                              (rule "replace_known_left" (formula "34") (term "0,0,0,0,1") (ifseqformula "47"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "applyEq" (formula "34") (term "0,0,0,0,1") (ifseqformula "55"))
                              (rule "eqSymm" (formula "34") (term "0,0,0,1"))
                              (rule "replace_known_left" (formula "34") (term "0,0,0,1") (ifseqformula "33"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "applyEq" (formula "34") (term "1,0,2,0,1,0,1") (ifseqformula "55"))
                              (rule "eqSymm" (formula "34") (term "1,0,1"))
                              (rule "replace_known_left" (formula "34") (term "1,0,1") (ifseqformula "52"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "applyEq" (formula "34") (term "3,0,0,1") (ifseqformula "55"))
                              (rule "allLeft" (formula "13") (inst "t=Z(0(#))"))
                              (rule "replaceKnownSelect_taclet1_0" (formula "13") (term "1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet01001201_4" (formula "13") (term "1,1"))
                              (rule "leq_literals" (formula "13") (term "0,0"))
                               (builtin "One Step Simplification" (formula "13"))
                              (rule "add_zero_right" (formula "13") (term "0,2,0,1"))
                              (rule "inEqSimp_homoInEq1" (formula "13") (term "0"))
                              (rule "times_zero_2" (formula "13") (term "1,0,0"))
                              (rule "add_zero_right" (formula "13") (term "0,0"))
                              (rule "applyEq" (formula "13") (term "1,1") (ifseqformula "10"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0"))
                              (rule "mul_literals" (formula "13") (term "1,0"))
                              (rule "pullOutSelect" (formula "13") (term "0,1") (inst "selectSK=arr_3"))
                              (rule "simplifySelectOfAnon" (formula "13"))
                               (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "90")) (ifInst ""  (formula "23")))
                              (rule "elementOfArrayRangeConcrete" (formula "13") (term "0,0"))
                               (builtin "One Step Simplification" (formula "13"))
                              (rule "leq_literals" (formula "13") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "13"))
                              (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0"))
                              (rule "inEqSimp_subsumption1" (formula "13") (term "0,0") (ifseqformula "48"))
                              (rule "leq_literals" (formula "13") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "13"))
                              (rule "applyEqReverse" (formula "14") (term "0,1") (ifseqformula "13"))
                              (rule "hideAuxiliaryEq" (formula "13"))
                              (rule "commute_or" (formula "62") (term "0,0,1,0"))
                              (rule "commute_or" (formula "52") (term "0,0,1,0"))
                              (rule "all_pull_out3" (formula "12") (term "0"))
                              (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "40") (term "0,1,0,1,0"))
                               (builtin "One Step Simplification" (formula "40"))
                              (rule "translateJavaMod" (formula "40") (term "0,1,0,1,0"))
                              (rule "jmod_axiom" (formula "40") (term "0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "40") (term "1,0,1,0,1,0"))
                              (rule "polySimp_sepNegMonomial" (formula "40") (term "1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "40") (term "0,1,0,1,0"))
                              (rule "Contract_axiom_for_isClassOfSlice_in_Classifier" (formula "38") (term "0,1,0,1,0"))
                              (rule "replace_known_right" (formula "38") (term "0,1,0,0,0,0") (ifseqformula "91"))
                               (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "18")) (ifInst ""  (formula "19")) (ifInst ""  (formula "92")))
                              (rule "true_left" (formula "38"))
                              (rule "Definition_axiom_for_isClassOfSlice_in_de_wiesler_Classifier" (formula "38") (term "0,1,0,1,0") (inst "i=i"))
                               (builtin "One Step Simplification" (formula "38"))
                              (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0,1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "38") (term "0,1,0,0,1,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "38") (term "0,0,1,0,0,1,0,0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "38") (term "0,0,0,1,0,0,1,0,1,0"))
                              (rule "add_literals" (formula "38") (term "0,0,0,0,1,0,0,1,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0,1,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "38") (term "0,1,1,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "38") (term "1,0,1,1,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "38") (term "0,0,1,1,0,0,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "38") (term "1,0,1,1,0,0,1,0,1,0"))
                              (rule "nnf_imp2or" (formula "38") (term "0,1,0,1,0"))
                              (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "36") (term "0,0,2,0,1,0"))
                              (rule "nnf_notAnd" (formula "38") (term "0,0,1,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "38") (term "0,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "38") (term "1,0,0,0,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0,0,0,0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "38") (term "0,1,0,0,0,0,0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "38") (term "0,0,0,0,0,1,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "38") (term "1,0,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "38") (term "0,1,0,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "38") (term "0,0,1,0,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "38") (term "1,0,1,0,0,0,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "38") (term "1,0,1,0,0,0,1,0,1,0"))
                              (rule "inEqSimp_notLeq" (formula "38") (term "1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0,1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "38") (term "0,1,0,0,1,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "38") (term "0,0,1,0,0,1,0,0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "38") (term "0,0,0,1,0,0,1,0,1,0"))
                              (rule "add_literals" (formula "38") (term "0,0,0,0,1,0,0,1,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "1,0,0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "38") (term "0,1,1,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "38") (term "1,0,1,1,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "38") (term "0,0,1,1,0,0,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "38") (term "1,0,1,1,0,0,1,0,1,0"))
                              (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "39") (term "0,1,0,1,0"))
                              (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "39") (term "1,1,1,0,0,1,0"))
                              (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "35") (term "0,0,1,0"))
                               (builtin "One Step Simplification" (formula "35"))
                              (rule "translateJavaMod" (formula "35") (term "0,0,1,0"))
                              (rule "jmod_axiom" (formula "35") (term "0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "35") (term "1,0,0,1,0"))
                              (rule "applyEq" (formula "35") (term "0,1,0,0,1,0") (ifseqformula "44"))
                              (rule "polySimp_pullOutFactor0" (formula "35") (term "0,0,1,0"))
                              (rule "add_literals" (formula "35") (term "1,0,0,1,0"))
                              (rule "times_zero_1" (formula "35") (term "0,0,1,0"))
                               (builtin "One Step Simplification" (formula "35"))
                              (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "38") (term "0,1,0,1,0,1,0"))
                              (rule "shift_paren_or" (formula "12") (term "0,0"))
                              (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "35") (term "0,0,1"))
                              (rule "replace_known_right" (formula "35") (term "0,0,0") (ifseqformula "73"))
                               (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "18")))
                              (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "36") (term "0,0,1") (inst "i=i") (inst "j=j_1"))
                               (builtin "One Step Simplification" (formula "36"))
                              (rule "inEqSimp_ltToLeq" (formula "36") (term "1,0,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,0,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "36") (term "1,0,0,1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,0,0,1,0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "36") (term "1,0,1,0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,0,1,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0,0,1"))
                              (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0,0,1"))
                              (rule "mul_literals" (formula "36") (term "0,1,1,0,0,0,1"))
                              (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0,1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0,1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0,1,0,0,1"))
                              (rule "mul_literals" (formula "36") (term "0,1,1,0,0,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0,1,0,0,1"))
                              (rule "nnf_imp2or" (formula "36") (term "0,0,1"))
                              (rule "nnf_notAnd" (formula "36") (term "0,0,0,1"))
                              (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0,0,1"))
                              (rule "times_zero_1" (formula "36") (term "1,0,0,0,0,0,0,1"))
                              (rule "add_zero_right" (formula "36") (term "0,0,0,0,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0,0,1"))
                              (rule "mul_literals" (formula "36") (term "1,0,0,0,0,1"))
                              (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0,0,1"))
                              (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0,0,1"))
                              (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0,0,1"))
                              (rule "add_literals" (formula "36") (term "0,0,0,1,0,0,0,1"))
                              (rule "add_zero_left" (formula "36") (term "0,0,1,0,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0,0,1"))
                              (rule "polySimp_elimOne" (formula "36") (term "1,1,0,0,0,1"))
                              (rule "nnf_imp2or" (formula "36") (term "0,1,0,0,1"))
                              (rule "nnf_notAnd" (formula "36") (term "0,0,1,0,0,1"))
                              (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0,1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0,1,0,0,1"))
                              (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0,1,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0,1,0,0,1"))
                              (rule "add_literals" (formula "36") (term "0,0,0,1,0,0,1,0,0,1"))
                              (rule "add_zero_left" (formula "36") (term "0,0,1,0,0,1,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "36") (term "1,1,0,0,1,0,0,1"))
                              (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0,1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,0,0,0,1,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0,1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,0,1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "36") (term "1,0,0,0,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0,0,1,0,0,1"))
                              (rule "mul_literals" (formula "36") (term "0,1,0,0,0,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "36") (term "1,1,0,0,0,1,0,0,1"))
                              (rule "cnf_rightDist" (formula "41") (term "0"))
                              (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "35") (term "0,1") (inst "i=i"))
                               (builtin "One Step Simplification" (formula "35"))
                              (rule "translateJavaSubInt" (formula "35") (term "1,1,0,0,1"))
                              (rule "translateJavaAddInt" (formula "35") (term "0,2,1,1,0,1"))
                              (rule "polySimp_elimSub" (formula "35") (term "1,1,0,0,1"))
                              (rule "mul_literals" (formula "35") (term "1,1,1,0,0,1"))
                              (rule "polySimp_addComm0" (formula "35") (term "0,2,1,1,0,1"))
                              (rule "polySimp_addComm0" (formula "35") (term "1,1,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,1"))
                              (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,1"))
                              (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "35") (term "1,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1"))
                              (rule "mul_literals" (formula "35") (term "0,1,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,1"))
                              (rule "nnf_imp2or" (formula "35") (term "0,1"))
                              (rule "nnf_notAnd" (formula "35") (term "0,0,1"))
                              (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0,1"))
                              (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0,1"))
                              (rule "add_zero_right" (formula "35") (term "0,0,0,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0,1"))
                              (rule "mul_literals" (formula "35") (term "1,0,0,0,1"))
                              (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,1"))
                              (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,1"))
                              (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1"))
                              (rule "mul_literals" (formula "35") (term "0,1,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,1"))
                              (rule "replace_known_left" (formula "35") (term "1") (ifseqformula "52"))
                               (builtin "One Step Simplification" (formula "35"))
                              (rule "true_left" (formula "35"))
                              (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "35") (term "1,1"))
                               (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "68")) (ifInst ""  (formula "55")))
                              (rule "translateJavaSubInt" (formula "35") (term "3,0,1,1,1"))
                              (rule "polySimp_elimSub" (formula "35") (term "3,0,1,1,1"))
                              (rule "mul_literals" (formula "35") (term "1,3,0,1,1,1"))
                              (rule "polySimp_addComm0" (formula "35") (term "3,0,1,1,1"))
                              (rule "inEqSimp_commuteLeq" (formula "35") (term "1,0,1,1"))
                              (rule "inEqSimp_commuteLeq" (formula "35") (term "1,0,0,0,0,1,1"))
                              (rule "replace_known_left" (formula "35") (term "1,0,0,0,0,1,1") (ifseqformula "54"))
                               (builtin "One Step Simplification" (formula "35"))
                              (rule "inEqSimp_commuteLeq" (formula "35") (term "1,1,0,0,1,1"))
                              (rule "inEqSimp_commuteLeq" (formula "35") (term "0,1,0,0,1,1"))
                              (rule "applyEq" (formula "35") (term "1,1,0,1,1") (ifseqformula "56"))
                              (rule "applyEq" (formula "35") (term "1,1,1,0,0,1,1") (ifseqformula "56"))
                              (rule "replace_known_left" (formula "35") (term "1,1,0,0,1,1") (ifseqformula "59"))
                               (builtin "One Step Simplification" (formula "35"))
                              (rule "applyEq" (formula "35") (term "0,0,0,0,0,0,1,1") (ifseqformula "50"))
                              (rule "replace_known_right" (formula "35") (term "0,0,0,0,0,1,1") (ifseqformula "72"))
                               (builtin "One Step Simplification" (formula "35"))
                              (rule "applyEq" (formula "35") (term "0,0,0,0,1,1") (ifseqformula "56"))
                              (rule "eqSymm" (formula "35") (term "0,0,0,1,1"))
                              (rule "replace_known_left" (formula "35") (term "0,0,0,1,1") (ifseqformula "49"))
                               (builtin "One Step Simplification" (formula "35"))
                              (rule "applyEq" (formula "35") (term "0,0,0,1,1") (ifseqformula "56"))
                              (rule "replace_known_left" (formula "35") (term "0,0,1,1") (ifseqformula "47"))
                               (builtin "One Step Simplification" (formula "35"))
                              (rule "applyEq" (formula "35") (term "1,3,0,1,1,1") (ifseqformula "56"))
                              (rule "applyEq" (formula "35") (term "0,0,0,1,1") (ifseqformula "50"))
                              (rule "replace_known_left" (formula "35") (term "0,1,1") (ifseqformula "60"))
                               (builtin "One Step Simplification" (formula "35"))
                              (rule "applyEq" (formula "35") (term "1,0,1,1") (ifseqformula "50"))
                              (rule "distr_forallAnd" (formula "40"))
                              (rule "andLeft" (formula "40"))
                              (rule "shift_paren_or" (formula "12") (term "0,0,0"))
                              (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "35") (term "1,0"))
                               (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "69")) (ifInst ""  (formula "56")))
                              (rule "translateJavaSubInt" (formula "35") (term "3,0,1,1,0"))
                              (rule "polySimp_elimSub" (formula "35") (term "3,0,1,1,0"))
                              (rule "mul_literals" (formula "35") (term "1,3,0,1,1,0"))
                              (rule "polySimp_addComm0" (formula "35") (term "3,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "35") (term "1,0,0,0,0,1,0"))
                              (rule "replace_known_left" (formula "35") (term "1,0,0,0,0,1,0") (ifseqformula "55"))
                               (builtin "One Step Simplification" (formula "35"))
                              (rule "inEqSimp_commuteLeq" (formula "35") (term "0,1,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "35") (term "1,1,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "35") (term "1,0,1,0"))
                              (rule "applyEq" (formula "35") (term "1,3,0,1,1,0") (ifseqformula "57"))
                              (rule "applyEq" (formula "35") (term "0,0,1,0,1,0") (ifseqformula "51"))
                              (rule "inEqSimp_commuteGeq" (formula "35") (term "1,0,1,0"))
                              (rule "applyEq" (formula "35") (term "1,1,1,0,0,1,0") (ifseqformula "57"))
                              (rule "replace_known_left" (formula "35") (term "1,1,0,0,1,0") (ifseqformula "60"))
                               (builtin "One Step Simplification" (formula "35"))
                              (rule "applyEq" (formula "35") (term "0,1,0,0,0,1,0") (ifseqformula "57"))
                              (rule "eqSymm" (formula "35") (term "1,0,0,0,1,0"))
                              (rule "replace_known_left" (formula "35") (term "1,0,0,0,1,0") (ifseqformula "50"))
                               (builtin "One Step Simplification" (formula "35"))
                              (rule "applyEq" (formula "35") (term "0,1,0,0,1,0") (ifseqformula "57"))
                              (rule "replace_known_left" (formula "35") (term "1,0,0,1,0") (ifseqformula "48"))
                               (builtin "One Step Simplification" (formula "35"))
                              (rule "applyEq" (formula "35") (term "1,0,1,1,0") (ifseqformula "51"))
                              (rule "applyEq" (formula "35") (term "0,0,0,0,1,0") (ifseqformula "51"))
                              (rule "replace_known_right" (formula "35") (term "0,0,0,1,0") (ifseqformula "73"))
                               (builtin "One Step Simplification" (formula "35"))
                              (rule "applyEq" (formula "35") (term "0,0,1,0") (ifseqformula "57"))
                              (rule "inEqSimp_commuteLeq" (formula "35") (term "0,1,0"))
                              (rule "replace_known_left" (formula "35") (term "0,1,0") (ifseqformula "61"))
                               (builtin "One Step Simplification" (formula "35"))
                              (rule "all_pull_out3" (formula "63") (term "0"))
                              (rule "all_pull_out3" (formula "53") (term "0"))
                              (rule "commute_or_2" (formula "41") (term "0"))
                              (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "35") (term "0,1,1"))
                              (rule "replace_known_right" (formula "35") (term "0,0,0") (ifseqformula "74"))
                               (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "18")))
                              (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "36") (term "0,1,0"))
                              (rule "replace_known_left" (formula "36") (term "1") (ifseqformula "35"))
                               (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "75")) (ifInst ""  (formula "18")))
                              (rule "true_left" (formula "36"))
                              (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "36") (term "0,1,1") (inst "i=i") (inst "j=j_1"))
                               (builtin "One Step Simplification" (formula "36"))
                              (rule "inEqSimp_ltToLeq" (formula "36") (term "1,0,0,1,1"))
                              (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0,1,1"))
                              (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0,1,1"))
                              (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0,1,1"))
                              (rule "add_literals" (formula "36") (term "0,0,0,1,0,0,1,1"))
                              (rule "inEqSimp_ltToLeq" (formula "36") (term "1,0,0,1,0,1,1"))
                              (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0,1,0,1,1"))
                              (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0,1,0,1,1"))
                              (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0,1,0,1,1"))
                              (rule "add_literals" (formula "36") (term "0,0,0,1,0,0,1,0,1,1"))
                              (rule "inEqSimp_commuteLeq" (formula "36") (term "1,0,1,0,1,1"))
                              (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,0,1,0,1,1"))
                              (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,0,1,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0,1,1"))
                              (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0,1,1"))
                              (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0,1,1"))
                              (rule "mul_literals" (formula "36") (term "0,1,1,0,0,1,1"))
                              (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0,1,1"))
                              (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0,1,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0,1,0,1,1"))
                              (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0,1,0,1,1"))
                              (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0,1,0,1,1"))
                              (rule "mul_literals" (formula "36") (term "0,1,1,0,0,1,0,1,1"))
                              (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0,1,0,1,1"))
                              (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0,1,0,1,1"))
                              (rule "nnf_imp2or" (formula "36") (term "0,1,1"))
                              (rule "nnf_notAnd" (formula "36") (term "0,0,1,1"))
                              (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0,1,1"))
                              (rule "mul_literals" (formula "36") (term "1,0,0,0,0,0,1,1"))
                              (rule "add_zero_right" (formula "36") (term "0,0,0,0,0,1,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0,1,1"))
                              (rule "mul_literals" (formula "36") (term "1,0,0,0,1,1"))
                              (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0,1,1"))
                              (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0,1,1"))
                              (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0,1,1"))
                              (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0,1,1"))
                              (rule "add_literals" (formula "36") (term "0,0,0,1,0,0,1,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0,1,1"))
                              (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0,1,1"))
                              (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0,1,1"))
                              (rule "mul_literals" (formula "36") (term "0,1,1,0,0,1,1"))
                              (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0,1,1"))
                              (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0,1,1"))
                              (rule "nnf_imp2or" (formula "36") (term "0,1,0,1,1"))
                              (rule "nnf_notAnd" (formula "36") (term "0,0,1,0,1,1"))
                              (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0,1,0,1,1"))
                              (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,0,0,0,1,0,1,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0,1,0,1,1"))
                              (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,0,1,0,1,1"))
                              (rule "polySimp_rightDist" (formula "36") (term "1,0,0,0,1,0,1,1"))
                              (rule "mul_literals" (formula "36") (term "0,1,0,0,0,1,0,1,1"))
                              (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0,0,1,0,1,1"))
                              (rule "polySimp_elimOne" (formula "36") (term "1,1,0,0,0,1,0,1,1"))
                              (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0,1,0,1,1"))
                              (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0,1,0,1,1"))
                              (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0,1,0,1,1"))
                              (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0,1,0,1,1"))
                              (rule "add_literals" (formula "36") (term "0,0,0,1,0,0,1,0,1,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0,1,0,1,1"))
                              (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0,1,0,1,1"))
                              (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0,1,0,1,1"))
                              (rule "mul_literals" (formula "36") (term "0,1,1,0,0,1,0,1,1"))
                              (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0,1,0,1,1"))
                              (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0,1,0,1,1"))
                              (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "35") (term "0,1") (inst "i=i"))
                               (builtin "One Step Simplification" (formula "35"))
                              (rule "translateJavaAddInt" (formula "35") (term "0,2,1,1,0,1"))
                              (rule "translateJavaSubInt" (formula "35") (term "1,1,0,0,1"))
                              (rule "polySimp_elimSub" (formula "35") (term "1,1,0,0,1"))
                              (rule "mul_literals" (formula "35") (term "1,1,1,0,0,1"))
                              (rule "polySimp_addComm0" (formula "35") (term "0,2,1,1,0,1"))
                              (rule "polySimp_addComm1" (formula "35") (term "1,1,0,0,1"))
                              (rule "add_literals" (formula "35") (term "0,1,1,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,1"))
                              (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,1"))
                              (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "35") (term "1,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1"))
                              (rule "mul_literals" (formula "35") (term "0,1,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,1"))
                              (rule "nnf_imp2or" (formula "35") (term "0,1"))
                              (rule "nnf_notAnd" (formula "35") (term "0,0,1"))
                              (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0,1"))
                              (rule "mul_literals" (formula "35") (term "1,0,0,0,0,0,1"))
                              (rule "add_zero_right" (formula "35") (term "0,0,0,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0,1"))
                              (rule "mul_literals" (formula "35") (term "1,0,0,0,1"))
                              (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,1"))
                              (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,1"))
                              (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1"))
                              (rule "mul_literals" (formula "35") (term "0,1,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,1"))
                              (rule "replace_known_left" (formula "35") (term "1") (ifseqformula "63"))
                               (builtin "One Step Simplification" (formula "35"))
                              (rule "true_left" (formula "35"))
                              (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "35") (term "0,1,0"))
                              (rule "replace_known_right" (formula "35") (term "0,0,0") (ifseqformula "74"))
                               (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "18")))
                              (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "36") (term "0,1,0") (inst "i=i") (inst "j=j_1"))
                               (builtin "One Step Simplification" (formula "36"))
                              (rule "inEqSimp_ltToLeq" (formula "36") (term "1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0,1,0,1,0"))
                              (rule "add_literals" (formula "36") (term "0,0,0,1,0,0,1,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "36") (term "1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0,1,0"))
                              (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0,1,0"))
                              (rule "add_literals" (formula "36") (term "0,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "36") (term "1,0,1,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,0,1,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "36") (term "0,1,1,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0,1,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "36") (term "0,1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0,1,0"))
                              (rule "nnf_imp2or" (formula "36") (term "0,1,0"))
                              (rule "nnf_notAnd" (formula "36") (term "0,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0,1,0"))
                              (rule "mul_literals" (formula "36") (term "1,0,0,0,0,0,1,0"))
                              (rule "add_zero_right" (formula "36") (term "0,0,0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0,1,0"))
                              (rule "mul_literals" (formula "36") (term "1,0,0,0,1,0"))
                              (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0,1,0"))
                              (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0,1,0"))
                              (rule "add_literals" (formula "36") (term "0,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "36") (term "0,1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0,1,0"))
                              (rule "nnf_imp2or" (formula "36") (term "0,1,0,1,0"))
                              (rule "nnf_notAnd" (formula "36") (term "0,0,1,0,1,0"))
                              (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0,1,0,1,0"))
                              (rule "add_literals" (formula "36") (term "0,0,0,1,0,0,1,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "36") (term "0,1,1,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0,1,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,0,0,0,1,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "36") (term "1,0,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "36") (term "0,1,0,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0,0,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "36") (term "1,1,0,0,0,1,0,1,0"))
                              (rule "allLeft" (formula "16") (inst "t=Z(0(#))"))
                              (rule "replaceKnownSelect_taclet1_0" (formula "16") (term "0,1,0,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet01001201_4" (formula "16") (term "0,1,0,1,1"))
                              (rule "add_zero_right" (formula "16") (term "0,2,2,1,1,1"))
                              (rule "replaceKnownSelect_taclet1001001201_6" (formula "16") (term "2,1,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet1001001201_7" (formula "16") (term "2,1,1,1"))
                              (rule "leq_literals" (formula "16") (term "0,0"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "polySimp_homoEq" (formula "16") (term "0,1,1,1"))
                              (rule "mul_literals" (formula "16") (term "1,0,0,1,1,1"))
                              (rule "add_zero_right" (formula "16") (term "0,0,1,1,1"))
                              (rule "inEqSimp_commuteGeq" (formula "16") (term "0"))
                              (rule "applyEq" (formula "16") (term "0,1,0,1,1") (ifseqformula "10"))
                              (rule "mul_literals" (formula "16") (term "1,0,1,1"))
                              (rule "add_zero_right" (formula "16") (term "0,1,1"))
                              (rule "polySimp_sepPosMonomial" (formula "16") (term "0,1,1,1"))
                              (rule "mul_literals" (formula "16") (term "1,0,1,1,1"))
                              (rule "inEqSimp_contradInEq1" (formula "16") (term "0") (ifseqformula "8"))
                              (rule "qeq_literals" (formula "16") (term "0,0"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "allLeft" (formula "17") (inst "t=add(Z(neglit(1(#))), j_0)"))
                               (builtin "One Step Simplification" (formula "17"))
                              (rule "replaceKnownSelect_taclet1_1" (formula "17") (term "0,1,0,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet001001201_5" (formula "17") (term "0,1,0,1,1"))
                              (rule "polySimp_addComm1" (formula "17") (term "1,1"))
                              (rule "polySimp_addComm0" (formula "17") (term "0,1,1"))
                              (rule "inEqSimp_homoInEq1" (formula "17") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "17") (term "1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "17") (term "1,0,1,0"))
                              (rule "mul_literals" (formula "17") (term "0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "17") (term "0,1,0"))
                              (rule "polySimp_addComm0" (formula "17") (term "0,0,1,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,1,0"))
                              (rule "add_literals" (formula "17") (term "1,1,0,1,0"))
                              (rule "times_zero_1" (formula "17") (term "1,0,1,0"))
                              (rule "add_zero_right" (formula "17") (term "0,1,0"))
                              (rule "leq_literals" (formula "17") (term "1,0"))
                               (builtin "One Step Simplification" (formula "17"))
                              (rule "inEqSimp_homoInEq0" (formula "17") (term "0"))
                              (rule "polySimp_mulComm0" (formula "17") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "17") (term "1,0,0"))
                              (rule "mul_literals" (formula "17") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "17") (term "0,0"))
                              (rule "add_literals" (formula "17") (term "0,0,0"))
                              (rule "add_zero_left" (formula "17") (term "0,0"))
                              (rule "inEqSimp_invertInEq1" (formula "17") (term "0"))
                              (rule "times_zero_2" (formula "17") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "17") (term "0,0"))
                              (rule "polySimp_elimOne" (formula "17") (term "0,0"))
                              (rule "inEqSimp_contradInEq1" (formula "17") (term "0") (ifseqformula "8"))
                              (rule "qeq_literals" (formula "17") (term "0,0"))
                               (builtin "One Step Simplification" (formula "17"))
                              (rule "allLeft" (formula "15") (inst "t=j_0"))
                              (rule "replaceKnownSelect_taclet01001201_2" (formula "15") (term "1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet01001201_3" (formula "15") (term "1,1"))
                              (rule "replace_known_right" (formula "15") (term "1") (ifseqformula "97"))
                               (builtin "One Step Simplification" (formula "15"))
                              (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
                              (rule "inEqSimp_homoInEq0" (formula "15") (term "0"))
                              (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0"))
                              (rule "add_literals" (formula "15") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "15") (term "1,0,0"))
                              (rule "add_zero_right" (formula "15") (term "0,0"))
                              (rule "qeq_literals" (formula "15") (term "0"))
                               (builtin "One Step Simplification" (formula "15"))
                              (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "15"))
                              (rule "andLeft" (formula "7"))
                              (rule "inEqSimp_homoInEq1" (formula "7"))
                              (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
                              (rule "add_literals" (formula "7") (term "1,1,0"))
                              (rule "times_zero_1" (formula "7") (term "1,0"))
                              (rule "add_zero_right" (formula "7") (term "0"))
                              (rule "leq_literals" (formula "7"))
                              (rule "closeFalse" (formula "7"))
                           )
                        )
                        (branch "j_0 >= 1 FALSE"
                           (rule "applyEqReverse" (formula "6") (term "1,0,1") (ifseqformula "5"))
                           (rule "hideAuxiliaryEq" (formula "5"))
                           (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "57"))
                            (builtin "One Step Simplification" (formula "5"))
                           (rule "true_left" (formula "5"))
                           (rule "inEqSimp_geqRight" (formula "56"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "1"))
                           (rule "leq_literals" (formula "3") (term "0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "inEqSimp_antiSymm" (formula "4") (ifseqformula "1"))
                           (rule "applyEq" (formula "11") (term "1,1,0,0") (ifseqformula "4"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "4"))
                           (rule "leq_literals" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "applyEqRigid" (formula "7") (term "1,1,0,0,1,0") (ifseqformula "3"))
                           (rule "applyEq" (formula "9") (term "1,1,0,0,0") (ifseqformula "3"))
                           (rule "add_zero_right" (formula "9") (term "1,0,0,0"))
                           (rule "applyEqRigid" (formula "5") (term "1,0") (ifseqformula "3"))
                           (rule "bsum_lower_equals_upper" (formula "5") (term "0"))
                           (rule "eqSymm" (formula "5"))
                           (rule "applyEq" (formula "6") (term "3,0") (ifseqformula "3"))
                           (rule "applyEqRigid" (formula "4") (term "0") (ifseqformula "3"))
                           (rule "qeq_literals" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "applyEq" (formula "1") (term "1,1") (ifseqformula "3"))
                           (rule "add_zero_right" (formula "1") (term "1"))
                           (rule "applyEq" (formula "7") (term "1,1,1,0,0") (ifseqformula "3"))
                           (rule "add_literals" (formula "7") (term "1,1,0,0"))
                           (rule "applyEq" (formula "6") (term "1,1,0,0") (ifseqformula "3"))
                           (rule "applyEqRigid" (formula "2") (term "1,1") (ifseqformula "3"))
                           (rule "add_zero_right" (formula "2") (term "1"))
                           (rule "applyEqRigid" (formula "9") (term "1,0,1,0") (ifseqformula "4"))
                           (rule "applyEq" (formula "79") (term "1,0,2,0") (ifseqformula "3"))
                           (rule "applyEq" (formula "79") (term "0,2,1") (ifseqformula "3"))
                           (rule "applyEqRigid" (formula "9") (term "1,1,0,0,1,0") (ifseqformula "3"))
                           (rule "add_zero_right" (formula "9") (term "1,0,0,1,0"))
                           (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "37"))
                           (rule "leq_literals" (formula "1") (term "0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "37"))
                           (rule "leq_literals" (formula "1") (term "0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "inEqSimp_or_tautInEq0" (formula "7") (term "0,0"))
                           (rule "add_zero_right" (formula "7") (term "1,1,0,0"))
                           (rule "qeq_literals" (formula "7") (term "1,0,0"))
                            (builtin "One Step Simplification" (formula "7"))
                           (rule "true_left" (formula "7"))
                           (rule "inEqSimp_or_tautInEq0" (formula "5") (term "0,0"))
                           (rule "add_literals" (formula "5") (term "1,1,0,0"))
                           (rule "qeq_literals" (formula "5") (term "1,0,0"))
                            (builtin "One Step Simplification" (formula "5"))
                           (rule "true_left" (formula "5"))
                           (rule "inEqSimp_or_tautInEq0" (formula "4") (term "0,0"))
                           (rule "add_zero_right" (formula "4") (term "1,1,0,0"))
                           (rule "qeq_literals" (formula "4") (term "1,0,0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "arrayLengthNotNegative" (formula "20") (term "0"))
                           (rule "arrayLengthIsAShort" (formula "19") (term "0"))
                            (builtin "One Step Simplification" (formula "19"))
                           (rule "true_left" (formula "19"))
                           (rule "nnf_notAnd" (formula "26") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                           (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                           (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                           (rule "arrayLengthNotNegative" (formula "16") (term "1,1"))
                           (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "33"))
                           (rule "leq_literals" (formula "16") (term "0"))
                            (builtin "One Step Simplification" (formula "16"))
                           (rule "true_left" (formula "16"))
                           (rule "arrayLengthIsAShort" (formula "16") (term "1,1"))
                            (builtin "One Step Simplification" (formula "16"))
                           (rule "true_left" (formula "16"))
                           (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "37") (term "0"))
                           (rule "replace_known_left" (formula "37") (term "1,0") (ifseqformula "6"))
                            (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "55")) (ifInst ""  (formula "38")))
                           (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "38") (term "0") (inst "i=i") (inst "j=j_1"))
                            (builtin "One Step Simplification" (formula "38"))
                           (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "38") (term "1,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "38") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0,1,0"))
                           (rule "mul_literals" (formula "38") (term "0,1,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0,1,0"))
                           (rule "nnf_imp2or" (formula "38") (term "0"))
                           (rule "nnf_notAnd" (formula "38") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "38") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "38") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "38") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "38") (term "0,0,0"))
                           (rule "mul_literals" (formula "38") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "38") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0"))
                           (rule "mul_literals" (formula "38") (term "1,0,0,0"))
                           (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "47") (term "0") (inst "i=i") (inst "j=j_1"))
                            (builtin "One Step Simplification" (formula "47"))
                           (rule "inEqSimp_ltToLeq" (formula "47") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "47") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "47") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "47") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "47") (term "0,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "47") (term "1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "47") (term "1,0,0,1,0,0,1,0"))
                           (rule "mul_literals" (formula "47") (term "0,1,0,0,1,0,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "47") (term "0,0,1,0,0,1,0"))
                           (rule "add_literals" (formula "47") (term "0,0,0,1,0,0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "47") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "47") (term "1,0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "47") (term "0,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "47") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "47") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "47") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "47") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "47") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "47") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "47") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "47") (term "1,1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "47") (term "1,1,0,0,1,0"))
                           (rule "mul_literals" (formula "47") (term "0,1,1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "47") (term "1,1,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "47") (term "1,1,1,0,0,1,0"))
                           (rule "nnf_imp2or" (formula "38") (term "0,1,0"))
                           (rule "cnf_rightDist" (formula "15") (term "0"))
                           (rule "nnf_imp2or" (formula "47") (term "0"))
                           (rule "cnf_rightDist" (formula "49") (term "0"))
                           (rule "nnf_notAnd" (formula "47") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "47") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "47") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "47") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "47") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "47") (term "0,0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "47") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "47") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "47") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "47") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "47") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "47") (term "1,1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "47") (term "0,0,0"))
                           (rule "times_zero_1" (formula "47") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "47") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "47") (term "0,0,0"))
                           (rule "mul_literals" (formula "47") (term "1,0,0,0"))
                           (rule "nnf_imp2or" (formula "47") (term "0,1,0"))
                           (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "22") (term "0,0,1,0"))
                            (builtin "One Step Simplification" (formula "22"))
                           (rule "translateJavaMod" (formula "22") (term "0,0,1,0"))
                           (rule "jmod_axiom" (formula "22") (term "0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "22") (term "1,0,0,1,0"))
                           (rule "applyEq" (formula "22") (term "0,1,0,0,1,0") (ifseqformula "30"))
                           (rule "polySimp_pullOutFactor0" (formula "22") (term "0,0,1,0"))
                           (rule "add_literals" (formula "22") (term "1,0,0,1,0"))
                           (rule "times_zero_1" (formula "22") (term "0,0,1,0"))
                            (builtin "One Step Simplification" (formula "22"))
                           (rule "Definition_axiom_for_count_in_de_wiesler_Buffers" (formula "27") (term "0") (inst "b=b"))
                           (rule "translateJavaCastInt" (formula "27") (term "0"))
                           (rule "nnf_notAnd" (formula "38") (term "0,0,1,0"))
                           (rule "inEqSimp_notGeq" (formula "38") (term "0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "38") (term "1,0,0,0,1,0"))
                           (rule "mul_literals" (formula "38") (term "0,1,0,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0,0,1,0"))
                           (rule "inEqSimp_notLeq" (formula "38") (term "1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0,1,0"))
                           (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0,1,0"))
                           (rule "add_literals" (formula "38") (term "0,0,0,1,0,0,1,0"))
                           (rule "add_zero_left" (formula "38") (term "0,0,1,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0,1,0"))
                           (rule "Definition_axiom_for_isClassifiedWith_in_de_wiesler_Buffers" (formula "25") (term "0") (inst "b=b"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "translateJavaAddInt" (formula "25") (term "4,0,1,0"))
                           (rule "translateJavaMulInt" (formula "25") (term "3,0,1,0"))
                           (rule "translateJavaMulInt" (formula "25") (term "0,4,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                           (rule "Definition_axiom_for_isClassifiedBlocksRange_in_de_wiesler_Classifier" (formula "24") (term "0") (inst "block=block"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "translateJavaDivInt" (formula "24") (term "1,1,0,0"))
                           (rule "translateJavaAddInt" (formula "24") (term "4,0,1,0"))
                           (rule "translateJavaAddInt" (formula "24") (term "3,0,1,0"))
                           (rule "translateJavaSubInt" (formula "24") (term "0,1,1,0,0"))
                           (rule "translateJavaAddInt" (formula "24") (term "0,1,4,0,1,0"))
                           (rule "translateJavaMulInt" (formula "24") (term "1,3,0,1,0"))
                           (rule "translateJavaMulInt" (formula "24") (term "1,4,0,1,0"))
                           (rule "polySimp_elimSub" (formula "24") (term "0,1,1,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,1,1,0,0"))
                           (rule "add_literals" (formula "24") (term "1,1,0,1,1,0,0"))
                           (rule "times_zero_1" (formula "24") (term "1,0,1,1,0,0"))
                           (rule "add_zero_right" (formula "24") (term "0,1,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,4,0,1,0"))
                           (rule "polySimp_addComm0" (formula "24") (term "1,1,4,0,1,0"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,4,0,1,0"))
                           (rule "mul_literals" (formula "24") (term "0,1,4,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "24") (term "4,0,1,0"))
                           (rule "polySimp_addComm0" (formula "24") (term "0,4,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                           (rule "applyEq" (formula "24") (term "0,1,0,0,1,0,0") (ifseqformula "30"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                           (rule "Contract_axiom_for_allElementsCounted_in_Classifier" (formula "23") (term "0"))
                           (rule "replace_known_right" (formula "23") (term "0,1,0") (ifseqformula "75"))
                            (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "74")) (ifInst ""  (formula "73")) (ifInst ""  (formula "6")) (ifInst ""  (formula "7")))
                           (rule "inEqSimp_commuteGeq" (formula "23") (term "0,0"))
                           (rule "applyEq" (formula "23") (term "0,0,0") (ifseqformula "21"))
                           (rule "inEqSimp_subsumption0" (formula "23") (term "0,0") (ifseqformula "16"))
                           (rule "inEqSimp_homoInEq0" (formula "23") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0,0"))
                           (rule "mul_literals" (formula "23") (term "0,1,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,0"))
                           (rule "polySimp_addComm0" (formula "23") (term "0,0,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,0,0"))
                           (rule "add_literals" (formula "23") (term "1,1,0,0,0,0"))
                           (rule "times_zero_1" (formula "23") (term "1,0,0,0,0"))
                           (rule "add_zero_right" (formula "23") (term "0,0,0,0"))
                           (rule "qeq_literals" (formula "23") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "23"))
                           (rule "true_left" (formula "23"))
                           (rule "Definition_axiom_for_allElementsCounted_in_de_wiesler_Classifier" (formula "23") (term "0") (inst "b=b") (inst "b_0=b_0"))
                            (builtin "One Step Simplification" (formula "23"))
                           (rule "translateJavaSubInt" (formula "23") (term "1,1"))
                           (rule "translateJavaCastInt" (formula "23") (term "0,1"))
                           (rule "andLeft" (formula "23"))
                           (rule "polySimp_elimSub" (formula "24") (term "1"))
                           (rule "polySimp_pullOutFactor1b" (formula "24") (term "1"))
                           (rule "add_literals" (formula "24") (term "1,1,1"))
                           (rule "times_zero_1" (formula "24") (term "1,1"))
                           (rule "add_zero_right" (formula "24") (term "1"))
                           (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                           (rule "applyEq" (formula "24") (term "1,0") (ifseqformula "21"))
                           (rule "applyEq" (formula "23") (term "0,1,0,0,1,0,0") (ifseqformula "21"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                           (rule "jdiv_axiom" (formula "31") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "31") (term "0,0,2,1"))
                           (rule "eqSymm" (formula "31"))
                           (rule "applyEqRigid" (formula "31") (term "1") (ifseqformula "32"))
                           (rule "inEqSimp_subsumption6" (formula "31") (term "0,0") (ifseqformula "29"))
                           (rule "times_zero_1" (formula "31") (term "1,1,0,0,0"))
                           (rule "greater_literals" (formula "31") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "31"))
                           (rule "leq_literals" (formula "31") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "31"))
                           (rule "polyDiv_pullOut" (formula "31") (term "0") (inst "polyDivCoeff=l_0"))
                           (rule "polySimp_mulLiterals" (formula "31") (term "1,0,0,2,0"))
                           (rule "equal_literals" (formula "31") (term "0,0"))
                            (builtin "One Step Simplification" (formula "31"))
                           (rule "polySimp_pullOutFactor0" (formula "31") (term "0,0,0"))
                           (rule "add_literals" (formula "31") (term "1,0,0,0"))
                           (rule "times_zero_1" (formula "31") (term "0,0,0"))
                           (rule "div_literals" (formula "31") (term "0,0"))
                           (rule "add_zero_left" (formula "31") (term "0"))
                            (builtin "One Step Simplification" (formula "31"))
                           (rule "true_left" (formula "31"))
                           (rule "nnf_notAnd" (formula "48") (term "0,0,1,0"))
                           (rule "inEqSimp_notLeq" (formula "48") (term "1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "48") (term "1,0,0,1,0,0,1,0"))
                           (rule "mul_literals" (formula "48") (term "0,1,0,0,1,0,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "48") (term "0,0,1,0,0,1,0"))
                           (rule "add_literals" (formula "48") (term "0,0,0,1,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "48") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "48") (term "1,1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "48") (term "1,1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "48") (term "1,1,1,0,0,1,0"))
                           (rule "mul_literals" (formula "48") (term "0,1,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "48") (term "1,1,1,0,0,1,0"))
                           (rule "inEqSimp_notGeq" (formula "48") (term "0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "48") (term "1,0,0,0,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "48") (term "0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "48") (term "1,0,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "48") (term "1,0,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "48") (term "1,1,0,0,0,1,0"))
                           (rule "mul_literals" (formula "48") (term "0,1,0,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "48") (term "1,1,0,0,0,1,0"))
                           (rule "nnf_imp2or" (formula "26") (term "0"))
                           (rule "Definition_axiom_for_isValidBufferLen_in_de_wiesler_Classifier" (formula "27") (term "0,1,0"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "inEqSimp_ltToLeq" (formula "27") (term "0,1,1,0"))
                           (rule "add_zero_right" (formula "27") (term "0,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "27") (term "0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "27") (term "0,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "27") (term "0,0,1,1,0"))
                           (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "4") (term "0,0,2,0,1,0"))
                           (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "76") (term "0,0,2,0"))
                           (rule "nnf_imp2or" (formula "25") (term "0"))
                           (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "3") (term "0"))
                           (rule "wellFormedAnon" (formula "3") (term "1,0"))
                           (rule "replace_known_right" (formula "3") (term "0,0,0") (ifseqformula "74"))
                            (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "7")) (ifInst ""  (formula "6")) (ifInst ""  (formula "4")))
                           (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "4") (term "0") (inst "i=i"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "translateJavaSubInt" (formula "4") (term "1,1,0,0"))
                           (rule "translateJavaAddInt" (formula "4") (term "0,2,1,1,0"))
                           (rule "sub_literals" (formula "4") (term "1,1,0,0"))
                           (rule "polySimp_addComm0" (formula "4") (term "0,2,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
                           (rule "mul_literals" (formula "4") (term "1,0,0,1,0,0"))
                           (rule "add_literals" (formula "4") (term "0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0"))
                           (rule "mul_literals" (formula "4") (term "1,1,0,0"))
                           (rule "nnf_imp2or" (formula "24") (term "0"))
                           (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "39") (term "0"))
                           (rule "replace_known_left" (formula "39") (term "1,0") (ifseqformula "7"))
                            (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "58")) (ifInst ""  (formula "40")))
                           (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "40") (term "0") (inst "i=i"))
                            (builtin "One Step Simplification" (formula "40"))
                           (rule "translateJavaSubInt" (formula "40") (term "1,1,0,0"))
                           (rule "translateJavaAddInt" (formula "40") (term "0,2,1,1,0"))
                           (rule "polySimp_elimSub" (formula "40") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "40") (term "1,1,1,0,0"))
                           (rule "polySimp_addComm0" (formula "40") (term "0,2,1,1,0"))
                           (rule "polySimp_addComm0" (formula "40") (term "1,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "40") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "40") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "40") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "40") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "40") (term "0,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "40") (term "1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "40") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "40") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "40") (term "1,1,1,0,0"))
                           (rule "arrayLengthIsAShort" (formula "15") (term "0"))
                            (builtin "One Step Simplification" (formula "15"))
                           (rule "true_left" (formula "15"))
                           (rule "arrayLengthNotNegative" (formula "15") (term "0"))
                           (rule "applyEq" (formula "15") (term "0") (ifseqformula "16"))
                           (rule "qeq_literals" (formula "15"))
                           (rule "true_left" (formula "15"))
                           (rule "arrayLengthIsAShort" (formula "14") (term "0"))
                            (builtin "One Step Simplification" (formula "14"))
                           (rule "true_left" (formula "14"))
                           (rule "arrayLengthNotNegative" (formula "14") (term "0"))
                           (rule "applyEq" (formula "14") (term "0") (ifseqformula "15"))
                           (rule "qeq_literals" (formula "14"))
                           (rule "true_left" (formula "14"))
                           (rule "nnf_notAnd" (formula "27") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
                           (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "27") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
                           (rule "mul_literals" (formula "27") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "27") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0"))
                           (rule "distr_forallAnd" (formula "16"))
                           (rule "andLeft" (formula "16"))
                           (rule "distr_forallAnd" (formula "53"))
                           (rule "andLeft" (formula "53"))
                           (rule "nnf_notAnd" (formula "27") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "27") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
                           (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "27") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
                           (rule "mul_literals" (formula "27") (term "1,0,0,0"))
                           (rule "nnf_imp2or" (formula "4") (term "0"))
                           (rule "nnf_imp2or" (formula "29") (term "1,1,0"))
                           (rule "inEqSimp_notGeq" (formula "29") (term "0,1,1,0"))
                           (rule "mul_literals" (formula "29") (term "1,0,0,0,1,1,0"))
                           (rule "add_literals" (formula "29") (term "0,0,0,1,1,0"))
                           (rule "add_zero_left" (formula "29") (term "0,0,1,1,0"))
                           (rule "nnf_notAnd" (formula "25") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                           (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                           (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                           (rule "nnf_imp2or" (formula "41") (term "0"))
                           (rule "ifthenelse_split" (formula "38") (term "0"))
                           (branch "self.equal_buckets = TRUE TRUE"
                              (rule "newSym_eq" (formula "39") (inst "l=l_1") (inst "newSymDef=mul(int::final(buffers,
               de.wiesler.Buffers::$num_buckets),
    Z(0(#)))"))
                              (rule "times_zero_1" (formula "39") (term "1,1"))
                              (rule "add_zero_right" (formula "39") (term "1"))
                              (rule "applyEq" (formula "53") (term "1,1,1,0,0") (ifseqformula "39"))
                              (rule "applyEq" (formula "40") (term "0,0") (ifseqformula "39"))
                              (rule "eqSymm" (formula "40"))
                              (rule "applyEq" (formula "52") (term "0") (ifseqformula "39"))
                              (rule "inEqSimp_commuteLeq" (formula "52"))
                              (rule "applyEq" (formula "43") (term "1,1,1,0,0,0") (ifseqformula "39"))
                              (rule "applyEq" (formula "51") (term "1") (ifseqformula "39"))
                              (rule "applyEq" (formula "44") (term "1,1,0,0,1,0") (ifseqformula "39"))
                              (rule "applyEq" (formula "50") (term "0") (ifseqformula "39"))
                              (rule "applyEq" (formula "53") (term "1,1,1,0,0,1,0") (ifseqformula "39"))
                              (rule "applyEq" (formula "42") (term "3,0") (ifseqformula "39"))
                              (rule "applyEq" (formula "45") (term "1,0,2,0") (ifseqformula "39"))
                              (rule "eqSymm" (formula "45"))
                              (rule "applyEq" (formula "44") (term "1,1,0,0") (ifseqformula "39"))
                              (rule "applyEq" (formula "37") (term "0") (ifseqformula "40"))
                              (rule "applyEq" (formula "3") (term "2,1,0,0") (ifseqformula "40"))
                              (rule "applyEq" (formula "4") (term "2,1,0,1,1,0") (ifseqformula "40"))
                              (rule "applyEq" (formula "18") (term "0") (ifseqformula "40"))
                              (rule "inEqSimp_homoInEq0" (formula "18"))
                              (rule "polySimp_mulLiterals" (formula "18") (term "1,0"))
                              (rule "polySimp_addComm1" (formula "18") (term "0"))
                              (rule "applyEq" (formula "17") (term "1,1,1,0") (ifseqformula "40"))
                              (rule "applyEq" (formula "55") (term "2,1,0,0,1,0") (ifseqformula "40"))
                              (rule "applyEq" (formula "16") (term "1,1,0,0") (ifseqformula "40"))
                              (rule "applyEq" (formula "36") (term "0") (ifseqformula "40"))
                              (rule "applyEq" (formula "55") (term "1,1,0,0") (ifseqformula "40"))
                              (rule "applyEq" (formula "56") (term "1,1,1,0") (ifseqformula "40"))
                              (rule "applyEq" (formula "57") (term "2,1,0") (ifseqformula "40"))
                              (rule "applyEq" (formula "56") (term "2,1,0,0,0,0") (ifseqformula "40"))
                              (rule "applyEq" (formula "25") (term "1,1,0,0") (ifseqformula "40"))
                              (rule "applyEq" (formula "4") (term "2,1,0,0,1,0") (ifseqformula "40"))
                              (rule "applyEq" (formula "28") (term "1,1,0,0") (ifseqformula "40"))
                              (rule "applyEq" (formula "45") (term "1,0,2,0") (ifseqformula "39"))
                              (rule "eqSymm" (formula "45"))
                              (rule "applyEq" (formula "30") (term "1,0") (ifseqformula "40"))
                              (rule "applyEq" (formula "5") (term "1,1,0,0") (ifseqformula "40"))
                              (rule "applyEq" (formula "26") (term "1,0") (ifseqformula "40"))
                              (rule "applyEq" (formula "29") (term "1,1,0,0") (ifseqformula "40"))
                              (rule "applyEq" (formula "48") (term "1") (ifseqformula "39"))
                              (rule "applyEq" (formula "5") (term "2,1,0,1,1,0") (ifseqformula "40"))
                              (rule "applyEq" (formula "23") (term "1") (ifseqformula "40"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "18"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1"))
                              (rule "polySimp_rightDist" (formula "18") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "18") (term "1,1"))
                              (rule "mul_literals" (formula "18") (term "0,1"))
                              (rule "inEqSimp_subsumption6" (formula "36") (ifseqformula "50"))
                              (rule "mul_literals" (formula "36") (term "1,1,0"))
                              (rule "greater_literals" (formula "36") (term "0,0"))
                               (builtin "One Step Simplification" (formula "36"))
                              (rule "leq_literals" (formula "36") (term "0"))
                               (builtin "One Step Simplification" (formula "36"))
                              (rule "true_left" (formula "36"))
                              (rule "elimGcdLeq_antec" (formula "36") (inst "elimGcdRightDiv=Z(6(5(2(#))))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(2(#))"))
                              (rule "mul_literals" (formula "36") (term "0,1,0,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "36") (term "1,0,1,0"))
                              (rule "leq_literals" (formula "36") (term "0,0"))
                               (builtin "One Step Simplification" (formula "36"))
                              (rule "neg_literal" (formula "36") (term "0,0,0,0,0,0"))
                              (rule "mul_literals" (formula "36") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "36") (term "0,0,0,0,0"))
                              (rule "add_literals" (formula "36") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "36") (term "0,0"))
                              (rule "add_literals" (formula "36") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "36") (term "1,0,0"))
                              (rule "add_zero_right" (formula "36") (term "0,0"))
                              (rule "qeq_literals" (formula "36") (term "0"))
                               (builtin "One Step Simplification" (formula "36"))
                              (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "24") (term "1"))
                               (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "60")) (ifInst ""  (formula "61")) (ifInst ""  (formula "37")) (ifInst ""  (formula "40")))
                              (rule "translateJavaSubInt" (formula "24") (term "0,2,1,1,0,1"))
                              (rule "translateJavaMulInt" (formula "24") (term "1,1,0,0,0,1"))
                              (rule "translateJavaSubInt" (formula "24") (term "0,2,0,1,0,1"))
                              (rule "eqSymm" (formula "24") (term "1,0,1"))
                              (rule "polySimp_elimSub" (formula "24") (term "0,2,0,1,0,1"))
                              (rule "mul_literals" (formula "24") (term "1,0,2,0,1,0,1"))
                              (rule "eqSymm" (formula "24") (term "1,0,1"))
                              (rule "polySimp_elimSub" (formula "24") (term "0,2,0,1,0,1"))
                              (rule "mul_literals" (formula "24") (term "1,0,2,0,1,0,1"))
                              (rule "eqSymm" (formula "24") (term "1,0,1"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,0,1"))
                              (rule "eqSymm" (formula "24") (term "1,0,0,0,1"))
                              (rule "polySimp_addComm0" (formula "24") (term "0,2,1,1,0,1"))
                              (rule "polySimp_addComm0" (formula "24") (term "0,2,0,1,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,0,0,1"))
                              (rule "applyEq" (formula "24") (term "1,0,2,0,1,0,1") (ifseqformula "47"))
                              (rule "eqSymm" (formula "24") (term "1,0,1"))
                              (rule "applyEq" (formula "24") (term "0,0,1,0,0,0,1") (ifseqformula "47"))
                              (rule "eqSymm" (formula "24") (term "1,0,0,0,1"))
                              (rule "replace_known_left" (formula "24") (term "1,0,0,0,1") (ifseqformula "23"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "applyEq" (formula "24") (term "3,0,1,0,0,1") (ifseqformula "47"))
                              (rule "replace_known_left" (formula "24") (term "1,0,0,1") (ifseqformula "41"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "applyEq" (formula "24") (term "0,0,0,0,1") (ifseqformula "23"))
                              (rule "applyEq" (formula "24") (term "0,1,0,0,1") (ifseqformula "23"))
                              (rule "applyEq" (formula "24") (term "1,0,2,0,1,0,1") (ifseqformula "47"))
                              (rule "eqSymm" (formula "24") (term "1,0,1"))
                              (rule "replace_known_left" (formula "24") (term "1,0,1") (ifseqformula "44"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "inEqSimp_subsumption6" (formula "24") (term "0,0,1") (ifseqformula "49"))
                              (rule "greater_literals" (formula "24") (term "0,0,0,0,1"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "mul_literals" (formula "24") (term "1,0,0,0,1"))
                              (rule "leq_literals" (formula "24") (term "0,0,0,1"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "inEqSimp_subsumption4" (formula "24") (term "0,1") (ifseqformula "36"))
                              (rule "greater_literals" (formula "24") (term "0,0,0,1"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "mul_literals" (formula "24") (term "0,0,0,1"))
                              (rule "leq_literals" (formula "24") (term "0,0,1"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "30") (term "2,0"))
                              (rule "nnf_notAnd" (formula "4") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "4") (term "1,0,0"))
                              (rule "mul_literals" (formula "4") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "4") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0,0"))
                              (rule "mul_literals" (formula "4") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "4") (term "0,0,0"))
                              (rule "times_zero_1" (formula "4") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "4") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0"))
                              (rule "mul_literals" (formula "4") (term "1,0,0,0"))
                              (rule "inEqSimp_or_tautInEq0" (formula "4") (term "0,0"))
                              (rule "add_literals" (formula "4") (term "1,1,0,0"))
                              (rule "qeq_literals" (formula "4") (term "1,0,0"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "true_left" (formula "4"))
                              (rule "arrayLengthNotNegative" (formula "49") (term "0"))
                              (rule "arrayLengthIsAShort" (formula "50") (term "0"))
                               (builtin "One Step Simplification" (formula "50"))
                              (rule "true_left" (formula "50"))
                              (rule "nnf_notAnd" (formula "41") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "41") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "41") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "41") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "41") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "41") (term "0,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "41") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "41") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "41") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "41") (term "1,1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "41") (term "0,0,0"))
                              (rule "times_zero_1" (formula "41") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "41") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "0,0,0"))
                              (rule "mul_literals" (formula "41") (term "1,0,0,0"))
                              (rule "arrayLengthNotNegative" (formula "47") (term "0"))
                              (rule "inEqSimp_subsumption1" (formula "47") (ifseqformula "48"))
                              (rule "leq_literals" (formula "47") (term "0"))
                               (builtin "One Step Simplification" (formula "47"))
                              (rule "true_left" (formula "47"))
                              (rule "arrayLengthIsAShort" (formula "47") (term "0"))
                               (builtin "One Step Simplification" (formula "47"))
                              (rule "true_left" (formula "47"))
                              (rule "Contract_axiom_for_isClassOfSlice_in_Classifier" (formula "27") (term "0,1,0"))
                              (rule "replace_known_left" (formula "27") (term "1,0,0") (ifseqformula "7"))
                               (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "60")) (ifInst ""  (formula "6")) (ifInst ""  (formula "81")))
                              (rule "true_left" (formula "27"))
                              (rule "Definition_axiom_for_isClassOfSlice_in_de_wiesler_Classifier" (formula "27") (term "0,1,0") (inst "i=i"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,1,0"))
                              (rule "polySimp_mulAssoc" (formula "27") (term "0,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "27") (term "0,0,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "0,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "27") (term "0,1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "27") (term "0,0,1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1,1,0,0,1,0"))
                              (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "28") (term "0,1,0,1,0"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "translateJavaMod" (formula "28") (term "0,1,0,1,0"))
                              (rule "jmod_axiom" (formula "28") (term "0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,0,1,0,1,0"))
                              (rule "polySimp_sepNegMonomial" (formula "28") (term "1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "0,1,0,1,0"))
                              (rule "Definition_axiom_for_isClassifiedBlock_in_de_wiesler_Classifier" (formula "26") (term "0,1,0") (inst "bucket=bucket"))
                               (builtin "One Step Simplification" (formula "26"))
                              (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,1,0"))
                              (rule "applyEq" (formula "26") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "22"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "1,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "26") (term "0,1,1,0,0,1,0"))
                              (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "24") (term "1,1,0") (inst "i=i"))
                              (rule "eqSymm" (formula "24") (term "1,0"))
                              (rule "onlyCreatedObjectsAreReferencedFinal" (formula "62") (term "0") (ifseqformula "6") (ifseqformula "11"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "60"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferencedFinal" (formula "77") (term "0,0") (ifseqformula "7") (ifseqformula "8"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "62"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferencedFinal" (formula "77") (term "1") (ifseqformula "8") (ifseqformula "13"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "61"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferencedFinal" (formula "79") (term "1") (ifseqformula "9") (ifseqformula "10"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "65"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "nnf_imp2or" (formula "31") (term "0,1,0"))
                              (rule "nnf_notAnd" (formula "31") (term "0,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0,1,0"))
                              (rule "polySimp_mulAssoc" (formula "31") (term "1,0,0,0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "31") (term "0,1,0,0,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "1,0,0,0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "31") (term "1,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0,0,1,0"))
                              (rule "mul_literals" (formula "31") (term "0,1,0,0,0,1,0"))
                              (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "31") (term "0,1,0,0,1,0,0,1,0"))
                              (rule "mul_literals" (formula "31") (term "0,0,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "1,0,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "31") (term "0,0,0,1,0,0,1,0"))
                              (rule "add_literals" (formula "31") (term "0,0,0,0,1,0,0,1,0"))
                              (rule "add_zero_left" (formula "31") (term "0,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "31") (term "0,1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "0,1,1,0,0,1,0"))
                              (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "44") (term "0"))
                              (rule "replace_known_right" (formula "44") (term "0,0,0") (ifseqformula "66"))
                               (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "10")) (ifInst ""  (formula "45")))
                              (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "45") (term "0") (inst "i=i") (inst "j=j_1"))
                               (builtin "One Step Simplification" (formula "45"))
                              (rule "inEqSimp_ltToLeq" (formula "45") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "45") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "45") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "45") (term "1,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "45") (term "0,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "45") (term "1,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "45") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "45") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "45") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "45") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "45") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "45") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "45") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "45") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "45") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "45") (term "1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "45") (term "1,1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "45") (term "0,1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "45") (term "1,1,1,0,0,1,0"))
                              (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "7") (term "0"))
                              (rule "wellFormedAnon" (formula "7") (term "1,0"))
                              (rule "replace_known_left" (formula "7") (term "0,1") (ifseqformula "8"))
                               (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "84")) (ifInst ""  (formula "11")) (ifInst ""  (formula "10")))
                              (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "8") (term "0") (inst "i=i") (inst "j=j_1"))
                               (builtin "One Step Simplification" (formula "8"))
                              (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,1,0"))
                              (rule "times_zero_1" (formula "8") (term "1,0,0,1,0,0,1,0"))
                              (rule "add_zero_right" (formula "8") (term "0,0,1,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                              (rule "times_zero_1" (formula "8") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "8") (term "0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "8") (term "1,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,1,0"))
                              (rule "mul_literals" (formula "8") (term "1,1,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                              (rule "mul_literals" (formula "8") (term "1,1,0,0"))
                              (rule "nnf_imp2or" (formula "46") (term "0"))
                              (rule "nnf_imp2or" (formula "8") (term "0"))
                              (rule "commute_or" (formula "21") (term "0"))
                              (rule "commute_or" (formula "61") (term "0"))
                              (rule "nnf_notAnd" (formula "46") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "46") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "46") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "46") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "46") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "46") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "46") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "46") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "46") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "46") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "46") (term "0,0,0"))
                              (rule "times_zero_1" (formula "46") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "46") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "46") (term "0,0,0"))
                              (rule "mul_literals" (formula "46") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "8") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
                              (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
                              (rule "mul_literals" (formula "8") (term "1,0,0,0"))
                               (builtin "One Step Simplification" (formula "8"))
                              (rule "true_left" (formula "8"))
                              (rule "nnf_imp2or" (formula "45") (term "0,1,0"))
                              (rule "commute_or" (formula "47") (term "0,0,1,0"))
                              (rule "commute_or" (formula "57") (term "0,0,1,0"))
                              (rule "nnf_notAnd" (formula "45") (term "0,0,1,0"))
                              (rule "inEqSimp_notLeq" (formula "45") (term "1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "45") (term "1,0,0,1,0,0,1,0"))
                              (rule "mul_literals" (formula "45") (term "0,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "45") (term "0,0,1,0,0,1,0"))
                              (rule "add_literals" (formula "45") (term "0,0,0,1,0,0,1,0"))
                              (rule "add_zero_left" (formula "45") (term "0,0,1,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "45") (term "1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "45") (term "1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "45") (term "1,1,0,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "45") (term "0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "45") (term "1,0,0,0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "45") (term "0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "45") (term "1,0,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "45") (term "1,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "45") (term "1,1,0,0,0,1,0"))
                              (rule "mul_literals" (formula "45") (term "0,1,0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "45") (term "1,1,0,0,0,1,0"))
                              (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "27") (term "0,0") (inst "b=b"))
                               (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "64")) (ifInst ""  (formula "63")) (ifInst ""  (formula "18")))
                              (rule "translateJavaMulInt" (formula "27") (term "1,1,0,0,0,0"))
                              (rule "mul_literals" (formula "27") (term "1,1,0,0,0,0"))
                              (rule "eqSymm" (formula "27") (term "0,0,0,0,0,0"))
                              (rule "replace_known_right" (formula "27") (term "0,0,0,0,0,0") (ifseqformula "76"))
                               (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "17")))
                              (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "27") (term "0,1,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,0"))
                              (rule "applyEq" (formula "27") (term "0,0,0,0,0") (ifseqformula "42"))
                              (rule "applyEq" (formula "27") (term "0,1,0,0,0") (ifseqformula "42"))
                              (rule "applyEq" (formula "27") (term "0,1,0,0,1,0,0,1,0,0") (ifseqformula "42"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "1,0,0,1,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,1,0,0"))
                              (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "27") (term "0,1,1,0,0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,1,0,0"))
                              (rule "inEqSimp_subsumption4" (formula "27") (term "1,0,0,0") (ifseqformula "39"))
                              (rule "mul_literals" (formula "27") (term "0,1,0,1,0,0,0"))
                              (rule "greater_literals" (formula "27") (term "0,0,1,0,0,0"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "leq_literals" (formula "27") (term "0,1,0,0,0"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "inEqSimp_subsumption6" (formula "27") (term "0,0,0") (ifseqformula "53"))
                              (rule "greater_literals" (formula "27") (term "0,0,0,0,0"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "mul_literals" (formula "27") (term "1,0,0,0,0"))
                              (rule "leq_literals" (formula "27") (term "0,0,0,0"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "nnf_imp2or" (formula "27") (term "0,0,0"))
                              (rule "nnf_notAnd" (formula "27") (term "0,0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0,0,0"))
                              (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "27") (term "0,0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0,0,0"))
                              (rule "mul_literals" (formula "27") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,0,0"))
                              (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,1,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,0,0"))
                              (rule "add_literals" (formula "27") (term "0,0,0,1,0,0,0,0"))
                              (rule "add_zero_left" (formula "27") (term "0,0,1,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,0,0"))
                              (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "32") (term "0,0,1,1,1,0"))
                              (rule "Definition_axiom_for_isClassOfSlice_in_de_wiesler_Classifier" (formula "30") (term "0,1,0,1,0") (inst "i=i"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "30") (term "0,1,0,0,1,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "30") (term "0,0,1,0,0,1,0,0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "30") (term "0,0,0,1,0,0,1,0,1,0"))
                              (rule "add_literals" (formula "30") (term "0,0,0,0,1,0,0,1,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0,1,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "30") (term "0,1,1,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "30") (term "0,0,1,1,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "1,0,1,1,0,0,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "30") (term "1,0,1,1,0,0,1,0,1,0"))
                              (rule "nnf_imp2or" (formula "30") (term "0,1,0,1,0"))
                              (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "28") (term "0,0,2,0,1,0"))
                              (rule "nnf_notAnd" (formula "30") (term "0,0,1,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "30") (term "1,0,0,0,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,0,0,0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "30") (term "0,1,0,0,0,0,0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "30") (term "0,0,0,0,0,1,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "30") (term "1,0,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "30") (term "0,1,0,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "1,0,1,0,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "30") (term "0,0,1,0,0,0,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "30") (term "1,0,1,0,0,0,1,0,1,0"))
                              (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "30") (term "0,1,0,0,1,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "30") (term "0,0,1,0,0,1,0,0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "30") (term "0,0,0,1,0,0,1,0,1,0"))
                              (rule "add_literals" (formula "30") (term "0,0,0,0,1,0,0,1,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "30") (term "0,1,1,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "30") (term "0,0,1,1,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "1,0,1,1,0,0,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "30") (term "1,0,1,1,0,0,1,0,1,0"))
                              (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "31") (term "0,1,0,1,0"))
                              (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "31") (term "1,1,1,0,0,1,0"))
                              (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "44") (term "0") (inst "i=i"))
                               (builtin "One Step Simplification" (formula "44"))
                              (rule "translateJavaSubInt" (formula "44") (term "1,1,0,0"))
                              (rule "translateJavaAddInt" (formula "44") (term "0,2,1,1,0"))
                              (rule "polySimp_elimSub" (formula "44") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "44") (term "1,1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "44") (term "0,2,1,1,0"))
                              (rule "polySimp_addComm0" (formula "44") (term "1,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "44") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "44") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "44") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "44") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "44") (term "0,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "44") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "44") (term "1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "44") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "44") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "44") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "44") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "44") (term "1,1,1,0,0"))
                              (rule "nnf_imp2or" (formula "44") (term "0"))
                              (rule "nnf_notAnd" (formula "44") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "44") (term "0,0,0"))
                              (rule "mul_literals" (formula "44") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "44") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "0,0,0"))
                              (rule "mul_literals" (formula "44") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "44") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "44") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "44") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "44") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "44") (term "0,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "44") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "44") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "44") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "44") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "44") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "44") (term "1,1,1,0,0"))
                              (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "7") (term "0"))
                              (rule "wellFormedAnon" (formula "7") (term "1,0"))
                              (rule "replace_known_right" (formula "7") (term "0,0,0") (ifseqformula "83"))
                               (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "11")) (ifInst ""  (formula "10")) (ifInst ""  (formula "8")))
                              (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "8") (term "0") (inst "i=i"))
                               (builtin "One Step Simplification" (formula "8"))
                              (rule "translateJavaSubInt" (formula "8") (term "1,1,0,0"))
                              (rule "translateJavaAddInt" (formula "8") (term "0,2,1,1,0"))
                              (rule "sub_literals" (formula "8") (term "1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "8") (term "0,2,1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                              (rule "mul_literals" (formula "8") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "8") (term "0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "8") (term "1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                              (rule "mul_literals" (formula "8") (term "1,1,0,0"))
                              (rule "nnf_imp2or" (formula "8") (term "0"))
                              (rule "nnf_notAnd" (formula "8") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
                              (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "8") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
                              (rule "mul_literals" (formula "8") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
                              (rule "mul_literals" (formula "8") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "8") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
                              (rule "mul_literals" (formula "8") (term "1,1,0,0"))
                              (rule "inEqSimp_or_tautInEq0" (formula "8") (term "0,0"))
                              (rule "add_literals" (formula "8") (term "1,1,0,0"))
                              (rule "qeq_literals" (formula "8") (term "1,0,0"))
                               (builtin "One Step Simplification" (formula "8"))
                              (rule "true_left" (formula "8"))
                              (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "27") (term "1,0"))
                               (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "64")) (ifInst ""  (formula "65")) (ifInst ""  (formula "40")) (ifInst ""  (formula "43")))
                              (rule "translateJavaSubInt" (formula "27") (term "0,2,0,1,0,1,0"))
                              (rule "translateJavaSubInt" (formula "27") (term "0,2,1,1,0,1,0"))
                              (rule "translateJavaMulInt" (formula "27") (term "1,1,0,0,0,1,0"))
                              (rule "eqSymm" (formula "27") (term "1,0,1,0"))
                              (rule "polySimp_elimSub" (formula "27") (term "0,2,0,1,0,1,0"))
                              (rule "mul_literals" (formula "27") (term "1,0,2,0,1,0,1,0"))
                              (rule "eqSymm" (formula "27") (term "1,0,1,0"))
                              (rule "polySimp_elimSub" (formula "27") (term "0,2,0,1,0,1,0"))
                              (rule "mul_literals" (formula "27") (term "1,0,2,0,1,0,1,0"))
                              (rule "eqSymm" (formula "27") (term "1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,0,1,0"))
                              (rule "eqSymm" (formula "27") (term "1,0,0,0,1,0"))
                              (rule "polySimp_addComm0" (formula "27") (term "0,2,0,1,0,1,0"))
                              (rule "eqSymm" (formula "27") (term "1,0,1,0"))
                              (rule "polySimp_addComm0" (formula "27") (term "0,2,0,1,0,1,0"))
                              (rule "eqSymm" (formula "27") (term "1,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,0,0,1,0"))
                              (rule "applyEq" (formula "27") (term "1,0,2,0,1,0,1,0") (ifseqformula "50"))
                              (rule "eqSymm" (formula "27") (term "1,0,1,0"))
                              (rule "applyEq" (formula "27") (term "3,0,1,0,0,1,0") (ifseqformula "50"))
                              (rule "applyEq" (formula "27") (term "0,1,0,0,0,0,1,0") (ifseqformula "26"))
                              (rule "applyEq" (formula "27") (term "0,0,0,0,0,0,1,0") (ifseqformula "26"))
                              (rule "applyEq" (formula "27") (term "0,0,1,0,0,0,1,0") (ifseqformula "50"))
                              (rule "eqSymm" (formula "27") (term "1,0,0,0,1,0"))
                              (rule "replace_known_left" (formula "27") (term "1,0,0,0,1,0") (ifseqformula "26"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "applyEq" (formula "27") (term "1,0,2,0,1,0,1,0") (ifseqformula "50"))
                              (rule "eqSymm" (formula "27") (term "1,0,1,0"))
                              (rule "replace_known_left" (formula "27") (term "1,0,1,0") (ifseqformula "47"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "inEqSimp_subsumption6" (formula "27") (term "0,0,0,1,0") (ifseqformula "52"))
                              (rule "mul_literals" (formula "27") (term "1,1,0,0,0,0,1,0"))
                              (rule "greater_literals" (formula "27") (term "0,0,0,0,0,1,0"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "leq_literals" (formula "27") (term "0,0,0,0,1,0"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "inEqSimp_subsumption4" (formula "27") (term "0,0,1,0") (ifseqformula "39"))
                              (rule "greater_literals" (formula "27") (term "0,0,0,0,1,0"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "mul_literals" (formula "27") (term "0,0,0,0,1,0"))
                              (rule "leq_literals" (formula "27") (term "0,0,0,1,0"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "30") (term "0,1,0,1,0,1,0"))
                              (rule "commute_or" (formula "44") (term "0,0,1,0"))
                              (rule "cnf_rightDist" (formula "32") (term "0"))
                              (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "7") (term "0"))
                              (rule "wellFormedAnon" (formula "7") (term "1,0"))
                              (rule "replace_known_right" (formula "7") (term "0,0,0") (ifseqformula "82"))
                               (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "11")) (ifInst ""  (formula "10")) (ifInst ""  (formula "8")))
                              (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "8") (term "0") (inst "i=i") (inst "j=j_1"))
                               (builtin "One Step Simplification" (formula "8"))
                              (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,1,0"))
                              (rule "times_zero_1" (formula "8") (term "1,0,0,1,0,0,1,0"))
                              (rule "add_zero_right" (formula "8") (term "0,0,1,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                              (rule "times_zero_1" (formula "8") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "8") (term "0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "8") (term "1,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,1,0"))
                              (rule "mul_literals" (formula "8") (term "1,1,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                              (rule "mul_literals" (formula "8") (term "1,1,0,0"))
                              (rule "nnf_imp2or" (formula "8") (term "0"))
                              (rule "nnf_notAnd" (formula "8") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
                              (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "8") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
                              (rule "mul_literals" (formula "8") (term "1,0,0,0"))
                               (builtin "One Step Simplification" (formula "8"))
                              (rule "true_left" (formula "8"))
                              (rule "distr_forallAnd" (formula "32"))
                              (rule "andLeft" (formula "32"))
                              (rule "all_pull_out3" (formula "46") (term "0"))
                              (rule "all_pull_out3" (formula "56") (term "0"))
                              (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "27") (term "0,0,1,0") (inst "i=i") (inst "j=j_1"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0,1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "27") (term "1,0,1,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,0,1,0"))
                              (rule "mul_literals" (formula "27") (term "0,1,1,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,1,0,0,1,0"))
                              (rule "mul_literals" (formula "27") (term "0,1,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,1,0,0,1,0"))
                              (rule "nnf_imp2or" (formula "27") (term "0,0,1,0"))
                              (rule "nnf_notAnd" (formula "27") (term "0,0,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0,0,1,0"))
                              (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0,0,1,0"))
                              (rule "add_zero_right" (formula "27") (term "0,0,0,0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0,0,1,0"))
                              (rule "mul_literals" (formula "27") (term "1,0,0,0,0,1,0"))
                              (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,0,1,0"))
                              (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,0,1,0"))
                              (rule "add_literals" (formula "27") (term "0,0,0,1,0,0,0,1,0"))
                              (rule "add_zero_left" (formula "27") (term "0,0,1,0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,0,1,0"))
                              (rule "nnf_imp2or" (formula "27") (term "0,1,0,0,1,0"))
                              (rule "nnf_notAnd" (formula "27") (term "0,0,1,0,0,1,0"))
                              (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,1,0,0,1,0"))
                              (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,1,0,0,1,0"))
                              (rule "add_literals" (formula "27") (term "0,0,0,1,0,0,1,0,0,1,0"))
                              (rule "add_zero_left" (formula "27") (term "0,0,1,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0,1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0,1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0,1,0,0,1,0"))
                              (rule "mul_literals" (formula "27") (term "0,1,0,0,0,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,0,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,0,1,0,0,1,0"))
                              (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "7") (term "0"))
                              (rule "wellFormedAnon" (formula "7") (term "1,0"))
                              (rule "replace_known_right" (formula "7") (term "0,0,0") (ifseqformula "83"))
                               (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "11")) (ifInst ""  (formula "10")) (ifInst ""  (formula "8")))
                              (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "8") (term "0") (inst "i=i"))
                               (builtin "One Step Simplification" (formula "8"))
                              (rule "translateJavaAddInt" (formula "8") (term "0,2,1,1,0"))
                              (rule "translateJavaSubInt" (formula "8") (term "1,1,0,0"))
                              (rule "sub_literals" (formula "8") (term "1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "8") (term "0,2,1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                              (rule "mul_literals" (formula "8") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "8") (term "0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "8") (term "1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                              (rule "mul_literals" (formula "8") (term "1,1,0,0"))
                              (rule "nnf_imp2or" (formula "8") (term "0"))
                              (rule "nnf_notAnd" (formula "8") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
                              (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
                              (rule "mul_literals" (formula "8") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
                              (rule "mul_literals" (formula "8") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "8") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
                              (rule "mul_literals" (formula "8") (term "1,1,0,0"))
                              (rule "inEqSimp_or_tautInEq0" (formula "8") (term "0,0"))
                              (rule "add_literals" (formula "8") (term "1,1,0,0"))
                              (rule "qeq_literals" (formula "8") (term "1,0,0"))
                               (builtin "One Step Simplification" (formula "8"))
                              (rule "true_left" (formula "8"))
                              (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "27") (term "1,1,0"))
                               (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "61")) (ifInst ""  (formula "49")))
                              (rule "translateJavaSubInt" (formula "27") (term "3,0,1,1,1,0"))
                              (rule "polySimp_elimSub" (formula "27") (term "3,0,1,1,1,0"))
                              (rule "mul_literals" (formula "27") (term "1,3,0,1,1,1,0"))
                              (rule "polySimp_addComm0" (formula "27") (term "3,0,1,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "27") (term "1,0,0,0,0,1,1,0"))
                              (rule "replace_known_left" (formula "27") (term "1,0,0,0,0,1,1,0") (ifseqformula "48"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "inEqSimp_commuteLeq" (formula "27") (term "1,1,0,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "27") (term "0,1,0,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "27") (term "1,0,1,1,0"))
                              (rule "applyEq" (formula "27") (term "1,1,0,1,1,0") (ifseqformula "50"))
                              (rule "applyEq" (formula "27") (term "0,0,1,0,1,1,0") (ifseqformula "44"))
                              (rule "replace_known_left" (formula "27") (term "1,0,1,1,0") (ifseqformula "55"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "applyEq" (formula "27") (term "1,0,1,1,1,0") (ifseqformula "44"))
                              (rule "applyEq" (formula "27") (term "0,0,1,0,1,1,0") (ifseqformula "50"))
                              (rule "replace_known_left" (formula "27") (term "0,1,0,1,1,0") (ifseqformula "52"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "applyEq" (formula "27") (term "1,1,0,1,1,0") (ifseqformula "50"))
                              (rule "replace_known_left" (formula "27") (term "1,0,1,1,0") (ifseqformula "54"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "applyEq" (formula "27") (term "0,0,0,0,1,1,0") (ifseqformula "44"))
                              (rule "replace_known_right" (formula "27") (term "0,0,0,1,1,0") (ifseqformula "65"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "applyEq" (formula "27") (term "0,0,1,1,0") (ifseqformula "50"))
                              (rule "eqSymm" (formula "27") (term "0,1,1,0"))
                              (rule "replace_known_left" (formula "27") (term "0,1,1,0") (ifseqformula "42"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "applyEq" (formula "27") (term "1,3,0,1,1,0") (ifseqformula "50"))
                              (rule "commute_or_2" (formula "33") (term "0"))
                              (rule "shift_paren_or" (formula "46") (term "0,0"))
                              (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "7") (term "0"))
                              (rule "wellFormedAnon" (formula "7") (term "1,0"))
                              (rule "replace_known_right" (formula "7") (term "0,0,0") (ifseqformula "83"))
                               (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "11")) (ifInst ""  (formula "10")) (ifInst ""  (formula "8")))
                              (rule "shift_paren_or" (formula "57") (term "0,0"))
                              (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "8") (term "0") (inst "i=i") (inst "j=j_1"))
                               (builtin "One Step Simplification" (formula "8"))
                              (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,1,0"))
                              (rule "times_zero_1" (formula "8") (term "1,0,0,1,0,0,1,0"))
                              (rule "add_zero_right" (formula "8") (term "0,0,1,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                              (rule "times_zero_1" (formula "8") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "8") (term "0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "8") (term "1,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,1,0"))
                              (rule "mul_literals" (formula "8") (term "1,1,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                              (rule "mul_literals" (formula "8") (term "1,1,0,0"))
                              (rule "nnf_imp2or" (formula "8") (term "0"))
                              (rule "nnf_notAnd" (formula "8") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
                              (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "8") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
                              (rule "mul_literals" (formula "8") (term "1,0,0,0"))
                               (builtin "One Step Simplification" (formula "8"))
                              (rule "true_left" (formula "8"))
                              (rule "cnf_rightDist" (formula "32") (term "0"))
                              (rule "all_pull_out3" (formula "31") (term "0"))
                              (rule "distr_forallAnd" (formula "32"))
                              (rule "andLeft" (formula "32"))
                              (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "27") (term "1"))
                               (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "62")) (ifInst ""  (formula "50")))
                              (rule "translateJavaSubInt" (formula "27") (term "3,0,1,1"))
                              (rule "polySimp_elimSub" (formula "27") (term "3,0,1,1"))
                              (rule "mul_literals" (formula "27") (term "1,3,0,1,1"))
                              (rule "polySimp_addComm0" (formula "27") (term "3,0,1,1"))
                              (rule "inEqSimp_commuteLeq" (formula "27") (term "1,1,0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "27") (term "1,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "27") (term "0,1,0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "27") (term "1,0,0,0,0,1"))
                              (rule "replace_known_left" (formula "27") (term "1,0,0,0,0,1") (ifseqformula "49"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "applyEq" (formula "27") (term "0,0,1,0,0,1") (ifseqformula "51"))
                              (rule "replace_known_left" (formula "27") (term "0,1,0,0,1") (ifseqformula "53"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "applyEq" (formula "27") (term "0,1,0,0,0,1") (ifseqformula "51"))
                              (rule "eqSymm" (formula "27") (term "1,0,0,0,1"))
                              (rule "replace_known_left" (formula "27") (term "1,0,0,0,1") (ifseqformula "43"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "applyEq" (formula "27") (term "1,3,0,1,1") (ifseqformula "51"))
                              (rule "applyEq" (formula "27") (term "0,0,0,0,0,1") (ifseqformula "45"))
                              (rule "replace_known_right" (formula "27") (term "0,0,0,0,1") (ifseqformula "66"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "applyEq" (formula "27") (term "1,0,0,1") (ifseqformula "51"))
                              (rule "replace_known_left" (formula "27") (term "0,0,1") (ifseqformula "55"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "applyEq" (formula "27") (term "1,0,1,1") (ifseqformula "45"))
                              (rule "applyEq" (formula "27") (term "1,0,1") (ifseqformula "51"))
                              (rule "applyEq" (formula "27") (term "0,0,0,1") (ifseqformula "45"))
                              (rule "replace_known_left" (formula "27") (term "0,1") (ifseqformula "56"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "7") (term "0") (inst "i=i"))
                               (builtin "One Step Simplification" (formula "7"))
                              (rule "translateJavaSubInt" (formula "7") (term "1,1,0,0"))
                              (rule "translateJavaAddInt" (formula "7") (term "0,2,1,1,0"))
                              (rule "sub_literals" (formula "7") (term "1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "7") (term "0,2,1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
                              (rule "mul_literals" (formula "7") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "7") (term "0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "7") (term "1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
                              (rule "mul_literals" (formula "7") (term "1,1,0,0"))
                              (rule "nnf_imp2or" (formula "7") (term "0"))
                              (rule "nnf_notAnd" (formula "7") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
                              (rule "mul_literals" (formula "7") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "7") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
                              (rule "mul_literals" (formula "7") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
                              (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "7") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
                              (rule "mul_literals" (formula "7") (term "1,0,0,0"))
                              (rule "inEqSimp_or_tautInEq0" (formula "7") (term "0,0"))
                              (rule "add_literals" (formula "7") (term "1,1,0,0"))
                              (rule "qeq_literals" (formula "7") (term "1,0,0"))
                               (builtin "One Step Simplification" (formula "7"))
                              (rule "true_left" (formula "7"))
                              (rule "commute_or" (formula "33") (term "0,0"))
                              (rule "onlyCreatedObjectsAreReferencedFinal" (formula "44") (term "0") (ifseqformula "9") (ifseqformula "3"))
                              (rule "applyEq" (formula "44") (term "0,0") (ifseqformula "45"))
                              (rule "replace_known_right" (formula "44") (term "0") (ifseqformula "66"))
                               (builtin "One Step Simplification" (formula "44"))
                              (rule "applyEq" (formula "44") (term "1,0") (ifseqformula "45"))
                              (rule "commute_or" (formula "32") (term "0"))
                              (rule "allLeft" (formula "7") (inst "t=add(Z(neglit(2(#))), l_1)"))
                              (rule "inEqSimp_homoInEq0" (formula "7") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "7") (term "0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "7") (term "0,0,0"))
                              (rule "add_literals" (formula "7") (term "0,0,0,0"))
                              (rule "inEqSimp_homoInEq1" (formula "7") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "7") (term "1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "7") (term "1,0,1,0"))
                              (rule "mul_literals" (formula "7") (term "0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "7") (term "0,1,0"))
                              (rule "polySimp_addComm0" (formula "7") (term "0,0,1,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,1,0"))
                              (rule "add_literals" (formula "7") (term "1,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "7") (term "1,0,1,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "7") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "7") (term "0,0,0"))
                              (rule "polySimp_elimOne" (formula "7") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0"))
                              (rule "mul_literals" (formula "7") (term "1,1,0"))
                              (rule "inEqSimp_contradInEq1" (formula "7") (term "0,0") (ifseqformula "53"))
                              (rule "qeq_literals" (formula "7") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "7"))
                              (rule "inEqSimp_contradInEq1" (formula "7") (term "0") (ifseqformula "53"))
                              (rule "qeq_literals" (formula "7") (term "0,0"))
                               (builtin "One Step Simplification" (formula "7"))
                              (rule "pullOutSelect" (formula "7") (term "1") (inst "selectSK=arr_3"))
                              (rule "simplifySelectOfAnon" (formula "7"))
                               (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "84")) (ifInst ""  (formula "15")))
                              (rule "elementOfArrayRangeConcrete" (formula "7") (term "0,0"))
                               (builtin "One Step Simplification" (formula "7"))
                              (rule "inEqSimp_homoInEq0" (formula "7") (term "0,0,0"))
                              (rule "times_zero_2" (formula "7") (term "1,0,0,0,0"))
                              (rule "add_zero_right" (formula "7") (term "0,0,0,0"))
                              (rule "inEqSimp_homoInEq0" (formula "7") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "7") (term "1,0,1,0,0"))
                              (rule "polySimp_rightDist" (formula "7") (term "1,0,1,0,0"))
                              (rule "mul_literals" (formula "7") (term "0,1,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "7") (term "0,1,0,0"))
                              (rule "polySimp_addComm0" (formula "7") (term "0,0,1,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,1,0,0"))
                              (rule "add_literals" (formula "7") (term "1,1,0,1,0,0"))
                              (rule "polySimp_elimOne" (formula "7") (term "1,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "0,0,0"))
                              (rule "mul_literals" (formula "7") (term "1,0,0,0"))
                              (rule "replace_known_left" (formula "7") (term "0,0,0") (ifseqformula "54"))
                               (builtin "One Step Simplification" (formula "7"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "0,0"))
                              (rule "mul_literals" (formula "7") (term "1,0,0"))
                              (rule "inEqSimp_subsumption1" (formula "7") (term "0,0") (ifseqformula "54"))
                              (rule "leq_literals" (formula "7") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "7"))
                              (rule "applyEqReverse" (formula "8") (term "1") (ifseqformula "7"))
                              (rule "hideAuxiliaryEq" (formula "7"))
                              (rule "allLeft" (formula "59") (inst "t=add(Z(neglit(1(#))), l_1)"))
                              (rule "inEqSimp_homoInEq0" (formula "59") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "59") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "59") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "59") (term "0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "59") (term "0,0,0"))
                              (rule "add_literals" (formula "59") (term "0,0,0,0"))
                              (rule "add_zero_left" (formula "59") (term "0,0,0"))
                              (rule "inEqSimp_homoInEq1" (formula "59") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "59") (term "1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "59") (term "1,0,1,0"))
                              (rule "mul_literals" (formula "59") (term "0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "59") (term "0,1,0"))
                              (rule "polySimp_addComm0" (formula "59") (term "0,0,1,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "59") (term "0,1,0"))
                              (rule "add_literals" (formula "59") (term "1,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "59") (term "1,0,1,0"))
                              (rule "inEqSimp_invertInEq1" (formula "59") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "59") (term "0,0,0"))
                              (rule "times_zero_2" (formula "59") (term "1,0,0"))
                              (rule "polySimp_elimOne" (formula "59") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "59") (term "1,0"))
                              (rule "mul_literals" (formula "59") (term "1,1,0"))
                              (rule "inEqSimp_contradInEq1" (formula "59") (term "0,0") (ifseqformula "53"))
                              (rule "qeq_literals" (formula "59") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "59"))
                              (rule "inEqSimp_contradInEq1" (formula "59") (term "0") (ifseqformula "53"))
                              (rule "qeq_literals" (formula "59") (term "0,0"))
                               (builtin "One Step Simplification" (formula "59"))
                              (rule "pullOutSelect" (formula "59") (term "0") (inst "selectSK=arr_4"))
                              (rule "simplifySelectOfAnon" (formula "59"))
                               (builtin "One Step Simplification" (formula "59") (ifInst ""  (formula "65")) (ifInst ""  (formula "2")))
                              (rule "elementOfArrayRangeConcrete" (formula "59") (term "0,0"))
                              (rule "replace_known_right" (formula "59") (term "0,0,0,0") (ifseqformula "75"))
                               (builtin "One Step Simplification" (formula "59"))
                              (rule "applyEqReverse" (formula "60") (term "0") (ifseqformula "59"))
                              (rule "hideAuxiliaryEq" (formula "59"))
                              (rule "allLeft" (formula "60") (inst "t=add(Z(neglit(2(#))), l_1)"))
                              (rule "inEqSimp_homoInEq1" (formula "60") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "60") (term "1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "60") (term "1,0,1,0"))
                              (rule "mul_literals" (formula "60") (term "0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "60") (term "0,1,0"))
                              (rule "polySimp_addComm0" (formula "60") (term "0,0,1,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "60") (term "0,1,0"))
                              (rule "add_literals" (formula "60") (term "1,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "60") (term "1,0,1,0"))
                              (rule "inEqSimp_homoInEq0" (formula "60") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "60") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "60") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "60") (term "0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "60") (term "0,0,0"))
                              (rule "add_literals" (formula "60") (term "0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "60") (term "1,0"))
                              (rule "mul_literals" (formula "60") (term "1,1,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "60") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "60") (term "0,0,0"))
                              (rule "polySimp_elimOne" (formula "60") (term "0,0,0"))
                              (rule "inEqSimp_contradInEq1" (formula "60") (term "1,0") (ifseqformula "53"))
                              (rule "qeq_literals" (formula "60") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "60"))
                              (rule "inEqSimp_contradInEq1" (formula "60") (term "0") (ifseqformula "53"))
                              (rule "qeq_literals" (formula "60") (term "0,0"))
                               (builtin "One Step Simplification" (formula "60"))
                              (rule "pullOutSelect" (formula "60") (term "0") (inst "selectSK=arr_5"))
                              (rule "simplifySelectOfAnon" (formula "60"))
                               (builtin "One Step Simplification" (formula "60") (ifInst ""  (formula "66")) (ifInst ""  (formula "2")))
                              (rule "elementOfArrayRangeConcrete" (formula "60") (term "0,0"))
                              (rule "replace_known_right" (formula "60") (term "0,0,0,0") (ifseqformula "76"))
                               (builtin "One Step Simplification" (formula "60"))
                              (rule "applyEqReverse" (formula "61") (term "0") (ifseqformula "60"))
                              (rule "hideAuxiliaryEq" (formula "60"))
                              (rule "allLeft" (formula "8") (inst "t=add(Z(neglit(1(#))), l_1)"))
                              (rule "inEqSimp_homoInEq0" (formula "8") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "8") (term "0,0,0"))
                              (rule "add_literals" (formula "8") (term "0,0,0,0"))
                              (rule "add_zero_left" (formula "8") (term "0,0,0"))
                              (rule "inEqSimp_homoInEq1" (formula "8") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "8") (term "1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "8") (term "1,0,1,0"))
                              (rule "mul_literals" (formula "8") (term "0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "8") (term "0,1,0"))
                              (rule "polySimp_addComm0" (formula "8") (term "0,0,1,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,1,0"))
                              (rule "add_literals" (formula "8") (term "1,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "8") (term "1,0,1,0"))
                              (rule "inEqSimp_invertInEq1" (formula "8") (term "0,0"))
                              (rule "mul_literals" (formula "8") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "8") (term "0,0,0"))
                              (rule "polySimp_elimOne" (formula "8") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0"))
                              (rule "mul_literals" (formula "8") (term "1,1,0"))
                              (rule "inEqSimp_contradInEq1" (formula "8") (term "0,0") (ifseqformula "54"))
                              (rule "qeq_literals" (formula "8") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "8"))
                              (rule "inEqSimp_contradInEq1" (formula "8") (term "0") (ifseqformula "54"))
                              (rule "qeq_literals" (formula "8") (term "0,0"))
                               (builtin "One Step Simplification" (formula "8"))
                              (rule "pullOutSelect" (formula "8") (term "1") (inst "selectSK=arr_6"))
                              (rule "simplifySelectOfAnon" (formula "8"))
                               (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "87")) (ifInst ""  (formula "16")))
                              (rule "elementOfArrayRangeConcrete" (formula "8") (term "0,0"))
                               (builtin "One Step Simplification" (formula "8"))
                              (rule "inEqSimp_homoInEq0" (formula "8") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "8") (term "1,0,1,0,0"))
                              (rule "polySimp_rightDist" (formula "8") (term "1,0,1,0,0"))
                              (rule "mul_literals" (formula "8") (term "0,1,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "8") (term "0,1,0,0"))
                              (rule "polySimp_addComm0" (formula "8") (term "0,0,1,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,1,0,0"))
                              (rule "add_literals" (formula "8") (term "1,1,0,1,0,0"))
                              (rule "polySimp_elimOne" (formula "8") (term "1,0,1,0,0"))
                              (rule "inEqSimp_homoInEq0" (formula "8") (term "0,0,0"))
                              (rule "mul_literals" (formula "8") (term "1,0,0,0,0"))
                              (rule "add_zero_right" (formula "8") (term "0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
                              (rule "mul_literals" (formula "8") (term "1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "0,0,0"))
                              (rule "mul_literals" (formula "8") (term "1,0,0,0"))
                              (rule "inEqSimp_subsumption1" (formula "8") (term "1,0,0") (ifseqformula "55"))
                              (rule "leq_literals" (formula "8") (term "0,1,0,0"))
                               (builtin "One Step Simplification" (formula "8"))
                              (rule "inEqSimp_subsumption1" (formula "8") (term "0,0") (ifseqformula "55"))
                              (rule "leq_literals" (formula "8") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "8"))
                              (rule "applyEqReverse" (formula "9") (term "1") (ifseqformula "8"))
                              (rule "hideAuxiliaryEq" (formula "8"))
                              (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "28") (term "0,1,1,0") (inst "i=i") (inst "j=j_1"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0,1,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0,1,0,1,1,0"))
                              (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0,1,0,1,1,0"))
                              (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0,1,0,1,1,0"))
                              (rule "add_literals" (formula "28") (term "0,0,0,1,0,0,1,0,1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0,1,1,0"))
                              (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0,1,1,0"))
                              (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0,1,1,0"))
                              (rule "add_literals" (formula "28") (term "0,0,0,1,0,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "28") (term "1,0,1,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0,1,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0,1,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,1,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,1,0,1,1,0"))
                              (rule "mul_literals" (formula "28") (term "0,1,1,0,0,1,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,1,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,1,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,1,1,0"))
                              (rule "mul_literals" (formula "28") (term "0,1,1,0,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,1,1,0"))
                              (rule "all_pull_out1" (formula "31") (term "0,1,0"))
                              (rule "shift_paren_or" (formula "48") (term "0,0,0"))
                              (rule "shift_paren_or" (formula "58") (term "0,0,0"))
                              (rule "shift_paren_or" (formula "32") (term "0,0"))
                              (rule "allLeft" (formula "47") (inst "t=Z(0(#))"))
                              (rule "leq_literals" (formula "47") (term "0,0"))
                               (builtin "One Step Simplification" (formula "47"))
                              (rule "add_literals" (formula "47") (term "0,2,0,1"))
                              (rule "inEqSimp_homoInEq1" (formula "47") (term "0"))
                              (rule "mul_literals" (formula "47") (term "1,0,0"))
                              (rule "add_zero_right" (formula "47") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "47") (term "0"))
                              (rule "mul_literals" (formula "47") (term "1,0"))
                              (rule "inEqSimp_contradInEq1" (formula "47") (term "0") (ifseqformula "55"))
                              (rule "qeq_literals" (formula "47") (term "0,0"))
                               (builtin "One Step Simplification" (formula "47"))
                              (rule "allLeft" (formula "48") (inst "t=add(Z(neglit(2(#))), l_1)"))
                              (rule "polySimp_addAssoc" (formula "48") (term "0,2,0,1"))
                              (rule "add_literals" (formula "48") (term "0,0,2,0,1"))
                              (rule "inEqSimp_commuteGeq" (formula "48") (term "1"))
                              (rule "inEqSimp_homoInEq0" (formula "48") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "48") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "48") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "48") (term "0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "48") (term "0,0,0"))
                              (rule "add_literals" (formula "48") (term "0,0,0,0"))
                              (rule "inEqSimp_homoInEq1" (formula "48") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "48") (term "1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "48") (term "1,0,1,0"))
                              (rule "mul_literals" (formula "48") (term "0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "48") (term "0,1,0"))
                              (rule "polySimp_addComm1" (formula "48") (term "0,0,1,0"))
                              (rule "add_literals" (formula "48") (term "0,0,0,1,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "48") (term "0,1,0"))
                              (rule "add_literals" (formula "48") (term "1,1,0,1,0"))
                              (rule "times_zero_1" (formula "48") (term "1,0,1,0"))
                              (rule "add_literals" (formula "48") (term "0,1,0"))
                              (rule "leq_literals" (formula "48") (term "1,0"))
                               (builtin "One Step Simplification" (formula "48"))
                              (rule "applyEq" (formula "48") (term "0,1") (ifseqformula "51"))
                              (rule "inEqSimp_homoInEq0" (formula "48") (term "1"))
                              (rule "polySimp_pullOutFactor1" (formula "48") (term "0,1"))
                              (rule "add_literals" (formula "48") (term "1,0,1"))
                              (rule "times_zero_1" (formula "48") (term "0,1"))
                              (rule "qeq_literals" (formula "48") (term "1"))
                               (builtin "One Step Simplification" (formula "48"))
                              (rule "true_left" (formula "48"))
                              (rule "nnf_imp2or" (formula "28") (term "0,1,1,0"))
                              (rule "allLeft" (formula "64") (inst "t=add(Z(neglit(2(#))), l_1)"))
                              (rule "replaceKnownSelect_taclet0101001201_10" (formula "64") (term "0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet0101001201_11" (formula "64") (term "0,1"))
                              (rule "inEqSimp_homoInEq0" (formula "64") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "64") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "64") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "64") (term "0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "64") (term "0,0,0"))
                              (rule "add_literals" (formula "64") (term "0,0,0,0"))
                              (rule "inEqSimp_homoInEq1" (formula "64") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "64") (term "1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "64") (term "1,0,1,0"))
                              (rule "mul_literals" (formula "64") (term "0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "64") (term "0,1,0"))
                              (rule "polySimp_addComm0" (formula "64") (term "0,0,1,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "64") (term "0,1,0"))
                              (rule "add_literals" (formula "64") (term "1,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "64") (term "1,0,1,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "64") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "64") (term "0,0,0"))
                              (rule "polySimp_elimOne" (formula "64") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "64") (term "1,0"))
                              (rule "mul_literals" (formula "64") (term "1,1,0"))
                              (rule "inEqSimp_contradInEq1" (formula "64") (term "0,0") (ifseqformula "55"))
                              (rule "qeq_literals" (formula "64") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "64"))
                              (rule "inEqSimp_contradInEq1" (formula "64") (term "0") (ifseqformula "55"))
                              (rule "qeq_literals" (formula "64") (term "0,0"))
                               (builtin "One Step Simplification" (formula "64"))
                              (rule "allLeft" (formula "65") (inst "t=add(Z(neglit(1(#))), l_1)"))
                              (rule "replaceKnownSelect_taclet0101001201_8" (formula "65") (term "0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet0101001201_9" (formula "65") (term "0,1"))
                              (rule "inEqSimp_homoInEq1" (formula "65") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "65") (term "1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "65") (term "1,0,1,0"))
                              (rule "mul_literals" (formula "65") (term "0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "65") (term "0,1,0"))
                              (rule "polySimp_addComm0" (formula "65") (term "0,0,1,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "65") (term "0,1,0"))
                              (rule "add_literals" (formula "65") (term "1,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "65") (term "1,0,1,0"))
                              (rule "inEqSimp_homoInEq0" (formula "65") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "65") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "65") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "65") (term "0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "65") (term "0,0,0"))
                              (rule "add_literals" (formula "65") (term "0,0,0,0"))
                              (rule "add_zero_left" (formula "65") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "65") (term "1,0"))
                              (rule "mul_literals" (formula "65") (term "1,1,0"))
                              (rule "inEqSimp_invertInEq1" (formula "65") (term "0,0"))
                              (rule "mul_literals" (formula "65") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "65") (term "0,0,0"))
                              (rule "polySimp_elimOne" (formula "65") (term "0,0,0"))
                              (rule "inEqSimp_contradInEq1" (formula "65") (term "1,0") (ifseqformula "55"))
                              (rule "qeq_literals" (formula "65") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "65"))
                              (rule "inEqSimp_contradInEq1" (formula "65") (term "0") (ifseqformula "55"))
                              (rule "qeq_literals" (formula "65") (term "0,0"))
                               (builtin "One Step Simplification" (formula "65"))
                              (rule "nnf_notAnd" (formula "28") (term "0,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "28") (term "1,0,0,0,0,0,1,1,0"))
                              (rule "add_literals" (formula "28") (term "0,0,0,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "28") (term "1,0,0,0,1,1,0"))
                              (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0,1,1,0"))
                              (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0,1,1,0"))
                              (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0,1,1,0"))
                              (rule "add_literals" (formula "28") (term "0,0,0,1,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,1,1,0"))
                              (rule "mul_literals" (formula "28") (term "0,1,1,0,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,1,1,0"))
                              (rule "nnf_imp2or" (formula "28") (term "0,1,0,1,1,0"))
                              (rule "onlyCreatedObjectsAreReferencedFinal" (formula "68") (term "0") (ifseqformula "11") (ifseqformula "3"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "69"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "nnf_notAnd" (formula "29") (term "0,0,1,0,1,1,0"))
                              (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,1,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,1,0,1,1,0"))
                              (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,1,0,1,1,0"))
                              (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,1,0,1,1,0"))
                              (rule "add_literals" (formula "29") (term "0,0,0,1,0,0,1,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,1,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,1,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,1,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,1,0,1,1,0"))
                              (rule "mul_literals" (formula "29") (term "0,1,1,0,0,1,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,1,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,1,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0,0,0,1,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,1,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0,1,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "29") (term "1,0,0,0,1,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0,1,0,1,1,0"))
                              (rule "mul_literals" (formula "29") (term "0,1,0,0,0,1,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0,1,0,1,1,0"))
                              (rule "allLeft" (formula "10") (inst "t=Z(0(#))"))
                              (rule "leq_literals" (formula "10") (term "0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "0"))
                              (rule "inEqSimp_contradInEq5" (formula "10") (term "0") (ifseqformula "57"))
                              (rule "greater_literals" (formula "10") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "mul_literals" (formula "10") (term "1,0,0"))
                              (rule "qeq_literals" (formula "10") (term "0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "applyEq" (formula "94") (term "0") (ifseqformula "10"))
                              (rule "pullOutSelect" (formula "10") (term "1") (inst "selectSK=arr_7"))
                              (rule "applyEq" (formula "95") (term "0") (ifseqformula "10"))
                              (rule "simplifySelectOfAnon" (formula "10"))
                               (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "92")) (ifInst ""  (formula "18")))
                              (rule "eqSymm" (formula "95"))
                              (rule "elementOfArrayRangeConcrete" (formula "10") (term "0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "leq_literals" (formula "10") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0"))
                              (rule "inEqSimp_subsumption6" (formula "10") (term "0,0") (ifseqformula "58"))
                              (rule "mul_literals" (formula "10") (term "1,1,0,0,0"))
                              (rule "greater_literals" (formula "10") (term "0,0,0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "leq_literals" (formula "10") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "95")))
                              (rule "closeFalse" (formula "10"))
                           )
                           (branch "self.equal_buckets = TRUE FALSE"
                              (rule "applyEq" (formula "51") (term "1,1,1,0,0,1,0") (ifseqformula "38"))
                              (rule "applyEq" (formula "50") (term "0") (ifseqformula "38"))
                              (rule "inEqSimp_commuteLeq" (formula "50"))
                              (rule "applyEq" (formula "42") (term "1,1,0,0,1,0") (ifseqformula "38"))
                              (rule "applyEq" (formula "42") (term "1,1,0,0") (ifseqformula "38"))
                              (rule "applyEq" (formula "48") (term "0") (ifseqformula "38"))
                              (rule "applyEq" (formula "40") (term "3,0") (ifseqformula "38"))
                              (rule "applyEq" (formula "48") (term "1") (ifseqformula "38"))
                              (rule "applyEq" (formula "41") (term "1,1,1,0,0,0") (ifseqformula "38"))
                              (rule "applyEq" (formula "50") (term "1,1,1,0,0") (ifseqformula "38"))
                              (rule "applyEq" (formula "43") (term "1,0,2,0") (ifseqformula "38"))
                              (rule "eqSymm" (formula "43"))
                              (rule "applyEq" (formula "43") (term "1,0,2,0") (ifseqformula "38"))
                              (rule "eqSymm" (formula "43"))
                              (rule "applyEq" (formula "46") (term "1") (ifseqformula "38"))
                              (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "24") (term "1"))
                               (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "59")) (ifInst ""  (formula "60")) (ifInst ""  (formula "55")) (ifInst ""  (formula "39")))
                              (rule "translateJavaSubInt" (formula "24") (term "0,2,0,1,0,1"))
                              (rule "translateJavaSubInt" (formula "24") (term "0,2,1,1,0,1"))
                              (rule "eqSymm" (formula "24") (term "1,0,0,0,1"))
                              (rule "eqSymm" (formula "24") (term "1,0,1"))
                              (rule "polySimp_elimSub" (formula "24") (term "0,2,0,1,0,1"))
                              (rule "mul_literals" (formula "24") (term "1,0,2,0,1,0,1"))
                              (rule "eqSymm" (formula "24") (term "1,0,1"))
                              (rule "polySimp_elimSub" (formula "24") (term "0,2,0,1,0,1"))
                              (rule "mul_literals" (formula "24") (term "1,0,2,0,1,0,1"))
                              (rule "eqSymm" (formula "24") (term "1,0,1"))
                              (rule "polySimp_addComm0" (formula "24") (term "0,2,0,1,0,1"))
                              (rule "eqSymm" (formula "24") (term "1,0,1"))
                              (rule "polySimp_addComm0" (formula "24") (term "0,2,0,1,0,1"))
                              (rule "eqSymm" (formula "24") (term "1,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,0,0,1"))
                              (rule "applyEq" (formula "24") (term "3,0,1,0,0,1") (ifseqformula "46"))
                              (rule "replace_known_left" (formula "24") (term "1,0,0,1") (ifseqformula "40"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "applyEq" (formula "24") (term "1,0,2,0,1,0,1") (ifseqformula "46"))
                              (rule "eqSymm" (formula "24") (term "1,0,1"))
                              (rule "applyEq" (formula "24") (term "0,1,0,0,1") (ifseqformula "46"))
                              (rule "eqSymm" (formula "24") (term "1,0,0,1"))
                              (rule "replace_known_left" (formula "24") (term "1,0,0,1") (ifseqformula "23"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "applyEq" (formula "24") (term "0,0,0,0,1") (ifseqformula "23"))
                              (rule "replace_known_left" (formula "24") (term "0,0,0,1") (ifseqformula "36"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "applyEq" (formula "24") (term "0,0,0,1") (ifseqformula "23"))
                              (rule "replace_known_left" (formula "24") (term "0,0,1") (ifseqformula "37"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "applyEq" (formula "24") (term "1,0,2,0,0,1") (ifseqformula "46"))
                              (rule "eqSymm" (formula "24") (term "0,1"))
                              (rule "replace_known_left" (formula "24") (term "0,1") (ifseqformula "43"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "30") (term "2,0"))
                              (rule "nnf_notAnd" (formula "4") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "4") (term "0,0,0"))
                              (rule "mul_literals" (formula "4") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "4") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0"))
                              (rule "mul_literals" (formula "4") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "4") (term "1,0,0"))
                              (rule "mul_literals" (formula "4") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "4") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0,0"))
                              (rule "mul_literals" (formula "4") (term "1,1,0,0"))
                              (rule "inEqSimp_or_tautInEq0" (formula "4") (term "0,0"))
                              (rule "add_literals" (formula "4") (term "1,1,0,0"))
                              (rule "qeq_literals" (formula "4") (term "1,0,0"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "true_left" (formula "4"))
                              (rule "arrayLengthIsAShort" (formula "47") (term "0"))
                               (builtin "One Step Simplification" (formula "47"))
                              (rule "true_left" (formula "47"))
                              (rule "arrayLengthNotNegative" (formula "47") (term "0"))
                              (rule "nnf_notAnd" (formula "40") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "40") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "40") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "40") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "40") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "40") (term "0,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "40") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "40") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "40") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "40") (term "1,1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "40") (term "0,0,0"))
                              (rule "times_zero_1" (formula "40") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "40") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "0,0,0"))
                              (rule "mul_literals" (formula "40") (term "1,0,0,0"))
                              (rule "arrayLengthNotNegative" (formula "46") (term "0"))
                              (rule "inEqSimp_subsumption1" (formula "46") (ifseqformula "47"))
                              (rule "leq_literals" (formula "46") (term "0"))
                               (builtin "One Step Simplification" (formula "46"))
                              (rule "true_left" (formula "46"))
                              (rule "arrayLengthIsAShort" (formula "46") (term "0"))
                               (builtin "One Step Simplification" (formula "46"))
                              (rule "true_left" (formula "46"))
                              (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "27") (term "1,4,0,1,0"))
                              (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "28") (term "0,1,0,1,0"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "translateJavaMod" (formula "28") (term "0,1,0,1,0"))
                              (rule "jmod_axiom" (formula "28") (term "0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,0,1,0,1,0"))
                              (rule "polySimp_sepNegMonomial" (formula "28") (term "1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "0,1,0,1,0"))
                              (rule "Definition_axiom_for_isClassifiedBlock_in_de_wiesler_Classifier" (formula "26") (term "0,1,0") (inst "bucket=bucket"))
                               (builtin "One Step Simplification" (formula "26"))
                              (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,1,0"))
                              (rule "applyEq" (formula "26") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "22"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "26") (term "0,1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,1,0"))
                              (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "3") (term "0"))
                              (rule "wellFormedAnon" (formula "3") (term "1,0"))
                              (rule "replace_known_left" (formula "3") (term "0,1,0") (ifseqformula "7"))
                               (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "78")) (ifInst ""  (formula "6")) (ifInst ""  (formula "4")))
                              (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "4") (term "0") (inst "i=i") (inst "j=j_1"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
                              (rule "times_zero_1" (formula "4") (term "1,0,0,1,0,0"))
                              (rule "add_zero_right" (formula "4") (term "0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0,1,0"))
                              (rule "times_zero_1" (formula "4") (term "1,0,0,1,0,0,1,0"))
                              (rule "add_zero_right" (formula "4") (term "0,0,1,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0"))
                              (rule "mul_literals" (formula "4") (term "1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0,1,0"))
                              (rule "mul_literals" (formula "4") (term "1,1,0,0,1,0"))
                              (rule "nnf_imp2or" (formula "4") (term "0"))
                              (rule "Contract_axiom_for_countClassOfSliceEq_in_Classifier" (formula "25") (term "1,1,0"))
                              (rule "replace_known_right" (formula "25") (term "0,1,0") (ifseqformula "81"))
                               (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "80")) (ifInst ""  (formula "7")) (ifInst ""  (formula "8")))
                              (rule "true_left" (formula "25"))
                              (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "25") (term "1,1,0") (inst "i=i"))
                              (rule "eqSymm" (formula "25") (term "1,0"))
                              (rule "nnf_notAnd" (formula "4") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "4") (term "1,0,0"))
                              (rule "mul_literals" (formula "4") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "4") (term "0,0,1,0,0"))
                              (rule "add_zero_left" (formula "4") (term "0,1,0,0"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "true_left" (formula "4"))
                              (rule "onlyCreatedObjectsAreReferencedFinal" (formula "70") (term "1") (ifseqformula "6") (ifseqformula "11"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "59"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferencedFinal" (formula "75") (term "1") (ifseqformula "7") (ifseqformula "12"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "59"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferencedFinal" (formula "77") (term "0,0") (ifseqformula "8") (ifseqformula "9"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "62"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferencedFinal" (formula "71") (term "0") (ifseqformula "9") (ifseqformula "10"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "64"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "commute_or" (formula "20") (term "0"))
                              (rule "commute_or" (formula "57") (term "0"))
                              (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "43") (term "0"))
                              (rule "replace_known_left" (formula "43") (term "1,0") (ifseqformula "10"))
                               (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "65")) (ifInst ""  (formula "44")))
                              (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "44") (term "0") (inst "i=i") (inst "j=j_1"))
                               (builtin "One Step Simplification" (formula "44"))
                              (rule "inEqSimp_ltToLeq" (formula "44") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "44") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "44") (term "1,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "44") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "44") (term "0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "44") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "44") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "44") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "44") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "44") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "44") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "44") (term "1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "44") (term "0,1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "44") (term "1,1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "44") (term "1,1,1,0,0,1,0"))
                              (rule "nnf_imp2or" (formula "44") (term "0"))
                              (rule "nnf_notAnd" (formula "44") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "44") (term "0,0,0"))
                              (rule "times_zero_1" (formula "44") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "44") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "0,0,0"))
                              (rule "mul_literals" (formula "44") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "44") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "44") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "44") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "44") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "44") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "44") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "44") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "44") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "44") (term "1,1,0,0"))
                              (rule "nnf_imp2or" (formula "44") (term "0,1,0"))
                              (rule "nnf_notAnd" (formula "44") (term "0,0,1,0"))
                              (rule "inEqSimp_notLeq" (formula "44") (term "1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "44") (term "1,0,0,1,0,0,1,0"))
                              (rule "mul_literals" (formula "44") (term "0,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "44") (term "0,0,1,0,0,1,0"))
                              (rule "add_literals" (formula "44") (term "0,0,0,1,0,0,1,0"))
                              (rule "add_zero_left" (formula "44") (term "0,0,1,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "44") (term "1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "44") (term "1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "44") (term "1,1,0,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "44") (term "0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "44") (term "1,0,0,0,1,0"))
                              (rule "mul_literals" (formula "44") (term "0,1,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "44") (term "1,1,0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "44") (term "1,1,0,0,0,1,0"))
                              (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "27") (term "0,0") (inst "b=b"))
                               (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "62")) (ifInst ""  (formula "61")) (ifInst ""  (formula "18")) (ifInst ""  (formula "40")))
                              (rule "translateJavaMulInt" (formula "27") (term "1,1,0,0,0,0"))
                              (rule "mul_literals" (formula "27") (term "1,1,0,0,0,0"))
                              (rule "eqSymm" (formula "27") (term "0,0,0,0,0,0"))
                              (rule "replace_known_left" (formula "27") (term "1,0,0,0,0") (ifseqformula "17"))
                               (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "74")))
                              (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "27") (term "0,1,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,1,0,0"))
                              (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "27") (term "0,1,1,0,0,1,0,0"))
                              (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,1,0,0"))
                              (rule "inEqSimp_subsumption1" (formula "27") (term "0,0,0") (ifseqformula "39"))
                              (rule "leq_literals" (formula "27") (term "0,0,0,0"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "nnf_imp2or" (formula "27") (term "0,0,0"))
                              (rule "nnf_notAnd" (formula "27") (term "0,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,0,0"))
                              (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,0,0"))
                              (rule "add_literals" (formula "27") (term "0,0,0,1,0,0,0,0"))
                              (rule "add_zero_left" (formula "27") (term "0,0,1,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0,0,0"))
                              (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "27") (term "0,0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0,0,0"))
                              (rule "mul_literals" (formula "27") (term "1,0,0,0,0,0"))
                              (rule "commute_or" (formula "54") (term "0,0,1,0"))
                              (rule "commute_or" (formula "45") (term "0,0,1,0"))
                              (rule "Contract_axiom_for_isClassOfSlice_in_Classifier" (formula "31") (term "0,1,0"))
                              (rule "replace_known_left" (formula "31") (term "1,0,0,0") (ifseqformula "10"))
                               (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "63")) (ifInst ""  (formula "11")) (ifInst ""  (formula "84")))
                              (rule "true_left" (formula "31"))
                              (rule "Definition_axiom_for_isClassOfSlice_in_de_wiesler_Classifier" (formula "31") (term "0,1,0") (inst "i=i"))
                               (builtin "One Step Simplification" (formula "31"))
                              (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0,1,0"))
                              (rule "polySimp_mulAssoc" (formula "31") (term "0,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "31") (term "0,0,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "0,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "31") (term "0,1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "1,0,1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "31") (term "0,0,1,1,0,0,1,0"))
                              (rule "nnf_imp2or" (formula "31") (term "0,1,0"))
                              (rule "nnf_notAnd" (formula "31") (term "0,0,1,0"))
                              (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "31") (term "0,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "1,0,1,0,0,1,0,0,1,0"))
                              (rule "mul_literals" (formula "31") (term "0,0,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "31") (term "0,0,0,1,0,0,1,0"))
                              (rule "add_literals" (formula "31") (term "0,0,0,0,1,0,0,1,0"))
                              (rule "add_zero_left" (formula "31") (term "0,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "31") (term "0,1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "0,1,1,0,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0,1,0"))
                              (rule "polySimp_mulAssoc" (formula "31") (term "1,0,0,0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "31") (term "0,1,0,0,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "1,0,0,0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "31") (term "1,0,0,0,1,0"))
                              (rule "mul_literals" (formula "31") (term "0,1,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0,0,1,0"))
                              (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "32") (term "0,0,1,1,1,0"))
                              (rule "Contract_axiom_for_isClassOfSlice_in_Classifier" (formula "30") (term "0,1,0,1,0"))
                              (rule "replace_known_right" (formula "30") (term "0,1,0,0,0,0") (ifseqformula "83"))
                               (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "10")) (ifInst ""  (formula "11")) (ifInst ""  (formula "84")))
                              (rule "true_left" (formula "30"))
                              (rule "Definition_axiom_for_isClassOfSlice_in_de_wiesler_Classifier" (formula "30") (term "0,1,0,1,0") (inst "i=i"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "30") (term "0,1,0,0,1,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "30") (term "0,0,1,0,0,1,0,0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "30") (term "0,0,0,1,0,0,1,0,1,0"))
                              (rule "add_literals" (formula "30") (term "0,0,0,0,1,0,0,1,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0,1,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "30") (term "0,1,1,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "30") (term "0,0,1,1,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "1,0,1,1,0,0,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "30") (term "1,0,1,1,0,0,1,0,1,0"))
                              (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "7") (term "0"))
                              (rule "wellFormedAnon" (formula "7") (term "1,0"))
                              (rule "replace_known_right" (formula "7") (term "0,0,0") (ifseqformula "82"))
                               (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "11")) (ifInst ""  (formula "10")) (ifInst ""  (formula "8")))
                              (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "8") (term "0") (inst "i=i"))
                               (builtin "One Step Simplification" (formula "8"))
                              (rule "translateJavaAddInt" (formula "8") (term "0,2,1,1,0"))
                              (rule "translateJavaSubInt" (formula "8") (term "1,1,0,0"))
                              (rule "sub_literals" (formula "8") (term "1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "8") (term "0,2,1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                              (rule "mul_literals" (formula "8") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "8") (term "0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "8") (term "1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                              (rule "mul_literals" (formula "8") (term "1,1,0,0"))
                              (rule "nnf_imp2or" (formula "8") (term "0"))
                              (rule "nnf_notAnd" (formula "8") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
                              (rule "mul_literals" (formula "8") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "8") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
                              (rule "mul_literals" (formula "8") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
                              (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
                              (rule "mul_literals" (formula "8") (term "1,0,0,0"))
                              (rule "inEqSimp_or_tautInEq0" (formula "8") (term "0,0"))
                              (rule "add_literals" (formula "8") (term "1,1,0,0"))
                              (rule "qeq_literals" (formula "8") (term "1,0,0"))
                               (builtin "One Step Simplification" (formula "8"))
                              (rule "true_left" (formula "8"))
                              (rule "nnf_imp2or" (formula "30") (term "0,1,0,1,0"))
                              (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "28") (term "0,0,2,0,1,0"))
                              (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "43") (term "0") (inst "i=i"))
                               (builtin "One Step Simplification" (formula "43"))
                              (rule "translateJavaAddInt" (formula "43") (term "0,2,1,1,0"))
                              (rule "translateJavaSubInt" (formula "43") (term "1,1,0,0"))
                              (rule "polySimp_elimSub" (formula "43") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "43") (term "1,1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "43") (term "0,2,1,1,0"))
                              (rule "polySimp_addComm0" (formula "43") (term "1,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "43") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "43") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "43") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "43") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "43") (term "0,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "43") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "43") (term "1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "43") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "43") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "43") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "43") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "43") (term "1,1,1,0,0"))
                              (rule "nnf_imp2or" (formula "43") (term "0"))
                              (rule "nnf_notAnd" (formula "43") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "43") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "43") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "43") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "43") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "43") (term "0,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "43") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "43") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "43") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "43") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "43") (term "1,1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "43") (term "0,0,0"))
                              (rule "times_zero_1" (formula "43") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "43") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "0,0,0"))
                              (rule "mul_literals" (formula "43") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "30") (term "0,0,1,0,1,0"))
                              (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "30") (term "0,1,0,0,1,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "30") (term "0,0,1,0,0,1,0,0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "30") (term "0,0,0,1,0,0,1,0,1,0"))
                              (rule "add_literals" (formula "30") (term "0,0,0,0,1,0,0,1,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "30") (term "0,1,1,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "1,0,1,1,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "30") (term "0,0,1,1,0,0,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "30") (term "1,0,1,1,0,0,1,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "30") (term "1,0,0,0,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,0,0,0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "30") (term "0,1,0,0,0,0,0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "30") (term "0,0,0,0,0,1,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "30") (term "1,0,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "30") (term "0,1,0,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "30") (term "0,0,1,0,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "1,0,1,0,0,0,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "30") (term "1,0,1,0,0,0,1,0,1,0"))
                              (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "27") (term "1,0"))
                               (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "62")) (ifInst ""  (formula "63")) (ifInst ""  (formula "58")) (ifInst ""  (formula "42")))
                              (rule "translateJavaSubInt" (formula "27") (term "0,2,0,1,0,1,0"))
                              (rule "translateJavaSubInt" (formula "27") (term "0,2,1,1,0,1,0"))
                              (rule "eqSymm" (formula "27") (term "1,0,0,0,1,0"))
                              (rule "eqSymm" (formula "27") (term "1,0,1,0"))
                              (rule "polySimp_elimSub" (formula "27") (term "0,2,0,1,0,1,0"))
                              (rule "mul_literals" (formula "27") (term "1,0,2,0,1,0,1,0"))
                              (rule "eqSymm" (formula "27") (term "1,0,1,0"))
                              (rule "polySimp_elimSub" (formula "27") (term "0,2,0,1,0,1,0"))
                              (rule "mul_literals" (formula "27") (term "1,0,2,0,1,0,1,0"))
                              (rule "eqSymm" (formula "27") (term "1,0,1,0"))
                              (rule "polySimp_addComm0" (formula "27") (term "0,2,1,1,0,1,0"))
                              (rule "polySimp_addComm0" (formula "27") (term "0,2,0,1,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,0,0,1,0"))
                              (rule "applyEq" (formula "27") (term "0,1,0,0,0,1,0") (ifseqformula "48"))
                              (rule "eqSymm" (formula "27") (term "1,0,0,0,1,0"))
                              (rule "replace_known_left" (formula "27") (term "1,0,0,0,1,0") (ifseqformula "26"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "applyEq" (formula "27") (term "0,0,0,0,0,1,0") (ifseqformula "26"))
                              (rule "replace_known_left" (formula "27") (term "0,0,0,0,1,0") (ifseqformula "39"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "applyEq" (formula "27") (term "0,0,0,0,1,0") (ifseqformula "26"))
                              (rule "replace_known_left" (formula "27") (term "0,0,0,1,0") (ifseqformula "40"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "applyEq" (formula "27") (term "1,0,2,0,1,0,1,0") (ifseqformula "48"))
                              (rule "eqSymm" (formula "27") (term "1,0,1,0"))
                              (rule "applyEq" (formula "27") (term "3,0,0,0,1,0") (ifseqformula "48"))
                              (rule "applyEq" (formula "27") (term "1,0,2,0,1,0,1,0") (ifseqformula "48"))
                              (rule "eqSymm" (formula "27") (term "1,0,1,0"))
                              (rule "replace_known_left" (formula "27") (term "1,0,1,0") (ifseqformula "45"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "31") (term "0,1,0,1,0"))
                              (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "7") (term "0"))
                              (rule "wellFormedAnon" (formula "7") (term "1,0"))
                              (rule "replace_known_right" (formula "7") (term "0,0,0") (ifseqformula "81"))
                               (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "11")) (ifInst ""  (formula "10")) (ifInst ""  (formula "8")))
                              (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "8") (term "0") (inst "i=i") (inst "j=j_1"))
                               (builtin "One Step Simplification" (formula "8"))
                              (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,1,0"))
                              (rule "times_zero_1" (formula "8") (term "1,0,0,1,0,0,1,0"))
                              (rule "add_zero_right" (formula "8") (term "0,0,1,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                              (rule "times_zero_1" (formula "8") (term "1,0,0,1,0,0"))
                              (rule "add_zero_right" (formula "8") (term "0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "8") (term "1,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,1,0"))
                              (rule "mul_literals" (formula "8") (term "1,1,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                              (rule "mul_literals" (formula "8") (term "1,1,0,0"))
                              (rule "nnf_imp2or" (formula "8") (term "0"))
                              (rule "nnf_notAnd" (formula "8") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
                              (rule "mul_literals" (formula "8") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "8") (term "0,0,1,0,0"))
                              (rule "add_zero_left" (formula "8") (term "0,1,0,0"))
                               (builtin "One Step Simplification" (formula "8"))
                              (rule "true_left" (formula "8"))
                              (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "30") (term "0,1,0,1,0,1,0"))
                              (rule "cnf_rightDist" (formula "32") (term "0"))
                              (rule "distr_forallAnd" (formula "32"))
                              (rule "andLeft" (formula "32"))
                              (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "27") (term "0,0,1,0") (inst "i=i") (inst "j=j_1"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0,1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "27") (term "1,0,1,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,0,1,0"))
                              (rule "mul_literals" (formula "27") (term "0,1,1,0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,1,0,0,1,0"))
                              (rule "mul_literals" (formula "27") (term "0,1,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,1,0,0,1,0"))
                              (rule "nnf_imp2or" (formula "27") (term "0,0,1,0"))
                              (rule "nnf_notAnd" (formula "27") (term "0,0,0,1,0"))
                              (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,0,1,0"))
                              (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,0,1,0"))
                              (rule "add_literals" (formula "27") (term "0,0,0,1,0,0,0,1,0"))
                              (rule "add_zero_left" (formula "27") (term "0,0,1,0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0,0,1,0"))
                              (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0,0,1,0"))
                              (rule "add_zero_right" (formula "27") (term "0,0,0,0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0,0,1,0"))
                              (rule "mul_literals" (formula "27") (term "1,0,0,0,0,1,0"))
                              (rule "nnf_imp2or" (formula "27") (term "0,1,0,0,1,0"))
                              (rule "nnf_notAnd" (formula "27") (term "0,0,1,0,0,1,0"))
                              (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,1,0,0,1,0"))
                              (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,1,0,0,1,0"))
                              (rule "add_literals" (formula "27") (term "0,0,0,1,0,0,1,0,0,1,0"))
                              (rule "add_zero_left" (formula "27") (term "0,0,1,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0,1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0,1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,0,1,0,0,1,0"))
                              (rule "mul_literals" (formula "27") (term "0,1,0,0,0,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,0,1,0,0,1,0"))
                              (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "7") (term "0"))
                              (rule "wellFormedAnon" (formula "7") (term "1,0"))
                              (rule "replace_known_right" (formula "7") (term "0,0,0") (ifseqformula "82"))
                               (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "11")) (ifInst ""  (formula "10")) (ifInst ""  (formula "8")))
                              (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "8") (term "0") (inst "i=i"))
                               (builtin "One Step Simplification" (formula "8"))
                              (rule "translateJavaAddInt" (formula "8") (term "0,2,1,1,0"))
                              (rule "translateJavaSubInt" (formula "8") (term "1,1,0,0"))
                              (rule "sub_literals" (formula "8") (term "1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "8") (term "0,2,1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                              (rule "mul_literals" (formula "8") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "8") (term "0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "8") (term "1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                              (rule "mul_literals" (formula "8") (term "1,1,0,0"))
                              (rule "nnf_imp2or" (formula "8") (term "0"))
                              (rule "nnf_notAnd" (formula "8") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
                              (rule "mul_literals" (formula "8") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "8") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
                              (rule "mul_literals" (formula "8") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
                              (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
                              (rule "mul_literals" (formula "8") (term "1,0,0,0"))
                              (rule "inEqSimp_or_tautInEq0" (formula "8") (term "0,0"))
                              (rule "add_literals" (formula "8") (term "1,1,0,0"))
                              (rule "qeq_literals" (formula "8") (term "1,0,0"))
                               (builtin "One Step Simplification" (formula "8"))
                              (rule "true_left" (formula "8"))
                              (rule "all_pull_out3" (formula "54") (term "0"))
                              (rule "all_pull_out3" (formula "45") (term "0"))
                              (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "27") (term "1,1,0"))
                               (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "60")) (ifInst ""  (formula "48")))
                              (rule "translateJavaSubInt" (formula "27") (term "3,0,1,1,1,0"))
                              (rule "polySimp_elimSub" (formula "27") (term "3,0,1,1,1,0"))
                              (rule "mul_literals" (formula "27") (term "1,3,0,1,1,1,0"))
                              (rule "polySimp_addComm0" (formula "27") (term "3,0,1,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "27") (term "1,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "27") (term "1,1,0,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "27") (term "0,1,0,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "27") (term "1,0,0,0,0,1,1,0"))
                              (rule "replace_known_left" (formula "27") (term "1,0,0,0,0,1,1,0") (ifseqformula "47"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "applyEq" (formula "27") (term "1,3,0,1,1,1,0") (ifseqformula "49"))
                              (rule "applyEq" (formula "27") (term "0,0,0,0,0,0,1,1,0") (ifseqformula "43"))
                              (rule "replace_known_right" (formula "27") (term "0,0,0,0,0,1,1,0") (ifseqformula "64"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "applyEq" (formula "27") (term "1,0,1,1,1,0") (ifseqformula "43"))
                              (rule "applyEq" (formula "27") (term "0,0,0,0,1,1,0") (ifseqformula "49"))
                              (rule "eqSymm" (formula "27") (term "0,0,0,1,1,0"))
                              (rule "replace_known_left" (formula "27") (term "0,0,0,1,1,0") (ifseqformula "42"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "applyEq" (formula "27") (term "1,1,0,0,1,1,0") (ifseqformula "49"))
                              (rule "replace_known_left" (formula "27") (term "1,0,0,1,1,0") (ifseqformula "52"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "applyEq" (formula "27") (term "0,0,1,0,1,1,0") (ifseqformula "43"))
                              (rule "inEqSimp_commuteGeq" (formula "27") (term "1,0,1,1,0"))
                              (rule "applyEq" (formula "27") (term "0,0,0,1,1,0") (ifseqformula "49"))
                              (rule "replace_known_left" (formula "27") (term "0,0,1,1,0") (ifseqformula "40"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "applyEq" (formula "27") (term "0,0,1,1,0") (ifseqformula "49"))
                              (rule "inEqSimp_commuteLeq" (formula "27") (term "0,1,1,0"))
                              (rule "replace_known_left" (formula "27") (term "0,1,1,0") (ifseqformula "53"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "commute_or_2" (formula "33") (term "0"))
                              (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "7") (term "0") (inst "i=i") (inst "j=j_1"))
                               (builtin "One Step Simplification" (formula "7"))
                              (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0,1,0"))
                              (rule "times_zero_1" (formula "7") (term "1,0,0,1,0,0,1,0"))
                              (rule "add_zero_right" (formula "7") (term "0,0,1,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
                              (rule "mul_literals" (formula "7") (term "1,0,0,1,0,0"))
                              (rule "add_zero_right" (formula "7") (term "0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "7") (term "1,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0,1,0"))
                              (rule "mul_literals" (formula "7") (term "1,1,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
                              (rule "mul_literals" (formula "7") (term "1,1,0,0"))
                              (rule "nnf_imp2or" (formula "7") (term "0"))
                              (rule "nnf_notAnd" (formula "7") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
                              (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
                              (rule "mul_literals" (formula "7") (term "1,0,0,0"))
                               (builtin "One Step Simplification" (formula "7"))
                              (rule "true_left" (formula "7"))
                              (rule "cnf_rightDist" (formula "31") (term "0"))
                              (rule "distr_forallAnd" (formula "31"))
                              (rule "andLeft" (formula "31"))
                              (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "26") (term "0,1,1,0") (inst "i=i") (inst "j=j_1"))
                               (builtin "One Step Simplification" (formula "26"))
                              (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,1,1,0"))
                              (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,1,1,0"))
                              (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,1,1,0"))
                              (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,1,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,1,0,1,1,0"))
                              (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,1,0,1,1,0"))
                              (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,1,0,1,1,0"))
                              (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,1,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,1,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "26") (term "1,0,1,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,1,1,0"))
                              (rule "mul_literals" (formula "26") (term "0,1,1,0,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,1,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,1,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,1,0,1,1,0"))
                              (rule "mul_literals" (formula "26") (term "0,1,1,0,0,1,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,1,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,1,0,1,1,0"))
                              (rule "nnf_imp2or" (formula "26") (term "0,1,1,0"))
                              (rule "nnf_notAnd" (formula "26") (term "0,0,1,1,0"))
                              (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,1,1,0"))
                              (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,1,1,0"))
                              (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,1,1,0"))
                              (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,1,1,0"))
                              (rule "mul_literals" (formula "26") (term "0,1,1,0,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,1,1,0"))
                              (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0,1,1,0"))
                              (rule "add_zero_right" (formula "26") (term "0,0,0,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "26") (term "1,0,0,0,1,1,0"))
                              (rule "nnf_imp2or" (formula "26") (term "0,1,0,1,1,0"))
                              (rule "nnf_notAnd" (formula "26") (term "0,0,1,0,1,1,0"))
                              (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,1,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,1,0,1,1,0"))
                              (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,1,0,1,1,0"))
                              (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,1,0,1,1,0"))
                              (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,1,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,1,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,1,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,1,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,1,0,1,1,0"))
                              (rule "mul_literals" (formula "26") (term "0,1,1,0,0,1,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,1,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,1,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,0,0,1,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,1,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,1,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0,1,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0,1,0,1,1,0"))
                              (rule "mul_literals" (formula "26") (term "0,1,0,0,0,1,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0,1,0,1,1,0"))
                              (rule "allLeft" (formula "7") (inst "t=add(Z(neglit(1(#))),
    int::final(buffers,
               de.wiesler.Buffers::$num_buckets))"))
                              (rule "inEqSimp_homoInEq1" (formula "7") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "7") (term "1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "7") (term "1,0,1,0"))
                              (rule "mul_literals" (formula "7") (term "0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "7") (term "0,1,0"))
                              (rule "polySimp_addComm0" (formula "7") (term "0,0,1,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,1,0"))
                              (rule "add_literals" (formula "7") (term "1,1,0,1,0"))
                              (rule "times_zero_1" (formula "7") (term "1,0,1,0"))
                              (rule "add_zero_right" (formula "7") (term "0,1,0"))
                              (rule "leq_literals" (formula "7") (term "1,0"))
                               (builtin "One Step Simplification" (formula "7"))
                              (rule "inEqSimp_homoInEq0" (formula "7") (term "0"))
                              (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "7") (term "1,0,0"))
                              (rule "mul_literals" (formula "7") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
                              (rule "add_literals" (formula "7") (term "0,0,0"))
                              (rule "add_zero_left" (formula "7") (term "0,0"))
                              (rule "inEqSimp_invertInEq1" (formula "7") (term "0"))
                              (rule "polySimp_mulLiterals" (formula "7") (term "0,0"))
                              (rule "times_zero_2" (formula "7") (term "1,0"))
                              (rule "polySimp_elimOne" (formula "7") (term "0,0"))
                              (rule "inEqSimp_contradInEq1" (formula "7") (term "0") (ifseqformula "41"))
                              (rule "qeq_literals" (formula "7") (term "0,0"))
                               (builtin "One Step Simplification" (formula "7"))
                              (rule "pullOutSelect" (formula "7") (term "1") (inst "selectSK=arr_3"))
                              (rule "simplifySelectOfAnon" (formula "7"))
                               (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "83")) (ifInst ""  (formula "15")))
                              (rule "elementOfArrayRangeConcrete" (formula "7") (term "0,0"))
                               (builtin "One Step Simplification" (formula "7"))
                              (rule "inEqSimp_homoInEq0" (formula "7") (term "0,0,0"))
                              (rule "times_zero_2" (formula "7") (term "1,0,0,0,0"))
                              (rule "add_zero_right" (formula "7") (term "0,0,0,0"))
                              (rule "inEqSimp_homoInEq0" (formula "7") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "7") (term "1,0,1,0,0"))
                              (rule "polySimp_rightDist" (formula "7") (term "1,0,1,0,0"))
                              (rule "mul_literals" (formula "7") (term "0,1,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "7") (term "0,1,0,0"))
                              (rule "polySimp_addComm0" (formula "7") (term "0,0,1,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,1,0,0"))
                              (rule "add_literals" (formula "7") (term "1,1,0,1,0,0"))
                              (rule "times_zero_1" (formula "7") (term "1,0,1,0,0"))
                              (rule "add_zero_right" (formula "7") (term "0,1,0,0"))
                              (rule "qeq_literals" (formula "7") (term "1,0,0"))
                               (builtin "One Step Simplification" (formula "7"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "0,0"))
                              (rule "mul_literals" (formula "7") (term "1,0,0"))
                              (rule "inEqSimp_subsumption1" (formula "7") (term "0,0") (ifseqformula "42"))
                              (rule "leq_literals" (formula "7") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "7"))
                              (rule "applyEqReverse" (formula "8") (term "1") (ifseqformula "7"))
                              (rule "hideAuxiliaryEq" (formula "7"))
                              (rule "allLeft" (formula "8") (inst "t=Z(0(#))"))
                              (rule "replaceKnownSelect_taclet1_0" (formula "8") (term "1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet01001201_4" (formula "8") (term "1,1"))
                              (rule "leq_literals" (formula "8") (term "0,0"))
                               (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "86")))
                              (rule "inEqSimp_commuteGeq" (formula "8"))
                              (rule "inEqSimp_contradInEq0" (formula "42") (ifseqformula "8"))
                              (rule "qeq_literals" (formula "42") (term "0"))
                               (builtin "One Step Simplification" (formula "42"))
                              (rule "closeFalse" (formula "42"))
                           )
                        )
                     )
                     (branch "Case 2"
                         (builtin "One Step Simplification" (formula "54"))
                         (builtin "Use Dependency Contract" (formula "54") (term "1") (ifInst ""  (formula "54") (term "0")) (contract "de.wiesler.Buffers[de.wiesler.Buffers::bufferLen(int)].JML accessible clause.0") (userinteraction))
                         (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "51")) (ifInst ""  (formula "17")) (ifInst ""  (formula "12")) (ifInst ""  (formula "34")) (ifInst ""  (formula "1")) (ifInst ""  (formula "19")))
                        (rule "eqSymm" (formula "55"))
                        (rule "replace_known_right" (formula "35") (term "1") (ifseqformula "55"))
                         (builtin "One Step Simplification" (formula "35"))
                        (rule "notLeft" (formula "35"))
                        (rule "polySimp_homoEq" (formula "10") (term "1,0"))
                        (rule "polySimp_homoEq" (formula "10") (term "0,1,0,1,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,1,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,1,1,0,1,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,0,0,1,1,1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,0,1,0"))
                        (rule "polySimp_mulAssoc" (formula "10") (term "0,1,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,1,1,0,1,0"))
                        (rule "polySimp_addComm0" (formula "10") (term "0,0,0,0,1,1,0,1,0"))
                        (rule "disjointDefinition" (formula "35") (term "1"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0,1,0"))
                        (rule "disjointWithSingleton1" (formula "35") (term "1"))
                        (rule "inEqSimp_ltToLeq" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "6") (term "0"))
                        (rule "add_zero_right" (formula "6") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
                        (rule "elementOfArrayRangeConcrete" (formula "35") (term "0,1"))
                        (rule "replace_known_right" (formula "35") (term "0,0,0,1") (ifseqformula "42"))
                         (builtin "One Step Simplification" (formula "35"))
                        (rule "inEqSimp_leqRight" (formula "35"))
                        (rule "add_zero_right" (formula "1") (term "0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                        (rule "inEqSimp_homoInEq1" (formula "22"))
                        (rule "polySimp_addComm1" (formula "22") (term "0"))
                        (rule "inEqSimp_homoInEq0" (formula "6") (term "0,0,0"))
                        (rule "times_zero_2" (formula "6") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "6") (term "0,0,0,0"))
                        (rule "polySimp_sepNegMonomial" (formula "11") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0"))
                        (rule "polySimp_elimOne" (formula "11") (term "0,1,0"))
                        (rule "polySimp_sepNegMonomial" (formula "11") (term "0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "11") (term "0,0,0,1,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "0,0"))
                        (rule "polySimp_elimOne" (formula "7") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "22"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1"))
                        (rule "polySimp_rightDist" (formula "22") (term "1"))
                        (rule "mul_literals" (formula "22") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "22") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "0,0,0"))
                        (rule "mul_literals" (formula "6") (term "1,0,0,0"))
                        (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq0" (formula "4") (term "0"))
                        (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0"))
                        (rule "add_literals" (formula "4") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "4") (term "1,0,0"))
                        (rule "add_literals" (formula "4") (term "0,0"))
                        (rule "qeq_literals" (formula "4") (term "0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "inEqSimp_contradInEq0" (formula "6") (term "0") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "6") (term "0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "inEqSimp_contradInEq0" (formula "5") (term "0,0,0") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "5") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "hideAuxiliaryEq" (formula "5"))
                        (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "3"))
                        (rule "qeq_literals" (formula "1") (term "0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
               )
               (branch "Case 2"
                   (builtin "One Step Simplification" (formula "54"))
                  (rule "closeTrue" (formula "54"))
               )
            )
            (branch "Precondition"
               (rule "andRight" (formula "53"))
               (branch "Case 1"
                  (rule "andRight" (formula "53"))
                  (branch "Case 1"
                      (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "18")))
                     (rule "closeTrue" (formula "53"))
                  )
                  (branch "Case 2"
                      (builtin "One Step Simplification" (formula "53"))
                     (rule "wellFormedAnon" (formula "53"))
                     (rule "replace_known_left" (formula "53") (term "0") (ifseqformula "12"))
                      (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "11")))
                     (rule "closeTrue" (formula "53"))
                  )
               )
               (branch "Case 2"
                  (rule "andRight" (formula "53"))
                  (branch "Case 1"
                     (rule "andRight" (formula "53"))
                     (branch "Case 1"
                         (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "52")))
                        (rule "closeTrue" (formula "53"))
                     )
                     (branch "Case 2"
                         (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "13")))
                        (rule "closeTrue" (formula "53"))
                     )
                  )
                  (branch "Case 2"
                      (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "14")))
                     (rule "closeTrue" (formula "53"))
                  )
               )
            )
            (branch "Usage"
                (builtin "One Step Simplification" (formula "34"))
                (builtin "One Step Simplification" (formula "54"))
               (rule "andLeft" (formula "34"))
               (rule "andLeft" (formula "34"))
               (rule "andLeft" (formula "35"))
               (rule "replace_known_left" (formula "37") (term "0") (ifseqformula "34"))
                (builtin "One Step Simplification" (formula "37"))
               (rule "true_left" (formula "37"))
               (rule "pullOutSelect" (formula "35") (term "0") (inst "selectSK=arr_2"))
               (rule "simplifySelectOfAnon" (formula "35"))
                (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "54")) (ifInst ""  (formula "16")))
               (rule "eqSymm" (formula "36"))
               (rule "applyEqReverse" (formula "35") (term "1") (ifseqformula "36"))
               (rule "hideAuxiliaryEq" (formula "36"))
               (rule "elementOfArrayRangeConcrete" (formula "35") (term "0,0"))
                (builtin "One Step Simplification" (formula "35"))
               (rule "inEqSimp_commuteLeq" (formula "35") (term "1,0,0"))
               (rule "replace_known_left" (formula "35") (term "1,0,0") (ifseqformula "3"))
                (builtin "One Step Simplification" (formula "35"))
               (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0"))
               (rule "replace_known_left" (formula "35") (term "0,0") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "35"))
               (rule "elim_double_block_2" (formula "56") (term "1"))
               (rule "ifUnfold" (formula "56") (term "1") (inst "#boolv=x_2"))
               (rule "variableDeclaration" (formula "56") (term "1") (newnames "x_6"))
               (rule "inequality_comparison_simple" (formula "56") (term "1"))
                (builtin "One Step Simplification" (formula "56"))
               (rule "replace_known_left" (formula "56") (term "0,0,1,0") (ifseqformula "34"))
                (builtin "One Step Simplification" (formula "56"))
               (rule "onlyCreatedObjectsAreReferencedFinal" (formula "50") (term "1") (ifseqformula "12") (ifseqformula "17"))
               (rule "onlyCreatedObjectsAreReferencedFinal" (formula "52") (term "1") (ifseqformula "13") (ifseqformula "14"))
               (rule "onlyCreatedObjectsAreReferencedFinal" (formula "43") (term "0,0") (ifseqformula "14") (ifseqformula "15"))
               (rule "onlyCreatedObjectsAreReferencedFinal" (formula "45") (term "0") (ifseqformula "15") (ifseqformula "20"))
               (rule "ifSplit" (formula "60"))
               (branch "if x_6 true"
                   (builtin "One Step Simplification" (formula "61"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "if x_6 false"
                   (builtin "One Step Simplification" (formula "61"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "blockEmpty" (formula "60") (term "1"))
                  (rule "variableDeclarationAssign" (formula "60") (term "1"))
                  (rule "variableDeclaration" (formula "60") (term "1") (newnames "size"))
                  (rule "compound_addition_2" (formula "60") (term "1") (inst "#v0=x_2") (inst "#v1=x_3"))
                  (rule "variableDeclarationAssign" (formula "60") (term "1"))
                  (rule "variableDeclaration" (formula "60") (term "1") (newnames "x_7"))
                  (rule "assignment_array2" (formula "60"))
                  (branch "Normal Execution (_bucket_starts != null)"
                      (builtin "One Step Simplification" (formula "60"))
                     (rule "replaceKnownSelect_taclet21201_2" (formula "60") (term "0,1,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet21201_3" (formula "60") (term "0,1,0"))
                     (rule "variableDeclarationAssign" (formula "60") (term "1"))
                     (rule "variableDeclaration" (formula "60") (term "1") (newnames "x_8"))
                      (builtin "Use Operation Contract" (formula "60") (newnames "heapBefore_len,result_21,exc_27") (contract "de.wiesler.Buffers[de.wiesler.Buffers::len(int)].JML normal_behavior operation contract.0"))
                     (branch "Post (len)"
                         (builtin "One Step Simplification" (formula "61"))
                         (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "37")))
                        (rule "andLeft" (formula "41"))
                        (rule "andLeft" (formula "42"))
                        (rule "eqSymm" (formula "42"))
                        (rule "assignment" (formula "62") (term "1"))
                         (builtin "One Step Simplification" (formula "62"))
                        (rule "applyEq" (formula "42") (term "0") (ifseqformula "40"))
                        (rule "applyEq" (formula "40") (term "1") (ifseqformula "42"))
                        (rule "assignmentAdditionInt" (formula "62") (term "1"))
                         (builtin "One Step Simplification" (formula "62"))
                        (rule "translateJavaAddInt" (formula "62") (term "0,1,0"))
                        (rule "polySimp_addComm0" (formula "62") (term "0,1,0"))
                        (rule "assignment_to_primitive_array_component" (formula "62"))
                        (branch "Normal Execution (_bucket_starts != null)"
                            (builtin "One Step Simplification" (formula "62"))
                           (rule "compound_assignment_op_plus" (formula "62") (term "1"))
                           (rule "compound_int_cast_expression" (formula "62") (term "1") (inst "#v=x_2"))
                           (rule "variableDeclarationAssign" (formula "62") (term "1"))
                           (rule "variableDeclaration" (formula "62") (term "1") (newnames "x_9"))
                           (rule "remove_parentheses_right" (formula "62") (term "1"))
                           (rule "compound_addition_2" (formula "62") (term "1") (inst "#v0=x_10") (inst "#v1=x_11"))
                           (rule "variableDeclarationAssign" (formula "62") (term "1"))
                           (rule "variableDeclaration" (formula "62") (term "1") (newnames "x_10"))
                           (rule "assignment" (formula "62") (term "1"))
                            (builtin "One Step Simplification" (formula "62"))
                           (rule "variableDeclarationAssign" (formula "62") (term "1"))
                           (rule "variableDeclaration" (formula "62") (term "1") (newnames "x_11"))
                           (rule "remove_parentheses_right" (formula "62") (term "1"))
                           (rule "assignment" (formula "62") (term "1"))
                            (builtin "One Step Simplification" (formula "62"))
                           (rule "assignmentAdditionInt" (formula "62") (term "1"))
                            (builtin "One Step Simplification" (formula "62"))
                           (rule "translateJavaAddInt" (formula "62") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "62") (term "0,1,0"))
                           (rule "polySimp_addComm0" (formula "62") (term "0,0,1,0"))
                           (rule "widening_identity_cast_5" (formula "62") (term "1"))
                           (rule "assignment" (formula "62") (term "1"))
                            (builtin "One Step Simplification" (formula "62"))
                            (builtin "Block Contract (Internal)" (formula "62") (newnames "exc_28,heap_Before_BLOCK_1,savedHeap_Before_BLOCK_1,o,f"))
                           (branch "Validity"
                               (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "22")) (ifInst ""  (formula "18")) (ifInst ""  (formula "62")))
                               (builtin "One Step Simplification" (formula "63"))
                              (rule "andLeft" (formula "43"))
                              (rule "eqSymm" (formula "64") (term "0,0,1,0,1"))
                              (rule "dismissNonSelectedField" (formula "44") (term "0"))
                               (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "17")))
                              (rule "true_left" (formula "44"))
                              (rule "variableDeclarationAssign" (formula "63") (term "1"))
                              (rule "variableDeclaration" (formula "63") (term "1") (newnames "exc_28_1"))
                              (rule "assignment" (formula "63") (term "1"))
                               (builtin "One Step Simplification" (formula "63"))
                              (rule "emptyStatement" (formula "63") (term "1"))
                              (rule "emptyStatement" (formula "63") (term "1"))
                              (rule "tryEmpty" (formula "63") (term "1"))
                              (rule "blockEmptyLabel" (formula "63") (term "1"))
                              (rule "blockEmpty" (formula "63") (term "1"))
                              (rule "methodCallEmpty" (formula "63") (term "1"))
                              (rule "emptyModality" (formula "63") (term "1"))
                              (rule "andRight" (formula "63"))
                              (branch "Case 1"
                                 (rule "andRight" (formula "63"))
                                 (branch "Case 1"
                                     (builtin "One Step Simplification" (formula "63"))
                                    (rule "closeTrue" (formula "63"))
                                 )
                                 (branch "Case 2"
                                     (builtin "One Step Simplification" (formula "63"))
                                    (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "63") (term "1,0") (inst "i=i") (userinteraction))
                                    (rule "bsum_positive1" (formula "63") (term "1,0") (userinteraction))
                                    (rule "Contract_axiom_for_bufferLen_in_Buffers" (formula "43") (term "0") (userinteraction))
                                     (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "6")) (ifInst ""  (formula "24")) (ifInst ""  (formula "17")) (ifInst ""  (formula "22")) (ifInst ""  (formula "61")) (ifInst ""  (formula "24")))
                                    (rule "polySimp_homoEq" (formula "15") (term "1,0"))
                                    (rule "polySimp_homoEq" (formula "15") (term "0,1,0,1,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "1,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,1,1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "15") (term "1,0,1,0"))
                                    (rule "polySimp_mulAssoc" (formula "15") (term "0,1,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "0,0,1,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "15") (term "0,1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,1,1,0,1,0"))
                                    (rule "mul_literals" (formula "15") (term "0,1,0,0,0,1,1,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "15") (term "0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,1,0,1,0"))
                                    (rule "polySimp_addComm0" (formula "15") (term "0,0,0,0,1,0,1,0"))
                                    (rule "inEqSimp_geqRight" (formula "65"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "1") (term "0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                    (rule "inEqSimp_ltToLeq" (formula "12") (term "0"))
                                    (rule "add_zero_right" (formula "12") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "7"))
                                    (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "7") (term "0"))
                                    (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "44") (term "0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "44") (term "0"))
                                    (rule "replace_known_left" (formula "44") (term "0") (ifseqformula "8"))
                                     (builtin "One Step Simplification" (formula "44"))
                                    (rule "andLeft" (formula "44"))
                                    (rule "inEqSimp_homoInEq1" (formula "27"))
                                    (rule "polySimp_addComm1" (formula "27") (term "0"))
                                    (rule "inEqSimp_homoInEq0" (formula "11") (term "0,0,0"))
                                    (rule "times_zero_2" (formula "11") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "11") (term "0,0,0,0"))
                                    (rule "applyEq" (formula "44") (term "0") (ifseqformula "46"))
                                    (rule "applyEq" (formula "45") (term "0") (ifseqformula "46"))
                                    (rule "polySimp_sepNegMonomial" (formula "16") (term "0,0,1,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0,1,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "16") (term "0,0,0,1,0,1,0"))
                                    (rule "polySimp_sepNegMonomial" (formula "16") (term "1,0"))
                                    (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0"))
                                    (rule "polySimp_elimOne" (formula "16") (term "0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "mul_literals" (formula "1") (term "0,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "0,0"))
                                    (rule "polySimp_elimOne" (formula "12") (term "0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                                    (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                                    (rule "polySimp_elimOne" (formula "7") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "15") (term "0,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0"))
                                    (rule "mul_literals" (formula "16") (term "0,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "27"))
                                    (rule "polySimp_mulComm0" (formula "27") (term "1"))
                                    (rule "polySimp_rightDist" (formula "27") (term "1"))
                                    (rule "mul_literals" (formula "27") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "27") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "27") (term "1,1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0"))
                                    (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                                    (rule "inEqSimp_subsumption1" (formula "11") (term "1,0,0") (ifseqformula "9"))
                                    (rule "inEqSimp_homoInEq0" (formula "11") (term "0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                                    (rule "polySimp_addComm0" (formula "11") (term "0,0,0,1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "11") (term "1,1,0,0,1,0,0"))
                                    (rule "times_zero_1" (formula "11") (term "1,0,0,1,0,0"))
                                    (rule "add_zero_right" (formula "11") (term "0,0,1,0,0"))
                                    (rule "qeq_literals" (formula "11") (term "0,1,0,0"))
                                     (builtin "One Step Simplification" (formula "11"))
                                    (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
                                    (rule "inEqSimp_homoInEq0" (formula "9") (term "0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0"))
                                    (rule "add_literals" (formula "9") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "9") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "9") (term "0,0"))
                                    (rule "qeq_literals" (formula "9") (term "0"))
                                     (builtin "One Step Simplification" (formula "9"))
                                    (rule "true_left" (formula "9"))
                                    (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "26"))
                                    (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                                    (rule "mul_literals" (formula "7") (term "0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "7") (term "0"))
                                    (rule "polySimp_addComm1" (formula "7") (term "0,0"))
                                    (rule "add_literals" (formula "7") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                                    (rule "polySimp_mulComm0" (formula "7") (term "1"))
                                    (rule "polySimp_rightDist" (formula "7") (term "1"))
                                    (rule "mul_literals" (formula "7") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "7") (term "1,1"))
                                    (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                                    (rule "times_zero_1" (formula "2") (term "0,0"))
                                    (rule "add_zero_left" (formula "2") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                    (rule "polySimp_elimOne" (formula "2") (term "0"))
                                    (rule "inEqSimp_contradInEq0" (formula "45") (ifseqformula "2"))
                                    (rule "qeq_literals" (formula "45") (term "0"))
                                     (builtin "One Step Simplification" (formula "45"))
                                    (rule "closeFalse" (formula "45"))
                                 )
                              )
                              (branch "Case 2"
                                  (builtin "One Step Simplification" (formula "63"))
                                 (rule "closeTrue" (formula "63"))
                              )
                           )
                           (branch "Precondition"
                              (rule "andRight" (formula "62"))
                              (branch "Case 1"
                                 (rule "andRight" (formula "62"))
                                 (branch "Case 1"
                                     (builtin "One Step Simplification" (formula "62") (ifInst ""  (formula "22")))
                                    (rule "closeTrue" (formula "62"))
                                 )
                                 (branch "Case 2"
                                     (builtin "One Step Simplification" (formula "62"))
                                    (rule "wellFormedStorePrimitiveArray" (formula "62"))
                                    (rule "wellFormedAnon" (formula "62"))
                                    (rule "replace_known_left" (formula "62") (term "1") (ifseqformula "15"))
                                     (builtin "One Step Simplification" (formula "62") (ifInst ""  (formula "16")))
                                    (rule "closeTrue" (formula "62"))
                                 )
                              )
                              (branch "Case 2"
                                 (rule "andRight" (formula "62"))
                                 (branch "Case 1"
                                    (rule "andRight" (formula "62"))
                                    (branch "Case 1"
                                        (builtin "One Step Simplification" (formula "62") (ifInst ""  (formula "61")))
                                       (rule "closeTrue" (formula "62"))
                                    )
                                    (branch "Case 2"
                                        (builtin "One Step Simplification" (formula "62"))
                                       (rule "polySimp_homoEq" (formula "14") (term "1,0"))
                                       (rule "polySimp_homoEq" (formula "14") (term "0,1,0,1,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "14") (term "1,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,1,1,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "14") (term "1,0,1,0"))
                                       (rule "polySimp_mulAssoc" (formula "14") (term "0,1,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "14") (term "0,0,1,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "14") (term "0,1,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,1,1,0,1,0"))
                                       (rule "mul_literals" (formula "14") (term "0,1,0,0,0,1,1,0,1,0"))
                                       (rule "dismissNonSelectedField" (formula "62") (term "0"))
                                        (builtin "One Step Simplification" (formula "62") (ifInst ""  (formula "17")))
                                       (rule "closeTrue" (formula "62"))
                                    )
                                 )
                                 (branch "Case 2"
                                     (builtin "One Step Simplification" (formula "62") (ifInst ""  (formula "18")))
                                    (rule "closeTrue" (formula "62"))
                                 )
                              )
                           )
                           (branch "Usage"
                               (builtin "One Step Simplification" (formula "63"))
                               (builtin "One Step Simplification" (formula "43"))
                              (rule "andLeft" (formula "43"))
                              (rule "andLeft" (formula "43"))
                              (rule "replace_known_left" (formula "45") (term "0") (ifseqformula "43"))
                               (builtin "One Step Simplification" (formula "45"))
                              (rule "true_left" (formula "45"))
                              (rule "elim_double_block_2" (formula "64") (term "1"))
                              (rule "ifUnfold" (formula "64") (term "1") (inst "#boolv=x_2"))
                              (rule "variableDeclaration" (formula "64") (term "1") (newnames "x_12"))
                              (rule "inequality_comparison_simple" (formula "64") (term "1"))
                               (builtin "One Step Simplification" (formula "64"))
                              (rule "replace_known_left" (formula "64") (term "0,0,1,0") (ifseqformula "43"))
                               (builtin "One Step Simplification" (formula "64"))
                              (rule "ifSplit" (formula "64"))
                              (branch "if x_12 true"
                                  (builtin "One Step Simplification" (formula "65"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "if x_12 false"
                                  (builtin "One Step Simplification" (formula "65"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "blockEmpty" (formula "64") (term "1"))
                                 (rule "emptyStatement" (formula "64") (term "1"))
                                 (rule "blockEmpty" (formula "64") (term "1"))
                                 (rule "preincrement" (formula "64") (term "1"))
                                 (rule "compound_int_cast_expression" (formula "64") (term "1") (inst "#v=x_2"))
                                 (rule "variableDeclarationAssign" (formula "64") (term "1"))
                                 (rule "variableDeclaration" (formula "64") (term "1") (newnames "x_13"))
                                 (rule "remove_parentheses_right" (formula "64") (term "1"))
                                 (rule "assignmentAdditionInt" (formula "64") (term "1"))
                                  (builtin "One Step Simplification" (formula "64"))
                                 (rule "translateJavaAddInt" (formula "64") (term "0,1,0"))
                                 (rule "polySimp_addComm0" (formula "64") (term "0,1,0"))
                                 (rule "widening_identity_cast_5" (formula "64") (term "1"))
                                 (rule "assignment" (formula "64") (term "1"))
                                  (builtin "One Step Simplification" (formula "64"))
                                 (rule "blockEmpty" (formula "64") (term "1"))
                                 (rule "lsContinue" (formula "64") (term "1"))
                                  (builtin "One Step Simplification" (formula "64"))
                                 (rule "andRight" (formula "64"))
                                 (branch "Case 1"
                                    (rule "andRight" (formula "64"))
                                    (branch "Case 1"
                                       (rule "andRight" (formula "64"))
                                       (branch "Case 1"
                                          (rule "andRight" (formula "64"))
                                          (branch "Case 1"
                                             (rule "andRight" (formula "64"))
                                             (branch "Case 1"
                                                (rule "andRight" (formula "64"))
                                                (branch "Case 1"
                                                   (rule "andRight" (formula "64"))
                                                   (branch "Case 1"
                                                      (rule "andRight" (formula "64"))
                                                      (branch "Case 1"
                                                         (rule "polySimp_homoEq" (formula "14") (term "1,0"))
                                                         (rule "polySimp_homoEq" (formula "14") (term "0,1,0,1,0,1,0"))
                                                         (rule "polySimp_mulComm0" (formula "14") (term "1,0,1,0"))
                                                         (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,1,1,0,1,0"))
                                                         (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,1,1,0,1,0"))
                                                         (rule "mul_literals" (formula "14") (term "0,1,0,0,1,1,1,0,1,0"))
                                                         (rule "polySimp_rightDist" (formula "14") (term "1,0,1,0"))
                                                         (rule "polySimp_mulAssoc" (formula "14") (term "0,1,0,1,0"))
                                                         (rule "polySimp_mulComm0" (formula "14") (term "0,0,1,0,1,0"))
                                                         (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0,1,0"))
                                                         (rule "polySimp_elimOne" (formula "14") (term "0,1,0,1,0"))
                                                         (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,1,1,0,1,0"))
                                                         (rule "polySimp_addComm0" (formula "14") (term "0,0,0,0,1,1,0,1,0"))
                                                         (rule "polySimp_addAssoc" (formula "14") (term "0,1,0"))
                                                         (rule "inEqSimp_geqRight" (formula "64"))
                                                         (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                                         (rule "add_zero_right" (formula "1") (term "0,0"))
                                                         (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                                         (rule "add_literals" (formula "1") (term "0,0"))
                                                         (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                                                         (rule "inEqSimp_ltToLeq" (formula "6"))
                                                         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                                                         (rule "polySimp_addComm1" (formula "6") (term "0"))
                                                         (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
                                                         (rule "inEqSimp_ltToLeq" (formula "11") (term "0"))
                                                         (rule "add_zero_right" (formula "11") (term "0,0"))
                                                         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                                                         (rule "inEqSimp_homoInEq1" (formula "26"))
                                                         (rule "polySimp_addComm1" (formula "26") (term "0"))
                                                         (rule "inEqSimp_homoInEq0" (formula "10") (term "0,0,0"))
                                                         (rule "times_zero_2" (formula "10") (term "1,0,0,0,0"))
                                                         (rule "add_zero_right" (formula "10") (term "0,0,0,0"))
                                                         (rule "polySimp_sepNegMonomial" (formula "15") (term "1,0"))
                                                         (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0"))
                                                         (rule "polySimp_elimOne" (formula "15") (term "0,1,0"))
                                                         (rule "polySimp_sepNegMonomial" (formula "15") (term "0,0,1,0"))
                                                         (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,1,0"))
                                                         (rule "polySimp_elimOne" (formula "15") (term "0,0,0,1,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "45"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                         (rule "mul_literals" (formula "1") (term "1"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
                                                         (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
                                                         (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
                                                         (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0"))
                                                         (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                                                         (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                                         (rule "polySimp_elimOne" (formula "6") (term "0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
                                                         (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0"))
                                                         (rule "mul_literals" (formula "15") (term "0,1,0,0,0"))
                                                         (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0"))
                                                         (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0"))
                                                         (rule "polySimp_mulLiterals" (formula "11") (term "0,0"))
                                                         (rule "polySimp_elimOne" (formula "11") (term "0,0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "26"))
                                                         (rule "polySimp_mulComm0" (formula "26") (term "1"))
                                                         (rule "polySimp_rightDist" (formula "26") (term "1"))
                                                         (rule "mul_literals" (formula "26") (term "0,1"))
                                                         (rule "polySimp_mulLiterals" (formula "26") (term "1,1"))
                                                         (rule "polySimp_elimOne" (formula "26") (term "1,1"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0,0"))
                                                         (rule "mul_literals" (formula "10") (term "1,0,0,0"))
                                                         (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "1"))
                                                         (rule "qeq_literals" (formula "7") (term "0"))
                                                          (builtin "One Step Simplification" (formula "7"))
                                                         (rule "closeFalse" (formula "7"))
                                                      )
                                                      (branch "Case 2"
                                                         (rule "polySimp_homoEq" (formula "14") (term "0,1,0,1,0"))
                                                         (rule "polySimp_homoEq" (formula "14") (term "1,0"))
                                                         (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,1,0,1,0"))
                                                         (rule "polySimp_mulComm0" (formula "14") (term "1,0,1,0"))
                                                         (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,1,1,0,1,0"))
                                                         (rule "mul_literals" (formula "14") (term "0,1,0,0,1,1,1,0,1,0"))
                                                         (rule "polySimp_rightDist" (formula "14") (term "1,0,1,0"))
                                                         (rule "polySimp_mulAssoc" (formula "14") (term "0,1,0,1,0"))
                                                         (rule "polySimp_mulComm0" (formula "14") (term "0,0,1,0,1,0"))
                                                         (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0,1,0"))
                                                         (rule "polySimp_elimOne" (formula "14") (term "0,1,0,1,0"))
                                                         (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,1,1,0,1,0"))
                                                         (rule "polySimp_addComm0" (formula "14") (term "0,0,0,0,1,1,0,1,0"))
                                                         (rule "polySimp_addAssoc" (formula "14") (term "0,1,0"))
                                                         (rule "inEqSimp_geqRight" (formula "64"))
                                                         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                         (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0,0"))
                                                         (rule "inEqSimp_ltToLeq" (formula "6"))
                                                         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                                                         (rule "polySimp_addComm1" (formula "6") (term "0"))
                                                         (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
                                                         (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                                                         (rule "inEqSimp_ltToLeq" (formula "11") (term "0"))
                                                         (rule "add_zero_right" (formula "11") (term "0,0"))
                                                         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                                                         (rule "inEqSimp_homoInEq0" (formula "10") (term "0,0,0"))
                                                         (rule "times_zero_2" (formula "10") (term "1,0,0,0,0"))
                                                         (rule "add_zero_right" (formula "10") (term "0,0,0,0"))
                                                         (rule "inEqSimp_homoInEq1" (formula "26"))
                                                         (rule "polySimp_addComm1" (formula "26") (term "0"))
                                                         (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "31"))
                                                         (rule "polySimp_sepNegMonomial" (formula "15") (term "1,0"))
                                                         (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0"))
                                                         (rule "polySimp_elimOne" (formula "15") (term "0,1,0"))
                                                         (rule "polySimp_sepNegMonomial" (formula "15") (term "0,0,1,0"))
                                                         (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,1,0"))
                                                         (rule "polySimp_elimOne" (formula "15") (term "0,0,0,1,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "45"))
                                                         (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                                                         (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                                         (rule "polySimp_elimOne" (formula "6") (term "0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
                                                         (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0"))
                                                         (rule "mul_literals" (formula "15") (term "0,1,0,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0"))
                                                         (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
                                                         (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
                                                         (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
                                                         (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0"))
                                                         (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0"))
                                                         (rule "polySimp_mulLiterals" (formula "11") (term "0,0"))
                                                         (rule "polySimp_elimOne" (formula "11") (term "0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0,0"))
                                                         (rule "mul_literals" (formula "10") (term "1,0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "26"))
                                                         (rule "polySimp_mulComm0" (formula "26") (term "1"))
                                                         (rule "polySimp_rightDist" (formula "26") (term "1"))
                                                         (rule "mul_literals" (formula "26") (term "0,1"))
                                                         (rule "polySimp_mulLiterals" (formula "26") (term "1,1"))
                                                         (rule "polySimp_elimOne" (formula "26") (term "1,1"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                         (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                         (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                         (rule "inEqSimp_subsumption1" (formula "10") (term "1,0,0") (ifseqformula "6"))
                                                         (rule "inEqSimp_homoInEq0" (formula "10") (term "0,1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                                                         (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
                                                         (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
                                                         (rule "polySimp_addComm1" (formula "10") (term "0,0,0,1,0,0"))
                                                         (rule "add_literals" (formula "10") (term "0,0,0,0,1,0,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1,0,0"))
                                                         (rule "add_literals" (formula "10") (term "1,1,0,0,1,0,0"))
                                                         (rule "times_zero_1" (formula "10") (term "1,0,0,1,0,0"))
                                                         (rule "add_zero_right" (formula "10") (term "0,0,1,0,0"))
                                                         (rule "qeq_literals" (formula "10") (term "0,1,0,0"))
                                                          (builtin "One Step Simplification" (formula "10"))
                                                         (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "1"))
                                                         (rule "andLeft" (formula "6"))
                                                         (rule "inEqSimp_homoInEq1" (formula "6"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "6") (term "0"))
                                                         (rule "add_literals" (formula "6") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "6") (term "1,0"))
                                                         (rule "add_zero_right" (formula "6") (term "0"))
                                                         (rule "leq_literals" (formula "6"))
                                                         (rule "closeFalse" (formula "6"))
                                                      )
                                                   )
                                                   (branch "Case 2"
                                                      (rule "impRight" (formula "64"))
                                                      (rule "andRight" (formula "65"))
                                                      (branch "Case 1"
                                                         (rule "polySimp_homoEq" (formula "15") (term "1,0"))
                                                         (rule "polySimp_homoEq" (formula "15") (term "0,1,0,1,0,1,0"))
                                                         (rule "polySimp_mulComm0" (formula "15") (term "1,0,1,0"))
                                                         (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,1,1,0,1,0"))
                                                         (rule "polySimp_rightDist" (formula "15") (term "1,0,1,0"))
                                                         (rule "polySimp_mulAssoc" (formula "15") (term "0,1,0,1,0"))
                                                         (rule "polySimp_mulComm0" (formula "15") (term "0,0,1,0,1,0"))
                                                         (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,1,0"))
                                                         (rule "polySimp_elimOne" (formula "15") (term "0,1,0,1,0"))
                                                         (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,1,1,0,1,0"))
                                                         (rule "mul_literals" (formula "15") (term "0,1,0,0,0,1,1,0,1,0"))
                                                         (rule "polySimp_addAssoc" (formula "65") (term "0,2,0"))
                                                         (rule "add_literals" (formula "65") (term "0,0,2,0"))
                                                         (rule "add_zero_left" (formula "65") (term "0,2,0"))
                                                         (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,1,1,0,1,0"))
                                                         (rule "polySimp_addComm0" (formula "15") (term "0,0,0,0,1,1,0,1,0"))
                                                         (rule "polySimp_addAssoc" (formula "15") (term "0,1,0"))
                                                         (rule "inEqSimp_ltToLeq" (formula "11") (term "0"))
                                                         (rule "add_zero_right" (formula "11") (term "0,0"))
                                                         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                                                         (rule "inEqSimp_ltToLeq" (formula "1"))
                                                         (rule "add_zero_right" (formula "1") (term "0"))
                                                         (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                                                         (rule "mul_literals" (formula "1") (term "0,1,0"))
                                                         (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                                         (rule "add_literals" (formula "1") (term "0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0"))
                                                         (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                                                         (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
                                                         (rule "inEqSimp_ltToLeq" (formula "6"))
                                                         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                                                         (rule "polySimp_addComm1" (formula "6") (term "0"))
                                                         (rule "inEqSimp_leqRight" (formula "65"))
                                                         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                         (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                         (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                                                         (rule "inEqSimp_homoInEq0" (formula "11") (term "0,0,0"))
                                                         (rule "mul_literals" (formula "11") (term "1,0,0,0,0"))
                                                         (rule "add_zero_right" (formula "11") (term "0,0,0,0"))
                                                         (rule "inEqSimp_homoInEq1" (formula "27"))
                                                         (rule "polySimp_addComm1" (formula "27") (term "0"))
                                                         (rule "polySimp_sepNegMonomial" (formula "16") (term "1,0"))
                                                         (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0"))
                                                         (rule "polySimp_elimOne" (formula "16") (term "0,1,0"))
                                                         (rule "polySimp_sepNegMonomial" (formula "16") (term "0,0,1,0"))
                                                         (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0,1,0"))
                                                         (rule "polySimp_elimOne" (formula "16") (term "0,0,0,1,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "46"))
                                                         (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0"))
                                                         (rule "polySimp_mulLiterals" (formula "12") (term "0,0"))
                                                         (rule "polySimp_elimOne" (formula "12") (term "0,0"))
                                                         (rule "inEqSimp_invertInEq0" (formula "2"))
                                                         (rule "mul_literals" (formula "2") (term "1"))
                                                         (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                         (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
                                                         (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
                                                         (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
                                                         (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
                                                         (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0"))
                                                         (rule "mul_literals" (formula "15") (term "0,1,0,0,0"))
                                                         (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0"))
                                                         (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                                                         (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                                         (rule "polySimp_elimOne" (formula "6") (term "0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                                         (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                                         (rule "polySimp_rightDist" (formula "1") (term "1"))
                                                         (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                                         (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                                         (rule "polySimp_rightDist" (formula "1") (term "0,1"))
                                                         (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1"))
                                                         (rule "polySimp_elimOne" (formula "1") (term "1,0,1"))
                                                         (rule "polySimp_rightDist" (formula "1") (term "0,0,1"))
                                                         (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,1"))
                                                         (rule "mul_literals" (formula "1") (term "0,0,0,1"))
                                                         (rule "polySimp_elimOne" (formula "1") (term "1,0,0,1"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0,0"))
                                                         (rule "mul_literals" (formula "10") (term "1,0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "26"))
                                                         (rule "polySimp_mulComm0" (formula "26") (term "1"))
                                                         (rule "polySimp_rightDist" (formula "26") (term "1"))
                                                         (rule "polySimp_mulLiterals" (formula "26") (term "1,1"))
                                                         (rule "mul_literals" (formula "26") (term "0,1"))
                                                         (rule "polySimp_elimOne" (formula "26") (term "1,1"))
                                                         (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "6"))
                                                         (rule "inEqSimp_homoInEq0" (formula "8") (term "0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0"))
                                                         (rule "add_literals" (formula "8") (term "1,1,0,0"))
                                                         (rule "times_zero_1" (formula "8") (term "1,0,0"))
                                                         (rule "add_zero_right" (formula "8") (term "0,0"))
                                                         (rule "qeq_literals" (formula "8") (term "0"))
                                                          (builtin "One Step Simplification" (formula "8"))
                                                         (rule "true_left" (formula "8"))
                                                         (rule "inEqSimp_subsumption1" (formula "9") (term "1,0,0") (ifseqformula "6"))
                                                         (rule "inEqSimp_homoInEq0" (formula "9") (term "0,1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                                                         (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                                                         (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                                                         (rule "polySimp_addComm1" (formula "9") (term "0,0,0,1,0,0"))
                                                         (rule "add_literals" (formula "9") (term "0,0,0,0,1,0,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1,0,0"))
                                                         (rule "add_literals" (formula "9") (term "1,1,0,0,1,0,0"))
                                                         (rule "times_zero_1" (formula "9") (term "1,0,0,1,0,0"))
                                                         (rule "add_zero_right" (formula "9") (term "0,0,1,0,0"))
                                                         (rule "qeq_literals" (formula "9") (term "0,1,0,0"))
                                                          (builtin "One Step Simplification" (formula "9"))
                                                         (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=arr_3"))
                                                         (rule "simplifySelectOfStore" (formula "1"))
                                                          (builtin "One Step Simplification" (formula "1"))
                                                         (rule "castDel" (formula "1") (term "0"))
                                                         (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
                                                         (rule "hideAuxiliaryEq" (formula "1"))
                                                         (rule "inEqSimp_homoInEq1" (formula "1"))
                                                         (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0"))
                                                         (rule "add_literals" (formula "1") (term "1,1,0,0"))
                                                         (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                                         (rule "add_zero_right" (formula "1") (term "0,0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                         (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                                         (rule "polySimp_rightDist" (formula "1") (term "1"))
                                                         (rule "mul_literals" (formula "1") (term "0,1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "44"))
                                                         (rule "andLeft" (formula "1"))
                                                         (rule "inEqSimp_homoInEq1" (formula "1"))
                                                         (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                                                         (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                                                         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
                                                         (rule "mul_literals" (formula "1") (term "0,1,0"))
                                                         (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
                                                         (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                                         (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                                                         (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
                                                         (rule "add_literals" (formula "1") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "1") (term "1,0"))
                                                         (rule "add_zero_right" (formula "1") (term "0"))
                                                         (rule "leq_literals" (formula "1"))
                                                         (rule "closeFalse" (formula "1"))
                                                      )
                                                      (branch "Case 2"
                                                         (rule "polySimp_homoEq" (formula "15") (term "1,0"))
                                                         (rule "polySimp_homoEq" (formula "15") (term "0,1,0,1,0,1,0"))
                                                         (rule "polySimp_mulComm0" (formula "15") (term "1,0,1,0"))
                                                         (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,1,1,0,1,0"))
                                                         (rule "polySimp_rightDist" (formula "15") (term "1,0,1,0"))
                                                         (rule "polySimp_mulAssoc" (formula "15") (term "0,1,0,1,0"))
                                                         (rule "polySimp_mulComm0" (formula "15") (term "0,0,1,0,1,0"))
                                                         (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,1,0"))
                                                         (rule "polySimp_elimOne" (formula "15") (term "0,1,0,1,0"))
                                                         (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,1,1,0,1,0"))
                                                         (rule "mul_literals" (formula "15") (term "0,1,0,0,0,1,1,0,1,0"))
                                                         (rule "polySimp_addAssoc" (formula "15") (term "0,1,0"))
                                                         (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,1,0,1,0"))
                                                         (rule "polySimp_addComm0" (formula "15") (term "0,0,0,0,1,0,1,0"))
                                                         (rule "inEqSimp_ltToLeq" (formula "11") (term "0"))
                                                         (rule "add_zero_right" (formula "11") (term "0,0"))
                                                         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                                                         (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
                                                         (rule "inEqSimp_ltToLeq" (formula "6"))
                                                         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                                                         (rule "polySimp_addComm1" (formula "6") (term "0"))
                                                         (rule "inEqSimp_ltToLeq" (formula "1"))
                                                         (rule "add_zero_right" (formula "1") (term "0"))
                                                         (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                                                         (rule "mul_literals" (formula "1") (term "0,1,0"))
                                                         (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                                         (rule "add_literals" (formula "1") (term "0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0"))
                                                         (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                                                         (rule "inEqSimp_homoInEq0" (formula "10") (term "0,0,0"))
                                                         (rule "times_zero_2" (formula "10") (term "1,0,0,0,0"))
                                                         (rule "add_zero_right" (formula "10") (term "0,0,0,0"))
                                                         (rule "inEqSimp_homoInEq1" (formula "26"))
                                                         (rule "polySimp_addComm1" (formula "26") (term "0"))
                                                         (rule "polySimp_sepNegMonomial" (formula "15") (term "0,0,1,0,1,0"))
                                                         (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,1,0,1,0"))
                                                         (rule "polySimp_elimOne" (formula "15") (term "0,0,0,1,0,1,0"))
                                                         (rule "polySimp_sepNegMonomial" (formula "15") (term "1,0"))
                                                         (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0"))
                                                         (rule "polySimp_elimOne" (formula "15") (term "0,1,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "45"))
                                                         (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0"))
                                                         (rule "polySimp_mulLiterals" (formula "11") (term "0,0"))
                                                         (rule "polySimp_elimOne" (formula "11") (term "0,0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
                                                         (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0"))
                                                         (rule "mul_literals" (formula "15") (term "0,1,0,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0"))
                                                         (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0"))
                                                         (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                                                         (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                                         (rule "polySimp_elimOne" (formula "6") (term "0"))
                                                         (rule "inEqSimp_invertInEq0" (formula "1"))
                                                         (rule "times_zero_2" (formula "1") (term "1"))
                                                         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                         (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
                                                         (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0"))
                                                         (rule "mul_literals" (formula "13") (term "0,1,0,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0"))
                                                         (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0,0"))
                                                         (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "25"))
                                                         (rule "polySimp_mulComm0" (formula "25") (term "1"))
                                                         (rule "polySimp_rightDist" (formula "25") (term "1"))
                                                         (rule "mul_literals" (formula "25") (term "0,1"))
                                                         (rule "polySimp_mulLiterals" (formula "25") (term "1,1"))
                                                         (rule "polySimp_elimOne" (formula "25") (term "1,1"))
                                                         (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "5"))
                                                         (rule "inEqSimp_homoInEq0" (formula "7") (term "0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0"))
                                                         (rule "add_literals" (formula "7") (term "1,1,0,0"))
                                                         (rule "times_zero_1" (formula "7") (term "1,0,0"))
                                                         (rule "add_literals" (formula "7") (term "0,0"))
                                                         (rule "qeq_literals" (formula "7") (term "0"))
                                                          (builtin "One Step Simplification" (formula "7"))
                                                         (rule "true_left" (formula "7"))
                                                         (rule "inEqSimp_subsumption1" (formula "8") (term "1,0,0") (ifseqformula "5"))
                                                         (rule "inEqSimp_homoInEq0" (formula "8") (term "0,1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
                                                         (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
                                                         (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
                                                         (rule "polySimp_addComm1" (formula "8") (term "0,0,0,1,0,0"))
                                                         (rule "add_literals" (formula "8") (term "0,0,0,0,1,0,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,1,0,0"))
                                                         (rule "add_literals" (formula "8") (term "1,1,0,0,1,0,0"))
                                                         (rule "times_zero_1" (formula "8") (term "1,0,0,1,0,0"))
                                                         (rule "add_zero_right" (formula "8") (term "0,0,1,0,0"))
                                                         (rule "qeq_literals" (formula "8") (term "0,1,0,0"))
                                                          (builtin "One Step Simplification" (formula "8"))
                                                         (rule "pullOutSelect" (formula "63") (term "0") (inst "selectSK=arr_3"))
                                                         (rule "simplifySelectOfStore" (formula "1"))
                                                          (builtin "One Step Simplification" (formula "1"))
                                                         (rule "replaceKnownSelect_taclet1_0" (formula "1") (term "2,0"))
                                                         (rule "castDel" (formula "1") (term "1,0"))
                                                         (rule "inEqSimp_exactShadow3" (formula "32") (ifseqformula "33"))
                                                         (rule "polySimp_mulComm0" (formula "32") (term "0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "32"))
                                                         (rule "polySimp_mulLiterals" (formula "32") (term "1"))
                                                         (rule "polySimp_elimOne" (formula "32") (term "1"))
                                                         (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "25"))
                                                         (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                                         (rule "mul_literals" (formula "6") (term "0,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "6") (term "0"))
                                                         (rule "polySimp_addComm1" (formula "6") (term "0,0"))
                                                         (rule "add_literals" (formula "6") (term "0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                                                         (rule "polySimp_mulComm0" (formula "6") (term "1"))
                                                         (rule "polySimp_rightDist" (formula "6") (term "1"))
                                                         (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                                                         (rule "mul_literals" (formula "6") (term "0,1"))
                                                         (rule "polySimp_elimOne" (formula "6") (term "1,1"))
                                                         (rule "nnf_imp2or" (formula "15") (term "0"))
                                                         (rule "nnf_imp2or" (formula "14") (term "0"))
                                                         (rule "nnf_notAnd" (formula "15") (term "0,0"))
                                                         (rule "inEqSimp_notGeq" (formula "15") (term "1,0,0"))
                                                         (rule "times_zero_1" (formula "15") (term "1,0,0,1,0,0"))
                                                         (rule "add_zero_right" (formula "15") (term "0,0,1,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                                                         (rule "mul_literals" (formula "15") (term "1,1,0,0"))
                                                         (rule "inEqSimp_notLeq" (formula "15") (term "0,0,0"))
                                                         (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0"))
                                                         (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0,0"))
                                                         (rule "add_literals" (formula "15") (term "0,0,0,0,0,0"))
                                                         (rule "add_zero_left" (formula "15") (term "0,0,0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,0"))
                                                         (rule "polySimp_elimOne" (formula "15") (term "1,0,0,0"))
                                                         (rule "nnf_notAnd" (formula "14") (term "0,0"))
                                                         (rule "inEqSimp_notLeq" (formula "14") (term "0,0,0"))
                                                         (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0"))
                                                         (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0,0"))
                                                         (rule "add_literals" (formula "14") (term "0,0,0,0,0,0"))
                                                         (rule "add_zero_left" (formula "14") (term "0,0,0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0"))
                                                         (rule "polySimp_elimOne" (formula "14") (term "1,0,0,0"))
                                                         (rule "inEqSimp_notGeq" (formula "14") (term "1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                                                         (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                                                         (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                                                         (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                                                         (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "43") (term "0"))
                                                         (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "40") (term "1") (inst "i=i"))
                                                         (rule "eqSymm" (formula "40"))
                                                         (rule "Contract_axiom_for_countClassOfSliceEq_in_Classifier" (formula "12") (term "1,2,0"))
                                                         (rule "replace_known_right" (formula "12") (term "0,1,0,0,0,0") (ifseqformula "64"))
                                                          (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "37")) (ifInst ""  (formula "18")) (ifInst ""  (formula "19")) (ifInst ""  (formula "65")) (ifInst ""  (formula "37")))
                                                         (rule "true_left" (formula "12"))
                                                         (rule "Contract_axiom_for_bufferLen_in_Buffers" (formula "41") (term "0"))
                                                          (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "38")) (ifInst ""  (formula "62")) (ifInst ""  (formula "38")) (ifInst ""  (formula "22")))
                                                         (rule "wellFormedAnon" (formula "41") (term "1,0"))
                                                         (rule "replace_known_left" (formula "41") (term "0,1,0") (ifseqformula "17"))
                                                          (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "16")))
                                                         (rule "inEqSimp_ltToLeq" (formula "41") (term "1,0"))
                                                         (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,1,0"))
                                                         (rule "polySimp_addComm1" (formula "41") (term "0,1,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "41") (term "0,1"))
                                                         (rule "inEqSimp_commuteLeq" (formula "41") (term "0,0"))
                                                         (rule "replace_known_left" (formula "41") (term "0,0") (ifseqformula "8"))
                                                          (builtin "One Step Simplification" (formula "41"))
                                                         (rule "applyEq" (formula "41") (term "0,1,1") (ifseqformula "42"))
                                                         (rule "applyEq" (formula "41") (term "0,0,1") (ifseqformula "42"))
                                                         (rule "inEqSimp_sepNegMonomial0" (formula "41") (term "0"))
                                                         (rule "polySimp_mulLiterals" (formula "41") (term "0,0"))
                                                         (rule "polySimp_elimOne" (formula "41") (term "0,0"))
                                                         (rule "replace_known_left" (formula "41") (term "0") (ifseqformula "7"))
                                                          (builtin "One Step Simplification" (formula "41"))
                                                         (rule "andLeft" (formula "41"))
                                                         (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "13") (term "0"))
                                                         (rule "wellFormedAnon" (formula "13") (term "1,0"))
                                                         (rule "replace_known_left" (formula "13") (term "0,1,0") (ifseqformula "18"))
                                                          (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "65")) (ifInst ""  (formula "17")) (ifInst ""  (formula "14")))
                                                         (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "37"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "translateJavaSubInt" (formula "37") (term "0,2,1,1,0"))
                                                         (rule "translateJavaSubInt" (formula "37") (term "0,2,0,1,0"))
                                                         (rule "translateJavaMulInt" (formula "37") (term "1,1,1,0,0,0,0"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "andLeft" (formula "39"))
                                                         (rule "notLeft" (formula "37"))
                                                         (rule "notLeft" (formula "37"))
                                                         (rule "eqSymm" (formula "42"))
                                                         (rule "eqSymm" (formula "39"))
                                                         (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "55"))
                                                          (builtin "One Step Simplification" (formula "4"))
                                                         (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "56"))
                                                          (builtin "One Step Simplification" (formula "3"))
                                                         (rule "polySimp_elimSub" (formula "42") (term "0,2,0"))
                                                         (rule "mul_literals" (formula "42") (term "1,0,2,0"))
                                                         (rule "eqSymm" (formula "42"))
                                                         (rule "polySimp_elimSub" (formula "42") (term "0,2,0"))
                                                         (rule "mul_literals" (formula "42") (term "1,0,2,0"))
                                                         (rule "eqSymm" (formula "42"))
                                                         (rule "polySimp_mulComm0" (formula "39") (term "1,0"))
                                                         (rule "polySimp_addComm0" (formula "42") (term "0,2,0"))
                                                         (rule "eqSymm" (formula "42"))
                                                         (rule "polySimp_addComm0" (formula "42") (term "0,2,0"))
                                                         (rule "eqSymm" (formula "42"))
                                                         (rule "inEqSimp_commuteLeq" (formula "37"))
                                                         (rule "applyEq" (formula "38") (term "0") (ifseqformula "32"))
                                                         (rule "applyEq" (formula "37") (term "0") (ifseqformula "32"))
                                                         (rule "applyEq" (formula "39") (term "1") (ifseqformula "32"))
                                                         (rule "inEqSimp_subsumption1" (formula "9") (term "0,0") (ifseqformula "37"))
                                                         (rule "leq_literals" (formula "9") (term "0,0,0"))
                                                          (builtin "One Step Simplification" (formula "9"))
                                                         (rule "applyEqReverse" (formula "1") (term "2,0") (ifseqformula "9"))
                                                         (rule "applyEqReverse" (formula "11") (term "0,0,1") (ifseqformula "9"))
                                                         (rule "hideAuxiliaryEq" (formula "9"))
                                                         (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "37"))
                                                         (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                                                         (rule "mul_literals" (formula "7") (term "0,0,0"))
                                                         (rule "polySimp_addComm1" (formula "7") (term "0"))
                                                         (rule "add_literals" (formula "7") (term "0,0"))
                                                         (rule "inEqSimp_sepNegMonomial1" (formula "7"))
                                                         (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                                                         (rule "polySimp_elimOne" (formula "7") (term "0"))
                                                         (rule "inEqSimp_exactShadow3" (formula "37") (ifseqformula "27"))
                                                         (rule "mul_literals" (formula "37") (term "0,0"))
                                                         (rule "polySimp_addAssoc" (formula "37") (term "0"))
                                                         (rule "add_literals" (formula "37") (term "0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "37"))
                                                         (rule "mul_literals" (formula "37") (term "1"))
                                                         (rule "inEqSimp_subsumption1" (formula "26") (ifseqformula "37"))
                                                         (rule "leq_literals" (formula "26") (term "0"))
                                                          (builtin "One Step Simplification" (formula "26"))
                                                         (rule "true_left" (formula "26"))
                                                         (rule "Definition_axiom_for_isClassifiedUntil_in_de_wiesler_Classifier" (formula "32") (term "0") (inst "b=b"))
                                                          (builtin "One Step Simplification" (formula "32"))
                                                         (rule "translateJavaSubInt" (formula "32") (term "1,1"))
                                                         (rule "andLeft" (formula "32"))
                                                         (rule "andLeft" (formula "32"))
                                                         (rule "andLeft" (formula "32"))
                                                         (rule "andLeft" (formula "32"))
                                                         (rule "polySimp_elimSub" (formula "36") (term "1"))
                                                         (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0"))
                                                         (rule "applyEq" (formula "35") (term "0,1,0,0,1,0,0") (ifseqformula "31"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0"))
                                                         (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0"))
                                                         (rule "mul_literals" (formula "35") (term "0,1,1,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0"))
                                                         (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0"))
                                                         (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "12") (term "0,2,0"))
                                                         (rule "polySimp_addComm0" (formula "12") (term "2,0"))
                                                         (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "49") (inst "b=b"))
                                                          (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "42")))
                                                         (rule "translateJavaMulInt" (formula "49") (term "1,1,0,0,0"))
                                                         (rule "mul_literals" (formula "49") (term "1,1,0,0,0"))
                                                         (rule "andLeft" (formula "49"))
                                                         (rule "andLeft" (formula "49"))
                                                         (rule "andLeft" (formula "49"))
                                                         (rule "andLeft" (formula "49"))
                                                         (rule "andLeft" (formula "49"))
                                                         (rule "notLeft" (formula "50"))
                                                         (rule "andLeft" (formula "49"))
                                                         (rule "notLeft" (formula "49"))
                                                         (rule "notLeft" (formula "49"))
                                                         (rule "eqSymm" (formula "64"))
                                                         (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "63"))
                                                          (builtin "One Step Simplification" (formula "2"))
                                                         (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "62"))
                                                          (builtin "One Step Simplification" (formula "5"))
                                                         (rule "inEqSimp_ltToLeq" (formula "52") (term "1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "52") (term "1,0,0,1,0,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "52") (term "0,1,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "52") (term "0,0,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "51"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "52") (term "1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "52") (term "1,1,0,0"))
                                                         (rule "polySimp_rightDist" (formula "52") (term "1,1,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "52") (term "1,1,1,0,0"))
                                                         (rule "mul_literals" (formula "52") (term "0,1,1,0,0"))
                                                         (rule "polySimp_elimOne" (formula "52") (term "1,1,1,0,0"))
                                                         (rule "inEqSimp_subsumption1" (formula "51") (ifseqformula "41"))
                                                         (rule "leq_literals" (formula "51") (term "0"))
                                                          (builtin "One Step Simplification" (formula "51"))
                                                         (rule "true_left" (formula "51"))
                                                         (rule "nnf_imp2or" (formula "35") (term "0"))
                                                         (rule "nnf_imp2or" (formula "51") (term "0"))
                                                         (rule "nnf_notAnd" (formula "35") (term "0,0"))
                                                         (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0"))
                                                         (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0"))
                                                         (rule "add_zero_right" (formula "35") (term "0,0,0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0"))
                                                         (rule "mul_literals" (formula "35") (term "1,0,0,0"))
                                                         (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0"))
                                                         (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0"))
                                                         (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0"))
                                                         (rule "add_literals" (formula "35") (term "0,0,0,1,0,0"))
                                                         (rule "add_zero_left" (formula "35") (term "0,0,1,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0"))
                                                         (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0"))
                                                         (rule "nnf_notAnd" (formula "51") (term "0,0"))
                                                         (rule "inEqSimp_notGeq" (formula "51") (term "0,0,0"))
                                                         (rule "times_zero_1" (formula "51") (term "1,0,0,0,0,0"))
                                                         (rule "add_zero_right" (formula "51") (term "0,0,0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "51") (term "0,0,0"))
                                                         (rule "mul_literals" (formula "51") (term "1,0,0,0"))
                                                         (rule "inEqSimp_notLeq" (formula "51") (term "1,0,0"))
                                                         (rule "polySimp_rightDist" (formula "51") (term "1,0,0,1,0,0"))
                                                         (rule "mul_literals" (formula "51") (term "0,1,0,0,1,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "51") (term "0,0,1,0,0"))
                                                         (rule "add_literals" (formula "51") (term "0,0,0,1,0,0"))
                                                         (rule "add_zero_left" (formula "51") (term "0,0,1,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "51") (term "1,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "51") (term "1,1,0,0"))
                                                         (rule "polySimp_elimOne" (formula "51") (term "1,1,0,0"))
                                                         (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "16") (term "0,0,1,1,0"))
                                                         (rule "polySimp_addComm0" (formula "16") (term "0,1,1,0"))
                                                         (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "13") (term "0") (inst "j=j_1") (inst "i=i"))
                                                          (builtin "One Step Simplification" (formula "13"))
                                                         (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,0"))
                                                         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,1,0"))
                                                         (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,1,0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,1,0"))
                                                         (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,1,0"))
                                                         (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,1,0"))
                                                         (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,1,0"))
                                                         (rule "mul_literals" (formula "13") (term "0,1,1,0,0,1,0"))
                                                         (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,1,0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
                                                         (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
                                                         (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
                                                         (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
                                                         (rule "nnf_imp2or" (formula "13") (term "0"))
                                                         (rule "nnf_notAnd" (formula "13") (term "0,0"))
                                                         (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
                                                         (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
                                                         (rule "add_zero_right" (formula "13") (term "0,0,0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                                                         (rule "mul_literals" (formula "13") (term "1,0,0,0"))
                                                         (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                                                         (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
                                                         (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
                                                         (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
                                                         (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
                                                         (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
                                                         (rule "nnf_imp2or" (formula "13") (term "0,1,0"))
                                                         (rule "nnf_notAnd" (formula "13") (term "0,0,1,0"))
                                                         (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,1,0"))
                                                         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,1,0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,1,0"))
                                                         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,1,0"))
                                                         (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,1,0"))
                                                         (rule "mul_literals" (formula "13") (term "0,1,0,0,0,1,0"))
                                                         (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,1,0"))
                                                         (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,1,0"))
                                                         (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,1,0"))
                                                         (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,1,0"))
                                                         (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,1,0"))
                                                         (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,1,0"))
                                                         (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,1,0"))
                                                         (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,1,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,1,0"))
                                                         (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,1,0"))
                                                         (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,1,0"))
                                                         (rule "Definition_axiom_for_count_in_de_wiesler_Buffers" (formula "36") (term "0") (inst "b=b"))
                                                         (rule "translateJavaCastInt" (formula "36") (term "0"))
                                                         (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "25") (inst "b=b"))
                                                          (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "62")) (ifInst ""  (formula "61")) (ifInst ""  (formula "50")) (ifInst ""  (formula "42")))
                                                         (rule "translateJavaMulInt" (formula "25") (term "1,1,0,0"))
                                                         (rule "mul_literals" (formula "25") (term "1,1,0,0"))
                                                         (rule "andLeft" (formula "25"))
                                                         (rule "andLeft" (formula "25"))
                                                         (rule "andLeft" (formula "25"))
                                                         (rule "notLeft" (formula "25"))
                                                         (rule "eqSymm" (formula "62"))
                                                         (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "26") (term "0,1,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "25"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
                                                         (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
                                                         (rule "mul_literals" (formula "26") (term "0,1,1,0,0"))
                                                         (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
                                                         (rule "inEqSimp_subsumption1" (formula "25") (ifseqformula "42"))
                                                         (rule "leq_literals" (formula "25") (term "0"))
                                                          (builtin "One Step Simplification" (formula "25"))
                                                         (rule "true_left" (formula "25"))
                                                         (rule "nnf_imp2or" (formula "25") (term "0"))
                                                         (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                                         (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                                         (rule "mul_literals" (formula "25") (term "1,0,0,0,0,0"))
                                                         (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                                         (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                                         (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                                         (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                                         (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                                         (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                                         (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                                         (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
                                                         (rule "Contract_axiom_for_isClassifiedBlocksRange_in_Classifier" (formula "33") (term "0"))
                                                         (rule "translateJavaSubInt" (formula "33") (term "0,0,0,0,0,0,0"))
                                                         (rule "replace_known_left" (formula "33") (term "1,0,0") (ifseqformula "19"))
                                                          (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "83")) (ifInst ""  (formula "18")) (ifInst ""  (formula "84")))
                                                         (rule "polySimp_elimSub" (formula "33") (term "0,0,0,0"))
                                                         (rule "polySimp_addComm0" (formula "33") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "33") (term "0,0") (ifseqformula "40"))
                                                          (builtin "One Step Simplification" (formula "33"))
                                                         (rule "true_left" (formula "33"))
                                                         (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "14") (term "0") (inst "i=i"))
                                                          (builtin "One Step Simplification" (formula "14"))
                                                         (rule "translateJavaSubInt" (formula "14") (term "1,1,0,0"))
                                                         (rule "translateJavaAddInt" (formula "14") (term "0,2,1,1,0"))
                                                         (rule "polySimp_elimSub" (formula "14") (term "1,1,0,0"))
                                                         (rule "mul_literals" (formula "14") (term "1,1,1,0,0"))
                                                         (rule "polySimp_addComm0" (formula "14") (term "0,2,1,1,0"))
                                                         (rule "polySimp_addComm0" (formula "14") (term "1,1,0,0"))
                                                         (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                                                         (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
                                                         (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
                                                         (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                                                         (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                                                         (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                                                         (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                                                         (rule "nnf_imp2or" (formula "14") (term "0"))
                                                         (rule "nnf_notAnd" (formula "14") (term "0,0"))
                                                         (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
                                                         (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0"))
                                                         (rule "add_zero_right" (formula "14") (term "0,0,0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                                                         (rule "mul_literals" (formula "14") (term "1,0,0,0"))
                                                         (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
                                                         (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
                                                         (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
                                                         (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                                                         (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                                                         (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                                                         (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                                                         (rule "Definition_axiom_for_isClassifiedWith_in_de_wiesler_Buffers" (formula "34") (term "0") (inst "b=b"))
                                                          (builtin "One Step Simplification" (formula "34"))
                                                         (rule "translateJavaMulInt" (formula "34") (term "0,4,0,1,0"))
                                                         (rule "translateJavaMulInt" (formula "34") (term "3,0,1,0"))
                                                         (rule "translateJavaAddInt" (formula "34") (term "4,0,1,0"))
                                                         (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0"))
                                                         (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0"))
                                                         (rule "mul_literals" (formula "34") (term "0,1,1,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0"))
                                                         (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0"))
                                                         (rule "nnf_imp2or" (formula "34") (term "0"))
                                                         (rule "nnf_notAnd" (formula "34") (term "0,0"))
                                                         (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0"))
                                                         (rule "times_zero_1" (formula "34") (term "1,0,0,0,0,0"))
                                                         (rule "add_zero_right" (formula "34") (term "0,0,0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0"))
                                                         (rule "mul_literals" (formula "34") (term "1,0,0,0"))
                                                         (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0"))
                                                         (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0"))
                                                         (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0"))
                                                         (rule "add_literals" (formula "34") (term "0,0,0,1,0,0"))
                                                         (rule "add_zero_left" (formula "34") (term "0,0,1,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0"))
                                                         (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0"))
                                                         (rule "Contract_axiom_for_countClassOfSliceEq_in_Classifier" (formula "12") (term "0,2,0"))
                                                         (rule "replace_known_right" (formula "12") (term "0,1,0") (ifseqformula "84"))
                                                          (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "83")) (ifInst ""  (formula "19")) (ifInst ""  (formula "20")))
                                                         (rule "true_left" (formula "12"))
                                                         (rule "Contract_axiom_for_countClassOfSliceEq_in_Classifier" (formula "60") (term "0"))
                                                         (rule "replace_known_left" (formula "60") (term "1,0,0,0") (ifseqformula "18"))
                                                          (builtin "One Step Simplification" (formula "60") (ifInst ""  (formula "83")) (ifInst ""  (formula "19")) (ifInst ""  (formula "84")))
                                                         (rule "true_left" (formula "60"))
                                                         (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "60") (term "0") (inst "i=i"))
                                                         (rule "applyEq" (formula "60") (term "0") (ifseqformula "53"))
                                                         (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "45") (term "0"))
                                                         (rule "replace_known_left" (formula "45") (term "1,0") (ifseqformula "18"))
                                                          (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "64")) (ifInst ""  (formula "46")))
                                                         (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "12") (term "0,2,0") (inst "i=i"))
                                                         (rule "polySimp_addComm0" (formula "12") (term "2,0"))
                                                         (rule "Definition_axiom_for_allElementsCounted_in_de_wiesler_Classifier" (formula "32") (term "0") (inst "b_0=b_0") (inst "b=b"))
                                                          (builtin "One Step Simplification" (formula "32"))
                                                         (rule "translateJavaCastInt" (formula "32") (term "0,1"))
                                                         (rule "translateJavaSubInt" (formula "32") (term "1,1"))
                                                         (rule "andLeft" (formula "32"))
                                                         (rule "polySimp_elimSub" (formula "33") (term "1"))
                                                         (rule "polySimp_addComm0" (formula "33") (term "1"))
                                                         (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0"))
                                                         (rule "applyEq" (formula "33") (term "1,0") (ifseqformula "31"))
                                                         (rule "applyEq" (formula "32") (term "0,1,0,0,1,0,0") (ifseqformula "31"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0"))
                                                         (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0"))
                                                         (rule "mul_literals" (formula "32") (term "0,1,1,0,0"))
                                                         (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0"))
                                                         (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "15") (term "1,1,0") (inst "i=i"))
                                                         (rule "eqSymm" (formula "15") (term "1,0"))
                                                         (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "40") (term "0"))
                                                          (builtin "One Step Simplification" (formula "40"))
                                                         (rule "translateJavaMod" (formula "40") (term "0"))
                                                         (rule "jmod_axiom" (formula "40") (term "0"))
                                                         (rule "polySimp_mulLiterals" (formula "40") (term "1,0"))
                                                         (rule "polySimp_sepNegMonomial" (formula "40"))
                                                         (rule "polySimp_mulLiterals" (formula "40") (term "0"))
                                                         (rule "newSym_eq" (formula "40") (inst "newSymDef=add(mul(begin, Z(0(#))), mul(write, Z(0(#))))") (inst "l=l_0"))
                                                         (rule "times_zero_1" (formula "40") (term "1,1,1"))
                                                         (rule "times_zero_1" (formula "40") (term "0,1,1"))
                                                         (rule "add_zero_left" (formula "40") (term "1,1"))
                                                         (rule "add_zero_right" (formula "40") (term "1"))
                                                         (rule "applyEq" (formula "41") (term "0,0") (ifseqformula "40"))
                                                         (rule "polySimp_homoEq" (formula "41"))
                                                         (rule "polySimp_mulLiterals" (formula "41") (term "1,0"))
                                                         (rule "polySimp_addComm1" (formula "41") (term "0"))
                                                         (rule "polySimp_addComm0" (formula "41") (term "0,0"))
                                                         (rule "polySimp_sepPosMonomial" (formula "41"))
                                                         (rule "polySimp_mulComm0" (formula "41") (term "1"))
                                                         (rule "polySimp_rightDist" (formula "41") (term "1"))
                                                         (rule "polySimp_mulLiterals" (formula "41") (term "1,1"))
                                                         (rule "polySimp_elimOne" (formula "41") (term "1,1"))
                                                         (rule "polySimp_mulComm0" (formula "41") (term "0,1"))
                                                         (rule "polySimp_mulLiterals" (formula "41") (term "0,1"))
                                                         (rule "applyEq" (formula "40") (term "1,0,0") (ifseqformula "41"))
                                                         (rule "polySimp_addAssoc" (formula "40") (term "0,0"))
                                                         (rule "polySimp_addComm0" (formula "40") (term "0,0,0"))
                                                         (rule "polySimp_pullOutFactor2b" (formula "40") (term "0,0"))
                                                         (rule "add_literals" (formula "40") (term "1,1,0,0"))
                                                         (rule "times_zero_1" (formula "40") (term "1,0,0"))
                                                         (rule "add_zero_right" (formula "40") (term "0,0"))
                                                         (rule "applyEq" (formula "34") (term "4,0") (ifseqformula "41"))
                                                         (rule "applyEq" (formula "38") (term "0") (ifseqformula "41"))
                                                         (rule "inEqSimp_homoInEq1" (formula "38"))
                                                         (rule "polySimp_mulComm0" (formula "38") (term "1,0"))
                                                         (rule "polySimp_rightDist" (formula "38") (term "1,0"))
                                                         (rule "polySimp_mulAssoc" (formula "38") (term "0,1,0"))
                                                         (rule "polySimp_mulComm0" (formula "38") (term "0,0,1,0"))
                                                         (rule "polySimp_mulLiterals" (formula "38") (term "0,1,0"))
                                                         (rule "polySimp_addAssoc" (formula "38") (term "0"))
                                                         (rule "polySimp_addComm0" (formula "38") (term "0,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "38") (term "0"))
                                                         (rule "add_literals" (formula "38") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "38") (term "1,0"))
                                                         (rule "add_zero_right" (formula "38") (term "0"))
                                                         (rule "applyEq" (formula "12") (term "1,1,2,0") (ifseqformula "41"))
                                                         (rule "applyEq" (formula "15") (term "1,0,1,0") (ifseqformula "41"))
                                                         (rule "applyEq" (formula "56") (term "1,0") (ifseqformula "41"))
                                                         (rule "applyEq" (formula "39") (term "0") (ifseqformula "41"))
                                                         (rule "inEqSimp_commuteLeq" (formula "39"))
                                                         (rule "applyEq" (formula "32") (term "4,1,1,0") (ifseqformula "41"))
                                                         (rule "applyEq" (formula "33") (term "1,1") (ifseqformula "41"))
                                                         (rule "polySimp_addAssoc" (formula "33") (term "1"))
                                                         (rule "polySimp_addComm0" (formula "33") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor2b" (formula "33") (term "1"))
                                                         (rule "add_literals" (formula "33") (term "1,1,1"))
                                                         (rule "times_zero_1" (formula "33") (term "1,1"))
                                                         (rule "add_zero_right" (formula "33") (term "1"))
                                                         (rule "applyEq" (formula "37") (term "0,1,1") (ifseqformula "41"))
                                                         (rule "polySimp_mulComm0" (formula "37") (term "1,1"))
                                                         (rule "polySimp_rightDist" (formula "37") (term "1,1"))
                                                         (rule "polySimp_mulAssoc" (formula "37") (term "0,1,1"))
                                                         (rule "polySimp_mulComm0" (formula "37") (term "0,0,1,1"))
                                                         (rule "polySimp_mulLiterals" (formula "37") (term "0,1,1"))
                                                         (rule "polySimp_addComm0" (formula "37") (term "1"))
                                                         (rule "applyEq" (formula "16") (term "4,0,0,1,1,0") (ifseqformula "41"))
                                                         (rule "inEqSimp_invertInEq0" (formula "38"))
                                                         (rule "times_zero_2" (formula "38") (term "1"))
                                                         (rule "polySimp_mulLiterals" (formula "38") (term "0"))
                                                         (rule "elimGcdGeq_antec" (formula "38") (inst "elimGcd=Z(6(5(2(#))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcdRightDiv=Z(0(#))"))
                                                         (rule "add_zero_right" (formula "38") (term "0,0,0,1,0"))
                                                         (rule "polySimp_mulLiterals" (formula "38") (term "1,0,1,0"))
                                                         (rule "leq_literals" (formula "38") (term "0,0"))
                                                          (builtin "One Step Simplification" (formula "38"))
                                                         (rule "mul_literals" (formula "38") (term "0,1,0,0,0,0"))
                                                         (rule "mul_literals" (formula "38") (term "1,0,0,0,0"))
                                                         (rule "add_zero_right" (formula "38") (term "0,0,0,0"))
                                                         (rule "polySimp_pullOutFactor0b" (formula "38") (term "0,0"))
                                                         (rule "add_literals" (formula "38") (term "1,1,0,0"))
                                                         (rule "times_zero_1" (formula "38") (term "1,0,0"))
                                                         (rule "add_zero_right" (formula "38") (term "0,0"))
                                                         (rule "leq_literals" (formula "38") (term "0"))
                                                          (builtin "One Step Simplification" (formula "38"))
                                                         (rule "Contract_axiom_for_bufferLen_in_Buffers" (formula "59") (term "0"))
                                                          (builtin "One Step Simplification" (formula "59") (ifInst ""  (formula "84")) (ifInst ""  (formula "23")))
                                                         (rule "wellFormedAnon" (formula "59") (term "1,0"))
                                                         (rule "replace_known_left" (formula "59") (term "1,1,0") (ifseqformula "17"))
                                                          (builtin "One Step Simplification" (formula "59") (ifInst ""  (formula "18")))
                                                         (rule "inEqSimp_ltToLeq" (formula "59") (term "1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "59") (term "1,0,0,1,0,0"))
                                                         (rule "polySimp_addComm1" (formula "59") (term "0,1,0,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "59") (term "0,0,1"))
                                                         (rule "inEqSimp_commuteLeq" (formula "59") (term "0,0,0"))
                                                         (rule "replace_known_left" (formula "59") (term "0,0,0") (ifseqformula "9"))
                                                          (builtin "One Step Simplification" (formula "59"))
                                                         (rule "applyEq" (formula "59") (term "0,0,0,1") (ifseqformula "60"))
                                                         (rule "replace_known_left" (formula "59") (term "0,0,1") (ifseqformula "57"))
                                                          (builtin "One Step Simplification" (formula "59"))
                                                         (rule "applyEq" (formula "59") (term "0,0,1") (ifseqformula "60"))
                                                         (rule "replace_known_left" (formula "59") (term "0,1") (ifseqformula "58"))
                                                          (builtin "One Step Simplification" (formula "59"))
                                                         (rule "inEqSimp_sepNegMonomial0" (formula "59") (term "0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "59") (term "0,0,0"))
                                                         (rule "polySimp_elimOne" (formula "59") (term "0,0,0"))
                                                         (rule "replace_known_left" (formula "59") (term "0,0") (ifseqformula "8"))
                                                          (builtin "One Step Simplification" (formula "59"))
                                                         (rule "true_left" (formula "59"))
                                                         (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "48") (term "0") (inst "j=j_1") (inst "i=i"))
                                                          (builtin "One Step Simplification" (formula "48"))
                                                         (rule "inEqSimp_ltToLeq" (formula "48") (term "1,0,0,1,0"))
                                                         (rule "polySimp_mulComm0" (formula "48") (term "1,0,0,1,0,0,1,0"))
                                                         (rule "inEqSimp_ltToLeq" (formula "48") (term "1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "48") (term "1,0,0,1,0,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "48") (term "1,0,1,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "48") (term "0,0,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "48") (term "0,0,0,1,0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "48") (term "1,0,0,1,0"))
                                                         (rule "polySimp_mulComm0" (formula "48") (term "1,1,0,0,1,0"))
                                                         (rule "polySimp_rightDist" (formula "48") (term "1,1,0,0,1,0"))
                                                         (rule "mul_literals" (formula "48") (term "0,1,1,0,0,1,0"))
                                                         (rule "polySimp_mulLiterals" (formula "48") (term "1,1,1,0,0,1,0"))
                                                         (rule "polySimp_elimOne" (formula "48") (term "1,1,1,0,0,1,0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "48") (term "1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "48") (term "1,1,0,0"))
                                                         (rule "polySimp_rightDist" (formula "48") (term "1,1,0,0"))
                                                         (rule "mul_literals" (formula "48") (term "0,1,1,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "48") (term "1,1,1,0,0"))
                                                         (rule "polySimp_elimOne" (formula "48") (term "1,1,1,0,0"))
                                                         (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "56") (term "0,0,2,0"))
                                                         (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "59") (term "0"))
                                                         (rule "pullOutSelect" (formula "59") (term "0") (inst "selectSK=arr_4"))
                                                         (rule "simplifySelectOfAnon" (formula "59"))
                                                          (builtin "One Step Simplification" (formula "59") (ifInst ""  (formula "65")) (ifInst ""  (formula "5")))
                                                         (rule "eqSymm" (formula "60"))
                                                         (rule "applyEqReverse" (formula "59") (term "1") (ifseqformula "60"))
                                                         (rule "hideAuxiliaryEq" (formula "60"))
                                                         (rule "elementOfArrayRangeConcrete" (formula "59") (term "0,0"))
                                                         (rule "replace_known_right" (formula "59") (term "0,0,0,0") (ifseqformula "74"))
                                                          (builtin "One Step Simplification" (formula "59") (ifInst ""  (formula "61")))
                                                         (rule "true_left" (formula "59"))
                                                         (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "50"))
                                                          (builtin "One Step Simplification" (formula "50"))
                                                         (rule "translateJavaSubInt" (formula "50") (term "3,0,1"))
                                                         (rule "andLeft" (formula "50"))
                                                         (rule "andLeft" (formula "50"))
                                                         (rule "andLeft" (formula "50"))
                                                         (rule "andLeft" (formula "51"))
                                                         (rule "andLeft" (formula "50"))
                                                         (rule "andLeft" (formula "50"))
                                                         (rule "andLeft" (formula "50"))
                                                         (rule "andLeft" (formula "52"))
                                                         (rule "notLeft" (formula "50"))
                                                         (rule "notLeft" (formula "50"))
                                                         (rule "polySimp_elimSub" (formula "56") (term "3,0"))
                                                         (rule "mul_literals" (formula "56") (term "1,3,0"))
                                                         (rule "polySimp_addComm0" (formula "56") (term "3,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "55"))
                                                         (rule "inEqSimp_commuteLeq" (formula "53"))
                                                         (rule "inEqSimp_commuteLeq" (formula "54"))
                                                         (rule "inEqSimp_commuteLeq" (formula "50"))
                                                         (rule "applyEq" (formula "55") (term "1") (ifseqformula "52"))
                                                         (rule "applyEq" (formula "56") (term "1,3,0") (ifseqformula "52"))
                                                         (rule "applyEq" (formula "53") (term "0") (ifseqformula "52"))
                                                         (rule "applyEq" (formula "49") (term "1,0,2,0") (ifseqformula "52"))
                                                         (rule "eqSymm" (formula "49"))
                                                         (rule "applyEq" (formula "55") (term "0,0") (ifseqformula "46"))
                                                         (rule "inEqSimp_commuteGeq" (formula "55"))
                                                         (rule "applyEq" (formula "54") (term "1") (ifseqformula "52"))
                                                         (rule "applyEq" (formula "48") (term "1,1,1,0,0") (ifseqformula "52"))
                                                         (rule "applyEq" (formula "47") (term "3,0") (ifseqformula "52"))
                                                         (rule "applyEq" (formula "48") (term "1,1,1,0,0,1,0") (ifseqformula "52"))
                                                         (rule "applyEq" (formula "45") (term "0,1,0") (ifseqformula "52"))
                                                         (rule "applyEq" (formula "45") (term "2,0") (ifseqformula "52"))
                                                         (rule "applyEq" (formula "56") (term "1,0") (ifseqformula "46"))
                                                         (rule "applyEq" (formula "70") (term "0") (ifseqformula "46"))
                                                         (rule "applyEq" (formula "49") (term "1,0,2,0") (ifseqformula "52"))
                                                         (rule "eqSymm" (formula "49"))
                                                         (rule "inEqSimp_exactShadow3" (formula "53") (ifseqformula "55"))
                                                         (rule "mul_literals" (formula "53") (term "0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "53"))
                                                         (rule "mul_literals" (formula "53") (term "1"))
                                                         (rule "Definition_axiom_for_isValidBufferLen_in_de_wiesler_Classifier" (formula "36") (term "0,1,0"))
                                                          (builtin "One Step Simplification" (formula "36"))
                                                         (rule "inEqSimp_ltToLeq" (formula "36") (term "0,1,1,0"))
                                                         (rule "add_zero_right" (formula "36") (term "0,0,1,1,0"))
                                                         (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,1,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,1,0"))
                                                         (rule "inEqSimp_sepNegMonomial0" (formula "36") (term "0,1,1,0"))
                                                         (rule "polySimp_mulLiterals" (formula "36") (term "0,0,1,1,0"))
                                                         (rule "polySimp_elimOne" (formula "36") (term "0,0,1,1,0"))
                                                         (rule "commute_or" (formula "15") (term "0,0"))
                                                         (rule "commute_or" (formula "16") (term "0,0"))
                                                         (rule "commute_and" (formula "11") (term "1"))
                                                         (rule "nnf_imp2or" (formula "32") (term "0"))
                                                         (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "37") (term "2,0"))
                                                         (rule "cnf_rightDist" (formula "61") (term "0"))
                                                         (rule "commute_or" (formula "13") (term "0,0,1,0"))
                                                         (rule "nnf_imp2or" (formula "48") (term "0"))
                                                         (rule "Definition_axiom_for_isClassOfSlice_in_de_wiesler_Classifier" (formula "35") (term "0,1,0") (inst "i=i"))
                                                          (builtin "One Step Simplification" (formula "35"))
                                                         (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0,1,0"))
                                                         (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,1,0"))
                                                         (rule "polySimp_mulAssoc" (formula "35") (term "0,1,0,0,1,0,0,1,0"))
                                                         (rule "polySimp_mulComm0" (formula "35") (term "0,0,1,0,0,1,0,0,1,0"))
                                                         (rule "polySimp_mulLiterals" (formula "35") (term "0,1,0,0,1,0,0,1,0"))
                                                         (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,1,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0,1,0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,1,0"))
                                                         (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1,0"))
                                                         (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1,0"))
                                                         (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1,0"))
                                                         (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,1,0"))
                                                         (rule "polySimp_rightDist" (formula "35") (term "0,1,1,0,0,1,0"))
                                                         (rule "polySimp_mulLiterals" (formula "35") (term "1,0,1,1,0,0,1,0"))
                                                         (rule "mul_literals" (formula "35") (term "0,0,1,1,0,0,1,0"))
                                                         (rule "cnf_rightDist" (formula "25") (term "0"))
                                                         (rule "nnf_notAnd" (formula "32") (term "0,0"))
                                                         (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0"))
                                                         (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,0"))
                                                         (rule "add_literals" (formula "32") (term "0,0,0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0"))
                                                         (rule "mul_literals" (formula "32") (term "1,0,0,0"))
                                                         (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0"))
                                                         (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0"))
                                                         (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0"))
                                                         (rule "add_literals" (formula "32") (term "0,0,0,1,0,0"))
                                                         (rule "add_zero_left" (formula "32") (term "0,0,1,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0"))
                                                         (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0"))
                                                         (rule "nnf_notAnd" (formula "48") (term "0,0"))
                                                         (rule "inEqSimp_notGeq" (formula "48") (term "0,0,0"))
                                                         (rule "times_zero_1" (formula "48") (term "1,0,0,0,0,0"))
                                                         (rule "add_literals" (formula "48") (term "0,0,0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "48") (term "0,0,0"))
                                                         (rule "mul_literals" (formula "48") (term "1,0,0,0"))
                                                         (rule "inEqSimp_notLeq" (formula "48") (term "1,0,0"))
                                                         (rule "polySimp_rightDist" (formula "48") (term "1,0,0,1,0,0"))
                                                         (rule "mul_literals" (formula "48") (term "0,1,0,0,1,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "48") (term "0,0,1,0,0"))
                                                         (rule "add_literals" (formula "48") (term "0,0,0,1,0,0"))
                                                         (rule "add_zero_left" (formula "48") (term "0,0,1,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "48") (term "1,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "48") (term "1,1,0,0"))
                                                         (rule "polySimp_elimOne" (formula "48") (term "1,1,0,0"))
                                                         (rule "nnf_imp2or" (formula "36") (term "1,1,0"))
                                                         (rule "inEqSimp_notGeq" (formula "36") (term "0,1,1,0"))
                                                         (rule "mul_literals" (formula "36") (term "1,0,0,0,1,1,0"))
                                                         (rule "add_literals" (formula "36") (term "0,0,0,1,1,0"))
                                                         (rule "add_zero_left" (formula "36") (term "0,0,1,1,0"))
                                                         (rule "nnf_imp2or" (formula "48") (term "0,1,0"))
                                                         (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "12") (term "0,0,2,1,2,0"))
                                                         (rule "ifthenelse_split" (formula "10") (term "0"))
                                                         (branch "j_0 >= 1 TRUE"
                                                            (rule "applyEqReverse" (formula "12") (term "1,0,1") (ifseqformula "11"))
                                                            (rule "hideAuxiliaryEq" (formula "11"))
                                                            (rule "replace_known_left" (formula "11") (term "0") (ifseqformula "10"))
                                                             (builtin "One Step Simplification" (formula "11"))
                                                            (rule "andLeft" (formula "11"))
                                                            (rule "inEqSimp_commuteGeq" (formula "11"))
                                                            (rule "applyEq" (formula "1") (term "2,0") (ifseqformula "12"))
                                                            (rule "inEqSimp_contradEq7" (formula "1") (term "0,0") (ifseqformula "10"))
                                                            (rule "times_zero_1" (formula "1") (term "1,0,0,0,0"))
                                                            (rule "add_literals" (formula "1") (term "0,0,0,0"))
                                                            (rule "leq_literals" (formula "1") (term "0,0,0"))
                                                             (builtin "One Step Simplification" (formula "1"))
                                                            (rule "applyEqReverse" (formula "95") (term "0") (ifseqformula "1"))
                                                             (builtin "One Step Simplification" (formula "95"))
                                                            (rule "closeTrue" (formula "95"))
                                                         )
                                                         (branch "j_0 >= 1 FALSE"
                                                            (rule "applyEqReverse" (formula "11") (term "1,0,1") (ifseqformula "10"))
                                                            (rule "hideAuxiliaryEq" (formula "10"))
                                                            (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "69"))
                                                             (builtin "One Step Simplification" (formula "10"))
                                                            (rule "true_left" (formula "10"))
                                                            (rule "inEqSimp_geqRight" (formula "68"))
                                                            (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                            (rule "add_literals" (formula "1") (term "0,0"))
                                                            (rule "add_zero_left" (formula "1") (term "0"))
                                                            (rule "inEqSimp_subsumption0" (formula "8") (ifseqformula "1"))
                                                            (rule "leq_literals" (formula "8") (term "0"))
                                                             (builtin "One Step Simplification" (formula "8"))
                                                            (rule "true_left" (formula "8"))
                                                            (rule "inEqSimp_antiSymm" (formula "9") (ifseqformula "1"))
                                                            (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "9"))
                                                             (builtin "One Step Simplification" (formula "2"))
                                                            (rule "applyEqReverse" (formula "93") (term "0") (ifseqformula "2"))
                                                            (rule "hideAuxiliaryEq" (formula "2"))
                                                            (rule "applyEqRigid" (formula "14") (term "1,1,0,0") (ifseqformula "8"))
                                                            (rule "applyEq" (formula "67") (term "0,2,0") (ifseqformula "8"))
                                                            (rule "applyEqRigid" (formula "6") (term "1,1") (ifseqformula "8"))
                                                            (rule "add_zero_right" (formula "6") (term "1"))
                                                            (rule "applyEq" (formula "11") (term "1,0,0,0,1,0") (ifseqformula "8"))
                                                            (rule "applyEq" (formula "11") (term "1,1,0,0") (ifseqformula "8"))
                                                            (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "8"))
                                                            (rule "leq_literals" (formula "1"))
                                                            (rule "true_left" (formula "1"))
                                                            (rule "applyEqRigid" (formula "64") (term "0,2,0") (ifseqformula "7"))
                                                            (rule "applyEq" (formula "6") (term "1,1") (ifseqformula "7"))
                                                            (rule "add_literals" (formula "6") (term "1"))
                                                            (rule "applyEq" (formula "12") (term "1,1,0,0,0") (ifseqformula "7"))
                                                            (rule "add_literals" (formula "12") (term "1,0,0,0"))
                                                            (rule "applyEq" (formula "11") (term "1,1,1,0,0") (ifseqformula "7"))
                                                            (rule "add_literals" (formula "11") (term "1,1,0,0"))
                                                            (rule "applyEq" (formula "8") (term "0") (ifseqformula "7"))
                                                            (rule "qeq_literals" (formula "8"))
                                                            (rule "true_left" (formula "8"))
                                                            (rule "applyEq" (formula "8") (term "1,0") (ifseqformula "7"))
                                                            (rule "bsum_lower_equals_upper" (formula "8") (term "0"))
                                                            (rule "eqSymm" (formula "8"))
                                                            (rule "close" (formula "90") (ifseqformula "8"))
                                                         )
                                                      )
                                                   )
                                                )
                                                (branch "Case 2"
                                                   (rule "polySimp_homoEq" (formula "14") (term "1,0"))
                                                   (rule "polySimp_homoEq" (formula "14") (term "0,1,0,1,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "14") (term "1,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,1,1,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,1,1,0,1,0"))
                                                   (rule "mul_literals" (formula "14") (term "0,1,0,0,1,1,1,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "14") (term "1,0,1,0"))
                                                   (rule "polySimp_mulAssoc" (formula "14") (term "0,1,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "14") (term "0,0,1,0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "14") (term "0,1,0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,1,1,0,1,0"))
                                                   (rule "polySimp_addComm0" (formula "14") (term "0,0,0,0,1,1,0,1,0"))
                                                   (rule "bsum_induction_upper_concrete" (formula "64") (term "0"))
                                                   (rule "polySimp_homoEq" (formula "64"))
                                                   (rule "polySimp_mulComm0" (formula "64") (term "1,0"))
                                                   (rule "polySimp_addComm0" (formula "64") (term "1,1,0"))
                                                   (rule "polySimp_rightDist" (formula "64") (term "1,0"))
                                                   (rule "polySimp_mulComm0" (formula "64") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "14") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "64") (term "0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "10") (term "0"))
                                                   (rule "add_zero_right" (formula "10") (term "0,0"))
                                                   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "5"))
                                                   (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "5") (term "0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "64") (term "0,0,1,0,0"))
                                                   (rule "replace_known_left" (formula "64") (term "0,0,1,0,0") (ifseqformula "6"))
                                                    (builtin "One Step Simplification" (formula "64"))
                                                   (rule "polySimp_mulComm0" (formula "64") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "64") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "64") (term "0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "64") (term "0,0"))
                                                   (rule "polySimp_addComm1" (formula "64") (term "0,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "64") (term "0,0"))
                                                   (rule "add_literals" (formula "64") (term "1,1,0,0"))
                                                   (rule "times_zero_1" (formula "64") (term "1,0,0"))
                                                   (rule "add_zero_right" (formula "64") (term "0,0"))
                                                   (rule "inEqSimp_homoInEq0" (formula "9") (term "0,0,0"))
                                                   (rule "times_zero_2" (formula "9") (term "1,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "9") (term "0,0,0,0"))
                                                   (rule "inEqSimp_homoInEq1" (formula "25"))
                                                   (rule "polySimp_addComm1" (formula "25") (term "0"))
                                                   (rule "applyEq" (formula "64") (term "0,1,0") (ifseqformula "11"))
                                                   (rule "polySimp_addComm1" (formula "64") (term "0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "64") (term "0,0"))
                                                   (rule "add_literals" (formula "64") (term "1,1,0,0"))
                                                   (rule "times_zero_1" (formula "64") (term "1,0,0"))
                                                   (rule "add_zero_right" (formula "64") (term "0,0"))
                                                   (rule "applyEq" (formula "64") (term "0,1,0") (ifseqformula "42"))
                                                   (rule "polySimp_pullOutFactor1" (formula "64") (term "0"))
                                                   (rule "add_literals" (formula "64") (term "1,0"))
                                                   (rule "times_zero_1" (formula "64") (term "0"))
                                                    (builtin "One Step Simplification" (formula "64"))
                                                   (rule "closeTrue" (formula "64"))
                                                )
                                             )
                                             (branch "Case 2"
                                                (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "64") (term "0") (inst "i=i") (userinteraction))
                                                (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "12") (term "0") (inst "i=i") (userinteraction))
                                                 (builtin "One Step Simplification" (formula "12") (userinteraction))
                                                 (builtin "One Step Simplification" (formula "64") (userinteraction))
                                                (rule "allRight" (formula "64") (inst "sk=i_0") (userinteraction))
                                                (rule "eqTermCut" (formula "64") (term "0,1,0") (inst "s=sub(j_0, Z(1(#)))") (userinteraction))
                                                (branch "Assume i_0 = j_0 - 1"
                                                   (rule "translateJavaSubInt" (formula "65") (term "1,1,0"))
                                                   (rule "translateJavaAddInt" (formula "65") (term "0,2,1,1"))
                                                   (rule "translateJavaSubInt" (formula "13") (term "1,1,0,0"))
                                                   (rule "translateJavaAddInt" (formula "13") (term "0,2,1,1,0"))
                                                   (rule "impRight" (formula "65"))
                                                   (rule "andLeft" (formula "1"))
                                                   (rule "eqSymm" (formula "3"))
                                                   (rule "polySimp_homoEq" (formula "17") (term "1,0"))
                                                   (rule "polySimp_elimSub" (formula "15") (term "1,1,0,0"))
                                                   (rule "mul_literals" (formula "15") (term "1,1,1,0,0"))
                                                   (rule "polySimp_elimSub" (formula "2") (term "1"))
                                                   (rule "mul_literals" (formula "2") (term "1,1"))
                                                   (rule "polySimp_elimSub" (formula "3") (term "0"))
                                                   (rule "mul_literals" (formula "3") (term "1,0"))
                                                   (rule "polySimp_homoEq" (formula "17") (term "0,1,0,1,0,1,0"))
                                                   (rule "polySimp_homoEq" (formula "3"))
                                                   (rule "polySimp_mulComm0" (formula "17") (term "1,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                                   (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,1,1,0,1,0"))
                                                   (rule "polySimp_addComm0" (formula "15") (term "0,2,1,1,0"))
                                                   (rule "polySimp_addComm0" (formula "67") (term "0,2,1"))
                                                   (rule "polySimp_addComm0" (formula "15") (term "1,1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "2") (term "1"))
                                                   (rule "add_literals" (formula "2") (term "0,1"))
                                                   (rule "add_zero_left" (formula "2") (term "1"))
                                                   (rule "polySimp_addComm0" (formula "3") (term "1,1,0"))
                                                   (rule "polySimp_rightDist" (formula "17") (term "1,0,1,0"))
                                                   (rule "polySimp_mulAssoc" (formula "17") (term "0,1,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "17") (term "0,0,1,0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "17") (term "0,1,0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "17") (term "0,1,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                                   (rule "mul_literals" (formula "3") (term "0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,1,1,0,1,0"))
                                                   (rule "mul_literals" (formula "17") (term "0,1,0,0,0,1,1,0,1,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "8"))
                                                   (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "8") (term "0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "13") (term "0"))
                                                   (rule "add_zero_right" (formula "13") (term "0,0"))
                                                   (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                   (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                                                   (rule "polySimp_addAssoc" (formula "17") (term "0,1,0"))
                                                   (rule "inEqSimp_leqRight" (formula "67"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                   (rule "polySimp_addAssoc" (formula "18") (term "0,0,0,1,0,1,0"))
                                                   (rule "polySimp_addComm0" (formula "18") (term "0,0,0,0,1,0,1,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "3"))
                                                   (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                   (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                                                   (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "2"))
                                                   (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0"))
                                                   (rule "inEqSimp_homoInEq0" (formula "13") (term "0,0,0"))
                                                   (rule "times_zero_2" (formula "13") (term "1,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "13") (term "0,0,0,0"))
                                                   (rule "inEqSimp_homoInEq1" (formula "29"))
                                                   (rule "polySimp_addComm1" (formula "29") (term "0"))
                                                   (rule "polySimp_sepNegMonomial" (formula "4"))
                                                   (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "4") (term "0"))
                                                   (rule "applyEqRigid" (formula "14") (term "0,1,0,0") (ifseqformula "4"))
                                                   (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "14") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "14") (term "0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "14") (term "0,0"))
                                                   (rule "add_literals" (formula "14") (term "0,0,0"))
                                                   (rule "add_zero_left" (formula "14") (term "0,0"))
                                                   (rule "applyEq" (formula "17") (term "1,1,0,0") (ifseqformula "4"))
                                                   (rule "applyEqRigid" (formula "43") (term "0,2,0") (ifseqformula "4"))
                                                   (rule "applyEqRigid" (formula "1") (term "0,2,0,0,1,0") (ifseqformula "4"))
                                                   (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                   (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "4"))
                                                   (rule "bsum_induction_upper_concrete" (formula "15") (term "0"))
                                                   (rule "polySimp_homoEq" (formula "15"))
                                                   (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                                                   (rule "polySimp_addComm0" (formula "15") (term "1,1,0"))
                                                   (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                                                   (rule "polySimp_mulComm0" (formula "15") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "15") (term "0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,1,0,0"))
                                                   (rule "replace_known_left" (formula "15") (term "0,0,1,0,0") (ifseqformula "2"))
                                                    (builtin "One Step Simplification" (formula "15"))
                                                   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "15") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "15") (term "0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "15") (term "0,0"))
                                                   (rule "applyEqRigid" (formula "44") (term "2,0") (ifseqformula "4"))
                                                   (rule "applyEq" (formula "11") (term "1") (ifseqformula "4"))
                                                   (rule "applyEq" (formula "13") (term "1,0,2,2,0") (ifseqformula "4"))
                                                   (rule "polySimp_addAssoc" (formula "13") (term "0,2,2,0"))
                                                   (rule "add_literals" (formula "13") (term "0,0,2,2,0"))
                                                   (rule "add_zero_left" (formula "13") (term "0,2,2,0"))
                                                   (rule "applyEqRigid" (formula "46") (term "2,0") (ifseqformula "4"))
                                                   (rule "applyEq" (formula "3") (term "0,1,0") (ifseqformula "4"))
                                                   (rule "polySimp_pullOutFactor1" (formula "3") (term "0"))
                                                   (rule "add_literals" (formula "3") (term "1,0"))
                                                   (rule "times_zero_1" (formula "3") (term "0"))
                                                   (rule "leq_literals" (formula "3"))
                                                   (rule "true_left" (formula "3"))
                                                   (rule "applyEqRigid" (formula "47") (term "5,1,0") (ifseqformula "3"))
                                                   (rule "applyEqRigid" (formula "12") (term "1,0,0,0,0") (ifseqformula "3"))
                                                   (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0"))
                                                   (rule "add_literals" (formula "12") (term "0,0,0,0,0"))
                                                   (rule "add_zero_left" (formula "12") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "12") (term "0,0,0") (ifseqformula "2"))
                                                    (builtin "One Step Simplification" (formula "12"))
                                                   (rule "applyEq" (formula "9") (term "0") (ifseqformula "3"))
                                                   (rule "applyEq" (formula "12") (term "1,0,2,1,0") (ifseqformula "3"))
                                                   (rule "polySimp_addAssoc" (formula "12") (term "0,2,1,0"))
                                                   (rule "add_literals" (formula "12") (term "0,0,2,1,0"))
                                                   (rule "add_zero_left" (formula "12") (term "0,2,1,0"))
                                                   (rule "applyEqRigid" (formula "12") (term "1,1,0,0") (ifseqformula "3"))
                                                   (rule "polySimp_addAssoc" (formula "12") (term "1,0,0"))
                                                   (rule "add_literals" (formula "12") (term "0,1,0,0"))
                                                   (rule "add_zero_left" (formula "12") (term "1,0,0"))
                                                   (rule "applyEqRigid" (formula "1") (term "0,2,0,1,0") (ifseqformula "3"))
                                                   (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                   (rule "applyEqRigid" (formula "17") (term "1,0,0,0,0,1,0,1,0") (ifseqformula "3"))
                                                   (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,0,1,0,1,0"))
                                                   (rule "add_literals" (formula "17") (term "0,0,0,0,0,1,0,1,0"))
                                                   (rule "add_zero_left" (formula "17") (term "0,0,0,0,1,0,1,0"))
                                                   (rule "applyEqRigid" (formula "8") (term "1,0,0") (ifseqformula "3"))
                                                   (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
                                                   (rule "add_literals" (formula "8") (term "0,0,0"))
                                                   (rule "applyEq" (formula "17") (term "0,1,0,0,0,0,0") (ifseqformula "3"))
                                                   (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "17") (term "0,1,0,0,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,0,0"))
                                                   (rule "add_literals" (formula "17") (term "0,0,0,0,0,0"))
                                                   (rule "add_zero_left" (formula "17") (term "0,0,0,0,0"))
                                                   (rule "applyEq" (formula "15") (term "0,1,0,0,1,0,0") (ifseqformula "3"))
                                                   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
                                                   (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                                                   (rule "applyEq" (formula "42") (term "5,1") (ifseqformula "3"))
                                                   (rule "polySimp_sepNegMonomial" (formula "14"))
                                                   (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "14") (term "0"))
                                                   (rule "polySimp_sepNegMonomial" (formula "17") (term "0,0,1,0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "17") (term "0,0,0,1,0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "17") (term "0,0,0,1,0,1,0"))
                                                   (rule "polySimp_sepNegMonomial" (formula "17") (term "1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "17") (term "0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "17") (term "0,1,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "16") (term "0,1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "28"))
                                                   (rule "polySimp_mulComm0" (formula "28") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "28") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "28") (term "1,1"))
                                                   (rule "mul_literals" (formula "28") (term "0,1"))
                                                   (rule "polySimp_elimOne" (formula "28") (term "1,1"))
                                                   (rule "inEqSimp_invertInEq0" (formula "13") (term "0"))
                                                   (rule "polySimp_mulLiterals" (formula "13") (term "0,0"))
                                                   (rule "times_zero_2" (formula "13") (term "1,0"))
                                                   (rule "polySimp_elimOne" (formula "13") (term "0,0"))
                                                   (rule "replace_known_left" (formula "13") (term "0") (ifseqformula "2"))
                                                    (builtin "One Step Simplification" (formula "13"))
                                                   (rule "andLeft" (formula "13"))
                                                   (rule "applyEqRigid" (formula "11") (term "1") (ifseqformula "13"))
                                                   (rule "ifEqualsInteger" (formula "11"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "48"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "9"))
                                                   (rule "mul_literals" (formula "9") (term "1"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                                   (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "8"))
                                                   (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "8") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "18") (term "1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "18") (term "1,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                                                   (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                                                   (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "8"))
                                                   (rule "inEqSimp_homoInEq0" (formula "10") (term "0"))
                                                   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "10") (term "0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                                                   (rule "polySimp_addComm1" (formula "10") (term "0,0,0"))
                                                   (rule "add_literals" (formula "10") (term "0,0,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0"))
                                                   (rule "add_literals" (formula "10") (term "1,1,0,0"))
                                                   (rule "times_zero_1" (formula "10") (term "1,0,0"))
                                                   (rule "add_zero_right" (formula "10") (term "0,0"))
                                                   (rule "qeq_literals" (formula "10") (term "0"))
                                                    (builtin "One Step Simplification" (formula "10"))
                                                   (rule "true_left" (formula "10"))
                                                   (rule "inEqSimp_subsumption1" (formula "11") (term "0,0") (ifseqformula "8"))
                                                   (rule "inEqSimp_homoInEq0" (formula "11") (term "0,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,0,0"))
                                                   (rule "add_literals" (formula "11") (term "1,1,0,0,0,0"))
                                                   (rule "times_zero_1" (formula "11") (term "1,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "11") (term "0,0,0,0"))
                                                   (rule "qeq_literals" (formula "11") (term "0,0,0"))
                                                    (builtin "One Step Simplification" (formula "11"))
                                                   (rule "applyEqReverse" (formula "13") (term "1") (ifseqformula "11"))
                                                   (rule "hideAuxiliaryEq" (formula "11"))
                                                   (rule "inEqSimp_commuteGeq" (formula "12"))
                                                   (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "2"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "pullOutSelect" (formula "1") (term "1,1") (inst "selectSK=arr_3"))
                                                   (rule "simplifySelectOfStore" (formula "1"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "castDel" (formula "1") (term "1,0"))
                                                   (rule "polySimp_homoEq" (formula "1") (term "0,0"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                                                   (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                                                   (rule "polySimp_addComm0" (formula "1") (term "0,0,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                                                   (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                                                   (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                                                   (rule "add_zero_right" (formula "1") (term "0,0,0"))
                                                   (rule "equal_literals" (formula "1") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "simplifySelectOfAnon" (formula "1"))
                                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "63")) (ifInst ""  (formula "22")))
                                                   (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
                                                   (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "3"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0"))
                                                   (rule "inEqSimp_subsumption1" (formula "1") (term "0,0") (ifseqformula "9"))
                                                   (rule "inEqSimp_homoInEq0" (formula "1") (term "0,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0,0"))
                                                   (rule "add_literals" (formula "1") (term "1,1,0,0,0,0"))
                                                   (rule "times_zero_1" (formula "1") (term "1,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "1") (term "0,0,0,0"))
                                                   (rule "qeq_literals" (formula "1") (term "0,0,0"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "applyEqReverse" (formula "2") (term "1,1") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=arr_4"))
                                                   (rule "simplifySelectOfStore" (formula "1"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "castDel" (formula "1") (term "0"))
                                                   (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "inEqSimp_homoInEq0" (formula "1"))
                                                   (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "1") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                                   (rule "mul_literals" (formula "1") (term "0,1"))
                                                   (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                                   (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "11"))
                                                   (rule "andLeft" (formula "1"))
                                                   (rule "inEqSimp_homoInEq1" (formula "1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                                   (rule "add_literals" (formula "1") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "1") (term "1,0"))
                                                   (rule "add_zero_right" (formula "1") (term "0"))
                                                   (rule "leq_literals" (formula "1"))
                                                   (rule "closeFalse" (formula "1"))
                                                )
                                                (branch "Assume i_0 != j_0 - 1"
                                                   (rule "allLeftHide" (formula "13") (inst "t=i_0") (userinteraction))
                                                   (rule "translateJavaAddInt" (formula "65") (term "0,2,1,1"))
                                                   (rule "translateJavaSubInt" (formula "65") (term "1,1,0"))
                                                   (rule "translateJavaSubInt" (formula "13") (term "1,1,0"))
                                                   (rule "translateJavaAddInt" (formula "13") (term "0,2,1,1"))
                                                   (rule "notLeft" (formula "1"))
                                                   (rule "impRight" (formula "65"))
                                                   (rule "andLeft" (formula "1"))
                                                   (rule "eqSymm" (formula "47"))
                                                   (rule "replace_known_left" (formula "14") (term "0,0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "14"))
                                                   (rule "polySimp_homoEq" (formula "16") (term "0,1,0,1,0"))
                                                   (rule "polySimp_elimSub" (formula "2") (term "1"))
                                                   (rule "mul_literals" (formula "2") (term "1,1"))
                                                   (rule "polySimp_elimSub" (formula "47") (term "0"))
                                                   (rule "mul_literals" (formula "47") (term "1,0"))
                                                   (rule "polySimp_elimSub" (formula "14") (term "1,0"))
                                                   (rule "mul_literals" (formula "14") (term "1,1,0"))
                                                   (rule "polySimp_homoEq" (formula "16") (term "1,0"))
                                                   (rule "polySimp_homoEq" (formula "47"))
                                                   (rule "polySimp_mulComm0" (formula "16") (term "1,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "47") (term "1,0"))
                                                   (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,1,1,0,1,0"))
                                                   (rule "polySimp_addComm0" (formula "67") (term "0,2,1"))
                                                   (rule "polySimp_addComm0" (formula "14") (term "0,2,1,1"))
                                                   (rule "polySimp_addComm1" (formula "2") (term "1"))
                                                   (rule "add_literals" (formula "2") (term "0,1"))
                                                   (rule "add_zero_left" (formula "2") (term "1"))
                                                   (rule "polySimp_addComm0" (formula "14") (term "1,0"))
                                                   (rule "polySimp_addComm0" (formula "47") (term "1,1,0"))
                                                   (rule "polySimp_rightDist" (formula "16") (term "1,0,1,0"))
                                                   (rule "polySimp_mulAssoc" (formula "16") (term "0,1,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "16") (term "0,0,1,0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "16") (term "0,1,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "47") (term "1,0"))
                                                   (rule "mul_literals" (formula "47") (term "0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,1,1,0,1,0"))
                                                   (rule "mul_literals" (formula "16") (term "0,1,0,0,0,1,1,0,1,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "7"))
                                                   (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "7") (term "0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "12") (term "0"))
                                                   (rule "add_zero_right" (formula "12") (term "0,0"))
                                                   (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "47") (term "0"))
                                                   (rule "polySimp_addComm0" (formula "47") (term "0,0"))
                                                   (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,1,1,0,1,0"))
                                                   (rule "polySimp_addComm0" (formula "16") (term "0,0,0,0,1,1,0,1,0"))
                                                   (rule "inEqSimp_leqRight" (formula "67"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                   (rule "polySimp_addAssoc" (formula "17") (term "0,1,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "3"))
                                                   (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "15") (term "0"))
                                                   (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0"))
                                                   (rule "mul_literals" (formula "15") (term "0,1,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "15") (term "0,0,0"))
                                                   (rule "add_literals" (formula "15") (term "0,0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "15") (term "0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "2"))
                                                   (rule "inEqSimp_commuteLeq" (formula "15") (term "1"))
                                                   (rule "inEqSimp_homoInEq1" (formula "28"))
                                                   (rule "polySimp_addComm1" (formula "28") (term "0"))
                                                   (rule "inEqSimp_homoInEq0" (formula "12") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "12") (term "1,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "12") (term "0,0,0,0"))
                                                   (rule "polySimp_sepNegMonomial" (formula "48"))
                                                   (rule "polySimp_mulLiterals" (formula "48") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "48") (term "0"))
                                                   (rule "polySimp_sepNegMonomial" (formula "17") (term "0,0,1,0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "17") (term "0,0,0,1,0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "17") (term "0,0,0,1,0,1,0"))
                                                   (rule "polySimp_sepNegMonomial" (formula "17") (term "1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "17") (term "0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "17") (term "0,1,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "47"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "8"))
                                                   (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "8") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "17") (term "0,1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0"))
                                                   (rule "polySimp_mulLiterals" (formula "13") (term "0,0"))
                                                   (rule "polySimp_elimOne" (formula "13") (term "0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "16") (term "0,1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                                   (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                                                   (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0"))
                                                   (rule "polySimp_mulLiterals" (formula "15") (term "0,0"))
                                                   (rule "polySimp_elimOne" (formula "15") (term "0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "28"))
                                                   (rule "polySimp_mulComm0" (formula "28") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "28") (term "1"))
                                                   (rule "mul_literals" (formula "28") (term "0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "28") (term "1,1"))
                                                   (rule "polySimp_elimOne" (formula "28") (term "1,1"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "12") (term "1,0,0,0"))
                                                   (rule "inEqSimp_strengthen1" (formula "3") (ifseqformula "48"))
                                                   (rule "polySimp_addAssoc" (formula "3") (term "1"))
                                                   (rule "add_literals" (formula "3") (term "0,1"))
                                                   (rule "replace_known_left" (formula "15") (term "0") (ifseqformula "3"))
                                                    (builtin "One Step Simplification" (formula "15"))
                                                   (rule "inEqSimp_contradEq7" (formula "48") (ifseqformula "3"))
                                                   (rule "polySimp_rightDist" (formula "48") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "48") (term "0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "48") (term "0,0"))
                                                   (rule "polySimp_addComm1" (formula "48") (term "0,0,0"))
                                                   (rule "add_literals" (formula "48") (term "0,0,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "48") (term "0,0"))
                                                   (rule "add_literals" (formula "48") (term "1,1,0,0"))
                                                   (rule "times_zero_1" (formula "48") (term "1,0,0"))
                                                   (rule "add_zero_right" (formula "48") (term "0,0"))
                                                   (rule "leq_literals" (formula "48") (term "0"))
                                                    (builtin "One Step Simplification" (formula "48"))
                                                   (rule "false_right" (formula "48"))
                                                   (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "8"))
                                                   (rule "inEqSimp_homoInEq0" (formula "10") (term "0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0"))
                                                   (rule "add_literals" (formula "10") (term "1,1,0,0"))
                                                   (rule "times_zero_1" (formula "10") (term "1,0,0"))
                                                   (rule "add_zero_right" (formula "10") (term "0,0"))
                                                   (rule "qeq_literals" (formula "10") (term "0"))
                                                    (builtin "One Step Simplification" (formula "10"))
                                                   (rule "true_left" (formula "10"))
                                                   (rule "inEqSimp_subsumption1" (formula "11") (term "1,0,0") (ifseqformula "8"))
                                                   (rule "inEqSimp_homoInEq0" (formula "11") (term "0,1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "11") (term "0,0,0,1,0,0"))
                                                   (rule "add_literals" (formula "11") (term "0,0,0,0,1,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1,0,0"))
                                                   (rule "add_literals" (formula "11") (term "1,1,0,0,1,0,0"))
                                                   (rule "times_zero_1" (formula "11") (term "1,0,0,1,0,0"))
                                                   (rule "add_zero_right" (formula "11") (term "0,0,1,0,0"))
                                                   (rule "qeq_literals" (formula "11") (term "0,1,0,0"))
                                                    (builtin "One Step Simplification" (formula "11"))
                                                   (rule "pullOutSelect" (formula "1") (term "1,1") (inst "selectSK=arr_3"))
                                                   (rule "simplifySelectOfStore" (formula "1"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "castDel" (formula "1") (term "1,0"))
                                                   (rule "inEqSimp_contradEq7" (formula "1") (term "0,0") (ifseqformula "4"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0,0"))
                                                   (rule "add_literals" (formula "1") (term "1,1,0,0,0,0"))
                                                   (rule "times_zero_1" (formula "1") (term "1,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "1") (term "0,0,0,0"))
                                                   (rule "leq_literals" (formula "1") (term "0,0,0"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "applyEq" (formula "15") (term "1") (ifseqformula "1"))
                                                   (rule "simplifySelectOfAnon" (formula "1"))
                                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "64")) (ifInst ""  (formula "23")))
                                                   (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
                                                   (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "3"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "pullOutSelect" (formula "2") (term "0") (inst "selectSK=arr_4"))
                                                   (rule "simplifySelectOfStore" (formula "2"))
                                                    (builtin "One Step Simplification" (formula "2"))
                                                   (rule "castDel" (formula "2") (term "1,0"))
                                                   (rule "inEqSimp_contradEq7" (formula "2") (term "0,0") (ifseqformula "5"))
                                                   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,0"))
                                                   (rule "mul_literals" (formula "2") (term "0,1,0,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "2") (term "0,0,0,0,0"))
                                                   (rule "add_literals" (formula "2") (term "0,0,0,0,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,0,0"))
                                                   (rule "add_literals" (formula "2") (term "1,1,0,0,0,0"))
                                                   (rule "times_zero_1" (formula "2") (term "1,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "2") (term "0,0,0,0"))
                                                   (rule "leq_literals" (formula "2") (term "0,0,0"))
                                                    (builtin "One Step Simplification" (formula "2"))
                                                   (rule "applyEq" (formula "16") (term "0") (ifseqformula "2"))
                                                   (rule "simplifySelectOfAnon" (formula "2"))
                                                    (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "65")) (ifInst ""  (formula "24")))
                                                   (rule "elementOfArrayRangeConcrete" (formula "2") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "2"))
                                                   (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,0"))
                                                   (rule "inEqSimp_homoInEq0" (formula "2") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "2") (term "1,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "2") (term "0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "2") (term "1,0,0,0"))
                                                   (rule "inEqSimp_subsumption1" (formula "2") (term "0,0,0") (ifseqformula "4"))
                                                   (rule "leq_literals" (formula "2") (term "0,0,0,0"))
                                                    (builtin "One Step Simplification" (formula "2"))
                                                   (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "16"))
                                                   (rule "andLeft" (formula "3"))
                                                   (rule "inEqSimp_homoInEq1" (formula "3"))
                                                   (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                                   (rule "mul_literals" (formula "3") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                   (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                                   (rule "add_literals" (formula "3") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "3") (term "1,0"))
                                                   (rule "add_zero_right" (formula "3") (term "0"))
                                                   (rule "leq_literals" (formula "3"))
                                                   (rule "closeFalse" (formula "3"))
                                                )
                                             )
                                          )
                                          (branch "Case 2"
                                             (rule "allRight" (formula "64") (inst "sk=b_0"))
                                             (rule "impRight" (formula "64"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "polySimp_homoEq" (formula "16") (term "1,0"))
                                             (rule "polySimp_homoEq" (formula "16") (term "0,1,0,1,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "16") (term "1,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,1,1,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,1,1,0,1,0"))
                                             (rule "mul_literals" (formula "16") (term "0,1,0,0,1,1,1,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "16") (term "1,0,1,0"))
                                             (rule "polySimp_mulAssoc" (formula "16") (term "0,1,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "16") (term "0,0,1,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "16") (term "0,1,0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,1,1,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "16") (term "0,0,0,0,1,1,0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "16") (term "0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "12") (term "0"))
                                             (rule "add_zero_right" (formula "12") (term "0,0"))
                                             (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "7"))
                                             (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "7") (term "0"))
                                             (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "2"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "2") (term "0"))
                                             (rule "inEqSimp_homoInEq0" (formula "11") (term "0,0,0"))
                                             (rule "times_zero_2" (formula "11") (term "1,0,0,0,0"))
                                             (rule "add_zero_right" (formula "11") (term "0,0,0,0"))
                                             (rule "inEqSimp_homoInEq1" (formula "27"))
                                             (rule "polySimp_addComm1" (formula "27") (term "0"))
                                             (rule "inEqSimp_homoInEq1" (formula "1"))
                                             (rule "polySimp_addComm1" (formula "1") (term "0"))
                                             (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "32"))
                                             (rule "polySimp_sepNegMonomial" (formula "16") (term "1,0"))
                                             (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0"))
                                             (rule "polySimp_elimOne" (formula "16") (term "0,1,0"))
                                             (rule "polySimp_sepNegMonomial" (formula "16") (term "0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "16") (term "0,0,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "46"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0"))
                                             (rule "polySimp_mulLiterals" (formula "12") (term "0,0"))
                                             (rule "polySimp_elimOne" (formula "12") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                                             (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                                             (rule "polySimp_elimOne" (formula "7") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0"))
                                             (rule "mul_literals" (formula "15") (term "0,1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0"))
                                             (rule "mul_literals" (formula "16") (term "0,1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0"))
                                             (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "27"))
                                             (rule "polySimp_mulComm0" (formula "27") (term "1"))
                                             (rule "polySimp_rightDist" (formula "27") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "27") (term "1,1"))
                                             (rule "mul_literals" (formula "27") (term "0,1"))
                                             (rule "polySimp_elimOne" (formula "27") (term "1,1"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1"))
                                             (rule "mul_literals" (formula "1") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                             (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                             (rule "polySimp_elimOne" (formula "2") (term "0"))
                                             (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
                                             (rule "inEqSimp_homoInEq0" (formula "9") (term "0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0"))
                                             (rule "add_literals" (formula "9") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "9") (term "1,0,0"))
                                             (rule "add_literals" (formula "9") (term "0,0"))
                                             (rule "qeq_literals" (formula "9") (term "0"))
                                              (builtin "One Step Simplification" (formula "9"))
                                             (rule "true_left" (formula "9"))
                                             (rule "inEqSimp_subsumption1" (formula "10") (term "1,0,0") (ifseqformula "7"))
                                             (rule "inEqSimp_homoInEq0" (formula "10") (term "0,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
                                             (rule "polySimp_addComm1" (formula "10") (term "0,0,0,1,0,0"))
                                             (rule "add_literals" (formula "10") (term "0,0,0,0,1,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "10") (term "1,1,0,0,1,0,0"))
                                             (rule "times_zero_1" (formula "10") (term "1,0,0,1,0,0"))
                                             (rule "add_zero_right" (formula "10") (term "0,0,1,0,0"))
                                             (rule "qeq_literals" (formula "10") (term "0,1,0,0"))
                                              (builtin "One Step Simplification" (formula "10"))
                                             (rule "pullOutSelect" (formula "65") (term "0") (inst "selectSK=arr_3"))
                                             (rule "simplifySelectOfStore" (formula "1"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "castDel" (formula "1") (term "1,0"))
                                             (rule "eqSymm" (formula "66"))
                                             (rule "inEqSimp_contradEq3" (formula "1") (term "0,0") (ifseqformula "2"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0,0"))
                                             (rule "add_literals" (formula "1") (term "1,1,0,0,0,0"))
                                             (rule "times_zero_1" (formula "1") (term "1,0,0,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0,0,0"))
                                             (rule "qeq_literals" (formula "1") (term "0,0,0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "simplifySelectOfAnon" (formula "1"))
                                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "63")) (ifInst ""  (formula "22")))
                                             (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
                                             (rule "inEqSimp_subsumption1" (formula "1") (term "1,0,0") (ifseqformula "3"))
                                             (rule "inEqSimp_homoInEq0" (formula "1") (term "0,1,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "1") (term "1,1,0,0,1,0,0"))
                                             (rule "times_zero_1" (formula "1") (term "1,0,0,1,0,0"))
                                             (rule "add_zero_right" (formula "1") (term "0,0,1,0,0"))
                                             (rule "qeq_literals" (formula "1") (term "0,1,0,0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "2"))
                                             (rule "mul_literals" (formula "9") (term "0,0"))
                                             (rule "add_zero_left" (formula "9") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "9"))
                                             (rule "mul_literals" (formula "9") (term "1"))
                                             (rule "inEqSimp_subsumption1" (formula "1") (term "0,0") (ifseqformula "9"))
                                             (rule "leq_literals" (formula "1") (term "0,0,0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "applyEqReverse" (formula "67") (term "1") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "eqSymm" (formula "66"))
                                             (rule "inEqSimp_exactShadow3" (formula "34") (ifseqformula "35"))
                                             (rule "polySimp_mulComm0" (formula "34") (term "0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "34"))
                                             (rule "polySimp_mulLiterals" (formula "34") (term "1"))
                                             (rule "polySimp_elimOne" (formula "34") (term "1"))
                                             (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "27"))
                                             (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                                             (rule "mul_literals" (formula "7") (term "0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "7") (term "0"))
                                             (rule "polySimp_addComm1" (formula "7") (term "0,0"))
                                             (rule "add_literals" (formula "7") (term "0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                                             (rule "polySimp_mulComm0" (formula "7") (term "1"))
                                             (rule "polySimp_rightDist" (formula "7") (term "1"))
                                             (rule "mul_literals" (formula "7") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                                             (rule "polySimp_elimOne" (formula "7") (term "1,1"))
                                             (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "28"))
                                             (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                             (rule "mul_literals" (formula "2") (term "0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                             (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                             (rule "add_literals" (formula "2") (term "0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                             (rule "polySimp_rightDist" (formula "2") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                             (rule "mul_literals" (formula "2") (term "0,1"))
                                             (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                             (rule "nnf_imp2or" (formula "17") (term "0"))
                                             (rule "nnf_imp2or" (formula "18") (term "0"))
                                             (rule "nnf_notAnd" (formula "17") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "17") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "17") (term "0,0,0"))
                                             (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "17") (term "0,1,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,0,0"))
                                             (rule "add_literals" (formula "17") (term "0,0,0,0,0,0"))
                                             (rule "add_zero_left" (formula "17") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "17") (term "1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "17") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "18") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "18") (term "1,0,0"))
                                             (rule "mul_literals" (formula "18") (term "1,0,0,1,0,0"))
                                             (rule "add_zero_right" (formula "18") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                                             (rule "mul_literals" (formula "18") (term "1,1,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "18") (term "0,0,0"))
                                             (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "18") (term "0,1,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "18") (term "0,0,0,0,0"))
                                             (rule "add_literals" (formula "18") (term "0,0,0,0,0,0"))
                                             (rule "add_zero_left" (formula "18") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "18") (term "1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "18") (term "1,0,0,0"))
                                             (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "43") (term "1") (inst "i=i"))
                                             (rule "eqSymm" (formula "43"))
                                             (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "15") (term "0,2,0"))
                                             (rule "polySimp_addComm0" (formula "15") (term "2,0"))
                                             (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "16") (term "0"))
                                             (rule "wellFormedAnon" (formula "16") (term "1,0"))
                                             (rule "replace_known_left" (formula "16") (term "0,1") (ifseqformula "17"))
                                              (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "66")) (ifInst ""  (formula "21")) (ifInst ""  (formula "20")))
                                             (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "17") (term "0") (inst "i=i"))
                                              (builtin "One Step Simplification" (formula "17"))
                                             (rule "translateJavaAddInt" (formula "17") (term "0,2,1,1,0"))
                                             (rule "translateJavaSubInt" (formula "17") (term "1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "17") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "17") (term "1,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "17") (term "0,2,1,1,0"))
                                             (rule "polySimp_addComm0" (formula "17") (term "1,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "17") (term "1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
                                             (rule "nnf_imp2or" (formula "17") (term "0"))
                                             (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "28") (inst "b=b"))
                                              (builtin "One Step Simplification" (formula "28"))
                                             (rule "translateJavaMulInt" (formula "28") (term "1,1,0,0,0"))
                                             (rule "mul_literals" (formula "28") (term "1,1,0,0,0"))
                                             (rule "andLeft" (formula "28"))
                                             (rule "andLeft" (formula "28"))
                                             (rule "andLeft" (formula "28"))
                                             (rule "andLeft" (formula "30"))
                                             (rule "andLeft" (formula "28"))
                                             (rule "andLeft" (formula "28"))
                                             (rule "andLeft" (formula "28"))
                                             (rule "notLeft" (formula "30"))
                                             (rule "notLeft" (formula "29"))
                                             (rule "notLeft" (formula "28"))
                                             (rule "eqSymm" (formula "56"))
                                             (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "54"))
                                              (builtin "One Step Simplification" (formula "4"))
                                             (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "55"))
                                              (builtin "One Step Simplification" (formula "7"))
                                             (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "32") (term "0,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "30"))
                                             (rule "replace_known_left" (formula "12") (term "0,0") (ifseqformula "30"))
                                              (builtin "One Step Simplification" (formula "12"))
                                             (rule "applyEqReverse" (formula "14") (term "0,0,1") (ifseqformula "12"))
                                             (rule "hideAuxiliaryEq" (formula "12"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "31") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_exactShadow3" (formula "29") (ifseqformula "33"))
                                             (rule "mul_literals" (formula "29") (term "0,0"))
                                             (rule "add_zero_left" (formula "29") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "29"))
                                             (rule "mul_literals" (formula "29") (term "1"))
                                             (rule "inEqSimp_subsumption1" (formula "33") (ifseqformula "29"))
                                             (rule "leq_literals" (formula "33") (term "0"))
                                              (builtin "One Step Simplification" (formula "33"))
                                             (rule "true_left" (formula "33"))
                                             (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "31"))
                                             (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                             (rule "mul_literals" (formula "9") (term "0,0,0"))
                                             (rule "polySimp_addComm1" (formula "9") (term "0"))
                                             (rule "add_literals" (formula "9") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                             (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                             (rule "polySimp_elimOne" (formula "9") (term "0"))
                                             (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "32"))
                                             (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                             (rule "mul_literals" (formula "3") (term "0,0,0"))
                                             (rule "polySimp_addComm1" (formula "3") (term "0"))
                                             (rule "add_literals" (formula "3") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                             (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                             (rule "polySimp_elimOne" (formula "3") (term "0"))
                                             (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "52") (term "0"))
                                             (rule "Definition_axiom_for_isClassifiedUntil_in_de_wiesler_Classifier" (formula "41") (term "0") (inst "b=b"))
                                              (builtin "One Step Simplification" (formula "41"))
                                             (rule "translateJavaSubInt" (formula "41") (term "1,1"))
                                             (rule "andLeft" (formula "41"))
                                             (rule "andLeft" (formula "41"))
                                             (rule "andLeft" (formula "41"))
                                             (rule "andLeft" (formula "41"))
                                             (rule "polySimp_elimSub" (formula "45") (term "1"))
                                             (rule "inEqSimp_ltToLeq" (formula "44") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "44") (term "0,0,0"))
                                             (rule "applyEq" (formula "44") (term "0,1,0,0,1,0,0") (ifseqformula "40"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "44") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "44") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "44") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "44") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "44") (term "1,1,1,0,0"))
                                             (rule "Contract_axiom_for_bufferLen_in_Buffers" (formula "54") (term "0"))
                                              (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "51")) (ifInst ""  (formula "77")) (ifInst ""  (formula "51")) (ifInst ""  (formula "27")))
                                             (rule "wellFormedAnon" (formula "54") (term "1,0"))
                                             (rule "replace_known_left" (formula "54") (term "1,1,0") (ifseqformula "21"))
                                              (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "22")))
                                             (rule "inEqSimp_ltToLeq" (formula "54") (term "1,0"))
                                             (rule "polySimp_mulComm0" (formula "54") (term "1,0,0,1,0"))
                                             (rule "polySimp_addComm1" (formula "54") (term "0,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "54") (term "0,1"))
                                             (rule "inEqSimp_commuteLeq" (formula "54") (term "0,0"))
                                             (rule "replace_known_left" (formula "54") (term "0,0") (ifseqformula "13"))
                                              (builtin "One Step Simplification" (formula "54"))
                                             (rule "applyEq" (formula "54") (term "0,0,1") (ifseqformula "55"))
                                             (rule "applyEq" (formula "54") (term "0,1,1") (ifseqformula "55"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "54") (term "0"))
                                             (rule "polySimp_mulLiterals" (formula "54") (term "0,0"))
                                             (rule "polySimp_elimOne" (formula "54") (term "0,0"))
                                             (rule "replace_known_left" (formula "54") (term "0") (ifseqformula "11"))
                                              (builtin "One Step Simplification" (formula "54"))
                                             (rule "andLeft" (formula "54"))
                                             (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "51") (inst "b=b"))
                                              (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "61")) (ifInst ""  (formula "62")) (ifInst ""  (formula "30")) (ifInst ""  (formula "33")))
                                             (rule "translateJavaMulInt" (formula "51") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "51") (term "1,1,0,0"))
                                             (rule "andLeft" (formula "51"))
                                             (rule "andLeft" (formula "51"))
                                             (rule "andLeft" (formula "51"))
                                             (rule "notLeft" (formula "51"))
                                             (rule "eqSymm" (formula "62"))
                                             (rule "inEqSimp_ltToLeq" (formula "52") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "52") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "52") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "52") (term "0,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "51"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "51") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "51") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "51") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "51") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "51") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "51") (term "1,1,1,0,0"))
                                             (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "48") (term "0"))
                                              (builtin "One Step Simplification" (formula "48"))
                                             (rule "translateJavaMod" (formula "48") (term "0"))
                                             (rule "jmod_axiom" (formula "48") (term "0"))
                                             (rule "polySimp_mulLiterals" (formula "48") (term "1,0"))
                                             (rule "polySimp_sepNegMonomial" (formula "48"))
                                             (rule "polySimp_mulLiterals" (formula "48") (term "0"))
                                             (rule "newSym_eq" (formula "48") (inst "l=l_0") (inst "newSymDef=add(mul(begin, Z(0(#))), mul(write, Z(0(#))))"))
                                             (rule "times_zero_1" (formula "48") (term "0,1,1"))
                                             (rule "times_zero_1" (formula "48") (term "1,1,1"))
                                             (rule "add_literals" (formula "48") (term "1,1"))
                                             (rule "add_zero_right" (formula "48") (term "1"))
                                             (rule "applyEq" (formula "49") (term "0,0") (ifseqformula "48"))
                                             (rule "polySimp_homoEq" (formula "49"))
                                             (rule "polySimp_mulLiterals" (formula "49") (term "1,0"))
                                             (rule "polySimp_addComm1" (formula "49") (term "0"))
                                             (rule "polySimp_addComm0" (formula "49") (term "0,0"))
                                             (rule "polySimp_sepPosMonomial" (formula "49"))
                                             (rule "polySimp_mulComm0" (formula "49") (term "1"))
                                             (rule "polySimp_rightDist" (formula "49") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "49") (term "1,1"))
                                             (rule "polySimp_elimOne" (formula "49") (term "1,1"))
                                             (rule "polySimp_mulComm0" (formula "49") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "49") (term "0,1"))
                                             (rule "applyEq" (formula "61") (term "4,0") (ifseqformula "49"))
                                             (rule "applyEq" (formula "42") (term "4,0") (ifseqformula "49"))
                                             (rule "applyEq" (formula "47") (term "0") (ifseqformula "49"))
                                             (rule "inEqSimp_commuteLeq" (formula "47"))
                                             (rule "applyEq" (formula "41") (term "4,0") (ifseqformula "49"))
                                             (rule "applyEq" (formula "46") (term "0") (ifseqformula "49"))
                                             (rule "inEqSimp_homoInEq1" (formula "46"))
                                             (rule "polySimp_mulComm0" (formula "46") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "46") (term "1,0"))
                                             (rule "polySimp_mulAssoc" (formula "46") (term "0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "46") (term "0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "46") (term "0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "46") (term "0"))
                                             (rule "polySimp_addComm0" (formula "46") (term "0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "46") (term "0"))
                                             (rule "add_literals" (formula "46") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "46") (term "1,0"))
                                             (rule "add_zero_right" (formula "46") (term "0"))
                                             (rule "applyEq" (formula "54") (term "1,0") (ifseqformula "49"))
                                             (rule "applyEq" (formula "48") (term "1,0,0") (ifseqformula "49"))
                                             (rule "polySimp_addAssoc" (formula "48") (term "0,0"))
                                             (rule "polySimp_addComm0" (formula "48") (term "0,0,0"))
                                             (rule "polySimp_pullOutFactor2b" (formula "48") (term "0,0"))
                                             (rule "add_literals" (formula "48") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "48") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "48") (term "0,0"))
                                             (rule "applyEq" (formula "16") (term "4,0,2,0") (ifseqformula "49"))
                                             (rule "applyEq" (formula "83") (term "4,1") (ifseqformula "49"))
                                             (rule "applyEq" (formula "19") (term "4,1,1,0") (ifseqformula "49"))
                                             (rule "applyEq" (formula "45") (term "0,1,1") (ifseqformula "49"))
                                             (rule "polySimp_mulComm0" (formula "45") (term "1,1"))
                                             (rule "polySimp_rightDist" (formula "45") (term "1,1"))
                                             (rule "polySimp_mulAssoc" (formula "45") (term "0,1,1"))
                                             (rule "polySimp_mulComm0" (formula "45") (term "0,0,1,1"))
                                             (rule "polySimp_mulLiterals" (formula "45") (term "0,1,1"))
                                             (rule "polySimp_addComm0" (formula "45") (term "1"))
                                             (rule "applyEq" (formula "20") (term "4,1,0,1,1,0") (ifseqformula "49"))
                                             (rule "inEqSimp_invertInEq0" (formula "46"))
                                             (rule "times_zero_2" (formula "46") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "46") (term "0"))
                                             (rule "elimGcdGeq_antec" (formula "46") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
                                             (rule "leq_literals" (formula "46") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "46"))
                                             (rule "times_zero_1" (formula "46") (term "1,0,0,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "46") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "46") (term "0,0,0,0"))
                                             (rule "add_literals" (formula "46") (term "0,0,0,0"))
                                             (rule "polySimp_pullOutFactor0b" (formula "46") (term "0,0"))
                                             (rule "add_literals" (formula "46") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "46") (term "1,0,0"))
                                             (rule "add_literals" (formula "46") (term "0,0"))
                                             (rule "leq_literals" (formula "46") (term "0"))
                                              (builtin "One Step Simplification" (formula "46"))
                                             (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "57") (term "0"))
                                             (rule "pullOutSelect" (formula "57") (term "0") (inst "selectSK=arr_4"))
                                             (rule "simplifySelectOfAnon" (formula "57"))
                                              (builtin "One Step Simplification" (formula "57") (ifInst ""  (formula "64")) (ifInst ""  (formula "8")))
                                             (rule "eqSymm" (formula "58"))
                                             (rule "applyEqReverse" (formula "57") (term "1") (ifseqformula "58"))
                                             (rule "hideAuxiliaryEq" (formula "58"))
                                             (rule "elementOfArrayRangeConcrete" (formula "57") (term "0,0"))
                                             (rule "replace_known_right" (formula "57") (term "0,0,0,0") (ifseqformula "70"))
                                              (builtin "One Step Simplification" (formula "57") (ifInst ""  (formula "59")))
                                             (rule "true_left" (formula "57"))
                                             (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "50"))
                                              (builtin "One Step Simplification" (formula "50"))
                                             (rule "translateJavaMulInt" (formula "50") (term "1,1,1,0,0,0,0"))
                                             (rule "translateJavaSubInt" (formula "50") (term "0,2,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "50") (term "0,2,1,1,0"))
                                             (rule "andLeft" (formula "50"))
                                             (rule "andLeft" (formula "50"))
                                             (rule "andLeft" (formula "50"))
                                             (rule "andLeft" (formula "50"))
                                             (rule "andLeft" (formula "50"))
                                             (rule "andLeft" (formula "50"))
                                             (rule "andLeft" (formula "50"))
                                             (rule "andLeft" (formula "52"))
                                             (rule "notLeft" (formula "50"))
                                             (rule "notLeft" (formula "50"))
                                             (rule "eqSymm" (formula "55"))
                                             (rule "eqSymm" (formula "52"))
                                             (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "67"))
                                              (builtin "One Step Simplification" (formula "7"))
                                             (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "68"))
                                              (builtin "One Step Simplification" (formula "6"))
                                             (rule "polySimp_elimSub" (formula "55") (term "0,2,0"))
                                             (rule "mul_literals" (formula "55") (term "1,0,2,0"))
                                             (rule "eqSymm" (formula "55"))
                                             (rule "polySimp_elimSub" (formula "55") (term "0,2,0"))
                                             (rule "mul_literals" (formula "55") (term "1,0,2,0"))
                                             (rule "eqSymm" (formula "55"))
                                             (rule "polySimp_mulComm0" (formula "52") (term "1,0"))
                                             (rule "polySimp_addComm0" (formula "55") (term "0,2,1"))
                                             (rule "polySimp_addComm0" (formula "55") (term "0,2,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "50"))
                                             (rule "applyEq" (formula "50") (term "0") (ifseqformula "40"))
                                             (rule "applyEq" (formula "51") (term "0") (ifseqformula "40"))
                                             (rule "applyEq" (formula "51") (term "1") (ifseqformula "40"))
                                             (rule "inEqSimp_subsumption1" (formula "32") (ifseqformula "50"))
                                             (rule "leq_literals" (formula "32") (term "0"))
                                              (builtin "One Step Simplification" (formula "32"))
                                             (rule "true_left" (formula "32"))
                                             (rule "inEqSimp_exactShadow3" (formula "49") (ifseqformula "34"))
                                             (rule "mul_literals" (formula "49") (term "0,0"))
                                             (rule "polySimp_addAssoc" (formula "49") (term "0"))
                                             (rule "add_literals" (formula "49") (term "0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "49"))
                                             (rule "mul_literals" (formula "49") (term "1"))
                                             (rule "inEqSimp_subsumption1" (formula "31") (ifseqformula "49"))
                                             (rule "leq_literals" (formula "31") (term "0"))
                                              (builtin "One Step Simplification" (formula "31"))
                                             (rule "true_left" (formula "31"))
                                             (rule "nnf_notAnd" (formula "18") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "18") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
                                             (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                                             (rule "nnf_imp2or" (formula "32") (term "0"))
                                             (rule "nnf_imp2or" (formula "42") (term "0"))
                                             (rule "nnf_imp2or" (formula "56") (term "0"))
                                             (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "20") (term "0,0,1,1,0"))
                                             (rule "polySimp_addComm0" (formula "20") (term "0,1,1,0"))
                                             (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "58") (term "0,0,2,0"))
                                             (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "17") (term "0") (inst "i=i") (inst "j=j_1"))
                                              (builtin "One Step Simplification" (formula "17"))
                                             (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "17") (term "1,0,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "17") (term "0,1,1,0,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
                                             (rule "commute_or" (formula "19") (term "0,0"))
                                             (rule "commute_or" (formula "20") (term "0,0"))
                                             (rule "nnf_notAnd" (formula "32") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "32") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "32") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0"))
                                             (rule "mul_literals" (formula "32") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "32") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0"))
                                             (rule "mul_literals" (formula "32") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "42") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "42") (term "0,0,0"))
                                             (rule "mul_literals" (formula "42") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "42") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "0,0,0"))
                                             (rule "mul_literals" (formula "42") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "42") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "42") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "42") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "42") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "42") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "42") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "42") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "42") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "56") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "56") (term "0,0,0"))
                                             (rule "mul_literals" (formula "56") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "56") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "56") (term "0,0,0"))
                                             (rule "mul_literals" (formula "56") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "56") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "56") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "56") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "56") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "56") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "56") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "56") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "56") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "56") (term "1,1,0,0"))
                                             (rule "nnf_imp2or" (formula "17") (term "0"))
                                             (rule "Definition_axiom_for_count_in_de_wiesler_Buffers" (formula "43") (term "0") (inst "b=b"))
                                             (rule "translateJavaCastInt" (formula "43") (term "0"))
                                             (rule "Definition_axiom_for_isClassifiedWith_in_de_wiesler_Buffers" (formula "41") (term "0") (inst "b=b"))
                                              (builtin "One Step Simplification" (formula "41"))
                                             (rule "translateJavaMulInt" (formula "41") (term "0,4,0,1,0"))
                                             (rule "translateJavaMulInt" (formula "41") (term "3,0,1,0"))
                                             (rule "translateJavaAddInt" (formula "41") (term "4,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "41") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "41") (term "0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "41") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "41") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "41") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "41") (term "1,1,1,0,0"))
                                             (rule "commute_and" (formula "15") (term "1"))
                                             (rule "arrayLengthIsAShort" (formula "36") (term "0"))
                                              (builtin "One Step Simplification" (formula "36"))
                                             (rule "true_left" (formula "36"))
                                             (rule "arrayLengthNotNegative" (formula "36") (term "0"))
                                             (rule "nnf_notAnd" (formula "17") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
                                             (rule "mul_literals" (formula "17") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "17") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
                                             (rule "mul_literals" (formula "17") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
                                             (rule "nnf_imp2or" (formula "41") (term "0"))
                                             (rule "nnf_imp2or" (formula "17") (term "0,1,0"))
                                             (rule "ifthenelse_split" (formula "14") (term "0"))
                                             (branch "j_0 >= 1 TRUE"
                                                (rule "applyEqReverse" (formula "16") (term "1,0,1") (ifseqformula "15"))
                                                (rule "hideAuxiliaryEq" (formula "15"))
                                                (rule "replace_known_left" (formula "15") (term "0") (ifseqformula "14"))
                                                 (builtin "One Step Simplification" (formula "15"))
                                                (rule "andLeft" (formula "15"))
                                                (rule "inEqSimp_commuteGeq" (formula "15"))
                                                (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "14"))
                                                (rule "leq_literals" (formula "13") (term "0"))
                                                 (builtin "One Step Simplification" (formula "13"))
                                                (rule "true_left" (formula "13"))
                                                (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "1"))
                                                (rule "mul_literals" (formula "13") (term "0,0"))
                                                (rule "polySimp_addAssoc" (formula "13") (term "0"))
                                                (rule "add_literals" (formula "13") (term "0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "13"))
                                                (rule "mul_literals" (formula "13") (term "1"))
                                                (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "13"))
                                                (rule "leq_literals" (formula "12") (term "0"))
                                                 (builtin "One Step Simplification" (formula "12"))
                                                (rule "true_left" (formula "12"))
                                                (rule "Contract_axiom_for_countClassOfSliceEq_in_Classifier" (formula "64") (term "0"))
                                                (rule "replace_known_right" (formula "64") (term "0,1,0") (ifseqformula "88"))
                                                 (builtin "One Step Simplification" (formula "64") (ifInst ""  (formula "87")) (ifInst ""  (formula "22")) (ifInst ""  (formula "23")))
                                                (rule "true_left" (formula "64"))
                                                (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "64") (term "0") (inst "i=i"))
                                                (rule "Contract_axiom_for_isClassifiedBlocksRange_in_Classifier" (formula "40") (term "0"))
                                                (rule "translateJavaSubInt" (formula "40") (term "0,0,0,0,0,0,0"))
                                                (rule "replace_known_right" (formula "40") (term "0,1,0") (ifseqformula "88"))
                                                 (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "87")) (ifInst ""  (formula "22")) (ifInst ""  (formula "23")))
                                                (rule "polySimp_elimSub" (formula "40") (term "0,0,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "40") (term "0,0,0,0"))
                                                (rule "add_literals" (formula "40") (term "1,1,0,0,0,0"))
                                                (rule "times_zero_1" (formula "40") (term "1,0,0,0,0"))
                                                (rule "add_zero_right" (formula "40") (term "0,0,0,0"))
                                                (rule "Definition_axiom_for_isClassifiedBlocksRange_in_de_wiesler_Classifier" (formula "41") (term "0") (inst "block=block"))
                                                 (builtin "One Step Simplification" (formula "41"))
                                                (rule "translateJavaMulInt" (formula "41") (term "1,4,0,1,0"))
                                                (rule "translateJavaSubInt" (formula "41") (term "0,1,1,0,0"))
                                                (rule "translateJavaAddInt" (formula "41") (term "3,0,1,0"))
                                                (rule "translateJavaAddInt" (formula "41") (term "0,1,4,0,1,0"))
                                                (rule "translateJavaDivInt" (formula "41") (term "1,1,0,0"))
                                                (rule "translateJavaMulInt" (formula "41") (term "1,3,0,1,0"))
                                                (rule "translateJavaAddInt" (formula "41") (term "4,0,1,0"))
                                                (rule "polySimp_elimSub" (formula "41") (term "0,1,1,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "41") (term "0,1,1,0,0"))
                                                (rule "add_literals" (formula "41") (term "1,1,0,1,1,0,0"))
                                                (rule "times_zero_1" (formula "41") (term "1,0,1,1,0,0"))
                                                (rule "add_zero_right" (formula "41") (term "0,1,1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "41") (term "1,4,0,1,0"))
                                                (rule "polySimp_addComm0" (formula "41") (term "1,1,4,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "41") (term "1,4,0,1,0"))
                                                (rule "mul_literals" (formula "41") (term "0,1,4,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "41") (term "4,0,1,0"))
                                                (rule "polySimp_addComm0" (formula "41") (term "0,4,0,1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "41") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,1,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "41") (term "0,0,0"))
                                                (rule "applyEqRigid" (formula "41") (term "0,1,0,0,1,0,0") (ifseqformula "47"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "41") (term "1,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "41") (term "1,1,0,0"))
                                                (rule "mul_literals" (formula "41") (term "0,1,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "41") (term "1,1,1,0,0"))
                                                (rule "Definition_axiom_for_allElementsCounted_in_de_wiesler_Classifier" (formula "39") (term "0") (inst "b=b") (inst "b_0=b_0"))
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "translateJavaCastInt" (formula "39") (term "0,1"))
                                                (rule "translateJavaSubInt" (formula "39") (term "1,1"))
                                                (rule "andLeft" (formula "39"))
                                                (rule "polySimp_elimSub" (formula "40") (term "1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "40") (term "1"))
                                                (rule "add_literals" (formula "40") (term "1,1,1"))
                                                (rule "times_zero_1" (formula "40") (term "1,1"))
                                                (rule "add_zero_right" (formula "40") (term "1"))
                                                (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,0"))
                                                (rule "applyEq" (formula "40") (term "1,0") (ifseqformula "38"))
                                                (rule "applyEq" (formula "39") (term "0,1,0,0,1,0,0") (ifseqformula "38"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "39") (term "1,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "39") (term "1,1,0,0"))
                                                (rule "mul_literals" (formula "39") (term "0,1,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "39") (term "1,1,1,0,0"))
                                                (rule "nnf_notAnd" (formula "43") (term "0,0"))
                                                (rule "inEqSimp_notGeq" (formula "43") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "43") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "43") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "0,0,0"))
                                                (rule "mul_literals" (formula "43") (term "1,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "43") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "43") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "43") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "43") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "43") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "43") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "43") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "43") (term "1,1,0,0"))
                                                (rule "Contract_axiom_for_countClassOfSliceEq_in_Classifier" (formula "16") (term "0,2,0"))
                                                (rule "replace_known_left" (formula "16") (term "1,0,0") (ifseqformula "24"))
                                                 (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "89")) (ifInst ""  (formula "23")) (ifInst ""  (formula "90")))
                                                (rule "true_left" (formula "16"))
                                                (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "16") (term "0,2,0") (inst "i=i"))
                                                (rule "polySimp_addComm0" (formula "16") (term "2,0"))
                                                (rule "Contract_axiom_for_countClassOfSliceEq_in_Classifier" (formula "90") (term "1"))
                                                (rule "replace_known_right" (formula "1") (term "0,1,0") (ifseqformula "90"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "89")) (ifInst ""  (formula "23")) (ifInst ""  (formula "24")))
                                                (rule "true_left" (formula "1"))
                                                (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "90") (term "1") (inst "i=i"))
                                                (rule "eqSymm" (formula "90"))
                                                (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "19") (term "1,1,0") (inst "i=i"))
                                                (rule "eqSymm" (formula "19") (term "1,0"))
                                                (rule "nnf_notAnd" (formula "17") (term "0,0,1,0"))
                                                (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,1,0"))
                                                (rule "mul_literals" (formula "17") (term "0,1,0,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0,1,0"))
                                                (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0,1,0"))
                                                (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,1,0"))
                                                (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,1,0"))
                                                (rule "add_zero_left" (formula "17") (term "0,0,1,0,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,1,0"))
                                                (rule "arrayLengthNotNegative" (formula "33") (term "1,1"))
                                                (rule "inEqSimp_subsumption1" (formula "33") (ifseqformula "51"))
                                                (rule "leq_literals" (formula "33") (term "0"))
                                                 (builtin "One Step Simplification" (formula "33"))
                                                (rule "true_left" (formula "33"))
                                                (rule "arrayLengthIsAShort" (formula "33") (term "1,1"))
                                                 (builtin "One Step Simplification" (formula "33"))
                                                (rule "true_left" (formula "33"))
                                                (rule "nnf_imp2or" (formula "42") (term "0"))
                                                (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "56"))
                                                 (builtin "One Step Simplification" (formula "56"))
                                                (rule "translateJavaSubInt" (formula "56") (term "3,0,1"))
                                                (rule "andLeft" (formula "56"))
                                                (rule "andLeft" (formula "56"))
                                                (rule "andLeft" (formula "56"))
                                                (rule "andLeft" (formula "57"))
                                                (rule "andLeft" (formula "56"))
                                                (rule "andLeft" (formula "56"))
                                                (rule "andLeft" (formula "56"))
                                                (rule "andLeft" (formula "58"))
                                                (rule "notLeft" (formula "56"))
                                                (rule "notLeft" (formula "56"))
                                                (rule "polySimp_elimSub" (formula "62") (term "3,0"))
                                                (rule "mul_literals" (formula "62") (term "1,3,0"))
                                                (rule "polySimp_addComm0" (formula "62") (term "3,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "61"))
                                                (rule "inEqSimp_commuteLeq" (formula "59"))
                                                (rule "inEqSimp_commuteLeq" (formula "60"))
                                                (rule "inEqSimp_commuteLeq" (formula "56"))
                                                (rule "applyEq" (formula "60") (term "1") (ifseqformula "58"))
                                                (rule "applyEq" (formula "61") (term "0,0") (ifseqformula "53"))
                                                (rule "inEqSimp_commuteGeq" (formula "61"))
                                                (rule "applyEq" (formula "74") (term "0") (ifseqformula "53"))
                                                (rule "applyEq" (formula "55") (term "1,0,2,0") (ifseqformula "58"))
                                                (rule "eqSymm" (formula "55"))
                                                (rule "applyEq" (formula "52") (term "0,1,0") (ifseqformula "58"))
                                                (rule "applyEq" (formula "52") (term "2,0") (ifseqformula "58"))
                                                (rule "applyEq" (formula "59") (term "0") (ifseqformula "58"))
                                                (rule "applyEq" (formula "62") (term "1,3,0") (ifseqformula "58"))
                                                (rule "applyEq" (formula "54") (term "3,0") (ifseqformula "58"))
                                                (rule "applyEq" (formula "62") (term "1,0") (ifseqformula "53"))
                                                (rule "applyEq" (formula "55") (term "1,0,2,0") (ifseqformula "58"))
                                                (rule "eqSymm" (formula "55"))
                                                (rule "applyEq" (formula "61") (term "0") (ifseqformula "58"))
                                                (rule "inEqSimp_exactShadow3" (formula "59") (ifseqformula "61"))
                                                (rule "mul_literals" (formula "59") (term "0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "59"))
                                                (rule "mul_literals" (formula "59") (term "1"))
                                                (rule "nnf_imp2or" (formula "39") (term "0"))
                                                (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "44") (term "0,0,1,0"))
                                                (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "20") (term "0,0,1,1,0") (inst "i=i"))
                                                (rule "polySimp_homoEq" (formula "20") (term "1,0"))
                                                (rule "polySimp_addComm0" (formula "20") (term "0,0,0,1,0"))
                                                (rule "polySimp_addComm1" (formula "20") (term "0,0,1,0"))
                                                (rule "polySimp_addComm1" (formula "20") (term "0,1,0"))
                                                (rule "polySimp_sepPosMonomial" (formula "20") (term "1,0"))
                                                (rule "polySimp_mulComm0" (formula "20") (term "1,1,0"))
                                                (rule "polySimp_rightDist" (formula "20") (term "1,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0"))
                                                (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0"))
                                                (rule "polySimp_rightDist" (formula "20") (term "0,1,1,0"))
                                                (rule "polySimp_mulComm0" (formula "20") (term "0,0,1,1,0"))
                                                (rule "nnf_notAnd" (formula "42") (term "0,0"))
                                                (rule "inEqSimp_notGeq" (formula "42") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "42") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "42") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "0,0,0"))
                                                (rule "mul_literals" (formula "42") (term "1,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "42") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "42") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "42") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "42") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "42") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "42") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "42") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "42") (term "1,1,0,0"))
                                                (rule "nnf_notAnd" (formula "39") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "39") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "39") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "39") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "39") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "39") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "39") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "39") (term "1,1,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "39") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "39") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "39") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "0,0,0"))
                                                (rule "mul_literals" (formula "39") (term "1,0,0,0"))
                                                (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "45") (term "2,0"))
                                                (rule "arrayLengthIsAShort" (formula "30") (term "0"))
                                                 (builtin "One Step Simplification" (formula "30"))
                                                (rule "true_left" (formula "30"))
                                                (rule "arrayLengthNotNegative" (formula "30") (term "0"))
                                                (rule "applyEq" (formula "30") (term "0") (ifseqformula "31"))
                                                (rule "qeq_literals" (formula "30"))
                                                (rule "true_left" (formula "30"))
                                                (rule "arrayLengthIsAShort" (formula "29") (term "0"))
                                                 (builtin "One Step Simplification" (formula "29"))
                                                (rule "true_left" (formula "29"))
                                                (rule "arrayLengthNotNegative" (formula "29") (term "0"))
                                                (rule "applyEq" (formula "29") (term "0") (ifseqformula "30"))
                                                (rule "qeq_literals" (formula "29"))
                                                (rule "true_left" (formula "29"))
                                                (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "43") (term "1,4,0,1,0"))
                                                (rule "cnf_rightDist" (formula "32") (term "0"))
                                                (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "73") (term "0,0,2,0"))
                                                (rule "applyEq" (formula "73") (term "0") (ifseqformula "67"))
                                                (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "41") (term "1,0"))
                                                 (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "76")) (ifInst ""  (formula "75")) (ifInst ""  (formula "53")))
                                                (rule "translateJavaSubInt" (formula "41") (term "0,2,0,1,0,1,0"))
                                                (rule "translateJavaMulInt" (formula "41") (term "1,1,1,0,0,0,1,0"))
                                                (rule "translateJavaSubInt" (formula "41") (term "0,2,1,1,0,1,0"))
                                                (rule "eqSymm" (formula "41") (term "1,0,0,0,1,0"))
                                                (rule "eqSymm" (formula "41") (term "1,0,1,0"))
                                                (rule "polySimp_elimSub" (formula "41") (term "0,2,0,1,0,1,0"))
                                                (rule "mul_literals" (formula "41") (term "1,0,2,0,1,0,1,0"))
                                                (rule "eqSymm" (formula "41") (term "1,0,1,0"))
                                                (rule "polySimp_elimSub" (formula "41") (term "0,2,0,1,0,1,0"))
                                                (rule "mul_literals" (formula "41") (term "1,0,2,0,1,0,1,0"))
                                                (rule "eqSymm" (formula "41") (term "1,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "41") (term "1,0,1,0,0,0,1,0"))
                                                (rule "polySimp_addComm0" (formula "41") (term "0,2,1,1,0,1,0"))
                                                (rule "polySimp_addComm0" (formula "41") (term "0,2,0,1,0,1,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "41") (term "0,0,0,0,0,1,0"))
                                                (rule "applyEq" (formula "41") (term "2,0,1,0,0,0,1,0") (ifseqformula "58"))
                                                (rule "applyEq" (formula "41") (term "3,0,1,0,0,1,0") (ifseqformula "58"))
                                                (rule "replace_known_left" (formula "41") (term "1,0,0,1,0") (ifseqformula "54"))
                                                 (builtin "One Step Simplification" (formula "41"))
                                                (rule "applyEq" (formula "41") (term "1,0,2,0,1,0,1,0") (ifseqformula "58"))
                                                (rule "eqSymm" (formula "41") (term "1,0,1,0"))
                                                (rule "applyEq" (formula "41") (term "0,1,0,0,0,1,0") (ifseqformula "38"))
                                                (rule "replace_known_left" (formula "41") (term "1,0,0,0,1,0") (ifseqformula "31"))
                                                 (builtin "One Step Simplification" (formula "41"))
                                                (rule "applyEq" (formula "41") (term "0,0,0,0,1,0") (ifseqformula "38"))
                                                (rule "replace_known_left" (formula "41") (term "0,0,0,1,0") (ifseqformula "51"))
                                                 (builtin "One Step Simplification" (formula "41"))
                                                (rule "applyEq" (formula "41") (term "0,1,0,0,0,1,0") (ifseqformula "58"))
                                                (rule "applyEq" (formula "41") (term "1,0,2,0,1,0,1,0") (ifseqformula "58"))
                                                (rule "eqSymm" (formula "41") (term "1,0,1,0"))
                                                (rule "replace_known_left" (formula "41") (term "1,0,1,0") (ifseqformula "55"))
                                                 (builtin "One Step Simplification" (formula "41"))
                                                (rule "applyEq" (formula "41") (term "0,0,1,0") (ifseqformula "52"))
                                                (rule "eqSymm" (formula "41") (term "0,1,0"))
                                                (rule "replace_known_left" (formula "41") (term "0,1,0") (ifseqformula "38"))
                                                 (builtin "One Step Simplification" (formula "41"))
                                                (rule "cnf_rightDist" (formula "65") (term "0"))
                                                (rule "jdiv_axiom" (formula "48") (term "0"))
                                                (rule "polySimp_mulLiterals" (formula "48") (term "0,0,2,1"))
                                                (rule "eqSymm" (formula "48"))
                                                (rule "applyEqRigid" (formula "48") (term "1") (ifseqformula "49"))
                                                (rule "inEqSimp_subsumption6" (formula "48") (term "0,0") (ifseqformula "46"))
                                                (rule "greater_literals" (formula "48") (term "0,0,0,0"))
                                                 (builtin "One Step Simplification" (formula "48"))
                                                (rule "times_zero_1" (formula "48") (term "1,0,0,0"))
                                                (rule "leq_literals" (formula "48") (term "0,0,0"))
                                                 (builtin "One Step Simplification" (formula "48"))
                                                (rule "polyDiv_pullOut" (formula "48") (term "0") (inst "polyDivCoeff=l_0"))
                                                (rule "polySimp_mulLiterals" (formula "48") (term "1,0,0,2,0"))
                                                (rule "equal_literals" (formula "48") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "48"))
                                                (rule "polySimp_homoEq" (formula "48"))
                                                (rule "polySimp_pullOutFactor0" (formula "48") (term "0,0,0,1,0"))
                                                (rule "add_literals" (formula "48") (term "1,0,0,0,1,0"))
                                                (rule "times_zero_1" (formula "48") (term "0,0,0,1,0"))
                                                (rule "div_literals" (formula "48") (term "0,0,1,0"))
                                                (rule "add_zero_left" (formula "48") (term "0,1,0"))
                                                (rule "polySimp_pullOutFactor1" (formula "48") (term "0"))
                                                (rule "add_literals" (formula "48") (term "1,0"))
                                                (rule "times_zero_1" (formula "48") (term "0"))
                                                 (builtin "One Step Simplification" (formula "48"))
                                                (rule "true_left" (formula "48"))
                                                (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "16") (term "0,0,2,1,2,0"))
                                                (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "98") (term "0,0,2,0"))
                                                (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "19") (term "0,0,2,0,1,0"))
                                                (rule "Contract_axiom_for_isClassifiedBlock_in_Classifier" (formula "42") (term "0,1,0"))
                                                (rule "replace_known_left" (formula "42") (term "1,0,0,0") (ifseqformula "22"))
                                                 (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "97")) (ifInst ""  (formula "23")) (ifInst ""  (formula "98")))
                                                (rule "true_left" (formula "42"))
                                                (rule "Definition_axiom_for_isClassifiedBlock_in_de_wiesler_Classifier" (formula "42") (term "0,1,0") (inst "bucket=bucket"))
                                                 (builtin "One Step Simplification" (formula "42"))
                                                (rule "inEqSimp_ltToLeq" (formula "42") (term "1,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,1,0,0,1,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "42") (term "0,0,0,1,0"))
                                                (rule "applyEq" (formula "42") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "38"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "1,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "42") (term "1,1,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "42") (term "1,1,0,0,1,0"))
                                                (rule "mul_literals" (formula "42") (term "0,1,1,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "42") (term "1,1,1,0,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "42") (term "1,1,1,0,0,1,0"))
                                                (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "54") (term "0") (inst "i=i") (inst "j=j_1"))
                                                 (builtin "One Step Simplification" (formula "54"))
                                                (rule "inEqSimp_ltToLeq" (formula "54") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "54") (term "1,0,0,1,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "54") (term "1,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "54") (term "1,0,0,1,0,0,1,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "54") (term "0,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "54") (term "1,0,1,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "54") (term "0,0,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "54") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "54") (term "1,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "54") (term "1,1,0,0"))
                                                (rule "mul_literals" (formula "54") (term "0,1,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "54") (term "1,1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "54") (term "1,1,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "54") (term "1,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "54") (term "1,1,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "54") (term "1,1,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "54") (term "1,1,1,0,0,1,0"))
                                                (rule "mul_literals" (formula "54") (term "0,1,1,0,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "54") (term "1,1,1,0,0,1,0"))
                                                (rule "nnf_imp2or" (formula "54") (term "0"))
                                                (rule "nnf_notAnd" (formula "54") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "54") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "54") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "54") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "54") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "54") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "54") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "54") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "54") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "54") (term "1,1,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "54") (term "0,0,0"))
                                                (rule "mul_literals" (formula "54") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "54") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "54") (term "0,0,0"))
                                                (rule "mul_literals" (formula "54") (term "1,0,0,0"))
                                                (rule "nnf_imp2or" (formula "54") (term "0,1,0"))
                                                (rule "nnf_notAnd" (formula "54") (term "0,0,1,0"))
                                                (rule "inEqSimp_notGeq" (formula "54") (term "0,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "54") (term "1,0,0,0,0,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "54") (term "0,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "54") (term "1,0,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "54") (term "1,0,0,0,1,0"))
                                                (rule "mul_literals" (formula "54") (term "0,1,0,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "54") (term "1,1,0,0,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "54") (term "1,1,0,0,0,1,0"))
                                                (rule "inEqSimp_notLeq" (formula "54") (term "1,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "54") (term "1,0,0,1,0,0,1,0"))
                                                (rule "mul_literals" (formula "54") (term "0,1,0,0,1,0,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "54") (term "0,0,1,0,0,1,0"))
                                                (rule "add_literals" (formula "54") (term "0,0,0,1,0,0,1,0"))
                                                (rule "add_zero_left" (formula "54") (term "0,0,1,0,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "54") (term "1,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "54") (term "1,1,0,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "54") (term "1,1,0,0,1,0"))
                                                (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "63") (term "0") (inst "i=i") (inst "j=j_1"))
                                                 (builtin "One Step Simplification" (formula "63"))
                                                (rule "inEqSimp_ltToLeq" (formula "63") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "63") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "63") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "63") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "63") (term "0,0,0,1,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "63") (term "1,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "63") (term "1,0,0,1,0,0,1,0"))
                                                (rule "mul_literals" (formula "63") (term "0,1,0,0,1,0,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "63") (term "0,0,1,0,0,1,0"))
                                                (rule "add_literals" (formula "63") (term "0,0,0,1,0,0,1,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "63") (term "0,0,0,1,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "63") (term "1,0,1,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "63") (term "0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "63") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "63") (term "1,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "63") (term "1,1,0,0"))
                                                (rule "mul_literals" (formula "63") (term "0,1,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "63") (term "1,1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "63") (term "1,1,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "63") (term "1,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "63") (term "1,1,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "63") (term "1,1,0,0,1,0"))
                                                (rule "mul_literals" (formula "63") (term "0,1,1,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "63") (term "1,1,1,0,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "63") (term "1,1,1,0,0,1,0"))
                                                (rule "nnf_imp2or" (formula "63") (term "0"))
                                                (rule "nnf_notAnd" (formula "63") (term "0,0"))
                                                (rule "inEqSimp_notGeq" (formula "63") (term "0,0,0"))
                                                (rule "mul_literals" (formula "63") (term "1,0,0,0,0,0"))
                                                (rule "add_literals" (formula "63") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "63") (term "0,0,0"))
                                                (rule "mul_literals" (formula "63") (term "1,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "63") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "63") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "63") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "63") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "63") (term "0,0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "63") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "63") (term "1,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "63") (term "1,1,0,0"))
                                                (rule "mul_literals" (formula "63") (term "0,1,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "63") (term "1,1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "63") (term "1,1,1,0,0"))
                                                (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "39") (term "1,1,0") (inst "i=i"))
                                                (rule "eqSymm" (formula "39") (term "1,0"))
                                                (rule "Definition_axiom_for_isValidBufferLen_in_de_wiesler_Classifier" (formula "44") (term "0,1,0"))
                                                 (builtin "One Step Simplification" (formula "44"))
                                                (rule "inEqSimp_ltToLeq" (formula "44") (term "0,1,1,0"))
                                                (rule "add_zero_right" (formula "44") (term "0,0,1,1,0"))
                                                (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,1,1,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "44") (term "0,0,1,0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "44") (term "0,1,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "44") (term "0,0,1,1,0"))
                                                (rule "polySimp_elimOne" (formula "44") (term "0,0,1,1,0"))
                                                (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "20") (term "0,0,2,0,1,0"))
                                                (rule "nnf_imp2or" (formula "63") (term "0,1,0"))
                                                (rule "distr_forallAnd" (formula "32"))
                                                (rule "andLeft" (formula "32"))
                                                (rule "commute_or" (formula "17") (term "0,0,1,0"))
                                                (rule "nnf_imp2or" (formula "45") (term "1,1,0"))
                                                (rule "inEqSimp_notGeq" (formula "45") (term "0,1,1,0"))
                                                (rule "mul_literals" (formula "45") (term "1,0,0,0,1,1,0"))
                                                (rule "add_literals" (formula "45") (term "0,0,0,1,1,0"))
                                                (rule "add_zero_left" (formula "45") (term "0,0,1,1,0"))
                                                (rule "nnf_notAnd" (formula "64") (term "0,0,1,0"))
                                                (rule "inEqSimp_notLeq" (formula "64") (term "1,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "64") (term "1,0,0,1,0,0,1,0"))
                                                (rule "mul_literals" (formula "64") (term "0,1,0,0,1,0,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "64") (term "0,0,1,0,0,1,0"))
                                                (rule "add_literals" (formula "64") (term "0,0,0,1,0,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "64") (term "1,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "64") (term "1,1,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "64") (term "1,1,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "64") (term "1,1,1,0,0,1,0"))
                                                (rule "mul_literals" (formula "64") (term "0,1,1,0,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "64") (term "1,1,1,0,0,1,0"))
                                                (rule "inEqSimp_notGeq" (formula "64") (term "0,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "64") (term "1,0,0,0,0,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "64") (term "0,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "64") (term "1,0,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "64") (term "1,0,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "64") (term "1,1,0,0,0,1,0"))
                                                (rule "mul_literals" (formula "64") (term "0,1,0,0,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "64") (term "1,1,0,0,0,1,0"))
                                                (rule "distr_forallAnd" (formula "66"))
                                                (rule "andLeft" (formula "66"))
                                                (rule "Definition_axiom_for_isClassOfSlice_in_de_wiesler_Classifier" (formula "44") (term "0,1,0") (inst "i=i"))
                                                 (builtin "One Step Simplification" (formula "44"))
                                                (rule "inEqSimp_ltToLeq" (formula "44") (term "1,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "44") (term "1,0,0,1,0,0,1,0"))
                                                (rule "polySimp_mulAssoc" (formula "44") (term "0,1,0,0,1,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "44") (term "0,0,1,0,0,1,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "44") (term "0,1,0,0,1,0,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "44") (term "0,0,1,0,0,1,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "44") (term "0,0,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "1,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "44") (term "1,1,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "44") (term "1,1,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "44") (term "1,1,1,0,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "44") (term "1,1,1,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "44") (term "0,1,1,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "44") (term "1,0,1,1,0,0,1,0"))
                                                (rule "mul_literals" (formula "44") (term "0,0,1,1,0,0,1,0"))
                                                (rule "nnf_imp2or" (formula "44") (term "0,1,0"))
                                                (rule "nnf_notAnd" (formula "44") (term "0,0,1,0"))
                                                (rule "inEqSimp_notLeq" (formula "44") (term "1,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "44") (term "1,0,0,1,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "44") (term "0,1,0,0,1,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "44") (term "1,0,1,0,0,1,0,0,1,0"))
                                                (rule "mul_literals" (formula "44") (term "0,0,1,0,0,1,0,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "44") (term "0,0,1,0,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "44") (term "0,0,0,1,0,0,1,0"))
                                                (rule "add_literals" (formula "44") (term "0,0,0,0,1,0,0,1,0"))
                                                (rule "add_zero_left" (formula "44") (term "0,0,0,1,0,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "44") (term "1,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "44") (term "1,1,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "44") (term "1,1,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "44") (term "1,1,1,0,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "44") (term "1,1,1,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "44") (term "0,1,1,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "44") (term "0,1,1,0,0,1,0"))
                                                (rule "inEqSimp_notGeq" (formula "44") (term "0,0,0,1,0"))
                                                (rule "polySimp_mulAssoc" (formula "44") (term "1,0,0,0,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "44") (term "0,1,0,0,0,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "44") (term "1,0,0,0,0,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "0,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "44") (term "1,0,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "44") (term "1,1,0,0,0,1,0"))
                                                (rule "mul_literals" (formula "44") (term "0,1,0,0,0,1,0"))
                                                (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "42") (term "0,0,0"))
                                                 (builtin "One Step Simplification" (formula "42"))
                                                (rule "translateJavaMod" (formula "42") (term "0,0,0"))
                                                (rule "jmod_axiom" (formula "42") (term "0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "42") (term "1,0,0,0"))
                                                (rule "applyEq" (formula "42") (term "0,1,0,0,0") (ifseqformula "49"))
                                                (rule "polySimp_pullOutFactor0" (formula "42") (term "0,0,0"))
                                                (rule "add_literals" (formula "42") (term "1,0,0,0"))
                                                (rule "times_zero_1" (formula "42") (term "0,0,0"))
                                                 (builtin "One Step Simplification" (formula "42"))
                                                (rule "Definition_axiom_for_isClassOfSlice_in_de_wiesler_Classifier" (formula "43") (term "0,1,0,1,0") (inst "i=i"))
                                                 (builtin "One Step Simplification" (formula "43"))
                                                (rule "inEqSimp_ltToLeq" (formula "43") (term "1,0,0,1,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "43") (term "1,0,0,1,0,0,1,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "43") (term "1,1,0,0,1,0,0,1,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "43") (term "0,1,0,0,1,0,0,1,0,1,0"))
                                                (rule "mul_literals" (formula "43") (term "0,0,1,0,0,1,0,0,1,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "43") (term "0,0,1,0,0,1,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "43") (term "0,0,0,1,0,0,1,0,1,0"))
                                                (rule "add_literals" (formula "43") (term "0,0,0,0,1,0,0,1,0,1,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "43") (term "0,0,0,1,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "1,0,0,1,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "43") (term "1,1,0,0,1,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "43") (term "1,1,0,0,1,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "43") (term "1,1,1,0,0,1,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "43") (term "0,1,1,0,0,1,0,1,0"))
                                                (rule "mul_literals" (formula "43") (term "0,0,1,1,0,0,1,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "43") (term "1,0,1,1,0,0,1,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "43") (term "1,0,1,1,0,0,1,0,1,0"))
                                                (rule "onlyCreatedObjectsAreReferencedFinal" (formula "95") (term "0") (ifseqformula "22") (ifseqformula "6"))
                                                (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "77"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "nnf_imp2or" (formula "44") (term "0,1,0,1,0"))
                                                (rule "nnf_notAnd" (formula "44") (term "0,0,1,0,1,0"))
                                                (rule "inEqSimp_notGeq" (formula "44") (term "0,0,0,1,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "44") (term "1,0,0,0,0,0,1,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "44") (term "1,1,0,0,0,0,0,1,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "44") (term "0,1,0,0,0,0,0,1,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "44") (term "0,0,0,0,0,1,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "0,0,0,1,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,0,1,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "44") (term "1,0,0,0,1,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "44") (term "1,1,0,0,0,1,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "44") (term "0,1,0,0,0,1,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "44") (term "1,0,1,0,0,0,1,0,1,0"))
                                                (rule "mul_literals" (formula "44") (term "0,0,1,0,0,0,1,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "44") (term "1,0,1,0,0,0,1,0,1,0"))
                                                (rule "inEqSimp_notLeq" (formula "44") (term "1,0,0,1,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "44") (term "1,0,0,1,0,0,1,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "44") (term "1,1,0,0,1,0,0,1,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "44") (term "0,1,0,0,1,0,0,1,0,1,0"))
                                                (rule "mul_literals" (formula "44") (term "0,0,1,0,0,1,0,0,1,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "44") (term "0,0,1,0,0,1,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "44") (term "0,0,0,1,0,0,1,0,1,0"))
                                                (rule "add_literals" (formula "44") (term "0,0,0,0,1,0,0,1,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "44") (term "1,0,0,1,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "44") (term "1,1,0,0,1,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "44") (term "1,1,0,0,1,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "44") (term "1,1,1,0,0,1,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "44") (term "0,1,1,0,0,1,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "44") (term "1,0,1,1,0,0,1,0,1,0"))
                                                (rule "mul_literals" (formula "44") (term "0,0,1,1,0,0,1,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "44") (term "1,0,1,1,0,0,1,0,1,0"))
                                                (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "41") (term "0,0,2,0,1,0"))
                                                (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "46") (term "0,1,0,1,0"))
                                                 (builtin "One Step Simplification" (formula "46"))
                                                (rule "translateJavaMod" (formula "46") (term "0,1,0,1,0"))
                                                (rule "jmod_axiom" (formula "46") (term "0,1,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "46") (term "1,0,1,0,1,0"))
                                                (rule "polySimp_sepNegMonomial" (formula "46") (term "1,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "46") (term "0,1,0,1,0"))
                                                (rule "ifthenelse_split" (formula "54") (term "0"))
                                                (branch "self.equal_buckets = TRUE TRUE"
                                                   (rule "newSym_eq" (formula "55") (inst "l=l_1") (inst "newSymDef=mul(int::final(buffers,
               de.wiesler.Buffers::$num_buckets),
    Z(0(#)))"))
                                                   (rule "times_zero_1" (formula "55") (term "1,1"))
                                                   (rule "add_zero_right" (formula "55") (term "1"))
                                                   (rule "applyEq" (formula "58") (term "1,1,0,0") (ifseqformula "55"))
                                                   (rule "applyEq" (formula "59") (term "1,0,2,0") (ifseqformula "55"))
                                                   (rule "eqSymm" (formula "59"))
                                                   (rule "applyEq" (formula "67") (term "1,1,1,0,0,1,0") (ifseqformula "55"))
                                                   (rule "applyEq" (formula "64") (term "0") (ifseqformula "55"))
                                                   (rule "applyEq" (formula "56") (term "0,0") (ifseqformula "55"))
                                                   (rule "eqSymm" (formula "56"))
                                                   (rule "applyEq" (formula "66") (term "0") (ifseqformula "55"))
                                                   (rule "inEqSimp_commuteLeq" (formula "66"))
                                                   (rule "applyEq" (formula "65") (term "1") (ifseqformula "55"))
                                                   (rule "applyEq" (formula "67") (term "1,1,1,0,0") (ifseqformula "55"))
                                                   (rule "applyEq" (formula "58") (term "1,1,0,0,1,0") (ifseqformula "55"))
                                                   (rule "applyEq" (formula "44") (term "1,1,1,0,0,1,0") (ifseqformula "56"))
                                                   (rule "applyEq" (formula "45") (term "1,1,0,0") (ifseqformula "56"))
                                                   (rule "applyEq" (formula "59") (term "1,0,2,0") (ifseqformula "55"))
                                                   (rule "eqSymm" (formula "59"))
                                                   (rule "applyEq" (formula "33") (term "1,1,0,0") (ifseqformula "56"))
                                                   (rule "applyEq" (formula "41") (term "1,1,0,0") (ifseqformula "56"))
                                                   (rule "applyEq" (formula "18") (term "2,1,0,1,1,0,1,0") (ifseqformula "56"))
                                                   (rule "applyEq" (formula "46") (term "1,1,0,0") (ifseqformula "56"))
                                                   (rule "applyEq" (formula "70") (term "2,1,0,0,0,0") (ifseqformula "56"))
                                                   (rule "applyEq" (formula "12") (term "0") (ifseqformula "56"))
                                                   (rule "inEqSimp_homoInEq1" (formula "12"))
                                                   (rule "polySimp_mulLiterals" (formula "12") (term "1,0"))
                                                   (rule "polySimp_addComm1" (formula "12") (term "0"))
                                                   (rule "applyEq" (formula "69") (term "1,1,0,0") (ifseqformula "56"))
                                                   (rule "applyEq" (formula "42") (term "1,0") (ifseqformula "56"))
                                                   (rule "applyEq" (formula "5") (term "0") (ifseqformula "56"))
                                                   (rule "inEqSimp_homoInEq1" (formula "5"))
                                                   (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
                                                   (rule "polySimp_addComm1" (formula "5") (term "0"))
                                                   (rule "applyEq" (formula "18") (term "2,1,0,0,1,0,1,0") (ifseqformula "56"))
                                                   (rule "applyEq" (formula "32") (term "0") (ifseqformula "56"))
                                                   (rule "applyEq" (formula "35") (term "0") (ifseqformula "56"))
                                                   (rule "inEqSimp_homoInEq0" (formula "35"))
                                                   (rule "polySimp_mulLiterals" (formula "35") (term "1,0"))
                                                   (rule "polySimp_addComm1" (formula "35") (term "0"))
                                                   (rule "applyEq" (formula "19") (term "2,1,0,0,1,0") (ifseqformula "56"))
                                                   (rule "applyEq" (formula "47") (term "1,0") (ifseqformula "56"))
                                                   (rule "applyEq" (formula "53") (term "0") (ifseqformula "56"))
                                                   (rule "applyEq" (formula "69") (term "2,1,0,0,1,0") (ifseqformula "56"))
                                                   (rule "applyEq" (formula "34") (term "1,1,1,0") (ifseqformula "56"))
                                                   (rule "applyEq" (formula "20") (term "1,1,0,0") (ifseqformula "56"))
                                                   (rule "applyEq" (formula "19") (term "2,1,0,1,1,0") (ifseqformula "56"))
                                                   (rule "applyEq" (formula "70") (term "1,1,1,0") (ifseqformula "56"))
                                                   (rule "applyEq" (formula "21") (term "2,1,0,2,1,1,1,0") (ifseqformula "56"))
                                                   (rule "applyEq" (formula "40") (term "1") (ifseqformula "56"))
                                                   (rule "applyEq" (formula "62") (term "1") (ifseqformula "55"))
                                                   (rule "applyEq" (formula "20") (term "2,1,0,1,1,0") (ifseqformula "56"))
                                                   (rule "applyEq" (formula "21") (term "2,1,0,0,1,0,1,1,0") (ifseqformula "56"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "12"))
                                                   (rule "polySimp_mulComm0" (formula "12") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "12") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
                                                   (rule "mul_literals" (formula "12") (term "0,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                                   (rule "polySimp_mulComm0" (formula "5") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "5") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                                                   (rule "mul_literals" (formula "5") (term "0,1"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "35"))
                                                   (rule "polySimp_mulComm0" (formula "35") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "35") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "35") (term "1,1"))
                                                   (rule "mul_literals" (formula "35") (term "0,1"))
                                                   (rule "inEqSimp_subsumption6" (formula "53") (ifseqformula "64"))
                                                   (rule "mul_literals" (formula "53") (term "1,1,0"))
                                                   (rule "greater_literals" (formula "53") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "53"))
                                                   (rule "leq_literals" (formula "53") (term "0"))
                                                    (builtin "One Step Simplification" (formula "53"))
                                                   (rule "true_left" (formula "53"))
                                                   (rule "elimGcdLeq_antec" (formula "32") (inst "elimGcdRightDiv=Z(6(5(2(#))))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(2(#))"))
                                                   (rule "neg_literal" (formula "32") (term "0,0,0,0,0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "32") (term "1,0,1,0"))
                                                   (rule "mul_literals" (formula "32") (term "0,1,0,0,0,0,1,0"))
                                                   (rule "leq_literals" (formula "32") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "32"))
                                                   (rule "mul_literals" (formula "32") (term "1,0,0,0,0,0"))
                                                   (rule "polySimp_addLiterals" (formula "32") (term "0,0,0,0"))
                                                   (rule "add_zero_right" (formula "32") (term "0,0,0,0"))
                                                   (rule "polySimp_pullOutFactor0b" (formula "32") (term "0,0"))
                                                   (rule "add_literals" (formula "32") (term "1,1,0,0"))
                                                   (rule "times_zero_1" (formula "32") (term "1,0,0"))
                                                   (rule "add_zero_right" (formula "32") (term "0,0"))
                                                   (rule "qeq_literals" (formula "32") (term "0"))
                                                    (builtin "One Step Simplification" (formula "32"))
                                                   (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "12"))
                                                   (rule "mul_literals" (formula "14") (term "0,0"))
                                                   (rule "polySimp_addAssoc" (formula "14") (term "0"))
                                                   (rule "add_literals" (formula "14") (term "0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                                                   (rule "mul_literals" (formula "14") (term "1"))
                                                   (rule "inEqSimp_subsumption6" (formula "14") (ifseqformula "64"))
                                                   (rule "greater_literals" (formula "14") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "14"))
                                                   (rule "mul_literals" (formula "14") (term "1,0"))
                                                   (rule "leq_literals" (formula "14") (term "0"))
                                                    (builtin "One Step Simplification" (formula "14"))
                                                   (rule "true_left" (formula "14"))
                                                   (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "5"))
                                                   (rule "mul_literals" (formula "13") (term "0,0"))
                                                   (rule "polySimp_addAssoc" (formula "13") (term "0"))
                                                   (rule "add_literals" (formula "13") (term "0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "13"))
                                                   (rule "mul_literals" (formula "13") (term "1"))
                                                   (rule "inEqSimp_subsumption6" (formula "13") (ifseqformula "64"))
                                                   (rule "greater_literals" (formula "13") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "13"))
                                                   (rule "mul_literals" (formula "13") (term "1,0"))
                                                   (rule "leq_literals" (formula "13") (term "0"))
                                                    (builtin "One Step Simplification" (formula "13"))
                                                   (rule "true_left" (formula "13"))
                                                   (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "45") (term "0,1,0,1,0"))
                                                   (rule "arrayLengthIsAShort" (formula "64") (term "0"))
                                                    (builtin "One Step Simplification" (formula "64"))
                                                   (rule "true_left" (formula "64"))
                                                   (rule "arrayLengthNotNegative" (formula "64") (term "0"))
                                                   (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "43") (term "0"))
                                                    (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "79")) (ifInst ""  (formula "60")))
                                                   (rule "translateJavaSubInt" (formula "43") (term "3,0,1,0"))
                                                   (rule "polySimp_elimSub" (formula "43") (term "3,0,1,0"))
                                                   (rule "mul_literals" (formula "43") (term "1,3,0,1,0"))
                                                   (rule "polySimp_addComm0" (formula "43") (term "3,0,1,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "43") (term "1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "43") (term "0,1,0,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "43") (term "1,0,0,0,0,0"))
                                                   (rule "replace_known_left" (formula "43") (term "1,0,0,0,0,0") (ifseqformula "59"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "inEqSimp_commuteLeq" (formula "43") (term "1,1,0,0,0"))
                                                   (rule "applyEq" (formula "43") (term "1,1,1,0,0,0") (ifseqformula "61"))
                                                   (rule "replace_known_left" (formula "43") (term "1,1,0,0,0") (ifseqformula "65"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "applyEq" (formula "43") (term "0,1,0,0,0") (ifseqformula "61"))
                                                   (rule "replace_known_left" (formula "43") (term "1,0,0,0") (ifseqformula "63"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "applyEq" (formula "43") (term "1,0,1,0") (ifseqformula "56"))
                                                   (rule "applyEq" (formula "43") (term "0,0,1,0,0") (ifseqformula "56"))
                                                   (rule "inEqSimp_commuteGeq" (formula "43") (term "1,0,0"))
                                                   (rule "applyEq" (formula "43") (term "1,3,0,1,0") (ifseqformula "61"))
                                                   (rule "applyEq" (formula "43") (term "0,1,0,0,0") (ifseqformula "61"))
                                                   (rule "eqSymm" (formula "43") (term "1,0,0,0"))
                                                   (rule "replace_known_left" (formula "43") (term "1,0,0,0") (ifseqformula "54"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "applyEq" (formula "43") (term "0,0,0,0,0") (ifseqformula "56"))
                                                   (rule "replace_known_right" (formula "43") (term "0,0,0,0") (ifseqformula "80"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "applyEq" (formula "43") (term "0,0,0") (ifseqformula "61"))
                                                   (rule "inEqSimp_commuteLeq" (formula "43") (term "0,0"))
                                                   (rule "replace_known_left" (formula "43") (term "0,0") (ifseqformula "66"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "arrayLengthIsAShort" (formula "62") (term "0"))
                                                    (builtin "One Step Simplification" (formula "62"))
                                                   (rule "true_left" (formula "62"))
                                                   (rule "arrayLengthNotNegative" (formula "62") (term "0"))
                                                   (rule "inEqSimp_subsumption1" (formula "62") (ifseqformula "63"))
                                                   (rule "leq_literals" (formula "62") (term "0"))
                                                    (builtin "One Step Simplification" (formula "62"))
                                                   (rule "true_left" (formula "62"))
                                                   (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "44") (term "0,1,0,1,0,1,0"))
                                                   (rule "commute_or" (formula "34") (term "0"))
                                                   (rule "commute_or" (formula "70") (term "0"))
                                                   (rule "commute_or" (formula "67") (term "0,0,1,0"))
                                                   (rule "cnf_rightDist" (formula "46") (term "0"))
                                                   (rule "commute_or" (formula "57") (term "0,0,1,0"))
                                                   (rule "distr_forallAnd" (formula "46"))
                                                   (rule "andLeft" (formula "46"))
                                                   (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "43") (term "1"))
                                                    (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "82")) (ifInst ""  (formula "81")) (ifInst ""  (formula "54")) (ifInst ""  (formula "57")))
                                                   (rule "translateJavaSubInt" (formula "43") (term "0,2,1,1,0,1"))
                                                   (rule "translateJavaMulInt" (formula "43") (term "1,1,0,0,0,1"))
                                                   (rule "translateJavaSubInt" (formula "43") (term "0,2,0,1,0,1"))
                                                   (rule "eqSymm" (formula "43") (term "1,0,1"))
                                                   (rule "polySimp_elimSub" (formula "43") (term "0,2,1,1,0,1"))
                                                   (rule "mul_literals" (formula "43") (term "1,0,2,1,1,0,1"))
                                                   (rule "polySimp_elimSub" (formula "43") (term "0,2,0,1,0,1"))
                                                   (rule "mul_literals" (formula "43") (term "1,0,2,0,1,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "43") (term "1,1,0,0,0,1"))
                                                   (rule "eqSymm" (formula "43") (term "1,0,0,0,1"))
                                                   (rule "polySimp_addComm0" (formula "43") (term "0,2,1,1,0,1"))
                                                   (rule "polySimp_addComm0" (formula "43") (term "0,2,0,1,0,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "43") (term "0,0,0,0,0,1"))
                                                   (rule "applyEq" (formula "43") (term "0,0,1,0,0,0,1") (ifseqformula "62"))
                                                   (rule "eqSymm" (formula "43") (term "1,0,0,0,1"))
                                                   (rule "replace_known_left" (formula "43") (term "1,0,0,0,1") (ifseqformula "40"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "applyEq" (formula "43") (term "1,0,2,0,1,0,1") (ifseqformula "62"))
                                                   (rule "eqSymm" (formula "43") (term "1,0,1"))
                                                   (rule "applyEq" (formula "43") (term "0,0,0,0,0,1") (ifseqformula "40"))
                                                   (rule "applyEq" (formula "43") (term "3,0,1,0,0,1") (ifseqformula "62"))
                                                   (rule "applyEq" (formula "43") (term "0,1,0,0,0,1") (ifseqformula "40"))
                                                   (rule "applyEq" (formula "43") (term "1,0,2,0,1,0,1") (ifseqformula "62"))
                                                   (rule "eqSymm" (formula "43") (term "1,0,1"))
                                                   (rule "replace_known_left" (formula "43") (term "1,0,1") (ifseqformula "59"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "inEqSimp_subsumption6" (formula "43") (term "0,0,0,1") (ifseqformula "64"))
                                                   (rule "mul_literals" (formula "43") (term "1,1,0,0,0,0,1"))
                                                   (rule "greater_literals" (formula "43") (term "0,0,0,0,0,1"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "leq_literals" (formula "43") (term "0,0,0,0,1"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "inEqSimp_subsumption4" (formula "43") (term "0,0,1") (ifseqformula "32"))
                                                   (rule "mul_literals" (formula "43") (term "0,1,0,0,0,1"))
                                                   (rule "greater_literals" (formula "43") (term "0,0,0,0,1"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "leq_literals" (formula "43") (term "0,0,0,1"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "onlyCreatedObjectsAreReferencedFinal" (formula "57") (term "0") (ifseqformula "23") (ifseqformula "7"))
                                                   (rule "applyEq" (formula "57") (term "0,0") (ifseqformula "58"))
                                                   (rule "replace_known_right" (formula "57") (term "0") (ifseqformula "82"))
                                                    (builtin "One Step Simplification" (formula "57"))
                                                   (rule "applyEq" (formula "57") (term "1,0") (ifseqformula "58"))
                                                   (rule "commute_or_2" (formula "47") (term "0"))
                                                   (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "43") (term "0,0") (inst "i=i") (inst "j=j_1"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "inEqSimp_ltToLeq" (formula "43") (term "1,0,0,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "43") (term "1,0,0,1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "43") (term "0,1,0,0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "43") (term "0,0,1,0,0,1,0,0"))
                                                   (rule "add_literals" (formula "43") (term "0,0,0,1,0,0,1,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "43") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "43") (term "1,0,0,1,0,0,0"))
                                                   (rule "mul_literals" (formula "43") (term "0,1,0,0,1,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "43") (term "0,0,1,0,0,0"))
                                                   (rule "add_literals" (formula "43") (term "0,0,0,1,0,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "43") (term "1,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "43") (term "0,0,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "43") (term "0,0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "1,0,0,1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "43") (term "1,1,0,0,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "43") (term "1,1,0,0,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "43") (term "1,1,1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "43") (term "0,1,1,0,0,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "43") (term "1,1,1,0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "1,0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "43") (term "1,1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "43") (term "1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "43") (term "0,1,1,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "43") (term "1,1,1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "43") (term "1,1,1,0,0,0"))
                                                   (rule "nnf_imp2or" (formula "43") (term "0,0"))
                                                   (rule "nnf_notAnd" (formula "43") (term "0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "43") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "43") (term "1,0,0,1,0,0,0"))
                                                   (rule "mul_literals" (formula "43") (term "0,1,0,0,1,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "43") (term "0,0,1,0,0,0"))
                                                   (rule "add_literals" (formula "43") (term "0,0,0,1,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "1,0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "43") (term "1,1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "43") (term "1,1,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "43") (term "1,1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "43") (term "0,1,1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "43") (term "1,1,1,0,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "43") (term "0,0,0,0"))
                                                   (rule "mul_literals" (formula "43") (term "1,0,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "43") (term "0,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "0,0,0,0"))
                                                   (rule "mul_literals" (formula "43") (term "1,0,0,0,0"))
                                                   (rule "nnf_imp2or" (formula "43") (term "0,1,0,0"))
                                                   (rule "nnf_notAnd" (formula "43") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "43") (term "1,0,0,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "43") (term "1,0,0,1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "43") (term "0,1,0,0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "43") (term "0,0,1,0,0,1,0,0"))
                                                   (rule "add_literals" (formula "43") (term "0,0,0,1,0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "1,0,0,1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "43") (term "1,1,0,0,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "43") (term "1,1,0,0,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "43") (term "1,1,1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "43") (term "0,1,1,0,0,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "43") (term "1,1,1,0,0,1,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "43") (term "0,0,0,1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,0,0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "0,0,0,1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,0,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "43") (term "1,0,0,0,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "43") (term "1,1,0,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "43") (term "0,1,0,0,0,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "43") (term "1,1,0,0,0,1,0,0"))
                                                   (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "43") (term "0,0,1") (inst "i=i") (inst "j=j_1"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "inEqSimp_ltToLeq" (formula "43") (term "1,0,0,1,0,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,1,0,0,1,0,0,1"))
                                                   (rule "inEqSimp_ltToLeq" (formula "43") (term "1,0,0,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,1,0,0,0,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "43") (term "0,0,0,0,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "43") (term "1,0,1,0,0,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "43") (term "0,0,0,1,0,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "1,0,0,1,0,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "43") (term "1,1,0,0,1,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "43") (term "1,1,0,0,1,0,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "43") (term "1,1,1,0,0,1,0,0,1"))
                                                   (rule "mul_literals" (formula "43") (term "0,1,1,0,0,1,0,0,1"))
                                                   (rule "polySimp_elimOne" (formula "43") (term "1,1,1,0,0,1,0,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "1,0,0,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "43") (term "1,1,0,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "43") (term "1,1,0,0,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "43") (term "1,1,1,0,0,0,1"))
                                                   (rule "mul_literals" (formula "43") (term "0,1,1,0,0,0,1"))
                                                   (rule "polySimp_elimOne" (formula "43") (term "1,1,1,0,0,0,1"))
                                                   (rule "nnf_imp2or" (formula "43") (term "0,0,1"))
                                                   (rule "nnf_notAnd" (formula "43") (term "0,0,0,1"))
                                                   (rule "inEqSimp_notLeq" (formula "43") (term "1,0,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "43") (term "1,0,0,1,0,0,0,1"))
                                                   (rule "mul_literals" (formula "43") (term "0,1,0,0,1,0,0,0,1"))
                                                   (rule "polySimp_addAssoc" (formula "43") (term "0,0,1,0,0,0,1"))
                                                   (rule "add_literals" (formula "43") (term "0,0,0,1,0,0,0,1"))
                                                   (rule "add_zero_left" (formula "43") (term "0,0,1,0,0,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "1,0,0,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "43") (term "1,1,0,0,0,1"))
                                                   (rule "polySimp_elimOne" (formula "43") (term "1,1,0,0,0,1"))
                                                   (rule "inEqSimp_notGeq" (formula "43") (term "0,0,0,0,1"))
                                                   (rule "mul_literals" (formula "43") (term "1,0,0,0,0,0,0,1"))
                                                   (rule "add_zero_right" (formula "43") (term "0,0,0,0,0,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "0,0,0,0,1"))
                                                   (rule "mul_literals" (formula "43") (term "1,0,0,0,0,1"))
                                                   (rule "nnf_imp2or" (formula "43") (term "0,1,0,0,1"))
                                                   (rule "nnf_notAnd" (formula "43") (term "0,0,1,0,0,1"))
                                                   (rule "inEqSimp_notLeq" (formula "43") (term "1,0,0,1,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "43") (term "1,0,0,1,0,0,1,0,0,1"))
                                                   (rule "mul_literals" (formula "43") (term "0,1,0,0,1,0,0,1,0,0,1"))
                                                   (rule "polySimp_addAssoc" (formula "43") (term "0,0,1,0,0,1,0,0,1"))
                                                   (rule "add_literals" (formula "43") (term "0,0,0,1,0,0,1,0,0,1"))
                                                   (rule "add_zero_left" (formula "43") (term "0,0,1,0,0,1,0,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "1,0,0,1,0,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "43") (term "1,1,0,0,1,0,0,1"))
                                                   (rule "polySimp_elimOne" (formula "43") (term "1,1,0,0,1,0,0,1"))
                                                   (rule "inEqSimp_notGeq" (formula "43") (term "0,0,0,1,0,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,0,0,0,1,0,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "0,0,0,1,0,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,0,1,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "43") (term "1,0,0,0,1,0,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "43") (term "1,1,0,0,0,1,0,0,1"))
                                                   (rule "mul_literals" (formula "43") (term "0,1,0,0,0,1,0,0,1"))
                                                   (rule "polySimp_elimOne" (formula "43") (term "1,1,0,0,0,1,0,0,1"))
                                                   (rule "cnf_rightDist" (formula "46") (term "0"))
                                                   (rule "commute_or" (formula "47") (term "0,0"))
                                                   (rule "all_pull_out3" (formula "18") (term "0"))
                                                   (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "43") (term "1,1"))
                                                    (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "80")) (ifInst ""  (formula "61")))
                                                   (rule "translateJavaSubInt" (formula "43") (term "3,0,1,1,1"))
                                                   (rule "polySimp_elimSub" (formula "43") (term "3,0,1,1,1"))
                                                   (rule "mul_literals" (formula "43") (term "1,3,0,1,1,1"))
                                                   (rule "polySimp_addComm0" (formula "43") (term "3,0,1,1,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "43") (term "1,0,1,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "43") (term "1,1,0,0,1,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "43") (term "1,0,0,0,0,1,1"))
                                                   (rule "replace_known_left" (formula "43") (term "1,0,0,0,0,1,1") (ifseqformula "60"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "inEqSimp_commuteLeq" (formula "43") (term "0,1,0,0,1,1"))
                                                   (rule "applyEq" (formula "43") (term "0,0,1,0,0,1,1") (ifseqformula "62"))
                                                   (rule "replace_known_left" (formula "43") (term "0,1,0,0,1,1") (ifseqformula "64"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "applyEq" (formula "43") (term "0,1,0,0,0,1,1") (ifseqformula "62"))
                                                   (rule "eqSymm" (formula "43") (term "1,0,0,0,1,1"))
                                                   (rule "replace_known_left" (formula "43") (term "1,0,0,0,1,1") (ifseqformula "55"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "applyEq" (formula "43") (term "1,1,0,1,1") (ifseqformula "62"))
                                                   (rule "applyEq" (formula "43") (term "1,3,0,1,1,1") (ifseqformula "62"))
                                                   (rule "applyEq" (formula "43") (term "0,0,1,0,1,1") (ifseqformula "57"))
                                                   (rule "replace_known_left" (formula "43") (term "1,0,1,1") (ifseqformula "67"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "applyEq" (formula "43") (term "0,0,0,0,1,1") (ifseqformula "57"))
                                                   (rule "replace_known_right" (formula "43") (term "0,0,0,1,1") (ifseqformula "81"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "applyEq" (formula "43") (term "1,0,1,1,1") (ifseqformula "57"))
                                                   (rule "applyEq" (formula "43") (term "1,0,1,1") (ifseqformula "62"))
                                                   (rule "replace_known_left" (formula "43") (term "0,1,1") (ifseqformula "66"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "distr_forallAnd" (formula "46"))
                                                   (rule "andLeft" (formula "46"))
                                                   (rule "all_pull_out3" (formula "45") (term "0"))
                                                   (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "43") (term "0,1,1"))
                                                   (rule "replace_known_right" (formula "43") (term "0,0,0") (ifseqformula "83"))
                                                    (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "23")))
                                                   (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "44") (term "0,1,1") (inst "i=i") (inst "j=j_1"))
                                                    (builtin "One Step Simplification" (formula "44"))
                                                   (rule "inEqSimp_ltToLeq" (formula "44") (term "1,0,0,1,0,1,1"))
                                                   (rule "polySimp_rightDist" (formula "44") (term "1,0,0,1,0,0,1,0,1,1"))
                                                   (rule "mul_literals" (formula "44") (term "0,1,0,0,1,0,0,1,0,1,1"))
                                                   (rule "polySimp_addAssoc" (formula "44") (term "0,0,1,0,0,1,0,1,1"))
                                                   (rule "add_literals" (formula "44") (term "0,0,0,1,0,0,1,0,1,1"))
                                                   (rule "inEqSimp_ltToLeq" (formula "44") (term "1,0,0,1,1"))
                                                   (rule "polySimp_rightDist" (formula "44") (term "1,0,0,1,0,0,1,1"))
                                                   (rule "mul_literals" (formula "44") (term "0,1,0,0,1,0,0,1,1"))
                                                   (rule "polySimp_addAssoc" (formula "44") (term "0,0,1,0,0,1,1"))
                                                   (rule "add_literals" (formula "44") (term "0,0,0,1,0,0,1,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "44") (term "0,0,0,1,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "44") (term "0,0,0,1,0,1,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "44") (term "1,0,1,0,1,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "1,0,0,1,0,1,1"))
                                                   (rule "polySimp_mulComm0" (formula "44") (term "1,1,0,0,1,0,1,1"))
                                                   (rule "polySimp_rightDist" (formula "44") (term "1,1,0,0,1,0,1,1"))
                                                   (rule "polySimp_mulLiterals" (formula "44") (term "1,1,1,0,0,1,0,1,1"))
                                                   (rule "mul_literals" (formula "44") (term "0,1,1,0,0,1,0,1,1"))
                                                   (rule "polySimp_elimOne" (formula "44") (term "1,1,1,0,0,1,0,1,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "1,0,0,1,1"))
                                                   (rule "polySimp_mulComm0" (formula "44") (term "1,1,0,0,1,1"))
                                                   (rule "polySimp_rightDist" (formula "44") (term "1,1,0,0,1,1"))
                                                   (rule "polySimp_mulLiterals" (formula "44") (term "1,1,1,0,0,1,1"))
                                                   (rule "mul_literals" (formula "44") (term "0,1,1,0,0,1,1"))
                                                   (rule "polySimp_elimOne" (formula "44") (term "1,1,1,0,0,1,1"))
                                                   (rule "nnf_imp2or" (formula "44") (term "0,1,1"))
                                                   (rule "nnf_notAnd" (formula "44") (term "0,0,1,1"))
                                                   (rule "inEqSimp_notLeq" (formula "44") (term "1,0,0,1,1"))
                                                   (rule "polySimp_rightDist" (formula "44") (term "1,0,0,1,0,0,1,1"))
                                                   (rule "mul_literals" (formula "44") (term "0,1,0,0,1,0,0,1,1"))
                                                   (rule "polySimp_addAssoc" (formula "44") (term "0,0,1,0,0,1,1"))
                                                   (rule "add_literals" (formula "44") (term "0,0,0,1,0,0,1,1"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "44") (term "1,0,0,1,1"))
                                                   (rule "polySimp_mulComm0" (formula "44") (term "1,1,0,0,1,1"))
                                                   (rule "polySimp_rightDist" (formula "44") (term "1,1,0,0,1,1"))
                                                   (rule "mul_literals" (formula "44") (term "0,1,1,0,0,1,1"))
                                                   (rule "polySimp_mulLiterals" (formula "44") (term "1,1,1,0,0,1,1"))
                                                   (rule "polySimp_elimOne" (formula "44") (term "1,1,1,0,0,1,1"))
                                                   (rule "inEqSimp_notGeq" (formula "44") (term "0,0,0,1,1"))
                                                   (rule "mul_literals" (formula "44") (term "1,0,0,0,0,0,1,1"))
                                                   (rule "add_zero_right" (formula "44") (term "0,0,0,0,0,1,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "0,0,0,1,1"))
                                                   (rule "mul_literals" (formula "44") (term "1,0,0,0,1,1"))
                                                   (rule "nnf_imp2or" (formula "44") (term "0,1,0,1,1"))
                                                   (rule "nnf_notAnd" (formula "44") (term "0,0,1,0,1,1"))
                                                   (rule "inEqSimp_notLeq" (formula "44") (term "1,0,0,1,0,1,1"))
                                                   (rule "polySimp_rightDist" (formula "44") (term "1,0,0,1,0,0,1,0,1,1"))
                                                   (rule "mul_literals" (formula "44") (term "0,1,0,0,1,0,0,1,0,1,1"))
                                                   (rule "polySimp_addAssoc" (formula "44") (term "0,0,1,0,0,1,0,1,1"))
                                                   (rule "add_literals" (formula "44") (term "0,0,0,1,0,0,1,0,1,1"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "44") (term "1,0,0,1,0,1,1"))
                                                   (rule "polySimp_mulComm0" (formula "44") (term "1,1,0,0,1,0,1,1"))
                                                   (rule "polySimp_rightDist" (formula "44") (term "1,1,0,0,1,0,1,1"))
                                                   (rule "polySimp_mulLiterals" (formula "44") (term "1,1,1,0,0,1,0,1,1"))
                                                   (rule "mul_literals" (formula "44") (term "0,1,1,0,0,1,0,1,1"))
                                                   (rule "polySimp_elimOne" (formula "44") (term "1,1,1,0,0,1,0,1,1"))
                                                   (rule "inEqSimp_notGeq" (formula "44") (term "0,0,0,1,0,1,1"))
                                                   (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,0,0,0,1,0,1,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "0,0,0,1,0,1,1"))
                                                   (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,0,1,0,1,1"))
                                                   (rule "polySimp_rightDist" (formula "44") (term "1,0,0,0,1,0,1,1"))
                                                   (rule "polySimp_mulLiterals" (formula "44") (term "1,1,0,0,0,1,0,1,1"))
                                                   (rule "mul_literals" (formula "44") (term "0,1,0,0,0,1,0,1,1"))
                                                   (rule "polySimp_elimOne" (formula "44") (term "1,1,0,0,0,1,0,1,1"))
                                                   (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "43") (term "0,1"))
                                                   (rule "replace_known_right" (formula "43") (term "0,0,0") (ifseqformula "84"))
                                                    (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "23")))
                                                   (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "44") (term "0,0") (inst "i=i") (inst "j=j_1"))
                                                    (builtin "One Step Simplification" (formula "44"))
                                                   (rule "inEqSimp_ltToLeq" (formula "44") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "44") (term "1,0,0,1,0,0,0"))
                                                   (rule "mul_literals" (formula "44") (term "0,1,0,0,1,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "44") (term "0,0,1,0,0,0"))
                                                   (rule "add_literals" (formula "44") (term "0,0,0,1,0,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "44") (term "1,0,0,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "44") (term "1,0,0,1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "44") (term "0,1,0,0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "44") (term "0,0,1,0,0,1,0,0"))
                                                   (rule "add_literals" (formula "44") (term "0,0,0,1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "44") (term "1,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "44") (term "0,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "44") (term "0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "1,0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "44") (term "1,1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "44") (term "1,1,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "44") (term "1,1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "44") (term "0,1,1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "44") (term "1,1,1,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "1,0,0,1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "44") (term "1,1,0,0,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "44") (term "1,1,0,0,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "44") (term "1,1,1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "44") (term "0,1,1,0,0,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "44") (term "1,1,1,0,0,1,0,0"))
                                                   (rule "nnf_imp2or" (formula "44") (term "0,0"))
                                                   (rule "nnf_notAnd" (formula "44") (term "0,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "44") (term "0,0,0,0"))
                                                   (rule "mul_literals" (formula "44") (term "1,0,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "44") (term "0,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "0,0,0,0"))
                                                   (rule "mul_literals" (formula "44") (term "1,0,0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "44") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "44") (term "1,0,0,1,0,0,0"))
                                                   (rule "mul_literals" (formula "44") (term "0,1,0,0,1,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "44") (term "0,0,1,0,0,0"))
                                                   (rule "add_literals" (formula "44") (term "0,0,0,1,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "44") (term "1,0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "44") (term "1,1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "44") (term "1,1,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "44") (term "1,1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "44") (term "0,1,1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "44") (term "1,1,1,0,0,0"))
                                                   (rule "nnf_imp2or" (formula "44") (term "0,1,0,0"))
                                                   (rule "nnf_notAnd" (formula "44") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "44") (term "0,0,0,1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,0,0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "0,0,0,1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,0,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "44") (term "1,0,0,0,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "44") (term "1,1,0,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "44") (term "0,1,0,0,0,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "44") (term "1,1,0,0,0,1,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "44") (term "1,0,0,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "44") (term "1,0,0,1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "44") (term "0,1,0,0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "44") (term "0,0,1,0,0,1,0,0"))
                                                   (rule "add_literals" (formula "44") (term "0,0,0,1,0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "44") (term "1,0,0,1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "44") (term "1,1,0,0,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "44") (term "1,1,0,0,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "44") (term "1,1,1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "44") (term "0,1,1,0,0,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "44") (term "1,1,1,0,0,1,0,0"))
                                                   (rule "all_pull_out1" (formula "46") (term "0,1,0"))
                                                   (rule "commute_or" (formula "49") (term "0"))
                                                   (rule "all_pull_out3" (formula "71") (term "0"))
                                                   (rule "all_pull_out3" (formula "61") (term "0"))
                                                   (rule "shift_paren_or" (formula "18") (term "0,0"))
                                                   (rule "shift_paren_or" (formula "47") (term "0,0"))
                                                   (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "43") (term "0,1"))
                                                   (rule "replace_known_right" (formula "43") (term "0,0,0") (ifseqformula "85"))
                                                    (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "23")))
                                                   (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "44") (term "0,1") (inst "i=i") (inst "j=j_1"))
                                                    (builtin "One Step Simplification" (formula "44"))
                                                   (rule "inEqSimp_ltToLeq" (formula "44") (term "1,0,0,1,0,1"))
                                                   (rule "polySimp_rightDist" (formula "44") (term "1,0,0,1,0,0,1,0,1"))
                                                   (rule "mul_literals" (formula "44") (term "0,1,0,0,1,0,0,1,0,1"))
                                                   (rule "polySimp_addAssoc" (formula "44") (term "0,0,1,0,0,1,0,1"))
                                                   (rule "add_literals" (formula "44") (term "0,0,0,1,0,0,1,0,1"))
                                                   (rule "inEqSimp_ltToLeq" (formula "44") (term "1,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "44") (term "1,0,0,1,0,0,1"))
                                                   (rule "mul_literals" (formula "44") (term "0,1,0,0,1,0,0,1"))
                                                   (rule "polySimp_addAssoc" (formula "44") (term "0,0,1,0,0,1"))
                                                   (rule "add_literals" (formula "44") (term "0,0,0,1,0,0,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "44") (term "0,0,0,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "44") (term "1,0,1,0,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "44") (term "0,0,0,1,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "1,0,0,1,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "44") (term "1,1,0,0,1,0,1"))
                                                   (rule "polySimp_rightDist" (formula "44") (term "1,1,0,0,1,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "44") (term "1,1,1,0,0,1,0,1"))
                                                   (rule "mul_literals" (formula "44") (term "0,1,1,0,0,1,0,1"))
                                                   (rule "polySimp_elimOne" (formula "44") (term "1,1,1,0,0,1,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "1,0,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "44") (term "1,1,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "44") (term "1,1,0,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "44") (term "1,1,1,0,0,1"))
                                                   (rule "mul_literals" (formula "44") (term "0,1,1,0,0,1"))
                                                   (rule "polySimp_elimOne" (formula "44") (term "1,1,1,0,0,1"))
                                                   (rule "nnf_imp2or" (formula "44") (term "0,1"))
                                                   (rule "nnf_notAnd" (formula "44") (term "0,0,1"))
                                                   (rule "inEqSimp_notLeq" (formula "44") (term "1,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "44") (term "1,0,0,1,0,0,1"))
                                                   (rule "mul_literals" (formula "44") (term "0,1,0,0,1,0,0,1"))
                                                   (rule "polySimp_addAssoc" (formula "44") (term "0,0,1,0,0,1"))
                                                   (rule "add_literals" (formula "44") (term "0,0,0,1,0,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "44") (term "1,0,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "44") (term "1,1,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "44") (term "1,1,0,0,1"))
                                                   (rule "mul_literals" (formula "44") (term "0,1,1,0,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "44") (term "1,1,1,0,0,1"))
                                                   (rule "polySimp_elimOne" (formula "44") (term "1,1,1,0,0,1"))
                                                   (rule "inEqSimp_notGeq" (formula "44") (term "0,0,0,1"))
                                                   (rule "mul_literals" (formula "44") (term "1,0,0,0,0,0,1"))
                                                   (rule "add_zero_right" (formula "44") (term "0,0,0,0,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "0,0,0,1"))
                                                   (rule "mul_literals" (formula "44") (term "1,0,0,0,1"))
                                                   (rule "nnf_imp2or" (formula "44") (term "0,1,0,1"))
                                                   (rule "nnf_notAnd" (formula "44") (term "0,0,1,0,1"))
                                                   (rule "inEqSimp_notGeq" (formula "44") (term "0,0,0,1,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,0,0,0,1,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "0,0,0,1,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,0,1,0,1"))
                                                   (rule "polySimp_rightDist" (formula "44") (term "1,0,0,0,1,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "44") (term "1,1,0,0,0,1,0,1"))
                                                   (rule "mul_literals" (formula "44") (term "0,1,0,0,0,1,0,1"))
                                                   (rule "polySimp_elimOne" (formula "44") (term "1,1,0,0,0,1,0,1"))
                                                   (rule "inEqSimp_notLeq" (formula "44") (term "1,0,0,1,0,1"))
                                                   (rule "polySimp_rightDist" (formula "44") (term "1,0,0,1,0,0,1,0,1"))
                                                   (rule "mul_literals" (formula "44") (term "0,1,0,0,1,0,0,1,0,1"))
                                                   (rule "polySimp_addAssoc" (formula "44") (term "0,0,1,0,0,1,0,1"))
                                                   (rule "add_literals" (formula "44") (term "0,0,0,1,0,0,1,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "44") (term "1,0,0,1,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "44") (term "1,1,0,0,1,0,1"))
                                                   (rule "polySimp_rightDist" (formula "44") (term "1,1,0,0,1,0,1"))
                                                   (rule "mul_literals" (formula "44") (term "0,1,1,0,0,1,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "44") (term "1,1,1,0,0,1,0,1"))
                                                   (rule "polySimp_elimOne" (formula "44") (term "1,1,1,0,0,1,0,1"))
                                                   (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "45") (term "0,1") (inst "i=i"))
                                                    (builtin "One Step Simplification" (formula "45"))
                                                   (rule "translateJavaAddInt" (formula "45") (term "0,2,1,1,0,1"))
                                                   (rule "translateJavaSubInt" (formula "45") (term "1,1,0,0,1"))
                                                   (rule "polySimp_elimSub" (formula "45") (term "1,1,0,0,1"))
                                                   (rule "mul_literals" (formula "45") (term "1,1,1,0,0,1"))
                                                   (rule "polySimp_addComm0" (formula "45") (term "0,2,1,1,0,1"))
                                                   (rule "polySimp_addComm1" (formula "45") (term "1,1,0,0,1"))
                                                   (rule "add_literals" (formula "45") (term "0,1,1,0,0,1"))
                                                   (rule "inEqSimp_ltToLeq" (formula "45") (term "1,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "45") (term "1,0,0,1,0,0,1"))
                                                   (rule "mul_literals" (formula "45") (term "0,1,0,0,1,0,0,1"))
                                                   (rule "polySimp_addAssoc" (formula "45") (term "0,0,1,0,0,1"))
                                                   (rule "add_literals" (formula "45") (term "0,0,0,1,0,0,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "45") (term "0,0,0,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "45") (term "1,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "45") (term "1,0,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "45") (term "1,1,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "45") (term "1,1,0,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "45") (term "1,1,1,0,0,1"))
                                                   (rule "mul_literals" (formula "45") (term "0,1,1,0,0,1"))
                                                   (rule "polySimp_elimOne" (formula "45") (term "1,1,1,0,0,1"))
                                                   (rule "nnf_imp2or" (formula "45") (term "0,1"))
                                                   (rule "nnf_notAnd" (formula "45") (term "0,0,1"))
                                                   (rule "inEqSimp_notGeq" (formula "45") (term "0,0,0,1"))
                                                   (rule "times_zero_1" (formula "45") (term "1,0,0,0,0,0,1"))
                                                   (rule "add_zero_right" (formula "45") (term "0,0,0,0,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "45") (term "0,0,0,1"))
                                                   (rule "mul_literals" (formula "45") (term "1,0,0,0,1"))
                                                   (rule "inEqSimp_notLeq" (formula "45") (term "1,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "45") (term "1,0,0,1,0,0,1"))
                                                   (rule "mul_literals" (formula "45") (term "0,1,0,0,1,0,0,1"))
                                                   (rule "polySimp_addAssoc" (formula "45") (term "0,0,1,0,0,1"))
                                                   (rule "add_literals" (formula "45") (term "0,0,0,1,0,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "45") (term "1,0,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "45") (term "1,1,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "45") (term "1,1,0,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "45") (term "1,1,1,0,0,1"))
                                                   (rule "mul_literals" (formula "45") (term "0,1,1,0,0,1"))
                                                   (rule "polySimp_elimOne" (formula "45") (term "1,1,1,0,0,1"))
                                                   (rule "commute_or" (formula "46") (term "0,0,1,0,0"))
                                                   (rule "commute_or" (formula "46") (term "0,0,1,0,0,1"))
                                                   (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "43") (term "0,1") (inst "i=i"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "translateJavaAddInt" (formula "43") (term "0,2,1,1,0,1"))
                                                   (rule "translateJavaSubInt" (formula "43") (term "1,1,0,0,1"))
                                                   (rule "polySimp_elimSub" (formula "43") (term "1,1,0,0,1"))
                                                   (rule "mul_literals" (formula "43") (term "1,1,1,0,0,1"))
                                                   (rule "polySimp_addComm0" (formula "43") (term "0,2,1,1,0,1"))
                                                   (rule "polySimp_addComm1" (formula "43") (term "1,1,0,0,1"))
                                                   (rule "add_literals" (formula "43") (term "0,1,1,0,0,1"))
                                                   (rule "inEqSimp_ltToLeq" (formula "43") (term "1,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "43") (term "1,0,0,1,0,0,1"))
                                                   (rule "mul_literals" (formula "43") (term "0,1,0,0,1,0,0,1"))
                                                   (rule "polySimp_addAssoc" (formula "43") (term "0,0,1,0,0,1"))
                                                   (rule "add_literals" (formula "43") (term "0,0,0,1,0,0,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "43") (term "0,0,0,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "43") (term "1,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "1,0,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "43") (term "1,1,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "43") (term "1,1,0,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "43") (term "1,1,1,0,0,1"))
                                                   (rule "mul_literals" (formula "43") (term "0,1,1,0,0,1"))
                                                   (rule "polySimp_elimOne" (formula "43") (term "1,1,1,0,0,1"))
                                                   (rule "nnf_imp2or" (formula "43") (term "0,1"))
                                                   (rule "nnf_notAnd" (formula "43") (term "0,0,1"))
                                                   (rule "inEqSimp_notLeq" (formula "43") (term "1,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "43") (term "1,0,0,1,0,0,1"))
                                                   (rule "mul_literals" (formula "43") (term "0,1,0,0,1,0,0,1"))
                                                   (rule "polySimp_addAssoc" (formula "43") (term "0,0,1,0,0,1"))
                                                   (rule "add_literals" (formula "43") (term "0,0,0,1,0,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "1,0,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "43") (term "1,1,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "43") (term "1,1,0,0,1"))
                                                   (rule "mul_literals" (formula "43") (term "0,1,1,0,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "43") (term "1,1,1,0,0,1"))
                                                   (rule "polySimp_elimOne" (formula "43") (term "1,1,1,0,0,1"))
                                                   (rule "inEqSimp_notGeq" (formula "43") (term "0,0,0,1"))
                                                   (rule "mul_literals" (formula "43") (term "1,0,0,0,0,0,1"))
                                                   (rule "add_zero_right" (formula "43") (term "0,0,0,0,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "0,0,0,1"))
                                                   (rule "mul_literals" (formula "43") (term "1,0,0,0,1"))
                                                   (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "44") (term "0,0") (inst "i=i"))
                                                    (builtin "One Step Simplification" (formula "44"))
                                                   (rule "translateJavaAddInt" (formula "44") (term "0,2,1,1,0,0"))
                                                   (rule "translateJavaSubInt" (formula "44") (term "1,1,0,0,0"))
                                                   (rule "polySimp_elimSub" (formula "44") (term "1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "44") (term "1,1,1,0,0,0"))
                                                   (rule "polySimp_addComm0" (formula "44") (term "0,2,1,1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "44") (term "1,1,0,0,0"))
                                                   (rule "add_literals" (formula "44") (term "0,1,1,0,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "44") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "44") (term "1,0,0,1,0,0,0"))
                                                   (rule "mul_literals" (formula "44") (term "0,1,0,0,1,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "44") (term "0,0,1,0,0,0"))
                                                   (rule "add_literals" (formula "44") (term "0,0,0,1,0,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "44") (term "0,0,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "44") (term "1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "1,0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "44") (term "1,1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "44") (term "1,1,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "44") (term "1,1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "44") (term "0,1,1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "44") (term "1,1,1,0,0,0"))
                                                   (rule "nnf_imp2or" (formula "44") (term "0,0"))
                                                   (rule "nnf_notAnd" (formula "44") (term "0,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "44") (term "0,0,0,0"))
                                                   (rule "mul_literals" (formula "44") (term "1,0,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "44") (term "0,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "0,0,0,0"))
                                                   (rule "mul_literals" (formula "44") (term "1,0,0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "44") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "44") (term "1,0,0,1,0,0,0"))
                                                   (rule "mul_literals" (formula "44") (term "0,1,0,0,1,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "44") (term "0,0,1,0,0,0"))
                                                   (rule "add_literals" (formula "44") (term "0,0,0,1,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "44") (term "1,0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "44") (term "1,1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "44") (term "1,1,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "44") (term "1,1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "44") (term "0,1,1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "44") (term "1,1,1,0,0,0"))
                                                   (rule "commute_or" (formula "46") (term "0,0,1,0,1,1"))
                                                   (rule "shift_paren_or" (formula "72") (term "0,0"))
                                                   (rule "shift_paren_or" (formula "62") (term "0,0"))
                                                   (rule "shift_paren_or" (formula "18") (term "0,0,0"))
                                                   (rule "shift_paren_or" (formula "48") (term "0,0,0"))
                                                   (rule "allLeft" (formula "33") (inst "t=j_0"))
                                                   (rule "applyEq" (formula "33") (term "0,1") (ifseqformula "82"))
                                                   (rule "replace_known_left" (formula "33") (term "1") (ifseqformula "79"))
                                                    (builtin "One Step Simplification" (formula "33"))
                                                   (rule "true_left" (formula "33"))
                                                   (rule "allLeft" (formula "33") (inst "t=add(Z(neglit(2(#))), l_1)"))
                                                   (rule "inEqSimp_homoInEq1" (formula "33") (term "1,0"))
                                                   (rule "polySimp_mulComm0" (formula "33") (term "1,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "33") (term "1,0,1,0"))
                                                   (rule "mul_literals" (formula "33") (term "0,1,0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "33") (term "0,1,0"))
                                                   (rule "polySimp_addComm0" (formula "33") (term "0,0,1,0"))
                                                   (rule "polySimp_pullOutFactor0b" (formula "33") (term "0,1,0"))
                                                   (rule "add_literals" (formula "33") (term "1,1,0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "33") (term "1,0,1,0"))
                                                   (rule "inEqSimp_homoInEq0" (formula "33") (term "0,0"))
                                                   (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "33") (term "1,0,0,0"))
                                                   (rule "mul_literals" (formula "33") (term "0,1,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "33") (term "0,0,0"))
                                                   (rule "add_literals" (formula "33") (term "0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0"))
                                                   (rule "mul_literals" (formula "33") (term "1,1,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "33") (term "0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "33") (term "0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "33") (term "0,0,0"))
                                                   (rule "inEqSimp_contradInEq1" (formula "33") (term "0,0") (ifseqformula "69"))
                                                   (rule "qeq_literals" (formula "33") (term "0,0,0"))
                                                    (builtin "One Step Simplification" (formula "33"))
                                                   (rule "inEqSimp_contradInEq1" (formula "33") (term "0") (ifseqformula "69"))
                                                   (rule "qeq_literals" (formula "33") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "33"))
                                                   (rule "allLeft" (formula "42") (inst "t=b_0"))
                                                   (rule "inEqSimp_contradInEq0" (formula "42") (term "1,0") (ifseqformula "5"))
                                                   (rule "inEqSimp_homoInEq1" (formula "42") (term "0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "42") (term "1,0,0,1,0"))
                                                   (rule "mul_literals" (formula "42") (term "0,1,0,0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0,0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "42") (term "0,0,1,0"))
                                                   (rule "polySimp_addComm0" (formula "42") (term "0,0,0,1,0"))
                                                   (rule "polySimp_pullOutFactor0b" (formula "42") (term "0,0,1,0"))
                                                   (rule "add_literals" (formula "42") (term "1,1,0,0,1,0"))
                                                   (rule "times_zero_1" (formula "42") (term "1,0,0,1,0"))
                                                   (rule "add_zero_right" (formula "42") (term "0,0,1,0"))
                                                   (rule "leq_literals" (formula "42") (term "0,1,0"))
                                                    (builtin "One Step Simplification" (formula "42"))
                                                   (rule "inEqSimp_contradInEq1" (formula "42") (term "0") (ifseqformula "13"))
                                                   (rule "qeq_literals" (formula "42") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "42"))
                                                   (rule "applyEq" (formula "110") (term "0") (ifseqformula "42"))
                                                   (rule "eqSymm" (formula "110"))
                                                   (rule "allLeft" (formula "43") (inst "t=j_0"))
                                                   (rule "applyEq" (formula "43") (term "0,1") (ifseqformula "80"))
                                                   (rule "inEqSimp_contradInEq1" (formula "43") (term "0,0") (ifseqformula "14"))
                                                   (rule "qeq_literals" (formula "43") (term "0,0,0"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "inEqSimp_contradInEq0" (formula "43") (term "0") (ifseqformula "12"))
                                                   (rule "inEqSimp_homoInEq1" (formula "43") (term "0,0"))
                                                   (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "43") (term "1,0,0,0"))
                                                   (rule "mul_literals" (formula "43") (term "0,1,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "43") (term "1,1,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "43") (term "0,0,0"))
                                                   (rule "polySimp_addComm0" (formula "43") (term "0,0,0,0"))
                                                   (rule "polySimp_pullOutFactor0b" (formula "43") (term "0,0,0"))
                                                   (rule "add_literals" (formula "43") (term "1,1,0,0,0"))
                                                   (rule "times_zero_1" (formula "43") (term "1,0,0,0"))
                                                   (rule "add_literals" (formula "43") (term "0,0,0"))
                                                   (rule "leq_literals" (formula "43") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "applyEq" (formula "86") (term "0") (ifseqformula "43"))
                                                   (rule "applyEq" (formula "80") (term "1") (ifseqformula "43"))
                                                   (rule "allLeft" (formula "44") (inst "t=add(Z(neglit(1(#))), l_1)"))
                                                   (rule "inEqSimp_homoInEq0" (formula "44") (term "0,0"))
                                                   (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "44") (term "1,0,0,0"))
                                                   (rule "mul_literals" (formula "44") (term "0,1,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "44") (term "0,0,0"))
                                                   (rule "add_literals" (formula "44") (term "0,0,0,0"))
                                                   (rule "add_zero_left" (formula "44") (term "0,0,0"))
                                                   (rule "inEqSimp_homoInEq1" (formula "44") (term "1,0"))
                                                   (rule "polySimp_mulComm0" (formula "44") (term "1,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "44") (term "1,0,1,0"))
                                                   (rule "mul_literals" (formula "44") (term "0,1,0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "44") (term "0,1,0"))
                                                   (rule "polySimp_addComm0" (formula "44") (term "0,0,1,0"))
                                                   (rule "polySimp_pullOutFactor0b" (formula "44") (term "0,1,0"))
                                                   (rule "add_literals" (formula "44") (term "1,1,0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "44") (term "1,0,1,0"))
                                                   (rule "inEqSimp_invertInEq1" (formula "44") (term "0,0"))
                                                   (rule "mul_literals" (formula "44") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "44") (term "0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "44") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "1,0"))
                                                   (rule "mul_literals" (formula "44") (term "1,1,0"))
                                                   (rule "inEqSimp_contradInEq1" (formula "44") (term "0,0") (ifseqformula "72"))
                                                   (rule "qeq_literals" (formula "44") (term "0,0,0"))
                                                    (builtin "One Step Simplification" (formula "44"))
                                                   (rule "inEqSimp_contradInEq1" (formula "44") (term "0") (ifseqformula "72"))
                                                   (rule "qeq_literals" (formula "44") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "44"))
                                                   (rule "allLeft" (formula "45") (inst "t=add(Z(neglit(2(#))), l_1)"))
                                                   (rule "inEqSimp_homoInEq1" (formula "45") (term "1,0"))
                                                   (rule "polySimp_mulComm0" (formula "45") (term "1,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "45") (term "1,0,1,0"))
                                                   (rule "mul_literals" (formula "45") (term "0,1,0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "45") (term "0,1,0"))
                                                   (rule "polySimp_addComm0" (formula "45") (term "0,0,1,0"))
                                                   (rule "polySimp_pullOutFactor0b" (formula "45") (term "0,1,0"))
                                                   (rule "add_literals" (formula "45") (term "1,1,0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "45") (term "1,0,1,0"))
                                                   (rule "inEqSimp_homoInEq0" (formula "45") (term "0,0"))
                                                   (rule "polySimp_mulComm0" (formula "45") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "45") (term "1,0,0,0"))
                                                   (rule "mul_literals" (formula "45") (term "0,1,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "45") (term "0,0,0"))
                                                   (rule "add_literals" (formula "45") (term "0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "45") (term "1,0"))
                                                   (rule "mul_literals" (formula "45") (term "1,1,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "45") (term "0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "45") (term "0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "45") (term "0,0,0"))
                                                   (rule "inEqSimp_contradInEq1" (formula "45") (term "1,0") (ifseqformula "73"))
                                                   (rule "qeq_literals" (formula "45") (term "0,1,0"))
                                                    (builtin "One Step Simplification" (formula "45"))
                                                   (rule "inEqSimp_contradInEq1" (formula "45") (term "0") (ifseqformula "73"))
                                                   (rule "qeq_literals" (formula "45") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "45"))
                                                   (rule "allLeft" (formula "46") (inst "t=add(Z(neglit(1(#))), j_0)"))
                                                   (rule "inEqSimp_homoInEq0" (formula "46") (term "0,0"))
                                                   (rule "polySimp_mulComm0" (formula "46") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "46") (term "1,0,0,0"))
                                                   (rule "mul_literals" (formula "46") (term "0,1,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "46") (term "0,0,0"))
                                                   (rule "add_literals" (formula "46") (term "0,0,0,0"))
                                                   (rule "add_zero_left" (formula "46") (term "0,0,0"))
                                                   (rule "inEqSimp_homoInEq1" (formula "46") (term "1,0"))
                                                   (rule "polySimp_mulComm0" (formula "46") (term "1,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "46") (term "1,0,1,0"))
                                                   (rule "mul_literals" (formula "46") (term "0,1,0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "46") (term "0,1,0"))
                                                   (rule "polySimp_addComm0" (formula "46") (term "0,0,1,0"))
                                                   (rule "inEqSimp_invertInEq1" (formula "46") (term "0,0"))
                                                   (rule "times_zero_2" (formula "46") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "46") (term "0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "46") (term "0,0,0"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "46") (term "1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "46") (term "0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "46") (term "0,1,0"))
                                                   (rule "inEqSimp_contradInEq0" (formula "46") (term "1,0") (ifseqformula "12"))
                                                   (rule "inEqSimp_homoInEq1" (formula "46") (term "0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "46") (term "1,0,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "46") (term "1,0,0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "46") (term "1,1,0,0,1,0"))
                                                   (rule "mul_literals" (formula "46") (term "0,1,0,0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "46") (term "0,0,1,0"))
                                                   (rule "polySimp_addComm1" (formula "46") (term "0,0,0,1,0"))
                                                   (rule "add_literals" (formula "46") (term "0,0,0,0,1,0"))
                                                   (rule "polySimp_pullOutFactor0b" (formula "46") (term "0,0,1,0"))
                                                   (rule "add_literals" (formula "46") (term "1,1,0,0,1,0"))
                                                   (rule "times_zero_1" (formula "46") (term "1,0,0,1,0"))
                                                   (rule "add_zero_right" (formula "46") (term "0,0,1,0"))
                                                   (rule "leq_literals" (formula "46") (term "0,1,0"))
                                                    (builtin "One Step Simplification" (formula "46"))
                                                   (rule "inEqSimp_contradInEq1" (formula "46") (term "0") (ifseqformula "14"))
                                                   (rule "qeq_literals" (formula "46") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "46"))
                                                   (rule "allLeft" (formula "34") (inst "t=add(Z(neglit(1(#))), j_0)"))
                                                   (rule "inEqSimp_homoInEq1" (formula "34") (term "1,0"))
                                                   (rule "polySimp_mulComm0" (formula "34") (term "1,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "34") (term "1,0,1,0"))
                                                   (rule "mul_literals" (formula "34") (term "0,1,0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "34") (term "0,1,0"))
                                                   (rule "polySimp_addComm0" (formula "34") (term "0,0,1,0"))
                                                   (rule "inEqSimp_homoInEq0" (formula "34") (term "0,0"))
                                                   (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "34") (term "1,0,0,0"))
                                                   (rule "mul_literals" (formula "34") (term "0,1,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "34") (term "0,0,0"))
                                                   (rule "add_literals" (formula "34") (term "0,0,0,0"))
                                                   (rule "add_zero_left" (formula "34") (term "0,0,0"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "34") (term "1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "34") (term "0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "34") (term "0,1,0"))
                                                   (rule "inEqSimp_invertInEq1" (formula "34") (term "0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "34") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "34") (term "1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "34") (term "0,0,0"))
                                                   (rule "inEqSimp_contradInEq0" (formula "34") (term "1,0") (ifseqformula "12"))
                                                   (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0"))
                                                   (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0"))
                                                   (rule "polySimp_addComm1" (formula "34") (term "0,0,0,1,0"))
                                                   (rule "add_literals" (formula "34") (term "0,0,0,0,1,0"))
                                                   (rule "polySimp_pullOutFactor0b" (formula "34") (term "0,0,1,0"))
                                                   (rule "add_literals" (formula "34") (term "1,1,0,0,1,0"))
                                                   (rule "times_zero_1" (formula "34") (term "1,0,0,1,0"))
                                                   (rule "add_zero_right" (formula "34") (term "0,0,1,0"))
                                                   (rule "leq_literals" (formula "34") (term "0,1,0"))
                                                    (builtin "One Step Simplification" (formula "34"))
                                                   (rule "inEqSimp_contradInEq1" (formula "34") (term "0") (ifseqformula "14"))
                                                   (rule "qeq_literals" (formula "34") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "34"))
                                                   (rule "allLeft" (formula "35") (inst "t=b_0"))
                                                   (rule "inEqSimp_contradInEq0" (formula "35") (term "1,0") (ifseqformula "5"))
                                                   (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0"))
                                                   (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0"))
                                                   (rule "polySimp_addComm0" (formula "35") (term "0,0,0,1,0"))
                                                   (rule "polySimp_pullOutFactor0b" (formula "35") (term "0,0,1,0"))
                                                   (rule "add_literals" (formula "35") (term "1,1,0,0,1,0"))
                                                   (rule "times_zero_1" (formula "35") (term "1,0,0,1,0"))
                                                   (rule "add_zero_right" (formula "35") (term "0,0,1,0"))
                                                   (rule "leq_literals" (formula "35") (term "0,1,0"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "13"))
                                                   (rule "qeq_literals" (formula "35") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "allLeft" (formula "36") (inst "t=add(Z(neglit(1(#))), l_1)"))
                                                   (rule "inEqSimp_homoInEq1" (formula "36") (term "1,0"))
                                                   (rule "polySimp_mulComm0" (formula "36") (term "1,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "36") (term "1,0,1,0"))
                                                   (rule "mul_literals" (formula "36") (term "0,1,0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "36") (term "0,1,0"))
                                                   (rule "polySimp_addComm0" (formula "36") (term "0,0,1,0"))
                                                   (rule "polySimp_pullOutFactor0b" (formula "36") (term "0,1,0"))
                                                   (rule "add_literals" (formula "36") (term "1,1,0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "36") (term "1,0,1,0"))
                                                   (rule "inEqSimp_homoInEq0" (formula "36") (term "0,0"))
                                                   (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "36") (term "1,0,0,0"))
                                                   (rule "mul_literals" (formula "36") (term "0,1,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "36") (term "0,0,0"))
                                                   (rule "add_literals" (formula "36") (term "0,0,0,0"))
                                                   (rule "add_zero_left" (formula "36") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0"))
                                                   (rule "mul_literals" (formula "36") (term "1,1,0"))
                                                   (rule "inEqSimp_invertInEq1" (formula "36") (term "0,0"))
                                                   (rule "mul_literals" (formula "36") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "36") (term "0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "36") (term "0,0,0"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (term "0,0") (ifseqformula "77"))
                                                   (rule "qeq_literals" (formula "36") (term "0,0,0"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (term "0") (ifseqformula "77"))
                                                   (rule "qeq_literals" (formula "36") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "52") (term "0,0"))
                                                   (rule "replace_known_left" (formula "52") (term "1,0") (ifseqformula "23"))
                                                    (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "95")))
                                                   (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "53") (term "0,0") (inst "i=i") (inst "j=j_1"))
                                                    (builtin "One Step Simplification" (formula "53"))
                                                   (rule "inEqSimp_ltToLeq" (formula "53") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "53") (term "1,0,0,1,0,0,0"))
                                                   (rule "mul_literals" (formula "53") (term "0,1,0,0,1,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "53") (term "0,0,1,0,0,0"))
                                                   (rule "add_literals" (formula "53") (term "0,0,0,1,0,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "53") (term "1,0,0,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "53") (term "1,0,0,1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "53") (term "0,1,0,0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "53") (term "0,0,1,0,0,1,0,0"))
                                                   (rule "add_literals" (formula "53") (term "0,0,0,1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "53") (term "0,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "53") (term "0,0,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "53") (term "1,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "53") (term "1,0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "53") (term "1,1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "53") (term "1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "53") (term "0,1,1,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "53") (term "1,1,1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "53") (term "1,1,1,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "53") (term "1,0,0,1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "53") (term "1,1,0,0,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "53") (term "1,1,0,0,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "53") (term "1,1,1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "53") (term "0,1,1,0,0,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "53") (term "1,1,1,0,0,1,0,0"))
                                                   (rule "allLeft" (formula "21") (inst "t=Z(0(#))"))
                                                   (rule "add_zero_right" (formula "21") (term "0,2,2,1,1,1"))
                                                   (rule "leq_literals" (formula "21") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "21"))
                                                   (rule "polySimp_homoEq" (formula "21") (term "0,1,1,1"))
                                                   (rule "mul_literals" (formula "21") (term "1,0,0,1,1,1"))
                                                   (rule "add_zero_right" (formula "21") (term "0,0,1,1,1"))
                                                   (rule "inEqSimp_commuteGeq" (formula "21") (term "0"))
                                                   (rule "polySimp_sepPosMonomial" (formula "21") (term "0,1,1,1"))
                                                   (rule "mul_literals" (formula "21") (term "1,0,1,1,1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "21") (term "0") (ifseqformula "14"))
                                                   (rule "qeq_literals" (formula "21") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "21"))
                                                   (rule "pullOutSelect" (formula "21") (term "0,1,0,1") (inst "selectSK=arr_5"))
                                                   (rule "simplifySelectOfAnon" (formula "21"))
                                                    (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "117")) (ifInst ""  (formula "29")))
                                                   (rule "polySimp_addComm0" (formula "22") (term "0,1"))
                                                   (rule "elementOfArrayRangeConcrete" (formula "21") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "21"))
                                                   (rule "leq_literals" (formula "21") (term "0,0,0"))
                                                    (builtin "One Step Simplification" (formula "21"))
                                                   (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0"))
                                                   (rule "applyEq" (formula "21") (term "1,0") (ifseqformula "16"))
                                                   (rule "inEqSimp_subsumption6" (formula "21") (term "0,0") (ifseqformula "80"))
                                                   (rule "mul_literals" (formula "21") (term "1,1,0,0,0"))
                                                   (rule "greater_literals" (formula "21") (term "0,0,0,0"))
                                                    (builtin "One Step Simplification" (formula "21"))
                                                   (rule "leq_literals" (formula "21") (term "0,0,0"))
                                                    (builtin "One Step Simplification" (formula "21"))
                                                   (rule "applyEqReverse" (formula "22") (term "0,0,0,1") (ifseqformula "21"))
                                                   (rule "mul_literals" (formula "22") (term "0,0,1"))
                                                   (rule "add_zero_left" (formula "22") (term "0,1"))
                                                   (rule "hideAuxiliaryEq" (formula "21"))
                                                   (rule "pullOutSelect" (formula "21") (term "2,1,1") (inst "selectSK=arr_6"))
                                                   (rule "simplifySelectOfAnon" (formula "21"))
                                                    (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "117")) (ifInst ""  (formula "29")))
                                                   (rule "elementOfArrayRangeConcrete" (formula "21") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "21"))
                                                   (rule "leq_literals" (formula "21") (term "0,0,0"))
                                                    (builtin "One Step Simplification" (formula "21"))
                                                   (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0"))
                                                   (rule "inEqSimp_subsumption6" (formula "21") (term "0,0") (ifseqformula "80"))
                                                   (rule "mul_literals" (formula "21") (term "1,1,0,0,0"))
                                                   (rule "greater_literals" (formula "21") (term "0,0,0,0"))
                                                    (builtin "One Step Simplification" (formula "21"))
                                                   (rule "leq_literals" (formula "21") (term "0,0,0"))
                                                    (builtin "One Step Simplification" (formula "21"))
                                                   (rule "applyEqReverse" (formula "22") (term "2,1,1") (ifseqformula "21"))
                                                   (rule "hideAuxiliaryEq" (formula "21"))
                                                   (rule "allLeft" (formula "22") (inst "t=add(Z(neglit(1(#))), j_0)"))
                                                    (builtin "One Step Simplification" (formula "22"))
                                                   (rule "polySimp_addComm1" (formula "22") (term "1,1"))
                                                   (rule "polySimp_addComm0" (formula "22") (term "0,1,1"))
                                                   (rule "inEqSimp_homoInEq1" (formula "22") (term "1,0"))
                                                   (rule "polySimp_mulComm0" (formula "22") (term "1,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "22") (term "1,0,1,0"))
                                                   (rule "mul_literals" (formula "22") (term "0,1,0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "22") (term "0,1,0"))
                                                   (rule "polySimp_addComm0" (formula "22") (term "0,0,1,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,1,0"))
                                                   (rule "add_literals" (formula "22") (term "1,1,0,1,0"))
                                                   (rule "times_zero_1" (formula "22") (term "1,0,1,0"))
                                                   (rule "add_zero_right" (formula "22") (term "0,1,0"))
                                                   (rule "leq_literals" (formula "22") (term "1,0"))
                                                    (builtin "One Step Simplification" (formula "22"))
                                                   (rule "inEqSimp_homoInEq0" (formula "22") (term "0"))
                                                   (rule "polySimp_mulComm0" (formula "22") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "22") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "22") (term "0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "22") (term "0,0"))
                                                   (rule "add_literals" (formula "22") (term "0,0,0"))
                                                   (rule "add_zero_left" (formula "22") (term "0,0"))
                                                   (rule "applyEq" (formula "22") (term "0,1") (ifseqformula "51"))
                                                   (rule "polySimp_homoEq" (formula "22") (term "1"))
                                                   (rule "polySimp_addComm1" (formula "22") (term "0,1"))
                                                   (rule "polySimp_addComm1" (formula "22") (term "0,0,1"))
                                                   (rule "polySimp_sepNegMonomial" (formula "22") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "22") (term "0,1"))
                                                   (rule "polySimp_elimOne" (formula "22") (term "0,1"))
                                                   (rule "inEqSimp_invertInEq1" (formula "22") (term "0"))
                                                   (rule "polySimp_mulLiterals" (formula "22") (term "0,0"))
                                                   (rule "mul_literals" (formula "22") (term "1,0"))
                                                   (rule "polySimp_elimOne" (formula "22") (term "0,0"))
                                                   (rule "inEqSimp_contradInEq1" (formula "22") (term "0") (ifseqformula "14"))
                                                   (rule "qeq_literals" (formula "22") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "22"))
                                                   (rule "pullOutSelect" (formula "22") (term "0") (inst "selectSK=arr_7"))
                                                   (rule "simplifySelectOfAnon" (formula "22"))
                                                    (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "118")) (ifInst ""  (formula "30")))
                                                   (rule "polySimp_homoEq" (formula "23"))
                                                   (rule "polySimp_addComm1" (formula "23") (term "0"))
                                                   (rule "polySimp_addComm1" (formula "23") (term "0,0"))
                                                   (rule "polySimp_addComm0" (formula "23") (term "0,0,0"))
                                                   (rule "elementOfArrayRangeConcrete" (formula "22") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "22"))
                                                   (rule "inEqSimp_homoInEq0" (formula "22") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "22") (term "1,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "22") (term "0,0,0,0"))
                                                   (rule "inEqSimp_homoInEq0" (formula "22") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "22") (term "1,0,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "22") (term "1,0,1,0,0"))
                                                   (rule "mul_literals" (formula "22") (term "0,1,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "22") (term "0,1,0,0"))
                                                   (rule "polySimp_addComm0" (formula "22") (term "0,0,1,0,0"))
                                                   (rule "polySimp_sepNegMonomial" (formula "23"))
                                                   (rule "polySimp_mulLiterals" (formula "23") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "23") (term "0"))
                                                   (rule "applyEq" (formula "37") (term "0") (ifseqformula "23"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "22") (term "1,0,0,0"))
                                                   (rule "replace_known_left" (formula "22") (term "0,0,0") (ifseqformula "14"))
                                                    (builtin "One Step Simplification" (formula "22"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "37"))
                                                   (rule "polySimp_mulLiterals" (formula "37") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "37") (term "0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "22") (term "0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "22") (term "0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "22") (term "0,0,0"))
                                                   (rule "inEqSimp_subsumption0" (formula "22") (term "0,0") (ifseqformula "12"))
                                                   (rule "inEqSimp_homoInEq0" (formula "22") (term "0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0,0"))
                                                   (rule "mul_literals" (formula "22") (term "0,1,0,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "22") (term "0,0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "22") (term "0,0,0,0,0"))
                                                   (rule "add_literals" (formula "22") (term "0,0,0,0,0,0"))
                                                   (rule "polySimp_pullOutFactor0b" (formula "22") (term "0,0,0,0"))
                                                   (rule "add_literals" (formula "22") (term "1,1,0,0,0,0"))
                                                   (rule "times_zero_1" (formula "22") (term "1,0,0,0,0"))
                                                   (rule "add_literals" (formula "22") (term "0,0,0,0"))
                                                   (rule "qeq_literals" (formula "22") (term "0,0,0"))
                                                    (builtin "One Step Simplification" (formula "22"))
                                                   (rule "applyEqReverse" (formula "37") (term "0,0,1") (ifseqformula "22"))
                                                   (rule "applyEqReverse" (formula "23") (term "0,0,0,1") (ifseqformula "22"))
                                                   (rule "hideAuxiliaryEq" (formula "22"))
                                                   (rule "polySimp_homoEq" (formula "22"))
                                                   (rule "polySimp_addComm0" (formula "36") (term "1"))
                                                   (rule "polySimp_addComm0" (formula "22") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "22") (term "0,0"))
                                                   (rule "polySimp_addComm1" (formula "22") (term "0"))
                                                   (rule "inEqSimp_homoInEq0" (formula "36"))
                                                   (rule "polySimp_addComm1" (formula "36") (term "0"))
                                                   (rule "polySimp_sepNegMonomial" (formula "22"))
                                                   (rule "polySimp_mulLiterals" (formula "22") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "22") (term "0"))
                                                   (rule "applyEq" (formula "36") (term "0,1,0") (ifseqformula "22"))
                                                   (rule "polySimp_mulComm0" (formula "36") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "36") (term "1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0"))
                                                   (rule "polySimp_elimOne" (formula "36") (term "1,1,0"))
                                                   (rule "polySimp_rightDist" (formula "36") (term "0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "36") (term "1,0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "36") (term "1,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "36") (term "0,0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "36") (term "0"))
                                                   (rule "polySimp_addAssoc" (formula "36") (term "0,0"))
                                                   (rule "polySimp_addComm1" (formula "36") (term "0,0,0"))
                                                   (rule "polySimp_pullOutFactor1" (formula "36") (term "0,0,0,0"))
                                                   (rule "add_literals" (formula "36") (term "1,0,0,0,0"))
                                                   (rule "times_zero_1" (formula "36") (term "0,0,0,0"))
                                                   (rule "add_zero_left" (formula "36") (term "0,0,0"))
                                                   (rule "polySimp_pullOutFactor2" (formula "36") (term "0,0"))
                                                   (rule "add_literals" (formula "36") (term "1,0,0"))
                                                   (rule "times_zero_1" (formula "36") (term "0,0"))
                                                   (rule "add_zero_left" (formula "36") (term "0"))
                                                   (rule "applyEq" (formula "15") (term "0") (ifseqformula "22"))
                                                   (rule "inEqSimp_homoInEq0" (formula "15"))
                                                   (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0"))
                                                   (rule "polySimp_elimOne" (formula "15") (term "1,1,0"))
                                                   (rule "polySimp_rightDist" (formula "15") (term "0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "15") (term "1,0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "15") (term "1,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "15") (term "0,0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "15") (term "0"))
                                                   (rule "polySimp_addAssoc" (formula "15") (term "0,0"))
                                                   (rule "polySimp_pullOutFactor1" (formula "15") (term "0,0,0"))
                                                   (rule "add_literals" (formula "15") (term "1,0,0,0"))
                                                   (rule "times_zero_1" (formula "15") (term "0,0,0"))
                                                   (rule "add_zero_left" (formula "15") (term "0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                                                   (rule "allLeft" (formula "86") (inst "t=j_0"))
                                                   (rule "inEqSimp_contradInEq1" (formula "86") (term "0,0") (ifseqformula "14"))
                                                   (rule "qeq_literals" (formula "86") (term "0,0,0"))
                                                    (builtin "One Step Simplification" (formula "86"))
                                                   (rule "inEqSimp_contradInEq0" (formula "86") (term "0") (ifseqformula "12"))
                                                   (rule "inEqSimp_homoInEq1" (formula "86") (term "0,0"))
                                                   (rule "polySimp_mulComm0" (formula "86") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "86") (term "1,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "86") (term "1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "86") (term "0,1,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "86") (term "0,0,0"))
                                                   (rule "polySimp_addComm0" (formula "86") (term "0,0,0,0"))
                                                   (rule "polySimp_pullOutFactor0b" (formula "86") (term "0,0,0"))
                                                   (rule "add_literals" (formula "86") (term "1,1,0,0,0"))
                                                   (rule "times_zero_1" (formula "86") (term "1,0,0,0"))
                                                   (rule "add_zero_right" (formula "86") (term "0,0,0"))
                                                   (rule "leq_literals" (formula "86") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "86"))
                                                   (rule "pullOutSelect" (formula "86") (term "0") (inst "selectSK=arr_8"))
                                                   (rule "simplifySelectOfAnon" (formula "86"))
                                                    (builtin "One Step Simplification" (formula "86") (ifInst ""  (formula "102")) (ifInst ""  (formula "9")))
                                                   (rule "elementOfArrayRangeConcrete" (formula "86") (term "0,0"))
                                                   (rule "replace_known_right" (formula "86") (term "0,0,0,0") (ifseqformula "109"))
                                                    (builtin "One Step Simplification" (formula "86"))
                                                   (rule "applyEqReverse" (formula "87") (term "0") (ifseqformula "86"))
                                                   (rule "hideAuxiliaryEq" (formula "86"))
                                                   (rule "applyEq" (formula "86") (term "0") (ifseqformula "94"))
                                                   (rule "allLeft" (formula "20") (inst "t=b_0"))
                                                   (rule "inEqSimp_homoInEq0" (formula "20") (term "0,0"))
                                                   (rule "polySimp_addComm1" (formula "20") (term "0,0,0"))
                                                   (rule "applyEq" (formula "20") (term "0,1") (ifseqformula "48"))
                                                   (rule "eqSymm" (formula "20") (term "1"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "0,0"))
                                                   (rule "polySimp_mulComm0" (formula "20") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "20") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
                                                   (rule "mul_literals" (formula "20") (term "0,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
                                                   (rule "inEqSimp_contradInEq0" (formula "20") (term "1,0") (ifseqformula "5"))
                                                   (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,1,0"))
                                                   (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0"))
                                                   (rule "polySimp_addComm0" (formula "20") (term "0,0,0,1,0"))
                                                   (rule "polySimp_pullOutFactor0b" (formula "20") (term "0,0,1,0"))
                                                   (rule "add_literals" (formula "20") (term "1,1,0,0,1,0"))
                                                   (rule "times_zero_1" (formula "20") (term "1,0,0,1,0"))
                                                   (rule "add_literals" (formula "20") (term "0,0,1,0"))
                                                   (rule "leq_literals" (formula "20") (term "0,1,0"))
                                                    (builtin "One Step Simplification" (formula "20"))
                                                   (rule "inEqSimp_contradInEq0" (formula "20") (term "0") (ifseqformula "2"))
                                                   (rule "inEqSimp_homoInEq1" (formula "20") (term "0,0"))
                                                   (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0"))
                                                   (rule "mul_literals" (formula "20") (term "0,1,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "20") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "20") (term "0,0,0,0"))
                                                   (rule "add_literals" (formula "20") (term "0,0,0,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,0"))
                                                   (rule "add_literals" (formula "20") (term "1,1,0,0,0"))
                                                   (rule "times_zero_1" (formula "20") (term "1,0,0,0"))
                                                   (rule "add_zero_right" (formula "20") (term "0,0,0"))
                                                   (rule "leq_literals" (formula "20") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "20"))
                                                   (rule "pullOutSelect" (formula "20") (term "0") (inst "selectSK=arr_9"))
                                                   (rule "simplifySelectOfAnon" (formula "20"))
                                                    (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "119")) (ifInst ""  (formula "31")))
                                                   (rule "eqSymm" (formula "21"))
                                                   (rule "applyEqReverse" (formula "20") (term "1") (ifseqformula "21"))
                                                    (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "122")))
                                                   (rule "notLeft" (formula "20"))
                                                   (rule "hideAuxiliaryEq" (formula "20"))
                                                   (rule "elementOfArrayRangeConcrete" (formula "96"))
                                                    (builtin "One Step Simplification" (formula "96"))
                                                   (rule "inEqSimp_commuteLeq" (formula "96") (term "0"))
                                                   (rule "inEqSimp_subsumption1" (formula "96") (term "0") (ifseqformula "13"))
                                                   (rule "leq_literals" (formula "96") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "96"))
                                                   (rule "inEqSimp_leqRight" (formula "96"))
                                                   (rule "polySimp_mulAssoc" (formula "1") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "1") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                                   (rule "mul_literals" (formula "1") (term "0,1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "6") (ifseqformula "1"))
                                                   (rule "andLeft" (formula "6"))
                                                   (rule "inEqSimp_homoInEq1" (formula "6"))
                                                   (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "6") (term "1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0"))
                                                   (rule "mul_literals" (formula "6") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "6") (term "0"))
                                                   (rule "polySimp_addComm1" (formula "6") (term "0,0"))
                                                   (rule "add_literals" (formula "6") (term "0,0,0"))
                                                   (rule "polySimp_pullOutFactor0b" (formula "6") (term "0"))
                                                   (rule "add_literals" (formula "6") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "6") (term "1,0"))
                                                   (rule "add_literals" (formula "6") (term "0"))
                                                   (rule "leq_literals" (formula "6"))
                                                   (rule "closeFalse" (formula "6"))
                                                )
                                                (branch "self.equal_buckets = TRUE FALSE"
                                                   (rule "applyEq" (formula "56") (term "1,1,0,0,1,0") (ifseqformula "54"))
                                                   (rule "applyEq" (formula "65") (term "1,1,1,0,0") (ifseqformula "54"))
                                                   (rule "applyEq" (formula "56") (term "1,1,0,0") (ifseqformula "54"))
                                                   (rule "applyEq" (formula "65") (term "1,1,1,0,0,1,0") (ifseqformula "54"))
                                                   (rule "applyEq" (formula "57") (term "1,0,2,0") (ifseqformula "54"))
                                                   (rule "eqSymm" (formula "57"))
                                                   (rule "applyEq" (formula "63") (term "1") (ifseqformula "54"))
                                                   (rule "applyEq" (formula "62") (term "0") (ifseqformula "54"))
                                                   (rule "applyEq" (formula "63") (term "0") (ifseqformula "54"))
                                                   (rule "inEqSimp_commuteLeq" (formula "63"))
                                                   (rule "applyEq" (formula "57") (term "1,0,2,0") (ifseqformula "54"))
                                                   (rule "eqSymm" (formula "57"))
                                                   (rule "applyEq" (formula "60") (term "1") (ifseqformula "54"))
                                                   (rule "commute_or" (formula "34") (term "0"))
                                                   (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "45") (term "0,1,0,1,0"))
                                                   (rule "commute_or" (formula "67") (term "0"))
                                                   (rule "arrayLengthIsAShort" (formula "62") (term "0"))
                                                    (builtin "One Step Simplification" (formula "62"))
                                                   (rule "true_left" (formula "62"))
                                                   (rule "arrayLengthNotNegative" (formula "62") (term "0"))
                                                   (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "43") (term "0"))
                                                    (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "78")) (ifInst ""  (formula "59")))
                                                   (rule "translateJavaSubInt" (formula "43") (term "3,0,1,0"))
                                                   (rule "polySimp_elimSub" (formula "43") (term "3,0,1,0"))
                                                   (rule "mul_literals" (formula "43") (term "1,3,0,1,0"))
                                                   (rule "polySimp_addComm0" (formula "43") (term "3,0,1,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "43") (term "1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "43") (term "1,0,0,0,0,0"))
                                                   (rule "replace_known_left" (formula "43") (term "1,0,0,0,0,0") (ifseqformula "58"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "inEqSimp_commuteLeq" (formula "43") (term "0,1,0,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "43") (term "1,1,0,0,0"))
                                                   (rule "applyEq" (formula "43") (term "0,1,0,0,0,0") (ifseqformula "60"))
                                                   (rule "eqSymm" (formula "43") (term "1,0,0,0,0"))
                                                   (rule "replace_known_left" (formula "43") (term "1,0,0,0,0") (ifseqformula "54"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "applyEq" (formula "43") (term "1,1,1,0,0,0") (ifseqformula "60"))
                                                   (rule "replace_known_left" (formula "43") (term "1,1,0,0,0") (ifseqformula "63"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "applyEq" (formula "43") (term "0,0,0,0,0,0") (ifseqformula "55"))
                                                   (rule "replace_known_right" (formula "43") (term "0,0,0,0,0") (ifseqformula "79"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "applyEq" (formula "43") (term "1,1,0,0") (ifseqformula "60"))
                                                   (rule "applyEq" (formula "43") (term "1,0,1,0") (ifseqformula "55"))
                                                   (rule "applyEq" (formula "43") (term "1,3,0,1,0") (ifseqformula "60"))
                                                   (rule "applyEq" (formula "43") (term "0,0,0,0") (ifseqformula "60"))
                                                   (rule "replace_known_left" (formula "43") (term "0,0,0") (ifseqformula "53"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "applyEq" (formula "43") (term "0,0,0,0") (ifseqformula "55"))
                                                   (rule "replace_known_left" (formula "43") (term "0,0") (ifseqformula "64"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "arrayLengthIsAShort" (formula "61") (term "0"))
                                                    (builtin "One Step Simplification" (formula "61"))
                                                   (rule "true_left" (formula "61"))
                                                   (rule "arrayLengthNotNegative" (formula "61") (term "0"))
                                                   (rule "inEqSimp_subsumption1" (formula "61") (ifseqformula "62"))
                                                   (rule "leq_literals" (formula "61") (term "0"))
                                                    (builtin "One Step Simplification" (formula "61"))
                                                   (rule "true_left" (formula "61"))
                                                   (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "44") (term "0,1,0,1,0,1,0"))
                                                   (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "43") (term "1"))
                                                    (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "80")) (ifInst ""  (formula "79")) (ifInst ""  (formula "77")) (ifInst ""  (formula "55")))
                                                   (rule "translateJavaSubInt" (formula "43") (term "0,2,0,1,0,1"))
                                                   (rule "translateJavaSubInt" (formula "43") (term "0,2,1,1,0,1"))
                                                   (rule "eqSymm" (formula "43") (term "1,0,0,0,1"))
                                                   (rule "eqSymm" (formula "43") (term "1,0,1"))
                                                   (rule "polySimp_elimSub" (formula "43") (term "0,2,1,1,0,1"))
                                                   (rule "mul_literals" (formula "43") (term "1,0,2,1,1,0,1"))
                                                   (rule "polySimp_elimSub" (formula "43") (term "0,2,0,1,0,1"))
                                                   (rule "mul_literals" (formula "43") (term "1,0,2,0,1,0,1"))
                                                   (rule "polySimp_addComm0" (formula "43") (term "0,2,1,1,0,1"))
                                                   (rule "polySimp_addComm0" (formula "43") (term "0,2,0,1,0,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "43") (term "0,0,0,0,0,1"))
                                                   (rule "applyEq" (formula "43") (term "0,1,0,0,0,0,1") (ifseqformula "40"))
                                                   (rule "replace_known_left" (formula "43") (term "1,0,0,0,0,1") (ifseqformula "32"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "applyEq" (formula "43") (term "0,0,0,0,0,1") (ifseqformula "40"))
                                                   (rule "replace_known_left" (formula "43") (term "0,0,0,0,1") (ifseqformula "53"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "applyEq" (formula "43") (term "3,0,1,0,0,1") (ifseqformula "60"))
                                                   (rule "applyEq" (formula "43") (term "1,0,2,0,1,0,1") (ifseqformula "60"))
                                                   (rule "eqSymm" (formula "43") (term "1,0,1"))
                                                   (rule "applyEq" (formula "43") (term "0,0,0,0,1") (ifseqformula "60"))
                                                   (rule "eqSymm" (formula "43") (term "0,0,0,1"))
                                                   (rule "replace_known_left" (formula "43") (term "0,0,0,1") (ifseqformula "40"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "applyEq" (formula "43") (term "1,0,2,0,1,0,1") (ifseqformula "60"))
                                                   (rule "eqSymm" (formula "43") (term "1,0,1"))
                                                   (rule "replace_known_left" (formula "43") (term "1,0,1") (ifseqformula "57"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "cnf_rightDist" (formula "46") (term "0"))
                                                   (rule "distr_forallAnd" (formula "46"))
                                                   (rule "andLeft" (formula "46"))
                                                   (rule "commute_or" (formula "57") (term "0,0,1,0"))
                                                   (rule "commute_or" (formula "66") (term "0,0,1,0"))
                                                   (rule "all_pull_out3" (formula "18") (term "0"))
                                                   (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "43") (term "0,0") (inst "i=i") (inst "j=j_1"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "inEqSimp_ltToLeq" (formula "43") (term "1,0,0,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "43") (term "1,0,0,1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "43") (term "0,1,0,0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "43") (term "0,0,1,0,0,1,0,0"))
                                                   (rule "add_literals" (formula "43") (term "0,0,0,1,0,0,1,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "43") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "43") (term "1,0,0,1,0,0,0"))
                                                   (rule "mul_literals" (formula "43") (term "0,1,0,0,1,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "43") (term "0,0,1,0,0,0"))
                                                   (rule "add_literals" (formula "43") (term "0,0,0,1,0,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "43") (term "0,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "43") (term "0,0,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "43") (term "1,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "1,0,0,1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "43") (term "1,1,0,0,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "43") (term "1,1,0,0,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "43") (term "1,1,1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "43") (term "0,1,1,0,0,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "43") (term "1,1,1,0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "1,0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "43") (term "1,1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "43") (term "1,1,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "43") (term "1,1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "43") (term "0,1,1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "43") (term "1,1,1,0,0,0"))
                                                   (rule "nnf_imp2or" (formula "43") (term "0,0"))
                                                   (rule "nnf_notAnd" (formula "43") (term "0,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "43") (term "0,0,0,0"))
                                                   (rule "times_zero_1" (formula "43") (term "1,0,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "43") (term "0,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "0,0,0,0"))
                                                   (rule "mul_literals" (formula "43") (term "1,0,0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "43") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "43") (term "1,0,0,1,0,0,0"))
                                                   (rule "mul_literals" (formula "43") (term "0,1,0,0,1,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "43") (term "0,0,1,0,0,0"))
                                                   (rule "add_literals" (formula "43") (term "0,0,0,1,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "1,0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "43") (term "1,1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "43") (term "1,1,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "43") (term "1,1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "43") (term "0,1,1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "43") (term "1,1,1,0,0,0"))
                                                   (rule "nnf_imp2or" (formula "43") (term "0,1,0,0"))
                                                   (rule "nnf_notAnd" (formula "43") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "43") (term "1,0,0,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "43") (term "1,0,0,1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "43") (term "0,1,0,0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "43") (term "0,0,1,0,0,1,0,0"))
                                                   (rule "add_literals" (formula "43") (term "0,0,0,1,0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "1,0,0,1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "43") (term "1,1,0,0,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "43") (term "1,1,0,0,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "43") (term "1,1,1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "43") (term "0,1,1,0,0,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "43") (term "1,1,1,0,0,1,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "43") (term "0,0,0,1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,0,0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "0,0,0,1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,0,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "43") (term "1,0,0,0,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "43") (term "1,1,0,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "43") (term "0,1,0,0,0,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "43") (term "1,1,0,0,0,1,0,0"))
                                                   (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "43") (term "1,1"))
                                                    (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "79")) (ifInst ""  (formula "60")))
                                                   (rule "translateJavaSubInt" (formula "43") (term "3,0,1,1,1"))
                                                   (rule "polySimp_elimSub" (formula "43") (term "3,0,1,1,1"))
                                                   (rule "mul_literals" (formula "43") (term "1,3,0,1,1,1"))
                                                   (rule "polySimp_addComm0" (formula "43") (term "3,0,1,1,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "43") (term "1,0,0,0,0,1,1"))
                                                   (rule "replace_known_left" (formula "43") (term "1,0,0,0,0,1,1") (ifseqformula "59"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "inEqSimp_commuteLeq" (formula "43") (term "1,0,1,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "43") (term "1,1,0,0,1,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "43") (term "0,1,0,0,1,1"))
                                                   (rule "applyEq" (formula "43") (term "0,0,1,0,0,1,1") (ifseqformula "61"))
                                                   (rule "replace_known_left" (formula "43") (term "0,1,0,0,1,1") (ifseqformula "54"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "applyEq" (formula "43") (term "0,0,1,0,1,1") (ifseqformula "56"))
                                                   (rule "inEqSimp_commuteGeq" (formula "43") (term "1,0,1,1"))
                                                   (rule "applyEq" (formula "43") (term "1,1,0,0,1,1") (ifseqformula "61"))
                                                   (rule "replace_known_left" (formula "43") (term "1,0,0,1,1") (ifseqformula "64"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "applyEq" (formula "43") (term "1,0,1,1,1") (ifseqformula "56"))
                                                   (rule "applyEq" (formula "43") (term "0,1,0,0,1,1") (ifseqformula "61"))
                                                   (rule "eqSymm" (formula "43") (term "1,0,0,1,1"))
                                                   (rule "replace_known_left" (formula "43") (term "1,0,0,1,1") (ifseqformula "55"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "applyEq" (formula "43") (term "0,0,0,0,1,1") (ifseqformula "56"))
                                                   (rule "replace_known_right" (formula "43") (term "0,0,0,1,1") (ifseqformula "80"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "applyEq" (formula "43") (term "0,0,1,1") (ifseqformula "61"))
                                                   (rule "inEqSimp_commuteLeq" (formula "43") (term "0,1,1"))
                                                   (rule "replace_known_left" (formula "43") (term "0,1,1") (ifseqformula "65"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "applyEq" (formula "43") (term "1,3,0,1,1") (ifseqformula "61"))
                                                   (rule "commute_or_2" (formula "47") (term "0"))
                                                   (rule "shift_paren_or" (formula "18") (term "0,0"))
                                                   (rule "cnf_rightDist" (formula "46") (term "0"))
                                                   (rule "distr_forallAnd" (formula "46"))
                                                   (rule "andLeft" (formula "46"))
                                                   (rule "onlyCreatedObjectsAreReferencedFinal" (formula "57") (term "0") (ifseqformula "23") (ifseqformula "7"))
                                                   (rule "applyEq" (formula "57") (term "1,0,1") (ifseqformula "58"))
                                                   (rule "replace_known_left" (formula "57") (term "1") (ifseqformula "8"))
                                                    (builtin "One Step Simplification" (formula "57"))
                                                   (rule "true_left" (formula "57"))
                                                   (rule "allLeft" (formula "19") (inst "t=Z(0(#))"))
                                                   (rule "replaceKnownSelect_taclet1_0" (formula "19") (term "1,1"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet100012000121201_7" (formula "19") (term "1,1"))
                                                   (rule "leq_literals" (formula "19") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "19"))
                                                   (rule "add_zero_right" (formula "19") (term "0,2,0,1"))
                                                   (rule "inEqSimp_homoInEq1" (formula "19") (term "0"))
                                                   (rule "mul_literals" (formula "19") (term "1,0,0"))
                                                   (rule "add_zero_right" (formula "19") (term "0,0"))
                                                   (rule "applyEq" (formula "19") (term "1,1") (ifseqformula "16"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0"))
                                                   (rule "mul_literals" (formula "19") (term "1,0"))
                                                   (rule "pullOutSelect" (formula "19") (term "0,1") (inst "selectSK=arr_5"))
                                                   (rule "simplifySelectOfAnon" (formula "19"))
                                                    (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "103")) (ifInst ""  (formula "29")))
                                                   (rule "elementOfArrayRangeConcrete" (formula "19") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "19"))
                                                   (rule "leq_literals" (formula "19") (term "0,0,0"))
                                                    (builtin "One Step Simplification" (formula "19"))
                                                   (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0"))
                                                   (rule "inEqSimp_subsumption1" (formula "19") (term "0,0") (ifseqformula "57"))
                                                   (rule "leq_literals" (formula "19") (term "0,0,0"))
                                                    (builtin "One Step Simplification" (formula "19"))
                                                   (rule "applyEqReverse" (formula "20") (term "0,1") (ifseqformula "19"))
                                                   (rule "hideAuxiliaryEq" (formula "19"))
                                                   (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "44") (term "0,0,1") (inst "i=i") (inst "j=j_1"))
                                                    (builtin "One Step Simplification" (formula "44"))
                                                   (rule "inEqSimp_ltToLeq" (formula "44") (term "1,0,0,1,0,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,1,0,0,1,0,0,1"))
                                                   (rule "inEqSimp_ltToLeq" (formula "44") (term "1,0,0,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,1,0,0,0,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "44") (term "1,0,1,0,0,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "44") (term "0,0,0,0,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "44") (term "0,0,0,1,0,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "1,0,0,1,0,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "44") (term "1,1,0,0,1,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "44") (term "1,1,0,0,1,0,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "44") (term "1,1,1,0,0,1,0,0,1"))
                                                   (rule "mul_literals" (formula "44") (term "0,1,1,0,0,1,0,0,1"))
                                                   (rule "polySimp_elimOne" (formula "44") (term "1,1,1,0,0,1,0,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "1,0,0,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "44") (term "1,1,0,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "44") (term "1,1,0,0,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "44") (term "1,1,1,0,0,0,1"))
                                                   (rule "mul_literals" (formula "44") (term "0,1,1,0,0,0,1"))
                                                   (rule "polySimp_elimOne" (formula "44") (term "1,1,1,0,0,0,1"))
                                                   (rule "nnf_imp2or" (formula "44") (term "0,0,1"))
                                                   (rule "nnf_notAnd" (formula "44") (term "0,0,0,1"))
                                                   (rule "inEqSimp_notGeq" (formula "44") (term "0,0,0,0,1"))
                                                   (rule "mul_literals" (formula "44") (term "1,0,0,0,0,0,0,1"))
                                                   (rule "add_zero_right" (formula "44") (term "0,0,0,0,0,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "0,0,0,0,1"))
                                                   (rule "mul_literals" (formula "44") (term "1,0,0,0,0,1"))
                                                   (rule "inEqSimp_notLeq" (formula "44") (term "1,0,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "44") (term "1,0,0,1,0,0,0,1"))
                                                   (rule "mul_literals" (formula "44") (term "0,1,0,0,1,0,0,0,1"))
                                                   (rule "polySimp_addAssoc" (formula "44") (term "0,0,1,0,0,0,1"))
                                                   (rule "add_literals" (formula "44") (term "0,0,0,1,0,0,0,1"))
                                                   (rule "add_zero_left" (formula "44") (term "0,0,1,0,0,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "44") (term "1,0,0,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "44") (term "1,1,0,0,0,1"))
                                                   (rule "polySimp_elimOne" (formula "44") (term "1,1,0,0,0,1"))
                                                   (rule "nnf_imp2or" (formula "44") (term "0,1,0,0,1"))
                                                   (rule "nnf_notAnd" (formula "44") (term "0,0,1,0,0,1"))
                                                   (rule "inEqSimp_notLeq" (formula "44") (term "1,0,0,1,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "44") (term "1,0,0,1,0,0,1,0,0,1"))
                                                   (rule "mul_literals" (formula "44") (term "0,1,0,0,1,0,0,1,0,0,1"))
                                                   (rule "polySimp_addAssoc" (formula "44") (term "0,0,1,0,0,1,0,0,1"))
                                                   (rule "add_literals" (formula "44") (term "0,0,0,1,0,0,1,0,0,1"))
                                                   (rule "add_zero_left" (formula "44") (term "0,0,1,0,0,1,0,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "44") (term "1,0,0,1,0,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "44") (term "1,1,0,0,1,0,0,1"))
                                                   (rule "polySimp_elimOne" (formula "44") (term "1,1,0,0,1,0,0,1"))
                                                   (rule "inEqSimp_notGeq" (formula "44") (term "0,0,0,1,0,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,0,0,0,1,0,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "0,0,0,1,0,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,0,1,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "44") (term "1,0,0,0,1,0,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "44") (term "1,1,0,0,0,1,0,0,1"))
                                                   (rule "mul_literals" (formula "44") (term "0,1,0,0,0,1,0,0,1"))
                                                   (rule "polySimp_elimOne" (formula "44") (term "1,1,0,0,0,1,0,0,1"))
                                                   (rule "commute_or" (formula "48") (term "0"))
                                                   (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "44") (term "0,1,1"))
                                                   (rule "replace_known_right" (formula "44") (term "0,0,0") (ifseqformula "83"))
                                                    (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "24")))
                                                   (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "45") (term "0,1,1") (inst "i=i") (inst "j=j_1"))
                                                    (builtin "One Step Simplification" (formula "45"))
                                                   (rule "inEqSimp_ltToLeq" (formula "45") (term "1,0,0,1,0,1,1"))
                                                   (rule "polySimp_rightDist" (formula "45") (term "1,0,0,1,0,0,1,0,1,1"))
                                                   (rule "mul_literals" (formula "45") (term "0,1,0,0,1,0,0,1,0,1,1"))
                                                   (rule "polySimp_addAssoc" (formula "45") (term "0,0,1,0,0,1,0,1,1"))
                                                   (rule "add_literals" (formula "45") (term "0,0,0,1,0,0,1,0,1,1"))
                                                   (rule "inEqSimp_ltToLeq" (formula "45") (term "1,0,0,1,1"))
                                                   (rule "polySimp_rightDist" (formula "45") (term "1,0,0,1,0,0,1,1"))
                                                   (rule "mul_literals" (formula "45") (term "0,1,0,0,1,0,0,1,1"))
                                                   (rule "polySimp_addAssoc" (formula "45") (term "0,0,1,0,0,1,1"))
                                                   (rule "add_literals" (formula "45") (term "0,0,0,1,0,0,1,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "45") (term "1,0,1,0,1,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "45") (term "0,0,0,1,0,1,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "45") (term "0,0,0,1,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "45") (term "1,0,0,1,0,1,1"))
                                                   (rule "polySimp_mulComm0" (formula "45") (term "1,1,0,0,1,0,1,1"))
                                                   (rule "polySimp_rightDist" (formula "45") (term "1,1,0,0,1,0,1,1"))
                                                   (rule "mul_literals" (formula "45") (term "0,1,1,0,0,1,0,1,1"))
                                                   (rule "polySimp_mulLiterals" (formula "45") (term "1,1,1,0,0,1,0,1,1"))
                                                   (rule "polySimp_elimOne" (formula "45") (term "1,1,1,0,0,1,0,1,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "45") (term "1,0,0,1,1"))
                                                   (rule "polySimp_mulComm0" (formula "45") (term "1,1,0,0,1,1"))
                                                   (rule "polySimp_rightDist" (formula "45") (term "1,1,0,0,1,1"))
                                                   (rule "polySimp_mulLiterals" (formula "45") (term "1,1,1,0,0,1,1"))
                                                   (rule "mul_literals" (formula "45") (term "0,1,1,0,0,1,1"))
                                                   (rule "polySimp_elimOne" (formula "45") (term "1,1,1,0,0,1,1"))
                                                   (rule "nnf_imp2or" (formula "45") (term "0,1,1"))
                                                   (rule "nnf_notAnd" (formula "45") (term "0,0,1,1"))
                                                   (rule "inEqSimp_notLeq" (formula "45") (term "1,0,0,1,1"))
                                                   (rule "polySimp_rightDist" (formula "45") (term "1,0,0,1,0,0,1,1"))
                                                   (rule "mul_literals" (formula "45") (term "0,1,0,0,1,0,0,1,1"))
                                                   (rule "polySimp_addAssoc" (formula "45") (term "0,0,1,0,0,1,1"))
                                                   (rule "add_literals" (formula "45") (term "0,0,0,1,0,0,1,1"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "45") (term "1,0,0,1,1"))
                                                   (rule "polySimp_mulComm0" (formula "45") (term "1,1,0,0,1,1"))
                                                   (rule "polySimp_rightDist" (formula "45") (term "1,1,0,0,1,1"))
                                                   (rule "polySimp_mulLiterals" (formula "45") (term "1,1,1,0,0,1,1"))
                                                   (rule "mul_literals" (formula "45") (term "0,1,1,0,0,1,1"))
                                                   (rule "polySimp_elimOne" (formula "45") (term "1,1,1,0,0,1,1"))
                                                   (rule "inEqSimp_notGeq" (formula "45") (term "0,0,0,1,1"))
                                                   (rule "mul_literals" (formula "45") (term "1,0,0,0,0,0,1,1"))
                                                   (rule "add_literals" (formula "45") (term "0,0,0,0,0,1,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "45") (term "0,0,0,1,1"))
                                                   (rule "mul_literals" (formula "45") (term "1,0,0,0,1,1"))
                                                   (rule "nnf_imp2or" (formula "45") (term "0,1,0,1,1"))
                                                   (rule "nnf_notAnd" (formula "45") (term "0,0,1,0,1,1"))
                                                   (rule "inEqSimp_notLeq" (formula "45") (term "1,0,0,1,0,1,1"))
                                                   (rule "polySimp_rightDist" (formula "45") (term "1,0,0,1,0,0,1,0,1,1"))
                                                   (rule "mul_literals" (formula "45") (term "0,1,0,0,1,0,0,1,0,1,1"))
                                                   (rule "polySimp_addAssoc" (formula "45") (term "0,0,1,0,0,1,0,1,1"))
                                                   (rule "add_literals" (formula "45") (term "0,0,0,1,0,0,1,0,1,1"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "45") (term "1,0,0,1,0,1,1"))
                                                   (rule "polySimp_mulComm0" (formula "45") (term "1,1,0,0,1,0,1,1"))
                                                   (rule "polySimp_rightDist" (formula "45") (term "1,1,0,0,1,0,1,1"))
                                                   (rule "polySimp_mulLiterals" (formula "45") (term "1,1,1,0,0,1,0,1,1"))
                                                   (rule "mul_literals" (formula "45") (term "0,1,1,0,0,1,0,1,1"))
                                                   (rule "polySimp_elimOne" (formula "45") (term "1,1,1,0,0,1,0,1,1"))
                                                   (rule "inEqSimp_notGeq" (formula "45") (term "0,0,0,1,0,1,1"))
                                                   (rule "polySimp_mulComm0" (formula "45") (term "1,0,0,0,0,0,1,0,1,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "45") (term "0,0,0,1,0,1,1"))
                                                   (rule "polySimp_mulComm0" (formula "45") (term "1,0,0,0,1,0,1,1"))
                                                   (rule "polySimp_rightDist" (formula "45") (term "1,0,0,0,1,0,1,1"))
                                                   (rule "polySimp_mulLiterals" (formula "45") (term "1,1,0,0,0,1,0,1,1"))
                                                   (rule "mul_literals" (formula "45") (term "0,1,0,0,0,1,0,1,1"))
                                                   (rule "polySimp_elimOne" (formula "45") (term "1,1,0,0,0,1,0,1,1"))
                                                   (rule "commute_or" (formula "50") (term "0,0"))
                                                   (rule "all_pull_out3" (formula "47") (term "0"))
                                                   (rule "shift_paren_or" (formula "18") (term "0,0,0"))
                                                   (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "44") (term "0,1"))
                                                   (rule "replace_known_left" (formula "44") (term "1,0") (ifseqformula "24"))
                                                    (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "84")))
                                                   (rule "all_pull_out1" (formula "47") (term "0,1,0"))
                                                   (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "45") (term "0,0") (inst "i=i") (inst "j=j_1"))
                                                    (builtin "One Step Simplification" (formula "45"))
                                                   (rule "inEqSimp_ltToLeq" (formula "45") (term "1,0,0,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "45") (term "1,0,0,1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "45") (term "0,1,0,0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "45") (term "0,0,1,0,0,1,0,0"))
                                                   (rule "add_literals" (formula "45") (term "0,0,0,1,0,0,1,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "45") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "45") (term "1,0,0,1,0,0,0"))
                                                   (rule "mul_literals" (formula "45") (term "0,1,0,0,1,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "45") (term "0,0,1,0,0,0"))
                                                   (rule "add_literals" (formula "45") (term "0,0,0,1,0,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "45") (term "0,0,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "45") (term "0,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "45") (term "1,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "45") (term "1,0,0,1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "45") (term "1,1,0,0,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "45") (term "1,1,0,0,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "45") (term "1,1,1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "45") (term "0,1,1,0,0,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "45") (term "1,1,1,0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "45") (term "1,0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "45") (term "1,1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "45") (term "1,1,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "45") (term "1,1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "45") (term "0,1,1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "45") (term "1,1,1,0,0,0"))
                                                   (rule "nnf_imp2or" (formula "45") (term "0,0"))
                                                   (rule "nnf_notAnd" (formula "45") (term "0,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "45") (term "0,0,0,0"))
                                                   (rule "times_zero_1" (formula "45") (term "1,0,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "45") (term "0,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "45") (term "0,0,0,0"))
                                                   (rule "mul_literals" (formula "45") (term "1,0,0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "45") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "45") (term "1,0,0,1,0,0,0"))
                                                   (rule "mul_literals" (formula "45") (term "0,1,0,0,1,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "45") (term "0,0,1,0,0,0"))
                                                   (rule "add_literals" (formula "45") (term "0,0,0,1,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "45") (term "1,0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "45") (term "1,1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "45") (term "1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "45") (term "0,1,1,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "45") (term "1,1,1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "45") (term "1,1,1,0,0,0"))
                                                   (rule "nnf_imp2or" (formula "45") (term "0,1,0,0"))
                                                   (rule "nnf_notAnd" (formula "45") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "45") (term "0,0,0,1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "45") (term "1,0,0,0,0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "45") (term "0,0,0,1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "45") (term "1,0,0,0,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "45") (term "1,0,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "45") (term "0,1,0,0,0,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "45") (term "1,1,0,0,0,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "45") (term "1,1,0,0,0,1,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "45") (term "1,0,0,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "45") (term "1,0,0,1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "45") (term "0,1,0,0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "45") (term "0,0,1,0,0,1,0,0"))
                                                   (rule "add_literals" (formula "45") (term "0,0,0,1,0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "45") (term "1,0,0,1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "45") (term "1,1,0,0,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "45") (term "1,1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "45") (term "0,1,1,0,0,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "45") (term "1,1,1,0,0,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "45") (term "1,1,1,0,0,1,0,0"))
                                                   (rule "allLeft" (formula "21") (inst "t=b_0"))
                                                   (rule "replaceKnownSelect_taclet100012000121201_5" (formula "21") (term "1,1"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet100012000121201_6" (formula "21") (term "1,1"))
                                                   (rule "replace_known_right" (formula "21") (term "1") (ifseqformula "108"))
                                                    (builtin "One Step Simplification" (formula "21"))
                                                   (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
                                                   (rule "inEqSimp_homoInEq0" (formula "21") (term "0"))
                                                   (rule "polySimp_addComm1" (formula "21") (term "0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "0"))
                                                   (rule "polySimp_mulComm0" (formula "21") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "21") (term "1,0"))
                                                   (rule "mul_literals" (formula "21") (term "0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0"))
                                                   (rule "polySimp_elimOne" (formula "21") (term "1,1,0"))
                                                   (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "5"))
                                                   (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1"))
                                                   (rule "add_literals" (formula "21") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "21") (term "1,0,0,1"))
                                                   (rule "add_zero_right" (formula "21") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "21") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "21"))
                                                   (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "21"))
                                                   (rule "andLeft" (formula "2"))
                                                   (rule "inEqSimp_homoInEq1" (formula "2"))
                                                   (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                   (rule "mul_literals" (formula "2") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                   (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                                   (rule "add_literals" (formula "2") (term "0,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                   (rule "add_literals" (formula "2") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "2") (term "1,0"))
                                                   (rule "add_zero_right" (formula "2") (term "0"))
                                                   (rule "leq_literals" (formula "2"))
                                                   (rule "closeFalse" (formula "2"))
                                                )
                                             )
                                             (branch "j_0 >= 1 FALSE"
                                                (rule "applyEqReverse" (formula "15") (term "1,0,1") (ifseqformula "14"))
                                                (rule "hideAuxiliaryEq" (formula "14"))
                                                (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "64"))
                                                 (builtin "One Step Simplification" (formula "14"))
                                                (rule "true_left" (formula "14"))
                                                (rule "inEqSimp_geqRight" (formula "63"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "inEqSimp_subsumption0" (formula "11") (ifseqformula "1"))
                                                (rule "leq_literals" (formula "11") (term "0"))
                                                 (builtin "One Step Simplification" (formula "11"))
                                                (rule "true_left" (formula "11"))
                                                (rule "inEqSimp_antiSymm" (formula "13") (ifseqformula "1"))
                                                (rule "applyEqRigid" (formula "61") (term "0,2,0") (ifseqformula "13"))
                                                (rule "applyEqRigid" (formula "14") (term "0") (ifseqformula "13"))
                                                (rule "qeq_literals" (formula "14"))
                                                (rule "true_left" (formula "14"))
                                                (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "13"))
                                                (rule "inEqSimp_homoInEq0" (formula "2"))
                                                (rule "mul_literals" (formula "2") (term "1,0"))
                                                (rule "add_zero_right" (formula "2") (term "0"))
                                                (rule "applyEqRigid" (formula "17") (term "1,1,0,0,0") (ifseqformula "13"))
                                                (rule "add_zero_right" (formula "17") (term "1,0,0,0"))
                                                (rule "applyEqRigid" (formula "62") (term "5,0") (ifseqformula "13"))
                                                (rule "applyEqRigid" (formula "18") (term "1,1,0,0") (ifseqformula "13"))
                                                (rule "applyEqRigid" (formula "15") (term "1,1,1,0,0,0,1,0") (ifseqformula "13"))
                                                (rule "add_zero_right" (formula "15") (term "1,1,0,0,0,1,0"))
                                                (rule "applyEqRigid" (formula "10") (term "1,1") (ifseqformula "13"))
                                                (rule "add_zero_right" (formula "10") (term "1"))
                                                (rule "applyEq" (formula "14") (term "1,0") (ifseqformula "13"))
                                                (rule "bsum_lower_equals_upper" (formula "14") (term "0"))
                                                (rule "eqSymm" (formula "14"))
                                                (rule "applyEq" (formula "11") (term "1,1") (ifseqformula "13"))
                                                (rule "add_zero_right" (formula "11") (term "1"))
                                                (rule "applyEqRigid" (formula "16") (term "1,1,1,0,0") (ifseqformula "13"))
                                                (rule "add_literals" (formula "16") (term "1,1,0,0"))
                                                (rule "applyEq" (formula "15") (term "1,1,0,0") (ifseqformula "13"))
                                                (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "13"))
                                                (rule "leq_literals" (formula "1"))
                                                (rule "true_left" (formula "1"))
                                                (rule "applyEq" (formula "17") (term "1,0,1,0") (ifseqformula "13"))
                                                (rule "applyEq" (formula "17") (term "1,1,0,0,1,0") (ifseqformula "12"))
                                                (rule "add_zero_right" (formula "17") (term "1,0,0,1,0"))
                                                (rule "applyEq" (formula "55") (term "1,0,2,0") (ifseqformula "12"))
                                                (rule "applyEq" (formula "55") (term "0,2,1") (ifseqformula "12"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                                (rule "mul_literals" (formula "1") (term "1"))
                                                (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "44"))
                                                (rule "leq_literals" (formula "8") (term "0"))
                                                 (builtin "One Step Simplification" (formula "8"))
                                                (rule "true_left" (formula "8"))
                                                (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "44"))
                                                (rule "leq_literals" (formula "8") (term "0"))
                                                 (builtin "One Step Simplification" (formula "8"))
                                                (rule "true_left" (formula "8"))
                                                (rule "inEqSimp_or_tautInEq0" (formula "14") (term "0,0"))
                                                (rule "add_zero_right" (formula "14") (term "1,1,0,0"))
                                                (rule "qeq_literals" (formula "14") (term "1,0,0"))
                                                 (builtin "One Step Simplification" (formula "14"))
                                                (rule "true_left" (formula "14"))
                                                (rule "inEqSimp_or_tautInEq0" (formula "12") (term "0,0"))
                                                (rule "add_literals" (formula "12") (term "1,1,0,0"))
                                                (rule "qeq_literals" (formula "12") (term "1,0,0"))
                                                 (builtin "One Step Simplification" (formula "12"))
                                                (rule "true_left" (formula "12"))
                                                (rule "inEqSimp_or_tautInEq0" (formula "11") (term "0,0"))
                                                (rule "add_literals" (formula "11") (term "1,1,0,0"))
                                                (rule "qeq_literals" (formula "11") (term "1,0,0"))
                                                 (builtin "One Step Simplification" (formula "11"))
                                                (rule "true_left" (formula "11"))
                                                (rule "Contract_axiom_for_isClassifiedBlocksRange_in_Classifier" (formula "31") (term "0"))
                                                (rule "translateJavaSubInt" (formula "31") (term "0,0,0,0,0,0,0"))
                                                (rule "replace_known_left" (formula "31") (term "1,0,0,0") (ifseqformula "13"))
                                                 (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "78")) (ifInst ""  (formula "14")) (ifInst ""  (formula "79")))
                                                (rule "polySimp_elimSub" (formula "31") (term "0,0,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,0,0"))
                                                (rule "add_literals" (formula "31") (term "1,1,0,0,0,0"))
                                                (rule "times_zero_1" (formula "31") (term "1,0,0,0,0"))
                                                (rule "add_zero_right" (formula "31") (term "0,0,0,0"))
                                                (rule "Definition_axiom_for_isClassifiedBlocksRange_in_de_wiesler_Classifier" (formula "32") (term "0") (inst "block=block"))
                                                 (builtin "One Step Simplification" (formula "32"))
                                                (rule "translateJavaMulInt" (formula "32") (term "1,4,0,1,0"))
                                                (rule "translateJavaSubInt" (formula "32") (term "0,1,1,0,0"))
                                                (rule "translateJavaAddInt" (formula "32") (term "3,0,1,0"))
                                                (rule "translateJavaAddInt" (formula "32") (term "0,1,4,0,1,0"))
                                                (rule "translateJavaDivInt" (formula "32") (term "1,1,0,0"))
                                                (rule "translateJavaMulInt" (formula "32") (term "1,3,0,1,0"))
                                                (rule "translateJavaAddInt" (formula "32") (term "4,0,1,0"))
                                                (rule "polySimp_elimSub" (formula "32") (term "0,1,1,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,1,1,0,0"))
                                                (rule "add_literals" (formula "32") (term "1,1,0,1,1,0,0"))
                                                (rule "times_zero_1" (formula "32") (term "1,0,1,1,0,0"))
                                                (rule "add_zero_right" (formula "32") (term "0,1,1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "32") (term "1,4,0,1,0"))
                                                (rule "polySimp_addComm0" (formula "32") (term "1,1,4,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "32") (term "1,4,0,1,0"))
                                                (rule "mul_literals" (formula "32") (term "0,1,4,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "32") (term "4,0,1,0"))
                                                (rule "polySimp_addComm0" (formula "32") (term "0,4,0,1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0"))
                                                (rule "applyEqRigid" (formula "32") (term "0,1,0,0,1,0,0") (ifseqformula "38"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0"))
                                                (rule "mul_literals" (formula "32") (term "0,1,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0"))
                                                (rule "Contract_axiom_for_allElementsCounted_in_Classifier" (formula "30") (term "0"))
                                                (rule "replace_known_right" (formula "30") (term "0,1,0") (ifseqformula "80"))
                                                 (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "79")) (ifInst ""  (formula "78")) (ifInst ""  (formula "13")) (ifInst ""  (formula "14")))
                                                (rule "inEqSimp_commuteGeq" (formula "30") (term "0,0"))
                                                (rule "applyEq" (formula "30") (term "0,0,0") (ifseqformula "29"))
                                                (rule "inEqSimp_subsumption0" (formula "30") (term "0,0") (ifseqformula "24"))
                                                (rule "inEqSimp_homoInEq0" (formula "30") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "30") (term "1,0,0,0,0"))
                                                (rule "mul_literals" (formula "30") (term "0,1,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "30") (term "0,0,0,0"))
                                                (rule "polySimp_addComm0" (formula "30") (term "0,0,0,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,0,0"))
                                                (rule "add_literals" (formula "30") (term "1,1,0,0,0,0"))
                                                (rule "times_zero_1" (formula "30") (term "1,0,0,0,0"))
                                                (rule "add_zero_right" (formula "30") (term "0,0,0,0"))
                                                (rule "qeq_literals" (formula "30") (term "0,0,0"))
                                                 (builtin "One Step Simplification" (formula "30"))
                                                (rule "true_left" (formula "30"))
                                                (rule "Definition_axiom_for_allElementsCounted_in_de_wiesler_Classifier" (formula "30") (term "0") (inst "b=b") (inst "b_0=b_0"))
                                                 (builtin "One Step Simplification" (formula "30"))
                                                (rule "translateJavaCastInt" (formula "30") (term "0,1"))
                                                (rule "translateJavaSubInt" (formula "30") (term "1,1"))
                                                (rule "andLeft" (formula "30"))
                                                (rule "polySimp_elimSub" (formula "31") (term "1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "31") (term "1"))
                                                (rule "add_literals" (formula "31") (term "1,1,1"))
                                                (rule "times_zero_1" (formula "31") (term "1,1"))
                                                (rule "add_zero_right" (formula "31") (term "1"))
                                                (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0"))
                                                (rule "applyEq" (formula "31") (term "1,0") (ifseqformula "29"))
                                                (rule "applyEq" (formula "30") (term "0,1,0,0,1,0,0") (ifseqformula "29"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0"))
                                                (rule "mul_literals" (formula "30") (term "0,1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0"))
                                                (rule "nnf_notAnd" (formula "34") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "34") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "34") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "34") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "34") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0"))
                                                (rule "mul_literals" (formula "34") (term "1,0,0,0"))
                                                (rule "Contract_axiom_for_countClassOfSliceEq_in_Classifier" (formula "81") (term "1"))
                                                (rule "replace_known_left" (formula "1") (term "1,0,0") (ifseqformula "15"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "80")) (ifInst ""  (formula "14")) (ifInst ""  (formula "81")))
                                                (rule "true_left" (formula "1"))
                                                (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "81") (term "1") (inst "i=i"))
                                                (rule "eqSymm" (formula "81"))
                                                (rule "Contract_axiom_for_countClassOfSliceEq_in_Classifier" (formula "11") (term "1,1,0"))
                                                (rule "replace_known_right" (formula "11") (term "0,1,0") (ifseqformula "81"))
                                                 (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "80")) (ifInst ""  (formula "14")) (ifInst ""  (formula "15")))
                                                (rule "true_left" (formula "11"))
                                                (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "11") (term "1,1,0") (inst "i=i"))
                                                (rule "eqSymm" (formula "11") (term "1,0"))
                                                (rule "arrayLengthIsAShort" (formula "24") (term "1,1"))
                                                 (builtin "One Step Simplification" (formula "24"))
                                                (rule "true_left" (formula "24"))
                                                (rule "arrayLengthNotNegative" (formula "24") (term "1,1"))
                                                (rule "inEqSimp_subsumption1" (formula "24") (ifseqformula "42"))
                                                (rule "leq_literals" (formula "24") (term "0"))
                                                 (builtin "One Step Simplification" (formula "24"))
                                                (rule "true_left" (formula "24"))
                                                (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "47"))
                                                 (builtin "One Step Simplification" (formula "47"))
                                                (rule "translateJavaSubInt" (formula "47") (term "3,0,1"))
                                                (rule "andLeft" (formula "47"))
                                                (rule "andLeft" (formula "47"))
                                                (rule "andLeft" (formula "47"))
                                                (rule "andLeft" (formula "48"))
                                                (rule "andLeft" (formula "47"))
                                                (rule "andLeft" (formula "47"))
                                                (rule "andLeft" (formula "47"))
                                                (rule "andLeft" (formula "49"))
                                                (rule "notLeft" (formula "47"))
                                                (rule "notLeft" (formula "47"))
                                                (rule "polySimp_elimSub" (formula "53") (term "3,0"))
                                                (rule "mul_literals" (formula "53") (term "1,3,0"))
                                                (rule "polySimp_addComm0" (formula "53") (term "3,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "52"))
                                                (rule "inEqSimp_commuteLeq" (formula "50"))
                                                (rule "inEqSimp_commuteLeq" (formula "51"))
                                                (rule "inEqSimp_commuteLeq" (formula "47"))
                                                (rule "applyEq" (formula "53") (term "1,0") (ifseqformula "44"))
                                                (rule "applyEq" (formula "52") (term "0,0") (ifseqformula "44"))
                                                (rule "inEqSimp_commuteGeq" (formula "52"))
                                                (rule "applyEq" (formula "65") (term "0") (ifseqformula "44"))
                                                (rule "applyEq" (formula "51") (term "1") (ifseqformula "49"))
                                                (rule "applyEq" (formula "53") (term "1,3,0") (ifseqformula "49"))
                                                (rule "applyEq" (formula "50") (term "0") (ifseqformula "49"))
                                                (rule "applyEq" (formula "43") (term "0,1,0") (ifseqformula "49"))
                                                (rule "applyEq" (formula "46") (term "1,0,2,0") (ifseqformula "49"))
                                                (rule "eqSymm" (formula "46"))
                                                (rule "applyEq" (formula "45") (term "3,0") (ifseqformula "49"))
                                                (rule "applyEq" (formula "43") (term "2,0") (ifseqformula "49"))
                                                (rule "applyEq" (formula "52") (term "0") (ifseqformula "49"))
                                                (rule "applyEq" (formula "46") (term "1,0,2,0") (ifseqformula "49"))
                                                (rule "eqSymm" (formula "46"))
                                                (rule "inEqSimp_exactShadow3" (formula "50") (ifseqformula "52"))
                                                (rule "mul_literals" (formula "50") (term "0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "50"))
                                                (rule "mul_literals" (formula "50") (term "1"))
                                                (rule "nnf_imp2or" (formula "33") (term "0"))
                                                (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "35") (term "0,0,1,0"))
                                                (rule "nnf_imp2or" (formula "30") (term "0"))
                                                (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "36") (term "2,0"))
                                                (rule "arrayLengthIsAShort" (formula "21") (term "0"))
                                                 (builtin "One Step Simplification" (formula "21"))
                                                (rule "true_left" (formula "21"))
                                                (rule "arrayLengthNotNegative" (formula "21") (term "0"))
                                                (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
                                                (rule "qeq_literals" (formula "21"))
                                                (rule "true_left" (formula "21"))
                                                (rule "arrayLengthNotNegative" (formula "20") (term "0"))
                                                (rule "applyEq" (formula "20") (term "0") (ifseqformula "21"))
                                                (rule "qeq_literals" (formula "20"))
                                                (rule "true_left" (formula "20"))
                                                (rule "arrayLengthIsAShort" (formula "20") (term "0"))
                                                 (builtin "One Step Simplification" (formula "20"))
                                                (rule "true_left" (formula "20"))
                                                (rule "nnf_notAnd" (formula "33") (term "0,0"))
                                                (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0"))
                                                (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "33") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0"))
                                                (rule "mul_literals" (formula "33") (term "1,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "33") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "33") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0"))
                                                (rule "nnf_notAnd" (formula "30") (term "0,0"))
                                                (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0"))
                                                (rule "mul_literals" (formula "30") (term "1,0,0,0,0,0"))
                                                (rule "add_literals" (formula "30") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0"))
                                                (rule "mul_literals" (formula "30") (term "1,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "30") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "30") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0"))
                                                (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "34") (term "1,4,0,1,0"))
                                                (rule "cnf_rightDist" (formula "23") (term "0"))
                                                (rule "Contract_axiom_for_countClassOfSliceEq_in_Classifier" (formula "64") (term "0"))
                                                (rule "replace_known_right" (formula "64") (term "0,1,0,0,0,0") (ifseqformula "88"))
                                                 (builtin "One Step Simplification" (formula "64") (ifInst ""  (formula "13")) (ifInst ""  (formula "14")) (ifInst ""  (formula "89")))
                                                (rule "true_left" (formula "64"))
                                                (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "64") (term "0") (inst "i=i"))
                                                (rule "cnf_rightDist" (formula "56") (term "0"))
                                                (rule "jdiv_axiom" (formula "39") (term "0"))
                                                (rule "polySimp_mulLiterals" (formula "39") (term "0,0,2,1"))
                                                (rule "eqSymm" (formula "39"))
                                                (rule "applyEqRigid" (formula "39") (term "1") (ifseqformula "40"))
                                                (rule "inEqSimp_subsumption6" (formula "39") (term "0,0") (ifseqformula "37"))
                                                (rule "greater_literals" (formula "39") (term "0,0,0,0"))
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "times_zero_1" (formula "39") (term "1,0,0,0"))
                                                (rule "leq_literals" (formula "39") (term "0,0,0"))
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "polyDiv_pullOut" (formula "39") (term "0") (inst "polyDivCoeff=l_0"))
                                                (rule "polySimp_mulLiterals" (formula "39") (term "1,0,0,2,0"))
                                                (rule "equal_literals" (formula "39") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "polySimp_homoEq" (formula "39"))
                                                (rule "polySimp_pullOutFactor0" (formula "39") (term "0,0,0,1,0"))
                                                (rule "add_literals" (formula "39") (term "1,0,0,0,1,0"))
                                                (rule "times_zero_1" (formula "39") (term "0,0,0,1,0"))
                                                (rule "div_literals" (formula "39") (term "0,0,1,0"))
                                                (rule "add_zero_left" (formula "39") (term "0,1,0"))
                                                (rule "polySimp_pullOutFactor1" (formula "39") (term "0"))
                                                (rule "add_literals" (formula "39") (term "1,0"))
                                                (rule "times_zero_1" (formula "39") (term "0"))
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "true_left" (formula "39"))
                                                (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "32") (term "1,0"))
                                                 (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "67")) (ifInst ""  (formula "66")) (ifInst ""  (formula "44")))
                                                (rule "translateJavaSubInt" (formula "32") (term "0,2,0,1,0,1,0"))
                                                (rule "translateJavaSubInt" (formula "32") (term "0,2,1,1,0,1,0"))
                                                (rule "translateJavaMulInt" (formula "32") (term "1,1,1,0,0,0,1,0"))
                                                (rule "eqSymm" (formula "32") (term "1,0,1,0"))
                                                (rule "eqSymm" (formula "32") (term "1,0,0,0,1,0"))
                                                (rule "polySimp_elimSub" (formula "32") (term "0,2,0,1,0,1,0"))
                                                (rule "mul_literals" (formula "32") (term "1,0,2,0,1,0,1,0"))
                                                (rule "eqSymm" (formula "32") (term "1,0,1,0"))
                                                (rule "polySimp_elimSub" (formula "32") (term "0,2,0,1,0,1,0"))
                                                (rule "mul_literals" (formula "32") (term "1,0,2,0,1,0,1,0"))
                                                (rule "eqSymm" (formula "32") (term "1,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "32") (term "1,0,1,0,0,0,1,0"))
                                                (rule "polySimp_addComm0" (formula "32") (term "0,2,1,1,0,1,0"))
                                                (rule "polySimp_addComm0" (formula "32") (term "0,2,0,1,0,1,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0,0,0,1,0"))
                                                (rule "applyEq" (formula "32") (term "0,1,0,0,0,0,1,0") (ifseqformula "29"))
                                                (rule "replace_known_left" (formula "32") (term "1,0,0,0,0,1,0") (ifseqformula "22"))
                                                 (builtin "One Step Simplification" (formula "32"))
                                                (rule "applyEq" (formula "32") (term "0,0,0,0,0,1,0") (ifseqformula "29"))
                                                (rule "replace_known_left" (formula "32") (term "0,0,0,0,1,0") (ifseqformula "42"))
                                                 (builtin "One Step Simplification" (formula "32"))
                                                (rule "applyEq" (formula "32") (term "1,0,2,0,1,0,1,0") (ifseqformula "49"))
                                                (rule "eqSymm" (formula "32") (term "1,0,1,0"))
                                                (rule "applyEq" (formula "32") (term "2,0,0,0,0,1,0") (ifseqformula "49"))
                                                (rule "applyEq" (formula "32") (term "3,0,1,0,0,1,0") (ifseqformula "49"))
                                                (rule "replace_known_left" (formula "32") (term "1,0,0,1,0") (ifseqformula "45"))
                                                 (builtin "One Step Simplification" (formula "32"))
                                                (rule "applyEq" (formula "32") (term "0,1,0,0,0,1,0") (ifseqformula "49"))
                                                (rule "applyEq" (formula "32") (term "1,0,2,0,1,0,1,0") (ifseqformula "49"))
                                                (rule "eqSymm" (formula "32") (term "1,0,1,0"))
                                                (rule "replace_known_left" (formula "32") (term "1,0,1,0") (ifseqformula "46"))
                                                 (builtin "One Step Simplification" (formula "32"))
                                                (rule "applyEq" (formula "32") (term "0,0,1,0") (ifseqformula "43"))
                                                (rule "eqSymm" (formula "32") (term "0,1,0"))
                                                (rule "replace_known_left" (formula "32") (term "0,1,0") (ifseqformula "29"))
                                                 (builtin "One Step Simplification" (formula "32"))
                                                (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "89") (term "0,0,2,0"))
                                                (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "11") (term "0,0,2,0,1,0"))
                                                (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "54") (term "0"))
                                                (rule "replace_known_left" (formula "54") (term "0,1") (ifseqformula "55"))
                                                 (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "67")) (ifInst ""  (formula "13")))
                                                (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "55") (term "0") (inst "i=i") (inst "j=j_1"))
                                                 (builtin "One Step Simplification" (formula "55"))
                                                (rule "inEqSimp_ltToLeq" (formula "55") (term "1,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "55") (term "1,0,0,1,0,0,1,0"))
                                                (rule "mul_literals" (formula "55") (term "0,1,0,0,1,0,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "55") (term "0,0,1,0,0,1,0"))
                                                (rule "add_literals" (formula "55") (term "0,0,0,1,0,0,1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "55") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "55") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "55") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "55") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "55") (term "0,0,0,1,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "55") (term "0,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "55") (term "0,0,0,1,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "55") (term "1,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "55") (term "1,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "55") (term "1,1,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "55") (term "1,1,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "55") (term "1,1,1,0,0,1,0"))
                                                (rule "mul_literals" (formula "55") (term "0,1,1,0,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "55") (term "1,1,1,0,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "55") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "55") (term "1,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "55") (term "1,1,0,0"))
                                                (rule "mul_literals" (formula "55") (term "0,1,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "55") (term "1,1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "55") (term "1,1,1,0,0"))
                                                (rule "nnf_imp2or" (formula "55") (term "0"))
                                                (rule "nnf_notAnd" (formula "55") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "55") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "55") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "55") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "55") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "55") (term "0,0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "55") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "55") (term "1,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "55") (term "1,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "55") (term "1,1,1,0,0"))
                                                (rule "mul_literals" (formula "55") (term "0,1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "55") (term "1,1,1,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "55") (term "0,0,0"))
                                                (rule "mul_literals" (formula "55") (term "1,0,0,0,0,0"))
                                                (rule "add_literals" (formula "55") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "55") (term "0,0,0"))
                                                (rule "mul_literals" (formula "55") (term "1,0,0,0"))
                                                (rule "nnf_imp2or" (formula "55") (term "0,1,0"))
                                                (rule "nnf_notAnd" (formula "55") (term "0,0,1,0"))
                                                (rule "inEqSimp_notGeq" (formula "55") (term "0,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,0,0,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "55") (term "0,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "55") (term "1,0,0,0,1,0"))
                                                (rule "mul_literals" (formula "55") (term "0,1,0,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "55") (term "1,1,0,0,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "55") (term "1,1,0,0,0,1,0"))
                                                (rule "inEqSimp_notLeq" (formula "55") (term "1,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "55") (term "1,0,0,1,0,0,1,0"))
                                                (rule "mul_literals" (formula "55") (term "0,1,0,0,1,0,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "55") (term "0,0,1,0,0,1,0"))
                                                (rule "add_literals" (formula "55") (term "0,0,0,1,0,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "55") (term "1,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "55") (term "1,1,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "55") (term "1,1,0,0,1,0"))
                                                (rule "mul_literals" (formula "55") (term "0,1,1,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "55") (term "1,1,1,0,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "55") (term "1,1,1,0,0,1,0"))
                                                (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "45") (term "0") (inst "i=i") (inst "j=j_1"))
                                                 (builtin "One Step Simplification" (formula "45"))
                                                (rule "inEqSimp_ltToLeq" (formula "45") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "45") (term "1,0,0,1,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "45") (term "1,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "45") (term "1,0,0,1,0,0,1,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "45") (term "0,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "45") (term "0,0,0,1,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "45") (term "1,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "45") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "45") (term "1,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "45") (term "1,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "45") (term "1,1,1,0,0"))
                                                (rule "mul_literals" (formula "45") (term "0,1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "45") (term "1,1,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "45") (term "1,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "45") (term "1,1,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "45") (term "1,1,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "45") (term "1,1,1,0,0,1,0"))
                                                (rule "mul_literals" (formula "45") (term "0,1,1,0,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "45") (term "1,1,1,0,0,1,0"))
                                                (rule "nnf_imp2or" (formula "45") (term "0"))
                                                (rule "nnf_notAnd" (formula "45") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "45") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "45") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "45") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "45") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "45") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "45") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "45") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "45") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "45") (term "1,1,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "45") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "45") (term "1,0,0,0,0,0"))
                                                (rule "add_literals" (formula "45") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "45") (term "0,0,0"))
                                                (rule "mul_literals" (formula "45") (term "1,0,0,0"))
                                                (rule "nnf_imp2or" (formula "45") (term "0,1,0"))
                                                (rule "distr_forallAnd" (formula "23"))
                                                (rule "andLeft" (formula "23"))
                                                (rule "Contract_axiom_for_isClassifiedBlock_in_Classifier" (formula "34") (term "0,1,0"))
                                                (rule "replace_known_right" (formula "34") (term "0,1,0") (ifseqformula "91"))
                                                 (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "90")) (ifInst ""  (formula "13")) (ifInst ""  (formula "14")))
                                                (rule "true_left" (formula "34"))
                                                (rule "Definition_axiom_for_isClassifiedBlock_in_de_wiesler_Classifier" (formula "34") (term "0,1,0") (inst "bucket=bucket"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0,1,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0,1,0"))
                                                (rule "applyEq" (formula "34") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "30"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,1,0"))
                                                (rule "mul_literals" (formula "34") (term "0,1,1,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,1,0"))
                                                (rule "Definition_axiom_for_isValidBufferLen_in_de_wiesler_Classifier" (formula "36") (term "0,1,0"))
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "inEqSimp_ltToLeq" (formula "36") (term "0,1,1,0"))
                                                (rule "add_zero_right" (formula "36") (term "0,0,1,1,0"))
                                                (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,1,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,1,0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "36") (term "0,1,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "36") (term "0,0,1,1,0"))
                                                (rule "polySimp_elimOne" (formula "36") (term "0,0,1,1,0"))
                                                (rule "Contract_axiom_for_countClassOfSliceEq_in_Classifier" (formula "31") (term "1,1,0"))
                                                (rule "replace_known_right" (formula "31") (term "0,1,0") (ifseqformula "91"))
                                                 (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "90")) (ifInst ""  (formula "13")) (ifInst ""  (formula "14")))
                                                (rule "true_left" (formula "31"))
                                                (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "31") (term "1,1,0") (inst "i=i"))
                                                (rule "eqSymm" (formula "31") (term "1,0"))
                                                (rule "distr_forallAnd" (formula "58"))
                                                (rule "andLeft" (formula "58"))
                                                (rule "nnf_notAnd" (formula "46") (term "0,0,1,0"))
                                                (rule "inEqSimp_notLeq" (formula "46") (term "1,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "46") (term "1,0,0,1,0,0,1,0"))
                                                (rule "mul_literals" (formula "46") (term "0,1,0,0,1,0,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "46") (term "0,0,1,0,0,1,0"))
                                                (rule "add_literals" (formula "46") (term "0,0,0,1,0,0,1,0"))
                                                (rule "add_zero_left" (formula "46") (term "0,0,1,0,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "46") (term "1,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "46") (term "1,1,0,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "46") (term "1,1,0,0,1,0"))
                                                (rule "inEqSimp_notGeq" (formula "46") (term "0,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "46") (term "1,0,0,0,0,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "46") (term "0,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "46") (term "1,0,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "46") (term "1,0,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "46") (term "1,1,0,0,0,1,0"))
                                                (rule "mul_literals" (formula "46") (term "0,1,0,0,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "46") (term "1,1,0,0,0,1,0"))
                                                (rule "nnf_imp2or" (formula "36") (term "1,1,0"))
                                                (rule "inEqSimp_notGeq" (formula "36") (term "0,1,1,0"))
                                                (rule "mul_literals" (formula "36") (term "1,0,0,0,1,1,0"))
                                                (rule "add_literals" (formula "36") (term "0,0,0,1,1,0"))
                                                (rule "add_zero_left" (formula "36") (term "0,0,1,1,0"))
                                                (rule "Definition_axiom_for_isClassOfSlice_in_de_wiesler_Classifier" (formula "35") (term "0,1,0") (inst "i=i"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,1,0"))
                                                (rule "polySimp_mulAssoc" (formula "35") (term "0,1,0,0,1,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "35") (term "0,0,1,0,0,1,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "35") (term "0,1,0,0,1,0,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,1,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "35") (term "0,1,1,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "35") (term "1,0,1,1,0,0,1,0"))
                                                (rule "mul_literals" (formula "35") (term "0,0,1,1,0,0,1,0"))
                                                (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "67") (term "0,0,2,0"))
                                                (rule "applyEq" (formula "67") (term "0") (ifseqformula "61"))
                                                (rule "nnf_imp2or" (formula "35") (term "0,1,0"))
                                                (rule "nnf_notAnd" (formula "35") (term "0,0,1,0"))
                                                (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "35") (term "0,1,0,0,1,0,0,1,0"))
                                                (rule "mul_literals" (formula "35") (term "0,0,1,0,0,1,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "35") (term "1,0,1,0,0,1,0,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "35") (term "0,0,0,1,0,0,1,0"))
                                                (rule "add_literals" (formula "35") (term "0,0,0,0,1,0,0,1,0"))
                                                (rule "add_zero_left" (formula "35") (term "0,0,0,1,0,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "35") (term "0,1,1,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "35") (term "0,1,1,0,0,1,0"))
                                                (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0,1,0"))
                                                (rule "polySimp_mulAssoc" (formula "35") (term "1,0,0,0,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "35") (term "0,1,0,0,0,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "35") (term "1,0,0,0,0,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "35") (term "1,0,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,0,1,0"))
                                                (rule "mul_literals" (formula "35") (term "0,1,0,0,0,1,0"))
                                                (rule "onlyCreatedObjectsAreReferencedFinal" (formula "87") (term "0") (ifseqformula "13") (ifseqformula "5"))
                                                (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "69"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "34") (term "1,0"))
                                                 (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "69")) (ifInst ""  (formula "51")) (ifInst ""  (formula "50")))
                                                (rule "translateJavaSubInt" (formula "34") (term "3,0,1,1,0"))
                                                (rule "polySimp_elimSub" (formula "34") (term "3,0,1,1,0"))
                                                (rule "mul_literals" (formula "34") (term "1,3,0,1,1,0"))
                                                (rule "polySimp_addComm0" (formula "34") (term "3,0,1,1,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "34") (term "1,0,1,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "34") (term "1,1,0,0,1,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "34") (term "1,0,0,0,1,0"))
                                                (rule "replace_known_left" (formula "34") (term "1,0,0,0,1,0") (ifseqformula "49"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "inEqSimp_commuteLeq" (formula "34") (term "0,1,0,0,1,0"))
                                                (rule "applyEq" (formula "34") (term "0,0,1,0,1,0") (ifseqformula "46"))
                                                (rule "inEqSimp_commuteGeq" (formula "34") (term "1,0,1,0"))
                                                (rule "applyEq" (formula "34") (term "1,3,0,1,1,0") (ifseqformula "51"))
                                                (rule "applyEq" (formula "34") (term "1,1,1,0,0,1,0") (ifseqformula "51"))
                                                (rule "replace_known_left" (formula "34") (term "1,1,0,0,1,0") (ifseqformula "54"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "applyEq" (formula "34") (term "0,1,0,1,0") (ifseqformula "51"))
                                                (rule "replace_known_left" (formula "34") (term "1,0,1,0") (ifseqformula "55"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "applyEq" (formula "34") (term "0,0,0,0,1,0") (ifseqformula "46"))
                                                (rule "replace_known_right" (formula "34") (term "0,0,0,1,0") (ifseqformula "70"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "applyEq" (formula "34") (term "0,0,1,0") (ifseqformula "51"))
                                                (rule "replace_known_left" (formula "34") (term "0,1,0") (ifseqformula "53"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "applyEq" (formula "34") (term "1,0,1,0") (ifseqformula "46"))
                                                (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "56") (term "0") (inst "i=i"))
                                                 (builtin "One Step Simplification" (formula "56"))
                                                (rule "translateJavaAddInt" (formula "56") (term "0,2,1,1,0"))
                                                (rule "translateJavaSubInt" (formula "56") (term "1,1,0,0"))
                                                (rule "polySimp_elimSub" (formula "56") (term "1,1,0,0"))
                                                (rule "mul_literals" (formula "56") (term "1,1,1,0,0"))
                                                (rule "polySimp_addComm0" (formula "56") (term "0,2,1,1,0"))
                                                (rule "polySimp_addComm1" (formula "56") (term "1,1,0,0"))
                                                (rule "add_literals" (formula "56") (term "0,1,1,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "56") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "56") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "56") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "56") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "56") (term "0,0,0,1,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "56") (term "0,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "56") (term "1,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "56") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "56") (term "1,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "56") (term "1,1,0,0"))
                                                (rule "mul_literals" (formula "56") (term "0,1,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "56") (term "1,1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "56") (term "1,1,1,0,0"))
                                                (rule "nnf_imp2or" (formula "56") (term "0"))
                                                (rule "nnf_notAnd" (formula "56") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "56") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "56") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "56") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "56") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "56") (term "0,0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "56") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "56") (term "1,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "56") (term "1,1,0,0"))
                                                (rule "mul_literals" (formula "56") (term "0,1,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "56") (term "1,1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "56") (term "1,1,1,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "56") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "56") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "56") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "56") (term "0,0,0"))
                                                (rule "mul_literals" (formula "56") (term "1,0,0,0"))
                                                (rule "Definition_axiom_for_isClassOfSlice_in_de_wiesler_Classifier" (formula "35") (term "0,1,0,1,0") (inst "i=i"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0,1,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,1,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,1,0,0,1,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "35") (term "0,1,0,0,1,0,0,1,0,1,0"))
                                                (rule "mul_literals" (formula "35") (term "0,0,1,0,0,1,0,0,1,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,1,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "35") (term "0,0,0,1,0,0,1,0,1,0"))
                                                (rule "add_literals" (formula "35") (term "0,0,0,0,1,0,0,1,0,1,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0,1,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,1,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "35") (term "0,1,1,0,0,1,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "35") (term "1,0,1,1,0,0,1,0,1,0"))
                                                (rule "mul_literals" (formula "35") (term "0,0,1,1,0,0,1,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "35") (term "1,0,1,1,0,0,1,0,1,0"))
                                                (rule "nnf_imp2or" (formula "35") (term "0,1,0,1,0"))
                                                (rule "nnf_notAnd" (formula "35") (term "0,0,1,0,1,0"))
                                                (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0,1,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "35") (term "1,0,0,0,0,0,1,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,0,0,0,1,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "35") (term "0,1,0,0,0,0,0,1,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "35") (term "0,0,0,0,0,1,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0,1,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0,1,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "35") (term "1,0,0,0,1,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,0,1,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "35") (term "0,1,0,0,0,1,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "35") (term "1,0,1,0,0,0,1,0,1,0"))
                                                (rule "mul_literals" (formula "35") (term "0,0,1,0,0,0,1,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "35") (term "1,0,1,0,0,0,1,0,1,0"))
                                                (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0,1,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,1,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,1,0,0,1,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "35") (term "0,1,0,0,1,0,0,1,0,1,0"))
                                                (rule "mul_literals" (formula "35") (term "0,0,1,0,0,1,0,0,1,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,1,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "35") (term "0,0,0,1,0,0,1,0,1,0"))
                                                (rule "add_literals" (formula "35") (term "0,0,0,0,1,0,0,1,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0,1,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "35") (term "0,1,1,0,0,1,0,1,0"))
                                                (rule "mul_literals" (formula "35") (term "0,0,1,1,0,0,1,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "35") (term "1,0,1,1,0,0,1,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "35") (term "1,0,1,1,0,0,1,0,1,0"))
                                                (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "37") (term "0,1,0,1,0"))
                                                 (builtin "One Step Simplification" (formula "37"))
                                                (rule "translateJavaMod" (formula "37") (term "0,1,0,1,0"))
                                                (rule "jmod_axiom" (formula "37") (term "0,1,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "37") (term "1,0,1,0,1,0"))
                                                (rule "polySimp_sepNegMonomial" (formula "37") (term "1,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "37") (term "0,1,0,1,0"))
                                                (rule "commute_or" (formula "25") (term "0"))
                                                (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "32") (term "0,0,2,0,1,0"))
                                                (rule "ifthenelse_split" (formula "45") (term "0"))
                                                (branch "self.equal_buckets = TRUE TRUE"
                                                   (rule "newSym_eq" (formula "46") (inst "l=l_1") (inst "newSymDef=mul(int::final(buffers,
               de.wiesler.Buffers::$num_buckets),
    Z(0(#)))"))
                                                   (rule "times_zero_1" (formula "46") (term "1,1"))
                                                   (rule "add_zero_right" (formula "46") (term "1"))
                                                   (rule "applyEq" (formula "57") (term "0") (ifseqformula "46"))
                                                   (rule "inEqSimp_commuteLeq" (formula "57"))
                                                   (rule "applyEq" (formula "58") (term "1,1,1,0,0") (ifseqformula "46"))
                                                   (rule "applyEq" (formula "50") (term "1,0,2,0") (ifseqformula "46"))
                                                   (rule "eqSymm" (formula "50"))
                                                   (rule "applyEq" (formula "49") (term "1,1,0,0") (ifseqformula "46"))
                                                   (rule "applyEq" (formula "56") (term "1") (ifseqformula "46"))
                                                   (rule "applyEq" (formula "59") (term "1,1,1,0,0") (ifseqformula "46"))
                                                   (rule "applyEq" (formula "34") (term "1,3,0,1,0") (ifseqformula "46"))
                                                   (rule "applyEq" (formula "47") (term "0,0") (ifseqformula "46"))
                                                   (rule "eqSymm" (formula "47"))
                                                   (rule "applyEq" (formula "55") (term "0") (ifseqformula "46"))
                                                   (rule "applyEq" (formula "59") (term "1,1,1,0,0,1,0") (ifseqformula "46"))
                                                   (rule "applyEq" (formula "49") (term "1,1,0,0,1,0") (ifseqformula "46"))
                                                   (rule "applyEq" (formula "32") (term "1,1,0,0") (ifseqformula "47"))
                                                   (rule "applyEq" (formula "50") (term "1,0,2,0") (ifseqformula "46"))
                                                   (rule "eqSymm" (formula "50"))
                                                   (rule "applyEq" (formula "24") (term "1,1,0,0") (ifseqformula "47"))
                                                   (rule "applyEq" (formula "44") (term "0") (ifseqformula "47"))
                                                   (rule "applyEq" (formula "35") (term "1,1,1,0,0,1,0") (ifseqformula "47"))
                                                   (rule "applyEq" (formula "25") (term "1,1,0,0") (ifseqformula "47"))
                                                   (rule "applyEq" (formula "61") (term "2,1,0,0,1,0") (ifseqformula "47"))
                                                   (rule "applyEq" (formula "4") (term "0") (ifseqformula "47"))
                                                   (rule "inEqSimp_homoInEq1" (formula "4"))
                                                   (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                                                   (rule "polySimp_addComm1" (formula "4") (term "0"))
                                                   (rule "applyEq" (formula "12") (term "1,1,0,0") (ifseqformula "47"))
                                                   (rule "applyEq" (formula "37") (term "1,1,0,0") (ifseqformula "47"))
                                                   (rule "applyEq" (formula "62") (term "2,1,0,0,0,0") (ifseqformula "47"))
                                                   (rule "applyEq" (formula "23") (term "0") (ifseqformula "47"))
                                                   (rule "applyEq" (formula "38") (term "1,0") (ifseqformula "47"))
                                                   (rule "applyEq" (formula "33") (term "1,0") (ifseqformula "47"))
                                                   (rule "applyEq" (formula "26") (term "0") (ifseqformula "47"))
                                                   (rule "inEqSimp_homoInEq0" (formula "26"))
                                                   (rule "polySimp_mulLiterals" (formula "26") (term "1,0"))
                                                   (rule "polySimp_addComm1" (formula "26") (term "0"))
                                                   (rule "applyEq" (formula "62") (term "1,1,1,0") (ifseqformula "47"))
                                                   (rule "applyEq" (formula "36") (term "1,1,0,0") (ifseqformula "47"))
                                                   (rule "applyEq" (formula "61") (term "1,1,0,0") (ifseqformula "47"))
                                                   (rule "applyEq" (formula "12") (term "2,1,0,1,1,0") (ifseqformula "47"))
                                                   (rule "applyEq" (formula "53") (term "1") (ifseqformula "46"))
                                                   (rule "applyEq" (formula "31") (term "1") (ifseqformula "47"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                                   (rule "polySimp_mulComm0" (formula "4") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "4") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                                                   (rule "mul_literals" (formula "4") (term "0,1"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "26"))
                                                   (rule "polySimp_mulComm0" (formula "26") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "26") (term "1"))
                                                   (rule "mul_literals" (formula "26") (term "0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "26") (term "1,1"))
                                                   (rule "inEqSimp_subsumption6" (formula "44") (ifseqformula "55"))
                                                   (rule "mul_literals" (formula "44") (term "1,1,0"))
                                                   (rule "greater_literals" (formula "44") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "44"))
                                                   (rule "leq_literals" (formula "44") (term "0"))
                                                    (builtin "One Step Simplification" (formula "44"))
                                                   (rule "true_left" (formula "44"))
                                                   (rule "elimGcdLeq_antec" (formula "23") (inst "elimGcdRightDiv=Z(6(5(2(#))))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(2(#))"))
                                                   (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,0"))
                                                   (rule "mul_literals" (formula "23") (term "0,1,0,0,0,0,1,0"))
                                                   (rule "neg_literal" (formula "23") (term "0,0,0,0,0,1,0"))
                                                   (rule "leq_literals" (formula "23") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "23"))
                                                   (rule "mul_literals" (formula "23") (term "1,0,0,0,0,0"))
                                                   (rule "polySimp_addLiterals" (formula "23") (term "0,0,0,0"))
                                                   (rule "add_zero_right" (formula "23") (term "0,0,0,0"))
                                                   (rule "polySimp_pullOutFactor0b" (formula "23") (term "0,0"))
                                                   (rule "add_literals" (formula "23") (term "1,1,0,0"))
                                                   (rule "times_zero_1" (formula "23") (term "1,0,0"))
                                                   (rule "add_zero_right" (formula "23") (term "0,0"))
                                                   (rule "qeq_literals" (formula "23") (term "0"))
                                                    (builtin "One Step Simplification" (formula "23"))
                                                   (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "4"))
                                                   (rule "mul_literals" (formula "9") (term "0,0"))
                                                   (rule "polySimp_addAssoc" (formula "9") (term "0"))
                                                   (rule "add_literals" (formula "9") (term "0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "9"))
                                                   (rule "mul_literals" (formula "9") (term "1"))
                                                   (rule "inEqSimp_subsumption6" (formula "9") (ifseqformula "55"))
                                                   (rule "greater_literals" (formula "9") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "mul_literals" (formula "9") (term "1,0"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "36") (term "0,1,0,1,0"))
                                                   (rule "arrayLengthNotNegative" (formula "55") (term "0"))
                                                   (rule "arrayLengthIsAShort" (formula "56") (term "0"))
                                                    (builtin "One Step Simplification" (formula "56"))
                                                   (rule "true_left" (formula "56"))
                                                   (rule "arrayLengthIsAShort" (formula "53") (term "0"))
                                                    (builtin "One Step Simplification" (formula "53"))
                                                   (rule "true_left" (formula "53"))
                                                   (rule "arrayLengthNotNegative" (formula "53") (term "0"))
                                                   (rule "inEqSimp_subsumption1" (formula "53") (ifseqformula "54"))
                                                   (rule "leq_literals" (formula "53") (term "0"))
                                                    (builtin "One Step Simplification" (formula "53"))
                                                   (rule "true_left" (formula "53"))
                                                   (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "34") (term "1"))
                                                    (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "73")) (ifInst ""  (formula "72")) (ifInst ""  (formula "44")) (ifInst ""  (formula "47")))
                                                   (rule "translateJavaSubInt" (formula "34") (term "0,2,1,1,0,1"))
                                                   (rule "translateJavaSubInt" (formula "34") (term "0,2,0,1,0,1"))
                                                   (rule "translateJavaMulInt" (formula "34") (term "1,1,0,0,0,1"))
                                                   (rule "eqSymm" (formula "34") (term "1,0,1"))
                                                   (rule "polySimp_elimSub" (formula "34") (term "0,2,1,1,0,1"))
                                                   (rule "mul_literals" (formula "34") (term "1,0,2,1,1,0,1"))
                                                   (rule "polySimp_elimSub" (formula "34") (term "0,2,0,1,0,1"))
                                                   (rule "mul_literals" (formula "34") (term "1,0,2,0,1,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,0,1"))
                                                   (rule "eqSymm" (formula "34") (term "1,0,0,0,1"))
                                                   (rule "polySimp_addComm0" (formula "34") (term "0,2,1,1,0,1"))
                                                   (rule "polySimp_addComm0" (formula "34") (term "0,2,0,1,0,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0,0,0,1"))
                                                   (rule "applyEq" (formula "34") (term "0,1,0,0,0,0,1") (ifseqformula "31"))
                                                   (rule "applyEq" (formula "34") (term "0,0,1,0,0,0,1") (ifseqformula "52"))
                                                   (rule "eqSymm" (formula "34") (term "1,0,0,0,1"))
                                                   (rule "replace_known_left" (formula "34") (term "1,0,0,0,1") (ifseqformula "31"))
                                                    (builtin "One Step Simplification" (formula "34"))
                                                   (rule "applyEq" (formula "34") (term "1,0,2,0,1,0,1") (ifseqformula "52"))
                                                   (rule "eqSymm" (formula "34") (term "1,0,1"))
                                                   (rule "applyEq" (formula "34") (term "3,0,1,0,0,1") (ifseqformula "52"))
                                                   (rule "applyEq" (formula "34") (term "0,0,0,0,0,1") (ifseqformula "31"))
                                                   (rule "applyEq" (formula "34") (term "1,0,2,0,1,0,1") (ifseqformula "52"))
                                                   (rule "eqSymm" (formula "34") (term "1,0,1"))
                                                   (rule "replace_known_left" (formula "34") (term "1,0,1") (ifseqformula "49"))
                                                    (builtin "One Step Simplification" (formula "34"))
                                                   (rule "inEqSimp_subsumption4" (formula "34") (term "1,0,0,1") (ifseqformula "23"))
                                                   (rule "mul_literals" (formula "34") (term "0,1,0,1,0,0,1"))
                                                   (rule "greater_literals" (formula "34") (term "0,0,1,0,0,1"))
                                                    (builtin "One Step Simplification" (formula "34"))
                                                   (rule "leq_literals" (formula "34") (term "0,1,0,0,1"))
                                                    (builtin "One Step Simplification" (formula "34"))
                                                   (rule "inEqSimp_subsumption6" (formula "34") (term "0,0,1") (ifseqformula "54"))
                                                   (rule "greater_literals" (formula "34") (term "0,0,0,0,1"))
                                                    (builtin "One Step Simplification" (formula "34"))
                                                   (rule "mul_literals" (formula "34") (term "1,0,0,0,1"))
                                                   (rule "leq_literals" (formula "34") (term "0,0,0,1"))
                                                    (builtin "One Step Simplification" (formula "34"))
                                                   (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "35") (term "0,1,0,1,0,1,0"))
                                                   (rule "onlyCreatedObjectsAreReferencedFinal" (formula "47") (term "0") (ifseqformula "14") (ifseqformula "6"))
                                                   (rule "applyEq" (formula "47") (term "0,0") (ifseqformula "48"))
                                                   (rule "replace_known_right" (formula "47") (term "0") (ifseqformula "73"))
                                                    (builtin "One Step Simplification" (formula "47"))
                                                   (rule "applyEq" (formula "47") (term "1,0") (ifseqformula "48"))
                                                   (rule "commute_or" (formula "62") (term "0"))
                                                   (rule "commute_or" (formula "59") (term "0,0,1,0"))
                                                   (rule "commute_or" (formula "48") (term "0,0,1,0"))
                                                   (rule "cnf_rightDist" (formula "37") (term "0"))
                                                   (rule "distr_forallAnd" (formula "37"))
                                                   (rule "andLeft" (formula "37"))
                                                   (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "34") (term "0,0,0"))
                                                    (builtin "One Step Simplification" (formula "34"))
                                                   (rule "translateJavaMod" (formula "34") (term "0,0,0"))
                                                   (rule "jmod_axiom" (formula "34") (term "0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "34") (term "1,0,0,0"))
                                                   (rule "applyEq" (formula "34") (term "0,1,0,0,0") (ifseqformula "42"))
                                                   (rule "polySimp_pullOutFactor0" (formula "34") (term "0,0,0"))
                                                   (rule "add_literals" (formula "34") (term "1,0,0,0"))
                                                   (rule "times_zero_1" (formula "34") (term "0,0,0"))
                                                    (builtin "One Step Simplification" (formula "34"))
                                                   (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "34") (term "0,0") (inst "i=i") (inst "j=j_1"))
                                                    (builtin "One Step Simplification" (formula "34"))
                                                   (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,1,0,0"))
                                                   (rule "add_literals" (formula "34") (term "0,0,0,1,0,0,1,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,0"))
                                                   (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,0"))
                                                   (rule "add_literals" (formula "34") (term "0,0,0,1,0,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "34") (term "1,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0,1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "34") (term "0,1,1,0,0,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "34") (term "0,1,1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,0"))
                                                   (rule "nnf_imp2or" (formula "34") (term "0,0"))
                                                   (rule "nnf_notAnd" (formula "34") (term "0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,0"))
                                                   (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,0"))
                                                   (rule "add_literals" (formula "34") (term "0,0,0,1,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "34") (term "0,1,1,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0,0"))
                                                   (rule "mul_literals" (formula "34") (term "1,0,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "34") (term "0,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0,0"))
                                                   (rule "mul_literals" (formula "34") (term "1,0,0,0,0"))
                                                   (rule "nnf_imp2or" (formula "34") (term "0,1,0,0"))
                                                   (rule "nnf_notAnd" (formula "34") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,1,0,0"))
                                                   (rule "add_literals" (formula "34") (term "0,0,0,1,0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0,1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "34") (term "0,1,1,0,0,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,1,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0,1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0,0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0,1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "34") (term "1,0,0,0,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "34") (term "0,1,0,0,0,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,0,1,0,0"))
                                                   (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "34") (term "0,0,1"))
                                                   (rule "replace_known_right" (formula "34") (term "0,0,0") (ifseqformula "74"))
                                                    (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "14")))
                                                   (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "35") (term "1,1"))
                                                    (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "73")) (ifInst ""  (formula "53")))
                                                   (rule "translateJavaSubInt" (formula "35") (term "3,0,1,1,1"))
                                                   (rule "polySimp_elimSub" (formula "35") (term "3,0,1,1,1"))
                                                   (rule "mul_literals" (formula "35") (term "1,3,0,1,1,1"))
                                                   (rule "polySimp_addComm0" (formula "35") (term "3,0,1,1,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "35") (term "1,1,0,0,1,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "35") (term "1,0,1,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "35") (term "1,0,0,0,0,1,1"))
                                                   (rule "replace_known_left" (formula "35") (term "1,0,0,0,0,1,1") (ifseqformula "52"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "inEqSimp_commuteLeq" (formula "35") (term "0,1,0,0,1,1"))
                                                   (rule "applyEq" (formula "35") (term "0,0,1,0,0,1,1") (ifseqformula "54"))
                                                   (rule "replace_known_left" (formula "35") (term "0,1,0,0,1,1") (ifseqformula "56"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "applyEq" (formula "35") (term "0,1,0,0,0,1,1") (ifseqformula "54"))
                                                   (rule "eqSymm" (formula "35") (term "1,0,0,0,1,1"))
                                                   (rule "replace_known_left" (formula "35") (term "1,0,0,0,1,1") (ifseqformula "47"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "applyEq" (formula "35") (term "0,0,1,0,1,1") (ifseqformula "49"))
                                                   (rule "inEqSimp_commuteGeq" (formula "35") (term "1,0,1,1"))
                                                   (rule "applyEq" (formula "35") (term "1,0,1,1,1") (ifseqformula "49"))
                                                   (rule "applyEq" (formula "35") (term "1,3,0,1,1,1") (ifseqformula "54"))
                                                   (rule "applyEq" (formula "35") (term "0,0,0,0,0,1,1") (ifseqformula "49"))
                                                   (rule "replace_known_right" (formula "35") (term "0,0,0,0,1,1") (ifseqformula "74"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "applyEq" (formula "35") (term "1,0,0,1,1") (ifseqformula "54"))
                                                   (rule "replace_known_left" (formula "35") (term "0,0,1,1") (ifseqformula "58"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "applyEq" (formula "35") (term "0,0,1,1") (ifseqformula "54"))
                                                   (rule "inEqSimp_commuteLeq" (formula "35") (term "0,1,1"))
                                                   (rule "replace_known_left" (formula "35") (term "0,1,1") (ifseqformula "59"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "commute_or_2" (formula "39") (term "0"))
                                                   (rule "cnf_rightDist" (formula "38") (term "0"))
                                                   (rule "distr_forallAnd" (formula "38"))
                                                   (rule "andLeft" (formula "38"))
                                                   (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "34") (term "0,0"))
                                                   (rule "replace_known_left" (formula "34") (term "1,0") (ifseqformula "14"))
                                                    (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "76")) (ifInst ""  (formula "35")))
                                                   (rule "true_left" (formula "34"))
                                                   (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "34") (term "0,0") (inst "i=i") (inst "j=j_1"))
                                                    (builtin "One Step Simplification" (formula "34"))
                                                   (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0,1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0,1,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "34") (term "1,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0,1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "34") (term "0,1,1,0,0,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "34") (term "0,1,1,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,0"))
                                                   (rule "nnf_imp2or" (formula "34") (term "0,0"))
                                                   (rule "nnf_notAnd" (formula "34") (term "0,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0,0"))
                                                   (rule "mul_literals" (formula "34") (term "1,0,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "34") (term "0,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0,0"))
                                                   (rule "mul_literals" (formula "34") (term "1,0,0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,0"))
                                                   (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,0"))
                                                   (rule "add_literals" (formula "34") (term "0,0,0,1,0,0,0"))
                                                   (rule "add_zero_left" (formula "34") (term "0,0,1,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,0"))
                                                   (rule "nnf_imp2or" (formula "34") (term "0,1,0,0"))
                                                   (rule "nnf_notAnd" (formula "34") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,1,0,0"))
                                                   (rule "add_literals" (formula "34") (term "0,0,0,1,0,0,1,0,0"))
                                                   (rule "add_zero_left" (formula "34") (term "0,0,1,0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,1,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0,1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0,0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0,1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "34") (term "1,0,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "34") (term "0,1,0,0,0,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,0,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,0,1,0,0"))
                                                   (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "35") (term "0,1,1"))
                                                   (rule "replace_known_left" (formula "35") (term "1,0") (ifseqformula "14"))
                                                    (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "76")))
                                                   (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "36") (term "0,0,1") (inst "i=i") (inst "j=j_1"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_ltToLeq" (formula "36") (term "1,0,0,1,0,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,0,0,1,0,0,1"))
                                                   (rule "inEqSimp_ltToLeq" (formula "36") (term "1,0,0,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,0,0,0,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,0,0,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,0,1,0,0,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "36") (term "1,0,1,0,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0,1,0,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0,1,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0,1,0,0,1"))
                                                   (rule "mul_literals" (formula "36") (term "0,1,1,0,0,1,0,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0,1,0,0,1"))
                                                   (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0,1,0,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0,0,1"))
                                                   (rule "mul_literals" (formula "36") (term "0,1,1,0,0,0,1"))
                                                   (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0,0,1"))
                                                   (rule "nnf_imp2or" (formula "36") (term "0,0,1"))
                                                   (rule "nnf_notAnd" (formula "36") (term "0,0,0,1"))
                                                   (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0,0,1"))
                                                   (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0,0,1"))
                                                   (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0,0,1"))
                                                   (rule "add_literals" (formula "36") (term "0,0,0,1,0,0,0,1"))
                                                   (rule "add_zero_left" (formula "36") (term "0,0,1,0,0,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0,0,1"))
                                                   (rule "polySimp_elimOne" (formula "36") (term "1,1,0,0,0,1"))
                                                   (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0,0,1"))
                                                   (rule "times_zero_1" (formula "36") (term "1,0,0,0,0,0,0,1"))
                                                   (rule "add_zero_right" (formula "36") (term "0,0,0,0,0,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0,0,1"))
                                                   (rule "mul_literals" (formula "36") (term "1,0,0,0,0,1"))
                                                   (rule "nnf_imp2or" (formula "36") (term "0,1,0,0,1"))
                                                   (rule "nnf_notAnd" (formula "36") (term "0,0,1,0,0,1"))
                                                   (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0,1,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0,1,0,0,1"))
                                                   (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0,1,0,0,1"))
                                                   (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0,1,0,0,1"))
                                                   (rule "add_literals" (formula "36") (term "0,0,0,1,0,0,1,0,0,1"))
                                                   (rule "add_zero_left" (formula "36") (term "0,0,1,0,0,1,0,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0,1,0,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0,1,0,0,1"))
                                                   (rule "polySimp_elimOne" (formula "36") (term "1,1,0,0,1,0,0,1"))
                                                   (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0,1,0,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,0,0,0,1,0,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0,1,0,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,0,1,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "36") (term "1,0,0,0,1,0,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0,0,1,0,0,1"))
                                                   (rule "mul_literals" (formula "36") (term "0,1,0,0,0,1,0,0,1"))
                                                   (rule "polySimp_elimOne" (formula "36") (term "1,1,0,0,0,1,0,0,1"))
                                                   (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "34") (term "0,1") (inst "i=i"))
                                                    (builtin "One Step Simplification" (formula "34"))
                                                   (rule "translateJavaSubInt" (formula "34") (term "1,1,0,0,1"))
                                                   (rule "translateJavaAddInt" (formula "34") (term "0,2,1,1,0,1"))
                                                   (rule "polySimp_elimSub" (formula "34") (term "1,1,0,0,1"))
                                                   (rule "mul_literals" (formula "34") (term "1,1,1,0,0,1"))
                                                   (rule "polySimp_addComm0" (formula "34") (term "0,2,1,1,0,1"))
                                                   (rule "polySimp_addComm0" (formula "34") (term "1,1,0,0,1"))
                                                   (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,1"))
                                                   (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,1"))
                                                   (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,1"))
                                                   (rule "add_literals" (formula "34") (term "0,0,0,1,0,0,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "34") (term "1,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,1"))
                                                   (rule "mul_literals" (formula "34") (term "0,1,1,0,0,1"))
                                                   (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,1"))
                                                   (rule "nnf_imp2or" (formula "34") (term "0,1"))
                                                   (rule "nnf_notAnd" (formula "34") (term "0,0,1"))
                                                   (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,1"))
                                                   (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,1"))
                                                   (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,1"))
                                                   (rule "add_literals" (formula "34") (term "0,0,0,1,0,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,1"))
                                                   (rule "mul_literals" (formula "34") (term "0,1,1,0,0,1"))
                                                   (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,1"))
                                                   (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0,1"))
                                                   (rule "mul_literals" (formula "34") (term "1,0,0,0,0,0,1"))
                                                   (rule "add_zero_right" (formula "34") (term "0,0,0,0,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0,1"))
                                                   (rule "mul_literals" (formula "34") (term "1,0,0,0,1"))
                                                   (rule "commute_or" (formula "40") (term "0"))
                                                   (rule "commute_or" (formula "41") (term "0,0"))
                                                   (rule "all_pull_out3" (formula "38") (term "0"))
                                                   (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "35") (term "0,0") (inst "i=i") (inst "j=j_1"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,1,0,0"))
                                                   (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,1,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,0"))
                                                   (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,0"))
                                                   (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "35") (term "1,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "35") (term "0,1,1,0,0,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "35") (term "0,1,1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,0"))
                                                   (rule "nnf_imp2or" (formula "35") (term "0,0"))
                                                   (rule "nnf_notAnd" (formula "35") (term "0,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0,0"))
                                                   (rule "mul_literals" (formula "35") (term "1,0,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "35") (term "0,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0,0"))
                                                   (rule "mul_literals" (formula "35") (term "1,0,0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,0"))
                                                   (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,0"))
                                                   (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "35") (term "0,1,1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,0"))
                                                   (rule "nnf_imp2or" (formula "35") (term "0,1,0,0"))
                                                   (rule "nnf_notAnd" (formula "35") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,1,0,0"))
                                                   (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0,1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "35") (term "0,1,1,0,0,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,1,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0,1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0,0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0,1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "35") (term "1,0,0,0,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "35") (term "0,1,0,0,0,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0,0,1,0,0"))
                                                   (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "36") (term "0,1,1") (inst "i=i") (inst "j=j_1"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_ltToLeq" (formula "36") (term "1,0,0,1,0,1,1"))
                                                   (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0,1,0,1,1"))
                                                   (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0,1,0,1,1"))
                                                   (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0,1,0,1,1"))
                                                   (rule "add_literals" (formula "36") (term "0,0,0,1,0,0,1,0,1,1"))
                                                   (rule "inEqSimp_ltToLeq" (formula "36") (term "1,0,0,1,1"))
                                                   (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0,1,1"))
                                                   (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0,1,1"))
                                                   (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0,1,1"))
                                                   (rule "add_literals" (formula "36") (term "0,0,0,1,0,0,1,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,0,1,0,1,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "36") (term "1,0,1,0,1,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,0,1,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0,1,0,1,1"))
                                                   (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0,1,0,1,1"))
                                                   (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0,1,0,1,1"))
                                                   (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0,1,0,1,1"))
                                                   (rule "mul_literals" (formula "36") (term "0,1,1,0,0,1,0,1,1"))
                                                   (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0,1,0,1,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0,1,1"))
                                                   (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0,1,1"))
                                                   (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0,1,1"))
                                                   (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0,1,1"))
                                                   (rule "mul_literals" (formula "36") (term "0,1,1,0,0,1,1"))
                                                   (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0,1,1"))
                                                   (rule "nnf_imp2or" (formula "36") (term "0,1,1"))
                                                   (rule "nnf_notAnd" (formula "36") (term "0,0,1,1"))
                                                   (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0,1,1"))
                                                   (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0,1,1"))
                                                   (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0,1,1"))
                                                   (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0,1,1"))
                                                   (rule "add_literals" (formula "36") (term "0,0,0,1,0,0,1,1"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0,1,1"))
                                                   (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0,1,1"))
                                                   (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0,1,1"))
                                                   (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0,1,1"))
                                                   (rule "mul_literals" (formula "36") (term "0,1,1,0,0,1,1"))
                                                   (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0,1,1"))
                                                   (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0,1,1"))
                                                   (rule "mul_literals" (formula "36") (term "1,0,0,0,0,0,1,1"))
                                                   (rule "add_zero_right" (formula "36") (term "0,0,0,0,0,1,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0,1,1"))
                                                   (rule "mul_literals" (formula "36") (term "1,0,0,0,1,1"))
                                                   (rule "nnf_imp2or" (formula "36") (term "0,1,0,1,1"))
                                                   (rule "nnf_notAnd" (formula "36") (term "0,0,1,0,1,1"))
                                                   (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0,1,0,1,1"))
                                                   (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,0,0,0,1,0,1,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0,1,0,1,1"))
                                                   (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,0,1,0,1,1"))
                                                   (rule "polySimp_rightDist" (formula "36") (term "1,0,0,0,1,0,1,1"))
                                                   (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0,0,1,0,1,1"))
                                                   (rule "mul_literals" (formula "36") (term "0,1,0,0,0,1,0,1,1"))
                                                   (rule "polySimp_elimOne" (formula "36") (term "1,1,0,0,0,1,0,1,1"))
                                                   (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0,1,0,1,1"))
                                                   (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0,1,0,1,1"))
                                                   (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0,1,0,1,1"))
                                                   (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0,1,0,1,1"))
                                                   (rule "add_literals" (formula "36") (term "0,0,0,1,0,0,1,0,1,1"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0,1,0,1,1"))
                                                   (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0,1,0,1,1"))
                                                   (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0,1,0,1,1"))
                                                   (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0,1,0,1,1"))
                                                   (rule "mul_literals" (formula "36") (term "0,1,1,0,0,1,0,1,1"))
                                                   (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0,1,0,1,1"))
                                                   (rule "all_pull_out1" (formula "37") (term "0,1,0"))
                                                   (rule "all_pull_out3" (formula "63") (term "0"))
                                                   (rule "all_pull_out3" (formula "52") (term "0"))
                                                   (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "35") (term "0,1") (inst "i=i"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "translateJavaSubInt" (formula "35") (term "1,1,0,0,1"))
                                                   (rule "translateJavaAddInt" (formula "35") (term "0,2,1,1,0,1"))
                                                   (rule "polySimp_elimSub" (formula "35") (term "1,1,0,0,1"))
                                                   (rule "mul_literals" (formula "35") (term "1,1,1,0,0,1"))
                                                   (rule "polySimp_addComm0" (formula "35") (term "0,2,1,1,0,1"))
                                                   (rule "polySimp_addComm1" (formula "35") (term "1,1,0,0,1"))
                                                   (rule "add_literals" (formula "35") (term "0,1,1,0,0,1"))
                                                   (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,1"))
                                                   (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,1"))
                                                   (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,1"))
                                                   (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "35") (term "1,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1"))
                                                   (rule "mul_literals" (formula "35") (term "0,1,1,0,0,1"))
                                                   (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,1"))
                                                   (rule "nnf_imp2or" (formula "35") (term "0,1"))
                                                   (rule "nnf_notAnd" (formula "35") (term "0,0,1"))
                                                   (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,1"))
                                                   (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,1"))
                                                   (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,1"))
                                                   (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1"))
                                                   (rule "mul_literals" (formula "35") (term "0,1,1,0,0,1"))
                                                   (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,1"))
                                                   (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0,1"))
                                                   (rule "mul_literals" (formula "35") (term "1,0,0,0,0,0,1"))
                                                   (rule "add_zero_right" (formula "35") (term "0,0,0,0,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0,1"))
                                                   (rule "mul_literals" (formula "35") (term "1,0,0,0,1"))
                                                   (rule "replace_known_left" (formula "35") (term "1") (ifseqformula "62"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "true_left" (formula "35"))
                                                   (rule "commute_or" (formula "34") (term "0,0,1,0,0"))
                                                   (rule "shift_paren_or" (formula "37") (term "0,0"))
                                                   (rule "commute_or" (formula "35") (term "0,0,1,0,0"))
                                                   (rule "commute_or" (formula "35") (term "0,0,1,0,0,1"))
                                                   (rule "shift_paren_or" (formula "62") (term "0,0"))
                                                   (rule "shift_paren_or" (formula "51") (term "0,0"))
                                                   (rule "allLeft" (formula "25") (inst "t=add(Z(neglit(2(#))), l_1)"))
                                                   (rule "inEqSimp_homoInEq1" (formula "25") (term "1,0"))
                                                   (rule "polySimp_mulComm0" (formula "25") (term "1,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "25") (term "1,0,1,0"))
                                                   (rule "mul_literals" (formula "25") (term "0,1,0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "25") (term "0,1,0"))
                                                   (rule "polySimp_addComm0" (formula "25") (term "0,0,1,0"))
                                                   (rule "polySimp_pullOutFactor0b" (formula "25") (term "0,1,0"))
                                                   (rule "add_literals" (formula "25") (term "1,1,0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "25") (term "1,0,1,0"))
                                                   (rule "inEqSimp_homoInEq0" (formula "25") (term "0,0"))
                                                   (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0"))
                                                   (rule "mul_literals" (formula "25") (term "0,1,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "25") (term "0,0,0"))
                                                   (rule "add_literals" (formula "25") (term "0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0"))
                                                   (rule "mul_literals" (formula "25") (term "1,1,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "25") (term "0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "25") (term "0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "25") (term "0,0,0"))
                                                   (rule "inEqSimp_contradInEq1" (formula "25") (term "1,0") (ifseqformula "58"))
                                                   (rule "qeq_literals" (formula "25") (term "0,1,0"))
                                                    (builtin "One Step Simplification" (formula "25"))
                                                   (rule "inEqSimp_contradInEq1" (formula "25") (term "0") (ifseqformula "58"))
                                                   (rule "qeq_literals" (formula "25") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "25"))
                                                   (rule "allLeft" (formula "24") (inst "t=b_0"))
                                                   (rule "inEqSimp_contradInEq1" (formula "24") (term "0,0") (ifseqformula "9"))
                                                   (rule "qeq_literals" (formula "24") (term "0,0,0"))
                                                    (builtin "One Step Simplification" (formula "24"))
                                                   (rule "inEqSimp_contradInEq0" (formula "24") (term "0") (ifseqformula "4"))
                                                   (rule "inEqSimp_homoInEq1" (formula "24") (term "0,0"))
                                                   (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "24") (term "0,1,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "24") (term "0,0,0"))
                                                   (rule "polySimp_addComm0" (formula "24") (term "0,0,0,0"))
                                                   (rule "polySimp_pullOutFactor0b" (formula "24") (term "0,0,0"))
                                                   (rule "add_literals" (formula "24") (term "1,1,0,0,0"))
                                                   (rule "times_zero_1" (formula "24") (term "1,0,0,0"))
                                                   (rule "add_literals" (formula "24") (term "0,0,0"))
                                                   (rule "leq_literals" (formula "24") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "24"))
                                                   (rule "allLeft" (formula "25") (inst "t=add(Z(neglit(2(#))), l_1)"))
                                                   (rule "inEqSimp_homoInEq1" (formula "25") (term "1,0"))
                                                   (rule "polySimp_mulComm0" (formula "25") (term "1,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "25") (term "1,0,1,0"))
                                                   (rule "mul_literals" (formula "25") (term "0,1,0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "25") (term "0,1,0"))
                                                   (rule "polySimp_addComm0" (formula "25") (term "0,0,1,0"))
                                                   (rule "polySimp_pullOutFactor0b" (formula "25") (term "0,1,0"))
                                                   (rule "add_literals" (formula "25") (term "1,1,0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "25") (term "1,0,1,0"))
                                                   (rule "inEqSimp_homoInEq0" (formula "25") (term "0,0"))
                                                   (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0"))
                                                   (rule "mul_literals" (formula "25") (term "0,1,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "25") (term "0,0,0"))
                                                   (rule "add_literals" (formula "25") (term "0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0"))
                                                   (rule "mul_literals" (formula "25") (term "1,1,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "25") (term "0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "25") (term "0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "25") (term "0,0,0"))
                                                   (rule "inEqSimp_contradInEq1" (formula "25") (term "0,0") (ifseqformula "60"))
                                                   (rule "qeq_literals" (formula "25") (term "0,0,0"))
                                                    (builtin "One Step Simplification" (formula "25"))
                                                   (rule "inEqSimp_contradInEq1" (formula "25") (term "0") (ifseqformula "60"))
                                                   (rule "qeq_literals" (formula "25") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "25"))
                                                   (rule "allLeft" (formula "28") (inst "t=b_0"))
                                                   (rule "inEqSimp_contradInEq0" (formula "28") (term "1,0") (ifseqformula "4"))
                                                   (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0"))
                                                   (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0"))
                                                   (rule "polySimp_addComm0" (formula "28") (term "0,0,0,1,0"))
                                                   (rule "polySimp_pullOutFactor0b" (formula "28") (term "0,0,1,0"))
                                                   (rule "add_literals" (formula "28") (term "1,1,0,0,1,0"))
                                                   (rule "times_zero_1" (formula "28") (term "1,0,0,1,0"))
                                                   (rule "add_zero_right" (formula "28") (term "0,0,1,0"))
                                                   (rule "leq_literals" (formula "28") (term "0,1,0"))
                                                    (builtin "One Step Simplification" (formula "28"))
                                                   (rule "inEqSimp_contradInEq1" (formula "28") (term "0") (ifseqformula "9"))
                                                   (rule "qeq_literals" (formula "28") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "28"))
                                                   (rule "allLeft" (formula "36") (inst "t=b_0"))
                                                   (rule "inEqSimp_contradInEq0" (formula "36") (term "1,0") (ifseqformula "4"))
                                                   (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0"))
                                                   (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0"))
                                                   (rule "polySimp_addComm0" (formula "36") (term "0,0,0,1,0"))
                                                   (rule "polySimp_pullOutFactor0b" (formula "36") (term "0,0,1,0"))
                                                   (rule "add_literals" (formula "36") (term "1,1,0,0,1,0"))
                                                   (rule "times_zero_1" (formula "36") (term "1,0,0,1,0"))
                                                   (rule "add_zero_right" (formula "36") (term "0,0,1,0"))
                                                   (rule "leq_literals" (formula "36") (term "0,1,0"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (term "0") (ifseqformula "9"))
                                                   (rule "qeq_literals" (formula "36") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "applyEq" (formula "103") (term "0") (ifseqformula "36"))
                                                   (rule "eqSymm" (formula "103"))
                                                   (rule "allLeft" (formula "37") (inst "t=add(Z(neglit(1(#))), l_1)"))
                                                   (rule "inEqSimp_homoInEq1" (formula "37") (term "1,0"))
                                                   (rule "polySimp_mulComm0" (formula "37") (term "1,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "37") (term "1,0,1,0"))
                                                   (rule "mul_literals" (formula "37") (term "0,1,0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "37") (term "0,1,0"))
                                                   (rule "polySimp_addComm0" (formula "37") (term "0,0,1,0"))
                                                   (rule "polySimp_pullOutFactor0b" (formula "37") (term "0,1,0"))
                                                   (rule "add_literals" (formula "37") (term "1,1,0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "37") (term "1,0,1,0"))
                                                   (rule "inEqSimp_homoInEq0" (formula "37") (term "0,0"))
                                                   (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "37") (term "1,0,0,0"))
                                                   (rule "mul_literals" (formula "37") (term "0,1,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "37") (term "0,0,0"))
                                                   (rule "add_literals" (formula "37") (term "0,0,0,0"))
                                                   (rule "add_zero_left" (formula "37") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0"))
                                                   (rule "mul_literals" (formula "37") (term "1,1,0"))
                                                   (rule "inEqSimp_invertInEq1" (formula "37") (term "0,0"))
                                                   (rule "mul_literals" (formula "37") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "37") (term "0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "37") (term "0,0,0"))
                                                   (rule "inEqSimp_contradInEq1" (formula "37") (term "0,0") (ifseqformula "63"))
                                                   (rule "qeq_literals" (formula "37") (term "0,0,0"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "63"))
                                                   (rule "qeq_literals" (formula "37") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "allLeft" (formula "38") (inst "t=add(Z(neglit(2(#))), l_1)"))
                                                   (rule "inEqSimp_homoInEq1" (formula "38") (term "1,0"))
                                                   (rule "polySimp_mulComm0" (formula "38") (term "1,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "38") (term "1,0,1,0"))
                                                   (rule "mul_literals" (formula "38") (term "0,1,0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "38") (term "0,1,0"))
                                                   (rule "polySimp_addComm0" (formula "38") (term "0,0,1,0"))
                                                   (rule "polySimp_pullOutFactor0b" (formula "38") (term "0,1,0"))
                                                   (rule "add_literals" (formula "38") (term "1,1,0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "38") (term "1,0,1,0"))
                                                   (rule "inEqSimp_homoInEq0" (formula "38") (term "0,0"))
                                                   (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "38") (term "1,0,0,0"))
                                                   (rule "mul_literals" (formula "38") (term "0,1,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "38") (term "0,0,0"))
                                                   (rule "add_literals" (formula "38") (term "0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0"))
                                                   (rule "mul_literals" (formula "38") (term "1,1,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "38") (term "0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "38") (term "0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "38") (term "0,0,0"))
                                                   (rule "inEqSimp_contradInEq1" (formula "38") (term "0,0") (ifseqformula "64"))
                                                   (rule "qeq_literals" (formula "38") (term "0,0,0"))
                                                    (builtin "One Step Simplification" (formula "38"))
                                                   (rule "inEqSimp_contradInEq1" (formula "38") (term "0") (ifseqformula "64"))
                                                   (rule "qeq_literals" (formula "38") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "38"))
                                                   (rule "allLeft" (formula "29") (inst "t=add(Z(neglit(1(#))), l_1)"))
                                                   (rule "inEqSimp_homoInEq1" (formula "29") (term "1,0"))
                                                   (rule "polySimp_mulComm0" (formula "29") (term "1,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "29") (term "1,0,1,0"))
                                                   (rule "mul_literals" (formula "29") (term "0,1,0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "29") (term "0,1,0"))
                                                   (rule "polySimp_addComm0" (formula "29") (term "0,0,1,0"))
                                                   (rule "polySimp_pullOutFactor0b" (formula "29") (term "0,1,0"))
                                                   (rule "add_literals" (formula "29") (term "1,1,0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "29") (term "1,0,1,0"))
                                                   (rule "inEqSimp_homoInEq0" (formula "29") (term "0,0"))
                                                   (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "29") (term "1,0,0,0"))
                                                   (rule "mul_literals" (formula "29") (term "0,1,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "29") (term "0,0,0"))
                                                   (rule "add_literals" (formula "29") (term "0,0,0,0"))
                                                   (rule "add_zero_left" (formula "29") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0"))
                                                   (rule "mul_literals" (formula "29") (term "1,1,0"))
                                                   (rule "inEqSimp_invertInEq1" (formula "29") (term "0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "29") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "29") (term "1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "29") (term "0,0,0"))
                                                   (rule "inEqSimp_contradInEq1" (formula "29") (term "1,0") (ifseqformula "65"))
                                                   (rule "qeq_literals" (formula "29") (term "0,1,0"))
                                                    (builtin "One Step Simplification" (formula "29"))
                                                   (rule "inEqSimp_contradInEq1" (formula "29") (term "0") (ifseqformula "65"))
                                                   (rule "qeq_literals" (formula "29") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "29"))
                                                   (rule "allLeft" (formula "26") (inst "t=add(Z(neglit(1(#))), l_1)"))
                                                   (rule "inEqSimp_homoInEq0" (formula "26") (term "0,0"))
                                                   (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0"))
                                                   (rule "mul_literals" (formula "26") (term "0,1,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "26") (term "0,0,0"))
                                                   (rule "add_literals" (formula "26") (term "0,0,0,0"))
                                                   (rule "add_zero_left" (formula "26") (term "0,0,0"))
                                                   (rule "inEqSimp_homoInEq1" (formula "26") (term "1,0"))
                                                   (rule "polySimp_mulComm0" (formula "26") (term "1,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "26") (term "1,0,1,0"))
                                                   (rule "mul_literals" (formula "26") (term "0,1,0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "26") (term "0,1,0"))
                                                   (rule "polySimp_addComm0" (formula "26") (term "0,0,1,0"))
                                                   (rule "polySimp_pullOutFactor0b" (formula "26") (term "0,1,0"))
                                                   (rule "add_literals" (formula "26") (term "1,1,0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "26") (term "1,0,1,0"))
                                                   (rule "inEqSimp_invertInEq1" (formula "26") (term "0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "26") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "26") (term "1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "26") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0"))
                                                   (rule "mul_literals" (formula "26") (term "1,1,0"))
                                                   (rule "inEqSimp_contradInEq1" (formula "26") (term "0,0") (ifseqformula "66"))
                                                   (rule "qeq_literals" (formula "26") (term "0,0,0"))
                                                    (builtin "One Step Simplification" (formula "26"))
                                                   (rule "inEqSimp_contradInEq1" (formula "26") (term "0") (ifseqformula "66"))
                                                   (rule "qeq_literals" (formula "26") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "26"))
                                                   (rule "commute_or" (formula "44") (term "0,0,1,0,1,1"))
                                                   (rule "allLeft" (formula "12") (inst "t=add(Z(neglit(2(#))), l_1)"))
                                                   (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                                                   (rule "polySimp_mulComm0" (formula "12") (term "1,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "12") (term "1,0,1,0"))
                                                   (rule "mul_literals" (formula "12") (term "0,1,0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "12") (term "0,1,0"))
                                                   (rule "polySimp_addComm0" (formula "12") (term "0,0,1,0"))
                                                   (rule "polySimp_pullOutFactor0b" (formula "12") (term "0,1,0"))
                                                   (rule "add_literals" (formula "12") (term "1,1,0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "12") (term "1,0,1,0"))
                                                   (rule "inEqSimp_homoInEq0" (formula "12") (term "0,0"))
                                                   (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                                                   (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "12") (term "0,0,0"))
                                                   (rule "add_literals" (formula "12") (term "0,0,0,0"))
                                                   (rule "applyEq" (formula "12") (term "0,1") (ifseqformula "41"))
                                                   (rule "eqSymm" (formula "12") (term "1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0"))
                                                   (rule "mul_literals" (formula "12") (term "1,1,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "12") (term "0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "12") (term "0,0,0"))
                                                   (rule "inEqSimp_contradInEq1" (formula "12") (term "0,0") (ifseqformula "67"))
                                                   (rule "qeq_literals" (formula "12") (term "0,0,0"))
                                                    (builtin "One Step Simplification" (formula "12"))
                                                   (rule "inEqSimp_contradInEq1" (formula "12") (term "0") (ifseqformula "67"))
                                                   (rule "qeq_literals" (formula "12") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "12"))
                                                   (rule "pullOutSelect" (formula "12") (term "0") (inst "selectSK=arr_5"))
                                                   (rule "simplifySelectOfAnon" (formula "12"))
                                                    (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "106")) (ifInst ""  (formula "20")))
                                                   (rule "eqSymm" (formula "13"))
                                                   (rule "applyEqReverse" (formula "12") (term "1") (ifseqformula "13"))
                                                    (builtin "One Step Simplification" (formula "12"))
                                                   (rule "hideAuxiliaryEq" (formula "13"))
                                                   (rule "elementOfArrayRangeConcrete" (formula "12") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "12"))
                                                   (rule "inEqSimp_homoInEq0" (formula "12") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "12") (term "1,0,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "12") (term "1,0,1,0,0"))
                                                   (rule "mul_literals" (formula "12") (term "0,1,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "12") (term "0,1,0,0"))
                                                   (rule "polySimp_addComm0" (formula "12") (term "0,0,1,0,0"))
                                                   (rule "polySimp_pullOutFactor0b" (formula "12") (term "0,1,0,0"))
                                                   (rule "add_literals" (formula "12") (term "1,1,0,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "12") (term "1,0,1,0,0"))
                                                   (rule "inEqSimp_homoInEq0" (formula "12") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "12") (term "1,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "12") (term "0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "12") (term "1,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "12") (term "1,0,0,0"))
                                                   (rule "replace_known_left" (formula "12") (term "0,0,0") (ifseqformula "67"))
                                                    (builtin "One Step Simplification" (formula "12"))
                                                   (rule "inEqSimp_subsumption1" (formula "12") (term "0,0") (ifseqformula "67"))
                                                   (rule "leq_literals" (formula "12") (term "0,0,0"))
                                                    (builtin "One Step Simplification" (formula "12"))
                                                   (rule "allLeft" (formula "13") (inst "t=b_0"))
                                                   (rule "applyEq" (formula "13") (term "0,1") (ifseqformula "40"))
                                                   (rule "eqSymm" (formula "13") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "13") (term "0,0") (ifseqformula "9"))
                                                   (rule "qeq_literals" (formula "13") (term "0,0,0"))
                                                    (builtin "One Step Simplification" (formula "13"))
                                                   (rule "inEqSimp_contradInEq0" (formula "13") (term "0") (ifseqformula "4"))
                                                   (rule "inEqSimp_homoInEq1" (formula "13") (term "0,0"))
                                                   (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0"))
                                                   (rule "mul_literals" (formula "13") (term "0,1,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "13") (term "0,0,0"))
                                                   (rule "polySimp_addComm0" (formula "13") (term "0,0,0,0"))
                                                   (rule "polySimp_pullOutFactor0b" (formula "13") (term "0,0,0"))
                                                   (rule "add_literals" (formula "13") (term "1,1,0,0,0"))
                                                   (rule "times_zero_1" (formula "13") (term "1,0,0,0"))
                                                   (rule "add_literals" (formula "13") (term "0,0,0"))
                                                   (rule "leq_literals" (formula "13") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "13"))
                                                   (rule "pullOutSelect" (formula "13") (term "0") (inst "selectSK=arr_6"))
                                                   (rule "simplifySelectOfAnon" (formula "13"))
                                                    (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "107")) (ifInst ""  (formula "21")))
                                                   (rule "eqSymm" (formula "14"))
                                                   (rule "applyEqReverse" (formula "13") (term "1") (ifseqformula "14"))
                                                    (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "110")))
                                                   (rule "notLeft" (formula "13"))
                                                   (rule "hideAuxiliaryEq" (formula "13"))
                                                   (rule "elementOfArrayRangeConcrete" (formula "84"))
                                                    (builtin "One Step Simplification" (formula "84"))
                                                   (rule "inEqSimp_commuteLeq" (formula "84") (term "0"))
                                                   (rule "inEqSimp_subsumption0" (formula "84") (term "1") (ifseqformula "4"))
                                                   (rule "inEqSimp_homoInEq0" (formula "84") (term "0,1"))
                                                   (rule "polySimp_mulComm0" (formula "84") (term "1,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "84") (term "1,0,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "84") (term "1,1,0,0,1"))
                                                   (rule "mul_literals" (formula "84") (term "0,1,0,0,1"))
                                                   (rule "polySimp_addAssoc" (formula "84") (term "0,0,1"))
                                                   (rule "polySimp_addComm0" (formula "84") (term "0,0,0,1"))
                                                   (rule "polySimp_pullOutFactor0b" (formula "84") (term "0,0,1"))
                                                   (rule "add_literals" (formula "84") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "84") (term "1,0,0,1"))
                                                   (rule "add_literals" (formula "84") (term "0,0,1"))
                                                   (rule "qeq_literals" (formula "84") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "84"))
                                                   (rule "inEqSimp_geqRight" (formula "84"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                   (rule "mul_literals" (formula "1") (term "1"))
                                                   (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "1"))
                                                   (rule "qeq_literals" (formula "10") (term "0"))
                                                    (builtin "One Step Simplification" (formula "10"))
                                                   (rule "closeFalse" (formula "10"))
                                                )
                                                (branch "self.equal_buckets = TRUE FALSE"
                                                   (rule "applyEq" (formula "48") (term "1,0,2,0") (ifseqformula "45"))
                                                   (rule "eqSymm" (formula "48"))
                                                   (rule "applyEq" (formula "55") (term "0") (ifseqformula "45"))
                                                   (rule "inEqSimp_commuteLeq" (formula "55"))
                                                   (rule "applyEq" (formula "47") (term "1,1,0,0,1,0") (ifseqformula "45"))
                                                   (rule "applyEq" (formula "57") (term "1,1,1,0,0,1,0") (ifseqformula "45"))
                                                   (rule "applyEq" (formula "54") (term "1") (ifseqformula "45"))
                                                   (rule "applyEq" (formula "56") (term "1,1,1,0,0") (ifseqformula "45"))
                                                   (rule "applyEq" (formula "47") (term "1,1,0,0") (ifseqformula "45"))
                                                   (rule "applyEq" (formula "34") (term "1,3,0,1,0") (ifseqformula "45"))
                                                   (rule "applyEq" (formula "53") (term "0") (ifseqformula "45"))
                                                   (rule "applyEq" (formula "56") (term "1,1,1,0,0") (ifseqformula "45"))
                                                   (rule "applyEq" (formula "48") (term "1,0,2,0") (ifseqformula "45"))
                                                   (rule "eqSymm" (formula "48"))
                                                   (rule "applyEq" (formula "51") (term "1") (ifseqformula "45"))
                                                   (rule "commute_or" (formula "59") (term "0"))
                                                   (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "36") (term "0,1,0,1,0"))
                                                   (rule "arrayLengthIsAShort" (formula "53") (term "0"))
                                                    (builtin "One Step Simplification" (formula "53"))
                                                   (rule "true_left" (formula "53"))
                                                   (rule "arrayLengthNotNegative" (formula "53") (term "0"))
                                                   (rule "arrayLengthIsAShort" (formula "52") (term "0"))
                                                    (builtin "One Step Simplification" (formula "52"))
                                                   (rule "true_left" (formula "52"))
                                                   (rule "arrayLengthNotNegative" (formula "52") (term "0"))
                                                   (rule "inEqSimp_subsumption1" (formula "52") (ifseqformula "53"))
                                                   (rule "leq_literals" (formula "52") (term "0"))
                                                    (builtin "One Step Simplification" (formula "52"))
                                                   (rule "true_left" (formula "52"))
                                                   (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "34") (term "1"))
                                                    (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "72")) (ifInst ""  (formula "71")) (ifInst ""  (formula "69")) (ifInst ""  (formula "46")))
                                                   (rule "translateJavaSubInt" (formula "34") (term "0,2,1,1,0,1"))
                                                   (rule "translateJavaSubInt" (formula "34") (term "0,2,0,1,0,1"))
                                                   (rule "eqSymm" (formula "34") (term "1,0,0,0,1"))
                                                   (rule "eqSymm" (formula "34") (term "1,0,1"))
                                                   (rule "polySimp_elimSub" (formula "34") (term "0,2,1,1,0,1"))
                                                   (rule "mul_literals" (formula "34") (term "1,0,2,1,1,0,1"))
                                                   (rule "polySimp_elimSub" (formula "34") (term "0,2,0,1,0,1"))
                                                   (rule "mul_literals" (formula "34") (term "1,0,2,0,1,0,1"))
                                                   (rule "polySimp_addComm0" (formula "34") (term "0,2,1,1,0,1"))
                                                   (rule "polySimp_addComm0" (formula "34") (term "0,2,0,1,0,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0,0,0,1"))
                                                   (rule "applyEq" (formula "34") (term "1,0,2,0,1,0,1") (ifseqformula "51"))
                                                   (rule "eqSymm" (formula "34") (term "1,0,1"))
                                                   (rule "applyEq" (formula "34") (term "0,0,0,0,0,0,1") (ifseqformula "31"))
                                                   (rule "replace_known_left" (formula "34") (term "0,0,0,0,0,1") (ifseqformula "44"))
                                                    (builtin "One Step Simplification" (formula "34"))
                                                   (rule "applyEq" (formula "34") (term "3,0,1,0,0,1") (ifseqformula "51"))
                                                   (rule "applyEq" (formula "34") (term "0,0,0,0,0,1") (ifseqformula "31"))
                                                   (rule "replace_known_left" (formula "34") (term "0,0,0,0,1") (ifseqformula "23"))
                                                    (builtin "One Step Simplification" (formula "34"))
                                                   (rule "applyEq" (formula "34") (term "1,0,2,0,1,0,1") (ifseqformula "51"))
                                                   (rule "eqSymm" (formula "34") (term "1,0,1"))
                                                   (rule "replace_known_left" (formula "34") (term "1,0,1") (ifseqformula "48"))
                                                    (builtin "One Step Simplification" (formula "34"))
                                                   (rule "applyEq" (formula "34") (term "0,0,0,1") (ifseqformula "51"))
                                                   (rule "eqSymm" (formula "34") (term "0,0,1"))
                                                   (rule "replace_known_left" (formula "34") (term "0,0,1") (ifseqformula "31"))
                                                    (builtin "One Step Simplification" (formula "34"))
                                                   (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "35") (term "0,1,0,1,0,1,0"))
                                                   (rule "onlyCreatedObjectsAreReferencedFinal" (formula "46") (term "0") (ifseqformula "14") (ifseqformula "6"))
                                                   (rule "applyEq" (formula "46") (term "0,0") (ifseqformula "47"))
                                                   (rule "replace_known_right" (formula "46") (term "0") (ifseqformula "72"))
                                                    (builtin "One Step Simplification" (formula "46"))
                                                   (rule "applyEq" (formula "46") (term "1,0") (ifseqformula "47"))
                                                   (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "34") (term "0,0,1") (inst "i=i") (inst "j=j_1"))
                                                    (builtin "One Step Simplification" (formula "34"))
                                                   (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0,1,0,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0,1,0,0,1"))
                                                   (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0,0,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0,0,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "34") (term "1,0,1,0,0,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0,1,0,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0,1,0,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,1,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,1,0,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,1,0,0,1"))
                                                   (rule "mul_literals" (formula "34") (term "0,1,1,0,0,1,0,0,1"))
                                                   (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,1,0,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,0,1"))
                                                   (rule "mul_literals" (formula "34") (term "0,1,1,0,0,0,1"))
                                                   (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,0,1"))
                                                   (rule "nnf_imp2or" (formula "34") (term "0,0,1"))
                                                   (rule "nnf_notAnd" (formula "34") (term "0,0,0,1"))
                                                   (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0,0,1"))
                                                   (rule "mul_literals" (formula "34") (term "1,0,0,0,0,0,0,1"))
                                                   (rule "add_zero_right" (formula "34") (term "0,0,0,0,0,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0,0,1"))
                                                   (rule "mul_literals" (formula "34") (term "1,0,0,0,0,1"))
                                                   (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,0,1"))
                                                   (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,0,1"))
                                                   (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,0,1"))
                                                   (rule "add_literals" (formula "34") (term "0,0,0,1,0,0,0,1"))
                                                   (rule "add_zero_left" (formula "34") (term "0,0,1,0,0,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,0,1"))
                                                   (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,0,1"))
                                                   (rule "nnf_imp2or" (formula "34") (term "0,1,0,0,1"))
                                                   (rule "nnf_notAnd" (formula "34") (term "0,0,1,0,0,1"))
                                                   (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0,1,0,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0,0,0,1,0,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0,1,0,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0,1,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "34") (term "1,0,0,0,1,0,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,0,1,0,0,1"))
                                                   (rule "mul_literals" (formula "34") (term "0,1,0,0,0,1,0,0,1"))
                                                   (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,0,1,0,0,1"))
                                                   (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0,1,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,1,0,0,1"))
                                                   (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,1,0,0,1"))
                                                   (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,1,0,0,1"))
                                                   (rule "add_literals" (formula "34") (term "0,0,0,1,0,0,1,0,0,1"))
                                                   (rule "add_zero_left" (formula "34") (term "0,0,1,0,0,1,0,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0,1,0,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,1,0,0,1"))
                                                   (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,1,0,0,1"))
                                                   (rule "replace_known_left" (formula "34") (term "0,1") (ifseqformula "47"))
                                                    (builtin "One Step Simplification" (formula "34"))
                                                   (rule "cnf_rightDist" (formula "37") (term "0"))
                                                   (rule "distr_forallAnd" (formula "37"))
                                                   (rule "andLeft" (formula "37"))
                                                   (rule "commute_or" (formula "48") (term "0,0,1,0"))
                                                   (rule "commute_or" (formula "58") (term "0,0,1,0"))
                                                   (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "34") (term "1"))
                                                    (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "71")) (ifInst ""  (formula "51")))
                                                   (rule "translateJavaSubInt" (formula "34") (term "3,0,1,1"))
                                                   (rule "polySimp_elimSub" (formula "34") (term "3,0,1,1"))
                                                   (rule "mul_literals" (formula "34") (term "1,3,0,1,1"))
                                                   (rule "polySimp_addComm0" (formula "34") (term "3,0,1,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "34") (term "1,0,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "34") (term "1,1,0,0,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "34") (term "0,1,0,0,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "34") (term "1,0,0,0,0,1"))
                                                   (rule "replace_known_left" (formula "34") (term "1,0,0,0,0,1") (ifseqformula "50"))
                                                    (builtin "One Step Simplification" (formula "34"))
                                                   (rule "applyEq" (formula "34") (term "1,1,0,1") (ifseqformula "52"))
                                                   (rule "applyEq" (formula "34") (term "1,0,1,1") (ifseqformula "47"))
                                                   (rule "applyEq" (formula "34") (term "1,3,0,1,1") (ifseqformula "52"))
                                                   (rule "applyEq" (formula "34") (term "0,1,0,0,0,1") (ifseqformula "52"))
                                                   (rule "eqSymm" (formula "34") (term "1,0,0,0,1"))
                                                   (rule "replace_known_left" (formula "34") (term "1,0,0,0,1") (ifseqformula "46"))
                                                    (builtin "One Step Simplification" (formula "34"))
                                                   (rule "applyEq" (formula "34") (term "0,0,1,0,1") (ifseqformula "47"))
                                                   (rule "replace_known_left" (formula "34") (term "1,0,1") (ifseqformula "56"))
                                                    (builtin "One Step Simplification" (formula "34"))
                                                   (rule "applyEq" (formula "34") (term "0,0,0,0,1") (ifseqformula "47"))
                                                   (rule "replace_known_right" (formula "34") (term "0,0,0,1") (ifseqformula "72"))
                                                    (builtin "One Step Simplification" (formula "34"))
                                                   (rule "applyEq" (formula "34") (term "0,0,0,1") (ifseqformula "52"))
                                                   (rule "replace_known_left" (formula "34") (term "0,0,1") (ifseqformula "45"))
                                                    (builtin "One Step Simplification" (formula "34"))
                                                   (rule "applyEq" (formula "34") (term "1,0,1") (ifseqformula "52"))
                                                   (rule "replace_known_left" (formula "34") (term "0,1") (ifseqformula "55"))
                                                    (builtin "One Step Simplification" (formula "34"))
                                                   (rule "commute_or_2" (formula "38") (term "0"))
                                                   (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "34") (term "0,1"))
                                                   (rule "replace_known_right" (formula "34") (term "0,0,0") (ifseqformula "73"))
                                                    (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "14")))
                                                   (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "35") (term "0,1,0"))
                                                   (rule "replace_known_left" (formula "35") (term "1,0") (ifseqformula "14"))
                                                    (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "74")) (ifInst ""  (formula "34")))
                                                   (rule "true_left" (formula "35"))
                                                   (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "35") (term "0,1") (inst "i=i") (inst "j=j_1"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,1"))
                                                   (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,1"))
                                                   (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,1"))
                                                   (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,1"))
                                                   (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0,1,0,1"))
                                                   (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,1,0,1"))
                                                   (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,1,0,1"))
                                                   (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,1,0,1"))
                                                   (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,1,0,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "35") (term "1,0,1,0,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0,1,0,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1"))
                                                   (rule "mul_literals" (formula "35") (term "0,1,1,0,0,1"))
                                                   (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,1,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1,0,1"))
                                                   (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1,0,1"))
                                                   (rule "mul_literals" (formula "35") (term "0,1,1,0,0,1,0,1"))
                                                   (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,1,0,1"))
                                                   (rule "nnf_imp2or" (formula "35") (term "0,1"))
                                                   (rule "nnf_notAnd" (formula "35") (term "0,0,1"))
                                                   (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,1"))
                                                   (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,1"))
                                                   (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,1"))
                                                   (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1"))
                                                   (rule "mul_literals" (formula "35") (term "0,1,1,0,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1"))
                                                   (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,1"))
                                                   (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0,1"))
                                                   (rule "mul_literals" (formula "35") (term "1,0,0,0,0,0,1"))
                                                   (rule "add_zero_right" (formula "35") (term "0,0,0,0,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0,1"))
                                                   (rule "mul_literals" (formula "35") (term "1,0,0,0,1"))
                                                   (rule "nnf_imp2or" (formula "35") (term "0,1,0,1"))
                                                   (rule "nnf_notAnd" (formula "35") (term "0,0,1,0,1"))
                                                   (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0,1,0,1"))
                                                   (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,1,0,1"))
                                                   (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,1,0,1"))
                                                   (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,1,0,1"))
                                                   (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,1,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0,1,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1,0,1"))
                                                   (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1,0,1"))
                                                   (rule "mul_literals" (formula "35") (term "0,1,1,0,0,1,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1,0,1"))
                                                   (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,1,0,1"))
                                                   (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0,1,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0,0,0,1,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0,1,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0,1,0,1"))
                                                   (rule "polySimp_rightDist" (formula "35") (term "1,0,0,0,1,0,1"))
                                                   (rule "mul_literals" (formula "35") (term "0,1,0,0,0,1,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,0,1,0,1"))
                                                   (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0,0,1,0,1"))
                                                   (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "34") (term "0,0") (inst "i=i") (inst "j=j_1"))
                                                    (builtin "One Step Simplification" (formula "34"))
                                                   (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,1,0,0"))
                                                   (rule "add_literals" (formula "34") (term "0,0,0,1,0,0,1,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,0"))
                                                   (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,0"))
                                                   (rule "add_literals" (formula "34") (term "0,0,0,1,0,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "34") (term "1,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0,1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "34") (term "0,1,1,0,0,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "34") (term "0,1,1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,0"))
                                                   (rule "nnf_imp2or" (formula "34") (term "0,0"))
                                                   (rule "nnf_notAnd" (formula "34") (term "0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,0"))
                                                   (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,0"))
                                                   (rule "add_literals" (formula "34") (term "0,0,0,1,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "34") (term "0,1,1,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0,0"))
                                                   (rule "mul_literals" (formula "34") (term "1,0,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "34") (term "0,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0,0"))
                                                   (rule "mul_literals" (formula "34") (term "1,0,0,0,0"))
                                                   (rule "nnf_imp2or" (formula "34") (term "0,1,0,0"))
                                                   (rule "nnf_notAnd" (formula "34") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,1,0,0"))
                                                   (rule "add_literals" (formula "34") (term "0,0,0,1,0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0,1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "34") (term "0,1,1,0,0,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,1,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0,1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0,0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0,1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "34") (term "1,0,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "34") (term "0,1,0,0,0,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,0,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,0,1,0,0"))
                                                   (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "35") (term "0,1,0"))
                                                   (rule "replace_known_right" (formula "35") (term "0,0,0") (ifseqformula "74"))
                                                    (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "14")))
                                                   (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "36") (term "0,1,0") (inst "i=i") (inst "j=j_1"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_ltToLeq" (formula "36") (term "1,0,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0,1,0"))
                                                   (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0,1,0"))
                                                   (rule "add_literals" (formula "36") (term "0,0,0,1,0,0,1,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "36") (term "1,0,0,1,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0,1,0,1,0"))
                                                   (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0,1,0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0,1,0,1,0"))
                                                   (rule "add_literals" (formula "36") (term "0,0,0,1,0,0,1,0,1,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,0,1,0,1,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "36") (term "1,0,1,0,1,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,0,1,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0,1,0"))
                                                   (rule "mul_literals" (formula "36") (term "0,1,1,0,0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0,1,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0,1,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0,1,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0,1,0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0,1,0,1,0"))
                                                   (rule "mul_literals" (formula "36") (term "0,1,1,0,0,1,0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0,1,0,1,0"))
                                                   (rule "nnf_imp2or" (formula "36") (term "0,1,0"))
                                                   (rule "nnf_notAnd" (formula "36") (term "0,0,1,0"))
                                                   (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0,1,0"))
                                                   (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0,1,0"))
                                                   (rule "add_literals" (formula "36") (term "0,0,0,1,0,0,1,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0,1,0"))
                                                   (rule "mul_literals" (formula "36") (term "0,1,1,0,0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0,1,0"))
                                                   (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0,1,0"))
                                                   (rule "mul_literals" (formula "36") (term "1,0,0,0,0,0,1,0"))
                                                   (rule "add_zero_right" (formula "36") (term "0,0,0,0,0,1,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0,1,0"))
                                                   (rule "mul_literals" (formula "36") (term "1,0,0,0,1,0"))
                                                   (rule "nnf_imp2or" (formula "36") (term "0,1,0,1,0"))
                                                   (rule "nnf_notAnd" (formula "36") (term "0,0,1,0,1,0"))
                                                   (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0,1,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0,1,0,1,0"))
                                                   (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0,1,0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0,1,0,1,0"))
                                                   (rule "add_literals" (formula "36") (term "0,0,0,1,0,0,1,0,1,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0,1,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0,1,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0,1,0,1,0"))
                                                   (rule "mul_literals" (formula "36") (term "0,1,1,0,0,1,0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0,1,0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0,1,0,1,0"))
                                                   (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0,1,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,0,0,0,1,0,1,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0,1,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,0,1,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "36") (term "1,0,0,0,1,0,1,0"))
                                                   (rule "mul_literals" (formula "36") (term "0,1,0,0,0,1,0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0,0,1,0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "36") (term "1,1,0,0,0,1,0,1,0"))
                                                   (rule "cnf_rightDist" (formula "39") (term "0"))
                                                   (rule "commute_or" (formula "40") (term "0,0"))
                                                   (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "34") (term "0,1"))
                                                   (rule "replace_known_right" (formula "34") (term "0,0,0") (ifseqformula "75"))
                                                    (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "14")))
                                                   (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "35") (term "0,1") (inst "i=i"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "translateJavaSubInt" (formula "35") (term "1,1,0,0,1"))
                                                   (rule "translateJavaAddInt" (formula "35") (term "0,2,1,1,0,1"))
                                                   (rule "polySimp_elimSub" (formula "35") (term "1,1,0,0,1"))
                                                   (rule "mul_literals" (formula "35") (term "1,1,1,0,0,1"))
                                                   (rule "polySimp_addComm0" (formula "35") (term "0,2,1,1,0,1"))
                                                   (rule "polySimp_addComm1" (formula "35") (term "1,1,0,0,1"))
                                                   (rule "add_literals" (formula "35") (term "0,1,1,0,0,1"))
                                                   (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,1"))
                                                   (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,1"))
                                                   (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,1"))
                                                   (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "35") (term "1,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1"))
                                                   (rule "mul_literals" (formula "35") (term "0,1,1,0,0,1"))
                                                   (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,1"))
                                                   (rule "nnf_imp2or" (formula "35") (term "0,1"))
                                                   (rule "nnf_notAnd" (formula "35") (term "0,0,1"))
                                                   (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0,1"))
                                                   (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,0,1"))
                                                   (rule "add_zero_right" (formula "35") (term "0,0,0,0,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0,1"))
                                                   (rule "mul_literals" (formula "35") (term "1,0,0,0,1"))
                                                   (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,1"))
                                                   (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,1"))
                                                   (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,1"))
                                                   (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1"))
                                                   (rule "mul_literals" (formula "35") (term "0,1,1,0,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1"))
                                                   (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,1"))
                                                   (rule "replace_known_left" (formula "35") (term "1") (ifseqformula "60"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "true_left" (formula "35"))
                                                   (rule "all_pull_out3" (formula "38") (term "0"))
                                                   (rule "all_pull_out1" (formula "37") (term "0,1,0"))
                                                   (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "35") (term "0,1") (inst "i=i"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "translateJavaAddInt" (formula "35") (term "0,2,1,1,0,1"))
                                                   (rule "translateJavaSubInt" (formula "35") (term "1,1,0,0,1"))
                                                   (rule "polySimp_elimSub" (formula "35") (term "1,1,0,0,1"))
                                                   (rule "mul_literals" (formula "35") (term "1,1,1,0,0,1"))
                                                   (rule "polySimp_addComm0" (formula "35") (term "0,2,1,1,0,1"))
                                                   (rule "polySimp_addComm1" (formula "35") (term "1,1,0,0,1"))
                                                   (rule "add_literals" (formula "35") (term "0,1,1,0,0,1"))
                                                   (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,1"))
                                                   (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,1"))
                                                   (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,1"))
                                                   (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "35") (term "1,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1"))
                                                   (rule "mul_literals" (formula "35") (term "0,1,1,0,0,1"))
                                                   (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,1"))
                                                   (rule "nnf_imp2or" (formula "35") (term "0,1"))
                                                   (rule "nnf_notAnd" (formula "35") (term "0,0,1"))
                                                   (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,1"))
                                                   (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0,1"))
                                                   (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,1"))
                                                   (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1"))
                                                   (rule "mul_literals" (formula "35") (term "0,1,1,0,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1"))
                                                   (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,1"))
                                                   (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0,1"))
                                                   (rule "mul_literals" (formula "35") (term "1,0,0,0,0,0,1"))
                                                   (rule "add_zero_right" (formula "35") (term "0,0,0,0,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0,1"))
                                                   (rule "mul_literals" (formula "35") (term "1,0,0,0,1"))
                                                   (rule "replace_known_left" (formula "35") (term "1") (ifseqformula "59"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "true_left" (formula "35"))
                                                   (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "35") (term "0,0,0"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "translateJavaMod" (formula "35") (term "0,0,0"))
                                                   (rule "jmod_axiom" (formula "35") (term "0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "35") (term "1,0,0,0"))
                                                   (rule "applyEq" (formula "35") (term "0,1,0,0,0") (ifseqformula "43"))
                                                   (rule "polySimp_pullOutFactor0" (formula "35") (term "0,0,0"))
                                                   (rule "add_literals" (formula "35") (term "1,0,0,0"))
                                                   (rule "times_zero_1" (formula "35") (term "0,0,0"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "true_left" (formula "35"))
                                                   (rule "allLeft" (formula "12") (inst "t=Z(0(#))"))
                                                   (rule "replaceKnownSelect_taclet1_0" (formula "12") (term "1,1"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet100012000121201_7" (formula "12") (term "1,1"))
                                                   (rule "leq_literals" (formula "12") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "64")))
                                                   (rule "true_left" (formula "12"))
                                                   (rule "allLeft" (formula "12") (inst "t=add(Z(neglit(1(#))),
    int::final(buffers,
               de.wiesler.Buffers::$num_buckets))"))
                                                   (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                                                   (rule "polySimp_mulComm0" (formula "12") (term "1,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "12") (term "1,0,1,0"))
                                                   (rule "mul_literals" (formula "12") (term "0,1,0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "12") (term "0,1,0"))
                                                   (rule "polySimp_addComm0" (formula "12") (term "0,0,1,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,1,0"))
                                                   (rule "add_literals" (formula "12") (term "1,1,0,1,0"))
                                                   (rule "times_zero_1" (formula "12") (term "1,0,1,0"))
                                                   (rule "add_zero_right" (formula "12") (term "0,1,0"))
                                                   (rule "leq_literals" (formula "12") (term "1,0"))
                                                    (builtin "One Step Simplification" (formula "12"))
                                                   (rule "inEqSimp_homoInEq0" (formula "12") (term "0"))
                                                   (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "12") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "12") (term "0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "12") (term "0,0"))
                                                   (rule "add_literals" (formula "12") (term "0,0,0"))
                                                   (rule "add_zero_left" (formula "12") (term "0,0"))
                                                   (rule "inEqSimp_invertInEq1" (formula "12") (term "0"))
                                                   (rule "polySimp_mulLiterals" (formula "12") (term "0,0"))
                                                   (rule "mul_literals" (formula "12") (term "1,0"))
                                                   (rule "polySimp_elimOne" (formula "12") (term "0,0"))
                                                   (rule "inEqSimp_contradInEq1" (formula "12") (term "0") (ifseqformula "46"))
                                                   (rule "qeq_literals" (formula "12") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "12"))
                                                   (rule "pullOutSelect" (formula "12") (term "1") (inst "selectSK=arr_5"))
                                                   (rule "simplifySelectOfAnon" (formula "12"))
                                                    (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "94")) (ifInst ""  (formula "20")))
                                                   (rule "elementOfArrayRangeConcrete" (formula "12") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "12"))
                                                   (rule "inEqSimp_homoInEq0" (formula "12") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "12") (term "1,0,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "12") (term "1,0,1,0,0"))
                                                   (rule "mul_literals" (formula "12") (term "0,1,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "12") (term "0,1,0,0"))
                                                   (rule "polySimp_addComm0" (formula "12") (term "0,0,1,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,1,0,0"))
                                                   (rule "add_literals" (formula "12") (term "1,1,0,1,0,0"))
                                                   (rule "times_zero_1" (formula "12") (term "1,0,1,0,0"))
                                                   (rule "add_zero_right" (formula "12") (term "0,1,0,0"))
                                                   (rule "qeq_literals" (formula "12") (term "1,0,0"))
                                                    (builtin "One Step Simplification" (formula "12"))
                                                   (rule "inEqSimp_homoInEq0" (formula "12") (term "0,0"))
                                                   (rule "mul_literals" (formula "12") (term "1,0,0,0"))
                                                   (rule "add_zero_right" (formula "12") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0"))
                                                   (rule "mul_literals" (formula "12") (term "1,0,0"))
                                                   (rule "inEqSimp_subsumption1" (formula "12") (term "0,0") (ifseqformula "47"))
                                                   (rule "leq_literals" (formula "12") (term "0,0,0"))
                                                    (builtin "One Step Simplification" (formula "12"))
                                                   (rule "applyEqReverse" (formula "13") (term "1") (ifseqformula "12"))
                                                   (rule "hideAuxiliaryEq" (formula "12"))
                                                   (rule "allLeft" (formula "13") (inst "t=add(Z(neglit(2(#))),
    int::final(buffers,
               de.wiesler.Buffers::$num_buckets))"))
                                                   (rule "inEqSimp_homoInEq1" (formula "13") (term "1,0"))
                                                   (rule "polySimp_mulComm0" (formula "13") (term "1,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "13") (term "1,0,1,0"))
                                                   (rule "mul_literals" (formula "13") (term "0,1,0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "13") (term "0,1,0"))
                                                   (rule "polySimp_addComm0" (formula "13") (term "0,0,1,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,1,0"))
                                                   (rule "add_literals" (formula "13") (term "1,1,0,1,0"))
                                                   (rule "times_zero_1" (formula "13") (term "1,0,1,0"))
                                                   (rule "add_zero_right" (formula "13") (term "0,1,0"))
                                                   (rule "leq_literals" (formula "13") (term "1,0"))
                                                    (builtin "One Step Simplification" (formula "13"))
                                                   (rule "inEqSimp_homoInEq0" (formula "13") (term "0"))
                                                   (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "13") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "13") (term "0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "13") (term "0,0"))
                                                   (rule "add_literals" (formula "13") (term "0,0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "13") (term "0"))
                                                   (rule "polySimp_mulLiterals" (formula "13") (term "0,0"))
                                                   (rule "polySimp_elimOne" (formula "13") (term "0,0"))
                                                   (rule "inEqSimp_contradInEq1" (formula "13") (term "0") (ifseqformula "47"))
                                                   (rule "qeq_literals" (formula "13") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "13"))
                                                   (rule "pullOutSelect" (formula "13") (term "1") (inst "selectSK=arr_6"))
                                                   (rule "simplifySelectOfAnon" (formula "13"))
                                                    (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "95")) (ifInst ""  (formula "21")))
                                                   (rule "elementOfArrayRangeConcrete" (formula "13") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "13"))
                                                   (rule "inEqSimp_homoInEq0" (formula "13") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "13") (term "1,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "13") (term "0,0,0,0"))
                                                   (rule "inEqSimp_homoInEq0" (formula "13") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "13") (term "1,0,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "13") (term "1,0,1,0,0"))
                                                   (rule "mul_literals" (formula "13") (term "0,1,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "13") (term "0,1,0,0"))
                                                   (rule "polySimp_addComm0" (formula "13") (term "0,0,1,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,1,0,0"))
                                                   (rule "add_literals" (formula "13") (term "1,1,0,1,0,0"))
                                                   (rule "times_zero_1" (formula "13") (term "1,0,1,0,0"))
                                                   (rule "add_zero_right" (formula "13") (term "0,1,0,0"))
                                                   (rule "qeq_literals" (formula "13") (term "1,0,0"))
                                                    (builtin "One Step Simplification" (formula "13"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,0"))
                                                   (rule "mul_literals" (formula "13") (term "1,0,0"))
                                                   (rule "replace_known_left" (formula "13") (term "0,0") (ifseqformula "48"))
                                                    (builtin "One Step Simplification" (formula "13"))
                                                   (rule "applyEqReverse" (formula "14") (term "1") (ifseqformula "13"))
                                                   (rule "hideAuxiliaryEq" (formula "13"))
                                                   (rule "distr_forallAnd" (formula "39"))
                                                   (rule "andLeft" (formula "39"))
                                                   (rule "allLeft" (formula "14") (inst "t=b_0"))
                                                   (rule "replaceKnownSelect_taclet100012000121201_5" (formula "14") (term "1,1"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet100012000121201_6" (formula "14") (term "1,1"))
                                                   (rule "replace_known_right" (formula "14") (term "1") (ifseqformula "99"))
                                                    (builtin "One Step Simplification" (formula "14"))
                                                   (rule "inEqSimp_commuteGeq" (formula "14") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "14") (term "0") (ifseqformula "9"))
                                                   (rule "qeq_literals" (formula "14") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "14"))
                                                   (rule "inEqSimp_contradInEq1" (formula "14") (ifseqformula "4"))
                                                   (rule "andLeft" (formula "14"))
                                                   (rule "inEqSimp_homoInEq1" (formula "14"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "14") (term "0"))
                                                   (rule "add_literals" (formula "14") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "14") (term "1,0"))
                                                   (rule "add_literals" (formula "14") (term "0"))
                                                   (rule "leq_literals" (formula "14"))
                                                   (rule "closeFalse" (formula "14"))
                                                )
                                             )
                                          )
                                       )
                                       (branch "Case 2"
                                          (rule "allRight" (formula "64") (inst "sk=b_0") (userinteraction))
                                          (rule "impRight" (formula "64") (userinteraction))
                                          (rule "eqTermCut" (formula "1") (term "1,1,1") (inst "s=b_0") (userinteraction))
                                          (branch "Assume j_0 = b_0"
                                             (rule "andLeft" (formula "2"))
                                             (rule "polySimp_homoEq" (formula "67") (term "0,1,0"))
                                             (rule "polySimp_homoEq" (formula "17") (term "1,0"))
                                             (rule "polySimp_homoEq" (formula "67"))
                                             (rule "polySimp_homoEq" (formula "17") (term "0,1,0,1,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "67") (term "1,0,0,1,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "17") (term "1,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "67") (term "1,0"))
                                             (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,1,1,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "67") (term "1,0,0,1,1,1,0"))
                                             (rule "mul_literals" (formula "67") (term "0,1,0,0,1,1,1,0"))
                                             (rule "polySimp_addComm1" (formula "67") (term "0,0,1,1,1,0"))
                                             (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,1,1,0,1,0"))
                                             (rule "mul_literals" (formula "17") (term "0,1,0,0,1,1,1,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "67") (term "1,0"))
                                             (rule "polySimp_mulAssoc" (formula "67") (term "0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "67") (term "0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "67") (term "0,1,0"))
                                             (rule "polySimp_elimOne" (formula "67") (term "0,1,0"))
                                             (rule "polySimp_rightDist" (formula "17") (term "1,0,1,0"))
                                             (rule "polySimp_mulAssoc" (formula "17") (term "0,1,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "17") (term "0,0,1,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "17") (term "0,1,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "17") (term "0,1,0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "67") (term "0,0,0,0,1,1,0"))
                                             (rule "add_literals" (formula "67") (term "0,0,0,0,0,1,1,0"))
                                             (rule "add_zero_left" (formula "67") (term "0,0,0,0,1,1,0"))
                                             (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,1,1,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "17") (term "0,0,0,0,1,1,0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "67") (term "0"))
                                             (rule "polySimp_addAssoc" (formula "17") (term "0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "13") (term "0"))
                                             (rule "add_zero_right" (formula "13") (term "0,0"))
                                             (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "8"))
                                             (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "8") (term "0"))
                                             (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "3"))
                                             (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
                                             (rule "mul_literals" (formula "3") (term "0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                                             (rule "add_literals" (formula "3") (term "0,0,0"))
                                             (rule "add_zero_left" (formula "3") (term "0,0"))
                                             (rule "polySimp_addComm0" (formula "3") (term "0"))
                                             (rule "inEqSimp_homoInEq0" (formula "12") (term "0,0,0"))
                                             (rule "times_zero_2" (formula "12") (term "1,0,0,0,0"))
                                             (rule "add_zero_right" (formula "12") (term "0,0,0,0"))
                                             (rule "inEqSimp_homoInEq1" (formula "28"))
                                             (rule "polySimp_addComm1" (formula "28") (term "0"))
                                             (rule "applyEq" (formula "12") (term "1,0,0,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "13") (term "0,1,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "47") (term "5,1,0") (ifseqformula "1"))
                                             (rule "applyEqRigid" (formula "14") (term "1,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "42") (term "0,2,0") (ifseqformula "1"))
                                             (rule "applyEqRigid" (formula "67") (term "5,1,1,0,1,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "67") (term "0,2,0,2,0,1,0") (ifseqformula "1"))
                                             (rule "applyEqRigid" (formula "10") (term "1") (ifseqformula "1"))
                                             (rule "applyEqRigid" (formula "12") (term "1,0,2,2,0") (ifseqformula "1"))
                                             (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "14") (term "3,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "66") (term "1,0,0,0,1,0") (ifseqformula "1"))
                                             (rule "polySimp_pullOutFactor2" (formula "66") (term "0,0,0,1,0"))
                                             (rule "add_literals" (formula "66") (term "1,0,0,0,1,0"))
                                             (rule "times_zero_1" (formula "66") (term "0,0,0,1,0"))
                                              (builtin "One Step Simplification" (formula "66"))
                                             (rule "polySimp_mulComm0" (formula "66") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "66") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "66") (term "0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "66") (term "0,0,1,0"))
                                             (rule "polySimp_addComm1" (formula "66") (term "0"))
                                             (rule "polySimp_addAssoc" (formula "66") (term "0,0"))
                                             (rule "polySimp_addComm1" (formula "66") (term "0,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "66") (term "0,0"))
                                             (rule "add_literals" (formula "66") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "66") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "66") (term "0,0"))
                                             (rule "polySimp_addComm0" (formula "66") (term "0,0"))
                                             (rule "applyEqRigid" (formula "3") (term "0,1,0") (ifseqformula "1"))
                                             (rule "polySimp_pullOutFactor1" (formula "3") (term "0"))
                                             (rule "add_literals" (formula "3") (term "1,0"))
                                             (rule "times_zero_1" (formula "3") (term "0"))
                                             (rule "leq_literals" (formula "3"))
                                             (rule "true_left" (formula "3"))
                                             (rule "applyEqRigid" (formula "14") (term "1,1,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "41") (term "2,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "10") (term "1,0,2,1,0") (ifseqformula "1"))
                                             (rule "applyEqRigid" (formula "10") (term "1,1,1,0,0") (ifseqformula "1"))
                                             (rule "applyEqRigid" (formula "43") (term "2,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "7") (term "1,0,0") (ifseqformula "1"))
                                             (rule "applyEqRigid" (formula "15") (term "1,0,0,0,0,1,0,1,0") (ifseqformula "1"))
                                             (rule "applyEqRigid" (formula "15") (term "0,1,0,0,0,0,0") (ifseqformula "1"))
                                             (rule "applyEqRigid" (formula "40") (term "5,1") (ifseqformula "1"))
                                             (rule "applyEqRigid" (formula "65") (term "0,2,0,1,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "65") (term "1,0,0") (ifseqformula "43"))
                                             (rule "polySimp_addComm1" (formula "65") (term "0,0"))
                                             (rule "polySimp_pullOutFactor2" (formula "65") (term "0,0,0"))
                                             (rule "add_literals" (formula "65") (term "1,0,0,0"))
                                             (rule "times_zero_1" (formula "65") (term "0,0,0"))
                                             (rule "add_zero_left" (formula "65") (term "0,0"))
                                             (rule "polySimp_sepNegMonomial" (formula "15") (term "1,0"))
                                             (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0"))
                                             (rule "polySimp_elimOne" (formula "15") (term "0,1,0"))
                                             (rule "polySimp_sepPosMonomial" (formula "65"))
                                             (rule "polySimp_mulLiterals" (formula "65") (term "1"))
                                             (rule "polySimp_elimOne" (formula "65") (term "1"))
                                             (rule "polySimp_sepNegMonomial" (formula "15") (term "0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "15") (term "0,0,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
                                             (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "26"))
                                             (rule "polySimp_mulComm0" (formula "26") (term "1"))
                                             (rule "polySimp_rightDist" (formula "26") (term "1"))
                                             (rule "mul_literals" (formula "26") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "26") (term "1,1"))
                                             (rule "polySimp_elimOne" (formula "26") (term "1,1"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0,0"))
                                             (rule "mul_literals" (formula "10") (term "1,0,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0"))
                                             (rule "polySimp_mulLiterals" (formula "11") (term "0,0"))
                                             (rule "polySimp_elimOne" (formula "11") (term "0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "45"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                                             (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                                             (rule "polySimp_elimOne" (formula "7") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0"))
                                             (rule "mul_literals" (formula "15") (term "0,1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0"))
                                             (rule "inEqSimp_subsumption1" (formula "10") (term "1,0,0") (ifseqformula "7"))
                                             (rule "inEqSimp_homoInEq0" (formula "10") (term "0,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
                                             (rule "polySimp_addComm1" (formula "10") (term "0,0,0,1,0,0"))
                                             (rule "add_literals" (formula "10") (term "0,0,0,0,1,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "10") (term "1,1,0,0,1,0,0"))
                                             (rule "times_zero_1" (formula "10") (term "1,0,0,1,0,0"))
                                             (rule "add_zero_right" (formula "10") (term "0,0,1,0,0"))
                                             (rule "qeq_literals" (formula "10") (term "0,1,0,0"))
                                              (builtin "One Step Simplification" (formula "10"))
                                             (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "7"))
                                             (rule "inEqSimp_homoInEq0" (formula "8") (term "0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0"))
                                             (rule "add_literals" (formula "8") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "8") (term "1,0,0"))
                                             (rule "add_literals" (formula "8") (term "0,0"))
                                             (rule "qeq_literals" (formula "8") (term "0"))
                                              (builtin "One Step Simplification" (formula "8"))
                                             (rule "true_left" (formula "8"))
                                             (rule "pullOutSelect" (formula "64") (term "0") (inst "selectSK=arr_3"))
                                             (rule "simplifySelectOfStore" (formula "1"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "castDel" (formula "1") (term "0"))
                                             (rule "applyEqReverse" (formula "65") (term "0") (ifseqformula "1"))
                                              (builtin "One Step Simplification" (formula "65"))
                                             (rule "closeTrue" (formula "65"))
                                          )
                                          (branch "Assume j_0 != b_0"
                                             (rule "allLeftHide" (formula "16") (inst "t=b_0") (userinteraction))
                                             (rule "notLeft" (formula "1"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "eqSymm" (formula "16") (term "0,1,0,1"))
                                             (rule "replace_known_left" (formula "16") (term "1,0") (ifseqformula "1"))
                                              (builtin "One Step Simplification" (formula "16"))
                                             (rule "polySimp_homoEq" (formula "67"))
                                             (rule "polySimp_homoEq" (formula "16") (term "1"))
                                             (rule "polySimp_homoEq" (formula "67") (term "0,1,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "16") (term "1,0,1"))
                                             (rule "polySimp_mulComm0" (formula "67") (term "1,0"))
                                             (rule "polySimp_mulComm0" (formula "67") (term "1,0,0,1,1,1,0"))
                                             (rule "polySimp_rightDist" (formula "16") (term "1,0,1"))
                                             (rule "polySimp_mulAssoc" (formula "16") (term "0,1,0,1"))
                                             (rule "polySimp_mulComm0" (formula "16") (term "0,0,1,0,1"))
                                             (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0,1"))
                                             (rule "polySimp_elimOne" (formula "16") (term "0,1,0,1"))
                                             (rule "polySimp_rightDist" (formula "67") (term "1,0"))
                                             (rule "polySimp_mulAssoc" (formula "67") (term "0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "67") (term "0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "67") (term "0,1,0"))
                                             (rule "polySimp_elimOne" (formula "67") (term "0,1,0"))
                                             (rule "polySimp_rightDist" (formula "67") (term "1,0,0,0,1,1,0"))
                                             (rule "mul_literals" (formula "67") (term "0,1,0,0,0,1,1,0"))
                                             (rule "polySimp_addComm1" (formula "67") (term "0,0,0,1,1,0"))
                                             (rule "polySimp_addAssoc" (formula "16") (term "0,1"))
                                             (rule "polySimp_addAssoc" (formula "67") (term "0"))
                                             (rule "polySimp_addAssoc" (formula "67") (term "0,0,0,0,1,0"))
                                             (rule "add_literals" (formula "67") (term "0,0,0,0,0,1,0"))
                                             (rule "add_zero_left" (formula "67") (term "0,0,0,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "7"))
                                             (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "7") (term "0"))
                                             (rule "inEqSimp_ltToLeq" (formula "12") (term "0"))
                                             (rule "add_zero_right" (formula "12") (term "0,0"))
                                             (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "2"))
                                             (rule "polySimp_rightDist" (formula "2") (term "1,0,0"))
                                             (rule "mul_literals" (formula "2") (term "0,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "16") (term "0"))
                                             (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0"))
                                             (rule "polySimp_addComm1" (formula "16") (term "0,0"))
                                             (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                             (rule "add_literals" (formula "2") (term "0,0,0"))
                                             (rule "add_zero_left" (formula "2") (term "0,0"))
                                             (rule "polySimp_addComm0" (formula "2") (term "0"))
                                             (rule "inEqSimp_homoInEq0" (formula "11") (term "0,0,0"))
                                             (rule "times_zero_2" (formula "11") (term "1,0,0,0,0"))
                                             (rule "add_zero_right" (formula "11") (term "0,0,0,0"))
                                             (rule "inEqSimp_homoInEq1" (formula "27"))
                                             (rule "polySimp_addComm1" (formula "27") (term "0"))
                                             (rule "polySimp_sepNegMonomial" (formula "16") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "16") (term "0,1"))
                                             (rule "polySimp_elimOne" (formula "16") (term "0,1"))
                                             (rule "polySimp_sepPosMonomial" (formula "67") (term "0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "67") (term "1,0,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "67") (term "1,0,0,1,0"))
                                             (rule "replace_known_right" (formula "67") (term "0,0,1,0") (ifseqformula "47"))
                                              (builtin "One Step Simplification" (formula "67"))
                                             (rule "polySimp_sepNegMonomial" (formula "67"))
                                             (rule "polySimp_mulLiterals" (formula "67") (term "0"))
                                             (rule "polySimp_elimOne" (formula "67") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "46"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                                             (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                                             (rule "polySimp_elimOne" (formula "7") (term "0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0"))
                                             (rule "polySimp_mulLiterals" (formula "12") (term "0,0"))
                                             (rule "polySimp_elimOne" (formula "12") (term "0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0"))
                                             (rule "mul_literals" (formula "15") (term "0,1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0"))
                                             (rule "polySimp_mulLiterals" (formula "16") (term "0,0"))
                                             (rule "polySimp_elimOne" (formula "16") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                             (rule "polySimp_elimOne" (formula "2") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0"))
                                             (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "27"))
                                             (rule "polySimp_mulComm0" (formula "27") (term "1"))
                                             (rule "polySimp_rightDist" (formula "27") (term "1"))
                                             (rule "mul_literals" (formula "27") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "27") (term "1,1"))
                                             (rule "polySimp_elimOne" (formula "27") (term "1,1"))
                                             (rule "inEqSimp_strengthen1" (formula "2") (ifseqformula "47"))
                                             (rule "replace_known_left" (formula "16") (term "0") (ifseqformula "2"))
                                              (builtin "One Step Simplification" (formula "16"))
                                             (rule "inEqSimp_contradEq7" (formula "47") (ifseqformula "2"))
                                             (rule "polySimp_mulComm0" (formula "47") (term "1,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "47") (term "0,0"))
                                             (rule "add_literals" (formula "47") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "47") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "47") (term "0,0"))
                                             (rule "leq_literals" (formula "47") (term "0"))
                                              (builtin "One Step Simplification" (formula "47"))
                                             (rule "false_right" (formula "47"))
                                             (rule "inEqSimp_subsumption1" (formula "11") (term "1,0,0") (ifseqformula "7"))
                                             (rule "inEqSimp_homoInEq0" (formula "11") (term "0,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                                             (rule "polySimp_addComm1" (formula "11") (term "0,0,0,1,0,0"))
                                             (rule "add_literals" (formula "11") (term "0,0,0,0,1,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "11") (term "1,1,0,0,1,0,0"))
                                             (rule "times_zero_1" (formula "11") (term "1,0,0,1,0,0"))
                                             (rule "add_zero_right" (formula "11") (term "0,0,1,0,0"))
                                             (rule "qeq_literals" (formula "11") (term "0,1,0,0"))
                                              (builtin "One Step Simplification" (formula "11"))
                                             (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
                                             (rule "inEqSimp_homoInEq0" (formula "9") (term "0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0"))
                                             (rule "add_literals" (formula "9") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "9") (term "1,0,0"))
                                             (rule "add_literals" (formula "9") (term "0,0"))
                                             (rule "qeq_literals" (formula "9") (term "0"))
                                              (builtin "One Step Simplification" (formula "9"))
                                             (rule "true_left" (formula "9"))
                                             (rule "pullOutSelect" (formula "65") (term "1,1") (inst "selectSK=arr_3"))
                                             (rule "simplifySelectOfStore" (formula "1"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "castDel" (formula "1") (term "1,0"))
                                             (rule "polySimp_addComm1" (formula "66") (term "1"))
                                             (rule "polySimp_addComm0" (formula "66") (term "0,1"))
                                             (rule "inEqSimp_contradEq7" (formula "1") (term "0,0") (ifseqformula "3"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0,0"))
                                             (rule "add_literals" (formula "1") (term "1,1,0,0,0,0"))
                                             (rule "times_zero_1" (formula "1") (term "1,0,0,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0,0,0"))
                                             (rule "leq_literals" (formula "1") (term "0,0,0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "applyEq" (formula "16") (term "1,1") (ifseqformula "1"))
                                             (rule "simplifySelectOfAnon" (formula "1"))
                                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "63")) (ifInst ""  (formula "22")))
                                             (rule "polySimp_addComm1" (formula "16") (term "1"))
                                             (rule "polySimp_addComm0" (formula "16") (term "0,1"))
                                             (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
                                             (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "2"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0"))
                                             (rule "pullOutSelect" (formula "66") (term "0") (inst "selectSK=arr_4"))
                                             (rule "simplifySelectOfStore" (formula "1"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "castDel" (formula "1") (term "1,0"))
                                             (rule "applyEq" (formula "17") (term "0") (ifseqformula "1"))
                                             (rule "close" (formula "67") (ifseqformula "17"))
                                          )
                                       )
                                    )
                                    (branch "Case 2"
                                       (rule "allRight" (formula "64") (inst "sk=f_0"))
                                       (rule "allRight" (formula "64") (inst "sk=o_0"))
                                       (rule "orRight" (formula "64"))
                                       (rule "orRight" (formula "64"))
                                       (rule "eqSymm" (formula "66"))
                                       (rule "eqSymm" (formula "64") (term "0,0,0,1"))
                                       (rule "applyEq" (formula "64") (term "1,1,0,1") (ifseqformula "30"))
                                       (rule "pullOutSelect" (formula "66") (term "0") (inst "selectSK=f_0_0"))
                                       (rule "simplifySelectOfStore" (formula "1"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "castDel" (formula "1") (term "1,0"))
                                       (rule "eqSymm" (formula "67"))
                                       (rule "eqSymm" (formula "1") (term "1,0,0"))
                                       (rule "eqSymm" (formula "1") (term "0,0,0"))
                                       (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
                                       (rule "simplifySelectOfAnon" (formula "1"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "67")))
                                       (rule "elementOfArrayRange" (formula "1") (term "0,0,0") (inst "iv=iv"))
                                       (rule "eqSymm" (formula "1") (term "0,0,0,1,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1,0,0,0"))
                                       (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "66"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "commute_and" (formula "1") (term "0,0"))
                                       (rule "ifthenelse_split" (formula "1") (term "0"))
                                       (branch "f_0 = arr(j_0) & o_0 = bucket_starts TRUE"
                                          (rule "andLeft" (formula "1"))
                                          (rule "applyEqReverse" (formula "69") (term "1") (ifseqformula "3"))
                                          (rule "hideAuxiliaryEq" (formula "3"))
                                          (rule "replace_known_left" (formula "66") (term "0") (ifseqformula "2"))
                                           (builtin "One Step Simplification" (formula "66"))
                                          (rule "applyEq" (formula "67") (term "0,0,0") (ifseqformula "2"))
                                          (rule "replace_known_right" (formula "67") (term "0,0") (ifseqformula "63"))
                                           (builtin "One Step Simplification" (formula "67"))
                                          (rule "notRight" (formula "67"))
                                          (rule "applyEq" (formula "68") (term "2,0") (ifseqformula "2"))
                                          (rule "applyEqRigid" (formula "67") (term "1,0,0,0") (ifseqformula "2"))
                                           (builtin "One Step Simplification" (formula "67"))
                                          (rule "applyEq" (formula "68") (term "1,0") (ifseqformula "3"))
                                          (rule "narrowSelectArrayType" (formula "68") (term "0") (ifseqformula "19") (ifseqformula "64"))
                                          (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                          (rule "nnf_ex2all" (formula "66"))
                                          (rule "nnf_notAnd" (formula "1") (term "0"))
                                          (rule "inEqSimp_notLeq" (formula "1") (term "1,0"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,1,0"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0"))
                                          (rule "mul_literals" (formula "1") (term "0,1,1,0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0"))
                                          (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0,1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0"))
                                          (rule "mul_literals" (formula "1") (term "1,1,0,0"))
                                          (rule "commute_or" (formula "1") (term "0,0"))
                                          (rule "commute_or_2" (formula "1") (term "0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "inEqSimp_homoInEq1" (formula "1") (term "1"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,1"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1,1"))
                                          (rule "mul_literals" (formula "1") (term "0,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1,1,1"))
                                          (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "10"))
                                          (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1"))
                                          (rule "mul_literals" (formula "1") (term "0,1,0,0,1"))
                                          (rule "polySimp_addAssoc" (formula "1") (term "0,0,1"))
                                          (rule "polySimp_addComm0" (formula "1") (term "0,0,0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1"))
                                          (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                                          (rule "add_literals" (formula "1") (term "0,0,1"))
                                          (rule "leq_literals" (formula "1") (term "0,1"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "9"))
                                          (rule "qeq_literals" (formula "1") (term "0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                       (branch "f_0 = arr(j_0) & o_0 = bucket_starts FALSE"
                                          (rule "close" (formula "68") (ifseqformula "1"))
                                       )
                                    )
                                 )
                                 (branch "Case 2"
                                    (rule "polySimp_homoEq" (formula "14") (term "0,1,0,1,0"))
                                    (rule "polySimp_homoEq" (formula "14") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "64") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,1,1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "64") (term "0,0"))
                                    (rule "mul_literals" (formula "64") (term "0,0,0"))
                                    (rule "polySimp_rightDist" (formula "14") (term "1,0,1,0"))
                                    (rule "polySimp_mulAssoc" (formula "14") (term "0,1,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "0,0,1,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "14") (term "0,1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,1,1,0,1,0"))
                                    (rule "mul_literals" (formula "14") (term "0,1,0,0,0,1,1,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "14") (term "0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,1,0,1,0"))
                                    (rule "polySimp_addComm0" (formula "14") (term "0,0,0,0,1,0,1,0"))
                                    (rule "precOfInt" (formula "64"))
                                    (rule "inEqSimp_ltToLeq" (formula "5"))
                                    (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "5") (term "0"))
                                    (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "10") (term "0"))
                                    (rule "add_zero_right" (formula "10") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "64") (term "1"))
                                    (rule "polySimp_rightDist" (formula "64") (term "1,0,0,1"))
                                    (rule "polySimp_mulAssoc" (formula "64") (term "0,1,0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "64") (term "0,0,1,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "64") (term "0,1,0,0,1"))
                                    (rule "polySimp_elimOne" (formula "64") (term "0,1,0,0,1"))
                                    (rule "polySimp_addAssoc" (formula "64") (term "0,0,1"))
                                    (rule "polySimp_addAssoc" (formula "64") (term "0,1"))
                                    (rule "polySimp_addComm1" (formula "64") (term "0,0,1"))
                                    (rule "polySimp_addAssoc" (formula "64") (term "0,0,0,1"))
                                    (rule "polySimp_addComm1" (formula "64") (term "0,0,0,0,1"))
                                    (rule "add_literals" (formula "64") (term "0,0,0,0,0,1"))
                                    (rule "add_zero_left" (formula "64") (term "0,0,0,0,1"))
                                    (rule "polySimp_pullOutFactor1" (formula "64") (term "0,0,0,1"))
                                    (rule "add_literals" (formula "64") (term "1,0,0,0,1"))
                                    (rule "times_zero_1" (formula "64") (term "0,0,0,1"))
                                    (rule "add_zero_left" (formula "64") (term "0,0,1"))
                                    (rule "inEqSimp_homoInEq0" (formula "9") (term "0,0,0"))
                                    (rule "mul_literals" (formula "9") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "9") (term "0,0,0,0"))
                                    (rule "inEqSimp_homoInEq1" (formula "25"))
                                    (rule "polySimp_addComm1" (formula "25") (term "0"))
                                    (rule "inEqSimp_homoInEq0" (formula "64") (term "0"))
                                    (rule "times_zero_2" (formula "64") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "64") (term "0,0"))
                                    (rule "applyEq" (formula "64") (term "1,0,1") (ifseqformula "30"))
                                    (rule "polySimp_pullOutFactor2" (formula "64") (term "0,1"))
                                    (rule "add_literals" (formula "64") (term "1,0,1"))
                                    (rule "times_zero_1" (formula "64") (term "0,1"))
                                    (rule "leq_literals" (formula "64") (term "1"))
                                     (builtin "One Step Simplification" (formula "64"))
                                    (rule "inEqSimp_geqRight" (formula "64"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "1") (term "0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0,0"))
                                    (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "31"))
                                    (rule "polySimp_sepNegMonomial" (formula "15") (term "0,0,1,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,1,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "15") (term "0,0,0,1,0,1,0"))
                                    (rule "polySimp_sepNegMonomial" (formula "15") (term "1,0"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0"))
                                    (rule "polySimp_elimOne" (formula "15") (term "0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "45"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                                    (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                    (rule "polySimp_elimOne" (formula "6") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
                                    (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "11") (term "0,0"))
                                    (rule "polySimp_elimOne" (formula "11") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0"))
                                    (rule "mul_literals" (formula "15") (term "0,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0,0"))
                                    (rule "mul_literals" (formula "10") (term "1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "26"))
                                    (rule "polySimp_mulComm0" (formula "26") (term "1"))
                                    (rule "polySimp_rightDist" (formula "26") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "26") (term "1,1"))
                                    (rule "mul_literals" (formula "26") (term "0,1"))
                                    (rule "polySimp_elimOne" (formula "26") (term "1,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1"))
                                    (rule "inEqSimp_subsumption1" (formula "10") (term "1,0,0") (ifseqformula "6"))
                                    (rule "inEqSimp_homoInEq0" (formula "10") (term "0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "10") (term "0,0,0,1,0,0"))
                                    (rule "add_literals" (formula "10") (term "0,0,0,0,1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "10") (term "1,1,0,0,1,0,0"))
                                    (rule "times_zero_1" (formula "10") (term "1,0,0,1,0,0"))
                                    (rule "add_zero_right" (formula "10") (term "0,0,1,0,0"))
                                    (rule "qeq_literals" (formula "10") (term "0,1,0,0"))
                                     (builtin "One Step Simplification" (formula "10"))
                                    (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "1"))
                                    (rule "andLeft" (formula "6"))
                                    (rule "inEqSimp_homoInEq1" (formula "6"))
                                    (rule "polySimp_pullOutFactor1b" (formula "6") (term "0"))
                                    (rule "add_literals" (formula "6") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "6") (term "1,0"))
                                    (rule "add_zero_right" (formula "6") (term "0"))
                                    (rule "leq_literals" (formula "6"))
                                    (rule "closeFalse" (formula "6"))
                                 )
                              )
                           )
                        )
                        (branch "Null Reference (_bucket_starts = null)"
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "60")))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "Index Out of Bounds (_bucket_starts != null, but j Out of Bounds!)"
                           (rule "false_right" (formula "63"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "60")))
                           (rule "polySimp_homoEq" (formula "15") (term "1,0"))
                           (rule "polySimp_homoEq" (formula "15") (term "0,1,0,1,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,1,1,0,1,0"))
                           (rule "polySimp_rightDist" (formula "15") (term "1,0,1,0"))
                           (rule "polySimp_mulAssoc" (formula "15") (term "0,1,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "0,0,1,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,1,0"))
                           (rule "polySimp_elimOne" (formula "15") (term "0,1,0,1,0"))
                           (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,1,1,0,1,0"))
                           (rule "mul_literals" (formula "15") (term "0,1,0,0,0,1,1,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,1,1,0,1,0"))
                           (rule "polySimp_addComm0" (formula "15") (term "0,0,0,0,1,1,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "15") (term "0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "6"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "6") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "11") (term "0"))
                           (rule "add_zero_right" (formula "11") (term "0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "1") (term "0,0,1"))
                           (rule "inEqSimp_homoInEq1" (formula "26"))
                           (rule "polySimp_addComm1" (formula "26") (term "0"))
                           (rule "inEqSimp_homoInEq0" (formula "10") (term "0,0,0"))
                           (rule "times_zero_2" (formula "10") (term "1,0,0,0,0"))
                           (rule "add_zero_right" (formula "10") (term "0,0,0,0"))
                           (rule "polySimp_sepNegMonomial" (formula "15") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0"))
                           (rule "polySimp_elimOne" (formula "15") (term "0,1,0"))
                           (rule "polySimp_sepNegMonomial" (formula "15") (term "0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "15") (term "0,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "15") (term "0,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                           (rule "polySimp_elimOne" (formula "6") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "0,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                           (rule "mul_literals" (formula "1") (term "1,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "26"))
                           (rule "polySimp_mulComm0" (formula "26") (term "1"))
                           (rule "polySimp_rightDist" (formula "26") (term "1"))
                           (rule "mul_literals" (formula "26") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "26") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "26") (term "1,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0,0"))
                           (rule "mul_literals" (formula "10") (term "1,0,0,0"))
                           (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "7"))
                           (rule "qeq_literals" (formula "1") (term "0,1"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "6"))
                           (rule "inEqSimp_homoInEq0" (formula "8") (term "0"))
                           (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0"))
                           (rule "add_literals" (formula "8") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "8") (term "1,0,0"))
                           (rule "add_zero_right" (formula "8") (term "0,0"))
                           (rule "qeq_literals" (formula "8") (term "0"))
                            (builtin "One Step Simplification" (formula "8"))
                           (rule "true_left" (formula "8"))
                           (rule "inEqSimp_subsumption1" (formula "9") (term "1,0,0") (ifseqformula "6"))
                           (rule "inEqSimp_homoInEq0" (formula "9") (term "0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                           (rule "polySimp_addComm1" (formula "9") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "9") (term "0,0,0,0,1,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "9") (term "1,1,0,0,1,0,0"))
                           (rule "times_zero_1" (formula "9") (term "1,0,0,1,0,0"))
                           (rule "add_zero_right" (formula "9") (term "0,0,1,0,0"))
                           (rule "qeq_literals" (formula "9") (term "0,1,0,0"))
                            (builtin "One Step Simplification" (formula "9"))
                           (rule "inEqSimp_exactShadow3" (formula "32") (ifseqformula "33"))
                           (rule "polySimp_mulComm0" (formula "32") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "32"))
                           (rule "polySimp_mulLiterals" (formula "32") (term "1"))
                           (rule "polySimp_elimOne" (formula "32") (term "1"))
                           (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "25"))
                           (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                           (rule "mul_literals" (formula "6") (term "0,0,0"))
                           (rule "polySimp_addAssoc" (formula "6") (term "0"))
                           (rule "polySimp_addComm1" (formula "6") (term "0,0"))
                           (rule "add_literals" (formula "6") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1"))
                           (rule "polySimp_rightDist" (formula "6") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                           (rule "mul_literals" (formula "6") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "6") (term "1,1"))
                           (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "6"))
                           (rule "andLeft" (formula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "1"))
                           (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "1,1,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0"))
                           (rule "add_zero_right" (formula "1") (term "0"))
                           (rule "leq_literals" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                     (branch "Exceptional Post (len)"
                         (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "37")))
                         (builtin "One Step Simplification" (formula "61"))
                        (rule "andLeft" (formula "41"))
                        (rule "andLeft" (formula "41"))
                        (rule "andLeft" (formula "43"))
                        (rule "notLeft" (formula "41"))
                        (rule "close" (formula "44") (ifseqformula "43"))
                     )
                     (branch "Pre (len)"
                         (builtin "One Step Simplification" (formula "60") (ifInst ""  (formula "5")) (ifInst ""  (formula "37")) (ifInst ""  (formula "21")))
                        (rule "wellFormedAnon" (formula "60") (term "1"))
                        (rule "replace_known_left" (formula "60") (term "0,1") (ifseqformula "16"))
                         (builtin "One Step Simplification" (formula "60") (ifInst ""  (formula "15")))
                        (rule "polySimp_homoEq" (formula "14") (term "1,0"))
                        (rule "polySimp_homoEq" (formula "14") (term "0,1,0,1,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,1,1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,1,1,0,1,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,1,1,1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,1,0"))
                        (rule "polySimp_mulAssoc" (formula "14") (term "0,1,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "0,0,1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,1,1,0,1,0"))
                        (rule "polySimp_addComm0" (formula "14") (term "0,0,0,0,1,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,1,0"))
                        (rule "inEqSimp_leqRight" (formula "60"))
                        (rule "add_zero_right" (formula "1") (term "0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "6"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "6") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "11") (term "0"))
                        (rule "add_zero_right" (formula "11") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "26"))
                        (rule "polySimp_addComm1" (formula "26") (term "0"))
                        (rule "inEqSimp_homoInEq0" (formula "10") (term "0,0,0"))
                        (rule "times_zero_2" (formula "10") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "10") (term "0,0,0,0"))
                        (rule "polySimp_sepNegMonomial" (formula "15") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "0,1,0"))
                        (rule "polySimp_sepNegMonomial" (formula "15") (term "0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "0,0,0,1,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                        (rule "polySimp_elimOne" (formula "6") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "0,0"))
                        (rule "polySimp_elimOne" (formula "11") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "26"))
                        (rule "polySimp_mulComm0" (formula "26") (term "1"))
                        (rule "polySimp_rightDist" (formula "26") (term "1"))
                        (rule "mul_literals" (formula "26") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "26") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "26") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0,0"))
                        (rule "mul_literals" (formula "10") (term "1,0,0,0"))
                        (rule "inEqSimp_subsumption1" (formula "10") (term "1,0,0") (ifseqformula "8"))
                        (rule "inEqSimp_homoInEq0" (formula "10") (term "0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
                        (rule "polySimp_addComm0" (formula "10") (term "0,0,0,1,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "10") (term "1,1,0,0,1,0,0"))
                        (rule "times_zero_1" (formula "10") (term "1,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "10") (term "0,0,1,0,0"))
                        (rule "qeq_literals" (formula "10") (term "0,1,0,0"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "7") (term "0"))
                         (builtin "One Step Simplification" (formula "7"))
                        (rule "closeFalse" (formula "7"))
                     )
                     (branch "Null reference (_buffers = null)"
                         (builtin "One Step Simplification" (formula "60") (ifInst ""  (formula "56")))
                        (rule "closeTrue" (formula "60"))
                     )
                  )
                  (branch "Null Reference (_bucket_starts = null)"
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "58")))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "Index Out of Bounds (_bucket_starts != null, but j Out of Bounds!)"
                     (rule "false_right" (formula "61"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "58")))
                     (rule "polySimp_homoEq" (formula "15") (term "1,0"))
                     (rule "polySimp_homoEq" (formula "15") (term "0,1,0,1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "15") (term "1,0,1,0"))
                     (rule "polySimp_mulAssoc" (formula "15") (term "0,1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "0,0,1,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,1,0"))
                     (rule "polySimp_elimOne" (formula "15") (term "0,1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,1,1,0,1,0"))
                     (rule "mul_literals" (formula "15") (term "0,1,0,0,0,1,1,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "15") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,1,0,1,0"))
                     (rule "polySimp_addComm0" (formula "15") (term "0,0,0,0,1,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "6"))
                     (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "6") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "11") (term "0"))
                     (rule "add_zero_right" (formula "11") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "1") (term "0,0,1"))
                     (rule "inEqSimp_homoInEq1" (formula "26"))
                     (rule "polySimp_addComm1" (formula "26") (term "0"))
                     (rule "inEqSimp_homoInEq0" (formula "10") (term "0,0,0"))
                     (rule "times_zero_2" (formula "10") (term "1,0,0,0,0"))
                     (rule "add_zero_right" (formula "10") (term "0,0,0,0"))
                     (rule "polySimp_sepNegMonomial" (formula "15") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0"))
                     (rule "polySimp_elimOne" (formula "15") (term "0,1,0"))
                     (rule "polySimp_sepNegMonomial" (formula "15") (term "0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "15") (term "0,0,0,1,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                     (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                     (rule "polySimp_elimOne" (formula "6") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "15") (term "0,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "0,0"))
                     (rule "polySimp_elimOne" (formula "11") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                     (rule "mul_literals" (formula "1") (term "1,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "26"))
                     (rule "polySimp_mulComm0" (formula "26") (term "1"))
                     (rule "polySimp_rightDist" (formula "26") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "26") (term "1,1"))
                     (rule "mul_literals" (formula "26") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "26") (term "1,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0,0"))
                     (rule "mul_literals" (formula "10") (term "1,0,0,0"))
                     (rule "inEqSimp_subsumption1" (formula "10") (term "1,0,0") (ifseqformula "8"))
                     (rule "inEqSimp_homoInEq0" (formula "10") (term "0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
                     (rule "polySimp_addComm0" (formula "10") (term "0,0,0,1,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "10") (term "1,1,0,0,1,0,0"))
                     (rule "times_zero_1" (formula "10") (term "1,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "10") (term "0,0,1,0,0"))
                     (rule "qeq_literals" (formula "10") (term "0,1,0,0"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "6"))
                     (rule "inEqSimp_homoInEq0" (formula "8") (term "0"))
                     (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0"))
                     (rule "add_literals" (formula "8") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "8") (term "1,0,0"))
                     (rule "add_zero_right" (formula "8") (term "0,0"))
                     (rule "qeq_literals" (formula "8") (term "0"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "true_left" (formula "8"))
                     (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "7"))
                     (rule "qeq_literals" (formula "1") (term "0,1"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "inEqSimp_exactShadow3" (formula "32") (ifseqformula "33"))
                     (rule "polySimp_mulComm0" (formula "32") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "32"))
                     (rule "polySimp_mulLiterals" (formula "32") (term "1"))
                     (rule "polySimp_elimOne" (formula "32") (term "1"))
                     (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "25"))
                     (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                     (rule "mul_literals" (formula "6") (term "0,0,0"))
                     (rule "polySimp_addAssoc" (formula "6") (term "0"))
                     (rule "polySimp_addComm1" (formula "6") (term "0,0"))
                     (rule "add_literals" (formula "6") (term "0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                     (rule "polySimp_mulComm0" (formula "6") (term "1"))
                     (rule "polySimp_rightDist" (formula "6") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                     (rule "mul_literals" (formula "6") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "6") (term "1,1"))
                     (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "1"))
                     (rule "andLeft" (formula "6"))
                     (rule "inEqSimp_homoInEq1" (formula "6"))
                     (rule "polySimp_pullOutFactor1b" (formula "6") (term "0"))
                     (rule "add_literals" (formula "6") (term "1,1,0"))
                     (rule "times_zero_1" (formula "6") (term "1,0"))
                     (rule "add_zero_right" (formula "6") (term "0"))
                     (rule "leq_literals" (formula "6"))
                     (rule "closeFalse" (formula "6"))
                  )
               )
            )
         )
      )
   )
   (branch "if x_2 false"
       (builtin "One Step Simplification" (formula "51"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "blockBreak" (formula "51") (term "1"))
      (rule "lsBreak" (formula "51") (term "1"))
      (rule "assignment" (formula "51") (term "1"))
       (builtin "One Step Simplification" (formula "51"))
      (rule "eval_order_array_access2" (formula "51") (term "1") (inst "#ar1=x_arr") (inst "#v0=x"))
      (rule "variableDeclarationAssign" (formula "51") (term "1"))
      (rule "variableDeclaration" (formula "51") (term "1") (newnames "x_arr"))
      (rule "assignment" (formula "51") (term "1"))
       (builtin "One Step Simplification" (formula "51"))
      (rule "variableDeclarationAssign" (formula "51") (term "1"))
      (rule "variableDeclaration" (formula "51") (term "1") (newnames "x"))
      (rule "assignment_read_attribute_this_final" (formula "51"))
       (builtin "One Step Simplification" (formula "51"))
      (rule "assignment_to_primitive_array_component" (formula "51"))
      (branch "Normal Execution (x_arr != null)"
          (builtin "One Step Simplification" (formula "51"))
          (builtin "Block Contract (Internal)" (formula "51") (newnames "exc_25,heap_Before_BLOCK,savedHeap_Before_BLOCK,o,f"))
         (branch "Validity"
             (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "17")) (ifInst ""  (formula "13")) (ifInst ""  (formula "51")))
             (builtin "One Step Simplification" (formula "52"))
            (rule "translateJavaAddInt" (formula "52") (term "3,0,1,1,0,0,1"))
            (rule "translateJavaSubInt" (formula "52") (term "1,0,1,0,0,1"))
            (rule "andLeft" (formula "31"))
            (rule "eqSymm" (formula "53") (term "0,0,1,0,1"))
            (rule "eqSymm" (formula "53") (term "0,1,0,0,1"))
            (rule "polySimp_elimSub" (formula "53") (term "0,0,1,0,0,1"))
            (rule "eqSymm" (formula "53") (term "0,1,0,0,1"))
            (rule "polySimp_addComm0" (formula "53") (term "3,0,1,1,0,0,1"))
            (rule "polySimp_addComm0" (formula "53") (term "1,0,1,0,0,1"))
            (rule "dismissNonSelectedField" (formula "32") (term "0"))
             (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "12")))
            (rule "true_left" (formula "32"))
            (rule "variableDeclarationAssign" (formula "52") (term "1"))
            (rule "variableDeclaration" (formula "52") (term "1") (newnames "exc_25_1"))
            (rule "assignment" (formula "52") (term "1"))
             (builtin "One Step Simplification" (formula "52"))
            (rule "emptyStatement" (formula "52") (term "1"))
            (rule "emptyStatement" (formula "52") (term "1"))
            (rule "applyEq" (formula "31") (term "0,2,0") (ifseqformula "25"))
            (rule "applyEq" (formula "52") (term "0,2,0,1,0,0") (ifseqformula "25"))
            (rule "applyEq" (formula "52") (term "0,2,0,1,0,0,0") (ifseqformula "25"))
            (rule "tryEmpty" (formula "52") (term "1"))
            (rule "blockEmptyLabel" (formula "52") (term "1"))
            (rule "blockEmpty" (formula "52") (term "1"))
            (rule "methodCallEmpty" (formula "52") (term "1"))
            (rule "emptyModality" (formula "52") (term "1"))
            (rule "andRight" (formula "52"))
            (branch "Case 1"
               (rule "andRight" (formula "52"))
               (branch "Case 1"
                   (builtin "One Step Simplification" (formula "52"))
                  (rule "closeTrue" (formula "52"))
               )
               (branch "Case 2"
                  (rule "andRight" (formula "52"))
                  (branch "Case 1"
                      (builtin "One Step Simplification" (formula "52"))
                     (rule "Definition_axiom_for_isClassifiedUntil_in_de_wiesler_Classifier" (formula "26") (term "0") (inst "b=b") (userinteraction))
                      (builtin "One Step Simplification" (formula "26") (userinteraction))
                     (rule "andLeft" (formula "26"))
                     (rule "andLeft" (formula "26"))
                     (rule "andLeft" (formula "26"))
                     (rule "andLeft" (formula "26"))
                     (rule "Definition_axiom_for_allElementsCounted_in_de_wiesler_Classifier" (formula "26") (term "0") (inst "b_0=b_0") (inst "b=b") (userinteraction))
                      (builtin "One Step Simplification" (formula "26") (userinteraction))
                     (rule "andLeft" (formula "26") (userinteraction))
                     (rule "bsum_commutative_associative" (formula "6") (term "0") (inst "uSub1=uSub1") (userinteraction))
                     (rule "translateJavaCastInt" (formula "27") (term "0") (userinteraction))
                     (rule "Definition_axiom_for_count_in_de_wiesler_Buffers" (formula "31") (term "0") (inst "b=b") (userinteraction))
                     (rule "eqTermCut" (formula "31") (term "0,0") (inst "s=bsum{int b;}(Z(0(#)),
             j_0,
             de.wiesler.Buffers::bufferLen(heap,
                                           buffers,
                                           b))") (userinteraction))
                     (branch "Assume bsum{int b;}(0, buffers.num_buckets, buffers.bufferLen(b)) = bsum{int b;}(0, j_0, buffers.bufferLen(b))"
                        (rule "eqTermCut" (formula "27") (term "0") (inst "s=bsum{int uSub1;}(Z(0(#)),
                 j_0,
                 de.wiesler.Classifier::countClassOfSliceEq(heap,
                                                            self,
                                                            values,
                                                            begin,
                                                            write,
                                                            uSub1))") (userinteraction))
                        (branch "Assume bsum{int b;}(0, self.num_buckets, bucket_starts[b]) = bsum{int uSub1;}(0, j_0, self.countClassOfSliceEq(values, begin, write, uSub1))"
                           (rule "translateJavaSubInt" (formula "28") (term "1"))
                           (rule "translateJavaCastInt" (formula "33") (term "0"))
                           (rule "translateJavaSubInt" (formula "33") (term "1"))
                           (rule "eqSymm" (formula "27"))
                           (rule "polySimp_homoEq" (formula "9") (term "1,0"))
                           (rule "polySimp_homoEq" (formula "6"))
                           (rule "polySimp_elimSub" (formula "28") (term "1"))
                           (rule "polySimp_elimSub" (formula "33") (term "1"))
                           (rule "polySimp_homoEq" (formula "9") (term "0,1,0,1,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,1,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,1,0"))
                           (rule "polySimp_addComm0" (formula "28") (term "1"))
                           (rule "polySimp_rightDist" (formula "6") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "6") (term "0,1,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,0,1,0"))
                           (rule "polySimp_mulAssoc" (formula "9") (term "0,1,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "0,0,1,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0,1,0"))
                           (rule "polySimp_elimOne" (formula "9") (term "0,1,0,1,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,1,1,0,1,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,0,0,0,1,1,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "6") (term "0"))
                           (rule "inEqSimp_ltRight" (formula "39"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "1") (term "0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,1,0,1,0"))
                           (rule "polySimp_addComm0" (formula "10") (term "0,0,0,0,1,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "6") (term "0"))
                           (rule "add_zero_right" (formula "6") (term "0,0"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
                           (rule "inEqSimp_homoInEq0" (formula "5") (term "0,0,0"))
                           (rule "times_zero_2" (formula "5") (term "1,0,0,0,0"))
                           (rule "add_zero_right" (formula "5") (term "0,0,0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "21"))
                           (rule "polySimp_addComm1" (formula "21") (term "0"))
                           (rule "applyEq" (formula "33") (term "0") (ifseqformula "34"))
                           (rule "eqSymm" (formula "33"))
                           (rule "applyEq" (formula "29") (term "1,0") (ifseqformula "26"))
                           (rule "applyEq" (formula "7") (term "0,1,0") (ifseqformula "28"))
                           (rule "applyEq" (formula "7") (term "1,0,1,0") (ifseqformula "26"))
                           (rule "applyEq" (formula "27") (term "0,1,0,0,1,0,0") (ifseqformula "26"))
                           (rule "applyEq" (formula "32") (term "0,1,0,0,1,0,0") (ifseqformula "26"))
                           (rule "applyEq" (formula "7") (term "0,1,0") (ifseqformula "29"))
                           (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "7") (term "1,0"))
                           (rule "polySimp_mulAssoc" (formula "7") (term "0,1,0"))
                           (rule "polySimp_mulComm0" (formula "7") (term "0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "0,1,0"))
                           (rule "polySimp_elimOne" (formula "7") (term "0,1,0"))
                           (rule "polySimp_addComm1" (formula "7") (term "0"))
                           (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "7") (term "0,0,0"))
                           (rule "applyEq" (formula "28") (term "1,1") (ifseqformula "26"))
                           (rule "applyEq" (formula "7") (term "0,1,0") (ifseqformula "33"))
                           (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "7") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "7") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "7") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "7") (term "0"))
                           (rule "polySimp_addComm1" (formula "7") (term "0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "7") (term "0"))
                           (rule "add_literals" (formula "7") (term "1,1,0"))
                           (rule "times_zero_1" (formula "7") (term "1,0"))
                           (rule "add_zero_right" (formula "7") (term "0"))
                           (rule "polySimp_addComm1" (formula "7") (term "0"))
                           (rule "applyEq" (formula "28") (term "1") (ifseqformula "29"))
                           (rule "polySimp_sepNegMonomial" (formula "10") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0"))
                           (rule "polySimp_elimOne" (formula "10") (term "0,1,0"))
                           (rule "polySimp_sepPosMonomial" (formula "7"))
                           (rule "polySimp_mulComm0" (formula "7") (term "1"))
                           (rule "polySimp_rightDist" (formula "7") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "7") (term "1,1"))
                           (rule "polySimp_mulComm0" (formula "7") (term "0,1"))
                           (rule "close" (formula "59") (ifseqformula "7"))
                        )
                        (branch "Assume bsum{int b;}(0, self.num_buckets, bucket_starts[b]) != bsum{int uSub1;}(0, j_0, self.countClassOfSliceEq(values, begin, write, uSub1))"
                           (rule "notLeft" (formula "27") (userinteraction))
                           (rule "eqTermCut" (formula "38") (term "1,1") (inst "s=int::final(self, de.wiesler.Classifier::$num_buckets)") (userinteraction))
                           (branch "Assume j_0 = self.num_buckets"
                              (rule "applyEq" (formula "39") (term "1,1") (ifseqformula "1") (userinteraction))
                              (rule "equal_bsum1" (formula "39") (userinteraction))
                              (rule "allRight" (formula "39") (inst "sk=b_0") (userinteraction))
                              (rule "allLeftHide" (formula "9") (inst "t=b_0") (userinteraction))
                              (rule "translateJavaCastInt" (formula "33") (term "0"))
                              (rule "translateJavaSubInt" (formula "33") (term "1"))
                              (rule "translateJavaSubInt" (formula "28") (term "1"))
                              (rule "impRight" (formula "39"))
                              (rule "andLeft" (formula "1"))
                              (rule "eqSymm" (formula "3"))
                              (rule "eqSymm" (formula "42"))
                              (rule "polySimp_homoEq" (formula "12") (term "1,0"))
                              (rule "polySimp_homoEq" (formula "9"))
                              (rule "polySimp_elimSub" (formula "35") (term "1"))
                              (rule "polySimp_elimSub" (formula "30") (term "1"))
                              (rule "polySimp_homoEq" (formula "12") (term "0,1,0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "12") (term "1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,1,1,0,1,0"))
                              (rule "polySimp_addComm0" (formula "30") (term "1"))
                              (rule "polySimp_rightDist" (formula "9") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "9") (term "0,1,0"))
                              (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,1,1,0,1,0"))
                              (rule "mul_literals" (formula "12") (term "0,1,0,0,1,1,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "12") (term "1,0,1,0"))
                              (rule "polySimp_mulAssoc" (formula "12") (term "0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "12") (term "0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "12") (term "0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "9") (term "0"))
                              (rule "inEqSimp_ltRight" (formula "43"))
                              (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "1") (term "0"))
                              (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,1,1,0,1,0"))
                              (rule "polySimp_addComm0" (formula "13") (term "0,0,0,0,1,1,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "9") (term "0"))
                              (rule "add_zero_right" (formula "9") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0"))
                              (rule "polySimp_addComm1" (formula "12") (term "0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "13") (term "0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "3"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "3") (term "0"))
                              (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0"))
                              (rule "inEqSimp_commuteGeq" (formula "12") (term "1,0"))
                              (rule "inEqSimp_homoInEq1" (formula "24"))
                              (rule "polySimp_addComm1" (formula "24") (term "0"))
                              (rule "inEqSimp_homoInEq0" (formula "8") (term "0,0,0"))
                              (rule "times_zero_2" (formula "8") (term "1,0,0,0,0"))
                              (rule "add_zero_right" (formula "8") (term "0,0,0,0"))
                              (rule "applyEq" (formula "3") (term "0,1,0") (ifseqformula "29"))
                              (rule "replace_known_left" (formula "12") (term "0,0") (ifseqformula "3"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "applyEq" (formula "43") (term "1,0") (ifseqformula "4"))
                              (rule "applyEq" (formula "36") (term "0") (ifseqformula "35"))
                              (rule "applyEq" (formula "31") (term "1,0") (ifseqformula "29"))
                              (rule "applyEq" (formula "29") (term "0") (ifseqformula "4"))
                              (rule "eqSymm" (formula "29"))
                              (rule "applyEq" (formula "34") (term "0,1,0,0,1,0,0") (ifseqformula "4"))
                              (rule "applyEq" (formula "30") (term "0,1,0,0,1,0,0") (ifseqformula "4"))
                              (rule "applyEq" (formula "43") (term "1,1") (ifseqformula "4"))
                              (rule "applyEq" (formula "24") (term "1,0") (ifseqformula "29"))
                              (rule "polySimp_addComm1" (formula "24") (term "0"))
                              (rule "applyEq" (formula "13") (term "2,1,0,2,0,1,0,1,0") (ifseqformula "29"))
                              (rule "applyEq" (formula "8") (term "0,1,0,0") (ifseqformula "29"))
                              (rule "inEqSimp_homoInEq1" (formula "8") (term "1,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,1,0,0"))
                              (rule "add_literals" (formula "8") (term "1,1,0,1,0,0"))
                              (rule "times_zero_1" (formula "8") (term "1,0,1,0,0"))
                              (rule "add_zero_right" (formula "8") (term "0,1,0,0"))
                              (rule "leq_literals" (formula "8") (term "1,0,0"))
                               (builtin "One Step Simplification" (formula "8"))
                              (rule "applyEq" (formula "12") (term "2,1,0,0,1") (ifseqformula "29"))
                              (rule "applyEq" (formula "35") (term "1,0") (ifseqformula "29"))
                               (builtin "One Step Simplification" (formula "35"))
                              (rule "true_left" (formula "35"))
                              (rule "applyEq" (formula "40") (term "0,2,0") (ifseqformula "29"))
                              (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "29"))
                              (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                              (rule "add_literals" (formula "1") (term "1,0"))
                              (rule "times_zero_1" (formula "1") (term "0"))
                              (rule "qeq_literals" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "applyEq" (formula "39") (term "2,1,0,0") (ifseqformula "28"))
                              (rule "applyEq" (formula "5") (term "0") (ifseqformula "28"))
                              (rule "inEqSimp_homoInEq1" (formula "5"))
                              (rule "polySimp_pullOutFactor1" (formula "5") (term "0"))
                              (rule "add_literals" (formula "5") (term "1,0"))
                              (rule "times_zero_1" (formula "5") (term "0"))
                              (rule "leq_literals" (formula "5"))
                              (rule "true_left" (formula "5"))
                              (rule "applyEq" (formula "5") (term "0,0,0") (ifseqformula "27"))
                              (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "4"))
                               (builtin "One Step Simplification" (formula "5"))
                              (rule "applyEqReverse" (formula "7") (term "0,0,1") (ifseqformula "5"))
                              (rule "hideAuxiliaryEq" (formula "5"))
                              (rule "applyEq" (formula "8") (term "2,1,0,0") (ifseqformula "26"))
                              (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "26"))
                              (rule "applyEq" (formula "28") (term "1,0") (ifseqformula "26"))
                              (rule "applyEq" (formula "10") (term "2,1,0,1,0,0,1,0") (ifseqformula "26"))
                              (rule "applyEq" (formula "7") (term "0,1,0,0") (ifseqformula "32"))
                              (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "7") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "7") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "7") (term "0,0,0"))
                              (rule "applyEq" (formula "39") (term "1") (ifseqformula "28"))
                              (rule "polySimp_sepNegMonomial" (formula "10") (term "0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "10") (term "0,0,0,1,0,1,0"))
                              (rule "polySimp_sepNegMonomial" (formula "7"))
                              (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                              (rule "polySimp_elimOne" (formula "7") (term "0"))
                              (rule "applyEq" (formula "39") (term "0") (ifseqformula "7"))
                              (rule "polySimp_homoEq" (formula "39"))
                              (rule "polySimp_mulComm0" (formula "39") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "39") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "39") (term "0,1,0"))
                              (rule "polySimp_mulAssoc" (formula "39") (term "0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "39") (term "0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "39") (term "0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "39") (term "0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "39") (term "0"))
                              (rule "polySimp_addComm1" (formula "39") (term "0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "39") (term "0"))
                              (rule "add_literals" (formula "39") (term "1,1,0"))
                              (rule "times_zero_1" (formula "39") (term "1,0"))
                              (rule "add_zero_right" (formula "39") (term "0"))
                              (rule "polySimp_addAssoc" (formula "39") (term "0"))
                              (rule "polySimp_sepNegMonomial" (formula "10") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0"))
                              (rule "polySimp_elimOne" (formula "10") (term "0,1,0"))
                              (rule "polySimp_sepNegMonomial" (formula "39"))
                              (rule "polySimp_mulLiterals" (formula "39") (term "0"))
                              (rule "polySimp_elimOne" (formula "39") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0"))
                              (rule "polySimp_mulLiterals" (formula "6") (term "0,0"))
                              (rule "polySimp_elimOne" (formula "6") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0"))
                              (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "31") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "27") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "21"))
                              (rule "polySimp_mulLiterals" (formula "21") (term "0"))
                              (rule "polySimp_elimOne" (formula "21") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "0,0"))
                              (rule "mul_literals" (formula "5") (term "1,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "inEqSimp_contradInEq1" (formula "9") (term "0") (ifseqformula "2"))
                              (rule "inEqSimp_homoInEq1" (formula "9") (term "0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,0"))
                              (rule "add_literals" (formula "9") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "9") (term "1,0,0,0"))
                              (rule "add_zero_right" (formula "9") (term "0,0,0"))
                              (rule "leq_literals" (formula "9") (term "0,0"))
                               (builtin "One Step Simplification" (formula "9"))
                              (rule "true_left" (formula "9"))
                              (rule "inEqSimp_exactShadow3" (formula "32") (ifseqformula "33"))
                              (rule "polySimp_mulComm0" (formula "32") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "32"))
                              (rule "polySimp_mulLiterals" (formula "32") (term "1"))
                              (rule "polySimp_elimOne" (formula "32") (term "1"))
                              (rule "nnf_imp2or" (formula "9") (term "0"))
                              (rule "nnf_imp2or" (formula "30") (term "0"))
                              (rule "nnf_imp2or" (formula "26") (term "0"))
                              (rule "nnf_notAnd" (formula "9") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "9") (term "0,0,0"))
                              (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0,0"))
                              (rule "add_literals" (formula "9") (term "0,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "9") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "9") (term "1,0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "9") (term "1,0,0"))
                              (rule "times_zero_1" (formula "9") (term "1,0,0,1,0,0"))
                              (rule "add_zero_right" (formula "9") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                              (rule "mul_literals" (formula "9") (term "1,1,0,0"))
                              (rule "nnf_notAnd" (formula "30") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "30") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "30") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0"))
                              (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "30") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0"))
                              (rule "mul_literals" (formula "30") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "26") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                              (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                              (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                              (rule "Contract_axiom_for_isClassifiedBlocksRange_in_Classifier" (formula "28") (term "0"))
                              (rule "translateJavaSubInt" (formula "28") (term "0,0,0,0,0,0,0"))
                              (rule "replace_known_right" (formula "28") (term "0,1,1,0,0,0,0") (ifseqformula "56"))
                               (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "36")) (ifInst ""  (formula "11")) (ifInst ""  (formula "12")) (ifInst ""  (formula "57")) (ifInst ""  (formula "36")))
                              (rule "true_left" (formula "28"))
                              (rule "Contract_axiom_for_isClassifiedWith_in_Buffers" (formula "29") (term "0"))
                              (rule "replace_known_left" (formula "29") (term "0,0,0,0,0") (ifseqformula "36"))
                               (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "18")) (ifInst ""  (formula "57")) (ifInst ""  (formula "11")) (ifInst ""  (formula "16")) (ifInst ""  (formula "54")) (ifInst ""  (formula "18")))
                              (rule "true_left" (formula "29"))
                              (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "35"))
                               (builtin "One Step Simplification" (formula "35"))
                              (rule "translateJavaSubInt" (formula "35") (term "0,2,0,1,0"))
                              (rule "translateJavaSubInt" (formula "35") (term "0,2,1,1,0"))
                              (rule "translateJavaMulInt" (formula "35") (term "1,1,1,0,0,0,0"))
                              (rule "andLeft" (formula "35"))
                              (rule "andLeft" (formula "35"))
                              (rule "andLeft" (formula "35"))
                              (rule "andLeft" (formula "35"))
                              (rule "andLeft" (formula "35"))
                              (rule "andLeft" (formula "35"))
                              (rule "andLeft" (formula "36"))
                              (rule "andLeft" (formula "35"))
                              (rule "notLeft" (formula "35"))
                              (rule "notLeft" (formula "35"))
                              (rule "eqSymm" (formula "40"))
                              (rule "eqSymm" (formula "37"))
                              (rule "polySimp_elimSub" (formula "40") (term "0,2,0"))
                              (rule "mul_literals" (formula "40") (term "1,0,2,0"))
                              (rule "eqSymm" (formula "40"))
                              (rule "polySimp_elimSub" (formula "40") (term "0,2,0"))
                              (rule "mul_literals" (formula "40") (term "1,0,2,0"))
                              (rule "eqSymm" (formula "40"))
                              (rule "polySimp_mulComm0" (formula "37") (term "1,0"))
                              (rule "polySimp_addComm0" (formula "40") (term "0,2,0"))
                              (rule "eqSymm" (formula "40"))
                              (rule "polySimp_addComm0" (formula "40") (term "0,2,0"))
                              (rule "eqSymm" (formula "40"))
                              (rule "inEqSimp_commuteLeq" (formula "35"))
                              (rule "applyEq" (formula "35") (term "0") (ifseqformula "3"))
                              (rule "applyEq" (formula "36") (term "0") (ifseqformula "3"))
                              (rule "applyEq" (formula "37") (term "1") (ifseqformula "3"))
                              (rule "inEqSimp_subsumption1" (formula "6") (term "0") (ifseqformula "35"))
                              (rule "leq_literals" (formula "6") (term "0,0"))
                               (builtin "One Step Simplification" (formula "6"))
                              (rule "andLeft" (formula "6"))
                              (rule "inEqSimp_subsumption1" (formula "5") (term "0,0") (ifseqformula "36"))
                              (rule "leq_literals" (formula "5") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "5"))
                              (rule "applyEqReverse" (formula "7") (term "1") (ifseqformula "5"))
                              (rule "hideAuxiliaryEq" (formula "5"))
                              (rule "inEqSimp_commuteGeq" (formula "6"))
                              (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "35"))
                              (rule "leq_literals" (formula "4") (term "0"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "true_left" (formula "4"))
                              (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "35"))
                              (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                              (rule "mul_literals" (formula "2") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "2") (term "0"))
                              (rule "add_literals" (formula "2") (term "0,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "Definition_axiom_for_isClassifiedWith_in_de_wiesler_Buffers" (formula "29") (term "0") (inst "b=b"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "translateJavaAddInt" (formula "29") (term "4,0,1,0"))
                              (rule "translateJavaMulInt" (formula "29") (term "3,0,1,0"))
                              (rule "translateJavaMulInt" (formula "29") (term "0,4,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0"))
                              (rule "applyEq" (formula "29") (term "0,1,0,0,1,0,0") (ifseqformula "25"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "29") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0"))
                              (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "translateJavaMod" (formula "34") (term "0"))
                              (rule "jmod_axiom" (formula "34") (term "0"))
                              (rule "polySimp_mulLiterals" (formula "34") (term "1,0"))
                              (rule "polySimp_sepNegMonomial" (formula "34"))
                              (rule "polySimp_mulLiterals" (formula "34") (term "0"))
                              (rule "newSym_eq" (formula "34") (inst "newSymDef=add(mul(begin, Z(0(#))), mul(write, Z(0(#))))") (inst "l=l_0"))
                              (rule "times_zero_1" (formula "34") (term "1,1,1"))
                              (rule "times_zero_1" (formula "34") (term "0,1,1"))
                              (rule "add_zero_left" (formula "34") (term "1,1"))
                              (rule "add_zero_right" (formula "34") (term "1"))
                              (rule "applyEq" (formula "35") (term "0,0") (ifseqformula "34"))
                              (rule "polySimp_homoEq" (formula "35"))
                              (rule "polySimp_mulLiterals" (formula "35") (term "1,0"))
                              (rule "polySimp_addComm1" (formula "35") (term "0"))
                              (rule "polySimp_addComm0" (formula "35") (term "0,0"))
                              (rule "polySimp_sepPosMonomial" (formula "35"))
                              (rule "polySimp_mulComm0" (formula "35") (term "1"))
                              (rule "polySimp_rightDist" (formula "35") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "35") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "35") (term "1,1"))
                              (rule "polySimp_mulComm0" (formula "35") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "35") (term "0,1"))
                              (rule "applyEq" (formula "32") (term "0") (ifseqformula "35"))
                              (rule "inEqSimp_homoInEq1" (formula "32"))
                              (rule "polySimp_mulComm0" (formula "32") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "32") (term "1,0"))
                              (rule "polySimp_mulAssoc" (formula "32") (term "0,1,0"))
                              (rule "polySimp_mulComm0" (formula "32") (term "0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "32") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "32") (term "0"))
                              (rule "polySimp_addComm0" (formula "32") (term "0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "32") (term "0"))
                              (rule "add_literals" (formula "32") (term "1,1,0"))
                              (rule "times_zero_1" (formula "32") (term "1,0"))
                              (rule "add_zero_right" (formula "32") (term "0"))
                              (rule "applyEq" (formula "34") (term "1,0,0") (ifseqformula "35"))
                              (rule "polySimp_addAssoc" (formula "34") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "34") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor2b" (formula "34") (term "0,0"))
                              (rule "add_literals" (formula "34") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "34") (term "1,0,0"))
                              (rule "add_zero_right" (formula "34") (term "0,0"))
                              (rule "applyEq" (formula "33") (term "0") (ifseqformula "35"))
                              (rule "inEqSimp_commuteLeq" (formula "33"))
                              (rule "applyEq" (formula "28") (term "4,0") (ifseqformula "35"))
                              (rule "applyEq" (formula "7") (term "4,2,0") (ifseqformula "35"))
                              (rule "applyEq" (formula "46") (term "4,1") (ifseqformula "35"))
                              (rule "applyEq" (formula "7") (term "1,1") (ifseqformula "35"))
                              (rule "polySimp_addComm1" (formula "7") (term "1"))
                              (rule "polySimp_addComm0" (formula "7") (term "0,1"))
                              (rule "applyEq" (formula "31") (term "0,1,1") (ifseqformula "35"))
                              (rule "polySimp_mulComm0" (formula "31") (term "1,1"))
                              (rule "polySimp_rightDist" (formula "31") (term "1,1"))
                              (rule "polySimp_mulAssoc" (formula "31") (term "0,1,1"))
                              (rule "polySimp_mulComm0" (formula "31") (term "0,0,1,1"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "0,1,1"))
                              (rule "polySimp_addComm0" (formula "31") (term "1"))
                              (rule "applyEq" (formula "26") (term "4,1,1,0") (ifseqformula "35"))
                              (rule "applyEq" (formula "27") (term "1,1") (ifseqformula "35"))
                              (rule "polySimp_addAssoc" (formula "27") (term "1"))
                              (rule "polySimp_addComm0" (formula "27") (term "0,1"))
                              (rule "polySimp_pullOutFactor2b" (formula "27") (term "1"))
                              (rule "add_literals" (formula "27") (term "1,1,1"))
                              (rule "times_zero_1" (formula "27") (term "1,1"))
                              (rule "add_zero_right" (formula "27") (term "1"))
                              (rule "applyEq" (formula "9") (term "4,1,0,1,1,0") (ifseqformula "35"))
                              (rule "inEqSimp_invertInEq0" (formula "32"))
                              (rule "mul_literals" (formula "32") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "32") (term "0"))
                              (rule "elimGcdGeq_antec" (formula "32") (inst "elimGcd=Z(6(5(2(#))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcdRightDiv=Z(0(#))"))
                              (rule "polySimp_mulLiterals" (formula "32") (term "1,0,1,0"))
                              (rule "add_zero_right" (formula "32") (term "0,0,0,1,0"))
                              (rule "leq_literals" (formula "32") (term "0,0"))
                               (builtin "One Step Simplification" (formula "32"))
                              (rule "mul_literals" (formula "32") (term "0,1,0,0,0,0"))
                              (rule "times_zero_1" (formula "32") (term "1,0,0,0,0"))
                              (rule "add_literals" (formula "32") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "32") (term "0,0"))
                              (rule "add_literals" (formula "32") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "32") (term "1,0,0"))
                              (rule "add_zero_right" (formula "32") (term "0,0"))
                              (rule "leq_literals" (formula "32") (term "0"))
                               (builtin "One Step Simplification" (formula "32"))
                              (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "18") (inst "b=b"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "translateJavaMulInt" (formula "18") (term "1,1,0,0,0"))
                              (rule "mul_literals" (formula "18") (term "1,1,0,0,0"))
                              (rule "andLeft" (formula "18"))
                              (rule "andLeft" (formula "18"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "18"))
                              (rule "andLeft" (formula "18"))
                              (rule "andLeft" (formula "18"))
                              (rule "andLeft" (formula "18"))
                              (rule "notLeft" (formula "20"))
                              (rule "notLeft" (formula "18"))
                              (rule "notLeft" (formula "18"))
                              (rule "eqSymm" (formula "50"))
                              (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "22") (term "0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "20"))
                              (rule "applyEq" (formula "20") (term "0") (ifseqformula "29"))
                              (rule "applyEq" (formula "21") (term "0") (ifseqformula "29"))
                              (rule "applyEq" (formula "21") (term "0,1,0,0,1,0,0") (ifseqformula "28"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
                              (rule "inEqSimp_subsumption1" (formula "20") (ifseqformula "39"))
                              (rule "leq_literals" (formula "20") (term "0"))
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "true_left" (formula "20"))
                              (rule "nnf_imp2or" (formula "31") (term "0"))
                              (rule "nnf_imp2or" (formula "20") (term "0"))
                              (rule "nnf_notAnd" (formula "31") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0"))
                              (rule "mul_literals" (formula "31") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "31") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0"))
                              (rule "mul_literals" (formula "31") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "31") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "31") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0"))
                              (rule "nnf_notAnd" (formula "20") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
                              (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                              (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
                              (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "42") (term "0") (inst "j=j_1") (inst "i=i"))
                               (builtin "One Step Simplification" (formula "42"))
                              (rule "inEqSimp_ltToLeq" (formula "42") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "42") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "42") (term "1,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "42") (term "0,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "42") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "42") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "42") (term "1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "42") (term "0,1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "42") (term "1,1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "42") (term "1,1,1,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "42") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "42") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "42") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "42") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "42") (term "1,1,1,0,0"))
                              (rule "nnf_imp2or" (formula "42") (term "0"))
                              (rule "nnf_notAnd" (formula "42") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "42") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "42") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "42") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "42") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "42") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "42") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "42") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "42") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "42") (term "0,0,0"))
                              (rule "times_zero_1" (formula "42") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "42") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "0,0,0"))
                              (rule "mul_literals" (formula "42") (term "1,0,0,0"))
                              (rule "nnf_imp2or" (formula "42") (term "0,1,0"))
                              (rule "nnf_notAnd" (formula "42") (term "0,0,1,0"))
                              (rule "inEqSimp_notLeq" (formula "42") (term "1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "42") (term "1,0,0,1,0,0,1,0"))
                              (rule "mul_literals" (formula "42") (term "0,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "42") (term "0,0,1,0,0,1,0"))
                              (rule "add_literals" (formula "42") (term "0,0,0,1,0,0,1,0"))
                              (rule "add_zero_left" (formula "42") (term "0,0,1,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "42") (term "1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "42") (term "1,1,0,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "42") (term "0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "42") (term "1,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0,0,0,1,0"))
                              (rule "mul_literals" (formula "42") (term "0,1,0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "42") (term "1,1,0,0,0,1,0"))
                              (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "28") (term "1,1,0") (inst "i=i"))
                              (rule "eqSymm" (formula "28") (term "1,0"))
                              (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "9") (term "1,0,1,1,0") (inst "i=i"))
                              (rule "polySimp_homoEq" (formula "9") (term "1,0"))
                              (rule "polySimp_addComm1" (formula "9") (term "0,0,1,0"))
                              (rule "polySimp_addComm1" (formula "9") (term "0,1,0"))
                              (rule "polySimp_sepPosMonomial" (formula "9") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "9") (term "1,1,0"))
                              (rule "polySimp_rightDist" (formula "9") (term "1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0"))
                              (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0"))
                              (rule "polySimp_rightDist" (formula "9") (term "0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "9") (term "0,0,1,1,0"))
                              (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "33") (term "2,0"))
                              (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "32") (term "0,0,1,0"))
                              (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "8") (term "0") (inst "i=i"))
                               (builtin "One Step Simplification" (formula "8"))
                              (rule "translateJavaSubInt" (formula "8") (term "1,1,0,0"))
                              (rule "translateJavaAddInt" (formula "8") (term "0,2,1,1,0"))
                              (rule "polySimp_elimSub" (formula "8") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "8") (term "1,1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "8") (term "0,2,1,1,0"))
                              (rule "polySimp_addComm0" (formula "8") (term "1,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "8") (term "1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
                              (rule "nnf_imp2or" (formula "8") (term "0"))
                              (rule "nnf_notAnd" (formula "8") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
                              (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
                              (rule "mul_literals" (formula "8") (term "1,0,0,0"))
                              (rule "Definition_axiom_for_isClassifiedBlocksRange_in_de_wiesler_Classifier" (formula "30") (term "0") (inst "block=block"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "translateJavaAddInt" (formula "30") (term "0,1,4,0,1,0"))
                              (rule "translateJavaAddInt" (formula "30") (term "3,0,1,0"))
                              (rule "translateJavaDivInt" (formula "30") (term "1,1,0,0"))
                              (rule "translateJavaMulInt" (formula "30") (term "1,4,0,1,0"))
                              (rule "translateJavaMulInt" (formula "30") (term "1,3,0,1,0"))
                              (rule "translateJavaSubInt" (formula "30") (term "0,1,1,0,0"))
                              (rule "translateJavaAddInt" (formula "30") (term "4,0,1,0"))
                              (rule "polySimp_elimSub" (formula "30") (term "0,1,1,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,1,1,0,0"))
                              (rule "add_literals" (formula "30") (term "1,1,0,1,1,0,0"))
                              (rule "times_zero_1" (formula "30") (term "1,0,1,1,0,0"))
                              (rule "add_zero_right" (formula "30") (term "0,1,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "30") (term "1,4,0,1,0"))
                              (rule "polySimp_addComm0" (formula "30") (term "1,1,4,0,1,0"))
                              (rule "polySimp_rightDist" (formula "30") (term "1,4,0,1,0"))
                              (rule "mul_literals" (formula "30") (term "0,1,4,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "30") (term "4,0,1,0"))
                              (rule "polySimp_addComm0" (formula "30") (term "0,4,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0"))
                              (rule "applyEq" (formula "30") (term "0,1,0,0,1,0,0") (ifseqformula "36"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "30") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0"))
                              (rule "nnf_imp2or" (formula "30") (term "0"))
                              (rule "nnf_notAnd" (formula "30") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "30") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "30") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0"))
                              (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "30") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0"))
                              (rule "mul_literals" (formula "30") (term "1,0,0,0"))
                              (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "7") (term "2,0") (inst "i=i"))
                              (rule "eqSymm" (formula "7") (term "0,2,2,0"))
                              (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "44"))
                               (builtin "One Step Simplification" (formula "44"))
                              (rule "translateJavaSubInt" (formula "44") (term "3,0,1"))
                              (rule "andLeft" (formula "44"))
                              (rule "andLeft" (formula "44"))
                              (rule "andLeft" (formula "44"))
                              (rule "andLeft" (formula "44"))
                              (rule "andLeft" (formula "46"))
                              (rule "andLeft" (formula "44"))
                              (rule "andLeft" (formula "45"))
                              (rule "andLeft" (formula "44"))
                              (rule "notLeft" (formula "44"))
                              (rule "notLeft" (formula "44"))
                              (rule "polySimp_elimSub" (formula "50") (term "3,0"))
                              (rule "mul_literals" (formula "50") (term "1,3,0"))
                              (rule "polySimp_addComm0" (formula "50") (term "3,0"))
                              (rule "inEqSimp_commuteLeq" (formula "49"))
                              (rule "inEqSimp_commuteLeq" (formula "47"))
                              (rule "inEqSimp_commuteLeq" (formula "48"))
                              (rule "inEqSimp_commuteLeq" (formula "44"))
                              (rule "applyEq" (formula "47") (term "0") (ifseqformula "46"))
                              (rule "applyEq" (formula "48") (term "1") (ifseqformula "46"))
                              (rule "applyEq" (formula "49") (term "1") (ifseqformula "46"))
                              (rule "applyEq" (formula "42") (term "1,1,0,0") (ifseqformula "46"))
                              (rule "applyEq" (formula "43") (term "1,0,2,0") (ifseqformula "46"))
                              (rule "eqSymm" (formula "43"))
                              (rule "applyEq" (formula "53") (term "0") (ifseqformula "41"))
                              (rule "applyEq" (formula "42") (term "1,1,0,0,1,0") (ifseqformula "46"))
                              (rule "applyEq" (formula "49") (term "0,0") (ifseqformula "41"))
                              (rule "inEqSimp_commuteGeq" (formula "49"))
                              (rule "applyEq" (formula "50") (term "1,3,0") (ifseqformula "46"))
                              (rule "applyEq" (formula "50") (term "1,0") (ifseqformula "41"))
                              (rule "applyEq" (formula "40") (term "2,0") (ifseqformula "46"))
                              (rule "applyEq" (formula "40") (term "0,1,0") (ifseqformula "46"))
                              (rule "applyEq" (formula "43") (term "1,0,2,0") (ifseqformula "46"))
                              (rule "eqSymm" (formula "43"))
                              (rule "inEqSimp_exactShadow3" (formula "47") (ifseqformula "49"))
                              (rule "mul_literals" (formula "47") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "47"))
                              (rule "mul_literals" (formula "47") (term "1"))
                              (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "58") (term "1") (inst "i=i"))
                              (rule "eqSymm" (formula "58"))
                              (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "31") (term "1,4,0,1,0"))
                              (rule "commute_or" (formula "9") (term "0,0"))
                              (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "28") (term "0,0,2,0,1,0"))
                              (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "9") (term "0,0,2,0,1,0"))
                              (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "9") (term "0,0,0,1,1,0"))
                              (rule "cnf_rightDist" (formula "20") (term "0"))
                              (rule "Definition_axiom_for_isValidBufferLen_in_de_wiesler_Classifier" (formula "32") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "32"))
                              (rule "inEqSimp_ltToLeq" (formula "32") (term "0,1,1,0"))
                              (rule "add_zero_right" (formula "32") (term "0,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "32") (term "0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "32") (term "0,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "32") (term "0,0,1,1,0"))
                              (rule "nnf_imp2or" (formula "32") (term "1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "32") (term "0,1,1,0"))
                              (rule "mul_literals" (formula "32") (term "1,0,0,0,1,1,0"))
                              (rule "add_literals" (formula "32") (term "0,0,0,1,1,0"))
                              (rule "add_zero_left" (formula "32") (term "0,0,1,1,0"))
                              (rule "Contract_axiom_for_isClassifiedBlock_in_Classifier" (formula "30") (term "0,1,0"))
                              (rule "replace_known_right" (formula "30") (term "0,1,0") (ifseqformula "78"))
                               (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "77")) (ifInst ""  (formula "11")) (ifInst ""  (formula "12")))
                              (rule "true_left" (formula "30"))
                              (rule "Definition_axiom_for_isClassifiedBlock_in_de_wiesler_Classifier" (formula "30") (term "0,1,0") (inst "bucket=bucket"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0,1,0"))
                              (rule "applyEq" (formula "30") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "4"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "30") (term "0,1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0,1,0"))
                              (rule "distr_forallAnd" (formula "20"))
                              (rule "andLeft" (formula "20"))
                              (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "7") (term "1,0,2,2,0"))
                              (rule "jdiv_axiom" (formula "37") (term "0"))
                              (rule "polySimp_mulLiterals" (formula "37") (term "0,0,2,1"))
                              (rule "eqSymm" (formula "37"))
                              (rule "applyEqRigid" (formula "37") (term "1") (ifseqformula "38"))
                              (rule "inEqSimp_subsumption6" (formula "37") (term "0,0") (ifseqformula "35"))
                              (rule "times_zero_1" (formula "37") (term "1,1,0,0,0"))
                              (rule "greater_literals" (formula "37") (term "0,0,0,0"))
                               (builtin "One Step Simplification" (formula "37"))
                              (rule "leq_literals" (formula "37") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "37"))
                              (rule "polyDiv_pullOut" (formula "37") (term "0") (inst "polyDivCoeff=l_0"))
                              (rule "equal_literals" (formula "37") (term "0,0"))
                               (builtin "One Step Simplification" (formula "37"))
                              (rule "polySimp_mulLiterals" (formula "37") (term "1,0,0,0"))
                              (rule "polySimp_homoEq" (formula "37"))
                              (rule "polySimp_pullOutFactor0" (formula "37") (term "0,0,0,1,0"))
                              (rule "add_literals" (formula "37") (term "1,0,0,0,1,0"))
                              (rule "times_zero_1" (formula "37") (term "0,0,0,1,0"))
                              (rule "div_literals" (formula "37") (term "0,0,1,0"))
                              (rule "add_zero_left" (formula "37") (term "0,1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "37") (term "0"))
                              (rule "add_literals" (formula "37") (term "1,0"))
                              (rule "times_zero_1" (formula "37") (term "0"))
                               (builtin "One Step Simplification" (formula "37"))
                              (rule "true_left" (formula "37"))
                              (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "52") (term "0"))
                              (rule "replace_known_left" (formula "52") (term "1,0") (ifseqformula "11"))
                               (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "58")) (ifInst ""  (formula "53")))
                              (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "53") (term "0") (inst "j=j_1") (inst "i=i"))
                               (builtin "One Step Simplification" (formula "53"))
                              (rule "inEqSimp_ltToLeq" (formula "53") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "53") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "53") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "53") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "53") (term "0,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "53") (term "1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "53") (term "1,0,0,1,0,0,1,0"))
                              (rule "mul_literals" (formula "53") (term "0,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "53") (term "0,0,1,0,0,1,0"))
                              (rule "add_literals" (formula "53") (term "0,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "53") (term "1,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "53") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "53") (term "0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "53") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "53") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "53") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "53") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "53") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "53") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "53") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "53") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "53") (term "1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "53") (term "1,1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "53") (term "0,1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "53") (term "1,1,1,0,0,1,0"))
                              (rule "nnf_imp2or" (formula "53") (term "0"))
                              (rule "nnf_notAnd" (formula "53") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "53") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "53") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "53") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "53") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "53") (term "0,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "53") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "53") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "53") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "53") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "53") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "53") (term "1,1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "53") (term "0,0,0"))
                              (rule "times_zero_1" (formula "53") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "53") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "53") (term "0,0,0"))
                              (rule "mul_literals" (formula "53") (term "1,0,0,0"))
                              (rule "nnf_imp2or" (formula "53") (term "0,1,0"))
                              (rule "nnf_notAnd" (formula "53") (term "0,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "53") (term "0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "53") (term "0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "53") (term "1,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "53") (term "1,1,0,0,0,1,0"))
                              (rule "mul_literals" (formula "53") (term "0,1,0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "53") (term "1,1,0,0,0,1,0"))
                              (rule "inEqSimp_notLeq" (formula "53") (term "1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "53") (term "1,0,0,1,0,0,1,0"))
                              (rule "mul_literals" (formula "53") (term "0,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "53") (term "0,0,1,0,0,1,0"))
                              (rule "add_literals" (formula "53") (term "0,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "53") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "53") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "53") (term "1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "53") (term "0,1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "53") (term "1,1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "53") (term "1,1,1,0,0,1,0"))
                              (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "60") (term "0,0,2,0"))
                              (rule "Contract_axiom_for_isClassOfSlice_in_Classifier" (formula "32") (term "0,1,0"))
                              (rule "replace_known_right" (formula "32") (term "0,1,0,0,0,0") (ifseqformula "58"))
                               (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "11")) (ifInst ""  (formula "12")) (ifInst ""  (formula "80")))
                              (rule "true_left" (formula "32"))
                              (rule "Definition_axiom_for_isClassOfSlice_in_de_wiesler_Classifier" (formula "32") (term "0,1,0") (inst "i=i"))
                               (builtin "One Step Simplification" (formula "32"))
                              (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0,1,0"))
                              (rule "polySimp_mulAssoc" (formula "32") (term "0,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "32") (term "0,0,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "32") (term "0,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "32") (term "0,1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "32") (term "1,0,1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "32") (term "0,0,1,1,0,0,1,0"))
                              (rule "nnf_imp2or" (formula "32") (term "0,1,0"))
                              (rule "nnf_notAnd" (formula "32") (term "0,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0,1,0"))
                              (rule "polySimp_mulAssoc" (formula "32") (term "1,0,0,0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "32") (term "0,1,0,0,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "32") (term "1,0,0,0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "32") (term "1,0,0,0,1,0"))
                              (rule "mul_literals" (formula "32") (term "0,1,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0,0,1,0"))
                              (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "32") (term "0,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "32") (term "1,0,1,0,0,1,0,0,1,0"))
                              (rule "mul_literals" (formula "32") (term "0,0,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "32") (term "0,0,0,1,0,0,1,0"))
                              (rule "add_literals" (formula "32") (term "0,0,0,0,1,0,0,1,0"))
                              (rule "add_zero_left" (formula "32") (term "0,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "32") (term "0,1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "32") (term "0,1,1,0,0,1,0"))
                              (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "33") (term "0,1,0,1,0"))
                               (builtin "One Step Simplification" (formula "33"))
                              (rule "translateJavaMod" (formula "33") (term "0,1,0,1,0"))
                              (rule "jmod_axiom" (formula "33") (term "0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "33") (term "1,0,1,0,1,0"))
                              (rule "polySimp_sepNegMonomial" (formula "33") (term "1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "33") (term "0,1,0,1,0"))
                              (rule "Contract_axiom_for_isClassOfSlice_in_Classifier" (formula "31") (term "0,1,0,1,0"))
                              (rule "replace_known_right" (formula "31") (term "0,1,0") (ifseqformula "80"))
                               (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "79")) (ifInst ""  (formula "11")) (ifInst ""  (formula "12")))
                              (rule "true_left" (formula "31"))
                              (rule "Definition_axiom_for_isClassOfSlice_in_de_wiesler_Classifier" (formula "31") (term "0,1,0,1,0") (inst "i=i"))
                               (builtin "One Step Simplification" (formula "31"))
                              (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0,1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "31") (term "0,1,0,0,1,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "31") (term "0,0,1,0,0,1,0,0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "31") (term "0,0,0,1,0,0,1,0,1,0"))
                              (rule "add_literals" (formula "31") (term "0,0,0,0,1,0,0,1,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0,1,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "31") (term "0,1,1,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "1,0,1,1,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "31") (term "0,0,1,1,0,0,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "31") (term "1,0,1,1,0,0,1,0,1,0"))
                              (rule "nnf_imp2or" (formula "31") (term "0,1,0,1,0"))
                              (rule "nnf_notAnd" (formula "31") (term "0,0,1,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "31") (term "1,0,0,0,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0,0,0,0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "31") (term "0,1,0,0,0,0,0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "31") (term "0,0,0,0,0,1,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "31") (term "1,0,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "31") (term "0,1,0,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "1,0,1,0,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "31") (term "0,0,1,0,0,0,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "31") (term "1,0,1,0,0,0,1,0,1,0"))
                              (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0,1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "31") (term "0,1,0,0,1,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "31") (term "0,0,1,0,0,1,0,0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "31") (term "0,0,0,1,0,0,1,0,1,0"))
                              (rule "add_literals" (formula "31") (term "0,0,0,0,1,0,0,1,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "31") (term "0,1,1,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "31") (term "0,0,1,1,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "1,0,1,1,0,0,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "31") (term "1,0,1,1,0,0,1,0,1,0"))
                              (rule "commute_or" (formula "21") (term "0"))
                              (rule "commute_or" (formula "43") (term "0,0,1,0"))
                              (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "52") (term "0"))
                              (rule "replace_known_left" (formula "52") (term "1,0") (ifseqformula "11"))
                               (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "59")) (ifInst ""  (formula "53")))
                              (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "53") (term "0") (inst "i=i"))
                               (builtin "One Step Simplification" (formula "53"))
                              (rule "translateJavaAddInt" (formula "53") (term "0,2,1,1,0"))
                              (rule "translateJavaSubInt" (formula "53") (term "1,1,0,0"))
                              (rule "polySimp_elimSub" (formula "53") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "53") (term "1,1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "53") (term "0,2,1,1,0"))
                              (rule "polySimp_addComm1" (formula "53") (term "1,1,0,0"))
                              (rule "add_literals" (formula "53") (term "0,1,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "53") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "53") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "53") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "53") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "53") (term "0,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "53") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "53") (term "1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "53") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "53") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "53") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "53") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "53") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "53") (term "1,1,1,0,0"))
                              (rule "nnf_imp2or" (formula "53") (term "0"))
                              (rule "nnf_notAnd" (formula "53") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "53") (term "0,0,0"))
                              (rule "times_zero_1" (formula "53") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "53") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "53") (term "0,0,0"))
                              (rule "mul_literals" (formula "53") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "53") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "53") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "53") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "53") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "53") (term "0,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "53") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "53") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "53") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "53") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "53") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "53") (term "1,1,1,0,0"))
                              (rule "arrayLengthIsAShort" (formula "23") (term "0"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "arrayLengthNotNegative" (formula "26") (term "0"))
                              (rule "arrayLengthIsAShort" (formula "27") (term "0"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "true_left" (formula "27"))
                              (rule "arrayLengthNotNegative" (formula "22") (term "0"))
                              (rule "arrayLengthNotNegative" (formula "19") (term "0"))
                              (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "19"))
                              (rule "true_left" (formula "19"))
                              (rule "arrayLengthIsAShort" (formula "19") (term "0"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "true_left" (formula "19"))
                              (rule "arrayLengthNotNegative" (formula "18") (term "0"))
                              (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
                              (rule "qeq_literals" (formula "18"))
                              (rule "true_left" (formula "18"))
                              (rule "arrayLengthIsAShort" (formula "18") (term "0"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "true_left" (formula "18"))
                              (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "32") (term "0,1,0,1,0"))
                              (rule "commute_or" (formula "54") (term "0,0,1,0"))
                              (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "31") (term "0,1,0,1,0,1,0"))
                              (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "52") (term "0") (inst "j=j_1") (inst "i=i"))
                               (builtin "One Step Simplification" (formula "52"))
                              (rule "inEqSimp_ltToLeq" (formula "52") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "52") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "52") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "52") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "52") (term "0,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "52") (term "1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "52") (term "1,0,0,1,0,0,1,0"))
                              (rule "mul_literals" (formula "52") (term "0,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "52") (term "0,0,1,0,0,1,0"))
                              (rule "add_literals" (formula "52") (term "0,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "52") (term "1,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "52") (term "0,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "52") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "52") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "52") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "52") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "52") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "52") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "52") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "52") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "52") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "52") (term "1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "52") (term "1,1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "52") (term "0,1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "52") (term "1,1,1,0,0,1,0"))
                              (rule "nnf_imp2or" (formula "52") (term "0"))
                              (rule "nnf_notAnd" (formula "52") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "52") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "52") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "52") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "52") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "52") (term "0,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "52") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "52") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "52") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "52") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "52") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "52") (term "1,1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "52") (term "0,0,0"))
                              (rule "mul_literals" (formula "52") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "52") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "52") (term "0,0,0"))
                              (rule "mul_literals" (formula "52") (term "1,0,0,0"))
                              (rule "nnf_imp2or" (formula "52") (term "0,1,0"))
                              (rule "nnf_notAnd" (formula "52") (term "0,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "52") (term "0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "52") (term "1,0,0,0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "52") (term "0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "52") (term "1,0,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "52") (term "1,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "52") (term "1,1,0,0,0,1,0"))
                              (rule "mul_literals" (formula "52") (term "0,1,0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "52") (term "1,1,0,0,0,1,0"))
                              (rule "inEqSimp_notLeq" (formula "52") (term "1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "52") (term "1,0,0,1,0,0,1,0"))
                              (rule "mul_literals" (formula "52") (term "0,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "52") (term "0,0,1,0,0,1,0"))
                              (rule "add_literals" (formula "52") (term "0,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "52") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "52") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "52") (term "1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "52") (term "0,1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "52") (term "1,1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "52") (term "1,1,1,0,0,1,0"))
                              (rule "allLeft" (formula "29") (inst "t=b_0"))
                              (rule "replace_known_right" (formula "29") (term "1") (ifseqformula "62"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "29") (term "0") (ifseqformula "1"))
                              (rule "qeq_literals" (formula "29") (term "0,0"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "29"))
                              (rule "andLeft" (formula "3"))
                              (rule "inEqSimp_homoInEq1" (formula "3"))
                              (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                              (rule "add_literals" (formula "3") (term "1,1,0"))
                              (rule "times_zero_1" (formula "3") (term "1,0"))
                              (rule "add_zero_right" (formula "3") (term "0"))
                              (rule "leq_literals" (formula "3"))
                              (rule "closeFalse" (formula "3"))
                           )
                           (branch "Assume j_0 != self.num_buckets"
                              (rule "translateJavaSubInt" (formula "28") (term "1"))
                              (rule "translateJavaCastInt" (formula "33") (term "0"))
                              (rule "translateJavaSubInt" (formula "33") (term "1"))
                              (rule "notLeft" (formula "1"))
                              (rule "eqSymm" (formula "39"))
                              (rule "eqSymm" (formula "38"))
                              (rule "polySimp_homoEq" (formula "9") (term "1,0"))
                              (rule "polySimp_homoEq" (formula "6"))
                              (rule "polySimp_elimSub" (formula "27") (term "1"))
                              (rule "polySimp_elimSub" (formula "32") (term "1"))
                              (rule "polySimp_homoEq" (formula "9") (term "0,1,0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "9") (term "1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,1,1,0,1,0"))
                              (rule "polySimp_addComm0" (formula "27") (term "1"))
                              (rule "polySimp_rightDist" (formula "6") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "6") (term "0,1,0"))
                              (rule "polySimp_rightDist" (formula "9") (term "1,0,1,0"))
                              (rule "polySimp_mulAssoc" (formula "9") (term "0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "9") (term "0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "9") (term "0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,1,1,0,1,0"))
                              (rule "mul_literals" (formula "9") (term "0,1,0,0,0,1,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "6") (term "0"))
                              (rule "inEqSimp_ltRight" (formula "40"))
                              (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "1") (term "0"))
                              (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,1,1,0,1,0"))
                              (rule "polySimp_addComm0" (formula "10") (term "0,0,0,0,1,1,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "6") (term "0"))
                              (rule "add_zero_right" (formula "6") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "10") (term "0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
                              (rule "inEqSimp_homoInEq0" (formula "5") (term "0,0,0"))
                              (rule "mul_literals" (formula "5") (term "1,0,0,0,0"))
                              (rule "add_zero_right" (formula "5") (term "0,0,0,0"))
                              (rule "inEqSimp_homoInEq1" (formula "21"))
                              (rule "polySimp_addComm1" (formula "21") (term "0"))
                              (rule "applyEq" (formula "32") (term "0") (ifseqformula "33"))
                              (rule "eqSymm" (formula "32"))
                              (rule "applyEq" (formula "28") (term "1,0") (ifseqformula "26"))
                              (rule "applyEq" (formula "39") (term "0") (ifseqformula "26"))
                              (rule "applyEq" (formula "27") (term "0,1,0,0,1,0,0") (ifseqformula "26"))
                              (rule "applyEq" (formula "40") (term "1,1") (ifseqformula "26"))
                              (rule "applyEq" (formula "31") (term "0,1,0,0,1,0,0") (ifseqformula "26"))
                              (rule "applyEq" (formula "7") (term "0,1,0,0") (ifseqformula "32"))
                              (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "7") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "7") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "7") (term "0,0,0"))
                              (rule "applyEq" (formula "40") (term "1") (ifseqformula "28"))
                              (rule "polySimp_sepNegMonomial" (formula "10") (term "0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "10") (term "0,0,0,1,0,1,0"))
                              (rule "polySimp_sepNegMonomial" (formula "7"))
                              (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                              (rule "polySimp_elimOne" (formula "7") (term "0"))
                              (rule "applyEq" (formula "40") (term "0") (ifseqformula "7"))
                              (rule "polySimp_homoEq" (formula "40"))
                              (rule "polySimp_mulComm0" (formula "40") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "40") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "40") (term "0,1,0"))
                              (rule "polySimp_mulAssoc" (formula "40") (term "0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "40") (term "0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "40") (term "0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "40") (term "0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "40") (term "0"))
                              (rule "polySimp_addComm1" (formula "40") (term "0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "40") (term "0"))
                              (rule "add_literals" (formula "40") (term "1,1,0"))
                              (rule "times_zero_1" (formula "40") (term "1,0"))
                              (rule "add_zero_right" (formula "40") (term "0"))
                              (rule "polySimp_addAssoc" (formula "40") (term "0"))
                              (rule "polySimp_sepNegMonomial" (formula "10") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0"))
                              (rule "polySimp_elimOne" (formula "10") (term "0,1,0"))
                              (rule "polySimp_sepNegMonomial" (formula "40"))
                              (rule "polySimp_mulLiterals" (formula "40") (term "0"))
                              (rule "polySimp_elimOne" (formula "40") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0"))
                              (rule "polySimp_mulLiterals" (formula "6") (term "0,0"))
                              (rule "polySimp_elimOne" (formula "6") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "9") (term "0,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0"))
                              (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "0,0,0"))
                              (rule "mul_literals" (formula "5") (term "1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "21"))
                              (rule "polySimp_mulComm0" (formula "21") (term "1"))
                              (rule "polySimp_rightDist" (formula "21") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "21") (term "1,1"))
                              (rule "mul_literals" (formula "21") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "21") (term "1,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "27") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "31") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0"))
                              (rule "inEqSimp_strengthen1" (formula "3") (ifseqformula "39"))
                              (rule "inEqSimp_contradEq7" (formula "39") (ifseqformula "3"))
                              (rule "polySimp_mulComm0" (formula "39") (term "1,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0"))
                              (rule "add_literals" (formula "39") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "39") (term "1,0,0"))
                              (rule "add_literals" (formula "39") (term "0,0"))
                              (rule "leq_literals" (formula "39") (term "0"))
                               (builtin "One Step Simplification" (formula "39"))
                              (rule "false_right" (formula "39"))
                              (rule "inEqSimp_subsumption1" (formula "5") (term "1,0,0") (ifseqformula "3"))
                              (rule "inEqSimp_homoInEq0" (formula "5") (term "0,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
                              (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0"))
                              (rule "polySimp_addComm1" (formula "5") (term "0,0,0,1,0,0"))
                              (rule "add_literals" (formula "5") (term "0,0,0,0,1,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "5") (term "1,1,0,0,1,0,0"))
                              (rule "times_zero_1" (formula "5") (term "1,0,0,1,0,0"))
                              (rule "add_zero_right" (formula "5") (term "0,0,1,0,0"))
                              (rule "qeq_literals" (formula "5") (term "0,1,0,0"))
                               (builtin "One Step Simplification" (formula "5"))
                              (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "1"))
                              (rule "andLeft" (formula "3"))
                              (rule "inEqSimp_homoInEq1" (formula "3"))
                              (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                              (rule "add_literals" (formula "3") (term "1,1,0"))
                              (rule "times_zero_1" (formula "3") (term "1,0"))
                              (rule "add_zero_right" (formula "3") (term "0"))
                              (rule "leq_literals" (formula "3"))
                              (rule "closeFalse" (formula "3"))
                           )
                        )
                     )
                     (branch "Assume bsum{int b;}(0, buffers.num_buckets, buffers.bufferLen(b)) != bsum{int b;}(0, j_0, buffers.bufferLen(b))"
                        (rule "translateJavaSubInt" (formula "27") (term "1"))
                        (rule "translateJavaCastInt" (formula "32") (term "0"))
                        (rule "translateJavaSubInt" (formula "32") (term "1"))
                        (rule "notLeft" (formula "31"))
                        (rule "polySimp_homoEq" (formula "9") (term "1,0"))
                        (rule "polySimp_homoEq" (formula "6"))
                        (rule "polySimp_elimSub" (formula "27") (term "1"))
                        (rule "polySimp_elimSub" (formula "31") (term "1"))
                        (rule "polySimp_homoEq" (formula "9") (term "0,1,0,1,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,1,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,1,0"))
                        (rule "polySimp_addComm0" (formula "27") (term "1"))
                        (rule "polySimp_rightDist" (formula "6") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "6") (term "0,1,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,1,1,0,1,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,0,0,1,1,1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,1,0"))
                        (rule "polySimp_mulAssoc" (formula "9") (term "0,1,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "0,0,1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,1,1,0,1,0"))
                        (rule "polySimp_addComm0" (formula "9") (term "0,0,0,0,1,1,0,1,0"))
                        (rule "inEqSimp_ltRight" (formula "38"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "6") (term "0"))
                        (rule "add_zero_right" (formula "6") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0"))
                        (rule "inEqSimp_homoInEq0" (formula "5") (term "0,0,0"))
                        (rule "times_zero_2" (formula "5") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "5") (term "0,0,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "21"))
                        (rule "polySimp_addComm1" (formula "21") (term "0"))
                        (rule "applyEq" (formula "28") (term "1,0") (ifseqformula "26"))
                        (rule "applyEq" (formula "38") (term "0") (ifseqformula "32"))
                        (rule "eqSymm" (formula "38"))
                        (rule "applyEq" (formula "31") (term "0,1,0,0,1,0,0") (ifseqformula "26"))
                        (rule "applyEq" (formula "27") (term "0,1,0,0,1,0,0") (ifseqformula "26"))
                        (rule "polySimp_sepNegMonomial" (formula "7"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                        (rule "polySimp_elimOne" (formula "7") (term "0"))
                        (rule "polySimp_sepNegMonomial" (formula "10") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "0,1,0"))
                        (rule "polySimp_sepNegMonomial" (formula "10") (term "0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "0,0,0,1,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "0,0"))
                        (rule "polySimp_elimOne" (formula "6") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "0,0,0"))
                        (rule "mul_literals" (formula "5") (term "1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "21"))
                        (rule "polySimp_mulComm0" (formula "21") (term "1"))
                        (rule "polySimp_rightDist" (formula "21") (term "1"))
                        (rule "mul_literals" (formula "21") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "21") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "21") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "31") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "27") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0"))
                        (rule "inEqSimp_subsumption1" (formula "5") (term "1,0,0") (ifseqformula "3"))
                        (rule "inEqSimp_homoInEq0" (formula "5") (term "0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0"))
                        (rule "polySimp_addComm0" (formula "5") (term "0,0,0,1,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "5") (term "1,1,0,0,1,0,0"))
                        (rule "times_zero_1" (formula "5") (term "1,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "5") (term "0,0,1,0,0"))
                        (rule "qeq_literals" (formula "5") (term "0,1,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "inEqSimp_antiSymm" (formula "3") (ifseqformula "1"))
                        (rule "applyEq" (formula "22") (term "0") (ifseqformula "3"))
                        (rule "inEqSimp_homoInEq0" (formula "22"))
                        (rule "polySimp_addComm1" (formula "22") (term "0"))
                        (rule "applyEq" (formula "32") (term "1,1,1,0,0") (ifseqformula "3"))
                        (rule "applyEq" (formula "29") (term "1,0") (ifseqformula "3"))
                        (rule "applyEq" (formula "10") (term "2,1,0,0,1,0") (ifseqformula "3"))
                        (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
                        (rule "inEqSimp_homoInEq1" (formula "4"))
                        (rule "polySimp_pullOutFactor1" (formula "4") (term "0"))
                        (rule "add_literals" (formula "4") (term "1,0"))
                        (rule "times_zero_1" (formula "4") (term "0"))
                        (rule "leq_literals" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "applyEq" (formula "1") (term "0") (ifseqformula "3"))
                        (rule "inEqSimp_homoInEq0" (formula "1"))
                        (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "1,0"))
                        (rule "times_zero_1" (formula "1") (term "0"))
                        (rule "qeq_literals" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "applyEq" (formula "36") (term "2,1,0,0") (ifseqformula "2"))
                        (rule "applyEq" (formula "9") (term "2,1,0,2,0,1,0") (ifseqformula "2"))
                        (rule "applyEq" (formula "31") (term "1,0") (ifseqformula "2"))
                        (rule "close" (formula "37") (ifseqformula "31"))
                     )
                  )
                  (branch "Case 2"
                      (builtin "One Step Simplification" (formula "52"))
                     (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "52") (term "0") (inst "i=i") (userinteraction))
                     (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "7") (term "0") (inst "i=i") (userinteraction))
                      (builtin "One Step Simplification" (formula "7") (userinteraction))
                      (builtin "One Step Simplification" (formula "52") (userinteraction))
                     (rule "allRight" (formula "52") (inst "sk=i_0") (userinteraction))
                     (rule "allLeftHide" (formula "7") (inst "t=i_0") (userinteraction))
                     (rule "translateJavaAddInt" (formula "52") (term "0,2,1,1"))
                     (rule "translateJavaSubInt" (formula "52") (term "1,1,0"))
                     (rule "translateJavaSubInt" (formula "7") (term "1,1,0"))
                     (rule "translateJavaAddInt" (formula "7") (term "0,2,1,1"))
                     (rule "impRight" (formula "52"))
                     (rule "andLeft" (formula "1"))
                     (rule "replace_known_left" (formula "9") (term "0,0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "polySimp_homoEq" (formula "11") (term "1,0"))
                     (rule "polySimp_elimSub" (formula "2") (term "1"))
                     (rule "mul_literals" (formula "2") (term "1,1"))
                     (rule "polySimp_elimSub" (formula "9") (term "1,0"))
                     (rule "mul_literals" (formula "9") (term "1,1,0"))
                     (rule "polySimp_homoEq" (formula "11") (term "0,1,0,1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,1,1,0,1,0"))
                     (rule "polySimp_addComm0" (formula "54") (term "0,2,1"))
                     (rule "polySimp_addComm0" (formula "9") (term "0,2,1,1"))
                     (rule "polySimp_addComm1" (formula "2") (term "1"))
                     (rule "add_literals" (formula "2") (term "0,1"))
                     (rule "add_zero_left" (formula "2") (term "1"))
                     (rule "polySimp_addComm0" (formula "9") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,0,1,0"))
                     (rule "polySimp_mulAssoc" (formula "11") (term "0,1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "0,0,1,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0,1,0"))
                     (rule "polySimp_elimOne" (formula "11") (term "0,1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,1,1,0,1,0"))
                     (rule "mul_literals" (formula "11") (term "0,1,0,0,0,1,1,0,1,0"))
                     (rule "inEqSimp_ltRight" (formula "34"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "8") (term "0"))
                     (rule "add_zero_right" (formula "8") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,1,0,1,0"))
                     (rule "polySimp_addComm0" (formula "12") (term "0,0,0,0,1,0,1,0"))
                     (rule "inEqSimp_leqRight" (formula "54"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "4"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "4") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "11") (term "0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "11") (term "0,0,0"))
                     (rule "add_literals" (formula "11") (term "0,0,0,0"))
                     (rule "polySimp_addComm1" (formula "11") (term "0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "3"))
                     (rule "inEqSimp_commuteLeq" (formula "11") (term "1"))
                     (rule "inEqSimp_homoInEq0" (formula "8") (term "0,0,0"))
                     (rule "times_zero_2" (formula "8") (term "1,0,0,0,0"))
                     (rule "add_zero_right" (formula "8") (term "0,0,0,0"))
                     (rule "inEqSimp_homoInEq1" (formula "24"))
                     (rule "polySimp_addComm1" (formula "24") (term "0"))
                     (rule "applyEq" (formula "4") (term "0,1,0") (ifseqformula "29"))
                     (rule "polySimp_sepNegMonomial" (formula "13") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0"))
                     (rule "polySimp_elimOne" (formula "13") (term "0,1,0"))
                     (rule "polySimp_sepNegMonomial" (formula "13") (term "0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "13") (term "0,0,0,1,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                     (rule "polySimp_elimOne" (formula "2") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "13") (term "0,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "0,0"))
                     (rule "polySimp_elimOne" (formula "9") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "0,0"))
                     (rule "polySimp_elimOne" (formula "11") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "0,0,0"))
                     (rule "mul_literals" (formula "8") (term "1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "24"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1"))
                     (rule "polySimp_rightDist" (formula "24") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "1,1"))
                     (rule "mul_literals" (formula "24") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "24") (term "1,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                     (rule "polySimp_elimOne" (formula "4") (term "0"))
                     (rule "inEqSimp_subsumption1" (formula "8") (term "1,0,0") (ifseqformula "6"))
                     (rule "inEqSimp_homoInEq0" (formula "8") (term "0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
                     (rule "polySimp_addComm0" (formula "8") (term "0,0,0,1,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "8") (term "1,1,0,0,1,0,0"))
                     (rule "times_zero_1" (formula "8") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "8") (term "0,0,1,0,0"))
                     (rule "qeq_literals" (formula "8") (term "0,1,0,0"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "pullOutSelect" (formula "11") (term "1,1") (inst "selectSK=arr_2"))
                     (rule "simplifySelectOfAnon" (formula "11"))
                      (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "53")) (ifInst ""  (formula "20")))
                     (rule "elementOfArrayRangeConcrete" (formula "11") (term "0,0"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                     (rule "replace_known_left" (formula "11") (term "0,0,0") (ifseqformula "3"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "inEqSimp_subsumption1" (formula "11") (term "0,0") (ifseqformula "4"))
                     (rule "inEqSimp_homoInEq0" (formula "11") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,0,0"))
                     (rule "add_literals" (formula "11") (term "1,1,0,0,0,0"))
                     (rule "times_zero_1" (formula "11") (term "1,0,0,0,0"))
                     (rule "add_zero_right" (formula "11") (term "0,0,0,0"))
                     (rule "qeq_literals" (formula "11") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "applyEqReverse" (formula "12") (term "1,1") (ifseqformula "11"))
                     (rule "hideAuxiliaryEq" (formula "11"))
                     (rule "pullOutSelect" (formula "11") (term "0,1") (inst "selectSK=arr_3"))
                     (rule "simplifySelectOfAnon" (formula "11"))
                      (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "53")) (ifInst ""  (formula "20")))
                     (rule "elementOfArrayRangeConcrete" (formula "11") (term "0,0"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "inEqSimp_commuteGeq" (formula "12") (term "1"))
                     (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,0"))
                     (rule "replace_known_left" (formula "11") (term "1,0,0") (ifseqformula "4"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "inEqSimp_homoInEq0" (formula "11") (term "0,0"))
                     (rule "times_zero_2" (formula "11") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "11") (term "0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0"))
                     (rule "mul_literals" (formula "11") (term "1,0,0"))
                     (rule "inEqSimp_subsumption1" (formula "11") (term "0,0") (ifseqformula "3"))
                     (rule "leq_literals" (formula "11") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "applyEqReverse" (formula "12") (term "1,1") (ifseqformula "11"))
                     (rule "hideAuxiliaryEq" (formula "11"))
                     (rule "inEqSimp_commuteLeq" (formula "11") (term "1"))
                     (rule "pullOutSelect" (formula "1") (term "1,1") (inst "selectSK=arr_4"))
                     (rule "simplifySelectOfStore" (formula "1"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "replaceKnownSelect_taclet1100011_3" (formula "1") (term "2,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet1100011_4" (formula "1") (term "2,0"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "inEqSimp_contradEq7" (formula "1") (term "0,0") (ifseqformula "5"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0,0"))
                     (rule "add_literals" (formula "1") (term "1,1,0,0,0,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0,0,0"))
                     (rule "leq_literals" (formula "1") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "applyEqReverse" (formula "2") (term "1,1") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=arr_5"))
                     (rule "simplifySelectOfStore" (formula "1"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "replaceKnownSelect_taclet1100011_5" (formula "1") (term "2,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet1100011_6" (formula "1") (term "2,0"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "inEqSimp_homoInEq0" (formula "2"))
                     (rule "polySimp_addComm1" (formula "2") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1"))
                     (rule "polySimp_rightDist" (formula "2") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                     (rule "mul_literals" (formula "2") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                     (rule "inEqSimp_antiSymm" (formula "7") (ifseqformula "3"))
                     (rule "applyEq" (formula "1") (term "0,0,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "5") (term "0") (ifseqformula "7"))
                     (rule "applyEq" (formula "37") (term "2,1,0,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "26") (term "0") (ifseqformula "7"))
                     (rule "inEqSimp_homoInEq0" (formula "26"))
                     (rule "polySimp_addComm1" (formula "26") (term "0"))
                     (rule "applyEq" (formula "14") (term "1,1,0,0,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "37") (term "0,2,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "8") (term "0") (ifseqformula "7"))
                     (rule "inEqSimp_homoInEq1" (formula "8"))
                     (rule "polySimp_pullOutFactor1" (formula "8") (term "0"))
                     (rule "add_literals" (formula "8") (term "1,0"))
                     (rule "times_zero_1" (formula "8") (term "0"))
                     (rule "leq_literals" (formula "8"))
                     (rule "true_left" (formula "8"))
                     (rule "applyEq" (formula "14") (term "2,1,0,2,0,1,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "3") (term "0") (ifseqformula "7"))
                     (rule "inEqSimp_homoInEq0" (formula "3"))
                     (rule "polySimp_pullOutFactor1" (formula "3") (term "0"))
                     (rule "add_literals" (formula "3") (term "1,0"))
                     (rule "times_zero_1" (formula "3") (term "0"))
                     (rule "qeq_literals" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "applyEq" (formula "12") (term "2,1,0,0,1,0") (ifseqformula "6"))
                     (rule "applyEq" (formula "7") (term "0,0,0") (ifseqformula "6"))
                     (rule "replace_known_left" (formula "7") (term "0,0") (ifseqformula "5"))
                      (builtin "One Step Simplification" (formula "7"))
                     (rule "applyEqReverse" (formula "9") (term "0,0,1") (ifseqformula "7"))
                     (rule "hideAuxiliaryEq" (formula "7"))
                     (rule "applyEq" (formula "12") (term "2,1,0,1,1,1,0") (ifseqformula "6"))
                     (rule "applyEq" (formula "28") (term "1") (ifseqformula "6"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "23"))
                     (rule "polySimp_mulComm0" (formula "23") (term "1"))
                     (rule "polySimp_rightDist" (formula "23") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "1,1"))
                     (rule "mul_literals" (formula "23") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "23") (term "1,1"))
                     (rule "inEqSimp_exactShadow3" (formula "30") (ifseqformula "31"))
                     (rule "polySimp_mulComm0" (formula "30") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "30"))
                     (rule "polySimp_mulLiterals" (formula "30") (term "1"))
                     (rule "polySimp_elimOne" (formula "30") (term "1"))
                     (rule "inEqSimp_and_contradInEq0" (formula "11") (term "0,0"))
                     (rule "inEqSimp_homoInEq1" (formula "11") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,0,1,0,0"))
                     (rule "mul_literals" (formula "11") (term "0,1,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "11") (term "0,1,0,0"))
                     (rule "polySimp_addComm0" (formula "11") (term "0,0,1,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,1,0,0"))
                     (rule "add_literals" (formula "11") (term "1,1,0,1,0,0"))
                     (rule "times_zero_1" (formula "11") (term "1,0,1,0,0"))
                     (rule "add_zero_right" (formula "11") (term "0,1,0,0"))
                     (rule "leq_literals" (formula "11") (term "1,0,0"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "true_left" (formula "11"))
                     (rule "nnf_imp2or" (formula "11") (term "0"))
                     (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "31") (term "0"))
                      (builtin "One Step Simplification" (formula "31"))
                     (rule "translateJavaMod" (formula "31") (term "0"))
                     (rule "jmod_axiom" (formula "31") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "31") (term "1,0"))
                     (rule "polySimp_sepNegMonomial" (formula "31"))
                     (rule "polySimp_mulLiterals" (formula "31") (term "0"))
                     (rule "newSym_eq" (formula "31") (inst "newSymDef=add(mul(begin, Z(0(#))), mul(write, Z(0(#))))") (inst "l=l_0"))
                     (rule "times_zero_1" (formula "31") (term "0,1,1"))
                     (rule "times_zero_1" (formula "31") (term "1,1,1"))
                     (rule "add_literals" (formula "31") (term "1,1"))
                     (rule "add_zero_right" (formula "31") (term "1"))
                     (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "31"))
                     (rule "polySimp_homoEq" (formula "32"))
                     (rule "polySimp_mulLiterals" (formula "32") (term "1,0"))
                     (rule "polySimp_addComm1" (formula "32") (term "0"))
                     (rule "polySimp_addComm0" (formula "32") (term "0,0"))
                     (rule "polySimp_sepPosMonomial" (formula "32"))
                     (rule "polySimp_mulComm0" (formula "32") (term "1"))
                     (rule "polySimp_rightDist" (formula "32") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "32") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "32") (term "1,1"))
                     (rule "polySimp_mulComm0" (formula "32") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "32") (term "0,1"))
                     (rule "applyEq" (formula "30") (term "0") (ifseqformula "32"))
                     (rule "inEqSimp_commuteLeq" (formula "30"))
                     (rule "applyEq" (formula "29") (term "0") (ifseqformula "32"))
                     (rule "inEqSimp_homoInEq1" (formula "29"))
                     (rule "polySimp_mulComm0" (formula "29") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "29") (term "1,0"))
                     (rule "polySimp_mulAssoc" (formula "29") (term "0,1,0"))
                     (rule "polySimp_mulComm0" (formula "29") (term "0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "29") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "29") (term "0"))
                     (rule "polySimp_addComm0" (formula "29") (term "0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "29") (term "0"))
                     (rule "add_literals" (formula "29") (term "1,1,0"))
                     (rule "times_zero_1" (formula "29") (term "1,0"))
                     (rule "add_zero_right" (formula "29") (term "0"))
                     (rule "applyEq" (formula "28") (term "4,0") (ifseqformula "32"))
                     (rule "applyEq" (formula "9") (term "4,1,2,0") (ifseqformula "32"))
                     (rule "applyEq" (formula "31") (term "1,0,0") (ifseqformula "32"))
                     (rule "polySimp_addAssoc" (formula "31") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "31") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor2b" (formula "31") (term "0,0"))
                     (rule "add_literals" (formula "31") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "31") (term "1,0,0"))
                     (rule "add_zero_right" (formula "31") (term "0,0"))
                     (rule "applyEq" (formula "11") (term "4,1,0,1,1,0") (ifseqformula "32"))
                     (rule "inEqSimp_invertInEq0" (formula "29"))
                     (rule "mul_literals" (formula "29") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                     (rule "elimGcdGeq_antec" (formula "29") (inst "elimGcd=Z(6(5(2(#))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcdRightDiv=Z(0(#))"))
                     (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1,0"))
                     (rule "mul_literals" (formula "29") (term "0,1,0,0,0,0,1,0"))
                     (rule "leq_literals" (formula "29") (term "0,0"))
                      (builtin "One Step Simplification" (formula "29"))
                     (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "29") (term "0,0,0,0"))
                     (rule "add_zero_right" (formula "29") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "29") (term "0,0"))
                     (rule "add_literals" (formula "29") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "29") (term "1,0,0"))
                     (rule "add_zero_right" (formula "29") (term "0,0"))
                     (rule "leq_literals" (formula "29") (term "0"))
                      (builtin "One Step Simplification" (formula "29"))
                     (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "33"))
                      (builtin "One Step Simplification" (formula "33"))
                     (rule "translateJavaMulInt" (formula "33") (term "1,1,1,0,0,0,0"))
                     (rule "translateJavaSubInt" (formula "33") (term "0,2,0,1,0"))
                     (rule "translateJavaSubInt" (formula "33") (term "0,2,1,1,0"))
                     (rule "andLeft" (formula "33"))
                     (rule "andLeft" (formula "33"))
                     (rule "andLeft" (formula "33"))
                     (rule "andLeft" (formula "33"))
                     (rule "andLeft" (formula "33"))
                     (rule "andLeft" (formula "33"))
                     (rule "andLeft" (formula "33"))
                     (rule "andLeft" (formula "35"))
                     (rule "notLeft" (formula "33"))
                     (rule "notLeft" (formula "33"))
                     (rule "eqSymm" (formula "38"))
                     (rule "eqSymm" (formula "35"))
                     (rule "polySimp_elimSub" (formula "38") (term "0,2,1"))
                     (rule "mul_literals" (formula "38") (term "1,0,2,1"))
                     (rule "polySimp_elimSub" (formula "38") (term "0,2,0"))
                     (rule "mul_literals" (formula "38") (term "1,0,2,0"))
                     (rule "polySimp_mulComm0" (formula "35") (term "1,0"))
                     (rule "polySimp_addComm0" (formula "38") (term "0,2,1"))
                     (rule "polySimp_addComm0" (formula "38") (term "0,2,0"))
                     (rule "inEqSimp_commuteLeq" (formula "33"))
                     (rule "applyEq" (formula "33") (term "0") (ifseqformula "27"))
                     (rule "applyEq" (formula "34") (term "0") (ifseqformula "27"))
                     (rule "applyEq" (formula "35") (term "1") (ifseqformula "27"))
                     (rule "inEqSimp_subsumption1" (formula "7") (term "0,0") (ifseqformula "33"))
                     (rule "leq_literals" (formula "7") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "7"))
                     (rule "applyEqReverse" (formula "8") (term "1,1,1") (ifseqformula "7"))
                     (rule "hideAuxiliaryEq" (formula "7"))
                     (rule "inEqSimp_commuteGeq" (formula "7") (term "1,1"))
                     (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "32"))
                     (rule "leq_literals" (formula "5") (term "0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "inEqSimp_subsumption1" (formula "6") (term "0") (ifseqformula "31"))
                     (rule "leq_literals" (formula "6") (term "0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "andLeft" (formula "6"))
                     (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "33"))
                     (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                     (rule "mul_literals" (formula "4") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "4") (term "0"))
                     (rule "add_literals" (formula "4") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                     (rule "polySimp_elimOne" (formula "4") (term "0"))
                     (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "20") (inst "b=b"))
                      (builtin "One Step Simplification" (formula "20"))
                     (rule "translateJavaMulInt" (formula "20") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "20") (term "1,1,0,0,0"))
                     (rule "andLeft" (formula "20"))
                     (rule "andLeft" (formula "20"))
                     (rule "andLeft" (formula "20"))
                     (rule "andLeft" (formula "22"))
                     (rule "andLeft" (formula "20"))
                     (rule "andLeft" (formula "20"))
                     (rule "andLeft" (formula "20"))
                     (rule "notLeft" (formula "22"))
                     (rule "notLeft" (formula "20"))
                     (rule "notLeft" (formula "20"))
                     (rule "eqSymm" (formula "47"))
                     (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "24") (term "0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "22"))
                     (rule "applyEq" (formula "23") (term "0") (ifseqformula "6"))
                     (rule "applyEq" (formula "22") (term "0") (ifseqformula "6"))
                     (rule "applyEq" (formula "23") (term "0,1,0,0,1,0,0") (ifseqformula "6"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                     (rule "inEqSimp_subsumption1" (formula "22") (ifseqformula "36"))
                     (rule "leq_literals" (formula "22") (term "0"))
                      (builtin "One Step Simplification" (formula "22"))
                     (rule "true_left" (formula "22"))
                     (rule "nnf_notAnd" (formula "11") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0"))
                     (rule "times_zero_1" (formula "11") (term "1,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "11") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                     (rule "mul_literals" (formula "11") (term "1,1,0,0"))
                     (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "11") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "11") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0"))
                     (rule "nnf_imp2or" (formula "22") (term "0"))
                     (rule "nnf_notAnd" (formula "22") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
                     (rule "mul_literals" (formula "22") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "22") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                     (rule "mul_literals" (formula "22") (term "1,0,0,0"))
                     (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "39") (term "0") (inst "j=j_1") (inst "i=i"))
                      (builtin "One Step Simplification" (formula "39"))
                     (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "39") (term "1,0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "39") (term "1,1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "39") (term "1,1,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1,0,0,1,0"))
                     (rule "mul_literals" (formula "39") (term "0,1,1,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "39") (term "1,1,1,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "39") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "39") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "39") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "39") (term "1,1,1,0,0"))
                     (rule "nnf_imp2or" (formula "39") (term "0"))
                     (rule "nnf_notAnd" (formula "39") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "39") (term "0,0,0"))
                     (rule "mul_literals" (formula "39") (term "1,0,0,0,0,0"))
                     (rule "add_literals" (formula "39") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "0,0,0"))
                     (rule "mul_literals" (formula "39") (term "1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "39") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "39") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "39") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "39") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "39") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "39") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "39") (term "1,1,0,0"))
                     (rule "nnf_imp2or" (formula "39") (term "0,1,0"))
                     (rule "nnf_notAnd" (formula "39") (term "0,0,1,0"))
                     (rule "inEqSimp_notGeq" (formula "39") (term "0,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "0,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "39") (term "1,0,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,0,0,1,0"))
                     (rule "mul_literals" (formula "39") (term "0,1,0,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "39") (term "1,1,0,0,0,1,0"))
                     (rule "inEqSimp_notLeq" (formula "39") (term "1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "39") (term "1,0,0,1,0,0,1,0"))
                     (rule "mul_literals" (formula "39") (term "0,1,0,0,1,0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "39") (term "0,0,1,0,0,1,0"))
                     (rule "add_literals" (formula "39") (term "0,0,0,1,0,0,1,0"))
                     (rule "add_zero_left" (formula "39") (term "0,0,1,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "1,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "39") (term "1,1,0,0,1,0"))
                     (rule "Contract_axiom_for_countClassOfSliceEq_in_Classifier" (formula "9") (term "1,2,0"))
                     (rule "replace_known_right" (formula "9") (term "0,1,0") (ifseqformula "66"))
                      (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "65")) (ifInst ""  (formula "14")) (ifInst ""  (formula "15")))
                     (rule "true_left" (formula "9"))
                     (rule "Contract_axiom_for_countClassOfSliceEq_in_Classifier" (formula "11") (term "1,0,1,1,0"))
                     (rule "replace_known_left" (formula "11") (term "1,0,0") (ifseqformula "15"))
                      (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "65")) (ifInst ""  (formula "14")) (ifInst ""  (formula "66")))
                     (rule "true_left" (formula "11"))
                     (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "41"))
                      (builtin "One Step Simplification" (formula "41"))
                     (rule "translateJavaSubInt" (formula "41") (term "3,0,1"))
                     (rule "andLeft" (formula "41"))
                     (rule "andLeft" (formula "41"))
                     (rule "andLeft" (formula "41"))
                     (rule "andLeft" (formula "41"))
                     (rule "andLeft" (formula "43"))
                     (rule "andLeft" (formula "41"))
                     (rule "andLeft" (formula "41"))
                     (rule "andLeft" (formula "43"))
                     (rule "notLeft" (formula "41"))
                     (rule "notLeft" (formula "41"))
                     (rule "polySimp_elimSub" (formula "47") (term "3,0"))
                     (rule "mul_literals" (formula "47") (term "1,3,0"))
                     (rule "polySimp_addComm0" (formula "47") (term "3,0"))
                     (rule "inEqSimp_commuteLeq" (formula "46"))
                     (rule "inEqSimp_commuteLeq" (formula "44"))
                     (rule "inEqSimp_commuteLeq" (formula "45"))
                     (rule "inEqSimp_commuteLeq" (formula "41"))
                     (rule "applyEq" (formula "47") (term "1,3,0") (ifseqformula "43"))
                     (rule "applyEq" (formula "46") (term "1") (ifseqformula "43"))
                     (rule "applyEq" (formula "47") (term "1,0") (ifseqformula "38"))
                     (rule "applyEq" (formula "50") (term "0") (ifseqformula "38"))
                     (rule "applyEq" (formula "39") (term "1,1,0,0,1,0") (ifseqformula "43"))
                     (rule "applyEq" (formula "39") (term "1,1,0,0") (ifseqformula "43"))
                     (rule "applyEq" (formula "46") (term "0,0") (ifseqformula "38"))
                     (rule "inEqSimp_commuteGeq" (formula "46"))
                     (rule "applyEq" (formula "40") (term "1,0,2,0") (ifseqformula "43"))
                     (rule "eqSymm" (formula "40"))
                     (rule "applyEq" (formula "37") (term "2,0") (ifseqformula "43"))
                     (rule "applyEq" (formula "37") (term "0,1,0") (ifseqformula "43"))
                     (rule "applyEq" (formula "44") (term "0") (ifseqformula "43"))
                     (rule "applyEq" (formula "45") (term "1") (ifseqformula "43"))
                     (rule "applyEq" (formula "40") (term "1,0,2,0") (ifseqformula "43"))
                     (rule "eqSymm" (formula "40"))
                     (rule "inEqSimp_exactShadow3" (formula "44") (ifseqformula "46"))
                     (rule "mul_literals" (formula "44") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "44"))
                     (rule "mul_literals" (formula "44") (term "1"))
                     (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "9") (term "1,2,0") (inst "i=i"))
                     (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "9") (term "0,2,0"))
                     (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "11") (term "1,0,1,1,0") (inst "i=i"))
                     (rule "polySimp_homoEq" (formula "11") (term "1,0"))
                     (rule "polySimp_addComm1" (formula "11") (term "0,0,1,0"))
                     (rule "polySimp_addComm1" (formula "11") (term "0,1,0"))
                     (rule "polySimp_sepPosMonomial" (formula "11") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,1,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0"))
                     (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "0,1,1,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "0,0,1,1,0"))
                     (rule "Definition_axiom_for_isClassifiedUntil_in_de_wiesler_Classifier" (formula "30") (term "0") (inst "b=b"))
                      (builtin "One Step Simplification" (formula "30"))
                     (rule "translateJavaSubInt" (formula "30") (term "1,1"))
                     (rule "andLeft" (formula "30"))
                     (rule "andLeft" (formula "30"))
                     (rule "andLeft" (formula "30"))
                     (rule "andLeft" (formula "30"))
                     (rule "polySimp_elimSub" (formula "34") (term "1"))
                     (rule "polySimp_mulComm0" (formula "34") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "34") (term "1,1"))
                     (rule "polySimp_mulAssoc" (formula "34") (term "0,1,1"))
                     (rule "polySimp_mulComm0" (formula "34") (term "0,0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "34") (term "0,1,1"))
                     (rule "polySimp_addComm0" (formula "34") (term "1"))
                     (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0"))
                     (rule "applyEq" (formula "33") (term "0,1,0,0,1,0,0") (ifseqformula "29"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "33") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0"))
                     (rule "nnf_imp2or" (formula "33") (term "0"))
                     (rule "nnf_notAnd" (formula "33") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "33") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "33") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0"))
                     (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "33") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0"))
                     (rule "mul_literals" (formula "33") (term "1,0,0,0"))
                     (rule "commute_or" (formula "11") (term "0,0"))
                     (rule "cnf_rightDist" (formula "22") (term "0"))
                     (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "52") (term "0") (inst "j=j_1") (inst "i=i"))
                      (builtin "One Step Simplification" (formula "52"))
                     (rule "inEqSimp_ltToLeq" (formula "52") (term "1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "52") (term "1,0,0,1,0,0,1,0"))
                     (rule "mul_literals" (formula "52") (term "0,1,0,0,1,0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "52") (term "0,0,1,0,0,1,0"))
                     (rule "add_literals" (formula "52") (term "0,0,0,1,0,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "52") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "52") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "52") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "52") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "52") (term "0,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "52") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "52") (term "0,0,0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "52") (term "1,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "52") (term "1,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "52") (term "1,1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "52") (term "1,1,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "52") (term "1,1,1,0,0,1,0"))
                     (rule "mul_literals" (formula "52") (term "0,1,1,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "52") (term "1,1,1,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "52") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "52") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "52") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "52") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "52") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "52") (term "1,1,1,0,0"))
                     (rule "nnf_imp2or" (formula "52") (term "0"))
                     (rule "nnf_notAnd" (formula "52") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "52") (term "0,0,0"))
                     (rule "mul_literals" (formula "52") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "52") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "52") (term "0,0,0"))
                     (rule "mul_literals" (formula "52") (term "1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "52") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "52") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "52") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "52") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "52") (term "0,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "52") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "52") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "52") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "52") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "52") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "52") (term "1,1,1,0,0"))
                     (rule "nnf_imp2or" (formula "52") (term "0,1,0"))
                     (rule "nnf_notAnd" (formula "52") (term "0,0,1,0"))
                     (rule "inEqSimp_notGeq" (formula "52") (term "0,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "52") (term "1,0,0,0,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "52") (term "0,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "52") (term "1,0,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "52") (term "1,0,0,0,1,0"))
                     (rule "mul_literals" (formula "52") (term "0,1,0,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "52") (term "1,1,0,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "52") (term "1,1,0,0,0,1,0"))
                     (rule "inEqSimp_notLeq" (formula "52") (term "1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "52") (term "1,0,0,1,0,0,1,0"))
                     (rule "mul_literals" (formula "52") (term "0,1,0,0,1,0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "52") (term "0,0,1,0,0,1,0"))
                     (rule "add_literals" (formula "52") (term "0,0,0,1,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "52") (term "1,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "52") (term "1,1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "52") (term "1,1,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "52") (term "1,1,1,0,0,1,0"))
                     (rule "mul_literals" (formula "52") (term "0,1,1,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "52") (term "1,1,1,0,0,1,0"))
                     (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "9") (term "0,0,2,1,2,0"))
                     (rule "distr_forallAnd" (formula "22"))
                     (rule "andLeft" (formula "22"))
                     (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "11") (term "0,0,2,0,1,0"))
                     (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "11") (term "0,0,0,1,1,0"))
                     (rule "Definition_axiom_for_count_in_de_wiesler_Buffers" (formula "35") (term "0") (inst "b=b"))
                     (rule "translateJavaCastInt" (formula "35") (term "0"))
                     (rule "applyEq" (formula "35") (term "1,0") (ifseqformula "6"))
                     (rule "Definition_axiom_for_isClassifiedWith_in_de_wiesler_Buffers" (formula "33") (term "0") (inst "b=b"))
                      (builtin "One Step Simplification" (formula "33"))
                     (rule "translateJavaMulInt" (formula "33") (term "0,4,0,1,0"))
                     (rule "translateJavaMulInt" (formula "33") (term "3,0,1,0"))
                     (rule "translateJavaAddInt" (formula "33") (term "4,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0"))
                     (rule "applyEq" (formula "33") (term "0,1,0,0,1,0,0") (ifseqformula "6"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "33") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0"))
                     (rule "nnf_imp2or" (formula "33") (term "0"))
                     (rule "nnf_notAnd" (formula "33") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "33") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "33") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0"))
                     (rule "times_zero_1" (formula "33") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "33") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0"))
                     (rule "mul_literals" (formula "33") (term "1,0,0,0"))
                     (rule "Definition_axiom_for_allElementsCounted_in_de_wiesler_Classifier" (formula "31") (term "0") (inst "b_0=b_0") (inst "b=b"))
                      (builtin "One Step Simplification" (formula "31"))
                     (rule "translateJavaCastInt" (formula "31") (term "0,1"))
                     (rule "translateJavaSubInt" (formula "31") (term "1,1"))
                     (rule "andLeft" (formula "31"))
                     (rule "polySimp_elimSub" (formula "32") (term "1"))
                     (rule "polySimp_pullOutFactor1b" (formula "32") (term "1"))
                     (rule "add_literals" (formula "32") (term "1,1,1"))
                     (rule "times_zero_1" (formula "32") (term "1,1"))
                     (rule "add_zero_right" (formula "32") (term "1"))
                     (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0"))
                     (rule "applyEq" (formula "32") (term "1,0") (ifseqformula "30"))
                     (rule "applyEq" (formula "31") (term "0,1,0,0,1,0,0") (ifseqformula "30"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "31") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0"))
                     (rule "nnf_imp2or" (formula "31") (term "0"))
                     (rule "nnf_notAnd" (formula "31") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0"))
                     (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "31") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0"))
                     (rule "mul_literals" (formula "31") (term "1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "31") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "31") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0"))
                     (rule "Definition_axiom_for_isClassifiedBlocksRange_in_de_wiesler_Classifier" (formula "33") (term "0") (inst "block=block"))
                      (builtin "One Step Simplification" (formula "33"))
                     (rule "translateJavaAddInt" (formula "33") (term "4,0,1,0"))
                     (rule "translateJavaSubInt" (formula "33") (term "0,1,1,0,0"))
                     (rule "translateJavaAddInt" (formula "33") (term "3,0,1,0"))
                     (rule "translateJavaMulInt" (formula "33") (term "1,4,0,1,0"))
                     (rule "translateJavaDivInt" (formula "33") (term "1,1,0,0"))
                     (rule "translateJavaMulInt" (formula "33") (term "1,3,0,1,0"))
                     (rule "translateJavaAddInt" (formula "33") (term "0,1,4,0,1,0"))
                     (rule "polySimp_elimSub" (formula "33") (term "0,1,1,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,1,1,0,0"))
                     (rule "add_literals" (formula "33") (term "1,1,0,1,1,0,0"))
                     (rule "times_zero_1" (formula "33") (term "1,0,1,1,0,0"))
                     (rule "add_zero_right" (formula "33") (term "0,1,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "33") (term "1,4,0,1,0"))
                     (rule "polySimp_addComm0" (formula "33") (term "1,1,4,0,1,0"))
                     (rule "polySimp_rightDist" (formula "33") (term "1,4,0,1,0"))
                     (rule "mul_literals" (formula "33") (term "0,1,4,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "33") (term "4,0,1,0"))
                     (rule "polySimp_addComm0" (formula "33") (term "0,4,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0"))
                     (rule "applyEqRigid" (formula "33") (term "0,1,0,0,1,0,0") (ifseqformula "39"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "33") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0"))
                     (rule "nnf_imp2or" (formula "33") (term "0"))
                     (rule "nnf_notAnd" (formula "33") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "33") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "33") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0"))
                     (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "33") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0"))
                     (rule "mul_literals" (formula "33") (term "1,0,0,0"))
                     (rule "Definition_axiom_for_isValidBufferLen_in_de_wiesler_Classifier" (formula "35") (term "0,1,0"))
                      (builtin "One Step Simplification" (formula "35"))
                     (rule "inEqSimp_ltToLeq" (formula "35") (term "0,1,1,0"))
                     (rule "add_zero_right" (formula "35") (term "0,0,1,1,0"))
                     (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,1,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "35") (term "0,1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "35") (term "0,0,1,1,0"))
                     (rule "polySimp_elimOne" (formula "35") (term "0,0,1,1,0"))
                     (rule "nnf_imp2or" (formula "35") (term "1,1,0"))
                     (rule "inEqSimp_notGeq" (formula "35") (term "0,1,1,0"))
                     (rule "mul_literals" (formula "35") (term "1,0,0,0,1,1,0"))
                     (rule "add_literals" (formula "35") (term "0,0,0,1,1,0"))
                     (rule "add_zero_left" (formula "35") (term "0,0,1,1,0"))
                     (rule "commute_or" (formula "45") (term "0,0,1,0"))
                     (rule "jdiv_axiom" (formula "39") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "39") (term "0,0,2,1"))
                     (rule "eqSymm" (formula "39"))
                     (rule "applyEq" (formula "39") (term "1") (ifseqformula "40"))
                     (rule "inEqSimp_subsumption6" (formula "39") (term "0,0") (ifseqformula "37"))
                     (rule "mul_literals" (formula "39") (term "1,1,0,0,0"))
                     (rule "greater_literals" (formula "39") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "39"))
                     (rule "leq_literals" (formula "39") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "39"))
                     (rule "polyDiv_pullOut" (formula "39") (term "0") (inst "polyDivCoeff=l_0"))
                     (rule "polySimp_mulLiterals" (formula "39") (term "1,0,0,2,0"))
                     (rule "equal_literals" (formula "39") (term "0,0"))
                      (builtin "One Step Simplification" (formula "39"))
                     (rule "polySimp_homoEq" (formula "39"))
                     (rule "polySimp_pullOutFactor0" (formula "39") (term "0,0,0,1,0"))
                     (rule "add_literals" (formula "39") (term "1,0,0,0,1,0"))
                     (rule "times_zero_1" (formula "39") (term "0,0,0,1,0"))
                     (rule "div_literals" (formula "39") (term "0,0,1,0"))
                     (rule "add_zero_left" (formula "39") (term "0,1,0"))
                     (rule "polySimp_pullOutFactor1" (formula "39") (term "0"))
                     (rule "add_literals" (formula "39") (term "1,0"))
                     (rule "times_zero_1" (formula "39") (term "0"))
                      (builtin "One Step Simplification" (formula "39"))
                     (rule "true_left" (formula "39"))
                     (rule "ifthenelse_split" (formula "1") (term "0"))
                     (branch "j_0 = 1 + i_0 TRUE"
                        (rule "applyEqReverse" (formula "3") (term "1,1") (ifseqformula "2"))
                        (rule "hideAuxiliaryEq" (formula "2"))
                        (rule "applyEq" (formula "34") (term "1,1,0,0") (ifseqformula "1"))
                        (rule "applyEqRigid" (formula "22") (term "1,1,0,0") (ifseqformula "1"))
                        (rule "applyEqRigid" (formula "41") (term "0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "41"))
                        (rule "polySimp_mulComm0" (formula "41") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "41") (term "1,0"))
                        (rule "mul_literals" (formula "41") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "41") (term "0"))
                        (rule "add_literals" (formula "41") (term "0,0"))
                        (rule "applyEqRigid" (formula "55") (term "0,2,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "25") (term "1,1") (ifseqformula "1"))
                        (rule "polySimp_addAssoc" (formula "25") (term "1"))
                        (rule "add_literals" (formula "25") (term "0,1"))
                        (rule "applyEq" (formula "32") (term "1,0") (ifseqformula "1"))
                        (rule "bsum_induction_upper_concrete" (formula "32") (term "0"))
                        (rule "polySimp_homoEq" (formula "32"))
                        (rule "polySimp_mulComm0" (formula "32") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "32") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "32") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "32") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "32") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,1,0,0"))
                        (rule "replace_known_left" (formula "32") (term "0,0,1,0,0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "applyEqRigid" (formula "42") (term "0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq0" (formula "42"))
                        (rule "polySimp_mulComm0" (formula "42") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "42") (term "1,0"))
                        (rule "mul_literals" (formula "42") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "42") (term "0"))
                        (rule "add_literals" (formula "42") (term "0,0"))
                        (rule "applyEqRigid" (formula "55") (term "2,1,0,0") (ifseqformula "1"))
                        (rule "applyEqRigid" (formula "10") (term "0,0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "10") (term "0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "10") (term "0,0,0"))
                        (rule "add_literals" (formula "10") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0"))
                        (rule "add_literals" (formula "10") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "10") (term "1,0,0"))
                        (rule "add_zero_right" (formula "10") (term "0,0"))
                        (rule "leq_literals" (formula "10") (term "0"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "true_left" (formula "10"))
                        (rule "applyEq" (formula "10") (term "1,1,0,0") (ifseqformula "1"))
                        (rule "applyEqRigid" (formula "35") (term "1,0") (ifseqformula "1"))
                        (rule "bsum_induction_upper_concrete" (formula "35") (term "0"))
                        (rule "polySimp_homoEq" (formula "35"))
                        (rule "polySimp_mulComm0" (formula "35") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "35") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "35") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "35") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "35") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,1,0,0"))
                        (rule "replace_known_left" (formula "35") (term "0,0,1,0,0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "35"))
                        (rule "applyEqRigid" (formula "22") (term "1,1,1,0") (ifseqformula "1"))
                        (rule "applyEqRigid" (formula "34") (term "1,1,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "30") (term "1,1,0,0") (ifseqformula "1"))
                        (rule "applyEqRigid" (formula "8") (term "1,0,2,0") (ifseqformula "1"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,2,0"))
                        (rule "add_literals" (formula "8") (term "0,0,2,0"))
                        (rule "add_zero_left" (formula "8") (term "0,2,0"))
                        (rule "applyEq" (formula "9") (term "1,0") (ifseqformula "1"))
                        (rule "bsum_induction_upper_concrete" (formula "9") (term "0"))
                        (rule "polySimp_homoEq" (formula "9"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "9") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,1,0,0"))
                        (rule "replace_known_left" (formula "9") (term "0,0,1,0,0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0,0"))
                        (rule "applyEq" (formula "5") (term "0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "5"))
                        (rule "polySimp_pullOutFactor1" (formula "5") (term "0"))
                        (rule "add_literals" (formula "5") (term "1,0"))
                        (rule "times_zero_1" (formula "5") (term "0"))
                        (rule "leq_literals" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "applyEqRigid" (formula "9") (term "2,1,0,2,1,1,1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "28") (term "1") (ifseqformula "1"))
                        (rule "applyEq" (formula "5") (term "1") (ifseqformula "1"))
                        (rule "applyEqRigid" (formula "41") (term "1") (ifseqformula "1"))
                        (rule "applyEq" (formula "9") (term "2,1,0,0,1,0,1,1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "9") (term "1,1,0,1,1,1,0") (ifseqformula "1"))
                        (rule "polySimp_addAssoc" (formula "9") (term "1,0,1,1,1,0"))
                        (rule "add_literals" (formula "9") (term "0,1,0,1,1,1,0"))
                        (rule "add_zero_left" (formula "9") (term "1,0,1,1,1,0"))
                        (rule "polySimp_sepNegMonomial" (formula "30"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                        (rule "polySimp_elimOne" (formula "30") (term "0"))
                        (rule "polySimp_sepNegMonomial" (formula "34"))
                        (rule "polySimp_mulLiterals" (formula "34") (term "0"))
                        (rule "polySimp_elimOne" (formula "34") (term "0"))
                        (rule "polySimp_sepNegMonomial" (formula "8"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                        (rule "polySimp_elimOne" (formula "8") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "39"))
                        (rule "polySimp_mulLiterals" (formula "39") (term "0"))
                        (rule "polySimp_elimOne" (formula "39") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "40"))
                        (rule "polySimp_mulLiterals" (formula "40") (term "0"))
                        (rule "polySimp_elimOne" (formula "40") (term "0"))
                        (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "7"))
                        (rule "andLeft" (formula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "2"))
                        (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                        (rule "add_literals" (formula "2") (term "1,1,0"))
                        (rule "times_zero_1" (formula "2") (term "1,0"))
                        (rule "add_zero_right" (formula "2") (term "0"))
                        (rule "leq_literals" (formula "2"))
                        (rule "closeFalse" (formula "2"))
                     )
                     (branch "j_0 = 1 + i_0 FALSE"
                        (rule "applyEqReverse" (formula "2") (term "1,1") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "1"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                        (rule "mul_literals" (formula "1") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                        (rule "inEqSimp_strengthen1" (formula "4") (ifseqformula "55"))
                        (rule "polySimp_addAssoc" (formula "4") (term "1"))
                        (rule "add_literals" (formula "4") (term "0,1"))
                        (rule "replace_known_left" (formula "9") (term "0") (ifseqformula "4"))
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "inEqSimp_contradEq7" (formula "55") (ifseqformula "4"))
                        (rule "polySimp_rightDist" (formula "55") (term "1,0,0"))
                        (rule "mul_literals" (formula "55") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "55") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "55") (term "0,0,0"))
                        (rule "add_literals" (formula "55") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "55") (term "0,0"))
                        (rule "add_literals" (formula "55") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "55") (term "1,0,0"))
                        (rule "add_literals" (formula "55") (term "0,0"))
                        (rule "leq_literals" (formula "55") (term "0"))
                         (builtin "One Step Simplification" (formula "55"))
                        (rule "false_right" (formula "55"))
                        (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "9"))
                        (rule "andLeft" (formula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "1,1,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0"))
                        (rule "add_zero_right" (formula "1") (term "0"))
                        (rule "leq_literals" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
               )
            )
            (branch "Case 2"
                (builtin "One Step Simplification" (formula "52"))
               (rule "closeTrue" (formula "52"))
            )
         )
         (branch "Precondition"
            (rule "andRight" (formula "51"))
            (branch "Case 1"
               (rule "andRight" (formula "51"))
               (branch "Case 1"
                   (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "17")))
                  (rule "closeTrue" (formula "51"))
               )
               (branch "Case 2"
                   (builtin "One Step Simplification" (formula "51"))
                  (rule "wellFormedStorePrimitiveArray" (formula "51"))
                  (rule "wellFormedAnon" (formula "51"))
                  (rule "replace_known_left" (formula "51") (term "0") (ifseqformula "11"))
                   (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "10")))
                  (rule "closeTrue" (formula "51"))
               )
            )
            (branch "Case 2"
               (rule "andRight" (formula "51"))
               (branch "Case 1"
                  (rule "andRight" (formula "51"))
                  (branch "Case 1"
                      (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "50")))
                     (rule "closeTrue" (formula "51"))
                  )
                  (branch "Case 2"
                      (builtin "One Step Simplification" (formula "51"))
                     (rule "polySimp_homoEq" (formula "9") (term "1,0"))
                     (rule "polySimp_homoEq" (formula "9") (term "0,1,0,1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,1,1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "9") (term "1,0,1,0"))
                     (rule "polySimp_mulAssoc" (formula "9") (term "0,1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "9") (term "0,0,1,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0,1,0"))
                     (rule "polySimp_elimOne" (formula "9") (term "0,1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,1,1,0,1,0"))
                     (rule "mul_literals" (formula "9") (term "0,1,0,0,0,1,1,0,1,0"))
                     (rule "dismissNonSelectedField" (formula "51") (term "0"))
                      (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "12")))
                     (rule "closeTrue" (formula "51"))
                  )
               )
               (branch "Case 2"
                   (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "13")))
                  (rule "closeTrue" (formula "51"))
               )
            )
         )
         (branch "Usage"
             (builtin "One Step Simplification" (formula "52"))
             (builtin "One Step Simplification" (formula "31"))
            (rule "translateJavaAddInt" (formula "31") (term "3,0,1,1,0"))
            (rule "translateJavaSubInt" (formula "31") (term "1,0,1,0"))
            (rule "andLeft" (formula "31"))
            (rule "andLeft" (formula "31"))
            (rule "andLeft" (formula "32"))
            (rule "eqSymm" (formula "32"))
            (rule "replace_known_left" (formula "34") (term "0") (ifseqformula "31"))
             (builtin "One Step Simplification" (formula "34"))
            (rule "true_left" (formula "34"))
            (rule "polySimp_elimSub" (formula "32") (term "0"))
            (rule "eqSymm" (formula "32"))
            (rule "polySimp_addComm0" (formula "33") (term "3,0"))
            (rule "polySimp_addComm0" (formula "32") (term "1"))
            (rule "applyEq" (formula "9") (term "1,1,0,1,0") (ifseqformula "32"))
            (rule "applyEq" (formula "54") (term "0,1,1,0,1,0,0,0") (ifseqformula "32"))
            (rule "applyEq" (formula "54") (term "3,0,1,0") (ifseqformula "32"))
            (rule "applyEq" (formula "33") (term "0,2,0,0") (ifseqformula "25"))
            (rule "applyEq" (formula "54") (term "0,2,0,1,0") (ifseqformula "25"))
            (rule "applyEq" (formula "5") (term "0,1,1") (ifseqformula "32"))
            (rule "applyEq" (formula "33") (term "1,3,0") (ifseqformula "25"))
            (rule "applyEq" (formula "33") (term "3,0,0") (ifseqformula "32"))
            (rule "applyEq" (formula "6") (term "1") (ifseqformula "32"))
            (rule "elim_double_block_2" (formula "54") (term "1"))
            (rule "ifUnfold" (formula "54") (term "1") (inst "#boolv=x"))
            (rule "variableDeclaration" (formula "54") (term "1") (newnames "x_5"))
            (rule "inequality_comparison_simple" (formula "54") (term "1"))
             (builtin "One Step Simplification" (formula "54"))
            (rule "replace_known_left" (formula "54") (term "0,0,1,0") (ifseqformula "31"))
             (builtin "One Step Simplification" (formula "54"))
            (rule "onlyCreatedObjectsAreReferencedFinal" (formula "43") (term "0,0") (ifseqformula "11") (ifseqformula "12"))
            (rule "onlyCreatedObjectsAreReferencedFinal" (formula "49") (term "1") (ifseqformula "12") (ifseqformula "17"))
            (rule "onlyCreatedObjectsAreReferencedFinal" (formula "46") (term "1") (ifseqformula "13") (ifseqformula "18"))
            (rule "onlyCreatedObjectsAreReferencedFinal" (formula "52") (term "1") (ifseqformula "14") (ifseqformula "15"))
            (rule "ifSplit" (formula "58"))
            (branch "if x_5 true"
                (builtin "One Step Simplification" (formula "59"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "if x_5 false"
                (builtin "One Step Simplification" (formula "59"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "blockEmpty" (formula "58") (term "1"))
               (rule "emptyStatement" (formula "58") (term "1"))
               (rule "methodCallEmpty" (formula "58") (term "1"))
               (rule "tryEmpty" (formula "58") (term "1"))
               (rule "emptyModality" (formula "58") (term "1"))
               (rule "andRight" (formula "58"))
               (branch "Case 1"
                  (rule "impRight" (formula "58"))
                  (rule "andRight" (formula "59"))
                  (branch "Case 1"
                     (rule "andRight" (formula "59"))
                     (branch "Case 1"
                        (rule "andRight" (formula "59"))
                        (branch "Case 1"
                            (builtin "One Step Simplification" (formula "1"))
                            (builtin "One Step Simplification" (formula "59") (userinteraction))
                           (rule "Definition_axiom_for_isValidBucketStarts_in_de_wiesler_Functions" (formula "59") (term "0,0") (userinteraction))
                            (builtin "One Step Simplification" (formula "59") (userinteraction))
                           (rule "andRight" (formula "59"))
                           (branch "Case 1"
                              (rule "andRight" (formula "59"))
                              (branch "Case 1"
                                 (rule "andRight" (formula "59"))
                                 (branch "Case 1"
                                    (rule "andRight" (formula "59"))
                                    (branch "Case 1"
                                       (rule "true_left" (formula "1"))
                                       (rule "polySimp_homoEq" (formula "13") (term "1,0"))
                                       (rule "polySimp_homoEq" (formula "13") (term "0,1,0,1,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,1,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "13") (term "1,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,1,1,0,1,0"))
                                       (rule "mul_literals" (formula "13") (term "0,1,0,0,1,1,1,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "13") (term "1,0,1,0"))
                                       (rule "polySimp_mulAssoc" (formula "13") (term "0,1,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "13") (term "0,0,1,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "13") (term "0,1,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,1,1,0,1,0"))
                                       (rule "polySimp_addComm0" (formula "13") (term "0,0,0,0,1,1,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "13") (term "0,1,0"))
                                       (rule "inEqSimp_ltRight" (formula "38"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                       (rule "polySimp_addComm0" (formula "1") (term "0"))
                                       (rule "inEqSimp_leqRight" (formula "58"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "11") (term "0"))
                                       (rule "add_zero_right" (formula "11") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                                       (rule "inEqSimp_homoInEq1" (formula "26"))
                                       (rule "polySimp_addComm1" (formula "26") (term "0"))
                                       (rule "inEqSimp_homoInEq0" (formula "10") (term "0,0,0"))
                                       (rule "times_zero_2" (formula "10") (term "1,0,0,0,0"))
                                       (rule "add_zero_right" (formula "10") (term "0,0,0,0"))
                                       (rule "inEqSimp_homoInEq1" (formula "11") (term "1,1"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "1,0,1,1"))
                                       (rule "polySimp_rightDist" (formula "11") (term "1,0,1,1"))
                                       (rule "polySimp_mulAssoc" (formula "11") (term "0,1,0,1,1"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "0,0,1,0,1,1"))
                                       (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0,1,1"))
                                       (rule "polySimp_elimOne" (formula "11") (term "0,1,0,1,1"))
                                       (rule "polySimp_addAssoc" (formula "11") (term "0,1,1"))
                                       (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "31"))
                                       (rule "polySimp_sepNegMonomial" (formula "15") (term "0,0,1,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,1,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "15") (term "0,0,0,1,0,1,0"))
                                       (rule "polySimp_sepNegMonomial" (formula "15") (term "1,0"))
                                       (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0"))
                                       (rule "polySimp_elimOne" (formula "15") (term "0,1,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0"))
                                       (rule "mul_literals" (formula "15") (term "0,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
                                       (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0"))
                                       (rule "polySimp_mulLiterals" (formula "11") (term "0,0"))
                                       (rule "polySimp_elimOne" (formula "11") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "26"))
                                       (rule "polySimp_mulComm0" (formula "26") (term "1"))
                                       (rule "polySimp_rightDist" (formula "26") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "26") (term "1,1"))
                                       (rule "mul_literals" (formula "26") (term "0,1"))
                                       (rule "polySimp_elimOne" (formula "26") (term "1,1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0,0"))
                                       (rule "mul_literals" (formula "10") (term "1,0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "1,1"))
                                       (rule "polySimp_mulLiterals" (formula "11") (term "0,1,1"))
                                       (rule "polySimp_elimOne" (formula "11") (term "0,1,1"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                       (rule "polySimp_elimOne" (formula "1") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "10") (term "1,0,0") (ifseqformula "8"))
                                       (rule "inEqSimp_homoInEq0" (formula "10") (term "0,1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
                                       (rule "polySimp_addComm0" (formula "10") (term "0,0,0,1,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "10") (term "1,1,0,0,1,0,0"))
                                       (rule "times_zero_1" (formula "10") (term "1,0,0,1,0,0"))
                                       (rule "add_zero_right" (formula "10") (term "0,0,1,0,0"))
                                       (rule "qeq_literals" (formula "10") (term "0,1,0,0"))
                                        (builtin "One Step Simplification" (formula "10"))
                                       (rule "inEqSimp_antiSymm" (formula "8") (ifseqformula "2"))
                                       (rule "applyEq" (formula "1") (term "0") (ifseqformula "8"))
                                       (rule "applyEq" (formula "40") (term "1,3,0") (ifseqformula "8"))
                                       (rule "applyEq" (formula "14") (term "2,1,0,0") (ifseqformula "8"))
                                       (rule "applyEq" (formula "9") (term "0") (ifseqformula "8"))
                                       (rule "inEqSimp_homoInEq1" (formula "9"))
                                       (rule "polySimp_pullOutFactor1" (formula "9") (term "0"))
                                       (rule "add_literals" (formula "9") (term "1,0"))
                                       (rule "times_zero_1" (formula "9") (term "0"))
                                       (rule "leq_literals" (formula "9"))
                                       (rule "true_left" (formula "9"))
                                       (rule "applyEq" (formula "39") (term "2,1,0,0,0") (ifseqformula "8"))
                                       (rule "applyEq" (formula "14") (term "2,1,0,0,1,0") (ifseqformula "8"))
                                       (rule "applyEq" (formula "26") (term "0") (ifseqformula "8"))
                                       (rule "inEqSimp_homoInEq0" (formula "26"))
                                       (rule "polySimp_addComm1" (formula "26") (term "0"))
                                       (rule "applyEq" (formula "2") (term "0") (ifseqformula "8"))
                                       (rule "inEqSimp_homoInEq0" (formula "2"))
                                       (rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
                                       (rule "add_literals" (formula "2") (term "1,0"))
                                       (rule "times_zero_1" (formula "2") (term "0"))
                                       (rule "qeq_literals" (formula "2"))
                                       (rule "true_left" (formula "2"))
                                       (rule "applyEq" (formula "14") (term "2,1,0,2,0,1,0") (ifseqformula "7"))
                                       (rule "applyEq" (formula "13") (term "1,1,0,0,0") (ifseqformula "7"))
                                       (rule "applyEq" (formula "38") (term "0,2,0,0") (ifseqformula "7"))
                                       (rule "applyEq" (formula "8") (term "0,0,0") (ifseqformula "7"))
                                       (rule "replace_known_left" (formula "8") (term "0,0") (ifseqformula "6"))
                                        (builtin "One Step Simplification" (formula "8"))
                                       (rule "applyEqReverse" (formula "10") (term "0,0,1") (ifseqformula "8"))
                                       (rule "hideAuxiliaryEq" (formula "8"))
                                       (rule "applyEq" (formula "29") (term "1") (ifseqformula "7"))
                                       (rule "applyEq" (formula "13") (term "2,1,0,1,1,1,0") (ifseqformula "7"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "24"))
                                       (rule "polySimp_mulComm0" (formula "24") (term "1"))
                                       (rule "polySimp_rightDist" (formula "24") (term "1"))
                                       (rule "mul_literals" (formula "24") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "24") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "24") (term "1,1"))
                                       (rule "inEqSimp_exactShadow3" (formula "31") (ifseqformula "32"))
                                       (rule "polySimp_mulComm0" (formula "31") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "31"))
                                       (rule "polySimp_mulLiterals" (formula "31") (term "1"))
                                       (rule "polySimp_elimOne" (formula "31") (term "1"))
                                       (rule "inEqSimp_and_contradInEq0" (formula "12") (term "0,0"))
                                       (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "12") (term "1,0,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "12") (term "1,0,1,0,0"))
                                       (rule "mul_literals" (formula "12") (term "0,1,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "12") (term "0,1,0,0"))
                                       (rule "polySimp_addComm0" (formula "12") (term "0,0,1,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,1,0,0"))
                                       (rule "add_literals" (formula "12") (term "1,1,0,1,0,0"))
                                       (rule "times_zero_1" (formula "12") (term "1,0,1,0,0"))
                                       (rule "add_literals" (formula "12") (term "0,1,0,0"))
                                       (rule "leq_literals" (formula "12") (term "1,0,0"))
                                        (builtin "One Step Simplification" (formula "12"))
                                       (rule "true_left" (formula "12"))
                                       (rule "nnf_imp2or" (formula "12") (term "0"))
                                       (rule "nnf_notAnd" (formula "12") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0"))
                                       (rule "times_zero_1" (formula "12") (term "1,0,0,1,0,0"))
                                       (rule "add_zero_right" (formula "12") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                                       (rule "mul_literals" (formula "12") (term "1,1,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0"))
                                       (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0"))
                                       (rule "add_literals" (formula "12") (term "0,0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "12") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0"))
                                       (rule "Definition_axiom_for_isClassifiedUntil_in_de_wiesler_Classifier" (formula "29") (term "0") (inst "b=b"))
                                        (builtin "One Step Simplification" (formula "29"))
                                       (rule "translateJavaSubInt" (formula "29") (term "1,1"))
                                       (rule "andLeft" (formula "29"))
                                       (rule "andLeft" (formula "29"))
                                       (rule "andLeft" (formula "29"))
                                       (rule "andLeft" (formula "29"))
                                       (rule "polySimp_elimSub" (formula "33") (term "1"))
                                       (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0"))
                                       (rule "applyEq" (formula "32") (term "0,1,0,0,1,0,0") (ifseqformula "28"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "32") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0"))
                                       (rule "nnf_imp2or" (formula "32") (term "0"))
                                       (rule "nnf_notAnd" (formula "32") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "32") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "32") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "32") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0"))
                                       (rule "mul_literals" (formula "32") (term "1,0,0,0"))
                                       (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "10") (term "0,2,0"))
                                       (rule "polySimp_addComm0" (formula "10") (term "2,0"))
                                       (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "21") (inst "b=b"))
                                        (builtin "One Step Simplification" (formula "21"))
                                       (rule "translateJavaMulInt" (formula "21") (term "1,1,0,0,0"))
                                       (rule "mul_literals" (formula "21") (term "1,1,0,0,0"))
                                       (rule "andLeft" (formula "21"))
                                       (rule "andLeft" (formula "21"))
                                       (rule "andLeft" (formula "21"))
                                       (rule "andLeft" (formula "23"))
                                       (rule "andLeft" (formula "21"))
                                       (rule "andLeft" (formula "21"))
                                       (rule "andLeft" (formula "21"))
                                       (rule "notLeft" (formula "23"))
                                       (rule "notLeft" (formula "21"))
                                       (rule "notLeft" (formula "21"))
                                       (rule "eqSymm" (formula "47"))
                                       (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "46"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "45"))
                                        (builtin "One Step Simplification" (formula "4"))
                                       (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "25") (term "0,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "23"))
                                       (rule "applyEq" (formula "24") (term "0") (ifseqformula "7"))
                                       (rule "applyEq" (formula "23") (term "0") (ifseqformula "7"))
                                       (rule "applyEq" (formula "24") (term "0,1,0,0,1,0,0") (ifseqformula "7"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                                       (rule "inEqSimp_subsumption0" (formula "23") (ifseqformula "1"))
                                       (rule "leq_literals" (formula "23") (term "0"))
                                        (builtin "One Step Simplification" (formula "23"))
                                       (rule "true_left" (formula "23"))
                                       (rule "nnf_imp2or" (formula "23") (term "0"))
                                       (rule "nnf_notAnd" (formula "23") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                                       (rule "mul_literals" (formula "23") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "23") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                                       (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                                       (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "12") (term "0,0,1,1,0"))
                                       (rule "polySimp_addComm0" (formula "12") (term "0,1,1,0"))
                                       (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "10") (term "0,2,0") (inst "i=i"))
                                       (rule "polySimp_addComm0" (formula "10") (term "2,0"))
                                       (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "42") (term "0") (inst "i=i"))
                                        (builtin "One Step Simplification" (formula "42"))
                                       (rule "translateJavaSubInt" (formula "42") (term "1,1,0,0"))
                                       (rule "translateJavaAddInt" (formula "42") (term "0,2,1,1,0"))
                                       (rule "polySimp_elimSub" (formula "42") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "42") (term "1,1,1,0,0"))
                                       (rule "polySimp_addComm0" (formula "42") (term "0,2,1,1,0"))
                                       (rule "polySimp_addComm1" (formula "42") (term "1,1,0,0"))
                                       (rule "add_literals" (formula "42") (term "0,1,1,0,0"))
                                       (rule "add_zero_left" (formula "42") (term "1,1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "42") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "42") (term "0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "42") (term "1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "42") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "42") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "42") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "42") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "42") (term "1,1,1,0,0"))
                                       (rule "nnf_imp2or" (formula "42") (term "0"))
                                       (rule "nnf_notAnd" (formula "42") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "42") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "42") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "42") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "0,0,0"))
                                       (rule "mul_literals" (formula "42") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "42") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "42") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "42") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "42") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "42") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "42") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "42") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "42") (term "1,1,0,0"))
                                       (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "11") (term "0"))
                                       (rule "wellFormedAnon" (formula "11") (term "1,0"))
                                       (rule "replace_known_left" (formula "11") (term "0,1") (ifseqformula "12"))
                                        (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "62")) (ifInst ""  (formula "15")) (ifInst ""  (formula "14")))
                                       (rule "Definition_axiom_for_isClassifiedWith_in_de_wiesler_Buffers" (formula "34") (term "0") (inst "b=b"))
                                        (builtin "One Step Simplification" (formula "34"))
                                       (rule "translateJavaAddInt" (formula "34") (term "4,0,1,0"))
                                       (rule "translateJavaMulInt" (formula "34") (term "3,0,1,0"))
                                       (rule "translateJavaMulInt" (formula "34") (term "0,4,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0"))
                                       (rule "applyEq" (formula "34") (term "0,1,0,0,1,0,0") (ifseqformula "7"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "34") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0"))
                                       (rule "nnf_imp2or" (formula "34") (term "0"))
                                       (rule "nnf_notAnd" (formula "34") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "34") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "34") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0"))
                                       (rule "mul_literals" (formula "34") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "34") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0"))
                                       (rule "mul_literals" (formula "34") (term "1,0,0,0"))
                                       (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "40"))
                                        (builtin "One Step Simplification" (formula "40"))
                                       (rule "translateJavaSubInt" (formula "40") (term "0,2,1,1,0"))
                                       (rule "translateJavaSubInt" (formula "40") (term "0,2,0,1,0"))
                                       (rule "translateJavaMulInt" (formula "40") (term "1,1,1,0,0,0,0"))
                                       (rule "andLeft" (formula "40"))
                                       (rule "andLeft" (formula "40"))
                                       (rule "andLeft" (formula "40"))
                                       (rule "andLeft" (formula "40"))
                                       (rule "andLeft" (formula "40"))
                                       (rule "andLeft" (formula "40"))
                                       (rule "andLeft" (formula "40"))
                                       (rule "andLeft" (formula "42"))
                                       (rule "notLeft" (formula "41"))
                                       (rule "notLeft" (formula "40"))
                                       (rule "eqSymm" (formula "45"))
                                       (rule "eqSymm" (formula "42"))
                                       (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "50"))
                                        (builtin "One Step Simplification" (formula "5"))
                                       (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "51"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "polySimp_elimSub" (formula "45") (term "0,2,1"))
                                       (rule "mul_literals" (formula "45") (term "1,0,2,1"))
                                       (rule "polySimp_elimSub" (formula "45") (term "0,2,0"))
                                       (rule "mul_literals" (formula "45") (term "1,0,2,0"))
                                       (rule "polySimp_mulComm0" (formula "42") (term "1,0"))
                                       (rule "polySimp_addComm0" (formula "45") (term "0,2,1"))
                                       (rule "polySimp_addComm0" (formula "45") (term "0,2,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "40"))
                                       (rule "applyEq" (formula "41") (term "0") (ifseqformula "31"))
                                       (rule "applyEq" (formula "40") (term "0") (ifseqformula "31"))
                                       (rule "applyEq" (formula "42") (term "1") (ifseqformula "31"))
                                       (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "40"))
                                       (rule "leq_literals" (formula "6") (term "0"))
                                        (builtin "One Step Simplification" (formula "6"))
                                       (rule "true_left" (formula "6"))
                                       (rule "inEqSimp_subsumption1" (formula "7") (term "0,0") (ifseqformula "39"))
                                       (rule "leq_literals" (formula "7") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "7"))
                                       (rule "applyEqReverse" (formula "8") (term "0,1,1,1") (ifseqformula "7"))
                                       (rule "hideAuxiliaryEq" (formula "7"))
                                       (rule "polySimp_addComm0" (formula "7") (term "1,1,1"))
                                       (rule "inEqSimp_homoInEq1" (formula "7") (term "1,1"))
                                       (rule "polySimp_addComm1" (formula "7") (term "0,1,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,1"))
                                       (rule "polySimp_mulComm0" (formula "7") (term "1,1,1"))
                                       (rule "polySimp_rightDist" (formula "7") (term "1,1,1"))
                                       (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,1"))
                                       (rule "polySimp_elimOne" (formula "7") (term "1,1,1,1"))
                                       (rule "polySimp_mulComm0" (formula "7") (term "0,1,1,1"))
                                       (rule "inEqSimp_subsumption0" (formula "39") (ifseqformula "1"))
                                       (rule "leq_literals" (formula "39") (term "0"))
                                        (builtin "One Step Simplification" (formula "39"))
                                       (rule "true_left" (formula "39"))
                                       (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "38"))
                                       (rule "qeq_literals" (formula "1") (term "0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                    (branch "Case 2"
                                       (rule "true_left" (formula "1"))
                                       (rule "translateJavaAddInt" (formula "58") (term "0"))
                                       (rule "polySimp_homoEq" (formula "13") (term "0,1,0,1,0"))
                                       (rule "polySimp_homoEq" (formula "13") (term "1,0"))
                                       (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,1,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "13") (term "1,0,1,0"))
                                       (rule "polySimp_addComm0" (formula "58") (term "0"))
                                       (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,1,1,0,1,0"))
                                       (rule "mul_literals" (formula "13") (term "0,1,0,0,1,1,1,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "13") (term "1,0,1,0"))
                                       (rule "polySimp_mulAssoc" (formula "13") (term "0,1,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "13") (term "0,0,1,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "13") (term "0,1,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,1,1,0,1,0"))
                                       (rule "polySimp_addComm0" (formula "13") (term "0,0,0,0,1,1,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "13") (term "0,1,0"))
                                       (rule "inEqSimp_ltRight" (formula "38"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                       (rule "polySimp_addComm0" (formula "1") (term "0"))
                                       (rule "inEqSimp_leqRight" (formula "58"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "11") (term "0"))
                                       (rule "add_zero_right" (formula "11") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "10") (term "0,0,0"))
                                       (rule "times_zero_2" (formula "10") (term "1,0,0,0,0"))
                                       (rule "add_zero_right" (formula "10") (term "0,0,0,0"))
                                       (rule "inEqSimp_homoInEq1" (formula "11") (term "1,1"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "1,0,1,1"))
                                       (rule "polySimp_rightDist" (formula "11") (term "1,0,1,1"))
                                       (rule "polySimp_mulAssoc" (formula "11") (term "0,1,0,1,1"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "0,0,1,0,1,1"))
                                       (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0,1,1"))
                                       (rule "polySimp_elimOne" (formula "11") (term "0,1,0,1,1"))
                                       (rule "polySimp_addAssoc" (formula "11") (term "0,1,1"))
                                       (rule "inEqSimp_homoInEq1" (formula "26"))
                                       (rule "polySimp_addComm1" (formula "26") (term "0"))
                                       (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "31"))
                                       (rule "polySimp_sepNegMonomial" (formula "15") (term "0,0,1,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,1,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "15") (term "0,0,0,1,0,1,0"))
                                       (rule "polySimp_sepNegMonomial" (formula "15") (term "1,0"))
                                       (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0"))
                                       (rule "polySimp_elimOne" (formula "15") (term "0,1,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0"))
                                       (rule "polySimp_mulLiterals" (formula "11") (term "0,0"))
                                       (rule "polySimp_elimOne" (formula "11") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
                                       (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "15") (term "0,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0,0"))
                                       (rule "mul_literals" (formula "10") (term "1,0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "1,1"))
                                       (rule "polySimp_mulLiterals" (formula "11") (term "0,1,1"))
                                       (rule "polySimp_elimOne" (formula "11") (term "0,1,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "26"))
                                       (rule "polySimp_mulComm0" (formula "26") (term "1"))
                                       (rule "polySimp_rightDist" (formula "26") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "26") (term "1,1"))
                                       (rule "mul_literals" (formula "26") (term "0,1"))
                                       (rule "polySimp_elimOne" (formula "26") (term "1,1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1"))
                                       (rule "inEqSimp_subsumption1" (formula "10") (term "1,0,0") (ifseqformula "8"))
                                       (rule "inEqSimp_homoInEq0" (formula "10") (term "0,1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
                                       (rule "polySimp_addComm0" (formula "10") (term "0,0,0,1,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "10") (term "1,1,0,0,1,0,0"))
                                       (rule "times_zero_1" (formula "10") (term "1,0,0,1,0,0"))
                                       (rule "add_zero_right" (formula "10") (term "0,0,1,0,0"))
                                       (rule "qeq_literals" (formula "10") (term "0,1,0,0"))
                                        (builtin "One Step Simplification" (formula "10"))
                                       (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "26"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "inEqSimp_homoInEq1" (formula "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                                       (rule "mul_literals" (formula "1") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                       (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                       (rule "add_literals" (formula "1") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "1") (term "1,0"))
                                       (rule "add_zero_right" (formula "1") (term "0"))
                                       (rule "leq_literals" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                 )
                                 (branch "Case 2"
                                    (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "38") (term "0") (userinteraction))
                                    (rule "true_left" (formula "1"))
                                    (rule "wellFormedStorePrimitiveArray" (formula "37") (term "1,0"))
                                    (rule "wellFormedAnon" (formula "37") (term "1,0"))
                                    (rule "translateJavaAddInt" (formula "59") (term "3,0"))
                                    (rule "replace_known_left" (formula "37") (term "0,1,0") (ifseqformula "15"))
                                     (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "56")) (ifInst ""  (formula "14")) (ifInst ""  (formula "38")))
                                    (rule "polySimp_homoEq" (formula "13") (term "1,0"))
                                    (rule "polySimp_homoEq" (formula "13") (term "0,1,0,1,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,1,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "1,0,1,0"))
                                    (rule "polySimp_addComm0" (formula "59") (term "3,0"))
                                    (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,1,1,0,1,0"))
                                    (rule "mul_literals" (formula "13") (term "0,1,0,0,1,1,1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "13") (term "1,0,1,0"))
                                    (rule "polySimp_mulAssoc" (formula "13") (term "0,1,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "0,0,1,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "13") (term "0,1,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,1,1,0,1,0"))
                                    (rule "polySimp_addComm0" (formula "13") (term "0,0,0,0,1,1,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "13") (term "0,1,0"))
                                    (rule "inEqSimp_ltRight" (formula "39"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                    (rule "polySimp_addComm0" (formula "1") (term "0"))
                                    (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "10") (term "0"))
                                    (rule "add_zero_right" (formula "10") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "9") (term "0,0,0"))
                                    (rule "times_zero_2" (formula "9") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "9") (term "0,0,0,0"))
                                    (rule "inEqSimp_homoInEq1" (formula "25"))
                                    (rule "polySimp_addComm1" (formula "25") (term "0"))
                                    (rule "inEqSimp_homoInEq1" (formula "10") (term "1,1"))
                                    (rule "polySimp_mulComm0" (formula "10") (term "1,0,1,1"))
                                    (rule "polySimp_rightDist" (formula "10") (term "1,0,1,1"))
                                    (rule "polySimp_mulAssoc" (formula "10") (term "0,1,0,1,1"))
                                    (rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,1,1"))
                                    (rule "polySimp_elimOne" (formula "10") (term "0,1,0,1,1"))
                                    (rule "polySimp_addAssoc" (formula "10") (term "0,1,1"))
                                    (rule "applyEq" (formula "59") (term "1,3,0") (ifseqformula "30"))
                                    (rule "close" (formula "59") (ifseqformula "38"))
                                 )
                              )
                              (branch "Case 2"
                                 (rule "true_left" (formula "1"))
                                 (rule "polySimp_homoEq" (formula "13") (term "0,1,0,1,0"))
                                 (rule "polySimp_homoEq" (formula "13") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,1,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "13") (term "1,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "13") (term "1,0,1,0"))
                                 (rule "polySimp_mulAssoc" (formula "13") (term "0,1,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "13") (term "0,0,1,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "13") (term "0,1,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,1,1,0,1,0"))
                                 (rule "mul_literals" (formula "13") (term "0,1,0,0,0,1,1,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,1,1,0,1,0"))
                                 (rule "polySimp_addComm0" (formula "13") (term "0,0,0,0,1,1,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "13") (term "0,1,0"))
                                 (rule "inEqSimp_ltRight" (formula "38"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "1") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "10") (term "0"))
                                 (rule "add_zero_right" (formula "10") (term "0,0"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "10") (term "1,1"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,0,1,1"))
                                 (rule "polySimp_rightDist" (formula "10") (term "1,0,1,1"))
                                 (rule "polySimp_mulAssoc" (formula "10") (term "0,1,0,1,1"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0,1,1"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,1,1"))
                                 (rule "polySimp_elimOne" (formula "10") (term "0,1,0,1,1"))
                                 (rule "polySimp_addAssoc" (formula "10") (term "0,1,1"))
                                 (rule "inEqSimp_homoInEq1" (formula "25"))
                                 (rule "polySimp_addComm1" (formula "25") (term "0"))
                                 (rule "inEqSimp_homoInEq0" (formula "9") (term "0,0,0"))
                                 (rule "times_zero_2" (formula "9") (term "1,0,0,0,0"))
                                 (rule "add_zero_right" (formula "9") (term "0,0,0,0"))
                                 (rule "polySimp_sepNegMonomial" (formula "14") (term "1,0"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0"))
                                 (rule "polySimp_elimOne" (formula "14") (term "0,1,0"))
                                 (rule "polySimp_sepNegMonomial" (formula "14") (term "0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "14") (term "0,0,0,1,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "0,0"))
                                 (rule "polySimp_elimOne" (formula "10") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "13") (term "0,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "1,1"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "0,1,1"))
                                 (rule "polySimp_elimOne" (formula "10") (term "0,1,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "25"))
                                 (rule "polySimp_mulComm0" (formula "25") (term "1"))
                                 (rule "polySimp_rightDist" (formula "25") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "25") (term "1,1"))
                                 (rule "mul_literals" (formula "25") (term "0,1"))
                                 (rule "polySimp_elimOne" (formula "25") (term "1,1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0,0"))
                                 (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                                 (rule "inEqSimp_subsumption1" (formula "9") (term "1,0,0") (ifseqformula "7"))
                                 (rule "inEqSimp_homoInEq0" (formula "9") (term "0,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                                 (rule "polySimp_addComm0" (formula "9") (term "0,0,0,1,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "9") (term "1,1,0,0,1,0,0"))
                                 (rule "times_zero_1" (formula "9") (term "1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "9") (term "0,0,1,0,0"))
                                 (rule "qeq_literals" (formula "9") (term "0,1,0,0"))
                                  (builtin "One Step Simplification" (formula "9"))
                                 (rule "pullOutSelect" (formula "58") (term "0") (inst "selectSK=arr_2"))
                                 (rule "simplifySelectOfStore" (formula "1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "replaceKnownSelect_taclet1_0" (formula "1") (term "2,0"))
                                 (rule "castDel" (formula "1") (term "1,0"))
                                 (rule "inEqSimp_antiSymm" (formula "8") (ifseqformula "2"))
                                 (rule "applyEq" (formula "9") (term "0") (ifseqformula "8"))
                                 (rule "inEqSimp_homoInEq1" (formula "9"))
                                 (rule "polySimp_pullOutFactor1" (formula "9") (term "0"))
                                 (rule "add_literals" (formula "9") (term "1,0"))
                                 (rule "times_zero_1" (formula "9") (term "0"))
                                 (rule "leq_literals" (formula "9"))
                                 (rule "true_left" (formula "9"))
                                 (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "8"))
                                 (rule "replace_known_left" (formula "9") (term "0,0") (ifseqformula "7"))
                                  (builtin "One Step Simplification" (formula "9"))
                                 (rule "applyEqReverse" (formula "1") (term "2,0") (ifseqformula "9"))
                                 (rule "applyEqReverse" (formula "11") (term "0,0,1") (ifseqformula "9"))
                                 (rule "hideAuxiliaryEq" (formula "9"))
                                 (rule "applyEq" (formula "38") (term "0,2,0,0") (ifseqformula "8"))
                                 (rule "applyEq" (formula "12") (term "2,1,0,0") (ifseqformula "8"))
                                 (rule "applyEq" (formula "13") (term "1,1,0,0,0") (ifseqformula "8"))
                                 (rule "applyEq" (formula "2") (term "0") (ifseqformula "8"))
                                 (rule "inEqSimp_homoInEq0" (formula "2"))
                                 (rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
                                 (rule "add_literals" (formula "2") (term "1,0"))
                                 (rule "times_zero_1" (formula "2") (term "0"))
                                 (rule "qeq_literals" (formula "2"))
                                 (rule "true_left" (formula "2"))
                                 (rule "applyEq" (formula "37") (term "1,3,0") (ifseqformula "7"))
                                 (rule "applyEq" (formula "13") (term "2,1,0,2,0,1,0") (ifseqformula "7"))
                                 (rule "applyEq" (formula "1") (term "0,0,0") (ifseqformula "7"))
                                 (rule "applyEq" (formula "12") (term "2,1,0,0,1,0") (ifseqformula "7"))
                                 (rule "applyEq" (formula "24") (term "0") (ifseqformula "7"))
                                 (rule "inEqSimp_homoInEq0" (formula "24"))
                                 (rule "polySimp_addComm1" (formula "24") (term "0"))
                                 (rule "applyEq" (formula "37") (term "2,1,0,0,0") (ifseqformula "7"))
                                 (rule "applyEq" (formula "13") (term "2,1,0,1,1,1,0") (ifseqformula "7"))
                                 (rule "applyEq" (formula "29") (term "1") (ifseqformula "7"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "24"))
                                 (rule "polySimp_mulComm0" (formula "24") (term "1"))
                                 (rule "polySimp_rightDist" (formula "24") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "24") (term "1,1"))
                                 (rule "mul_literals" (formula "24") (term "0,1"))
                                 (rule "polySimp_elimOne" (formula "24") (term "1,1"))
                                 (rule "inEqSimp_exactShadow3" (formula "31") (ifseqformula "32"))
                                 (rule "polySimp_mulComm0" (formula "31") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "31"))
                                 (rule "polySimp_mulLiterals" (formula "31") (term "1"))
                                 (rule "polySimp_elimOne" (formula "31") (term "1"))
                                 (rule "inEqSimp_and_contradInEq0" (formula "12") (term "0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "12") (term "1,0,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "12") (term "1,0,1,0,0"))
                                 (rule "mul_literals" (formula "12") (term "0,1,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "12") (term "0,1,0,0"))
                                 (rule "polySimp_addComm0" (formula "12") (term "0,0,1,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,1,0,0"))
                                 (rule "add_literals" (formula "12") (term "1,1,0,1,0,0"))
                                 (rule "times_zero_1" (formula "12") (term "1,0,1,0,0"))
                                 (rule "add_zero_right" (formula "12") (term "0,1,0,0"))
                                 (rule "leq_literals" (formula "12") (term "1,0,0"))
                                  (builtin "One Step Simplification" (formula "12"))
                                 (rule "true_left" (formula "12"))
                                 (rule "nnf_imp2or" (formula "12") (term "0"))
                                 (rule "nnf_notAnd" (formula "12") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0"))
                                 (rule "times_zero_1" (formula "12") (term "1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "12") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                                 (rule "mul_literals" (formula "12") (term "1,1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0"))
                                 (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0"))
                                 (rule "add_literals" (formula "12") (term "0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "12") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0"))
                                 (rule "Contract_axiom_for_countClassOfSliceEq_in_Classifier" (formula "10") (term "1,2,0"))
                                 (rule "replace_known_left" (formula "10") (term "0,0,0,0,0") (ifseqformula "34"))
                                  (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "55")) (ifInst ""  (formula "15")) (ifInst ""  (formula "16")) (ifInst ""  (formula "56")) (ifInst ""  (formula "34")))
                                 (rule "true_left" (formula "10"))
                                 (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "32") (term "0"))
                                  (builtin "One Step Simplification" (formula "32"))
                                 (rule "translateJavaMod" (formula "32") (term "0"))
                                 (rule "jmod_axiom" (formula "32") (term "0"))
                                 (rule "polySimp_mulLiterals" (formula "32") (term "1,0"))
                                 (rule "polySimp_sepNegMonomial" (formula "32"))
                                 (rule "polySimp_mulLiterals" (formula "32") (term "0"))
                                 (rule "newSym_eq" (formula "32") (inst "newSymDef=add(mul(begin, Z(0(#))), mul(write, Z(0(#))))") (inst "l=l_0"))
                                 (rule "times_zero_1" (formula "32") (term "1,1,1"))
                                 (rule "times_zero_1" (formula "32") (term "0,1,1"))
                                 (rule "add_zero_left" (formula "32") (term "1,1"))
                                 (rule "add_zero_right" (formula "32") (term "1"))
                                 (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "32"))
                                 (rule "polySimp_homoEq" (formula "33"))
                                 (rule "polySimp_mulLiterals" (formula "33") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "33") (term "0"))
                                 (rule "polySimp_addComm0" (formula "33") (term "0,0"))
                                 (rule "polySimp_sepPosMonomial" (formula "33"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "33") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "33") (term "1,1"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "33") (term "0,1"))
                                 (rule "applyEq" (formula "29") (term "4,0") (ifseqformula "33"))
                                 (rule "applyEq" (formula "32") (term "1,0,0") (ifseqformula "33"))
                                 (rule "polySimp_addAssoc" (formula "32") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "32") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor2b" (formula "32") (term "0,0"))
                                 (rule "add_literals" (formula "32") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "32") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "32") (term "0,0"))
                                 (rule "applyEq" (formula "31") (term "0") (ifseqformula "33"))
                                 (rule "inEqSimp_commuteLeq" (formula "31"))
                                 (rule "applyEq" (formula "30") (term "0") (ifseqformula "33"))
                                 (rule "inEqSimp_homoInEq1" (formula "30"))
                                 (rule "polySimp_mulComm0" (formula "30") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "30") (term "1,0"))
                                 (rule "polySimp_mulAssoc" (formula "30") (term "0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "30") (term "0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "30") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "30") (term "0"))
                                 (rule "polySimp_addComm0" (formula "30") (term "0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "30") (term "0"))
                                 (rule "add_literals" (formula "30") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "30") (term "1,0"))
                                 (rule "add_zero_right" (formula "30") (term "0"))
                                 (rule "applyEq" (formula "10") (term "4,1,2,0") (ifseqformula "33"))
                                 (rule "applyEq" (formula "12") (term "4,1,0,1,1,0") (ifseqformula "33"))
                                 (rule "inEqSimp_invertInEq0" (formula "30"))
                                 (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                                 (rule "times_zero_2" (formula "30") (term "1"))
                                 (rule "elimGcdGeq_antec" (formula "30") (inst "elimGcd=Z(6(5(2(#))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcdRightDiv=Z(0(#))"))
                                 (rule "leq_literals" (formula "30") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "30"))
                                 (rule "add_zero_right" (formula "30") (term "0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "30") (term "1,0,0"))
                                 (rule "times_zero_1" (formula "30") (term "1,0,0,0,0"))
                                 (rule "add_zero_right" (formula "30") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "30") (term "0,0"))
                                 (rule "add_literals" (formula "30") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "30") (term "1,0,0"))
                                 (rule "add_literals" (formula "30") (term "0,0"))
                                 (rule "leq_literals" (formula "30") (term "0"))
                                  (builtin "One Step Simplification" (formula "30"))
                                 (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "34"))
                                  (builtin "One Step Simplification" (formula "34"))
                                 (rule "translateJavaSubInt" (formula "34") (term "0,2,1,1,0"))
                                 (rule "translateJavaSubInt" (formula "34") (term "0,2,0,1,0"))
                                 (rule "translateJavaMulInt" (formula "34") (term "1,1,1,0,0,0,0"))
                                 (rule "andLeft" (formula "34"))
                                 (rule "andLeft" (formula "34"))
                                 (rule "andLeft" (formula "34"))
                                 (rule "andLeft" (formula "34"))
                                 (rule "andLeft" (formula "34"))
                                 (rule "andLeft" (formula "34"))
                                 (rule "andLeft" (formula "34"))
                                 (rule "andLeft" (formula "36"))
                                 (rule "notLeft" (formula "34"))
                                 (rule "notLeft" (formula "34"))
                                 (rule "eqSymm" (formula "39"))
                                 (rule "eqSymm" (formula "36"))
                                 (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "45"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "44"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "polySimp_elimSub" (formula "39") (term "0,2,1"))
                                 (rule "mul_literals" (formula "39") (term "1,0,2,1"))
                                 (rule "polySimp_elimSub" (formula "39") (term "0,2,0"))
                                 (rule "mul_literals" (formula "39") (term "1,0,2,0"))
                                 (rule "polySimp_mulComm0" (formula "36") (term "1,0"))
                                 (rule "polySimp_addComm0" (formula "39") (term "0,2,1"))
                                 (rule "polySimp_addComm0" (formula "39") (term "0,2,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "34"))
                                 (rule "applyEq" (formula "35") (term "0") (ifseqformula "28"))
                                 (rule "applyEq" (formula "34") (term "0") (ifseqformula "28"))
                                 (rule "applyEq" (formula "36") (term "1") (ifseqformula "28"))
                                 (rule "inEqSimp_contradEq7" (formula "1") (term "0,0") (ifseqformula "34"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,0,0"))
                                 (rule "leq_literals" (formula "1") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "applyEqReverse" (formula "65") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "replace_known_right" (formula "8") (term "0,1") (ifseqformula "64"))
                                  (builtin "One Step Simplification" (formula "8"))
                                 (rule "notLeft" (formula "8"))
                                 (rule "replace_known_right" (formula "7") (term "0,0") (ifseqformula "42"))
                                  (builtin "One Step Simplification" (formula "7"))
                                 (rule "hideAuxiliaryEq" (formula "7"))
                                 (rule "inEqSimp_geqRight" (formula "41"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_subsumption0" (formula "33") (ifseqformula "1"))
                                 (rule "leq_literals" (formula "33") (term "0"))
                                  (builtin "One Step Simplification" (formula "33"))
                                 (rule "true_left" (formula "33"))
                                 (rule "inEqSimp_contradInEq0" (formula "32") (ifseqformula "1"))
                                 (rule "qeq_literals" (formula "32") (term "0"))
                                  (builtin "One Step Simplification" (formula "32"))
                                 (rule "closeFalse" (formula "32"))
                              )
                           )
                           (branch "Case 2"
                              (rule "true_left" (formula "1"))
                              (rule "polySimp_homoEq" (formula "13") (term "0,1,0,1,0"))
                              (rule "polySimp_homoEq" (formula "13") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "13") (term "1,0,1,0"))
                              (rule "polySimp_mulAssoc" (formula "13") (term "0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "13") (term "0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,1,1,0,1,0"))
                              (rule "mul_literals" (formula "13") (term "0,1,0,0,0,1,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,1,1,0,1,0"))
                              (rule "polySimp_addComm0" (formula "13") (term "0,0,0,0,1,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "13") (term "0,1,0"))
                              (rule "inEqSimp_ltRight" (formula "38"))
                              (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "1") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "10") (term "0"))
                              (rule "add_zero_right" (formula "10") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_homoInEq0" (formula "9") (term "0,0,0"))
                              (rule "times_zero_2" (formula "9") (term "1,0,0,0,0"))
                              (rule "add_zero_right" (formula "9") (term "0,0,0,0"))
                              (rule "inEqSimp_homoInEq1" (formula "10") (term "1,1"))
                              (rule "polySimp_mulComm0" (formula "10") (term "1,0,1,1"))
                              (rule "polySimp_rightDist" (formula "10") (term "1,0,1,1"))
                              (rule "polySimp_mulAssoc" (formula "10") (term "0,1,0,1,1"))
                              (rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0,1,1"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,1,1"))
                              (rule "polySimp_elimOne" (formula "10") (term "0,1,0,1,1"))
                              (rule "polySimp_addAssoc" (formula "10") (term "0,1,1"))
                              (rule "inEqSimp_homoInEq1" (formula "25"))
                              (rule "polySimp_addComm1" (formula "25") (term "0"))
                              (rule "applyEq" (formula "58") (term "0,2,0") (ifseqformula "30"))
                              (rule "polySimp_sepNegMonomial" (formula "14") (term "0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "0,0,0,1,0,1,0"))
                              (rule "polySimp_sepNegMonomial" (formula "14") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "0,1,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "13") (term "0,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "0,0"))
                              (rule "polySimp_elimOne" (formula "10") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
                              (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0,0"))
                              (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "1,1"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "0,1,1"))
                              (rule "polySimp_elimOne" (formula "10") (term "0,1,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "25"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1"))
                              (rule "polySimp_rightDist" (formula "25") (term "1"))
                              (rule "mul_literals" (formula "25") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1"))
                              (rule "inEqSimp_subsumption1" (formula "9") (term "1,0,0") (ifseqformula "7"))
                              (rule "inEqSimp_homoInEq0" (formula "9") (term "0,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                              (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                              (rule "polySimp_addComm0" (formula "9") (term "0,0,0,1,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "9") (term "1,1,0,0,1,0,0"))
                              (rule "times_zero_1" (formula "9") (term "1,0,0,1,0,0"))
                              (rule "add_zero_right" (formula "9") (term "0,0,1,0,0"))
                              (rule "qeq_literals" (formula "9") (term "0,1,0,0"))
                               (builtin "One Step Simplification" (formula "9"))
                              (rule "pullOutSelect" (formula "58") (term "0") (inst "selectSK=arr_2"))
                              (rule "simplifySelectOfStore" (formula "1"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "castDel" (formula "1") (term "0"))
                              (rule "applyEqReverse" (formula "59") (term "0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "59"))
                              (rule "closeTrue" (formula "59"))
                           )
                        )
                        (branch "Case 2"
                           (rule "andRight" (formula "59"))
                           (branch "Case 1"
                               (builtin "One Step Simplification" (formula "1"))
                               (builtin "One Step Simplification" (formula "59"))
                              (rule "true_left" (formula "1"))
                              (rule "allRight" (formula "58") (inst "sk=b_0"))
                              (rule "impRight" (formula "58"))
                              (rule "andLeft" (formula "1"))
                              (rule "polySimp_homoEq" (formula "15") (term "1,0"))
                              (rule "polySimp_homoEq" (formula "60"))
                              (rule "polySimp_homoEq" (formula "15") (term "0,1,0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "60") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,1,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "60") (term "1,0"))
                              (rule "polySimp_mulAssoc" (formula "60") (term "0,1,0"))
                              (rule "polySimp_mulComm0" (formula "60") (term "0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "60") (term "0,1,0"))
                              (rule "polySimp_elimOne" (formula "60") (term "0,1,0"))
                              (rule "polySimp_rightDist" (formula "15") (term "1,0,1,0"))
                              (rule "polySimp_mulAssoc" (formula "15") (term "0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "15") (term "0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "15") (term "0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,1,1,0,1,0"))
                              (rule "mul_literals" (formula "15") (term "0,1,0,0,0,1,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "60") (term "0"))
                              (rule "inEqSimp_ltRight" (formula "40"))
                              (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "1") (term "0"))
                              (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,1,1,0,1,0"))
                              (rule "polySimp_addComm0" (formula "16") (term "0,0,0,0,1,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "16") (term "0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "12") (term "0"))
                              (rule "add_zero_right" (formula "12") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "3"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "3") (term "0"))
                              (rule "inEqSimp_homoInEq0" (formula "11") (term "0,0,0"))
                              (rule "mul_literals" (formula "11") (term "1,0,0,0,0"))
                              (rule "add_zero_right" (formula "11") (term "0,0,0,0"))
                              (rule "inEqSimp_homoInEq1" (formula "27"))
                              (rule "polySimp_addComm1" (formula "27") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,1"))
                              (rule "polySimp_mulComm0" (formula "12") (term "1,0,1,1"))
                              (rule "polySimp_rightDist" (formula "12") (term "1,0,1,1"))
                              (rule "polySimp_mulAssoc" (formula "12") (term "0,1,0,1,1"))
                              (rule "polySimp_mulComm0" (formula "12") (term "0,0,1,0,1,1"))
                              (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,1,1"))
                              (rule "polySimp_elimOne" (formula "12") (term "0,1,0,1,1"))
                              (rule "polySimp_addAssoc" (formula "12") (term "0,1,1"))
                              (rule "applyEq" (formula "3") (term "0,1,0") (ifseqformula "32"))
                              (rule "polySimp_sepNegMonomial" (formula "60"))
                              (rule "polySimp_mulLiterals" (formula "60") (term "0"))
                              (rule "polySimp_elimOne" (formula "60") (term "0"))
                              (rule "polySimp_sepNegMonomial" (formula "16") (term "0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "16") (term "0,0,0,1,0,1,0"))
                              (rule "polySimp_sepNegMonomial" (formula "16") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0"))
                              (rule "polySimp_elimOne" (formula "16") (term "0,1,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0"))
                              (rule "mul_literals" (formula "15") (term "0,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "16") (term "0,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0"))
                              (rule "polySimp_mulLiterals" (formula "12") (term "0,0"))
                              (rule "polySimp_elimOne" (formula "12") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0"))
                              (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "27"))
                              (rule "polySimp_mulComm0" (formula "27") (term "1"))
                              (rule "polySimp_rightDist" (formula "27") (term "1"))
                              (rule "mul_literals" (formula "27") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "27") (term "1,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "1,1"))
                              (rule "polySimp_mulLiterals" (formula "12") (term "0,1,1"))
                              (rule "polySimp_elimOne" (formula "12") (term "0,1,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                              (rule "polySimp_elimOne" (formula "3") (term "0"))
                              (rule "inEqSimp_subsumption1" (formula "11") (term "1,0,0") (ifseqformula "9"))
                              (rule "inEqSimp_homoInEq0" (formula "11") (term "0,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                              (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                              (rule "polySimp_addComm0" (formula "11") (term "0,0,0,1,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "11") (term "1,1,0,0,1,0,0"))
                              (rule "times_zero_1" (formula "11") (term "1,0,0,1,0,0"))
                              (rule "add_zero_right" (formula "11") (term "0,0,1,0,0"))
                              (rule "qeq_literals" (formula "11") (term "0,1,0,0"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "pullOutSelect" (formula "60") (term "1,1") (inst "selectSK=arr_2"))
                              (rule "simplifySelectOfStore" (formula "1"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "castDel" (formula "1") (term "1,0"))
                              (rule "polySimp_addComm1" (formula "61") (term "1"))
                              (rule "polySimp_addComm0" (formula "61") (term "0,1"))
                              (rule "inEqSimp_contradEq7" (formula "1") (term "0,0") (ifseqformula "4"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0,0"))
                              (rule "add_literals" (formula "1") (term "1,1,0,0,0,0"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0,0"))
                              (rule "leq_literals" (formula "1") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "simplifySelectOfAnon" (formula "1"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "58")) (ifInst ""  (formula "23")))
                              (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
                              (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "3"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0"))
                              (rule "inEqSimp_subsumption1" (formula "1") (term "0,0") (ifseqformula "4"))
                              (rule "inEqSimp_homoInEq0" (formula "1") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0,0"))
                              (rule "add_literals" (formula "1") (term "1,1,0,0,0,0"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0,0,0"))
                              (rule "qeq_literals" (formula "1") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "applyEqReverse" (formula "61") (term "0,0,1") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "polySimp_addComm0" (formula "60") (term "0,1"))
                              (rule "polySimp_addComm1" (formula "60") (term "1"))
                              (rule "pullOutSelect" (formula "60") (term "0") (inst "selectSK=arr_3"))
                              (rule "simplifySelectOfStore" (formula "1"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "castDel" (formula "1") (term "1,0"))
                              (rule "polySimp_homoEq" (formula "61"))
                              (rule "polySimp_addComm1" (formula "61") (term "0"))
                              (rule "polySimp_addComm1" (formula "61") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "61") (term "0,0,0"))
                              (rule "polySimp_sepPosMonomial" (formula "61"))
                              (rule "polySimp_mulComm0" (formula "61") (term "1"))
                              (rule "polySimp_rightDist" (formula "61") (term "1"))
                              (rule "polySimp_rightDist" (formula "61") (term "0,1"))
                              (rule "polySimp_mulAssoc" (formula "61") (term "0,0,1"))
                              (rule "polySimp_mulComm0" (formula "61") (term "0,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "61") (term "0,0,1"))
                              (rule "polySimp_elimOne" (formula "61") (term "0,0,1"))
                              (rule "inEqSimp_antiSymm" (formula "10") (ifseqformula "2"))
                              (rule "applyEq" (formula "42") (term "1,3,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "16") (term "2,1,0,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "11") (term "0") (ifseqformula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "11"))
                              (rule "polySimp_pullOutFactor1" (formula "11") (term "0"))
                              (rule "add_literals" (formula "11") (term "1,0"))
                              (rule "times_zero_1" (formula "11") (term "0"))
                              (rule "leq_literals" (formula "11"))
                              (rule "true_left" (formula "11"))
                              (rule "applyEq" (formula "41") (term "2,1,0,0,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "28") (term "0") (ifseqformula "10"))
                              (rule "inEqSimp_homoInEq0" (formula "28"))
                              (rule "polySimp_addComm1" (formula "28") (term "0"))
                              (rule "applyEq" (formula "1") (term "0,0,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "16") (term "1,1,0,0,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "1") (term "2,1,0,2,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "16") (term "2,1,0,0,1,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "17") (term "2,1,0,2,0,1,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "2") (term "0") (ifseqformula "10"))
                              (rule "inEqSimp_homoInEq0" (formula "2"))
                              (rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
                              (rule "add_literals" (formula "2") (term "1,0"))
                              (rule "times_zero_1" (formula "2") (term "0"))
                              (rule "qeq_literals" (formula "2"))
                              (rule "true_left" (formula "2"))
                              (rule "applyEq" (formula "10") (term "0,0,0") (ifseqformula "9"))
                              (rule "replace_known_left" (formula "10") (term "0,0") (ifseqformula "8"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "applyEqReverse" (formula "12") (term "0,0,1") (ifseqformula "10"))
                              (rule "hideAuxiliaryEq" (formula "10"))
                              (rule "applyEq" (formula "39") (term "0,2,0,0") (ifseqformula "9"))
                              (rule "applyEq" (formula "3") (term "0") (ifseqformula "9"))
                              (rule "applyEq" (formula "15") (term "2,1,0,1,1,1,0") (ifseqformula "9"))
                              (rule "applyEq" (formula "31") (term "1") (ifseqformula "9"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "26"))
                              (rule "polySimp_mulComm0" (formula "26") (term "1"))
                              (rule "polySimp_rightDist" (formula "26") (term "1"))
                              (rule "mul_literals" (formula "26") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "26") (term "1,1"))
                              (rule "inEqSimp_exactShadow3" (formula "33") (ifseqformula "34"))
                              (rule "polySimp_mulComm0" (formula "33") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "33"))
                              (rule "polySimp_mulLiterals" (formula "33") (term "1"))
                              (rule "polySimp_elimOne" (formula "33") (term "1"))
                              (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=arr_4"))
                              (rule "simplifySelectOfAnon" (formula "1"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "57")) (ifInst ""  (formula "22")))
                              (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0"))
                              (rule "replace_known_left" (formula "1") (term "1,0,0") (ifseqformula "4"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "inEqSimp_homoInEq0" (formula "1") (term "0,0"))
                              (rule "times_zero_2" (formula "1") (term "1,0,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,0"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "inEqSimp_subsumption1" (formula "1") (term "0,0") (ifseqformula "3"))
                              (rule "leq_literals" (formula "1") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "inEqSimp_and_contradInEq0" (formula "14") (term "0,0"))
                              (rule "inEqSimp_homoInEq1" (formula "14") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,0,1,0,0"))
                              (rule "polySimp_rightDist" (formula "14") (term "1,0,1,0,0"))
                              (rule "mul_literals" (formula "14") (term "0,1,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "14") (term "0,1,0,0"))
                              (rule "polySimp_addComm0" (formula "14") (term "0,0,1,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,1,0,0"))
                              (rule "add_literals" (formula "14") (term "1,1,0,1,0,0"))
                              (rule "times_zero_1" (formula "14") (term "1,0,1,0,0"))
                              (rule "add_zero_right" (formula "14") (term "0,1,0,0"))
                              (rule "leq_literals" (formula "14") (term "1,0,0"))
                               (builtin "One Step Simplification" (formula "14"))
                              (rule "true_left" (formula "14"))
                              (rule "nnf_imp2or" (formula "14") (term "0"))
                              (rule "Definition_axiom_for_isClassifiedUntil_in_de_wiesler_Classifier" (formula "31") (term "0") (inst "b=b"))
                               (builtin "One Step Simplification" (formula "31"))
                              (rule "translateJavaSubInt" (formula "31") (term "1,1"))
                              (rule "andLeft" (formula "31"))
                              (rule "andLeft" (formula "31"))
                              (rule "andLeft" (formula "31"))
                              (rule "andLeft" (formula "31"))
                              (rule "polySimp_elimSub" (formula "35") (term "1"))
                              (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0"))
                              (rule "applyEq" (formula "34") (term "0,1,0,0,1,0,0") (ifseqformula "30"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "34") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0"))
                              (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "12") (term "0,2,0"))
                              (rule "polySimp_addComm0" (formula "12") (term "2,0"))
                              (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "38") (term "0"))
                               (builtin "One Step Simplification" (formula "38"))
                              (rule "translateJavaMod" (formula "38") (term "0"))
                              (rule "jmod_axiom" (formula "38") (term "0"))
                              (rule "polySimp_mulLiterals" (formula "38") (term "1,0"))
                              (rule "polySimp_sepNegMonomial" (formula "38"))
                              (rule "polySimp_mulLiterals" (formula "38") (term "0"))
                              (rule "newSym_eq" (formula "38") (inst "l=l_0") (inst "newSymDef=add(mul(begin, Z(0(#))), mul(write, Z(0(#))))"))
                              (rule "times_zero_1" (formula "38") (term "0,1,1"))
                              (rule "times_zero_1" (formula "38") (term "1,1,1"))
                              (rule "add_zero_left" (formula "38") (term "1,1"))
                              (rule "add_zero_right" (formula "38") (term "1"))
                              (rule "applyEq" (formula "39") (term "0,0") (ifseqformula "38"))
                              (rule "polySimp_homoEq" (formula "39"))
                              (rule "polySimp_mulLiterals" (formula "39") (term "1,0"))
                              (rule "polySimp_addComm1" (formula "39") (term "0"))
                              (rule "polySimp_addComm0" (formula "39") (term "0,0"))
                              (rule "polySimp_sepPosMonomial" (formula "39"))
                              (rule "polySimp_mulComm0" (formula "39") (term "1"))
                              (rule "polySimp_rightDist" (formula "39") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "39") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "39") (term "1,1"))
                              (rule "polySimp_mulComm0" (formula "39") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "39") (term "0,1"))
                              (rule "applyEq" (formula "36") (term "0") (ifseqformula "39"))
                              (rule "inEqSimp_homoInEq1" (formula "36"))
                              (rule "polySimp_mulComm0" (formula "36") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "36") (term "1,0"))
                              (rule "polySimp_mulAssoc" (formula "36") (term "0,1,0"))
                              (rule "polySimp_mulComm0" (formula "36") (term "0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "36") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "36") (term "0"))
                              (rule "polySimp_addComm0" (formula "36") (term "0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "36") (term "0"))
                              (rule "add_literals" (formula "36") (term "1,1,0"))
                              (rule "times_zero_1" (formula "36") (term "1,0"))
                              (rule "add_zero_right" (formula "36") (term "0"))
                              (rule "applyEq" (formula "32") (term "4,0") (ifseqformula "39"))
                              (rule "applyEq" (formula "38") (term "1,0,0") (ifseqformula "39"))
                              (rule "polySimp_addAssoc" (formula "38") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "38") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor2b" (formula "38") (term "0,0"))
                              (rule "add_literals" (formula "38") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "38") (term "1,0,0"))
                              (rule "add_zero_right" (formula "38") (term "0,0"))
                              (rule "applyEq" (formula "37") (term "0") (ifseqformula "39"))
                              (rule "inEqSimp_commuteLeq" (formula "37"))
                              (rule "applyEq" (formula "31") (term "4,0") (ifseqformula "39"))
                              (rule "applyEq" (formula "12") (term "4,0,2,0") (ifseqformula "39"))
                              (rule "applyEq" (formula "35") (term "0,1,1") (ifseqformula "39"))
                              (rule "polySimp_mulComm0" (formula "35") (term "1,1"))
                              (rule "polySimp_rightDist" (formula "35") (term "1,1"))
                              (rule "polySimp_mulAssoc" (formula "35") (term "0,1,1"))
                              (rule "polySimp_mulComm0" (formula "35") (term "0,0,1,1"))
                              (rule "polySimp_mulLiterals" (formula "35") (term "0,1,1"))
                              (rule "polySimp_addComm0" (formula "35") (term "1"))
                              (rule "applyEq" (formula "63") (term "4,0,1,1") (ifseqformula "39"))
                              (rule "applyEq" (formula "14") (term "4,1,0,1,1,0") (ifseqformula "39"))
                              (rule "inEqSimp_invertInEq0" (formula "36"))
                              (rule "mul_literals" (formula "36") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "36") (term "0"))
                              (rule "elimGcdGeq_antec" (formula "36") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
                              (rule "polySimp_mulLiterals" (formula "36") (term "1,0,0,0,0,1,0"))
                              (rule "leq_literals" (formula "36") (term "0,0"))
                               (builtin "One Step Simplification" (formula "36"))
                              (rule "times_zero_1" (formula "36") (term "1,0,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "36") (term "1,0,0"))
                              (rule "add_zero_right" (formula "36") (term "0,0,0,0"))
                              (rule "add_zero_right" (formula "36") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "36") (term "0,0"))
                              (rule "add_literals" (formula "36") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "36") (term "1,0,0"))
                              (rule "add_literals" (formula "36") (term "0,0"))
                              (rule "leq_literals" (formula "36") (term "0"))
                               (builtin "One Step Simplification" (formula "36"))
                              (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "23") (inst "b=b"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "translateJavaMulInt" (formula "23") (term "1,1,0,0,0"))
                              (rule "mul_literals" (formula "23") (term "1,1,0,0,0"))
                              (rule "andLeft" (formula "23"))
                              (rule "andLeft" (formula "23"))
                              (rule "andLeft" (formula "23"))
                              (rule "andLeft" (formula "25"))
                              (rule "andLeft" (formula "23"))
                              (rule "andLeft" (formula "23"))
                              (rule "andLeft" (formula "23"))
                              (rule "notLeft" (formula "25"))
                              (rule "notLeft" (formula "24"))
                              (rule "notLeft" (formula "23"))
                              (rule "eqSymm" (formula "50"))
                              (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "49"))
                               (builtin "One Step Simplification" (formula "6"))
                              (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "48"))
                               (builtin "One Step Simplification" (formula "5"))
                              (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "27") (term "0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "25"))
                              (rule "applyEq" (formula "26") (term "0") (ifseqformula "9"))
                              (rule "applyEq" (formula "25") (term "0") (ifseqformula "9"))
                              (rule "applyEq" (formula "26") (term "0,1,0,0,1,0,0") (ifseqformula "9"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "26") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
                              (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "25"))
                              (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                              (rule "mul_literals" (formula "3") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "3") (term "0"))
                              (rule "add_literals" (formula "3") (term "0,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                              (rule "polySimp_elimOne" (formula "3") (term "0"))
                              (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "44"))
                               (builtin "One Step Simplification" (formula "44"))
                              (rule "translateJavaSubInt" (formula "44") (term "0,2,1,1,0"))
                              (rule "translateJavaSubInt" (formula "44") (term "0,2,0,1,0"))
                              (rule "translateJavaMulInt" (formula "44") (term "1,1,1,0,0,0,0"))
                              (rule "andLeft" (formula "44"))
                              (rule "andLeft" (formula "44"))
                              (rule "andLeft" (formula "44"))
                              (rule "andLeft" (formula "44"))
                              (rule "andLeft" (formula "44"))
                              (rule "andLeft" (formula "44"))
                              (rule "andLeft" (formula "44"))
                              (rule "andLeft" (formula "46"))
                              (rule "notLeft" (formula "44"))
                              (rule "notLeft" (formula "44"))
                              (rule "eqSymm" (formula "49"))
                              (rule "eqSymm" (formula "46"))
                              (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "54"))
                               (builtin "One Step Simplification" (formula "5"))
                              (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "55"))
                               (builtin "One Step Simplification" (formula "8"))
                              (rule "polySimp_elimSub" (formula "49") (term "0,2,0"))
                              (rule "mul_literals" (formula "49") (term "1,0,2,0"))
                              (rule "eqSymm" (formula "49"))
                              (rule "polySimp_elimSub" (formula "49") (term "0,2,0"))
                              (rule "mul_literals" (formula "49") (term "1,0,2,0"))
                              (rule "eqSymm" (formula "49"))
                              (rule "polySimp_mulComm0" (formula "46") (term "1,0"))
                              (rule "polySimp_addComm0" (formula "49") (term "0,2,1"))
                              (rule "polySimp_addComm0" (formula "49") (term "0,2,0"))
                              (rule "inEqSimp_commuteLeq" (formula "44"))
                              (rule "applyEq" (formula "45") (term "0") (ifseqformula "34"))
                              (rule "applyEq" (formula "44") (term "0") (ifseqformula "34"))
                              (rule "applyEq" (formula "45") (term "1") (ifseqformula "34"))
                              (rule "inEqSimp_subsumption1" (formula "11") (term "0,0") (ifseqformula "44"))
                              (rule "leq_literals" (formula "11") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "applyEqReverse" (formula "12") (term "0,1,1,1") (ifseqformula "11"))
                              (rule "hideAuxiliaryEq" (formula "11"))
                              (rule "polySimp_addComm0" (formula "11") (term "1,1,1"))
                              (rule "inEqSimp_homoInEq1" (formula "11") (term "1,1"))
                              (rule "polySimp_addComm1" (formula "11") (term "0,1,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,1"))
                              (rule "polySimp_mulComm0" (formula "11") (term "1,1,1"))
                              (rule "polySimp_rightDist" (formula "11") (term "1,1,1"))
                              (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,1"))
                              (rule "polySimp_elimOne" (formula "11") (term "1,1,1,1"))
                              (rule "polySimp_mulComm0" (formula "11") (term "0,1,1,1"))
                              (rule "inEqSimp_subsumption1" (formula "11") (term "0") (ifseqformula "43"))
                              (rule "leq_literals" (formula "11") (term "0,0"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "andLeft" (formula "11"))
                              (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "44"))
                              (rule "leq_literals" (formula "9") (term "0"))
                               (builtin "One Step Simplification" (formula "9"))
                              (rule "true_left" (formula "9"))
                              (rule "nnf_notAnd" (formula "14") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "14") (term "0,0,0"))
                              (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0,0"))
                              (rule "add_literals" (formula "14") (term "0,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "14") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "1,0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "14") (term "1,0,0"))
                              (rule "times_zero_1" (formula "14") (term "1,0,0,1,0,0"))
                              (rule "add_zero_right" (formula "14") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                              (rule "mul_literals" (formula "14") (term "1,1,0,0"))
                              (rule "nnf_imp2or" (formula "37") (term "0"))
                              (rule "nnf_imp2or" (formula "26") (term "0"))
                              (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "75") (term "0,1,0,1"))
                              (rule "polySimp_addComm1" (formula "75") (term "1"))
                              (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "13") (term "0") (inst "i=i"))
                               (builtin "One Step Simplification" (formula "13"))
                              (rule "translateJavaSubInt" (formula "13") (term "1,1,0,0"))
                              (rule "translateJavaAddInt" (formula "13") (term "0,2,1,1,0"))
                              (rule "polySimp_elimSub" (formula "13") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "13") (term "1,1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "13") (term "0,2,1,1,0"))
                              (rule "polySimp_addComm0" (formula "13") (term "1,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
                              (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "51") (term "0") (inst "i=i"))
                               (builtin "One Step Simplification" (formula "51"))
                              (rule "translateJavaSubInt" (formula "51") (term "1,1,0,0"))
                              (rule "translateJavaAddInt" (formula "51") (term "0,2,1,1,0"))
                              (rule "polySimp_elimSub" (formula "51") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "51") (term "1,1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "51") (term "0,2,1,1,0"))
                              (rule "polySimp_addComm1" (formula "51") (term "1,1,0,0"))
                              (rule "add_literals" (formula "51") (term "0,1,1,0,0"))
                              (rule "add_zero_left" (formula "51") (term "1,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "51") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "51") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "51") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "51") (term "1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "51") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "51") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "51") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "51") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "51") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "51") (term "1,1,1,0,0"))
                              (rule "nnf_notAnd" (formula "37") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "37") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "37") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "37") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "37") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "37") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "37") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "37") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "37") (term "0,0,0"))
                              (rule "mul_literals" (formula "37") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "37") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "0,0,0"))
                              (rule "mul_literals" (formula "37") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "26") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                              (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                              (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "26") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0"))
                              (rule "nnf_imp2or" (formula "13") (term "0"))
                              (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "14") (term "0,0,1,1,0"))
                              (rule "polySimp_addComm0" (formula "14") (term "0,1,1,0"))
                              (rule "Contract_axiom_for_count_in_Buffers" (formula "38") (term "0"))
                              (rule "replace_known_left" (formula "38") (term "1,0,0,0") (ifseqformula "16"))
                               (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "21")) (ifInst ""  (formula "72")))
                              (rule "true_left" (formula "38"))
                              (rule "Definition_axiom_for_count_in_de_wiesler_Buffers" (formula "38") (term "0") (inst "b=b"))
                              (rule "translateJavaCastInt" (formula "38") (term "0"))
                              (rule "applyEq" (formula "38") (term "1,0") (ifseqformula "9"))
                              (rule "Contract_axiom_for_isClassifiedWith_in_Buffers" (formula "36") (term "0"))
                              (rule "replace_known_right" (formula "36") (term "0,1,1,1,0,0,0,0") (ifseqformula "75"))
                               (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "16")) (ifInst ""  (formula "21")) (ifInst ""  (formula "72")))
                              (rule "applyEq" (formula "36") (term "0,0,1,0") (ifseqformula "33"))
                              (rule "eqSymm" (formula "36") (term "0,1,0"))
                              (rule "replace_known_left" (formula "36") (term "0,1,0") (ifseqformula "9"))
                               (builtin "One Step Simplification" (formula "36"))
                              (rule "Definition_axiom_for_isClassifiedWith_in_de_wiesler_Buffers" (formula "37") (term "0") (inst "b=b"))
                               (builtin "One Step Simplification" (formula "37"))
                              (rule "translateJavaAddInt" (formula "37") (term "4,0,1,0"))
                              (rule "translateJavaMulInt" (formula "37") (term "3,0,1,0"))
                              (rule "translateJavaMulInt" (formula "37") (term "0,4,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "37") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "37") (term "0,0,0"))
                              (rule "applyEq" (formula "37") (term "0,1,0,0,1,0,0") (ifseqformula "9"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "37") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "37") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "37") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "37") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "37") (term "1,1,1,0,0"))
                              (rule "nnf_imp2or" (formula "52") (term "0"))
                              (rule "nnf_notAnd" (formula "13") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
                              (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "13") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                              (rule "mul_literals" (formula "13") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
                              (rule "Definition_axiom_for_isClassifiedBlocksRange_in_de_wiesler_Classifier" (formula "35") (term "0") (inst "block=block"))
                               (builtin "One Step Simplification" (formula "35"))
                              (rule "translateJavaMulInt" (formula "35") (term "1,4,0,1,0"))
                              (rule "translateJavaSubInt" (formula "35") (term "0,1,1,0,0"))
                              (rule "translateJavaAddInt" (formula "35") (term "3,0,1,0"))
                              (rule "translateJavaAddInt" (formula "35") (term "0,1,4,0,1,0"))
                              (rule "translateJavaDivInt" (formula "35") (term "1,1,0,0"))
                              (rule "translateJavaMulInt" (formula "35") (term "1,3,0,1,0"))
                              (rule "translateJavaAddInt" (formula "35") (term "4,0,1,0"))
                              (rule "polySimp_elimSub" (formula "35") (term "0,1,1,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,1,1,0,0"))
                              (rule "add_literals" (formula "35") (term "1,1,0,1,1,0,0"))
                              (rule "times_zero_1" (formula "35") (term "1,0,1,1,0,0"))
                              (rule "add_zero_right" (formula "35") (term "0,1,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "35") (term "1,4,0,1,0"))
                              (rule "polySimp_addComm0" (formula "35") (term "1,1,4,0,1,0"))
                              (rule "polySimp_rightDist" (formula "35") (term "1,4,0,1,0"))
                              (rule "mul_literals" (formula "35") (term "0,1,4,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "35") (term "4,0,1,0"))
                              (rule "polySimp_addComm0" (formula "35") (term "0,4,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0"))
                              (rule "applyEq" (formula "35") (term "0,1,0,0,1,0,0") (ifseqformula "42"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "35") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0"))
                              (rule "Contract_axiom_for_allElementsCounted_in_Classifier" (formula "34") (term "0"))
                              (rule "replace_known_left" (formula "34") (term "1,0,0") (ifseqformula "17"))
                               (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "75")) (ifInst ""  (formula "74")) (ifInst ""  (formula "16")) (ifInst ""  (formula "76")))
                              (rule "inEqSimp_commuteGeq" (formula "34") (term "0,0"))
                              (rule "applyEq" (formula "34") (term "0,0,0") (ifseqformula "33"))
                              (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0"))
                              (rule "inEqSimp_subsumption1" (formula "34") (term "0,0") (ifseqformula "28"))
                              (rule "inEqSimp_homoInEq0" (formula "34") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,0,0"))
                              (rule "add_literals" (formula "34") (term "1,1,0,0,0,0"))
                              (rule "times_zero_1" (formula "34") (term "1,0,0,0,0"))
                              (rule "add_zero_right" (formula "34") (term "0,0,0,0"))
                              (rule "qeq_literals" (formula "34") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "Definition_axiom_for_allElementsCounted_in_de_wiesler_Classifier" (formula "34") (term "0") (inst "b=b") (inst "b_0=b_0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "translateJavaCastInt" (formula "34") (term "0,1"))
                              (rule "translateJavaSubInt" (formula "34") (term "1,1"))
                              (rule "andLeft" (formula "34"))
                              (rule "polySimp_elimSub" (formula "35") (term "1"))
                              (rule "polySimp_pullOutFactor1b" (formula "35") (term "1"))
                              (rule "add_literals" (formula "35") (term "1,1,1"))
                              (rule "times_zero_1" (formula "35") (term "1,1"))
                              (rule "add_zero_right" (formula "35") (term "1"))
                              (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0"))
                              (rule "applyEq" (formula "35") (term "1,0") (ifseqformula "33"))
                              (rule "applyEq" (formula "34") (term "0,1,0,0,1,0,0") (ifseqformula "33"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "34") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0"))
                              (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "12") (term "0,2,0") (inst "i=i"))
                              (rule "polySimp_addComm0" (formula "12") (term "2,0"))
                              (rule "nnf_imp2or" (formula "38") (term "0"))
                              (rule "nnf_notAnd" (formula "53") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "53") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "53") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "53") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "53") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "53") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "53") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "53") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "53") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "53") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "53") (term "0,0,0"))
                              (rule "mul_literals" (formula "53") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "53") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "53") (term "0,0,0"))
                              (rule "mul_literals" (formula "53") (term "1,0,0,0"))
                              (rule "arrayLengthIsAShort" (formula "32") (term "0"))
                               (builtin "One Step Simplification" (formula "32"))
                              (rule "true_left" (formula "32"))
                              (rule "arrayLengthIsAShort" (formula "27") (term "0"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "true_left" (formula "27"))
                              (rule "arrayLengthNotNegative" (formula "32") (term "0"))
                              (rule "arrayLengthNotNegative" (formula "27") (term "0"))
                              (rule "nnf_imp2or" (formula "36") (term "0"))
                              (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "50"))
                               (builtin "One Step Simplification" (formula "50"))
                              (rule "translateJavaSubInt" (formula "50") (term "3,0,1"))
                              (rule "andLeft" (formula "50"))
                              (rule "andLeft" (formula "50"))
                              (rule "andLeft" (formula "50"))
                              (rule "andLeft" (formula "51"))
                              (rule "andLeft" (formula "50"))
                              (rule "andLeft" (formula "50"))
                              (rule "andLeft" (formula "50"))
                              (rule "andLeft" (formula "52"))
                              (rule "notLeft" (formula "50"))
                              (rule "notLeft" (formula "50"))
                              (rule "polySimp_elimSub" (formula "56") (term "3,0"))
                              (rule "mul_literals" (formula "56") (term "1,3,0"))
                              (rule "polySimp_addComm0" (formula "56") (term "3,0"))
                              (rule "inEqSimp_commuteLeq" (formula "55"))
                              (rule "inEqSimp_commuteLeq" (formula "54"))
                              (rule "inEqSimp_commuteLeq" (formula "53"))
                              (rule "inEqSimp_commuteLeq" (formula "50"))
                              (rule "applyEq" (formula "56") (term "1,0") (ifseqformula "47"))
                              (rule "applyEq" (formula "54") (term "1") (ifseqformula "52"))
                              (rule "applyEq" (formula "56") (term "1,3,0") (ifseqformula "52"))
                              (rule "applyEq" (formula "55") (term "1") (ifseqformula "52"))
                              (rule "applyEq" (formula "61") (term "0") (ifseqformula "47"))
                              (rule "applyEq" (formula "49") (term "1,0,2,0") (ifseqformula "52"))
                              (rule "eqSymm" (formula "49"))
                              (rule "applyEq" (formula "48") (term "3,0") (ifseqformula "52"))
                              (rule "applyEq" (formula "46") (term "0,1,0") (ifseqformula "52"))
                              (rule "applyEq" (formula "46") (term "2,0") (ifseqformula "52"))
                              (rule "applyEq" (formula "53") (term "0") (ifseqformula "52"))
                              (rule "applyEq" (formula "55") (term "0,0") (ifseqformula "47"))
                              (rule "inEqSimp_commuteGeq" (formula "55"))
                              (rule "applyEq" (formula "49") (term "1,0,2,0") (ifseqformula "52"))
                              (rule "eqSymm" (formula "49"))
                              (rule "inEqSimp_exactShadow3" (formula "53") (ifseqformula "55"))
                              (rule "mul_literals" (formula "53") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "53"))
                              (rule "mul_literals" (formula "53") (term "1"))
                              (rule "nnf_imp2or" (formula "34") (term "0"))
                              (rule "nnf_notAnd" (formula "38") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "38") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "38") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "38") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "38") (term "0,0,0"))
                              (rule "mul_literals" (formula "38") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "38") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0"))
                              (rule "mul_literals" (formula "38") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "36") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "36") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "36") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "36") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0"))
                              (rule "mul_literals" (formula "36") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "36") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0"))
                              (rule "mul_literals" (formula "36") (term "1,0,0,0"))
                              (rule "Definition_axiom_for_isValidBufferLen_in_de_wiesler_Classifier" (formula "39") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "39"))
                              (rule "inEqSimp_ltToLeq" (formula "39") (term "0,1,1,0"))
                              (rule "add_zero_right" (formula "39") (term "0,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "39") (term "0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "39") (term "0,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "39") (term "0,0,1,1,0"))
                              (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "85") (term "0,1,0,1") (inst "i=i"))
                              (rule "polySimp_homoEq" (formula "85"))
                              (rule "polySimp_addComm1" (formula "85") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "85") (term "0"))
                              (rule "polySimp_sepNegMonomial" (formula "85"))
                              (rule "polySimp_mulLiterals" (formula "85") (term "0"))
                              (rule "polySimp_elimOne" (formula "85") (term "0"))
                              (rule "nnf_notAnd" (formula "34") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0"))
                              (rule "mul_literals" (formula "34") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "34") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0"))
                              (rule "mul_literals" (formula "34") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "34") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "34") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0"))
                              (rule "commute_or" (formula "14") (term "0,0"))
                              (rule "ifthenelse_split" (formula "1") (term "0"))
                              (branch "j_0 = 1 + b_0 TRUE"
                                 (rule "applyEqReverse" (formula "86") (term "0,0,1") (ifseqformula "2"))
                                 (rule "hideAuxiliaryEq" (formula "2"))
                                 (rule "applyEqRigid" (formula "60") (term "2,1,0,0,1,1,0") (ifseqformula "1"))
                                 (rule "applyEqRigid" (formula "14") (term "1,1,0,0") (ifseqformula "1"))
                                 (rule "applyEqRigid" (formula "38") (term "1,1,0,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "60") (term "0,2,0,0,1,0") (ifseqformula "1"))
                                 (rule "applyEqRigid" (formula "60") (term "1,1,0,0") (ifseqformula "1"))
                                 (rule "applyEqRigid" (formula "40") (term "1,0") (ifseqformula "1"))
                                 (rule "bsum_induction_upper_concrete" (formula "40") (term "0"))
                                 (rule "polySimp_homoEq" (formula "40"))
                                 (rule "polySimp_mulComm0" (formula "40") (term "1,0"))
                                 (rule "polySimp_addComm0" (formula "40") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "40") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "40") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "40") (term "0"))
                                 (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,1,0,0"))
                                 (rule "replace_known_left" (formula "40") (term "0,0,1,0,0") (ifseqformula "2"))
                                  (builtin "One Step Simplification" (formula "40"))
                                 (rule "applyEq" (formula "60") (term "2,1,0,0,0,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "39") (term "1,1,0,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "4") (term "0") (ifseqformula "1"))
                                 (rule "inEqSimp_homoInEq1" (formula "4"))
                                 (rule "polySimp_pullOutFactor1" (formula "4") (term "0"))
                                 (rule "add_literals" (formula "4") (term "1,0"))
                                 (rule "times_zero_1" (formula "4") (term "0"))
                                 (rule "leq_literals" (formula "4"))
                                 (rule "true_left" (formula "4"))
                                 (rule "applyEqRigid" (formula "11") (term "1,0") (ifseqformula "1"))
                                 (rule "bsum_induction_upper_concrete" (formula "11") (term "0"))
                                 (rule "polySimp_homoEq" (formula "11"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
                                 (rule "polySimp_addComm0" (formula "11") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "11") (term "0"))
                                 (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,1,0,0"))
                                 (rule "replace_known_left" (formula "11") (term "0,0,1,0,0") (ifseqformula "2"))
                                  (builtin "One Step Simplification" (formula "11"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
                                 (rule "applyEqRigid" (formula "10") (term "1,0,2,0") (ifseqformula "1"))
                                 (rule "polySimp_addAssoc" (formula "10") (term "0,2,0"))
                                 (rule "add_literals" (formula "10") (term "0,0,2,0"))
                                 (rule "add_zero_left" (formula "10") (term "0,2,0"))
                                 (rule "applyEq" (formula "44") (term "0") (ifseqformula "1"))
                                 (rule "inEqSimp_homoInEq1" (formula "44"))
                                 (rule "polySimp_mulComm0" (formula "44") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "44") (term "1,0"))
                                 (rule "mul_literals" (formula "44") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "44") (term "0"))
                                 (rule "add_literals" (formula "44") (term "0,0"))
                                 (rule "applyEqRigid" (formula "12") (term "1,1,1,0,0") (ifseqformula "1"))
                                 (rule "polySimp_addAssoc" (formula "12") (term "1,1,0,0"))
                                 (rule "add_literals" (formula "12") (term "0,1,1,0,0"))
                                 (rule "add_zero_left" (formula "12") (term "1,1,0,0"))
                                 (rule "applyEq" (formula "34") (term "1,0") (ifseqformula "1"))
                                 (rule "bsum_induction_upper_concrete" (formula "34") (term "0"))
                                 (rule "polySimp_homoEq" (formula "34"))
                                 (rule "polySimp_mulComm0" (formula "34") (term "1,0"))
                                 (rule "polySimp_addComm0" (formula "34") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "34") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "34") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "34") (term "0"))
                                 (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,1,0,0"))
                                 (rule "replace_known_left" (formula "34") (term "0,0,1,0,0") (ifseqformula "2"))
                                  (builtin "One Step Simplification" (formula "34"))
                                 (rule "applyEq" (formula "12") (term "2,1,0,1,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "24") (term "0") (ifseqformula "1"))
                                 (rule "inEqSimp_homoInEq0" (formula "24"))
                                 (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "24") (term "1,0"))
                                 (rule "mul_literals" (formula "24") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "24") (term "0"))
                                 (rule "add_literals" (formula "24") (term "0,0"))
                                 (rule "applyEq" (formula "12") (term "2,1,0,0,1,0") (ifseqformula "1"))
                                 (rule "applyEqRigid" (formula "33") (term "1,1,0,0") (ifseqformula "1"))
                                 (rule "applyEqRigid" (formula "27") (term "1,1") (ifseqformula "1"))
                                 (rule "polySimp_addAssoc" (formula "27") (term "1"))
                                 (rule "add_literals" (formula "27") (term "0,1"))
                                 (rule "applyEq" (formula "25") (term "1,1,0,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "13") (term "2,1,0,2,0,1,0") (ifseqformula "1"))
                                 (rule "applyEqRigid" (formula "59") (term "0,2,0,1,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "8") (term "1") (ifseqformula "1"))
                                 (rule "applyEqRigid" (formula "13") (term "1,1,0,0,1,0") (ifseqformula "1"))
                                 (rule "polySimp_addAssoc" (formula "13") (term "1,0,0,1,0"))
                                 (rule "add_literals" (formula "13") (term "0,1,0,0,1,0"))
                                 (rule "add_zero_left" (formula "13") (term "1,0,0,1,0"))
                                 (rule "applyEqRigid" (formula "13") (term "2,1,0,1,1,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "32") (term "1") (ifseqformula "1"))
                                 (rule "applyEq" (formula "45") (term "1") (ifseqformula "1"))
                                 (rule "polySimp_sepNegMonomial" (formula "39"))
                                 (rule "polySimp_mulLiterals" (formula "39") (term "0"))
                                 (rule "polySimp_elimOne" (formula "39") (term "0"))
                                 (rule "polySimp_sepNegMonomial" (formula "11"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                                 (rule "polySimp_elimOne" (formula "11") (term "0"))
                                 (rule "polySimp_sepNegMonomial" (formula "34"))
                                 (rule "polySimp_mulLiterals" (formula "34") (term "0"))
                                 (rule "polySimp_elimOne" (formula "34") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "44"))
                                 (rule "polySimp_mulLiterals" (formula "44") (term "0"))
                                 (rule "polySimp_elimOne" (formula "44") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "24"))
                                 (rule "polySimp_mulLiterals" (formula "24") (term "0"))
                                 (rule "polySimp_elimOne" (formula "24") (term "0"))
                                 (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "43"))
                                 (rule "leq_literals" (formula "2") (term "0"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "true_left" (formula "2"))
                                 (rule "nnf_imp2or" (formula "36") (term "1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "36") (term "0,1,1,0"))
                                 (rule "mul_literals" (formula "36") (term "1,0,0,0,1,1,0"))
                                 (rule "add_literals" (formula "36") (term "0,0,0,1,1,0"))
                                 (rule "add_zero_left" (formula "36") (term "0,0,1,1,0"))
                                 (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "12") (term "0,0,1,1,0") (inst "i=i"))
                                 (rule "polySimp_homoEq" (formula "12") (term "1,0"))
                                 (rule "polySimp_addComm0" (formula "12") (term "0,0,0,1,0"))
                                 (rule "polySimp_addComm1" (formula "12") (term "0,0,1,0"))
                                 (rule "polySimp_addComm1" (formula "12") (term "0,1,0"))
                                 (rule "polySimp_sepPosMonomial" (formula "12") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "12") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "12") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "12") (term "0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "12") (term "0,0,1,1,0"))
                                 (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "34") (term "1,0") (inst "b=b"))
                                  (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "61")) (ifInst ""  (formula "62")) (ifInst ""  (formula "22")))
                                 (rule "translateJavaMulInt" (formula "34") (term "1,1,0,0,1,0"))
                                 (rule "mul_literals" (formula "34") (term "1,1,0,0,1,0"))
                                 (rule "eqSymm" (formula "34") (term "0,0,0,0,1,0"))
                                 (rule "replace_known_left" (formula "34") (term "1,0,0,1,0") (ifseqformula "21"))
                                  (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "72")))
                                 (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0,1,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "34") (term "0,1,0,1,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0,1,1,0"))
                                 (rule "applyEq" (formula "34") (term "0,0,0,1,0") (ifseqformula "7"))
                                 (rule "applyEq" (formula "34") (term "0,1,0,1,0") (ifseqformula "7"))
                                 (rule "inEqSimp_homoInEq0" (formula "34") (term "1,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "34") (term "1,0,1,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "34") (term "1,0,1,0,1,0"))
                                 (rule "mul_literals" (formula "34") (term "0,1,0,1,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "34") (term "0,1,0,1,0"))
                                 (rule "add_literals" (formula "34") (term "0,0,1,0,1,0"))
                                 (rule "applyEq" (formula "34") (term "0,1,0,0,1,0,0,1,1,0") (ifseqformula "7"))
                                 (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,1,1,0"))
                                 (rule "add_literals" (formula "34") (term "0,0,0,1,0,0,1,1,0"))
                                 (rule "add_zero_left" (formula "34") (term "0,0,1,0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "0,0,1,0"))
                                 (rule "mul_literals" (formula "34") (term "1,0,0,1,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "34") (term "1,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "34") (term "0,1,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "34") (term "0,1,0,1,0"))
                                 (rule "replace_known_left" (formula "34") (term "1,0,1,0") (ifseqformula "2"))
                                  (builtin "One Step Simplification" (formula "34"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,1,1,0"))
                                 (rule "inEqSimp_subsumption1" (formula "34") (term "0,1,0") (ifseqformula "42"))
                                 (rule "leq_literals" (formula "34") (term "0,0,1,0"))
                                  (builtin "One Step Simplification" (formula "34"))
                                 (rule "jdiv_axiom" (formula "40") (term "0"))
                                 (rule "polySimp_mulLiterals" (formula "40") (term "0,0,2,1"))
                                 (rule "eqSymm" (formula "40"))
                                 (rule "applyEqRigid" (formula "40") (term "1") (ifseqformula "41"))
                                 (rule "inEqSimp_subsumption6" (formula "40") (term "0,0") (ifseqformula "38"))
                                 (rule "mul_literals" (formula "40") (term "1,1,0,0,0"))
                                 (rule "greater_literals" (formula "40") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "40"))
                                 (rule "leq_literals" (formula "40") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "40"))
                                 (rule "polyDiv_pullOut" (formula "40") (term "0") (inst "polyDivCoeff=l_0"))
                                 (rule "equal_literals" (formula "40") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "40"))
                                 (rule "polySimp_mulLiterals" (formula "40") (term "1,0,0,0"))
                                 (rule "polySimp_homoEq" (formula "40"))
                                 (rule "polySimp_pullOutFactor0" (formula "40") (term "0,0,0,1,0"))
                                 (rule "add_literals" (formula "40") (term "1,0,0,0,1,0"))
                                 (rule "times_zero_1" (formula "40") (term "0,0,0,1,0"))
                                 (rule "div_literals" (formula "40") (term "0,0,1,0"))
                                 (rule "add_zero_left" (formula "40") (term "0,1,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "40") (term "0"))
                                 (rule "add_literals" (formula "40") (term "1,0"))
                                 (rule "times_zero_1" (formula "40") (term "0"))
                                  (builtin "One Step Simplification" (formula "40"))
                                 (rule "true_left" (formula "40"))
                                 (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "35") (term "1,4,0,1,0"))
                                 (rule "Contract_axiom_for_isClassifiedBlock_in_Classifier" (formula "33") (term "0,1,0"))
                                 (rule "replace_known_right" (formula "33") (term "0,1,0") (ifseqformula "82"))
                                  (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "81")) (ifInst ""  (formula "14")) (ifInst ""  (formula "15")))
                                 (rule "true_left" (formula "33"))
                                 (rule "Definition_axiom_for_isClassifiedBlock_in_de_wiesler_Classifier" (formula "33") (term "0,1,0") (inst "bucket=bucket"))
                                  (builtin "One Step Simplification" (formula "33"))
                                 (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0,1,0"))
                                 (rule "applyEq" (formula "33") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "30"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0,1,0"))
                                 (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0,1,0"))
                                 (rule "add_literals" (formula "33") (term "0,0,0,1,0,0,1,0"))
                                 (rule "add_zero_left" (formula "33") (term "0,0,1,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0,1,0"))
                                 (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "54") (term "0"))
                                 (rule "replace_known_left" (formula "54") (term "1,0") (ifseqformula "14"))
                                  (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "60")) (ifInst ""  (formula "55")))
                                 (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "55") (term "0") (inst "i=i") (inst "j=j_1"))
                                  (builtin "One Step Simplification" (formula "55"))
                                 (rule "inEqSimp_ltToLeq" (formula "55") (term "1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "55") (term "1,0,0,1,0,0,1,0"))
                                 (rule "mul_literals" (formula "55") (term "0,1,0,0,1,0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "55") (term "0,0,1,0,0,1,0"))
                                 (rule "add_literals" (formula "55") (term "0,0,0,1,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "55") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "55") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "55") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "55") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "55") (term "0,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "55") (term "0,0,0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "55") (term "1,0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "55") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "55") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "55") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "55") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "55") (term "1,1,1,0,0,1,0"))
                                 (rule "mul_literals" (formula "55") (term "0,1,1,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "55") (term "1,1,1,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "55") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "55") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "55") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "55") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "55") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "55") (term "1,1,1,0,0"))
                                 (rule "arrayLengthIsAShort" (formula "22") (term "0"))
                                  (builtin "One Step Simplification" (formula "22"))
                                 (rule "true_left" (formula "22"))
                                 (rule "arrayLengthNotNegative" (formula "22") (term "0"))
                                 (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                                 (rule "qeq_literals" (formula "22"))
                                 (rule "true_left" (formula "22"))
                                 (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "45") (term "0") (inst "i=i") (inst "j=j_1"))
                                  (builtin "One Step Simplification" (formula "45"))
                                 (rule "inEqSimp_ltToLeq" (formula "45") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "45") (term "1,0,0,1,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "45") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "45") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "45") (term "0,0,0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "45") (term "1,0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "45") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "45") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "45") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "45") (term "1,1,0,0,1,0"))
                                 (rule "mul_literals" (formula "45") (term "0,1,1,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "45") (term "1,1,1,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "45") (term "1,1,1,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "45") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "45") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "45") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "45") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "45") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "45") (term "1,1,1,0,0"))
                                 (rule "arrayLengthIsAShort" (formula "21") (term "0"))
                                  (builtin "One Step Simplification" (formula "21"))
                                 (rule "true_left" (formula "21"))
                                 (rule "arrayLengthNotNegative" (formula "21") (term "0"))
                                 (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
                                 (rule "qeq_literals" (formula "21"))
                                 (rule "true_left" (formula "21"))
                                 (rule "Contract_axiom_for_countClassOfSliceEq_in_Classifier" (formula "31") (term "1,1,0"))
                                 (rule "replace_known_left" (formula "31") (term "1,0,0,0") (ifseqformula "14"))
                                  (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "82")) (ifInst ""  (formula "15")) (ifInst ""  (formula "83")))
                                 (rule "true_left" (formula "31"))
                                 (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "31") (term "1,1,0") (inst "i=i"))
                                 (rule "eqSymm" (formula "31") (term "1,0"))
                                 (rule "nnf_imp2or" (formula "34") (term "0,1,0"))
                                 (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "36") (term "0,1,0,1,0"))
                                  (builtin "One Step Simplification" (formula "36"))
                                 (rule "translateJavaMod" (formula "36") (term "0,1,0,1,0"))
                                 (rule "jmod_axiom" (formula "36") (term "0,1,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "36") (term "1,0,1,0,1,0"))
                                 (rule "polySimp_sepNegMonomial" (formula "36") (term "1,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "36") (term "0,1,0,1,0"))
                                 (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "83") (term "0,0,2,0"))
                                 (rule "nnf_imp2or" (formula "55") (term "0"))
                                 (rule "nnf_imp2or" (formula "45") (term "0"))
                                 (rule "nnf_notAnd" (formula "55") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "55") (term "0,0,0"))
                                 (rule "mul_literals" (formula "55") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "55") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "55") (term "0,0,0"))
                                 (rule "mul_literals" (formula "55") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "55") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "55") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "55") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "55") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "55") (term "0,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "55") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "55") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "55") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "55") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "55") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "55") (term "1,1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "45") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "45") (term "0,0,0"))
                                 (rule "mul_literals" (formula "45") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "45") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "45") (term "0,0,0"))
                                 (rule "mul_literals" (formula "45") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "45") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "45") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "45") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "45") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "45") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "45") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "45") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "45") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "45") (term "1,1,0,0"))
                                 (rule "nnf_imp2or" (formula "55") (term "0,1,0"))
                                 (rule "nnf_notAnd" (formula "34") (term "0,0,1,0"))
                                 (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,1,0"))
                                 (rule "mul_literals" (formula "34") (term "0,1,1,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0,1,0"))
                                 (rule "times_zero_1" (formula "34") (term "1,0,0,0,0,0,1,0"))
                                 (rule "add_zero_right" (formula "34") (term "0,0,0,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0,1,0"))
                                 (rule "mul_literals" (formula "34") (term "1,0,0,0,1,0"))
                                 (rule "replace_known_left" (formula "34") (term "1,0") (ifseqformula "23"))
                                  (builtin "One Step Simplification" (formula "34"))
                                 (rule "nnf_imp2or" (formula "45") (term "0,1,0"))
                                 (rule "Contract_axiom_for_bufferLen_in_Buffers" (formula "37") (term "0,1,1"))
                                  (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "14")) (ifInst ""  (formula "19")) (ifInst ""  (formula "80")))
                                 (rule "inEqSimp_ltToLeq" (formula "37") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1,0,0"))
                                 (rule "polySimp_addComm1" (formula "37") (term "0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "37") (term "0,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "37") (term "0,0,0"))
                                 (rule "applyEq" (formula "37") (term "0,1,0,1,0,0") (ifseqformula "7"))
                                 (rule "polySimp_pullOutFactor1" (formula "37") (term "0,1,0,0"))
                                 (rule "add_literals" (formula "37") (term "1,0,1,0,0"))
                                 (rule "times_zero_1" (formula "37") (term "0,1,0,0"))
                                 (rule "leq_literals" (formula "37") (term "1,0,0"))
                                  (builtin "One Step Simplification" (formula "37"))
                                 (rule "inEqSimp_subsumption1" (formula "37") (term "0,0") (ifseqformula "43"))
                                 (rule "leq_literals" (formula "37") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "37"))
                                 (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "38") (term "0,1,1"))
                                 (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "38") (term "2,0"))
                                 (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "10") (term "0,0,2,0,1,1"))
                                 (rule "polySimp_homoEq" (formula "10"))
                                 (rule "polySimp_addComm1" (formula "10") (term "0"))
                                 (rule "polySimp_sepNegMonomial" (formula "10"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                                 (rule "polySimp_elimOne" (formula "10") (term "0"))
                                 (rule "applyEq" (formula "84") (term "0") (ifseqformula "10"))
                                 (rule "polySimp_homoEq" (formula "84"))
                                 (rule "polySimp_mulComm0" (formula "84") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "84") (term "1,0"))
                                 (rule "polySimp_mulLiterals" (formula "84") (term "1,1,0"))
                                 (rule "polySimp_elimOne" (formula "84") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "84") (term "0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "84") (term "1,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "84") (term "1,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "84") (term "0,0,1,0"))
                                 (rule "polySimp_mulAssoc" (formula "84") (term "0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "84") (term "0,0,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "84") (term "0,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "84") (term "0,0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "84") (term "0"))
                                 (rule "polySimp_addComm1" (formula "84") (term "0,0"))
                                 (rule "polySimp_addAssoc" (formula "84") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "84") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor2b" (formula "84") (term "0,0,0"))
                                 (rule "add_literals" (formula "84") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "84") (term "1,0,0,0"))
                                 (rule "add_zero_right" (formula "84") (term "0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "84") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "84") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor2" (formula "84") (term "0,0,0,0,0"))
                                 (rule "add_literals" (formula "84") (term "1,0,0,0,0,0"))
                                 (rule "times_zero_1" (formula "84") (term "0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "84") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "84") (term "0,0,0"))
                                 (rule "add_literals" (formula "84") (term "1,0,0,0"))
                                 (rule "times_zero_1" (formula "84") (term "0,0,0"))
                                 (rule "add_zero_left" (formula "84") (term "0,0"))
                                 (rule "polySimp_sepPosMonomial" (formula "84"))
                                 (rule "polySimp_mulLiterals" (formula "84") (term "1"))
                                 (rule "polySimp_elimOne" (formula "84") (term "1"))
                                 (rule "nnf_notAnd" (formula "56") (term "0,0,1,0"))
                                 (rule "inEqSimp_notLeq" (formula "56") (term "1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "56") (term "1,0,0,1,0,0,1,0"))
                                 (rule "mul_literals" (formula "56") (term "0,1,0,0,1,0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "56") (term "0,0,1,0,0,1,0"))
                                 (rule "add_literals" (formula "56") (term "0,0,0,1,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "56") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "56") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "56") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "56") (term "1,1,1,0,0,1,0"))
                                 (rule "mul_literals" (formula "56") (term "0,1,1,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "56") (term "1,1,1,0,0,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "56") (term "0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "56") (term "1,0,0,0,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "56") (term "0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "56") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "56") (term "1,0,0,0,1,0"))
                                 (rule "mul_literals" (formula "56") (term "0,1,0,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "56") (term "1,1,0,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "56") (term "1,1,0,0,0,1,0"))
                                 (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "12") (term "0,0,2,0,1,0"))
                                 (rule "nnf_notAnd" (formula "46") (term "0,0,1,0"))
                                 (rule "inEqSimp_notLeq" (formula "46") (term "1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "46") (term "1,0,0,1,0,0,1,0"))
                                 (rule "mul_literals" (formula "46") (term "0,1,0,0,1,0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "46") (term "0,0,1,0,0,1,0"))
                                 (rule "add_literals" (formula "46") (term "0,0,0,1,0,0,1,0"))
                                 (rule "add_zero_left" (formula "46") (term "0,0,1,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "46") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "46") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "46") (term "1,1,0,0,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "46") (term "0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "46") (term "1,0,0,0,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "46") (term "0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "46") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "46") (term "1,0,0,0,1,0"))
                                 (rule "mul_literals" (formula "46") (term "0,1,0,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "46") (term "1,1,0,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "46") (term "1,1,0,0,0,1,0"))
                                 (rule "cnf_rightDist" (formula "23") (term "0"))
                                 (rule "Definition_axiom_for_isClassOfSlice_in_de_wiesler_Classifier" (formula "35") (term "0,1,0") (inst "i=i"))
                                  (builtin "One Step Simplification" (formula "35"))
                                 (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,1,0"))
                                 (rule "polySimp_mulAssoc" (formula "35") (term "0,1,0,0,1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "35") (term "0,0,1,0,0,1,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "35") (term "0,1,0,0,1,0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "35") (term "0,1,1,0,0,1,0"))
                                 (rule "mul_literals" (formula "35") (term "0,0,1,1,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "35") (term "1,0,1,1,0,0,1,0"))
                                 (rule "Definition_axiom_for_isClassOfSlice_in_de_wiesler_Classifier" (formula "33") (term "0,1,0,1,0") (inst "i=i"))
                                  (builtin "One Step Simplification" (formula "33"))
                                 (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0,1,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0,1,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0,1,0,0,1,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "0,1,0,0,1,0,0,1,0,1,0"))
                                 (rule "mul_literals" (formula "33") (term "0,0,1,0,0,1,0,0,1,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0,1,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "33") (term "0,0,0,1,0,0,1,0,1,0"))
                                 (rule "add_literals" (formula "33") (term "0,0,0,0,1,0,0,1,0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0,1,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0,1,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0,1,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0,1,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0,1,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "0,1,1,0,0,1,0,1,0"))
                                 (rule "mul_literals" (formula "33") (term "0,0,1,1,0,0,1,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "33") (term "1,0,1,1,0,0,1,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "33") (term "1,0,1,1,0,0,1,0,1,0"))
                                 (rule "ifthenelse_split" (formula "44") (term "0"))
                                 (branch "self.equal_buckets = TRUE TRUE"
                                    (rule "newSym_eq" (formula "45") (inst "l=l_1") (inst "newSymDef=add(Z(0(#)), mul(b_0, Z(0(#))))"))
                                    (rule "add_zero_left" (formula "45") (term "1,1"))
                                    (rule "times_zero_1" (formula "45") (term "1,1"))
                                    (rule "add_zero_right" (formula "45") (term "1"))
                                    (rule "applyEq" (formula "55") (term "1") (ifseqformula "45"))
                                    (rule "applyEq" (formula "46") (term "0,0") (ifseqformula "45"))
                                    (rule "polySimp_homoEq" (formula "46"))
                                    (rule "polySimp_mulLiterals" (formula "46") (term "1,0"))
                                    (rule "polySimp_addComm1" (formula "46") (term "0"))
                                    (rule "applyEq" (formula "58") (term "1,1,1,0,0,1,0") (ifseqformula "45"))
                                    (rule "applyEq" (formula "58") (term "1,1,1,0,0") (ifseqformula "45"))
                                    (rule "applyEq" (formula "48") (term "1,1,0,0,1,0") (ifseqformula "45"))
                                    (rule "applyEq" (formula "49") (term "1,0,2,0") (ifseqformula "45"))
                                    (rule "eqSymm" (formula "49"))
                                    (rule "applyEq" (formula "57") (term "1,3,0") (ifseqformula "45"))
                                    (rule "applyEq" (formula "56") (term "0") (ifseqformula "45"))
                                    (rule "inEqSimp_commuteLeq" (formula "56"))
                                    (rule "applyEq" (formula "48") (term "1,1,0,0") (ifseqformula "45"))
                                    (rule "applyEq" (formula "54") (term "0") (ifseqformula "45"))
                                    (rule "applyEq" (formula "52") (term "1") (ifseqformula "45"))
                                    (rule "applyEq" (formula "49") (term "1,0,2,0") (ifseqformula "45"))
                                    (rule "eqSymm" (formula "49"))
                                    (rule "polySimp_sepPosMonomial" (formula "46"))
                                    (rule "polySimp_mulComm0" (formula "46") (term "1"))
                                    (rule "polySimp_rightDist" (formula "46") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "46") (term "1,1"))
                                    (rule "mul_literals" (formula "46") (term "0,1"))
                                    (rule "applyEqRigid" (formula "61") (term "1,0,2,0,1,1,0") (ifseqformula "46"))
                                    (rule "polySimp_addAssoc" (formula "61") (term "0,2,0,1,1,0"))
                                    (rule "add_literals" (formula "61") (term "0,0,2,0,1,1,0"))
                                    (rule "add_zero_left" (formula "61") (term "0,2,0,1,1,0"))
                                    (rule "applyEqRigid" (formula "61") (term "1,2,1,0,0,1,1,0") (ifseqformula "46"))
                                    (rule "polySimp_addAssoc" (formula "61") (term "2,1,0,0,1,1,0"))
                                    (rule "add_literals" (formula "61") (term "0,2,1,0,0,1,1,0"))
                                    (rule "add_zero_left" (formula "61") (term "2,1,0,0,1,1,0"))
                                    (rule "applyEq" (formula "11") (term "1,2,1,0,1,1,0") (ifseqformula "46"))
                                    (rule "polySimp_addAssoc" (formula "11") (term "2,1,0,1,1,0"))
                                    (rule "add_literals" (formula "11") (term "0,2,1,0,1,1,0"))
                                    (rule "add_zero_left" (formula "11") (term "2,1,0,1,1,0"))
                                    (rule "applyEq" (formula "37") (term "2,0,1,0,1") (ifseqformula "46"))
                                    (rule "applyEqRigid" (formula "38") (term "1,0") (ifseqformula "46"))
                                    (rule "bsum_induction_upper2_concrete" (formula "38") (term "0"))
                                    (rule "polySimp_elimSub" (formula "38") (term "0,2,1,1,0"))
                                    (rule "mul_literals" (formula "38") (term "1,0,2,1,1,0"))
                                    (rule "polySimp_elimSub" (formula "38") (term "0"))
                                    (rule "polySimp_homoEq" (formula "38"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,0"))
                                    (rule "polySimp_addComm0" (formula "38") (term "1,1,0"))
                                    (rule "polySimp_addComm0" (formula "38") (term "0,2,1,0,0,1,1,0"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,0"))
                                    (rule "polySimp_mulAssoc" (formula "38") (term "0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "38") (term "0,1,0"))
                                    (rule "polySimp_elimOne" (formula "38") (term "0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "38") (term "0"))
                                    (rule "inEqSimp_ltToLeq" (formula "38") (term "0,1,0,0"))
                                    (rule "add_zero_right" (formula "38") (term "0,0,1,0,0"))
                                    (rule "polySimp_mulAssoc" (formula "38") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "38") (term "1,0,0,1,0,0"))
                                    (rule "applyEq" (formula "61") (term "1,2,1,0,0,0,1,0") (ifseqformula "46"))
                                    (rule "polySimp_addAssoc" (formula "61") (term "2,1,0,0,0,1,0"))
                                    (rule "add_literals" (formula "61") (term "0,2,1,0,0,0,1,0"))
                                    (rule "add_zero_left" (formula "61") (term "2,1,0,0,0,1,0"))
                                    (rule "applyEqRigid" (formula "61") (term "1,1,1,0,0") (ifseqformula "46"))
                                    (rule "polySimp_addAssoc" (formula "61") (term "1,1,0,0"))
                                    (rule "add_literals" (formula "61") (term "0,1,1,0,0"))
                                    (rule "add_zero_left" (formula "61") (term "1,1,0,0"))
                                    (rule "applyEqRigid" (formula "31") (term "1,1,1,0,0") (ifseqformula "46"))
                                    (rule "polySimp_addAssoc" (formula "31") (term "1,1,0,0"))
                                    (rule "add_literals" (formula "31") (term "0,1,1,0,0"))
                                    (rule "add_zero_left" (formula "31") (term "1,1,0,0"))
                                    (rule "applyEqRigid" (formula "9") (term "0,2,0") (ifseqformula "46"))
                                    (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "46"))
                                    (rule "inEqSimp_homoInEq0" (formula "2"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                    (rule "mul_literals" (formula "2") (term "0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0"))
                                    (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                    (rule "add_literals" (formula "2") (term "0,0"))
                                    (rule "applyEq" (formula "12") (term "1,1,1,0,0") (ifseqformula "46"))
                                    (rule "polySimp_addAssoc" (formula "12") (term "1,1,0,0"))
                                    (rule "add_literals" (formula "12") (term "0,1,1,0,0"))
                                    (rule "add_zero_left" (formula "12") (term "1,1,0,0"))
                                    (rule "applyEqRigid" (formula "61") (term "1,0,2,0,0,1,0") (ifseqformula "46"))
                                    (rule "polySimp_addAssoc" (formula "61") (term "0,2,0,0,1,0"))
                                    (rule "add_literals" (formula "61") (term "0,0,2,0,0,1,0"))
                                    (rule "add_zero_left" (formula "61") (term "0,2,0,0,1,0"))
                                    (rule "applyEqRigid" (formula "25") (term "1,1") (ifseqformula "46"))
                                    (rule "polySimp_addAssoc" (formula "25") (term "1"))
                                    (rule "add_literals" (formula "25") (term "0,1"))
                                    (rule "applyEqRigid" (formula "23") (term "1,1,1,1,1,0") (ifseqformula "46"))
                                    (rule "polySimp_addAssoc" (formula "23") (term "1,1,1,1,0"))
                                    (rule "add_literals" (formula "23") (term "0,1,1,1,1,0"))
                                    (rule "add_zero_left" (formula "23") (term "1,1,1,1,0"))
                                    (rule "applyEqRigid" (formula "36") (term "1,1,1,0,0") (ifseqformula "46"))
                                    (rule "polySimp_addAssoc" (formula "36") (term "1,1,0,0"))
                                    (rule "add_literals" (formula "36") (term "0,1,1,0,0"))
                                    (rule "add_zero_left" (formula "36") (term "1,1,0,0"))
                                    (rule "applyEqRigid" (formula "32") (term "1,0") (ifseqformula "46"))
                                    (rule "bsum_induction_upper2_concrete" (formula "32") (term "0"))
                                    (rule "polySimp_elimSub" (formula "32") (term "0"))
                                    (rule "polySimp_elimSub" (formula "32") (term "0,2,1,0,1,0"))
                                    (rule "mul_literals" (formula "32") (term "1,0,2,1,0,1,0"))
                                    (rule "polySimp_homoEq" (formula "32"))
                                    (rule "polySimp_mulComm0" (formula "32") (term "1,0"))
                                    (rule "polySimp_addComm0" (formula "32") (term "0,2,1,0,1,1,1,0"))
                                    (rule "polySimp_addComm0" (formula "32") (term "1,1,0"))
                                    (rule "polySimp_rightDist" (formula "32") (term "1,0"))
                                    (rule "polySimp_mulAssoc" (formula "32") (term "0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "32") (term "0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "32") (term "0,1,0"))
                                    (rule "polySimp_elimOne" (formula "32") (term "0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "32") (term "0"))
                                    (rule "inEqSimp_ltToLeq" (formula "32") (term "0,1,0,0"))
                                    (rule "add_zero_right" (formula "32") (term "0,0,1,0,0"))
                                    (rule "polySimp_mulAssoc" (formula "32") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "32") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "32") (term "1,0,0,1,0,0"))
                                    (rule "applyEq" (formula "86") (term "1,0") (ifseqformula "46"))
                                    (rule "bsum_induction_upper2_concrete" (formula "86") (term "0"))
                                    (rule "polySimp_elimSub" (formula "86") (term "1,0,2,1,1,1,0"))
                                    (rule "mul_literals" (formula "86") (term "1,1,0,2,1,1,1,0"))
                                    (rule "polySimp_elimSub" (formula "86") (term "0,2,0,1,1,0"))
                                    (rule "mul_literals" (formula "86") (term "1,0,2,0,1,1,0"))
                                    (rule "polySimp_elimSub" (formula "86") (term "0"))
                                    (rule "polySimp_homoEq" (formula "86"))
                                    (rule "polySimp_mulComm0" (formula "86") (term "1,0"))
                                    (rule "polySimp_addComm0" (formula "86") (term "0,2,0,1,0,1,1,1,0"))
                                    (rule "polySimp_addComm0" (formula "86") (term "1,0,2,1,1,0,1,1,1,0"))
                                    (rule "polySimp_addComm0" (formula "86") (term "1,1,0"))
                                    (rule "polySimp_rightDist" (formula "86") (term "1,0"))
                                    (rule "polySimp_mulAssoc" (formula "86") (term "0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "86") (term "0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "86") (term "0,1,0"))
                                    (rule "polySimp_elimOne" (formula "86") (term "0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "86") (term "0"))
                                    (rule "inEqSimp_ltToLeq" (formula "86") (term "0,1,0,0"))
                                    (rule "add_zero_right" (formula "86") (term "0,0,1,0,0"))
                                    (rule "polySimp_mulAssoc" (formula "86") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "86") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "86") (term "1,0,0,1,0,0"))
                                    (rule "applyEqRigid" (formula "11") (term "1,2,1,0,0,1,0") (ifseqformula "46"))
                                    (rule "polySimp_addAssoc" (formula "11") (term "2,1,0,0,1,0"))
                                    (rule "add_literals" (formula "11") (term "0,2,1,0,0,1,0"))
                                    (rule "add_zero_left" (formula "11") (term "2,1,0,0,1,0"))
                                    (rule "applyEq" (formula "23") (term "1,1,1,0,0,0") (ifseqformula "46"))
                                    (rule "polySimp_addAssoc" (formula "23") (term "1,1,0,0,0"))
                                    (rule "add_literals" (formula "23") (term "0,1,1,0,0,0"))
                                    (rule "add_zero_left" (formula "23") (term "1,1,0,0,0"))
                                    (rule "applyEqRigid" (formula "33") (term "1,1,0,0,1,0") (ifseqformula "46"))
                                    (rule "applyEq" (formula "35") (term "1,1,1,0,0") (ifseqformula "46"))
                                    (rule "polySimp_addAssoc" (formula "35") (term "1,1,0,0"))
                                    (rule "add_literals" (formula "35") (term "0,1,1,0,0"))
                                    (rule "add_zero_left" (formula "35") (term "1,1,0,0"))
                                    (rule "applyEqRigid" (formula "43") (term "0") (ifseqformula "46"))
                                    (rule "inEqSimp_homoInEq1" (formula "43"))
                                    (rule "polySimp_mulComm0" (formula "43") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "43") (term "1,0"))
                                    (rule "mul_literals" (formula "43") (term "0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "43") (term "1,1,0"))
                                    (rule "polySimp_addAssoc" (formula "43") (term "0"))
                                    (rule "add_literals" (formula "43") (term "0,0"))
                                    (rule "applyEq" (formula "37") (term "2,0,0,0,1") (ifseqformula "46"))
                                    (rule "applyEqRigid" (formula "11") (term "1,1,0,0") (ifseqformula "46"))
                                    (rule "applyEqRigid" (formula "12") (term "1,2,1,0,2,1,1,1,0") (ifseqformula "46"))
                                    (rule "polySimp_addAssoc" (formula "12") (term "2,1,0,2,1,1,1,0"))
                                    (rule "add_literals" (formula "12") (term "0,2,1,0,2,1,1,1,0"))
                                    (rule "add_zero_left" (formula "12") (term "2,1,0,2,1,1,1,0"))
                                    (rule "applyEq" (formula "7") (term "1,1") (ifseqformula "46"))
                                    (rule "polySimp_addAssoc" (formula "7") (term "1"))
                                    (rule "add_literals" (formula "7") (term "0,1"))
                                    (rule "add_zero_left" (formula "7") (term "1"))
                                    (rule "applyEqRigid" (formula "1") (term "1,1") (ifseqformula "46"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "1"))
                                    (rule "add_literals" (formula "1") (term "0,1"))
                                    (rule "add_zero_left" (formula "1") (term "1"))
                                    (rule "applyEq" (formula "10") (term "1,0,2,0") (ifseqformula "46"))
                                    (rule "applyEq" (formula "30") (term "1,1") (ifseqformula "46"))
                                    (rule "polySimp_addAssoc" (formula "30") (term "1"))
                                    (rule "add_literals" (formula "30") (term "0,1"))
                                    (rule "add_zero_left" (formula "30") (term "1"))
                                    (rule "applyEqRigid" (formula "10") (term "1,0,1,1") (ifseqformula "46"))
                                    (rule "bsum_induction_upper2_concrete" (formula "10") (term "0,1,1"))
                                    (rule "polySimp_elimSub" (formula "10") (term "0,1,1"))
                                    (rule "polySimp_elimSub" (formula "10") (term "1,0,2,1,1,0,1,0,1,1"))
                                    (rule "mul_literals" (formula "10") (term "1,1,0,2,1,1,0,1,0,1,1"))
                                    (rule "polySimp_elimSub" (formula "10") (term "0,2,0,1,0,1,0,1,1"))
                                    (rule "mul_literals" (formula "10") (term "1,0,2,0,1,0,1,0,1,1"))
                                    (rule "polySimp_mulComm0" (formula "10") (term "1,1"))
                                    (rule "polySimp_addComm0" (formula "10") (term "1,0,2,1,1,0,1,1,1,1"))
                                    (rule "polySimp_addComm0" (formula "10") (term "0,2,0,1,0,1,1,1,1"))
                                    (rule "polySimp_addComm0" (formula "10") (term "1,1,1"))
                                    (rule "polySimp_rightDist" (formula "10") (term "1,1"))
                                    (rule "polySimp_mulAssoc" (formula "10") (term "0,1,1"))
                                    (rule "polySimp_mulComm0" (formula "10") (term "0,0,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "10") (term "0,1,1"))
                                    (rule "polySimp_elimOne" (formula "10") (term "0,1,1"))
                                    (rule "polySimp_addAssoc" (formula "10") (term "1"))
                                    (rule "inEqSimp_ltToLeq" (formula "10") (term "0,1,0,1"))
                                    (rule "add_zero_right" (formula "10") (term "0,0,1,0,1"))
                                    (rule "polySimp_mulAssoc" (formula "10") (term "1,0,0,1,0,1"))
                                    (rule "polySimp_mulComm0" (formula "10") (term "0,1,0,0,1,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,1,0,1"))
                                    (rule "applyEqRigid" (formula "12") (term "1,2,1,0,0,1,0,1,1,0") (ifseqformula "46"))
                                    (rule "polySimp_addAssoc" (formula "12") (term "2,1,0,0,1,0,1,1,0"))
                                    (rule "add_literals" (formula "12") (term "0,2,1,0,0,1,0,1,1,0"))
                                    (rule "add_zero_left" (formula "12") (term "2,1,0,0,1,0,1,1,0"))
                                    (rule "applyEq" (formula "12") (term "1,0,1,1,1,0") (ifseqformula "46"))
                                    (rule "applyEqRigid" (formula "32") (term "0,2,0,1,0,0,0") (ifseqformula "46"))
                                    (rule "applyEqRigid" (formula "38") (term "0,2,0,1,0,0,0") (ifseqformula "46"))
                                    (rule "applyEq" (formula "86") (term "0,2,0,0,0") (ifseqformula "46"))
                                    (rule "applyEqRigid" (formula "10") (term "0,2,0,1,0,0,1") (ifseqformula "46"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "38") (term "0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "38") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                    (rule "polySimp_sepNegMonomial" (formula "32"))
                                    (rule "polySimp_mulLiterals" (formula "32") (term "0"))
                                    (rule "polySimp_elimOne" (formula "32") (term "0"))
                                    (rule "polySimp_sepNegMonomial" (formula "86"))
                                    (rule "polySimp_mulLiterals" (formula "86") (term "0"))
                                    (rule "polySimp_elimOne" (formula "86") (term "0"))
                                    (rule "polySimp_sepNegMonomial" (formula "38"))
                                    (rule "polySimp_mulLiterals" (formula "38") (term "0"))
                                    (rule "polySimp_elimOne" (formula "38") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "43"))
                                    (rule "polySimp_mulLiterals" (formula "43") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,1,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "10") (term "0,0,1,0,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "32") (term "0,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "32") (term "0,0,1,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "86") (term "0,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "86") (term "0,0,1,1"))
                                    (rule "inEqSimp_subsumption6" (formula "43") (ifseqformula "54"))
                                    (rule "mul_literals" (formula "43") (term "1,1,0"))
                                    (rule "greater_literals" (formula "43") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "43"))
                                    (rule "leq_literals" (formula "43") (term "0"))
                                     (builtin "One Step Simplification" (formula "43"))
                                    (rule "true_left" (formula "43"))
                                    (rule "inEqSimp_subsumption6" (formula "10") (term "0,1,0,1") (ifseqformula "53"))
                                    (rule "mul_literals" (formula "10") (term "1,1,0,0,1,0,1"))
                                    (rule "greater_literals" (formula "10") (term "0,0,0,1,0,1"))
                                     (builtin "One Step Simplification" (formula "10"))
                                    (rule "leq_literals" (formula "10") (term "0,0,1,0,1"))
                                     (builtin "One Step Simplification" (formula "10"))
                                    (rule "polySimp_addAssoc" (formula "10") (term "0,1"))
                                    (rule "polySimp_pullOutFactor2b" (formula "10") (term "0,0,1"))
                                    (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "10") (term "0,0,1"))
                                    (rule "inEqSimp_subsumption6" (formula "38") (term "0,1,1") (ifseqformula "53"))
                                    (rule "greater_literals" (formula "38") (term "0,0,0,1,1"))
                                     (builtin "One Step Simplification" (formula "38"))
                                    (rule "mul_literals" (formula "38") (term "1,0,0,1,1"))
                                    (rule "leq_literals" (formula "38") (term "0,0,1,1"))
                                     (builtin "One Step Simplification" (formula "38"))
                                    (rule "polySimp_pullOutFactor2b" (formula "38") (term "1"))
                                    (rule "add_literals" (formula "38") (term "1,1,1"))
                                    (rule "times_zero_1" (formula "38") (term "1,1"))
                                    (rule "add_zero_right" (formula "38") (term "1"))
                                    (rule "inEqSimp_subsumption6" (formula "32") (term "0,1,1") (ifseqformula "53"))
                                    (rule "mul_literals" (formula "32") (term "1,1,0,0,1,1"))
                                    (rule "greater_literals" (formula "32") (term "0,0,0,1,1"))
                                     (builtin "One Step Simplification" (formula "32"))
                                    (rule "leq_literals" (formula "32") (term "0,0,1,1"))
                                     (builtin "One Step Simplification" (formula "32"))
                                    (rule "polySimp_pullOutFactor2b" (formula "32") (term "1"))
                                    (rule "add_literals" (formula "32") (term "1,1,1"))
                                    (rule "times_zero_1" (formula "32") (term "1,1"))
                                    (rule "add_zero_right" (formula "32") (term "1"))
                                    (rule "inEqSimp_subsumption6" (formula "85") (term "0,1,1") (ifseqformula "53"))
                                    (rule "greater_literals" (formula "85") (term "0,0,0,1,1"))
                                     (builtin "One Step Simplification" (formula "85"))
                                    (rule "mul_literals" (formula "85") (term "1,0,0,1,1"))
                                    (rule "leq_literals" (formula "85") (term "0,0,1,1"))
                                     (builtin "One Step Simplification" (formula "85"))
                                    (rule "polySimp_addAssoc" (formula "85") (term "1"))
                                    (rule "polySimp_addComm0" (formula "85") (term "0,1"))
                                    (rule "elimGcdLeq_antec" (formula "2") (inst "elimGcdRightDiv=Z(6(5(2(#))))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(2(#))"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0"))
                                    (rule "mul_literals" (formula "2") (term "0,1,0,0,0,0,1,0"))
                                    (rule "leq_literals" (formula "2") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "neg_literal" (formula "2") (term "0,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "2") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_addLiterals" (formula "2") (term "0,0,0,0"))
                                    (rule "add_zero_right" (formula "2") (term "0,0,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
                                    (rule "add_literals" (formula "2") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "2") (term "1,0,0"))
                                    (rule "add_literals" (formula "2") (term "0,0"))
                                    (rule "qeq_literals" (formula "2") (term "0"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "onlyCreatedObjectsAreReferencedFinal" (formula "80") (term "0") (ifseqformula "14") (ifseqformula "6"))
                                    (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "62"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "nnf_imp2or" (formula "36") (term "0,1,0"))
                                    (rule "arrayLengthIsAShort" (formula "55") (term "0"))
                                     (builtin "One Step Simplification" (formula "55"))
                                    (rule "true_left" (formula "55"))
                                    (rule "arrayLengthNotNegative" (formula "55") (term "0"))
                                    (rule "nnf_imp2or" (formula "34") (term "0,1,0,1,0"))
                                    (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "32") (term "0,0,2,0,1,0"))
                                    (rule "arrayLengthNotNegative" (formula "53") (term "0"))
                                    (rule "inEqSimp_subsumption1" (formula "53") (ifseqformula "54"))
                                    (rule "leq_literals" (formula "53") (term "0"))
                                     (builtin "One Step Simplification" (formula "53"))
                                    (rule "true_left" (formula "53"))
                                    (rule "arrayLengthIsAShort" (formula "53") (term "0"))
                                     (builtin "One Step Simplification" (formula "53"))
                                    (rule "true_left" (formula "53"))
                                    (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "37") (term "0,0,1,1,1,0"))
                                    (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "35") (term "0"))
                                     (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "65")) (ifInst ""  (formula "64")) (ifInst ""  (formula "44")) (ifInst ""  (formula "47")))
                                    (rule "translateJavaMulInt" (formula "35") (term "1,1,0,0,0,0"))
                                    (rule "translateJavaSubInt" (formula "35") (term "0,2,1,1,0,0"))
                                    (rule "translateJavaSubInt" (formula "35") (term "0,2,0,1,0,0"))
                                    (rule "eqSymm" (formula "35") (term "1,0,0"))
                                    (rule "polySimp_elimSub" (formula "35") (term "0,2,0,1,0,0"))
                                    (rule "mul_literals" (formula "35") (term "1,0,2,0,1,0,0"))
                                    (rule "eqSymm" (formula "35") (term "1,0,0"))
                                    (rule "polySimp_elimSub" (formula "35") (term "0,2,0,1,0,0"))
                                    (rule "mul_literals" (formula "35") (term "1,0,2,0,1,0,0"))
                                    (rule "eqSymm" (formula "35") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,0,0"))
                                    (rule "eqSymm" (formula "35") (term "1,0,0,0,0"))
                                    (rule "polySimp_addComm0" (formula "35") (term "0,2,1,1,0,0"))
                                    (rule "polySimp_addComm0" (formula "35") (term "0,2,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0,0,0,0"))
                                    (rule "applyEq" (formula "35") (term "0,0,0,0,0,0,0") (ifseqformula "31"))
                                    (rule "applyEq" (formula "35") (term "1,0,2,0,1,0,0") (ifseqformula "52"))
                                    (rule "eqSymm" (formula "35") (term "1,0,0"))
                                    (rule "applyEq" (formula "35") (term "0,0,1,0,0,0,0") (ifseqformula "52"))
                                    (rule "eqSymm" (formula "35") (term "1,0,0,0,0"))
                                    (rule "replace_known_left" (formula "35") (term "1,0,0,0,0") (ifseqformula "31"))
                                     (builtin "One Step Simplification" (formula "35"))
                                    (rule "applyEq" (formula "35") (term "1,0,2,0,1,0,0") (ifseqformula "52"))
                                    (rule "eqSymm" (formula "35") (term "1,0,0"))
                                    (rule "replace_known_left" (formula "35") (term "1,0,0") (ifseqformula "49"))
                                     (builtin "One Step Simplification" (formula "35"))
                                    (rule "applyEq" (formula "35") (term "0,1,0,0,0") (ifseqformula "31"))
                                    (rule "applyEq" (formula "35") (term "3,0,1,0,0") (ifseqformula "52"))
                                    (rule "inEqSimp_subsumption6" (formula "35") (term "0,0,0,0") (ifseqformula "54"))
                                    (rule "mul_literals" (formula "35") (term "1,1,0,0,0,0,0"))
                                    (rule "greater_literals" (formula "35") (term "0,0,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "35"))
                                    (rule "leq_literals" (formula "35") (term "0,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "35"))
                                    (rule "inEqSimp_subsumption4" (formula "35") (term "0,0,0") (ifseqformula "3"))
                                    (rule "mul_literals" (formula "35") (term "0,1,0,0,0,0"))
                                    (rule "greater_literals" (formula "35") (term "0,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "35"))
                                    (rule "leq_literals" (formula "35") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "35"))
                                    (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "38") (term "0") (inst "b=b"))
                                     (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "66")) (ifInst ""  (formula "67")) (ifInst ""  (formula "23")))
                                    (rule "translateJavaMulInt" (formula "38") (term "1,1,0,0,0"))
                                    (rule "mul_literals" (formula "38") (term "1,1,0,0,0"))
                                    (rule "eqSymm" (formula "38") (term "0,0,0,0,0"))
                                    (rule "replace_known_left" (formula "38") (term "1,0,0,0") (ifseqformula "22"))
                                     (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "77")))
                                    (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "38") (term "0,1,0,1,0"))
                                    (rule "applyEq" (formula "38") (term "0,0,0,0") (ifseqformula "8"))
                                    (rule "applyEq" (formula "38") (term "0,1,0,0") (ifseqformula "8"))
                                    (rule "applyEq" (formula "38") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "8"))
                                    (rule "polySimp_mulLiterals" (formula "38") (term "1,0,0,1,0,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0,1,0"))
                                    (rule "mul_literals" (formula "38") (term "0,1,1,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0,1,0"))
                                    (rule "inEqSimp_subsumption6" (formula "38") (term "0,0,0") (ifseqformula "54"))
                                    (rule "mul_literals" (formula "38") (term "1,1,0,0,0,0"))
                                    (rule "greater_literals" (formula "38") (term "0,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "38"))
                                    (rule "leq_literals" (formula "38") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "38"))
                                    (rule "inEqSimp_subsumption4" (formula "38") (term "0,0") (ifseqformula "3"))
                                    (rule "greater_literals" (formula "38") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "38"))
                                    (rule "mul_literals" (formula "38") (term "0,0,0,0"))
                                    (rule "leq_literals" (formula "38") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "38"))
                                    (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "58") (term "0") (inst "i=i"))
                                     (builtin "One Step Simplification" (formula "58"))
                                    (rule "translateJavaAddInt" (formula "58") (term "0,2,1,1,0"))
                                    (rule "translateJavaSubInt" (formula "58") (term "1,1,0,0"))
                                    (rule "polySimp_elimSub" (formula "58") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "58") (term "1,1,1,0,0"))
                                    (rule "polySimp_addComm0" (formula "58") (term "0,2,1,1,0"))
                                    (rule "polySimp_addComm1" (formula "58") (term "1,1,0,0"))
                                    (rule "add_literals" (formula "58") (term "0,1,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "58") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "58") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "58") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "58") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "58") (term "0,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "58") (term "0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "58") (term "1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "58") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "58") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "58") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "58") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "58") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "58") (term "1,1,1,0,0"))
                                    (rule "commute_or" (formula "59") (term "0,0,1,0"))
                                    (rule "nnf_notAnd" (formula "36") (term "0,0,1,0"))
                                    (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "36") (term "0,1,0,0,1,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "36") (term "1,0,1,0,0,1,0,0,1,0"))
                                    (rule "mul_literals" (formula "36") (term "0,0,1,0,0,1,0,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "36") (term "0,0,0,1,0,0,1,0"))
                                    (rule "add_literals" (formula "36") (term "0,0,0,0,1,0,0,1,0"))
                                    (rule "add_zero_left" (formula "36") (term "0,0,0,1,0,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "36") (term "0,1,1,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "36") (term "0,1,1,0,0,1,0"))
                                    (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0,1,0"))
                                    (rule "polySimp_mulAssoc" (formula "36") (term "1,0,0,0,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "36") (term "0,1,0,0,0,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "36") (term "1,0,0,0,0,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "36") (term "1,0,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0,0,1,0"))
                                    (rule "mul_literals" (formula "36") (term "0,1,0,0,0,1,0"))
                                    (rule "commute_or" (formula "48") (term "0,0,1,0"))
                                    (rule "distr_forallAnd" (formula "24"))
                                    (rule "andLeft" (formula "24"))
                                    (rule "nnf_notAnd" (formula "35") (term "0,0,1,0,1,0"))
                                    (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0,1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "35") (term "1,0,0,0,0,0,1,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,0,0,0,1,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "35") (term "0,1,0,0,0,0,0,1,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "35") (term "0,0,0,0,0,1,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0,1,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0,1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "35") (term "1,0,0,0,1,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,0,1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "35") (term "0,1,0,0,0,1,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "35") (term "1,0,1,0,0,0,1,0,1,0"))
                                    (rule "mul_literals" (formula "35") (term "0,0,1,0,0,0,1,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "35") (term "1,0,1,0,0,0,1,0,1,0"))
                                    (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0,1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0,1,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,1,0,0,1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "35") (term "0,1,0,0,1,0,0,1,0,1,0"))
                                    (rule "mul_literals" (formula "35") (term "0,0,1,0,0,1,0,0,1,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0,1,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "35") (term "0,0,0,1,0,0,1,0,1,0"))
                                    (rule "add_literals" (formula "35") (term "0,0,0,0,1,0,0,1,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0,1,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "35") (term "0,1,1,0,0,1,0,1,0"))
                                    (rule "mul_literals" (formula "35") (term "0,0,1,1,0,0,1,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "35") (term "1,0,1,1,0,0,1,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "35") (term "1,0,1,1,0,0,1,0,1,0"))
                                    (rule "onlyCreatedObjectsAreReferencedFinal" (formula "48") (term "0") (ifseqformula "15") (ifseqformula "7"))
                                    (rule "applyEq" (formula "48") (term "1,0,1") (ifseqformula "49"))
                                    (rule "replace_known_left" (formula "48") (term "1") (ifseqformula "4"))
                                     (builtin "One Step Simplification" (formula "48"))
                                    (rule "true_left" (formula "48"))
                                    (rule "nnf_imp2or" (formula "39") (term "0,0"))
                                    (rule "nnf_imp2or" (formula "59") (term "0"))
                                    (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "11") (term "0,0,2,1,2,0,1,1"))
                                    (rule "polySimp_homoEq" (formula "11"))
                                    (rule "polySimp_addComm1" (formula "11") (term "0"))
                                    (rule "polySimp_sepNegMonomial" (formula "11"))
                                    (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                                    (rule "polySimp_elimOne" (formula "11") (term "0"))
                                    (rule "nnf_notAnd" (formula "59") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "59") (term "0,0,0"))
                                    (rule "mul_literals" (formula "59") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "59") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "59") (term "0,0,0"))
                                    (rule "mul_literals" (formula "59") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "59") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "59") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "59") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "59") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "59") (term "0,0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "59") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "59") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "59") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "59") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "59") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "59") (term "1,1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "39") (term "0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "39") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "39") (term "1,0,0,1,0,0,0"))
                                    (rule "mul_literals" (formula "39") (term "0,1,0,0,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "39") (term "0,0,1,0,0,0"))
                                    (rule "add_literals" (formula "39") (term "0,0,0,1,0,0,0"))
                                    (rule "add_zero_left" (formula "39") (term "0,0,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "39") (term "0,0,0,0"))
                                    (rule "mul_literals" (formula "39") (term "1,0,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "39") (term "0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "0,0,0,0"))
                                    (rule "mul_literals" (formula "39") (term "1,0,0,0,0"))
                                    (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "88") (term "0,0,2,1,2,0"))
                                    (rule "applyEq" (formula "88") (term "0") (ifseqformula "11"))
                                    (rule "polySimp_homoEq" (formula "88"))
                                    (rule "polySimp_mulComm0" (formula "88") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "88") (term "1,0"))
                                    (rule "polySimp_mulLiterals" (formula "88") (term "1,1,0"))
                                    (rule "polySimp_elimOne" (formula "88") (term "1,1,0"))
                                    (rule "polySimp_rightDist" (formula "88") (term "0,1,0"))
                                    (rule "polySimp_rightDist" (formula "88") (term "0,0,1,0"))
                                    (rule "polySimp_mulAssoc" (formula "88") (term "0,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "88") (term "0,0,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "88") (term "0,0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "88") (term "0,0,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "88") (term "0"))
                                    (rule "polySimp_addAssoc" (formula "88") (term "0,0"))
                                    (rule "polySimp_addComm1" (formula "88") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "88") (term "0,0"))
                                    (rule "add_literals" (formula "88") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "88") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "88") (term "0,0"))
                                    (rule "polySimp_addComm1" (formula "88") (term "0,0"))
                                    (rule "polySimp_addComm0" (formula "88") (term "0,0,0"))
                                    (rule "polySimp_sepPosMonomial" (formula "88"))
                                    (rule "polySimp_mulComm0" (formula "88") (term "1"))
                                    (rule "polySimp_rightDist" (formula "88") (term "1"))
                                    (rule "polySimp_rightDist" (formula "88") (term "0,1"))
                                    (rule "polySimp_rightDist" (formula "88") (term "0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "88") (term "1,0,0,1"))
                                    (rule "polySimp_elimOne" (formula "88") (term "1,0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "88") (term "0,0,0,1"))
                                    (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "37") (term "0,1,0,1,0"))
                                    (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "35") (term "0,1,0,1,0,1,0"))
                                    (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "36") (term "1") (inst "b=b"))
                                     (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "67")) (ifInst ""  (formula "68")) (ifInst ""  (formula "23")))
                                    (rule "translateJavaMulInt" (formula "36") (term "1,1,0,0,1"))
                                    (rule "mul_literals" (formula "36") (term "1,1,0,0,1"))
                                    (rule "eqSymm" (formula "36") (term "0,0,0,0,1"))
                                    (rule "replace_known_right" (formula "36") (term "0,0,0,0,1") (ifseqformula "78"))
                                     (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "22")))
                                    (rule "inEqSimp_ltToLeq" (formula "36") (term "1,0,0,1,1"))
                                    (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,0,0,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "36") (term "0,1,0,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,0,1,1"))
                                    (rule "applyEq" (formula "36") (term "0,0,0,1") (ifseqformula "8"))
                                    (rule "applyEq" (formula "36") (term "0,1,0,1") (ifseqformula "8"))
                                    (rule "applyEq" (formula "36") (term "0,1,0,0,1,0,0,1,1") (ifseqformula "8"))
                                    (rule "polySimp_mulLiterals" (formula "36") (term "1,0,0,1,0,0,1,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0,1,1"))
                                    (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0,1,1"))
                                    (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0,1,1"))
                                    (rule "mul_literals" (formula "36") (term "0,1,1,0,0,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0,1,1"))
                                    (rule "inEqSimp_subsumption6" (formula "36") (term "0,0,1") (ifseqformula "55"))
                                    (rule "greater_literals" (formula "36") (term "0,0,0,0,1"))
                                     (builtin "One Step Simplification" (formula "36"))
                                    (rule "mul_literals" (formula "36") (term "1,0,0,0,1"))
                                    (rule "leq_literals" (formula "36") (term "0,0,0,1"))
                                     (builtin "One Step Simplification" (formula "36"))
                                    (rule "inEqSimp_subsumption4" (formula "36") (term "0,1") (ifseqformula "3"))
                                    (rule "mul_literals" (formula "36") (term "0,1,0,0,1"))
                                    (rule "greater_literals" (formula "36") (term "0,0,0,1"))
                                     (builtin "One Step Simplification" (formula "36"))
                                    (rule "leq_literals" (formula "36") (term "0,0,1"))
                                     (builtin "One Step Simplification" (formula "36"))
                                    (rule "nnf_imp2or" (formula "36") (term "0,1"))
                                    (rule "nnf_notAnd" (formula "36") (term "0,0,1"))
                                    (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0,1"))
                                    (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0,1"))
                                    (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0,1,0,0,1"))
                                    (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0,1"))
                                    (rule "add_literals" (formula "36") (term "0,0,0,1,0,0,1"))
                                    (rule "add_zero_left" (formula "36") (term "0,0,1,0,0,1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0,1"))
                                    (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0,1"))
                                    (rule "mul_literals" (formula "36") (term "1,0,0,0,0,0,1"))
                                    (rule "add_zero_right" (formula "36") (term "0,0,0,0,0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0,1"))
                                    (rule "mul_literals" (formula "36") (term "1,0,0,0,1"))
                                    (rule "cnf_rightDist" (formula "38") (term "0"))
                                    (rule "Contract_axiom_for_bufferLen_in_Buffers" (formula "39") (term "0,0,0,1"))
                                     (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "15")) (ifInst ""  (formula "20")) (ifInst ""  (formula "85")))
                                    (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "39") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "39") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "39") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "39") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,1"))
                                    (rule "inEqSimp_homoInEq0" (formula "39") (term "0,0,0"))
                                    (rule "mul_literals" (formula "39") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "39") (term "0,0,0,0"))
                                    (rule "applyEq" (formula "39") (term "0,1,0,1,0,0") (ifseqformula "8"))
                                    (rule "polySimp_mulLiterals" (formula "39") (term "1,0,1,0,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "39") (term "0,1,0,0"))
                                    (rule "add_literals" (formula "39") (term "1,0,1,0,0"))
                                    (rule "times_zero_1" (formula "39") (term "0,1,0,0"))
                                    (rule "leq_literals" (formula "39") (term "1,0,0"))
                                     (builtin "One Step Simplification" (formula "39"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "0,0"))
                                    (rule "mul_literals" (formula "39") (term "1,0,0"))
                                    (rule "inEqSimp_subsumption6" (formula "39") (term "0,0") (ifseqformula "56"))
                                    (rule "greater_literals" (formula "39") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "39"))
                                    (rule "mul_literals" (formula "39") (term "1,0,0,0"))
                                    (rule "leq_literals" (formula "39") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "39"))
                                    (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "40") (term "1,1") (inst "b=b"))
                                     (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "68")) (ifInst ""  (formula "69")) (ifInst ""  (formula "23")))
                                    (rule "translateJavaMulInt" (formula "40") (term "1,1,0,0,1,1"))
                                    (rule "mul_literals" (formula "40") (term "1,1,0,0,1,1"))
                                    (rule "eqSymm" (formula "40") (term "0,0,0,0,1,1"))
                                    (rule "replace_known_left" (formula "40") (term "1,0,0,1,1") (ifseqformula "22"))
                                     (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "79")))
                                    (rule "inEqSimp_ltToLeq" (formula "40") (term "1,0,0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,1,0,0,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "40") (term "0,1,0,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,0,1,1,1"))
                                    (rule "applyEq" (formula "40") (term "0,1,0,1,1") (ifseqformula "8"))
                                    (rule "applyEq" (formula "40") (term "0,0,0,1,1") (ifseqformula "8"))
                                    (rule "applyEq" (formula "40") (term "0,1,0,0,1,0,0,1,1,1") (ifseqformula "8"))
                                    (rule "polySimp_mulLiterals" (formula "40") (term "1,0,0,1,0,0,1,1,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "1,0,0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,0,1,1,1"))
                                    (rule "polySimp_rightDist" (formula "40") (term "1,1,0,0,1,1,1"))
                                    (rule "mul_literals" (formula "40") (term "0,1,1,0,0,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,0,1,1,1"))
                                    (rule "inEqSimp_subsumption6" (formula "40") (term "0,0,1,1") (ifseqformula "56"))
                                    (rule "greater_literals" (formula "40") (term "0,0,0,0,1,1"))
                                     (builtin "One Step Simplification" (formula "40"))
                                    (rule "mul_literals" (formula "40") (term "1,0,0,0,1,1"))
                                    (rule "leq_literals" (formula "40") (term "0,0,0,1,1"))
                                     (builtin "One Step Simplification" (formula "40"))
                                    (rule "inEqSimp_subsumption4" (formula "40") (term "0,1,1") (ifseqformula "3"))
                                    (rule "greater_literals" (formula "40") (term "0,0,0,1,1"))
                                     (builtin "One Step Simplification" (formula "40"))
                                    (rule "mul_literals" (formula "40") (term "0,0,0,1,1"))
                                    (rule "leq_literals" (formula "40") (term "0,0,1,1"))
                                     (builtin "One Step Simplification" (formula "40"))
                                    (rule "nnf_imp2or" (formula "40") (term "0,1,1"))
                                    (rule "nnf_notAnd" (formula "40") (term "0,0,1,1"))
                                    (rule "inEqSimp_notGeq" (formula "40") (term "0,0,0,1,1"))
                                    (rule "mul_literals" (formula "40") (term "1,0,0,0,0,0,1,1"))
                                    (rule "add_zero_right" (formula "40") (term "0,0,0,0,0,1,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "0,0,0,1,1"))
                                    (rule "mul_literals" (formula "40") (term "1,0,0,0,1,1"))
                                    (rule "inEqSimp_notLeq" (formula "40") (term "1,0,0,1,1"))
                                    (rule "polySimp_rightDist" (formula "40") (term "1,0,0,1,0,0,1,1"))
                                    (rule "mul_literals" (formula "40") (term "0,1,0,0,1,0,0,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,0,1,0,0,1,1"))
                                    (rule "polySimp_addAssoc" (formula "40") (term "0,0,1,0,0,1,1"))
                                    (rule "add_literals" (formula "40") (term "0,0,0,1,0,0,1,1"))
                                    (rule "add_zero_left" (formula "40") (term "0,0,1,0,0,1,1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "40") (term "1,0,0,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,0,1,1"))
                                    (rule "commute_or" (formula "25") (term "0"))
                                    (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "11") (term "0,0,2,1,0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "11") (term "1"))
                                    (rule "add_literals" (formula "11") (term "1,1,1"))
                                    (rule "times_zero_1" (formula "11") (term "1,1"))
                                    (rule "add_zero_right" (formula "11") (term "1"))
                                    (rule "distr_forallAnd" (formula "38"))
                                    (rule "andLeft" (formula "38"))
                                    (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "36") (term "1,0"))
                                     (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "66")) (ifInst ""  (formula "54")))
                                    (rule "translateJavaSubInt" (formula "36") (term "3,0,1,1,0"))
                                    (rule "polySimp_elimSub" (formula "36") (term "3,0,1,1,0"))
                                    (rule "mul_literals" (formula "36") (term "1,3,0,1,1,0"))
                                    (rule "polySimp_addComm0" (formula "36") (term "3,0,1,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "36") (term "1,0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "36") (term "1,0,0,0,0,1,0"))
                                    (rule "replace_known_left" (formula "36") (term "1,0,0,0,0,1,0") (ifseqformula "53"))
                                     (builtin "One Step Simplification" (formula "36"))
                                    (rule "inEqSimp_commuteLeq" (formula "36") (term "1,1,0,0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "36") (term "0,1,0,0,1,0"))
                                    (rule "applyEq" (formula "36") (term "0,1,0,0,0,1,0") (ifseqformula "55"))
                                    (rule "eqSymm" (formula "36") (term "1,0,0,0,1,0"))
                                    (rule "replace_known_left" (formula "36") (term "1,0,0,0,1,0") (ifseqformula "48"))
                                     (builtin "One Step Simplification" (formula "36"))
                                    (rule "applyEq" (formula "36") (term "0,0,1,0,0,1,0") (ifseqformula "55"))
                                    (rule "replace_known_left" (formula "36") (term "0,1,0,0,1,0") (ifseqformula "57"))
                                     (builtin "One Step Simplification" (formula "36"))
                                    (rule "applyEq" (formula "36") (term "1,3,0,1,1,0") (ifseqformula "55"))
                                    (rule "applyEq" (formula "36") (term "1,0,1,1,0") (ifseqformula "50"))
                                    (rule "applyEq" (formula "36") (term "0,0,1,0,1,0") (ifseqformula "50"))
                                    (rule "inEqSimp_commuteGeq" (formula "36") (term "1,0,1,0"))
                                    (rule "applyEq" (formula "36") (term "0,0,0,0,0,1,0") (ifseqformula "50"))
                                    (rule "replace_known_right" (formula "36") (term "0,0,0,0,1,0") (ifseqformula "67"))
                                     (builtin "One Step Simplification" (formula "36"))
                                    (rule "applyEq" (formula "36") (term "1,0,0,1,0") (ifseqformula "55"))
                                    (rule "replace_known_left" (formula "36") (term "0,0,1,0") (ifseqformula "59"))
                                     (builtin "One Step Simplification" (formula "36"))
                                    (rule "applyEq" (formula "36") (term "0,0,1,0") (ifseqformula "55"))
                                    (rule "inEqSimp_commuteLeq" (formula "36") (term "0,1,0"))
                                    (rule "replace_known_left" (formula "36") (term "0,1,0") (ifseqformula "60"))
                                     (builtin "One Step Simplification" (formula "36"))
                                    (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "40") (term "1,1") (inst "b=b"))
                                     (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "69")) (ifInst ""  (formula "70")) (ifInst ""  (formula "23")))
                                    (rule "translateJavaMulInt" (formula "40") (term "1,1,0,0,1,1"))
                                    (rule "mul_literals" (formula "40") (term "1,1,0,0,1,1"))
                                    (rule "eqSymm" (formula "40") (term "0,0,0,0,1,1"))
                                    (rule "replace_known_left" (formula "40") (term "1,0,0,1,1") (ifseqformula "22"))
                                     (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "80")))
                                    (rule "inEqSimp_ltToLeq" (formula "40") (term "1,0,0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,1,0,0,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "40") (term "0,1,0,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,0,1,1,1"))
                                    (rule "applyEq" (formula "40") (term "0,1,0,1,1") (ifseqformula "8"))
                                    (rule "applyEq" (formula "40") (term "0,0,0,1,1") (ifseqformula "8"))
                                    (rule "applyEq" (formula "40") (term "0,1,0,0,1,0,0,1,1,1") (ifseqformula "8"))
                                    (rule "polySimp_mulLiterals" (formula "40") (term "1,0,0,1,0,0,1,1,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "1,0,0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,0,1,1,1"))
                                    (rule "polySimp_rightDist" (formula "40") (term "1,1,0,0,1,1,1"))
                                    (rule "mul_literals" (formula "40") (term "0,1,1,0,0,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,0,1,1,1"))
                                    (rule "inEqSimp_subsumption6" (formula "40") (term "0,0,1,1") (ifseqformula "57"))
                                    (rule "mul_literals" (formula "40") (term "1,1,0,0,0,1,1"))
                                    (rule "greater_literals" (formula "40") (term "0,0,0,0,1,1"))
                                     (builtin "One Step Simplification" (formula "40"))
                                    (rule "leq_literals" (formula "40") (term "0,0,0,1,1"))
                                     (builtin "One Step Simplification" (formula "40"))
                                    (rule "inEqSimp_subsumption4" (formula "40") (term "0,1,1") (ifseqformula "3"))
                                    (rule "mul_literals" (formula "40") (term "0,1,0,0,1,1"))
                                    (rule "greater_literals" (formula "40") (term "0,0,0,1,1"))
                                     (builtin "One Step Simplification" (formula "40"))
                                    (rule "leq_literals" (formula "40") (term "0,0,1,1"))
                                     (builtin "One Step Simplification" (formula "40"))
                                    (rule "nnf_imp2or" (formula "40") (term "0,1,1"))
                                    (rule "nnf_notAnd" (formula "40") (term "0,0,1,1"))
                                    (rule "inEqSimp_notGeq" (formula "40") (term "0,0,0,1,1"))
                                    (rule "times_zero_1" (formula "40") (term "1,0,0,0,0,0,1,1"))
                                    (rule "add_zero_right" (formula "40") (term "0,0,0,0,0,1,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "0,0,0,1,1"))
                                    (rule "mul_literals" (formula "40") (term "1,0,0,0,1,1"))
                                    (rule "inEqSimp_notLeq" (formula "40") (term "1,0,0,1,1"))
                                    (rule "polySimp_rightDist" (formula "40") (term "1,0,0,1,0,0,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,0,1,0,0,1,1"))
                                    (rule "mul_literals" (formula "40") (term "0,1,0,0,1,0,0,1,1"))
                                    (rule "polySimp_addAssoc" (formula "40") (term "0,0,1,0,0,1,1"))
                                    (rule "add_literals" (formula "40") (term "0,0,0,1,0,0,1,1"))
                                    (rule "add_zero_left" (formula "40") (term "0,0,1,0,0,1,1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "40") (term "1,0,0,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,0,1,1"))
                                    (rule "all_pull_out3" (formula "62") (term "0"))
                                    (rule "Contract_axiom_for_bufferLen_in_Buffers" (formula "41") (term "0,0,0,1"))
                                     (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "15")) (ifInst ""  (formula "20")) (ifInst ""  (formula "87")))
                                    (rule "inEqSimp_ltToLeq" (formula "41") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "41") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "41") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "41") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "41") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "41") (term "0,0,1"))
                                    (rule "inEqSimp_homoInEq0" (formula "41") (term "0,0,0"))
                                    (rule "mul_literals" (formula "41") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "41") (term "0,0,0,0"))
                                    (rule "applyEq" (formula "41") (term "0,1,0,1,0,0") (ifseqformula "8"))
                                    (rule "polySimp_mulLiterals" (formula "41") (term "1,0,1,0,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "41") (term "0,1,0,0"))
                                    (rule "add_literals" (formula "41") (term "1,0,1,0,0"))
                                    (rule "times_zero_1" (formula "41") (term "0,1,0,0"))
                                    (rule "leq_literals" (formula "41") (term "1,0,0"))
                                     (builtin "One Step Simplification" (formula "41"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "0,0"))
                                    (rule "mul_literals" (formula "41") (term "1,0,0"))
                                    (rule "inEqSimp_subsumption6" (formula "41") (term "0,0") (ifseqformula "58"))
                                    (rule "greater_literals" (formula "41") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "41"))
                                    (rule "mul_literals" (formula "41") (term "1,0,0,0"))
                                    (rule "leq_literals" (formula "41") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "41"))
                                    (rule "Contract_axiom_for_bufferLen_in_Buffers" (formula "42") (term "0,1,0,1"))
                                     (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "15")) (ifInst ""  (formula "20")) (ifInst ""  (formula "88")))
                                    (rule "inEqSimp_ltToLeq" (formula "42") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "42") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "42") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "42") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "42") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "42") (term "0,0,1"))
                                    (rule "inEqSimp_homoInEq0" (formula "42") (term "0,0,0"))
                                    (rule "times_zero_2" (formula "42") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "42") (term "0,0,0,0"))
                                    (rule "apply_eq_monomials" (formula "42") (term "1,0,1,0,0") (ifseqformula "8"))
                                    (rule "polySimp_rightDist" (formula "42") (term "0,1,0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "42") (term "1,0,1,0,1,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "42") (term "1,0,1,0,0"))
                                    (rule "add_literals" (formula "42") (term "1,1,1,0,1,0,0"))
                                    (rule "times_zero_1" (formula "42") (term "1,1,0,1,0,0"))
                                    (rule "add_zero_right" (formula "42") (term "1,0,1,0,0"))
                                    (rule "polySimp_mulAssoc" (formula "42") (term "1,0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "42") (term "0,1,0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "42") (term "1,0,1,0,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "42") (term "0,1,0,0"))
                                    (rule "add_literals" (formula "42") (term "1,0,1,0,0"))
                                    (rule "times_zero_1" (formula "42") (term "0,1,0,0"))
                                    (rule "leq_literals" (formula "42") (term "1,0,0"))
                                     (builtin "One Step Simplification" (formula "42"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "42") (term "0,0"))
                                    (rule "mul_literals" (formula "42") (term "1,0,0"))
                                    (rule "inEqSimp_subsumption6" (formula "42") (term "0,0") (ifseqformula "59"))
                                    (rule "greater_literals" (formula "42") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "42"))
                                    (rule "mul_literals" (formula "42") (term "1,0,0,0"))
                                    (rule "leq_literals" (formula "42") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "41")))
                                    (rule "true_left" (formula "42"))
                                    (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "42") (term "0,1,0,1"))
                                    (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "42") (term "0,0,0,1"))
                                    (rule "all_pull_out3" (formula "52") (term "0"))
                                    (rule "commute_or_2" (formula "39") (term "0"))
                                    (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "36") (term "0,1,0") (inst "i=i") (inst "j=j_1"))
                                     (builtin "One Step Simplification" (formula "36"))
                                    (rule "inEqSimp_ltToLeq" (formula "36") (term "1,0,0,1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0,1,0,1,0"))
                                    (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0,1,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0,1,0,1,0"))
                                    (rule "add_literals" (formula "36") (term "0,0,0,1,0,0,1,0,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "36") (term "1,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0,1,0"))
                                    (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0,1,0"))
                                    (rule "add_literals" (formula "36") (term "0,0,0,1,0,0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "36") (term "1,0,1,0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,0,1,0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0,1,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0,1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0,1,0,1,0"))
                                    (rule "mul_literals" (formula "36") (term "0,1,1,0,0,1,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0,1,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0,1,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0,1,0"))
                                    (rule "mul_literals" (formula "36") (term "0,1,1,0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0,1,0"))
                                    (rule "nnf_imp2or" (formula "36") (term "0,1,0"))
                                    (rule "nnf_notAnd" (formula "36") (term "0,0,1,0"))
                                    (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0,1,0"))
                                    (rule "mul_literals" (formula "36") (term "1,0,0,0,0,0,1,0"))
                                    (rule "add_zero_right" (formula "36") (term "0,0,0,0,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0,1,0"))
                                    (rule "mul_literals" (formula "36") (term "1,0,0,0,1,0"))
                                    (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0,1,0"))
                                    (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0,1,0"))
                                    (rule "add_literals" (formula "36") (term "0,0,0,1,0,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0,1,0"))
                                    (rule "mul_literals" (formula "36") (term "0,1,1,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0,1,0"))
                                    (rule "nnf_imp2or" (formula "36") (term "0,1,0,1,0"))
                                    (rule "nnf_notAnd" (formula "36") (term "0,0,1,0,1,0"))
                                    (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0,1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0,1,0,1,0"))
                                    (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0,1,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0,1,0,1,0"))
                                    (rule "add_literals" (formula "36") (term "0,0,0,1,0,0,1,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0,1,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0,1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0,1,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0,1,0,1,0"))
                                    (rule "mul_literals" (formula "36") (term "0,1,1,0,0,1,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0,1,0,1,0"))
                                    (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0,1,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,0,0,0,1,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0,1,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,0,1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "36") (term "1,0,0,0,1,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0,0,1,0,1,0"))
                                    (rule "mul_literals" (formula "36") (term "0,1,0,0,0,1,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "36") (term "1,1,0,0,0,1,0,1,0"))
                                    (rule "cnf_rightDist" (formula "42") (term "0,0"))
                                    (rule "Contract_axiom_for_bufferLen_in_Buffers" (formula "40") (term "0,1,0,1"))
                                     (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "15")) (ifInst ""  (formula "20")) (ifInst ""  (formula "88")))
                                    (rule "inEqSimp_ltToLeq" (formula "40") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "40") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "40") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "40") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "40") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,1"))
                                    (rule "inEqSimp_homoInEq0" (formula "40") (term "0,0,0"))
                                    (rule "mul_literals" (formula "40") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "40") (term "0,0,0,0"))
                                    (rule "applyEq" (formula "40") (term "0,1,0,1,0,0") (ifseqformula "8"))
                                    (rule "polySimp_mulLiterals" (formula "40") (term "1,0,1,0,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "40") (term "0,1,0,0"))
                                    (rule "add_literals" (formula "40") (term "1,0,1,0,0"))
                                    (rule "times_zero_1" (formula "40") (term "0,1,0,0"))
                                    (rule "leq_literals" (formula "40") (term "1,0,0"))
                                     (builtin "One Step Simplification" (formula "40"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "40") (term "0,0"))
                                    (rule "mul_literals" (formula "40") (term "1,0,0"))
                                    (rule "inEqSimp_subsumption6" (formula "40") (term "0,0") (ifseqformula "59"))
                                    (rule "greater_literals" (formula "40") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "40"))
                                    (rule "mul_literals" (formula "40") (term "1,0,0,0"))
                                    (rule "leq_literals" (formula "40") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "42")))
                                    (rule "true_left" (formula "40"))
                                    (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "40") (term "0,1,0,1"))
                                    (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "40") (term "0") (inst "b=b"))
                                     (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "70")) (ifInst ""  (formula "71")) (ifInst ""  (formula "23")))
                                    (rule "translateJavaMulInt" (formula "40") (term "1,1,0,0,0"))
                                    (rule "mul_literals" (formula "40") (term "1,1,0,0,0"))
                                    (rule "eqSymm" (formula "40") (term "0,0,0,0,0"))
                                    (rule "replace_known_left" (formula "40") (term "1,0,0,0") (ifseqformula "22"))
                                     (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "81")))
                                    (rule "inEqSimp_ltToLeq" (formula "40") (term "1,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,1,0,0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "40") (term "0,1,0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,0,1,0"))
                                    (rule "applyEq" (formula "40") (term "0,0,0,0") (ifseqformula "8"))
                                    (rule "applyEq" (formula "40") (term "0,1,0,0") (ifseqformula "8"))
                                    (rule "applyEq" (formula "40") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "8"))
                                    (rule "polySimp_mulLiterals" (formula "40") (term "1,0,0,1,0,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "1,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "40") (term "1,1,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,0,1,0"))
                                    (rule "mul_literals" (formula "40") (term "0,1,1,0,0,1,0"))
                                    (rule "inEqSimp_subsumption4" (formula "40") (term "1,0,0") (ifseqformula "3"))
                                    (rule "greater_literals" (formula "40") (term "0,0,1,0,0"))
                                     (builtin "One Step Simplification" (formula "40"))
                                    (rule "mul_literals" (formula "40") (term "0,0,1,0,0"))
                                    (rule "leq_literals" (formula "40") (term "0,1,0,0"))
                                     (builtin "One Step Simplification" (formula "40"))
                                    (rule "inEqSimp_subsumption6" (formula "40") (term "0,0") (ifseqformula "58"))
                                    (rule "greater_literals" (formula "40") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "40"))
                                    (rule "mul_literals" (formula "40") (term "1,0,0,0"))
                                    (rule "leq_literals" (formula "40") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "40"))
                                    (rule "nnf_imp2or" (formula "40") (term "0,0"))
                                    (rule "nnf_notAnd" (formula "40") (term "0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "40") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "40") (term "1,0,0,1,0,0,0"))
                                    (rule "mul_literals" (formula "40") (term "0,1,0,0,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "40") (term "0,0,1,0,0,0"))
                                    (rule "add_literals" (formula "40") (term "0,0,0,1,0,0,0"))
                                    (rule "add_zero_left" (formula "40") (term "0,0,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "40") (term "1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "40") (term "0,0,0,0"))
                                    (rule "mul_literals" (formula "40") (term "1,0,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "40") (term "0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "0,0,0,0"))
                                    (rule "mul_literals" (formula "40") (term "1,0,0,0,0"))
                                    (rule "cnf_rightDist" (formula "38") (term "0"))
                                    (rule "all_pull_out3" (formula "37") (term "0"))
                                    (rule "all_pull_out1" (formula "35") (term "0,1,0"))
                                    (rule "cnf_rightDist" (formula "42") (term "0,1,1"))
                                    (rule "Contract_axiom_for_bufferLen_in_Buffers" (formula "41") (term "0,0,0,1"))
                                     (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "15")) (ifInst ""  (formula "20")) (ifInst ""  (formula "88")))
                                    (rule "inEqSimp_ltToLeq" (formula "41") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "41") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "41") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "41") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "41") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "41") (term "0,0,1"))
                                    (rule "inEqSimp_homoInEq0" (formula "41") (term "0,0,0"))
                                    (rule "times_zero_2" (formula "41") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "41") (term "0,0,0,0"))
                                    (rule "apply_eq_monomials" (formula "41") (term "1,0,1,0,0") (ifseqformula "8"))
                                    (rule "polySimp_rightDist" (formula "41") (term "0,1,0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "41") (term "1,0,1,0,1,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "41") (term "1,0,1,0,0"))
                                    (rule "add_literals" (formula "41") (term "1,1,1,0,1,0,0"))
                                    (rule "times_zero_1" (formula "41") (term "1,1,0,1,0,0"))
                                    (rule "add_zero_right" (formula "41") (term "1,0,1,0,0"))
                                    (rule "polySimp_mulAssoc" (formula "41") (term "1,0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "41") (term "0,1,0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "41") (term "1,0,1,0,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "41") (term "0,1,0,0"))
                                    (rule "add_literals" (formula "41") (term "1,0,1,0,0"))
                                    (rule "times_zero_1" (formula "41") (term "0,1,0,0"))
                                    (rule "leq_literals" (formula "41") (term "1,0,0"))
                                     (builtin "One Step Simplification" (formula "41"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "0,0"))
                                    (rule "mul_literals" (formula "41") (term "1,0,0"))
                                    (rule "inEqSimp_subsumption6" (formula "41") (term "0,0") (ifseqformula "59"))
                                    (rule "greater_literals" (formula "41") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "41"))
                                    (rule "mul_literals" (formula "41") (term "1,0,0,0"))
                                    (rule "leq_literals" (formula "41") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "42")))
                                    (rule "true_left" (formula "41"))
                                    (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "41") (term "1,1") (inst "b=b"))
                                     (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "70")) (ifInst ""  (formula "71")) (ifInst ""  (formula "23")))
                                    (rule "translateJavaMulInt" (formula "41") (term "1,1,0,0,1,1"))
                                    (rule "mul_literals" (formula "41") (term "1,1,0,0,1,1"))
                                    (rule "eqSymm" (formula "41") (term "0,0,0,0,1,1"))
                                    (rule "replace_known_right" (formula "41") (term "0,0,0,0,1,1") (ifseqformula "81"))
                                     (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "22")))
                                    (rule "inEqSimp_ltToLeq" (formula "41") (term "1,0,0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,1,0,0,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "41") (term "0,1,0,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "41") (term "0,0,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "41") (term "0,0,0,1,1,1"))
                                    (rule "applyEq" (formula "41") (term "0,0,0,1,1") (ifseqformula "8"))
                                    (rule "applyEq" (formula "41") (term "0,1,0,1,1") (ifseqformula "8"))
                                    (rule "applyEq" (formula "41") (term "0,1,0,0,1,0,0,1,1,1") (ifseqformula "8"))
                                    (rule "polySimp_mulLiterals" (formula "41") (term "1,0,0,1,0,0,1,1,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,0,0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "41") (term "1,1,0,0,1,1,1"))
                                    (rule "polySimp_rightDist" (formula "41") (term "1,1,0,0,1,1,1"))
                                    (rule "mul_literals" (formula "41") (term "0,1,1,0,0,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1,0,0,1,1,1"))
                                    (rule "inEqSimp_subsumption4" (formula "41") (term "1,0,1,1") (ifseqformula "3"))
                                    (rule "mul_literals" (formula "41") (term "0,1,0,1,0,1,1"))
                                    (rule "greater_literals" (formula "41") (term "0,0,1,0,1,1"))
                                     (builtin "One Step Simplification" (formula "41"))
                                    (rule "leq_literals" (formula "41") (term "0,1,0,1,1"))
                                     (builtin "One Step Simplification" (formula "41"))
                                    (rule "inEqSimp_subsumption6" (formula "41") (term "0,1,1") (ifseqformula "58"))
                                    (rule "mul_literals" (formula "41") (term "1,1,0,0,1,1"))
                                    (rule "greater_literals" (formula "41") (term "0,0,0,1,1"))
                                     (builtin "One Step Simplification" (formula "41"))
                                    (rule "leq_literals" (formula "41") (term "0,0,1,1"))
                                     (builtin "One Step Simplification" (formula "41"))
                                    (rule "allLeft" (formula "66") (inst "t=add(Z(neglit(1(#))), l_1)"))
                                    (rule "polySimp_addAssoc" (formula "66") (term "0,2,0,1"))
                                    (rule "add_literals" (formula "66") (term "0,0,2,0,1"))
                                    (rule "add_zero_left" (formula "66") (term "0,2,0,1"))
                                    (rule "inEqSimp_commuteGeq" (formula "66") (term "1"))
                                    (rule "inEqSimp_homoInEq1" (formula "66") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "66") (term "1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "66") (term "1,0,1,0"))
                                    (rule "mul_literals" (formula "66") (term "0,1,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "66") (term "0,1,0"))
                                    (rule "polySimp_addComm0" (formula "66") (term "0,0,1,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "66") (term "0,1,0"))
                                    (rule "add_literals" (formula "66") (term "1,1,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "66") (term "1,0,1,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "66") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "66") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "66") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "66") (term "0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "66") (term "0,0,0"))
                                    (rule "add_literals" (formula "66") (term "0,0,0,0"))
                                    (rule "add_zero_left" (formula "66") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "66") (term "1,0"))
                                    (rule "mul_literals" (formula "66") (term "1,1,0"))
                                    (rule "inEqSimp_invertInEq1" (formula "66") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "66") (term "0,0,0"))
                                    (rule "mul_literals" (formula "66") (term "1,0,0"))
                                    (rule "polySimp_elimOne" (formula "66") (term "0,0,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "66") (term "1,0") (ifseqformula "58"))
                                    (rule "qeq_literals" (formula "66") (term "0,1,0"))
                                     (builtin "One Step Simplification" (formula "66"))
                                    (rule "inEqSimp_contradInEq1" (formula "66") (term "0") (ifseqformula "58"))
                                    (rule "qeq_literals" (formula "66") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "66"))
                                    (rule "pullOutSelect" (formula "66") (term "1") (inst "selectSK=arr_5"))
                                    (rule "simplifySelectOfStore" (formula "66"))
                                     (builtin "One Step Simplification" (formula "66"))
                                    (rule "castDel" (formula "66") (term "1,0"))
                                    (rule "polySimp_homoEq" (formula "66") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "66") (term "1,0,0,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "66") (term "0,0,0"))
                                    (rule "add_literals" (formula "66") (term "1,0,0,0"))
                                    (rule "polySimp_invertEq" (formula "66") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "66") (term "0,0,0"))
                                    (rule "mul_literals" (formula "66") (term "1,0,0"))
                                    (rule "polySimp_elimOne" (formula "66") (term "0,0,0"))
                                    (rule "inEqSimp_contradEq7" (formula "66") (term "0,0") (ifseqformula "58"))
                                    (rule "times_zero_1" (formula "66") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "66") (term "0,0,0,0"))
                                    (rule "leq_literals" (formula "66") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "66"))
                                    (rule "simplifySelectOfAnon" (formula "66"))
                                     (builtin "One Step Simplification" (formula "66") (ifInst ""  (formula "90")) (ifInst ""  (formula "19")))
                                    (rule "elementOfArrayRangeConcrete" (formula "66") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "66"))
                                    (rule "inEqSimp_commuteLeq" (formula "66") (term "0,0,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "66") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "66") (term "0,1,0,0"))
                                    (rule "add_literals" (formula "66") (term "1,0,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "66") (term "0,1,0,0"))
                                     (builtin "One Step Simplification" (formula "66"))
                                    (rule "inEqSimp_subsumption1" (formula "66") (term "0,0") (ifseqformula "58"))
                                    (rule "leq_literals" (formula "66") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "66"))
                                    (rule "applyEqReverse" (formula "67") (term "1") (ifseqformula "66"))
                                    (rule "hideAuxiliaryEq" (formula "66"))
                                    (rule "pullOutSelect" (formula "66") (term "0") (inst "selectSK=arr_6"))
                                    (rule "simplifySelectOfStore" (formula "66"))
                                     (builtin "One Step Simplification" (formula "66"))
                                    (rule "castDel" (formula "66") (term "1,0"))
                                    (rule "polySimp_homoEq" (formula "66") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "66") (term "1,0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "66") (term "0,0,0"))
                                    (rule "add_literals" (formula "66") (term "1,1,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "67"))
                                    (rule "polySimp_sepNegMonomial" (formula "66") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "66") (term "0,0,0"))
                                    (rule "polySimp_elimOne" (formula "66") (term "0,0,0"))
                                    (rule "inEqSimp_contradEq7" (formula "66") (term "0,0") (ifseqformula "58"))
                                    (rule "mul_literals" (formula "66") (term "1,0,0,0,0"))
                                    (rule "add_literals" (formula "66") (term "0,0,0,0"))
                                    (rule "leq_literals" (formula "66") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "66"))
                                    (rule "simplifySelectOfAnon" (formula "66"))
                                     (builtin "One Step Simplification" (formula "66") (ifInst ""  (formula "90")) (ifInst ""  (formula "19")))
                                    (rule "elementOfArrayRangeConcrete" (formula "66") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "66"))
                                    (rule "inEqSimp_homoInEq0" (formula "66") (term "0,0,0"))
                                    (rule "mul_literals" (formula "66") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "66") (term "0,0,0,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "66") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "66") (term "1,0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "66") (term "1,0,1,0,0"))
                                    (rule "mul_literals" (formula "66") (term "0,1,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "66") (term "0,1,0,0"))
                                    (rule "polySimp_addComm0" (formula "66") (term "0,0,1,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "66") (term "0,1,0,0"))
                                    (rule "add_literals" (formula "66") (term "1,1,0,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "66") (term "1,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "66") (term "0,0,0"))
                                    (rule "mul_literals" (formula "66") (term "1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "66") (term "1,0,0"))
                                    (rule "mul_literals" (formula "66") (term "1,1,0,0"))
                                    (rule "inEqSimp_subsumption1" (formula "66") (term "0,0,0") (ifseqformula "58"))
                                    (rule "leq_literals" (formula "66") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "66"))
                                    (rule "inEqSimp_subsumption1" (formula "66") (term "0,0") (ifseqformula "58"))
                                    (rule "leq_literals" (formula "66") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "66"))
                                    (rule "applyEqReverse" (formula "67") (term "1") (ifseqformula "66"))
                                    (rule "hideAuxiliaryEq" (formula "66"))
                                    (rule "inEqSimp_commuteGeq" (formula "66"))
                                    (rule "allLeft" (formula "67") (inst "t=add(Z(neglit(2(#))), l_1)"))
                                    (rule "polySimp_addAssoc" (formula "67") (term "0,2,0,1"))
                                    (rule "add_literals" (formula "67") (term "0,0,2,0,1"))
                                    (rule "replaceKnownSelect_taclet000100012011_14" (formula "67") (term "0,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet000100012011_16" (formula "67") (term "0,1"))
                                    (rule "inEqSimp_commuteGeq" (formula "67") (term "1"))
                                    (rule "inEqSimp_homoInEq0" (formula "67") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "67") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "67") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "67") (term "0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "67") (term "0,0,0"))
                                    (rule "add_literals" (formula "67") (term "0,0,0,0"))
                                    (rule "inEqSimp_homoInEq1" (formula "67") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "67") (term "1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "67") (term "1,0,1,0"))
                                    (rule "mul_literals" (formula "67") (term "0,1,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "67") (term "0,1,0"))
                                    (rule "polySimp_addComm0" (formula "67") (term "0,0,1,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "67") (term "0,1,0"))
                                    (rule "add_literals" (formula "67") (term "1,1,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "67") (term "1,0,1,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "67") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "67") (term "0,0,0"))
                                    (rule "polySimp_elimOne" (formula "67") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "67") (term "1,0"))
                                    (rule "mul_literals" (formula "67") (term "1,1,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "67") (term "0,0") (ifseqformula "58"))
                                    (rule "qeq_literals" (formula "67") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "67"))
                                    (rule "inEqSimp_contradInEq1" (formula "67") (term "0") (ifseqformula "58"))
                                    (rule "qeq_literals" (formula "67") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "67"))
                                    (rule "pullOutSelect" (formula "67") (term "0") (inst "selectSK=arr_7"))
                                    (rule "simplifySelectOfStore" (formula "67"))
                                     (builtin "One Step Simplification" (formula "67"))
                                    (rule "castDel" (formula "67") (term "1,0"))
                                    (rule "polySimp_homoEq" (formula "67") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "67") (term "1,0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "67") (term "0,0,0"))
                                    (rule "add_literals" (formula "67") (term "1,1,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "68"))
                                    (rule "polySimp_sepNegMonomial" (formula "67") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "67") (term "0,0,0"))
                                    (rule "polySimp_elimOne" (formula "67") (term "0,0,0"))
                                    (rule "inEqSimp_contradEq7" (formula "67") (term "0,0") (ifseqformula "58"))
                                    (rule "mul_literals" (formula "67") (term "1,0,0,0,0"))
                                    (rule "add_literals" (formula "67") (term "0,0,0,0"))
                                    (rule "leq_literals" (formula "67") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "67"))
                                    (rule "simplifySelectOfAnon" (formula "67"))
                                     (builtin "One Step Simplification" (formula "67") (ifInst ""  (formula "91")) (ifInst ""  (formula "19")))
                                    (rule "elementOfArrayRangeConcrete" (formula "67") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "67"))
                                    (rule "inEqSimp_homoInEq0" (formula "67") (term "0,0,0"))
                                    (rule "mul_literals" (formula "67") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "67") (term "0,0,0,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "67") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "67") (term "1,0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "67") (term "1,0,1,0,0"))
                                    (rule "mul_literals" (formula "67") (term "0,1,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "67") (term "0,1,0,0"))
                                    (rule "polySimp_addComm0" (formula "67") (term "0,0,1,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "67") (term "0,1,0,0"))
                                    (rule "add_literals" (formula "67") (term "1,1,0,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "67") (term "1,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "67") (term "0,0,0"))
                                    (rule "mul_literals" (formula "67") (term "1,0,0,0"))
                                    (rule "replace_known_left" (formula "67") (term "0,0,0") (ifseqformula "58"))
                                     (builtin "One Step Simplification" (formula "67"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "67") (term "0,0"))
                                    (rule "mul_literals" (formula "67") (term "1,0,0"))
                                    (rule "inEqSimp_subsumption1" (formula "67") (term "0,0") (ifseqformula "58"))
                                    (rule "leq_literals" (formula "67") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "67"))
                                    (rule "applyEqReverse" (formula "68") (term "1") (ifseqformula "67"))
                                    (rule "hideAuxiliaryEq" (formula "67"))
                                    (rule "inEqSimp_commuteGeq" (formula "67"))
                                    (rule "shift_paren_or" (formula "63") (term "0,0"))
                                    (rule "nnf_imp2or" (formula "41") (term "0,1,1"))
                                    (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "36") (term "0,0,0"))
                                    (rule "replace_known_right" (formula "36") (term "0,0,0") (ifseqformula "71"))
                                     (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "15")))
                                    (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "37") (term "0,0,0") (inst "i=i") (inst "j=j_1"))
                                     (builtin "One Step Simplification" (formula "37"))
                                    (rule "inEqSimp_ltToLeq" (formula "37") (term "1,0,0,1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1,0,0,1,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "37") (term "1,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1,0,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "37") (term "1,0,1,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "37") (term "0,0,0,1,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "37") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0,0,1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "37") (term "1,1,0,0,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "37") (term "1,1,0,0,1,0,0,0"))
                                    (rule "mul_literals" (formula "37") (term "0,1,1,0,0,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "37") (term "1,1,1,0,0,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "37") (term "1,1,1,0,0,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "37") (term "1,1,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "37") (term "1,1,0,0,0,0"))
                                    (rule "mul_literals" (formula "37") (term "0,1,1,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "37") (term "1,1,1,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "37") (term "1,1,1,0,0,0,0"))
                                    (rule "commute_or" (formula "40") (term "0,0"))
                                    (rule "shift_paren_or" (formula "53") (term "0,0"))
                                    (rule "allLeft" (formula "12") (inst "t=add(Z(neglit(1(#))), l_1)"))
                                    (rule "replaceKnownSelect_taclet000100012011_15" (formula "12") (term "1,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet000100012011_16" (formula "12") (term "1,1"))
                                    (rule "polySimp_addAssoc" (formula "12") (term "0,2,0,1"))
                                    (rule "add_literals" (formula "12") (term "0,0,2,0,1"))
                                    (rule "add_zero_left" (formula "12") (term "0,2,0,1"))
                                    (rule "replaceKnownSelect_taclet000100012011_12" (formula "12") (term "0,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet000100012011_13" (formula "12") (term "0,1"))
                                    (rule "inEqSimp_commuteGeq" (formula "12") (term "1"))
                                    (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "68"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "true_left" (formula "12"))
                                    (rule "allLeft" (formula "12") (inst "t=add(Z(neglit(2(#))), l_1)"))
                                    (rule "replaceKnownSelect_taclet000100012011_18" (formula "12") (term "1,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet000100012011_19" (formula "12") (term "1,1"))
                                    (rule "polySimp_addAssoc" (formula "12") (term "0,2,0,1"))
                                    (rule "add_literals" (formula "12") (term "0,0,2,0,1"))
                                    (rule "replaceKnownSelect_taclet000100012011_15" (formula "12") (term "0,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet000100012011_16" (formula "12") (term "0,1"))
                                    (rule "inEqSimp_commuteGeq" (formula "12") (term "1"))
                                    (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "69"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "true_left" (formula "12"))
                                    (rule "distr_forallAnd" (formula "39"))
                                    (rule "andLeft" (formula "39"))
                                    (rule "allLeft" (formula "13") (inst "t=add(Z(neglit(1(#))), l_1)"))
                                    (rule "replaceKnownSelect_taclet000100012011_15" (formula "13") (term "0,1,0,1,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet000100012011_16" (formula "13") (term "0,1,0,1,1"))
                                    (rule "polySimp_homoEq" (formula "13") (term "0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,1,1"))
                                    (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,1,1"))
                                    (rule "mul_literals" (formula "13") (term "0,1,0,0,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "13") (term "0,2,2,1,1,1"))
                                    (rule "add_literals" (formula "13") (term "0,0,2,2,1,1,1"))
                                    (rule "add_zero_left" (formula "13") (term "0,2,2,1,1,1"))
                                    (rule "replaceKnownSelect_taclet000100012011_12" (formula "13") (term "2,1,1,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet000100012011_13" (formula "13") (term "2,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "13") (term "0,0,0,1,1,1"))
                                    (rule "add_literals" (formula "13") (term "0,0,0,0,1,1,1"))
                                    (rule "add_zero_left" (formula "13") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_pullOutFactor0" (formula "13") (term "0,0,1,1,1"))
                                    (rule "add_literals" (formula "13") (term "1,0,0,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "13") (term "0,0,1,1,1"))
                                    (rule "inEqSimp_homoInEq1" (formula "13") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "13") (term "1,0,1,0"))
                                    (rule "mul_literals" (formula "13") (term "0,1,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "13") (term "0,1,0"))
                                    (rule "polySimp_addComm0" (formula "13") (term "0,0,1,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "13") (term "0,1,0"))
                                    (rule "add_literals" (formula "13") (term "1,1,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "13") (term "1,0,1,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "13") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "13") (term "0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "13") (term "0,0,0"))
                                    (rule "add_literals" (formula "13") (term "0,0,0,0"))
                                    (rule "add_zero_left" (formula "13") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0"))
                                    (rule "mul_literals" (formula "13") (term "1,1,0"))
                                    (rule "inEqSimp_invertInEq1" (formula "13") (term "0,0"))
                                    (rule "mul_literals" (formula "13") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0"))
                                    (rule "polySimp_elimOne" (formula "13") (term "0,0,0"))
                                    (rule "inEqSimp_contradEq7" (formula "13") (term "0,1,1,1") (ifseqformula "61"))
                                    (rule "mul_literals" (formula "13") (term "1,0,0,0,1,1,1"))
                                    (rule "add_literals" (formula "13") (term "0,0,0,1,1,1"))
                                    (rule "leq_literals" (formula "13") (term "0,0,1,1,1"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "polySimp_addComm1" (formula "13") (term "1,1"))
                                    (rule "inEqSimp_contradInEq1" (formula "13") (term "1,0") (ifseqformula "61"))
                                    (rule "qeq_literals" (formula "13") (term "0,1,0"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "inEqSimp_contradInEq1" (formula "13") (term "0") (ifseqformula "61"))
                                    (rule "qeq_literals" (formula "13") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "allLeft" (formula "14") (inst "t=add(Z(neglit(2(#))), l_1)"))
                                    (rule "replaceKnownSelect_taclet000100012011_18" (formula "14") (term "0,1,0,1,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet000100012011_19" (formula "14") (term "0,1,0,1,1"))
                                    (rule "polySimp_homoEq" (formula "14") (term "0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,1,1"))
                                    (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,1,1"))
                                    (rule "mul_literals" (formula "14") (term "0,1,0,0,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "14") (term "0,2,2,1,1,1"))
                                    (rule "add_literals" (formula "14") (term "0,0,2,2,1,1,1"))
                                    (rule "replaceKnownSelect_taclet000100012011_15" (formula "14") (term "2,1,1,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet000100012011_16" (formula "14") (term "2,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "14") (term "0,0,0,1,1,1"))
                                    (rule "add_literals" (formula "14") (term "0,0,0,0,1,1,1"))
                                    (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,0,1,1,1"))
                                    (rule "add_literals" (formula "14") (term "1,1,0,0,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "14") (term "1,0,0,1,1,1"))
                                    (rule "inEqSimp_homoInEq1" (formula "14") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "14") (term "1,0,1,0"))
                                    (rule "mul_literals" (formula "14") (term "0,1,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "14") (term "0,1,0"))
                                    (rule "polySimp_addComm0" (formula "14") (term "0,0,1,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,1,0"))
                                    (rule "add_literals" (formula "14") (term "1,1,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "14") (term "1,0,1,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "14") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "14") (term "0,0,0"))
                                    (rule "add_literals" (formula "14") (term "0,0,0,0"))
                                    (rule "polySimp_sepPosMonomial" (formula "14") (term "0,1,1,1"))
                                    (rule "mul_literals" (formula "14") (term "1,0,1,1,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0"))
                                    (rule "mul_literals" (formula "14") (term "1,1,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "14") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0"))
                                    (rule "polySimp_elimOne" (formula "14") (term "0,0,0"))
                                    (rule "inEqSimp_contradEq7" (formula "14") (term "0,1,1,1") (ifseqformula "62"))
                                    (rule "mul_literals" (formula "14") (term "1,0,0,0,1,1,1"))
                                    (rule "add_literals" (formula "14") (term "0,0,0,1,1,1"))
                                    (rule "leq_literals" (formula "14") (term "0,0,1,1,1"))
                                     (builtin "One Step Simplification" (formula "14"))
                                    (rule "polySimp_addComm1" (formula "14") (term "1,1"))
                                    (rule "inEqSimp_contradInEq1" (formula "14") (term "1,0") (ifseqformula "62"))
                                    (rule "qeq_literals" (formula "14") (term "0,1,0"))
                                     (builtin "One Step Simplification" (formula "14"))
                                    (rule "inEqSimp_contradInEq1" (formula "14") (term "0") (ifseqformula "62"))
                                    (rule "qeq_literals" (formula "14") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "14"))
                                    (rule "allLeft" (formula "35") (inst "t=add(Z(neglit(1(#))), l_1)"))
                                    (rule "inEqSimp_homoInEq1" (formula "35") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "35") (term "1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "35") (term "1,0,1,0"))
                                    (rule "mul_literals" (formula "35") (term "0,1,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "35") (term "0,1,0"))
                                    (rule "polySimp_addComm0" (formula "35") (term "0,0,1,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "35") (term "0,1,0"))
                                    (rule "add_literals" (formula "35") (term "1,1,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "35") (term "1,0,1,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "35") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "35") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "35") (term "0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "35") (term "0,0,0"))
                                    (rule "add_literals" (formula "35") (term "0,0,0,0"))
                                    (rule "add_zero_left" (formula "35") (term "0,0,0"))
                                    (rule "applyEq" (formula "35") (term "0,1") (ifseqformula "13"))
                                    (rule "polySimp_homoEq" (formula "35") (term "1"))
                                    (rule "polySimp_mulComm0" (formula "35") (term "1,0,1"))
                                    (rule "polySimp_rightDist" (formula "35") (term "1,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,1"))
                                    (rule "polySimp_elimOne" (formula "35") (term "1,1,0,1"))
                                    (rule "polySimp_rightDist" (formula "35") (term "0,1,0,1"))
                                    (rule "polySimp_mulAssoc" (formula "35") (term "0,0,1,0,1"))
                                    (rule "polySimp_mulComm0" (formula "35") (term "0,0,0,1,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "35") (term "0,0,1,0,1"))
                                    (rule "polySimp_elimOne" (formula "35") (term "0,0,1,0,1"))
                                    (rule "polySimp_addAssoc" (formula "35") (term "0,1"))
                                    (rule "polySimp_addAssoc" (formula "35") (term "0,0,1"))
                                    (rule "polySimp_sepPosMonomial" (formula "35") (term "1"))
                                    (rule "polySimp_mulComm0" (formula "35") (term "1,1"))
                                    (rule "polySimp_rightDist" (formula "35") (term "1,1"))
                                    (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1"))
                                    (rule "polySimp_elimOne" (formula "35") (term "1,1,1"))
                                    (rule "polySimp_rightDist" (formula "35") (term "0,1,1"))
                                    (rule "polySimp_mulComm0" (formula "35") (term "0,0,1,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0"))
                                    (rule "mul_literals" (formula "35") (term "1,1,0"))
                                    (rule "inEqSimp_invertInEq1" (formula "35") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "35") (term "0,0,0"))
                                    (rule "times_zero_2" (formula "35") (term "1,0,0"))
                                    (rule "polySimp_elimOne" (formula "35") (term "0,0,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "35") (term "1,0") (ifseqformula "63"))
                                    (rule "qeq_literals" (formula "35") (term "0,1,0"))
                                     (builtin "One Step Simplification" (formula "35"))
                                    (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "63"))
                                    (rule "qeq_literals" (formula "35") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "35"))
                                    (rule "applyEq" (formula "71") (term "0") (ifseqformula "35"))
                                    (rule "inEqSimp_homoInEq0" (formula "71"))
                                    (rule "polySimp_mulComm0" (formula "71") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "71") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "71") (term "0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "71") (term "1,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "71") (term "1,0,1,0"))
                                    (rule "polySimp_mulAssoc" (formula "71") (term "0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "71") (term "0,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "71") (term "0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "71") (term "0,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "71") (term "0"))
                                    (rule "polySimp_addComm0" (formula "71") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "71") (term "0"))
                                    (rule "add_literals" (formula "71") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "71") (term "1,0"))
                                    (rule "add_zero_right" (formula "71") (term "0"))
                                    (rule "applyEq" (formula "72") (term "1") (ifseqformula "35"))
                                    (rule "applyEq" (formula "13") (term "0,1,1") (ifseqformula "35"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "1,1"))
                                    (rule "polySimp_rightDist" (formula "13") (term "1,1"))
                                    (rule "polySimp_rightDist" (formula "13") (term "0,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,1"))
                                    (rule "polySimp_elimOne" (formula "13") (term "1,0,1,1"))
                                    (rule "polySimp_mulAssoc" (formula "13") (term "0,0,1,1"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "0,0,0,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "0,0,1,1"))
                                    (rule "polySimp_elimOne" (formula "13") (term "0,0,1,1"))
                                    (rule "polySimp_addAssoc" (formula "13") (term "1"))
                                    (rule "polySimp_addComm1" (formula "13") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "13") (term "1"))
                                    (rule "add_literals" (formula "13") (term "1,1,1"))
                                    (rule "times_zero_1" (formula "13") (term "1,1"))
                                    (rule "add_zero_right" (formula "13") (term "1"))
                                    (rule "polySimp_addAssoc" (formula "13") (term "1"))
                                    (rule "polySimp_addComm0" (formula "13") (term "0,1"))
                                    (rule "polySimp_pullOutFactor2b" (formula "13") (term "1"))
                                    (rule "add_literals" (formula "13") (term "1,1,1"))
                                    (rule "times_zero_1" (formula "13") (term "1,1"))
                                    (rule "add_zero_right" (formula "13") (term "1"))
                                    (rule "applyEq" (formula "14") (term "1,0,1") (ifseqformula "35"))
                                    (rule "polySimp_addAssoc" (formula "14") (term "0,1"))
                                    (rule "polySimp_addComm0" (formula "14") (term "0,0,1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "71"))
                                    (rule "allLeft" (formula "36") (inst "t=add(Z(neglit(2(#))), l_1)"))
                                    (rule "inEqSimp_homoInEq1" (formula "36") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "36") (term "1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "36") (term "1,0,1,0"))
                                    (rule "mul_literals" (formula "36") (term "0,1,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "36") (term "0,1,0"))
                                    (rule "polySimp_addComm0" (formula "36") (term "0,0,1,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "36") (term "0,1,0"))
                                    (rule "add_literals" (formula "36") (term "1,1,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "36") (term "1,0,1,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "36") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "36") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "36") (term "0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "36") (term "0,0,0"))
                                    (rule "add_literals" (formula "36") (term "0,0,0,0"))
                                    (rule "applyEq" (formula "36") (term "0,1") (ifseqformula "14"))
                                    (rule "polySimp_homoEq" (formula "36") (term "1"))
                                    (rule "polySimp_mulComm0" (formula "36") (term "1,0,1"))
                                    (rule "polySimp_rightDist" (formula "36") (term "1,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,1"))
                                    (rule "polySimp_elimOne" (formula "36") (term "1,1,0,1"))
                                    (rule "polySimp_rightDist" (formula "36") (term "0,1,0,1"))
                                    (rule "polySimp_rightDist" (formula "36") (term "0,0,1,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "36") (term "1,0,0,1,0,1"))
                                    (rule "polySimp_elimOne" (formula "36") (term "1,0,0,1,0,1"))
                                    (rule "polySimp_rightDist" (formula "36") (term "0,0,0,1,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "36") (term "1,0,0,0,1,0,1"))
                                    (rule "polySimp_elimOne" (formula "36") (term "1,0,0,0,1,0,1"))
                                    (rule "polySimp_mulAssoc" (formula "36") (term "0,0,0,0,1,0,1"))
                                    (rule "polySimp_mulComm0" (formula "36") (term "0,0,0,0,0,1,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "36") (term "0,0,0,0,1,0,1"))
                                    (rule "polySimp_elimOne" (formula "36") (term "0,0,0,0,1,0,1"))
                                    (rule "polySimp_addAssoc" (formula "36") (term "0,1"))
                                    (rule "polySimp_addAssoc" (formula "36") (term "0,0,1"))
                                    (rule "polySimp_addAssoc" (formula "36") (term "0,0,0,1"))
                                    (rule "polySimp_addComm0" (formula "36") (term "0,0,0,0,1"))
                                    (rule "polySimp_sepPosMonomial" (formula "36") (term "1"))
                                    (rule "polySimp_mulComm0" (formula "36") (term "1,1"))
                                    (rule "polySimp_rightDist" (formula "36") (term "1,1"))
                                    (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1"))
                                    (rule "polySimp_elimOne" (formula "36") (term "1,1,1"))
                                    (rule "polySimp_rightDist" (formula "36") (term "0,1,1"))
                                    (rule "polySimp_rightDist" (formula "36") (term "0,0,1,1"))
                                    (rule "polySimp_rightDist" (formula "36") (term "0,0,0,1,1"))
                                    (rule "polySimp_mulComm0" (formula "36") (term "0,0,0,0,1,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0"))
                                    (rule "mul_literals" (formula "36") (term "1,1,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "36") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "36") (term "0,0,0"))
                                    (rule "polySimp_elimOne" (formula "36") (term "0,0,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "36") (term "1,0") (ifseqformula "64"))
                                    (rule "qeq_literals" (formula "36") (term "0,1,0"))
                                     (builtin "One Step Simplification" (formula "36"))
                                    (rule "inEqSimp_contradInEq1" (formula "36") (term "0") (ifseqformula "64"))
                                    (rule "qeq_literals" (formula "36") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "36"))
                                    (rule "applyEq" (formula "73") (term "0") (ifseqformula "36"))
                                    (rule "inEqSimp_homoInEq0" (formula "73"))
                                    (rule "polySimp_mulComm0" (formula "73") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "73") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "73") (term "0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "73") (term "1,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "73") (term "1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "73") (term "0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "73") (term "1,0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "73") (term "1,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "73") (term "0,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "73") (term "1,0,0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "73") (term "1,0,0,0,1,0"))
                                    (rule "polySimp_mulAssoc" (formula "73") (term "0,0,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "73") (term "0,0,0,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "73") (term "0,0,0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "73") (term "0,0,0,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "73") (term "0"))
                                    (rule "polySimp_addComm1" (formula "73") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "73") (term "0"))
                                    (rule "add_literals" (formula "73") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "73") (term "1,0"))
                                    (rule "add_zero_right" (formula "73") (term "0"))
                                    (rule "polySimp_addAssoc" (formula "73") (term "0"))
                                    (rule "polySimp_addAssoc" (formula "73") (term "0,0"))
                                    (rule "polySimp_addAssoc" (formula "73") (term "0,0,0"))
                                    (rule "polySimp_addComm1" (formula "73") (term "0,0,0,0"))
                                    (rule "polySimp_pullOutFactor2b" (formula "73") (term "0,0,0"))
                                    (rule "add_literals" (formula "73") (term "1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "73") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "73") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor2" (formula "73") (term "0,0,0"))
                                    (rule "add_literals" (formula "73") (term "1,0,0,0"))
                                    (rule "times_zero_1" (formula "73") (term "0,0,0"))
                                    (rule "add_zero_left" (formula "73") (term "0,0"))
                                    (rule "applyEq" (formula "14") (term "0,1,1") (ifseqformula "36"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,1"))
                                    (rule "polySimp_rightDist" (formula "14") (term "1,1"))
                                    (rule "polySimp_rightDist" (formula "14") (term "0,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,1"))
                                    (rule "polySimp_elimOne" (formula "14") (term "1,0,1,1"))
                                    (rule "polySimp_rightDist" (formula "14") (term "0,0,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,1,1"))
                                    (rule "polySimp_elimOne" (formula "14") (term "1,0,0,1,1"))
                                    (rule "polySimp_rightDist" (formula "14") (term "0,0,0,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0,1,1"))
                                    (rule "polySimp_elimOne" (formula "14") (term "1,0,0,0,1,1"))
                                    (rule "polySimp_mulAssoc" (formula "14") (term "0,0,0,0,1,1"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "0,0,0,0,0,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0,0,1,1"))
                                    (rule "polySimp_elimOne" (formula "14") (term "0,0,0,0,1,1"))
                                    (rule "polySimp_addAssoc" (formula "14") (term "1"))
                                    (rule "polySimp_addComm1" (formula "14") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "14") (term "1"))
                                    (rule "add_literals" (formula "14") (term "1,1,1"))
                                    (rule "times_zero_1" (formula "14") (term "1,1"))
                                    (rule "add_zero_right" (formula "14") (term "1"))
                                    (rule "polySimp_addAssoc" (formula "14") (term "1"))
                                    (rule "polySimp_addComm1" (formula "14") (term "0,1"))
                                    (rule "polySimp_pullOutFactor2b" (formula "14") (term "1"))
                                    (rule "add_literals" (formula "14") (term "1,1,1"))
                                    (rule "times_zero_1" (formula "14") (term "1,1"))
                                    (rule "add_zero_right" (formula "14") (term "1"))
                                    (rule "polySimp_addAssoc" (formula "14") (term "1"))
                                    (rule "polySimp_addAssoc" (formula "14") (term "0,1"))
                                    (rule "polySimp_addComm1" (formula "14") (term "0,0,1"))
                                    (rule "polySimp_pullOutFactor2b" (formula "14") (term "0,1"))
                                    (rule "add_literals" (formula "14") (term "1,1,0,1"))
                                    (rule "times_zero_1" (formula "14") (term "1,0,1"))
                                    (rule "add_zero_right" (formula "14") (term "0,1"))
                                    (rule "polySimp_pullOutFactor2" (formula "14") (term "0,1"))
                                    (rule "add_literals" (formula "14") (term "1,0,1"))
                                    (rule "times_zero_1" (formula "14") (term "0,1"))
                                    (rule "add_zero_left" (formula "14") (term "1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "73"))
                                    (rule "commute_or" (formula "48") (term "1,0,0"))
                                    (rule "Contract_axiom_for_bufferLen_in_Buffers" (formula "46") (term "0,0,0,1"))
                                     (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "17")) (ifInst ""  (formula "22")) (ifInst ""  (formula "96")))
                                    (rule "inEqSimp_ltToLeq" (formula "46") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "46") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "46") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "46") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "46") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "46") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "46") (term "0,0,1"))
                                    (rule "inEqSimp_homoInEq0" (formula "46") (term "0,0,0"))
                                    (rule "mul_literals" (formula "46") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "46") (term "0,0,0,0"))
                                    (rule "applyEq" (formula "46") (term "0,1,0,1,0,0") (ifseqformula "8"))
                                    (rule "polySimp_mulLiterals" (formula "46") (term "1,0,1,0,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "46") (term "0,1,0,0"))
                                    (rule "add_literals" (formula "46") (term "1,0,1,0,0"))
                                    (rule "times_zero_1" (formula "46") (term "0,1,0,0"))
                                    (rule "leq_literals" (formula "46") (term "1,0,0"))
                                     (builtin "One Step Simplification" (formula "46"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "46") (term "0,0"))
                                    (rule "mul_literals" (formula "46") (term "1,0,0"))
                                    (rule "inEqSimp_subsumption6" (formula "46") (term "0,0") (ifseqformula "65"))
                                    (rule "greater_literals" (formula "46") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "46"))
                                    (rule "mul_literals" (formula "46") (term "1,0,0,0"))
                                    (rule "leq_literals" (formula "46") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "46"))
                                    (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "47") (term "0,0,0,1"))
                                    (rule "allLeft" (formula "75") (inst "t=Z(0(#))"))
                                    (rule "add_literals" (formula "75") (term "0,2,0,1"))
                                    (rule "leq_literals" (formula "75") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "75"))
                                    (rule "inEqSimp_commuteGeq" (formula "75") (term "0"))
                                    (rule "inEqSimp_contradInEq5" (formula "75") (term "0") (ifseqformula "65"))
                                    (rule "greater_literals" (formula "75") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "75"))
                                    (rule "mul_literals" (formula "75") (term "1,0,0"))
                                    (rule "qeq_literals" (formula "75") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "75"))
                                    (rule "pullOutSelect" (formula "75") (term "1") (inst "selectSK=arr_8"))
                                    (rule "simplifySelectOfStore" (formula "75"))
                                     (builtin "One Step Simplification" (formula "75"))
                                    (rule "castDel" (formula "75") (term "1,0"))
                                    (rule "elimGcdEq" (formula "75") (term "0,0") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(2(#))"))
                                     (builtin "One Step Simplification" (formula "75"))
                                    (rule "mul_literals" (formula "75") (term "0,1,0,1,0,0,0"))
                                    (rule "add_zero_left" (formula "75") (term "0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "75") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "75") (term "1,0,0,0,0"))
                                    (rule "mul_literals" (formula "75") (term "1,0,1,0,0,0"))
                                    (rule "times_zero_1" (formula "75") (term "0,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "75") (term "0,0,1,0,0"))
                                    (rule "add_zero_right" (formula "75") (term "0,1,0,0,0"))
                                    (rule "leq_literals" (formula "75") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "75"))
                                    (rule "mul_literals" (formula "75") (term "0,0,1,0,0"))
                                     (builtin "One Step Simplification" (formula "75"))
                                    (rule "qeq_literals" (formula "75") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "75"))
                                    (rule "inEqSimp_contradEq7" (formula "75") (term "0,0") (ifseqformula "65"))
                                    (rule "mul_literals" (formula "75") (term "1,0,0,0,0"))
                                    (rule "add_literals" (formula "75") (term "0,0,0,0"))
                                    (rule "leq_literals" (formula "75") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "75"))
                                    (rule "simplifySelectOfAnon" (formula "75"))
                                     (builtin "One Step Simplification" (formula "75") (ifInst ""  (formula "99")) (ifInst ""  (formula "21")))
                                    (rule "elementOfArrayRangeConcrete" (formula "75") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "75"))
                                    (rule "leq_literals" (formula "75") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "75"))
                                    (rule "inEqSimp_commuteLeq" (formula "75") (term "0,0"))
                                    (rule "applyEq" (formula "75") (term "1,0") (ifseqformula "9"))
                                    (rule "inEqSimp_subsumption6" (formula "75") (term "0,0") (ifseqformula "65"))
                                    (rule "greater_literals" (formula "75") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "75"))
                                    (rule "mul_literals" (formula "75") (term "1,0,0,0"))
                                    (rule "leq_literals" (formula "75") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "75"))
                                    (rule "applyEqReverse" (formula "76") (term "1") (ifseqformula "75"))
                                    (rule "hideAuxiliaryEq" (formula "75"))
                                    (rule "pullOutSelect" (formula "75") (term "0") (inst "selectSK=arr_9"))
                                    (rule "simplifySelectOfStore" (formula "75"))
                                     (builtin "One Step Simplification" (formula "75"))
                                    (rule "castDel" (formula "75") (term "1,0"))
                                    (rule "elimGcdEq" (formula "75") (term "0,0") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(2(#))"))
                                     (builtin "One Step Simplification" (formula "75"))
                                    (rule "polySimp_mulLiterals" (formula "75") (term "1,0,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "75") (term "1,0,0,1,0,0"))
                                    (rule "add_literals" (formula "75") (term "1,0,0,0,0"))
                                    (rule "times_zero_1" (formula "75") (term "1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "75") (term "1,0,1,0,0,0"))
                                    (rule "mul_literals" (formula "75") (term "1,0,0,1,0,0"))
                                    (rule "add_literals" (formula "75") (term "0,0,0,0,0"))
                                    (rule "add_literals" (formula "75") (term "0,1,0,0,0"))
                                    (rule "add_zero_right" (formula "75") (term "0,0,1,0,0"))
                                    (rule "leq_literals" (formula "75") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "75"))
                                    (rule "equal_literals" (formula "75") (term "0,1,0,0"))
                                     (builtin "One Step Simplification" (formula "75"))
                                    (rule "qeq_literals" (formula "75") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "75"))
                                    (rule "simplifySelectOfAnon" (formula "75"))
                                     (builtin "One Step Simplification" (formula "75") (ifInst ""  (formula "99")) (ifInst ""  (formula "21")))
                                    (rule "elementOfArrayRangeConcrete" (formula "75") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "75"))
                                    (rule "leq_literals" (formula "75") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "75"))
                                    (rule "inEqSimp_commuteLeq" (formula "75") (term "0,0"))
                                    (rule "inEqSimp_subsumption6" (formula "75") (term "0,0") (ifseqformula "65"))
                                    (rule "mul_literals" (formula "75") (term "1,1,0,0,0"))
                                    (rule "greater_literals" (formula "75") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "75"))
                                    (rule "leq_literals" (formula "75") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "75"))
                                    (rule "applyEqReverse" (formula "76") (term "0") (ifseqformula "75"))
                                    (rule "hideAuxiliaryEq" (formula "75"))
                                    (rule "allLeft" (formula "76") (inst "t=add(Z(neglit(1(#))), mul(l_1, Z(2(#))))"))
                                    (rule "polySimp_addAssoc" (formula "76") (term "0,2,0,1"))
                                    (rule "add_literals" (formula "76") (term "0,0,2,0,1"))
                                    (rule "add_zero_left" (formula "76") (term "0,2,0,1"))
                                    (rule "inEqSimp_commuteGeq" (formula "76") (term "1"))
                                    (rule "inEqSimp_homoInEq0" (formula "76") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "76") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "76") (term "1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "76") (term "1,1,0,0,0"))
                                    (rule "mul_literals" (formula "76") (term "0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "76") (term "0,0,0"))
                                    (rule "add_literals" (formula "76") (term "0,0,0,0"))
                                    (rule "add_zero_left" (formula "76") (term "0,0,0"))
                                    (rule "inEqSimp_homoInEq1" (formula "76") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "76") (term "1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "76") (term "1,0,1,0"))
                                    (rule "mul_literals" (formula "76") (term "0,1,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "76") (term "1,1,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "76") (term "0,1,0"))
                                    (rule "polySimp_addComm0" (formula "76") (term "0,0,1,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "76") (term "0,1,0"))
                                    (rule "add_literals" (formula "76") (term "1,1,0,1,0"))
                                    (rule "times_zero_1" (formula "76") (term "1,0,1,0"))
                                    (rule "add_zero_right" (formula "76") (term "0,1,0"))
                                    (rule "leq_literals" (formula "76") (term "1,0"))
                                     (builtin "One Step Simplification" (formula "76"))
                                    (rule "inEqSimp_invertInEq1" (formula "76") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "76") (term "0,0"))
                                    (rule "mul_literals" (formula "76") (term "1,0"))
                                    (rule "inEqSimp_contradInEq5" (formula "76") (term "0") (ifseqformula "65"))
                                    (rule "mul_literals" (formula "76") (term "1,1,0,0"))
                                    (rule "greater_literals" (formula "76") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "76"))
                                    (rule "qeq_literals" (formula "76") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "76"))
                                    (rule "pullOutSelect" (formula "76") (term "1") (inst "selectSK=arr_10"))
                                    (rule "simplifySelectOfStore" (formula "76"))
                                     (builtin "One Step Simplification" (formula "76"))
                                    (rule "castDel" (formula "76") (term "0"))
                                    (rule "applyEqReverse" (formula "77") (term "1") (ifseqformula "76"))
                                    (rule "hideAuxiliaryEq" (formula "76"))
                                    (rule "pullOutSelect" (formula "76") (term "0") (inst "selectSK=arr_11"))
                                    (rule "simplifySelectOfStore" (formula "76"))
                                     (builtin "One Step Simplification" (formula "76"))
                                    (rule "castDel" (formula "76") (term "1,0"))
                                    (rule "polySimp_homoEq" (formula "76") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "76") (term "1,0,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "76") (term "0,0,0"))
                                    (rule "add_literals" (formula "76") (term "1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "76") (term "1,0,0,0"))
                                    (rule "add_literals" (formula "76") (term "0,0,0"))
                                    (rule "equal_literals" (formula "76") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "76"))
                                    (rule "simplifySelectOfAnon" (formula "76"))
                                     (builtin "One Step Simplification" (formula "76") (ifInst ""  (formula "100")) (ifInst ""  (formula "21")))
                                    (rule "elementOfArrayRangeConcrete" (formula "76") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "76"))
                                    (rule "inEqSimp_homoInEq0" (formula "77"))
                                    (rule "polySimp_addComm1" (formula "77") (term "0"))
                                    (rule "polySimp_addComm0" (formula "77") (term "0,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "76") (term "0,0,0"))
                                    (rule "mul_literals" (formula "76") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "76") (term "0,0,0,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "76") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "76") (term "1,0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "76") (term "1,0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "76") (term "1,1,0,1,0,0"))
                                    (rule "mul_literals" (formula "76") (term "0,1,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "76") (term "0,1,0,0"))
                                    (rule "polySimp_addComm0" (formula "76") (term "0,0,1,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "76") (term "0,1,0,0"))
                                    (rule "add_literals" (formula "76") (term "1,1,0,1,0,0"))
                                    (rule "times_zero_1" (formula "76") (term "1,0,1,0,0"))
                                    (rule "add_literals" (formula "76") (term "0,1,0,0"))
                                    (rule "qeq_literals" (formula "76") (term "1,0,0"))
                                     (builtin "One Step Simplification" (formula "76"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "77"))
                                    (rule "polySimp_mulComm0" (formula "77") (term "1"))
                                    (rule "polySimp_rightDist" (formula "77") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "77") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "77") (term "1,1"))
                                    (rule "polySimp_mulAssoc" (formula "77") (term "0,1"))
                                    (rule "polySimp_mulComm0" (formula "77") (term "0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "77") (term "0,1"))
                                    (rule "polySimp_elimOne" (formula "77") (term "0,1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "76") (term "0,0"))
                                    (rule "mul_literals" (formula "76") (term "1,0,0"))
                                    (rule "inEqSimp_subsumption6" (formula "76") (term "0,0") (ifseqformula "65"))
                                    (rule "mul_literals" (formula "76") (term "1,1,0,0,0"))
                                    (rule "greater_literals" (formula "76") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "76"))
                                    (rule "leq_literals" (formula "76") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "76"))
                                    (rule "applyEqReverse" (formula "77") (term "0,1") (ifseqformula "76"))
                                    (rule "hideAuxiliaryEq" (formula "76"))
                                    (rule "polySimp_addComm0" (formula "76") (term "1"))
                                    (rule "inEqSimp_homoInEq1" (formula "76"))
                                    (rule "polySimp_addComm1" (formula "76") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "76"))
                                    (rule "polySimp_mulComm0" (formula "76") (term "1"))
                                    (rule "polySimp_rightDist" (formula "76") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "76") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "76") (term "1,1"))
                                    (rule "polySimp_mulComm0" (formula "76") (term "0,1"))
                                    (rule "nnf_notAnd" (formula "48") (term "0,0,1,1"))
                                    (rule "inEqSimp_notLeq" (formula "48") (term "1,0,0,1,1"))
                                    (rule "polySimp_rightDist" (formula "48") (term "1,0,0,1,0,0,1,1"))
                                    (rule "mul_literals" (formula "48") (term "0,1,0,0,1,0,0,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "48") (term "1,1,0,0,1,0,0,1,1"))
                                    (rule "polySimp_addAssoc" (formula "48") (term "0,0,1,0,0,1,1"))
                                    (rule "add_literals" (formula "48") (term "0,0,0,1,0,0,1,1"))
                                    (rule "add_zero_left" (formula "48") (term "0,0,1,0,0,1,1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "48") (term "1,0,0,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "48") (term "1,1,0,0,1,1"))
                                    (rule "inEqSimp_notGeq" (formula "48") (term "0,0,0,1,1"))
                                    (rule "mul_literals" (formula "48") (term "1,0,0,0,0,0,1,1"))
                                    (rule "add_zero_right" (formula "48") (term "0,0,0,0,0,1,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "48") (term "0,0,0,1,1"))
                                    (rule "mul_literals" (formula "48") (term "1,0,0,0,1,1"))
                                    (rule "shift_paren_or" (formula "42") (term "0,0"))
                                    (rule "nnf_imp2or" (formula "41") (term "0,0,0"))
                                    (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "48") (term "0") (inst "b=b"))
                                     (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "80")) (ifInst ""  (formula "81")) (ifInst ""  (formula "25")))
                                    (rule "translateJavaMulInt" (formula "48") (term "1,1,0,0,0"))
                                    (rule "mul_literals" (formula "48") (term "1,1,0,0,0"))
                                    (rule "eqSymm" (formula "48") (term "0,0,0,0,0"))
                                    (rule "replace_known_left" (formula "48") (term "1,0,0,0") (ifseqformula "24"))
                                     (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "91")))
                                    (rule "inEqSimp_ltToLeq" (formula "48") (term "1,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "48") (term "1,0,0,1,0,0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "48") (term "0,1,0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "48") (term "0,0,0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "48") (term "0,0,0"))
                                    (rule "applyEq" (formula "48") (term "0,0,0,0") (ifseqformula "8"))
                                    (rule "applyEq" (formula "48") (term "0,1,0,0") (ifseqformula "8"))
                                    (rule "applyEq" (formula "48") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "8"))
                                    (rule "polySimp_mulLiterals" (formula "48") (term "1,0,0,1,0,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "48") (term "1,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "48") (term "1,1,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "48") (term "1,1,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "48") (term "1,1,1,0,0,1,0"))
                                    (rule "mul_literals" (formula "48") (term "0,1,1,0,0,1,0"))
                                    (rule "inEqSimp_subsumption4" (formula "48") (term "1,0,0") (ifseqformula "3"))
                                    (rule "mul_literals" (formula "48") (term "0,1,0,1,0,0"))
                                    (rule "greater_literals" (formula "48") (term "0,0,1,0,0"))
                                     (builtin "One Step Simplification" (formula "48"))
                                    (rule "leq_literals" (formula "48") (term "0,1,0,0"))
                                     (builtin "One Step Simplification" (formula "48"))
                                    (rule "inEqSimp_subsumption6" (formula "48") (term "0,0") (ifseqformula "65"))
                                    (rule "greater_literals" (formula "48") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "48"))
                                    (rule "mul_literals" (formula "48") (term "1,0,0,0"))
                                    (rule "leq_literals" (formula "48") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "48"))
                                    (rule "commute_or" (formula "49") (term "1,0,1,1"))
                                    (rule "cnf_rightDist" (formula "47") (term "0,0"))
                                    (rule "cnf_rightDist" (formula "47") (term "0,1,1"))
                                    (rule "allLeft" (formula "26") (inst "t=add(Z(neglit(1(#))), l_1)"))
                                    (rule "inEqSimp_homoInEq1" (formula "26") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "26") (term "1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "26") (term "1,0,1,0"))
                                    (rule "mul_literals" (formula "26") (term "0,1,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "26") (term "0,1,0"))
                                    (rule "polySimp_addComm0" (formula "26") (term "0,0,1,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "26") (term "0,1,0"))
                                    (rule "add_literals" (formula "26") (term "1,1,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "26") (term "1,0,1,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "26") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "26") (term "0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "26") (term "0,0,0"))
                                    (rule "add_literals" (formula "26") (term "0,0,0,0"))
                                    (rule "add_zero_left" (formula "26") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0"))
                                    (rule "mul_literals" (formula "26") (term "1,1,0"))
                                    (rule "inEqSimp_invertInEq1" (formula "26") (term "0,0"))
                                    (rule "mul_literals" (formula "26") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "26") (term "0,0,0"))
                                    (rule "polySimp_elimOne" (formula "26") (term "0,0,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "26") (term "1,0") (ifseqformula "66"))
                                    (rule "qeq_literals" (formula "26") (term "0,1,0"))
                                     (builtin "One Step Simplification" (formula "26"))
                                    (rule "inEqSimp_contradInEq1" (formula "26") (term "0") (ifseqformula "66"))
                                    (rule "qeq_literals" (formula "26") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "26"))
                                    (rule "allLeft" (formula "27") (inst "t=add(Z(neglit(2(#))), l_1)"))
                                    (rule "inEqSimp_homoInEq1" (formula "27") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "27") (term "1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "27") (term "1,0,1,0"))
                                    (rule "mul_literals" (formula "27") (term "0,1,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "27") (term "0,1,0"))
                                    (rule "polySimp_addComm0" (formula "27") (term "0,0,1,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "27") (term "0,1,0"))
                                    (rule "add_literals" (formula "27") (term "1,1,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "27") (term "1,0,1,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "27") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "27") (term "0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "27") (term "0,0,0"))
                                    (rule "add_literals" (formula "27") (term "0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0"))
                                    (rule "mul_literals" (formula "27") (term "1,1,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "27") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "27") (term "0,0,0"))
                                    (rule "polySimp_elimOne" (formula "27") (term "0,0,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "27") (term "1,0") (ifseqformula "67"))
                                    (rule "qeq_literals" (formula "27") (term "0,1,0"))
                                     (builtin "One Step Simplification" (formula "27"))
                                    (rule "inEqSimp_contradInEq1" (formula "27") (term "0") (ifseqformula "67"))
                                    (rule "qeq_literals" (formula "27") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "27"))
                                    (rule "allLeft" (formula "12") (inst "t=Z(0(#))"))
                                    (rule "replaceKnownSelect_taclet000100012011_21" (formula "12") (term "1,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet000100012011_22" (formula "12") (term "1,1"))
                                    (rule "leq_literals" (formula "12") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "add_literals" (formula "12") (term "0,2,0,1"))
                                    (rule "replaceKnownSelect_taclet000100012011_24" (formula "12") (term "0,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet000100012011_25" (formula "12") (term "0,1"))
                                    (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "78"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "true_left" (formula "12"))
                                    (rule "allLeft" (formula "15") (inst "t=Z(0(#))"))
                                    (rule "replaceKnownSelect_taclet000100012011_21" (formula "15") (term "0,1,0,1,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet000100012011_22" (formula "15") (term "0,1,0,1,1"))
                                    (rule "leq_literals" (formula "15") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "15"))
                                    (rule "add_zero_right" (formula "15") (term "0,2,2,1,1,1"))
                                    (rule "replaceKnownSelect_taclet000100012011_24" (formula "15") (term "2,1,1,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet000100012011_25" (formula "15") (term "2,1,1,1"))
                                    (rule "mul_literals" (formula "15") (term "1,0,1,1"))
                                    (rule "add_zero_right" (formula "15") (term "0,1,1"))
                                    (rule "polySimp_homoEq" (formula "15") (term "0,1,1,1"))
                                    (rule "mul_literals" (formula "15") (term "1,0,0,1,1,1"))
                                    (rule "add_zero_right" (formula "15") (term "0,0,1,1,1"))
                                    (rule "inEqSimp_commuteGeq" (formula "15") (term "0"))
                                    (rule "polySimp_sepPosMonomial" (formula "15") (term "0,1,1,1"))
                                    (rule "mul_literals" (formula "15") (term "1,0,1,1,1"))
                                    (rule "inEqSimp_contradInEq5" (formula "15") (term "0") (ifseqformula "68"))
                                    (rule "mul_literals" (formula "15") (term "1,1,0,0"))
                                    (rule "greater_literals" (formula "15") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "15"))
                                    (rule "qeq_literals" (formula "15") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "15"))
                                    (rule "elimGcdEq" (formula "15") (term "0,1,1") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(2(#))"))
                                     (builtin "One Step Simplification" (formula "15"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,0,0,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,1,0,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "1,0,1,0,0,1,1"))
                                    (rule "add_literals" (formula "15") (term "1,0,0,0,1,1"))
                                    (rule "mul_literals" (formula "15") (term "1,0,0,0,0,1,1"))
                                    (rule "mul_literals" (formula "15") (term "1,0,0,1,0,1,1"))
                                    (rule "mul_literals" (formula "15") (term "1,0,1,0,0,1,1"))
                                    (rule "add_literals" (formula "15") (term "0,0,0,0,1,1"))
                                    (rule "add_literals" (formula "15") (term "0,0,1,0,1,1"))
                                    (rule "add_literals" (formula "15") (term "0,1,0,0,1,1"))
                                    (rule "leq_literals" (formula "15") (term "0,0,0,1,1"))
                                     (builtin "One Step Simplification" (formula "15"))
                                    (rule "qeq_literals" (formula "15") (term "0,0,1,1"))
                                     (builtin "One Step Simplification" (formula "15"))
                                    (rule "equal_literals" (formula "15") (term "0,0,1,1"))
                                     (builtin "One Step Simplification" (formula "15"))
                                    (rule "allLeft" (formula "16") (inst "t=add(Z(neglit(1(#))), mul(l_1, Z(2(#))))"))
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "replaceKnownSelect_taclet000100012011_29" (formula "16") (term "0,1,0,1,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet000100012011_30" (formula "16") (term "0,1,0,1,1"))
                                    (rule "polySimp_addComm1" (formula "16") (term "1,1"))
                                    (rule "polySimp_addComm0" (formula "16") (term "0,1,1"))
                                    (rule "replace_known_right" (formula "16") (term "1") (ifseqformula "105"))
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "inEqSimp_homoInEq0" (formula "16") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "16") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "16") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "16") (term "0,0"))
                                    (rule "add_literals" (formula "16") (term "0,0,0"))
                                    (rule "add_zero_left" (formula "16") (term "0,0"))
                                    (rule "inEqSimp_homoInEq1" (formula "16") (term "1"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "1,0,1"))
                                    (rule "polySimp_rightDist" (formula "16") (term "1,0,1"))
                                    (rule "mul_literals" (formula "16") (term "0,1,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,1"))
                                    (rule "polySimp_addAssoc" (formula "16") (term "0,1"))
                                    (rule "polySimp_addComm0" (formula "16") (term "0,0,1"))
                                    (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,1"))
                                    (rule "add_literals" (formula "16") (term "1,1,0,1"))
                                    (rule "times_zero_1" (formula "16") (term "1,0,1"))
                                    (rule "add_literals" (formula "16") (term "0,1"))
                                    (rule "leq_literals" (formula "16") (term "1"))
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "inEqSimp_invertInEq1" (formula "16"))
                                    (rule "mul_literals" (formula "16") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                                    (rule "inEqSimp_contradInEq5" (formula "16") (ifseqformula "69"))
                                    (rule "greater_literals" (formula "16") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "mul_literals" (formula "16") (term "1,0"))
                                    (rule "qeq_literals" (formula "16") (term "0"))
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "closeFalse" (formula "16"))
                                 )
                                 (branch "self.equal_buckets = TRUE FALSE"
                                    (rule "applyEq" (formula "55") (term "1,3,0") (ifseqformula "44"))
                                    (rule "polySimp_addAssoc" (formula "55") (term "3,0"))
                                    (rule "add_literals" (formula "55") (term "0,3,0"))
                                    (rule "add_zero_left" (formula "55") (term "3,0"))
                                    (rule "applyEq" (formula "46") (term "1,1,0,0,1,0") (ifseqformula "44"))
                                    (rule "applyEq" (formula "56") (term "1,1,1,0,0,1,0") (ifseqformula "44"))
                                    (rule "polySimp_addAssoc" (formula "56") (term "1,1,0,0,1,0"))
                                    (rule "add_literals" (formula "56") (term "0,1,1,0,0,1,0"))
                                    (rule "add_zero_left" (formula "56") (term "1,1,0,0,1,0"))
                                    (rule "applyEq" (formula "56") (term "1,1,1,0,0") (ifseqformula "44"))
                                    (rule "polySimp_addAssoc" (formula "56") (term "1,1,0,0"))
                                    (rule "add_literals" (formula "56") (term "0,1,1,0,0"))
                                    (rule "add_zero_left" (formula "56") (term "1,1,0,0"))
                                    (rule "applyEq" (formula "53") (term "1") (ifseqformula "44"))
                                    (rule "applyEq" (formula "54") (term "0") (ifseqformula "44"))
                                    (rule "inEqSimp_commuteLeq" (formula "54"))
                                    (rule "applyEq" (formula "46") (term "1,1,0,0") (ifseqformula "44"))
                                    (rule "applyEq" (formula "52") (term "0") (ifseqformula "44"))
                                    (rule "inEqSimp_homoInEq1" (formula "52"))
                                    (rule "polySimp_mulComm0" (formula "52") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "52") (term "1,0"))
                                    (rule "mul_literals" (formula "52") (term "0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "52") (term "0"))
                                    (rule "add_literals" (formula "52") (term "0,0"))
                                    (rule "applyEq" (formula "47") (term "1,0,2,0") (ifseqformula "44"))
                                    (rule "eqSymm" (formula "47"))
                                    (rule "polySimp_addAssoc" (formula "47") (term "0,2,1"))
                                    (rule "add_literals" (formula "47") (term "0,0,2,1"))
                                    (rule "applyEq" (formula "47") (term "1,0,2,0") (ifseqformula "44"))
                                    (rule "polySimp_addAssoc" (formula "47") (term "0,2,0"))
                                    (rule "add_literals" (formula "47") (term "0,0,2,0"))
                                    (rule "add_zero_left" (formula "47") (term "0,2,0"))
                                    (rule "eqSymm" (formula "47"))
                                    (rule "applyEq" (formula "50") (term "1") (ifseqformula "44"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "52"))
                                    (rule "polySimp_mulLiterals" (formula "52") (term "0"))
                                    (rule "polySimp_elimOne" (formula "52") (term "0"))
                                    (rule "onlyCreatedObjectsAreReferencedFinal" (formula "79") (term "0") (ifseqformula "14") (ifseqformula "6"))
                                    (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "61"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "nnf_imp2or" (formula "36") (term "0,1,0"))
                                    (rule "arrayLengthNotNegative" (formula "53") (term "0"))
                                    (rule "arrayLengthIsAShort" (formula "54") (term "0"))
                                     (builtin "One Step Simplification" (formula "54"))
                                    (rule "true_left" (formula "54"))
                                    (rule "nnf_imp2or" (formula "34") (term "0,1,0,1,0"))
                                    (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "32") (term "0,0,2,0,1,0"))
                                    (rule "arrayLengthIsAShort" (formula "52") (term "0"))
                                     (builtin "One Step Simplification" (formula "52"))
                                    (rule "true_left" (formula "52"))
                                    (rule "arrayLengthNotNegative" (formula "52") (term "0"))
                                    (rule "inEqSimp_subsumption1" (formula "52") (ifseqformula "53"))
                                    (rule "leq_literals" (formula "52") (term "0"))
                                     (builtin "One Step Simplification" (formula "52"))
                                    (rule "true_left" (formula "52"))
                                    (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "37") (term "0,0,1,1,1,0"))
                                    (rule "nnf_notAnd" (formula "36") (term "0,0,1,0"))
                                    (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0,1,0"))
                                    (rule "polySimp_mulAssoc" (formula "36") (term "1,0,0,0,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "36") (term "0,1,0,0,0,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "36") (term "1,0,0,0,0,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "36") (term "1,0,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0,0,1,0"))
                                    (rule "mul_literals" (formula "36") (term "0,1,0,0,0,1,0"))
                                    (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "36") (term "0,1,0,0,1,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "36") (term "1,0,1,0,0,1,0,0,1,0"))
                                    (rule "mul_literals" (formula "36") (term "0,0,1,0,0,1,0,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "36") (term "0,0,0,1,0,0,1,0"))
                                    (rule "add_literals" (formula "36") (term "0,0,0,0,1,0,0,1,0"))
                                    (rule "add_zero_left" (formula "36") (term "0,0,0,1,0,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "36") (term "0,1,1,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "36") (term "0,1,1,0,0,1,0"))
                                    (rule "nnf_notAnd" (formula "34") (term "0,0,1,0,1,0"))
                                    (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0,1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "34") (term "1,0,0,0,0,0,1,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,0,0,0,1,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "34") (term "0,1,0,0,0,0,0,1,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "34") (term "0,0,0,0,0,1,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0,1,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0,1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "34") (term "1,0,0,0,1,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,0,1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "34") (term "0,1,0,0,0,1,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "34") (term "1,0,1,0,0,0,1,0,1,0"))
                                    (rule "mul_literals" (formula "34") (term "0,0,1,0,0,0,1,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "34") (term "1,0,1,0,0,0,1,0,1,0"))
                                    (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0,1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,1,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,1,0,0,1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "34") (term "0,1,0,0,1,0,0,1,0,1,0"))
                                    (rule "mul_literals" (formula "34") (term "0,0,1,0,0,1,0,0,1,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,1,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "34") (term "0,0,0,1,0,0,1,0,1,0"))
                                    (rule "add_literals" (formula "34") (term "0,0,0,0,1,0,0,1,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0,1,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,1,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "34") (term "0,1,1,0,0,1,0,1,0"))
                                    (rule "mul_literals" (formula "34") (term "0,0,1,1,0,0,1,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "34") (term "1,0,1,1,0,0,1,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "34") (term "1,0,1,1,0,0,1,0,1,0"))
                                    (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "35") (term "0"))
                                     (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "64")) (ifInst ""  (formula "63")) (ifInst ""  (formula "61")) (ifInst ""  (formula "46")))
                                    (rule "translateJavaSubInt" (formula "35") (term "0,2,0,1,0,0"))
                                    (rule "translateJavaSubInt" (formula "35") (term "0,2,1,1,0,0"))
                                    (rule "eqSymm" (formula "35") (term "1,0,0,0,0"))
                                    (rule "eqSymm" (formula "35") (term "1,0,0"))
                                    (rule "polySimp_elimSub" (formula "35") (term "0,2,1,1,0,0"))
                                    (rule "mul_literals" (formula "35") (term "1,0,2,1,1,0,0"))
                                    (rule "polySimp_elimSub" (formula "35") (term "0,2,0,1,0,0"))
                                    (rule "mul_literals" (formula "35") (term "1,0,2,0,1,0,0"))
                                    (rule "polySimp_addComm0" (formula "35") (term "0,2,1,1,0,0"))
                                    (rule "polySimp_addComm0" (formula "35") (term "0,2,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0,0,0,0"))
                                    (rule "applyEq" (formula "35") (term "0,0,0,0,0,0,0") (ifseqformula "31"))
                                    (rule "inEqSimp_homoInEq1" (formula "35") (term "0,0,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "35") (term "1,0,0,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "35") (term "0,1,0,0,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "35") (term "0,0,0,0,0,0,0"))
                                    (rule "add_literals" (formula "35") (term "0,0,0,0,0,0,0,0"))
                                    (rule "applyEq" (formula "35") (term "1,0,2,0,1,0,0") (ifseqformula "51"))
                                    (rule "eqSymm" (formula "35") (term "1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "35") (term "0,2,1,1,0,0"))
                                    (rule "add_literals" (formula "35") (term "0,0,2,1,1,0,0"))
                                    (rule "applyEq" (formula "35") (term "3,0,1,0,0,0") (ifseqformula "51"))
                                    (rule "applyEq" (formula "35") (term "0,1,0,0,0,0") (ifseqformula "51"))
                                    (rule "eqSymm" (formula "35") (term "1,0,0,0,0"))
                                    (rule "replace_known_left" (formula "35") (term "1,0,0,0,0") (ifseqformula "31"))
                                     (builtin "One Step Simplification" (formula "35"))
                                    (rule "applyEq" (formula "35") (term "0,1,0,0,0,0") (ifseqformula "31"))
                                    (rule "inEqSimp_homoInEq0" (formula "35") (term "1,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "35") (term "1,0,1,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "35") (term "1,0,1,0,0,0,0"))
                                    (rule "mul_literals" (formula "35") (term "0,1,0,1,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "35") (term "0,1,0,0,0,0"))
                                    (rule "add_literals" (formula "35") (term "0,0,1,0,0,0,0"))
                                    (rule "applyEq" (formula "35") (term "1,0,2,0,1,0,0") (ifseqformula "51"))
                                    (rule "polySimp_addAssoc" (formula "35") (term "0,2,0,1,0,0"))
                                    (rule "add_literals" (formula "35") (term "0,0,2,0,1,0,0"))
                                    (rule "add_zero_left" (formula "35") (term "0,2,0,1,0,0"))
                                    (rule "eqSymm" (formula "35") (term "1,0,0"))
                                    (rule "replace_known_left" (formula "35") (term "1,0,0") (ifseqformula "48"))
                                     (builtin "One Step Simplification" (formula "35"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "35") (term "1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "35") (term "0,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "35") (term "0,1,0,0,0"))
                                    (rule "replace_known_left" (formula "35") (term "1,0,0,0") (ifseqformula "3"))
                                     (builtin "One Step Simplification" (formula "35"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "35") (term "0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "35") (term "0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "35") (term "0,0,0,0"))
                                    (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "44"))
                                     (builtin "One Step Simplification" (formula "35"))
                                    (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "38") (term "0,0,0,1"))
                                    (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "38") (term "0,1,0,1"))
                                    (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "38") (term "1,1") (inst "b=b"))
                                     (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "65")) (ifInst ""  (formula "66")) (ifInst ""  (formula "23")))
                                    (rule "translateJavaMulInt" (formula "38") (term "1,1,0,0,1,1"))
                                    (rule "mul_literals" (formula "38") (term "1,1,0,0,1,1"))
                                    (rule "eqSymm" (formula "38") (term "0,0,0,0,1,1"))
                                    (rule "replace_known_right" (formula "38") (term "0,0,0,0,1,1") (ifseqformula "76"))
                                     (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "22")))
                                    (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "38") (term "0,1,0,1,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,1,1"))
                                    (rule "applyEq" (formula "38") (term "0,0,0,1,1") (ifseqformula "8"))
                                    (rule "applyEq" (formula "38") (term "0,1,0,1,1") (ifseqformula "8"))
                                    (rule "inEqSimp_homoInEq0" (formula "38") (term "1,0,1,1"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,0,1,0,1,1"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,0,1,0,1,1"))
                                    (rule "mul_literals" (formula "38") (term "0,1,0,1,0,1,1"))
                                    (rule "polySimp_addAssoc" (formula "38") (term "0,1,0,1,1"))
                                    (rule "add_literals" (formula "38") (term "0,0,1,0,1,1"))
                                    (rule "applyEq" (formula "38") (term "0,1,0,0,1,0,0,1,1,1") (ifseqformula "8"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0,1,1,1"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0,1,1,1"))
                                    (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0,1,1,1"))
                                    (rule "add_literals" (formula "38") (term "0,0,0,1,0,0,1,1,1"))
                                    (rule "add_zero_left" (formula "38") (term "0,0,1,0,0,1,1,1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "0,0,1,1"))
                                    (rule "mul_literals" (formula "38") (term "1,0,0,1,1"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "38") (term "1,0,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "38") (term "0,1,0,1,1"))
                                    (rule "polySimp_elimOne" (formula "38") (term "0,1,0,1,1"))
                                    (rule "replace_known_left" (formula "38") (term "1,0,1,1") (ifseqformula "3"))
                                     (builtin "One Step Simplification" (formula "38"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0,1,1,1"))
                                    (rule "inEqSimp_subsumption1" (formula "38") (term "0,1,1") (ifseqformula "44"))
                                    (rule "leq_literals" (formula "38") (term "0,0,1,1"))
                                     (builtin "One Step Simplification" (formula "38"))
                                    (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "11") (term "0,0,2,1,2,0,1,1"))
                                    (rule "polySimp_homoEq" (formula "11"))
                                    (rule "polySimp_addComm1" (formula "11") (term "0"))
                                    (rule "polySimp_sepNegMonomial" (formula "11"))
                                    (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                                    (rule "polySimp_elimOne" (formula "11") (term "0"))
                                    (rule "distr_forallAnd" (formula "24"))
                                    (rule "andLeft" (formula "24"))
                                    (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "87") (term "0,0,2,1,2,0"))
                                    (rule "applyEq" (formula "87") (term "0") (ifseqformula "11"))
                                    (rule "polySimp_homoEq" (formula "87"))
                                    (rule "polySimp_mulComm0" (formula "87") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "87") (term "1,0"))
                                    (rule "polySimp_mulLiterals" (formula "87") (term "1,1,0"))
                                    (rule "polySimp_elimOne" (formula "87") (term "1,1,0"))
                                    (rule "polySimp_rightDist" (formula "87") (term "0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "87") (term "1,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "87") (term "1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "87") (term "0,0,1,0"))
                                    (rule "polySimp_mulAssoc" (formula "87") (term "0,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "87") (term "0,0,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "87") (term "0,0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "87") (term "0,0,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "87") (term "0"))
                                    (rule "polySimp_addComm0" (formula "87") (term "0,0"))
                                    (rule "polySimp_sepPosMonomial" (formula "87"))
                                    (rule "polySimp_mulComm0" (formula "87") (term "1"))
                                    (rule "polySimp_rightDist" (formula "87") (term "1"))
                                    (rule "polySimp_rightDist" (formula "87") (term "0,1"))
                                    (rule "polySimp_rightDist" (formula "87") (term "0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "87") (term "1,0,0,1"))
                                    (rule "polySimp_elimOne" (formula "87") (term "1,0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "87") (term "0,0,0,1"))
                                    (rule "nnf_imp2or" (formula "39") (term "0,1,1"))
                                    (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "57") (term "0") (inst "i=i"))
                                     (builtin "One Step Simplification" (formula "57"))
                                    (rule "translateJavaAddInt" (formula "57") (term "0,2,1,1,0"))
                                    (rule "translateJavaSubInt" (formula "57") (term "1,1,0,0"))
                                    (rule "polySimp_elimSub" (formula "57") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "57") (term "1,1,1,0,0"))
                                    (rule "polySimp_addComm0" (formula "57") (term "0,2,1,1,0"))
                                    (rule "polySimp_addComm0" (formula "57") (term "1,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "57") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "57") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "57") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "57") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "57") (term "0,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "57") (term "0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "57") (term "1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "57") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "57") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "57") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "57") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "57") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "57") (term "1,1,1,0,0"))
                                    (rule "nnf_imp2or" (formula "57") (term "0"))
                                    (rule "nnf_notAnd" (formula "39") (term "0,0,1,1"))
                                    (rule "inEqSimp_notLeq" (formula "39") (term "1,0,0,1,1"))
                                    (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0,0,1,1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "1,0,0,1,1"))
                                    (rule "polySimp_mulComm0" (formula "39") (term "1,1,0,0,1,1"))
                                    (rule "polySimp_rightDist" (formula "39") (term "1,1,0,0,1,1"))
                                    (rule "mul_literals" (formula "39") (term "0,1,1,0,0,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1,0,0,1,1"))
                                    (rule "polySimp_elimOne" (formula "39") (term "1,1,1,0,0,1,1"))
                                    (rule "inEqSimp_notGeq" (formula "39") (term "0,0,0,1,1"))
                                    (rule "mul_literals" (formula "39") (term "1,0,0,0,0,0,1,1"))
                                    (rule "add_literals" (formula "39") (term "0,0,0,0,0,1,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "0,0,0,1,1"))
                                    (rule "mul_literals" (formula "39") (term "1,0,0,0,1,1"))
                                    (rule "nnf_notAnd" (formula "57") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "57") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "57") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "57") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "57") (term "0,0,0"))
                                    (rule "mul_literals" (formula "57") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "57") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "57") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "57") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "57") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "57") (term "0,0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "57") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "57") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "57") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "57") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "57") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "57") (term "1,1,1,0,0"))
                                    (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "37") (term "0,1,0,1,0"))
                                    (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "35") (term "0,1,0,1,0,1,0"))
                                    (rule "commute_or" (formula "48") (term "0,0,1,0"))
                                    (rule "commute_or" (formula "58") (term "0,0,1,0"))
                                    (rule "cnf_rightDist" (formula "38") (term "0"))
                                    (rule "onlyCreatedObjectsAreReferencedFinal" (formula "47") (term "0") (ifseqformula "15") (ifseqformula "7"))
                                    (rule "applyEq" (formula "47") (term "1,0,1") (ifseqformula "48"))
                                    (rule "replace_known_left" (formula "47") (term "1") (ifseqformula "4"))
                                     (builtin "One Step Simplification" (formula "47"))
                                    (rule "true_left" (formula "47"))
                                    (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "36") (term "0,0,0"))
                                    (rule "replace_known_left" (formula "36") (term "1,0") (ifseqformula "15"))
                                     (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "65")))
                                    (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "37") (term "1,0"))
                                     (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "64")) (ifInst ""  (formula "52")))
                                    (rule "translateJavaSubInt" (formula "37") (term "3,0,1,1,0"))
                                    (rule "polySimp_elimSub" (formula "37") (term "3,0,1,1,0"))
                                    (rule "mul_literals" (formula "37") (term "1,3,0,1,1,0"))
                                    (rule "polySimp_addComm0" (formula "37") (term "3,0,1,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "37") (term "1,0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "37") (term "0,1,0,0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "37") (term "1,0,0,0,0,1,0"))
                                    (rule "replace_known_left" (formula "37") (term "1,0,0,0,0,1,0") (ifseqformula "51"))
                                     (builtin "One Step Simplification" (formula "37"))
                                    (rule "inEqSimp_commuteLeq" (formula "37") (term "1,1,0,0,1,0"))
                                    (rule "applyEq" (formula "37") (term "0,0,1,0,0,1,0") (ifseqformula "53"))
                                    (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "37") (term "1,0,0,1,0,0,1,0"))
                                    (rule "mul_literals" (formula "37") (term "0,1,0,0,1,0,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "37") (term "0,0,1,0,0,1,0"))
                                    (rule "add_literals" (formula "37") (term "0,0,0,1,0,0,1,0"))
                                    (rule "applyEq" (formula "37") (term "1,1,1,0,0,1,0") (ifseqformula "53"))
                                    (rule "replace_known_left" (formula "37") (term "1,1,0,0,1,0") (ifseqformula "56"))
                                     (builtin "One Step Simplification" (formula "37"))
                                    (rule "applyEq" (formula "37") (term "1,1,0,1,0") (ifseqformula "53"))
                                    (rule "applyEq" (formula "37") (term "0,0,0,0,0,0,1,0") (ifseqformula "48"))
                                    (rule "replace_known_right" (formula "37") (term "0,0,0,0,0,1,0") (ifseqformula "65"))
                                     (builtin "One Step Simplification" (formula "37"))
                                    (rule "applyEq" (formula "37") (term "0,0,0,0,1,0") (ifseqformula "53"))
                                    (rule "eqSymm" (formula "37") (term "0,0,0,1,0"))
                                    (rule "replace_known_left" (formula "37") (term "0,0,0,1,0") (ifseqformula "47"))
                                     (builtin "One Step Simplification" (formula "37"))
                                    (rule "applyEq" (formula "37") (term "1,0,1,1,0") (ifseqformula "48"))
                                    (rule "applyEq" (formula "37") (term "1,3,0,1,1,0") (ifseqformula "53"))
                                    (rule "polySimp_addAssoc" (formula "37") (term "3,0,1,1,0"))
                                    (rule "add_literals" (formula "37") (term "0,3,0,1,1,0"))
                                    (rule "add_zero_left" (formula "37") (term "3,0,1,1,0"))
                                    (rule "applyEq" (formula "37") (term "0,0,1,0,1,0") (ifseqformula "48"))
                                    (rule "replace_known_left" (formula "37") (term "1,0,1,0") (ifseqformula "57"))
                                     (builtin "One Step Simplification" (formula "37"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "37") (term "0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "37") (term "0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "37") (term "0,0,1,0"))
                                    (rule "replace_known_left" (formula "37") (term "0,1,0") (ifseqformula "46"))
                                     (builtin "One Step Simplification" (formula "37"))
                                    (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "40") (term "0") (inst "b=b"))
                                     (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "67")) (ifInst ""  (formula "68")) (ifInst ""  (formula "23")))
                                    (rule "translateJavaMulInt" (formula "40") (term "1,1,0,0,0"))
                                    (rule "mul_literals" (formula "40") (term "1,1,0,0,0"))
                                    (rule "eqSymm" (formula "40") (term "0,0,0,0,0"))
                                    (rule "replace_known_left" (formula "40") (term "1,0,0,0") (ifseqformula "22"))
                                     (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "78")))
                                    (rule "inEqSimp_ltToLeq" (formula "40") (term "1,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,1,0,0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "40") (term "0,1,0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,0"))
                                    (rule "applyEq" (formula "40") (term "0,0,0,0") (ifseqformula "8"))
                                    (rule "applyEq" (formula "40") (term "0,1,0,0") (ifseqformula "8"))
                                    (rule "inEqSimp_homoInEq0" (formula "40") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "40") (term "1,0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "40") (term "1,0,1,0,0"))
                                    (rule "mul_literals" (formula "40") (term "0,1,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "40") (term "0,1,0,0"))
                                    (rule "add_literals" (formula "40") (term "0,0,1,0,0"))
                                    (rule "applyEq" (formula "40") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "8"))
                                    (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,1,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "40") (term "1,0,0,1,0,0,1,0"))
                                    (rule "mul_literals" (formula "40") (term "0,1,0,0,1,0,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "40") (term "0,0,1,0,0,1,0"))
                                    (rule "add_literals" (formula "40") (term "0,0,0,1,0,0,1,0"))
                                    (rule "add_zero_left" (formula "40") (term "0,0,1,0,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "40") (term "0,0,0"))
                                    (rule "mul_literals" (formula "40") (term "1,0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "40") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "40") (term "0,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "40") (term "0,1,0,0"))
                                    (rule "replace_known_left" (formula "40") (term "1,0,0") (ifseqformula "3"))
                                     (builtin "One Step Simplification" (formula "40"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "1,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "40") (term "1,1,0,0,1,0"))
                                    (rule "inEqSimp_subsumption1" (formula "40") (term "0,0") (ifseqformula "46"))
                                    (rule "leq_literals" (formula "40") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "40"))
                                    (rule "nnf_imp2or" (formula "40") (term "0,0"))
                                    (rule "nnf_notAnd" (formula "40") (term "0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "40") (term "1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "40") (term "1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "40") (term "1,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,0,0"))
                                    (rule "mul_literals" (formula "40") (term "0,1,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "40") (term "1,1,1,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "40") (term "0,0,0,0"))
                                    (rule "mul_literals" (formula "40") (term "1,0,0,0,0,0,0"))
                                    (rule "add_literals" (formula "40") (term "0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "0,0,0,0"))
                                    (rule "mul_literals" (formula "40") (term "1,0,0,0,0"))
                                    (rule "commute_or" (formula "25") (term "0"))
                                    (rule "distr_forallAnd" (formula "39"))
                                    (rule "andLeft" (formula "39"))
                                    (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "36") (term "0,0"))
                                    (rule "replace_known_left" (formula "36") (term "1") (ifseqformula "37"))
                                     (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "67")) (ifInst ""  (formula "15")))
                                    (rule "true_left" (formula "36"))
                                    (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "36") (term "0,1") (inst "i=i"))
                                     (builtin "One Step Simplification" (formula "36"))
                                    (rule "translateJavaAddInt" (formula "36") (term "0,2,1,1,0,1"))
                                    (rule "translateJavaSubInt" (formula "36") (term "1,1,0,0,1"))
                                    (rule "polySimp_elimSub" (formula "36") (term "1,1,0,0,1"))
                                    (rule "mul_literals" (formula "36") (term "1,1,1,0,0,1"))
                                    (rule "polySimp_addComm0" (formula "36") (term "0,2,1,1,0,1"))
                                    (rule "polySimp_addComm1" (formula "36") (term "1,1,0,0,1"))
                                    (rule "add_literals" (formula "36") (term "0,1,1,0,0,1"))
                                    (rule "add_zero_left" (formula "36") (term "1,1,0,0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "36") (term "1,0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "36") (term "1,0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0,1"))
                                    (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0,1"))
                                    (rule "mul_literals" (formula "36") (term "0,1,1,0,0,1"))
                                    (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0,1"))
                                    (rule "nnf_imp2or" (formula "36") (term "0,1"))
                                    (rule "nnf_notAnd" (formula "36") (term "0,0,1"))
                                    (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0,1"))
                                    (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0,1"))
                                    (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0,1"))
                                    (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0,1"))
                                    (rule "add_literals" (formula "36") (term "0,0,0,1,0,0,1"))
                                    (rule "add_zero_left" (formula "36") (term "0,0,1,0,0,1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0,1"))
                                    (rule "polySimp_elimOne" (formula "36") (term "1,1,0,0,1"))
                                    (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0,1"))
                                    (rule "mul_literals" (formula "36") (term "1,0,0,0,0,0,1"))
                                    (rule "add_zero_right" (formula "36") (term "0,0,0,0,0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0,1"))
                                    (rule "mul_literals" (formula "36") (term "1,0,0,0,1"))
                                    (rule "allLeft" (formula "63") (inst "t=b_0"))
                                    (rule "inEqSimp_homoInEq1" (formula "63") (term "1,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "63") (term "0,1,0"))
                                    (rule "add_literals" (formula "63") (term "1,1,0,1,0"))
                                    (rule "times_zero_1" (formula "63") (term "1,0,1,0"))
                                    (rule "add_literals" (formula "63") (term "0,1,0"))
                                    (rule "leq_literals" (formula "63") (term "1,0"))
                                     (builtin "One Step Simplification" (formula "63"))
                                    (rule "inEqSimp_contradInEq1" (formula "63") (term "0") (ifseqformula "47"))
                                    (rule "qeq_literals" (formula "63") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "63"))
                                    (rule "pullOutSelect" (formula "63") (term "0") (inst "selectSK=arr_5"))
                                    (rule "simplifySelectOfStore" (formula "63"))
                                     (builtin "One Step Simplification" (formula "63"))
                                    (rule "castDel" (formula "63") (term "0"))
                                    (rule "applyEqReverse" (formula "64") (term "0") (ifseqformula "63"))
                                    (rule "hideAuxiliaryEq" (formula "63"))
                                    (rule "inEqSimp_commuteGeq" (formula "63"))
                                    (rule "pullOutSelect" (formula "63") (term "0") (inst "selectSK=arr_6"))
                                    (rule "simplifySelectOfStore" (formula "63"))
                                     (builtin "One Step Simplification" (formula "63"))
                                    (rule "castDel" (formula "63") (term "1,0"))
                                    (rule "polySimp_homoEq" (formula "63") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "63") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "63") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "63") (term "0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "63") (term "0,0,0"))
                                    (rule "polySimp_addComm0" (formula "63") (term "0,0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "63") (term "0,0,0"))
                                    (rule "add_literals" (formula "63") (term "1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "63") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "63") (term "0,0,0"))
                                    (rule "equal_literals" (formula "63") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "63"))
                                    (rule "simplifySelectOfAnon" (formula "63"))
                                     (builtin "One Step Simplification" (formula "63") (ifInst ""  (formula "88")) (ifInst ""  (formula "19")))
                                    (rule "elementOfArrayRangeConcrete" (formula "63") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "63"))
                                    (rule "inEqSimp_commuteLeq" (formula "63") (term "0,0,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "64"))
                                    (rule "polySimp_addComm1" (formula "64") (term "0"))
                                    (rule "polySimp_addComm0" (formula "64") (term "0,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "63") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "63") (term "0,1,0,0"))
                                    (rule "add_literals" (formula "63") (term "1,1,0,1,0,0"))
                                    (rule "times_zero_1" (formula "63") (term "1,0,1,0,0"))
                                    (rule "add_zero_right" (formula "63") (term "0,1,0,0"))
                                    (rule "qeq_literals" (formula "63") (term "1,0,0"))
                                     (builtin "One Step Simplification" (formula "63"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "64"))
                                    (rule "polySimp_mulComm0" (formula "64") (term "1"))
                                    (rule "polySimp_rightDist" (formula "64") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "64") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "64") (term "1,1"))
                                    (rule "polySimp_mulAssoc" (formula "64") (term "0,1"))
                                    (rule "polySimp_mulComm0" (formula "64") (term "0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "64") (term "0,1"))
                                    (rule "polySimp_elimOne" (formula "64") (term "0,1"))
                                    (rule "inEqSimp_subsumption1" (formula "63") (term "0,0") (ifseqformula "47"))
                                    (rule "leq_literals" (formula "63") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "63"))
                                    (rule "applyEqReverse" (formula "64") (term "0,1") (ifseqformula "63"))
                                    (rule "hideAuxiliaryEq" (formula "63"))
                                    (rule "polySimp_addComm0" (formula "63") (term "1"))
                                    (rule "inEqSimp_homoInEq1" (formula "63"))
                                    (rule "polySimp_addComm1" (formula "63") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "63"))
                                    (rule "polySimp_mulComm0" (formula "63") (term "1"))
                                    (rule "polySimp_rightDist" (formula "63") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "63") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "63") (term "1,1"))
                                    (rule "polySimp_mulComm0" (formula "63") (term "0,1"))
                                    (rule "allLeft" (formula "63") (inst "t=Z(0(#))"))
                                    (rule "leq_literals" (formula "63") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "63"))
                                    (rule "add_literals" (formula "63") (term "0,2,0,1"))
                                    (rule "inEqSimp_homoInEq1" (formula "63") (term "0"))
                                    (rule "mul_literals" (formula "63") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "63") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "63") (term "0"))
                                    (rule "mul_literals" (formula "63") (term "1,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "63") (term "0") (ifseqformula "47"))
                                    (rule "qeq_literals" (formula "63") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "63"))
                                    (rule "pullOutSelect" (formula "63") (term "1") (inst "selectSK=arr_7"))
                                    (rule "simplifySelectOfStore" (formula "63"))
                                     (builtin "One Step Simplification" (formula "63"))
                                    (rule "castDel" (formula "63") (term "1,0"))
                                    (rule "polySimp_sepPosMonomial" (formula "63") (term "0,0"))
                                    (rule "mul_literals" (formula "63") (term "1,0,0"))
                                    (rule "inEqSimp_contradEq7" (formula "63") (term "0,0") (ifseqformula "47"))
                                    (rule "mul_literals" (formula "63") (term "1,0,0,0,0"))
                                    (rule "add_literals" (formula "63") (term "0,0,0,0"))
                                    (rule "leq_literals" (formula "63") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "63"))
                                    (rule "simplifySelectOfAnon" (formula "63"))
                                     (builtin "One Step Simplification" (formula "63") (ifInst ""  (formula "88")) (ifInst ""  (formula "19")))
                                    (rule "elementOfArrayRangeConcrete" (formula "63") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "63"))
                                    (rule "leq_literals" (formula "63") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "63"))
                                    (rule "inEqSimp_homoInEq0" (formula "63") (term "0,0"))
                                    (rule "mul_literals" (formula "63") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "63") (term "0,0,0"))
                                    (rule "applyEq" (formula "63") (term "1,0") (ifseqformula "9"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "63") (term "0,0"))
                                    (rule "mul_literals" (formula "63") (term "1,0,0"))
                                    (rule "inEqSimp_subsumption1" (formula "63") (term "0,0") (ifseqformula "47"))
                                    (rule "leq_literals" (formula "63") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "63"))
                                    (rule "applyEqReverse" (formula "64") (term "1") (ifseqformula "63"))
                                    (rule "hideAuxiliaryEq" (formula "63"))
                                    (rule "pullOutSelect" (formula "63") (term "0") (inst "selectSK=arr_8"))
                                    (rule "simplifySelectOfStore" (formula "63"))
                                     (builtin "One Step Simplification" (formula "63"))
                                    (rule "castDel" (formula "63") (term "1,0"))
                                    (rule "polySimp_homoEq" (formula "63") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "63") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "63") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "63") (term "0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "63") (term "0,0,0"))
                                    (rule "add_literals" (formula "63") (term "0,0,0,0"))
                                    (rule "add_zero_left" (formula "63") (term "0,0,0"))
                                    (rule "polySimp_invertEq" (formula "63") (term "0,0"))
                                    (rule "times_zero_2" (formula "63") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "63") (term "0,0,0"))
                                    (rule "polySimp_elimOne" (formula "63") (term "0,0,0"))
                                    (rule "inEqSimp_contradEq7" (formula "63") (term "0,0") (ifseqformula "47"))
                                    (rule "times_zero_1" (formula "63") (term "1,0,0,0,0"))
                                    (rule "add_literals" (formula "63") (term "0,0,0,0"))
                                    (rule "leq_literals" (formula "63") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "63"))
                                    (rule "simplifySelectOfAnon" (formula "63"))
                                     (builtin "One Step Simplification" (formula "63") (ifInst ""  (formula "88")) (ifInst ""  (formula "19")))
                                    (rule "elementOfArrayRangeConcrete" (formula "63") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "63"))
                                    (rule "leq_literals" (formula "63") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "63"))
                                    (rule "inEqSimp_homoInEq0" (formula "63") (term "0,0"))
                                    (rule "mul_literals" (formula "63") (term "1,0,0,0"))
                                    (rule "polySimp_addComm1" (formula "63") (term "0,0,0"))
                                    (rule "add_literals" (formula "63") (term "0,0,0,0"))
                                    (rule "add_zero_left" (formula "63") (term "0,0,0"))
                                    (rule "inEqSimp_subsumption1" (formula "63") (term "0,0") (ifseqformula "47"))
                                    (rule "leq_literals" (formula "63") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "63"))
                                    (rule "applyEqReverse" (formula "64") (term "0") (ifseqformula "63"))
                                    (rule "hideAuxiliaryEq" (formula "63"))
                                    (rule "allLeft" (formula "12") (inst "t=add(Z(neglit(1(#))), b_0)"))
                                    (rule "polySimp_addAssoc" (formula "12") (term "0,2,0,1"))
                                    (rule "add_literals" (formula "12") (term "0,0,2,0,1"))
                                    (rule "add_zero_left" (formula "12") (term "0,2,0,1"))
                                    (rule "replaceKnownSelect_taclet100100012011_14" (formula "12") (term "0,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet100100012011_15" (formula "12") (term "0,1"))
                                    (rule "inEqSimp_commuteGeq" (formula "12") (term "1"))
                                    (rule "inEqSimp_homoInEq0" (formula "12") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "12") (term "0,0,0"))
                                    (rule "add_literals" (formula "12") (term "0,0,0,0"))
                                    (rule "add_zero_left" (formula "12") (term "0,0,0"))
                                    (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "12") (term "1,0,1,0"))
                                    (rule "mul_literals" (formula "12") (term "0,1,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "12") (term "0,1,0"))
                                    (rule "polySimp_addComm0" (formula "12") (term "0,0,1,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,1,0"))
                                    (rule "add_literals" (formula "12") (term "1,1,0,1,0"))
                                    (rule "times_zero_1" (formula "12") (term "1,0,1,0"))
                                    (rule "add_zero_right" (formula "12") (term "0,1,0"))
                                    (rule "leq_literals" (formula "12") (term "1,0"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "inEqSimp_invertInEq1" (formula "12") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "0,0"))
                                    (rule "mul_literals" (formula "12") (term "1,0"))
                                    (rule "polySimp_elimOne" (formula "12") (term "0,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "12") (term "0") (ifseqformula "48"))
                                    (rule "qeq_literals" (formula "12") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "pullOutSelect" (formula "12") (term "0") (inst "selectSK=arr_9"))
                                    (rule "simplifySelectOfAnon" (formula "12"))
                                     (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "89")) (ifInst ""  (formula "21")))
                                    (rule "elementOfArrayRangeConcrete" (formula "12") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "inEqSimp_commuteLeq" (formula "13"))
                                    (rule "inEqSimp_homoInEq0" (formula "12") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "1,0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "12") (term "1,0,1,0,0"))
                                    (rule "mul_literals" (formula "12") (term "0,1,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "12") (term "0,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "12") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,1,0,0"))
                                    (rule "add_literals" (formula "12") (term "1,1,0,1,0,0"))
                                    (rule "times_zero_1" (formula "12") (term "1,0,1,0,0"))
                                    (rule "add_literals" (formula "12") (term "0,1,0,0"))
                                    (rule "qeq_literals" (formula "12") (term "1,0,0"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "inEqSimp_homoInEq0" (formula "12") (term "0,0"))
                                    (rule "times_zero_2" (formula "12") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "12") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0"))
                                    (rule "mul_literals" (formula "12") (term "1,0,0"))
                                    (rule "replace_known_left" (formula "12") (term "0,0") (ifseqformula "49"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "applyEqReverse" (formula "13") (term "1") (ifseqformula "12"))
                                    (rule "hideAuxiliaryEq" (formula "12"))
                                    (rule "inEqSimp_commuteGeq" (formula "12"))
                                    (rule "allLeft" (formula "13") (inst "t=Z(0(#))"))
                                    (rule "replaceKnownSelect_taclet100100012011_17" (formula "13") (term "1,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet100100012011_18" (formula "13") (term "1,1"))
                                    (rule "leq_literals" (formula "13") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "add_literals" (formula "13") (term "0,2,0,1"))
                                    (rule "replaceKnownSelect_taclet100100012011_20" (formula "13") (term "0,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet100100012011_21" (formula "13") (term "0,1"))
                                    (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "65"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "true_left" (formula "13"))
                                    (rule "allLeft" (formula "65") (inst "t=add(Z(neglit(1(#))), b_0)"))
                                    (rule "polySimp_addAssoc" (formula "65") (term "0,2,0,1"))
                                    (rule "add_literals" (formula "65") (term "0,0,2,0,1"))
                                    (rule "add_zero_left" (formula "65") (term "0,2,0,1"))
                                    (rule "replaceKnownSelect_taclet100100012011_13" (formula "65") (term "0,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet100100012011_15" (formula "65") (term "0,1"))
                                    (rule "inEqSimp_commuteGeq" (formula "65") (term "1"))
                                    (rule "inEqSimp_homoInEq1" (formula "65") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "65") (term "1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "65") (term "1,0,1,0"))
                                    (rule "mul_literals" (formula "65") (term "0,1,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "65") (term "0,1,0"))
                                    (rule "polySimp_addComm1" (formula "65") (term "0,0,1,0"))
                                    (rule "add_literals" (formula "65") (term "0,0,0,1,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "65") (term "0,1,0"))
                                    (rule "add_literals" (formula "65") (term "1,1,0,1,0"))
                                    (rule "times_zero_1" (formula "65") (term "1,0,1,0"))
                                    (rule "add_zero_right" (formula "65") (term "0,1,0"))
                                    (rule "leq_literals" (formula "65") (term "1,0"))
                                     (builtin "One Step Simplification" (formula "65"))
                                    (rule "inEqSimp_homoInEq0" (formula "65") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "65") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "65") (term "1,0,0"))
                                    (rule "mul_literals" (formula "65") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "65") (term "0,0"))
                                    (rule "add_literals" (formula "65") (term "0,0,0"))
                                    (rule "add_zero_left" (formula "65") (term "0,0"))
                                    (rule "inEqSimp_invertInEq1" (formula "65") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "65") (term "0,0"))
                                    (rule "mul_literals" (formula "65") (term "1,0"))
                                    (rule "polySimp_elimOne" (formula "65") (term "0,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "65") (term "0") (ifseqformula "48"))
                                    (rule "qeq_literals" (formula "65") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "65"))
                                    (rule "pullOutSelect" (formula "65") (term "0") (inst "selectSK=arr_10"))
                                    (rule "simplifySelectOfStore" (formula "65"))
                                     (builtin "One Step Simplification" (formula "65"))
                                    (rule "replaceKnownSelect_taclet100100012011_22" (formula "65") (term "2,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet100100012011_23" (formula "65") (term "2,0"))
                                    (rule "castDel" (formula "65") (term "1,0"))
                                    (rule "polySimp_homoEq" (formula "65") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "65") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "65") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "65") (term "0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "65") (term "0,0,0"))
                                    (rule "polySimp_addComm1" (formula "65") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "65") (term "0,0,0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "65") (term "0,0,0"))
                                    (rule "add_literals" (formula "65") (term "1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "65") (term "1,0,0,0"))
                                    (rule "add_literals" (formula "65") (term "0,0,0"))
                                    (rule "equal_literals" (formula "65") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "65"))
                                    (rule "applyEqReverse" (formula "66") (term "0") (ifseqformula "65"))
                                    (rule "hideAuxiliaryEq" (formula "65"))
                                    (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "38") (term "0,1,0"))
                                    (rule "replace_known_right" (formula "38") (term "0,0,0") (ifseqformula "69"))
                                     (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "16")))
                                    (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "39") (term "0,0,0") (inst "i=i") (inst "j=j_1"))
                                     (builtin "One Step Simplification" (formula "39"))
                                    (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,0,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "39") (term "1,0,0,1,0,0,1,0,0,0"))
                                    (rule "mul_literals" (formula "39") (term "0,1,0,0,1,0,0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "39") (term "0,0,1,0,0,1,0,0,0"))
                                    (rule "add_literals" (formula "39") (term "0,0,0,1,0,0,1,0,0,0"))
                                    (rule "add_zero_left" (formula "39") (term "0,0,1,0,0,1,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "39") (term "1,0,0,1,0,0,0,0"))
                                    (rule "mul_literals" (formula "39") (term "0,1,0,0,1,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "39") (term "0,0,1,0,0,0,0"))
                                    (rule "add_literals" (formula "39") (term "0,0,0,1,0,0,0,0"))
                                    (rule "add_zero_left" (formula "39") (term "0,0,1,0,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,0,1,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "39") (term "1,0,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,0,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "39") (term "1,1,0,0,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "39") (term "1,1,0,0,0,0"))
                                    (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "37") (term "0,0"))
                                    (rule "replace_known_left" (formula "37") (term "1,0") (ifseqformula "16"))
                                     (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "70")))
                                    (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "38") (term "0,0") (inst "i=i") (inst "j=j_1"))
                                     (builtin "One Step Simplification" (formula "38"))
                                    (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0,1,0,0"))
                                    (rule "add_literals" (formula "38") (term "0,0,0,1,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "38") (term "0,0,1,0,0,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0,0"))
                                    (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0,0"))
                                    (rule "add_literals" (formula "38") (term "0,0,0,1,0,0,0"))
                                    (rule "add_zero_left" (formula "38") (term "0,0,1,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "38") (term "1,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0,0"))
                                    (rule "commute_or_2" (formula "43") (term "0"))
                                    (rule "cnf_rightDist" (formula "42") (term "0"))
                                    (rule "impLeft" (formula "44"))
                                    (branch
                                       (rule "allRight" (formula "67") (inst "sk=b_1"))
                                       (rule "orRight" (formula "67"))
                                       (rule "orRight" (formula "67"))
                                       (rule "inEqSimp_leqRight" (formula "67"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_geqRight" (formula "68"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                       (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1"))
                                       (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                                       (rule "times_zero_1" (formula "2") (term "0,0"))
                                       (rule "add_zero_left" (formula "2") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "52"))
                                       (rule "leq_literals" (formula "2") (term "0"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "true_left" (formula "2"))
                                       (rule "all_pull_out3" (formula "43") (term "0"))
                                       (rule "all_pull_out1" (formula "38") (term "0,1,0"))
                                       (rule "all_pull_out3" (formula "54") (term "0"))
                                       (rule "all_pull_out3" (formula "64") (term "0"))
                                       (rule "nnf_imp2or" (formula "42") (term "0,0,0"))
                                       (rule "nnf_imp2or" (formula "40") (term "0,0"))
                                       (rule "nnf_notAnd" (formula "40") (term "0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "40") (term "1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "40") (term "1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "40") (term "1,1,0,0,0"))
                                       (rule "mul_literals" (formula "40") (term "0,1,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "40") (term "1,1,1,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "40") (term "0,0,0,0"))
                                       (rule "mul_literals" (formula "40") (term "1,0,0,0,0,0,0"))
                                       (rule "add_literals" (formula "40") (term "0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "0,0,0,0"))
                                       (rule "mul_literals" (formula "40") (term "1,0,0,0,0"))
                                       (rule "nnf_notAnd" (formula "42") (term "0,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "42") (term "0,0,0,0,0"))
                                       (rule "mul_literals" (formula "42") (term "1,0,0,0,0,0,0,0"))
                                       (rule "add_literals" (formula "42") (term "0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "0,0,0,0,0"))
                                       (rule "mul_literals" (formula "42") (term "1,0,0,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "42") (term "1,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,1,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "42") (term "1,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "42") (term "1,1,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "42") (term "1,1,0,0,0,0"))
                                       (rule "mul_literals" (formula "42") (term "0,1,1,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "42") (term "1,1,1,0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "42") (term "1,1,1,0,0,0,0"))
                                       (rule "nnf_imp2or" (formula "40") (term "0,1,0,0"))
                                       (rule "nnf_imp2or" (formula "42") (term "0,1,0,0,0"))
                                       (rule "allLeft" (formula "16") (inst "t=add(Z(neglit(1(#))), b_0)"))
                                       (rule "replaceKnownSelect_taclet100100012011_22" (formula "16") (term "0,1,0,1,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet100100012011_23" (formula "16") (term "0,1,0,1,1"))
                                       (rule "polySimp_homoEq" (formula "16") (term "0,1,1,1"))
                                       (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,1,1"))
                                       (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,1,1"))
                                       (rule "mul_literals" (formula "16") (term "0,1,0,0,1,1,1"))
                                       (rule "polySimp_addAssoc" (formula "16") (term "0,2,2,1,1,1"))
                                       (rule "add_literals" (formula "16") (term "0,0,2,2,1,1,1"))
                                       (rule "add_zero_left" (formula "16") (term "0,2,2,1,1,1"))
                                       (rule "replaceKnownSelect_taclet100100012011_14" (formula "16") (term "2,1,1,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet100100012011_15" (formula "16") (term "2,1,1,1"))
                                       (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,1,1"))
                                       (rule "polySimp_addComm0" (formula "16") (term "0,0,0,1,1,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1,1,1"))
                                       (rule "add_literals" (formula "16") (term "1,1,0,0,1,1,1"))
                                       (rule "times_zero_1" (formula "16") (term "1,0,0,1,1,1"))
                                       (rule "add_literals" (formula "16") (term "0,0,1,1,1"))
                                       (rule "equal_literals" (formula "16") (term "0,1,1,1"))
                                        (builtin "One Step Simplification" (formula "16"))
                                       (rule "polySimp_addComm1" (formula "16") (term "1,1"))
                                       (rule "inEqSimp_homoInEq1" (formula "16") (term "1,0"))
                                       (rule "polySimp_mulComm0" (formula "16") (term "1,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "16") (term "1,0,1,0"))
                                       (rule "mul_literals" (formula "16") (term "0,1,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "16") (term "0,1,0"))
                                       (rule "polySimp_addComm1" (formula "16") (term "0,0,1,0"))
                                       (rule "add_literals" (formula "16") (term "0,0,0,1,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,1,0"))
                                       (rule "add_literals" (formula "16") (term "1,1,0,1,0"))
                                       (rule "times_zero_1" (formula "16") (term "1,0,1,0"))
                                       (rule "add_literals" (formula "16") (term "0,1,0"))
                                       (rule "leq_literals" (formula "16") (term "1,0"))
                                        (builtin "One Step Simplification" (formula "16"))
                                       (rule "inEqSimp_homoInEq0" (formula "16") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "16") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "16") (term "1,0,0"))
                                       (rule "mul_literals" (formula "16") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "16") (term "0,0"))
                                       (rule "add_literals" (formula "16") (term "0,0,0"))
                                       (rule "add_zero_left" (formula "16") (term "0,0"))
                                       (rule "inEqSimp_invertInEq1" (formula "16") (term "0"))
                                       (rule "polySimp_mulLiterals" (formula "16") (term "0,0"))
                                       (rule "times_zero_2" (formula "16") (term "1,0"))
                                       (rule "polySimp_elimOne" (formula "16") (term "0,0"))
                                       (rule "inEqSimp_contradInEq1" (formula "16") (term "0") (ifseqformula "52"))
                                       (rule "qeq_literals" (formula "16") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "16"))
                                       (rule "allLeft" (formula "17") (inst "t=Z(0(#))"))
                                       (rule "replaceKnownSelect_taclet100100012011_17" (formula "17") (term "0,1,0,1,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet100100012011_18" (formula "17") (term "0,1,0,1,1"))
                                       (rule "add_literals" (formula "17") (term "0,2,2,1,1,1"))
                                       (rule "replaceKnownSelect_taclet100100012011_20" (formula "17") (term "2,1,1,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet100100012011_21" (formula "17") (term "2,1,1,1"))
                                       (rule "leq_literals" (formula "17") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "17"))
                                       (rule "mul_literals" (formula "17") (term "1,0,1,1"))
                                       (rule "add_zero_right" (formula "17") (term "0,1,1"))
                                       (rule "eqSymm" (formula "17") (term "0,1,1,1"))
                                       (rule "inEqSimp_homoInEq1" (formula "17") (term "0"))
                                       (rule "times_zero_2" (formula "17") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "17") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0"))
                                       (rule "mul_literals" (formula "17") (term "1,0"))
                                       (rule "inEqSimp_contradEq7" (formula "17") (term "0,1,1,1") (ifseqformula "53"))
                                       (rule "times_zero_1" (formula "17") (term "1,0,0,0,1,1,1"))
                                       (rule "add_literals" (formula "17") (term "0,0,0,1,1,1"))
                                       (rule "leq_literals" (formula "17") (term "0,0,1,1,1"))
                                        (builtin "One Step Simplification" (formula "17"))
                                       (rule "inEqSimp_contradInEq1" (formula "17") (term "0") (ifseqformula "53"))
                                       (rule "qeq_literals" (formula "17") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "17"))
                                       (rule "allLeft" (formula "18") (inst "t=b_0"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "replaceKnownSelect_taclet100100012011_14" (formula "18") (term "0,1,0,1,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet100100012011_15" (formula "18") (term "0,1,0,1,1"))
                                       (rule "polySimp_addComm1" (formula "18") (term "1,1"))
                                       (rule "polySimp_addComm0" (formula "18") (term "0,1,1"))
                                       (rule "replace_known_right" (formula "18") (term "1") (ifseqformula "98"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "inEqSimp_homoInEq1" (formula "18") (term "1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,1"))
                                       (rule "add_literals" (formula "18") (term "1,1,0,1"))
                                       (rule "times_zero_1" (formula "18") (term "1,0,1"))
                                       (rule "add_literals" (formula "18") (term "0,1"))
                                       (rule "leq_literals" (formula "18") (term "1"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "inEqSimp_subsumption0" (formula "5") (ifseqformula "18"))
                                       (rule "leq_literals" (formula "5") (term "0"))
                                        (builtin "One Step Simplification" (formula "5"))
                                       (rule "true_left" (formula "5"))
                                       (rule "inEqSimp_contradInEq0" (formula "53") (ifseqformula "17"))
                                       (rule "qeq_literals" (formula "53") (term "0"))
                                        (builtin "One Step Simplification" (formula "53"))
                                       (rule "closeFalse" (formula "53"))
                                    )
                                    (branch
                                       (rule "andLeft" (formula "44"))
                                       (rule "andLeft" (formula "44"))
                                       (rule "all_pull_out3" (formula "41") (term "0"))
                                       (rule "all_pull_out1" (formula "36") (term "0,1,0"))
                                       (rule "all_pull_out3" (formula "55") (term "0"))
                                       (rule "all_pull_out3" (formula "65") (term "0"))
                                       (rule "nnf_imp2or" (formula "40") (term "0,0,0"))
                                       (rule "nnf_imp2or" (formula "38") (term "0,0"))
                                       (rule "nnf_notAnd" (formula "38") (term "0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "38") (term "0,0,0,0"))
                                       (rule "mul_literals" (formula "38") (term "1,0,0,0,0,0,0"))
                                       (rule "add_literals" (formula "38") (term "0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0,0"))
                                       (rule "mul_literals" (formula "38") (term "1,0,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "38") (term "1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0,0"))
                                       (rule "mul_literals" (formula "38") (term "0,1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "40") (term "0,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "40") (term "1,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,1,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "40") (term "1,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "40") (term "1,1,0,0,0,0"))
                                       (rule "mul_literals" (formula "40") (term "0,1,1,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "40") (term "1,1,1,0,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "40") (term "0,0,0,0,0"))
                                       (rule "mul_literals" (formula "40") (term "1,0,0,0,0,0,0,0"))
                                       (rule "add_literals" (formula "40") (term "0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "0,0,0,0,0"))
                                       (rule "mul_literals" (formula "40") (term "1,0,0,0,0,0"))
                                       (rule "nnf_imp2or" (formula "38") (term "0,1,0,0"))
                                       (rule "nnf_imp2or" (formula "40") (term "0,1,0,0,0"))
                                       (rule "allLeft" (formula "14") (inst "t=add(Z(neglit(1(#))), b_0)"))
                                       (rule "replaceKnownSelect_taclet100100012011_22" (formula "14") (term "0,1,0,1,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet100100012011_23" (formula "14") (term "0,1,0,1,1"))
                                       (rule "polySimp_homoEq" (formula "14") (term "0,1,1,1"))
                                       (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,1,1"))
                                       (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,1,1"))
                                       (rule "mul_literals" (formula "14") (term "0,1,0,0,1,1,1"))
                                       (rule "polySimp_addAssoc" (formula "14") (term "0,2,2,1,1,1"))
                                       (rule "add_literals" (formula "14") (term "0,0,2,2,1,1,1"))
                                       (rule "add_zero_left" (formula "14") (term "0,2,2,1,1,1"))
                                       (rule "replaceKnownSelect_taclet100100012011_14" (formula "14") (term "2,1,1,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet100100012011_15" (formula "14") (term "2,1,1,1"))
                                       (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,1,1"))
                                       (rule "polySimp_addComm0" (formula "14") (term "0,0,0,1,1,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,1,1,1"))
                                       (rule "add_literals" (formula "14") (term "1,1,0,0,1,1,1"))
                                       (rule "times_zero_1" (formula "14") (term "1,0,0,1,1,1"))
                                       (rule "add_literals" (formula "14") (term "0,0,1,1,1"))
                                       (rule "equal_literals" (formula "14") (term "0,1,1,1"))
                                        (builtin "One Step Simplification" (formula "14"))
                                       (rule "polySimp_addComm1" (formula "14") (term "1,1"))
                                       (rule "inEqSimp_homoInEq1" (formula "14") (term "1,0"))
                                       (rule "polySimp_mulComm0" (formula "14") (term "1,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "14") (term "1,0,1,0"))
                                       (rule "mul_literals" (formula "14") (term "0,1,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "14") (term "0,1,0"))
                                       (rule "polySimp_addComm1" (formula "14") (term "0,0,1,0"))
                                       (rule "add_literals" (formula "14") (term "0,0,0,1,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,1,0"))
                                       (rule "add_literals" (formula "14") (term "1,1,0,1,0"))
                                       (rule "times_zero_1" (formula "14") (term "1,0,1,0"))
                                       (rule "add_zero_right" (formula "14") (term "0,1,0"))
                                       (rule "leq_literals" (formula "14") (term "1,0"))
                                        (builtin "One Step Simplification" (formula "14"))
                                       (rule "inEqSimp_homoInEq0" (formula "14") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "14") (term "1,0,0"))
                                       (rule "mul_literals" (formula "14") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "14") (term "0,0"))
                                       (rule "add_literals" (formula "14") (term "0,0,0"))
                                       (rule "add_zero_left" (formula "14") (term "0,0"))
                                       (rule "inEqSimp_invertInEq1" (formula "14") (term "0"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "0,0"))
                                       (rule "times_zero_2" (formula "14") (term "1,0"))
                                       (rule "polySimp_elimOne" (formula "14") (term "0,0"))
                                       (rule "inEqSimp_contradInEq1" (formula "14") (term "0") (ifseqformula "53"))
                                       (rule "qeq_literals" (formula "14") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "14"))
                                       (rule "allLeft" (formula "15") (inst "t=Z(0(#))"))
                                       (rule "replaceKnownSelect_taclet100100012011_17" (formula "15") (term "0,1,0,1,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet100100012011_18" (formula "15") (term "0,1,0,1,1"))
                                       (rule "leq_literals" (formula "15") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "15"))
                                       (rule "add_literals" (formula "15") (term "0,2,2,1,1,1"))
                                       (rule "replaceKnownSelect_taclet100100012011_20" (formula "15") (term "2,1,1,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet100100012011_21" (formula "15") (term "2,1,1,1"))
                                       (rule "mul_literals" (formula "15") (term "1,0,1,1"))
                                       (rule "add_zero_right" (formula "15") (term "0,1,1"))
                                       (rule "eqSymm" (formula "15") (term "0,1,1,1"))
                                       (rule "inEqSimp_homoInEq1" (formula "15") (term "0"))
                                       (rule "mul_literals" (formula "15") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "15") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0"))
                                       (rule "mul_literals" (formula "15") (term "1,0"))
                                       (rule "inEqSimp_contradEq7" (formula "15") (term "0,1,1,1") (ifseqformula "54"))
                                       (rule "times_zero_1" (formula "15") (term "1,0,0,0,1,1,1"))
                                       (rule "add_literals" (formula "15") (term "0,0,0,1,1,1"))
                                       (rule "leq_literals" (formula "15") (term "0,0,1,1,1"))
                                        (builtin "One Step Simplification" (formula "15"))
                                       (rule "inEqSimp_contradInEq1" (formula "15") (term "0") (ifseqformula "54"))
                                       (rule "qeq_literals" (formula "15") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "15"))
                                       (rule "allLeft" (formula "16") (inst "t=b_0"))
                                        (builtin "One Step Simplification" (formula "16"))
                                       (rule "replaceKnownSelect_taclet100100012011_14" (formula "16") (term "0,1,0,1,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet100100012011_15" (formula "16") (term "0,1,0,1,1"))
                                       (rule "polySimp_addComm1" (formula "16") (term "1,1"))
                                       (rule "polySimp_addComm0" (formula "16") (term "0,1,1"))
                                       (rule "replace_known_right" (formula "16") (term "1") (ifseqformula "98"))
                                        (builtin "One Step Simplification" (formula "16"))
                                       (rule "inEqSimp_homoInEq1" (formula "16") (term "1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,1"))
                                       (rule "add_literals" (formula "16") (term "1,1,0,1"))
                                       (rule "times_zero_1" (formula "16") (term "1,0,1"))
                                       (rule "add_literals" (formula "16") (term "0,1"))
                                       (rule "leq_literals" (formula "16") (term "1"))
                                        (builtin "One Step Simplification" (formula "16"))
                                       (rule "inEqSimp_contradInEq0" (formula "55") (ifseqformula "16"))
                                       (rule "qeq_literals" (formula "55") (term "0"))
                                        (builtin "One Step Simplification" (formula "55"))
                                       (rule "closeFalse" (formula "55"))
                                    )
                                 )
                              )
                              (branch "j_0 = 1 + b_0 FALSE"
                                 (rule "applyEqReverse" (formula "86") (term "0,0,1") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "polySimp_addComm0" (formula "85") (term "0,1"))
                                 (rule "polySimp_addComm1" (formula "85") (term "1"))
                                 (rule "inEqSimp_strengthen1" (formula "3") (ifseqformula "60"))
                                 (rule "polySimp_addAssoc" (formula "3") (term "1"))
                                 (rule "add_literals" (formula "3") (term "0,1"))
                                 (rule "inEqSimp_contradEq7" (formula "60") (ifseqformula "3"))
                                 (rule "polySimp_rightDist" (formula "60") (term "1,0,0"))
                                 (rule "mul_literals" (formula "60") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "60") (term "0,0"))
                                 (rule "polySimp_addComm1" (formula "60") (term "0,0,0"))
                                 (rule "add_literals" (formula "60") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "60") (term "0,0"))
                                 (rule "add_literals" (formula "60") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "60") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "60") (term "0,0"))
                                 (rule "leq_literals" (formula "60") (term "0"))
                                  (builtin "One Step Simplification" (formula "60"))
                                 (rule "false_right" (formula "60"))
                                 (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "24"))
                                 (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                 (rule "mul_literals" (formula "3") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "3") (term "0"))
                                 (rule "add_literals" (formula "3") (term "0,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                 (rule "polySimp_elimOne" (formula "3") (term "0"))
                                 (rule "inEqSimp_subsumption0" (formula "2") (ifseqformula "3"))
                                 (rule "leq_literals" (formula "2") (term "0"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "true_left" (formula "2"))
                                 (rule "nnf_imp2or" (formula "38") (term "1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "38") (term "0,1,1,0"))
                                 (rule "mul_literals" (formula "38") (term "1,0,0,0,1,1,0"))
                                 (rule "add_literals" (formula "38") (term "0,0,0,1,1,0"))
                                 (rule "add_zero_left" (formula "38") (term "0,0,1,1,0"))
                                 (rule "Contract_axiom_for_countClassOfSliceEq_in_Classifier" (formula "13") (term "0,0,1,1,0"))
                                 (rule "replace_known_left" (formula "13") (term "1,0,0,0") (ifseqformula "16"))
                                  (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "83")) (ifInst ""  (formula "17")) (ifInst ""  (formula "84")))
                                 (rule "true_left" (formula "13"))
                                 (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "13") (term "0,0,1,1,0") (inst "i=i"))
                                 (rule "polySimp_homoEq" (formula "13") (term "1,0"))
                                 (rule "polySimp_addComm0" (formula "13") (term "0,0,0,1,0"))
                                 (rule "polySimp_addComm1" (formula "13") (term "0,0,1,0"))
                                 (rule "polySimp_addComm1" (formula "13") (term "0,1,0"))
                                 (rule "polySimp_sepPosMonomial" (formula "13") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "13") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "13") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "13") (term "0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "13") (term "0,0,1,1,0"))
                                 (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "39") (term "2,0"))
                                 (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "36") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "62")) (ifInst ""  (formula "61")) (ifInst ""  (formula "46")))
                                 (rule "translateJavaMulInt" (formula "36") (term "1,1,1,0,0,0,0,0"))
                                 (rule "translateJavaSubInt" (formula "36") (term "0,2,0,1,0,0,0"))
                                 (rule "translateJavaSubInt" (formula "36") (term "0,2,1,1,0,0,0"))
                                 (rule "eqSymm" (formula "36") (term "1,0,0,0,0,0"))
                                 (rule "eqSymm" (formula "36") (term "1,0,0,0"))
                                 (rule "polySimp_elimSub" (formula "36") (term "0,2,1,1,0,0,0"))
                                 (rule "mul_literals" (formula "36") (term "1,0,2,1,1,0,0,0"))
                                 (rule "polySimp_elimSub" (formula "36") (term "0,2,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "36") (term "1,0,2,0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "36") (term "1,0,1,0,0,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "36") (term "0,2,1,1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "36") (term "0,2,0,1,0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,0,0,0,0,0"))
                                 (rule "applyEq" (formula "36") (term "0,0,0,0,0,0,0,0") (ifseqformula "32"))
                                 (rule "replace_known_left" (formula "36") (term "0,0,0,0,0,0,0") (ifseqformula "44"))
                                  (builtin "One Step Simplification" (formula "36"))
                                 (rule "applyEq" (formula "36") (term "1,0,2,0,1,0,0,0") (ifseqformula "51"))
                                 (rule "eqSymm" (formula "36") (term "1,0,0,0"))
                                 (rule "applyEq" (formula "36") (term "3,0,1,0,0,0,0") (ifseqformula "51"))
                                 (rule "replace_known_left" (formula "36") (term "1,0,0,0,0") (ifseqformula "47"))
                                  (builtin "One Step Simplification" (formula "36"))
                                 (rule "applyEq" (formula "36") (term "1,0,2,0,1,0,0,0") (ifseqformula "51"))
                                 (rule "eqSymm" (formula "36") (term "1,0,0,0"))
                                 (rule "replace_known_left" (formula "36") (term "1,0,0,0") (ifseqformula "48"))
                                  (builtin "One Step Simplification" (formula "36"))
                                 (rule "applyEq" (formula "36") (term "0,1,0,1,0,0,0") (ifseqformula "51"))
                                 (rule "applyEq" (formula "36") (term "2,0,1,0,0,0") (ifseqformula "51"))
                                 (rule "applyEq" (formula "36") (term "0,0,0,0,0") (ifseqformula "32"))
                                 (rule "replace_known_left" (formula "36") (term "0,0,0,0") (ifseqformula "24"))
                                  (builtin "One Step Simplification" (formula "36"))
                                 (rule "applyEq" (formula "36") (term "0,0,0,0") (ifseqformula "45"))
                                 (rule "eqSymm" (formula "36") (term "0,0,0"))
                                 (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "32"))
                                  (builtin "One Step Simplification" (formula "36"))
                                 (rule "jdiv_axiom" (formula "42") (term "0"))
                                 (rule "polySimp_mulLiterals" (formula "42") (term "0,0,2,1"))
                                 (rule "eqSymm" (formula "42"))
                                 (rule "applyEqRigid" (formula "42") (term "1") (ifseqformula "43"))
                                 (rule "inEqSimp_subsumption6" (formula "42") (term "0,0") (ifseqformula "40"))
                                 (rule "greater_literals" (formula "42") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "42"))
                                 (rule "mul_literals" (formula "42") (term "1,0,0,0"))
                                 (rule "leq_literals" (formula "42") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "42"))
                                 (rule "polyDiv_pullOut" (formula "42") (term "0") (inst "polyDivCoeff=l_0"))
                                 (rule "polySimp_mulLiterals" (formula "42") (term "1,0,0,2,0"))
                                 (rule "equal_literals" (formula "42") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "42"))
                                 (rule "polySimp_homoEq" (formula "42"))
                                 (rule "polySimp_pullOutFactor0" (formula "42") (term "0,0,0,1,0"))
                                 (rule "add_literals" (formula "42") (term "1,0,0,0,1,0"))
                                 (rule "times_zero_1" (formula "42") (term "0,0,0,1,0"))
                                 (rule "div_literals" (formula "42") (term "0,0,1,0"))
                                 (rule "add_zero_left" (formula "42") (term "0,1,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "42") (term "0"))
                                 (rule "add_literals" (formula "42") (term "1,0"))
                                 (rule "times_zero_1" (formula "42") (term "0"))
                                  (builtin "One Step Simplification" (formula "42"))
                                 (rule "true_left" (formula "42"))
                                 (rule "cnf_rightDist" (formula "25") (term "0"))
                                 (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "11") (term "0,0,2,1,2,0"))
                                 (rule "Contract_axiom_for_isClassOfSlice_in_Classifier" (formula "37") (term "0,1,0"))
                                 (rule "replace_known_right" (formula "37") (term "0,1,0,0,0,0") (ifseqformula "64"))
                                  (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "15")) (ifInst ""  (formula "16")) (ifInst ""  (formula "84")))
                                 (rule "true_left" (formula "37"))
                                 (rule "Definition_axiom_for_isClassOfSlice_in_de_wiesler_Classifier" (formula "37") (term "0,1,0") (inst "i=i"))
                                  (builtin "One Step Simplification" (formula "37"))
                                 (rule "inEqSimp_ltToLeq" (formula "37") (term "1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "37") (term "1,0,0,1,0,0,1,0"))
                                 (rule "polySimp_mulAssoc" (formula "37") (term "0,1,0,0,1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "37") (term "0,0,1,0,0,1,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "37") (term "0,1,0,0,1,0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "37") (term "0,0,1,0,0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "37") (term "0,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "37") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "37") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "37") (term "1,1,1,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "37") (term "1,1,1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "37") (term "0,1,1,0,0,1,0"))
                                 (rule "mul_literals" (formula "37") (term "0,0,1,1,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "37") (term "1,0,1,1,0,0,1,0"))
                                 (rule "Contract_axiom_for_isClassifiedBlock_in_Classifier" (formula "35") (term "0,1,0"))
                                 (rule "replace_known_left" (formula "35") (term "1,0,0") (ifseqformula "16"))
                                  (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "83")) (ifInst ""  (formula "15")) (ifInst ""  (formula "84")))
                                 (rule "true_left" (formula "35"))
                                 (rule "Definition_axiom_for_isClassifiedBlock_in_de_wiesler_Classifier" (formula "35") (term "0,1,0") (inst "bucket=bucket"))
                                  (builtin "One Step Simplification" (formula "35"))
                                 (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0,1,0"))
                                 (rule "applyEq" (formula "35") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "32"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1,0"))
                                 (rule "mul_literals" (formula "35") (term "0,1,1,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,1,0"))
                                 (rule "nnf_imp2or" (formula "37") (term "0,1,0"))
                                 (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "56") (term "0") (inst "i=i") (inst "j=j_1"))
                                  (builtin "One Step Simplification" (formula "56"))
                                 (rule "inEqSimp_ltToLeq" (formula "56") (term "1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "56") (term "1,0,0,1,0,0,1,0"))
                                 (rule "mul_literals" (formula "56") (term "0,1,0,0,1,0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "56") (term "0,0,1,0,0,1,0"))
                                 (rule "add_literals" (formula "56") (term "0,0,0,1,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "56") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "56") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "56") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "56") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "56") (term "0,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "56") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "56") (term "1,0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "56") (term "0,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "56") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "56") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "56") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "56") (term "1,1,1,0,0,1,0"))
                                 (rule "mul_literals" (formula "56") (term "0,1,1,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "56") (term "1,1,1,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "56") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "56") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "56") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "56") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "56") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "56") (term "1,1,1,0,0"))
                                 (rule "arrayLengthNotNegative" (formula "23") (term "0"))
                                 (rule "applyEq" (formula "23") (term "0") (ifseqformula "24"))
                                 (rule "qeq_literals" (formula "23"))
                                 (rule "true_left" (formula "23"))
                                 (rule "arrayLengthIsAShort" (formula "23") (term "0"))
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "true_left" (formula "23"))
                                 (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "47") (term "0"))
                                 (rule "replace_known_left" (formula "47") (term "0,1") (ifseqformula "48"))
                                  (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "62")) (ifInst ""  (formula "15")))
                                 (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "48") (term "0") (inst "i=i") (inst "j=j_1"))
                                  (builtin "One Step Simplification" (formula "48"))
                                 (rule "inEqSimp_ltToLeq" (formula "48") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "48") (term "1,0,0,1,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "48") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "48") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "48") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "48") (term "0,0,0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "48") (term "1,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "48") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "48") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "48") (term "1,1,0,0,1,0"))
                                 (rule "mul_literals" (formula "48") (term "0,1,1,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "48") (term "1,1,1,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "48") (term "1,1,1,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "48") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "48") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "48") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "48") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "48") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "48") (term "1,1,1,0,0"))
                                 (rule "arrayLengthIsAShort" (formula "22") (term "0"))
                                  (builtin "One Step Simplification" (formula "22"))
                                 (rule "true_left" (formula "22"))
                                 (rule "arrayLengthNotNegative" (formula "22") (term "0"))
                                 (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                                 (rule "qeq_literals" (formula "22"))
                                 (rule "true_left" (formula "22"))
                                 (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "33") (term "1,1,0") (inst "i=i"))
                                 (rule "eqSymm" (formula "33") (term "1,0"))
                                 (rule "nnf_imp2or" (formula "57") (term "0"))
                                 (rule "nnf_notAnd" (formula "37") (term "0,0,1,0"))
                                 (rule "inEqSimp_notLeq" (formula "37") (term "1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "37") (term "1,0,0,1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "37") (term "0,1,0,0,1,0,0,1,0"))
                                 (rule "mul_literals" (formula "37") (term "0,0,1,0,0,1,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "37") (term "1,0,1,0,0,1,0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "37") (term "0,0,1,0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "37") (term "0,0,0,1,0,0,1,0"))
                                 (rule "add_literals" (formula "37") (term "0,0,0,0,1,0,0,1,0"))
                                 (rule "add_zero_left" (formula "37") (term "0,0,0,1,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "37") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "37") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "37") (term "1,1,1,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "37") (term "1,1,1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "37") (term "0,1,1,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "37") (term "0,1,1,0,0,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "37") (term "0,0,0,1,0"))
                                 (rule "polySimp_mulAssoc" (formula "37") (term "1,0,0,0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "37") (term "0,1,0,0,0,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "37") (term "1,0,0,0,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "37") (term "1,0,0,0,1,0"))
                                 (rule "mul_literals" (formula "37") (term "0,1,0,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0,0,0,1,0"))
                                 (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "38") (term "0,1,0,1,0"))
                                  (builtin "One Step Simplification" (formula "38"))
                                 (rule "translateJavaMod" (formula "38") (term "0,1,0,1,0"))
                                 (rule "jmod_axiom" (formula "38") (term "0,1,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "38") (term "1,0,1,0,1,0"))
                                 (rule "polySimp_sepNegMonomial" (formula "38") (term "1,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "38") (term "0,1,0,1,0"))
                                 (rule "nnf_imp2or" (formula "48") (term "0"))
                                 (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "85") (term "0,0,2,0"))
                                 (rule "nnf_notAnd" (formula "57") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "57") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "57") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "57") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "57") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "57") (term "0,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "57") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "57") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "57") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "57") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "57") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "57") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "57") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "57") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "57") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "57") (term "0,0,0"))
                                 (rule "mul_literals" (formula "57") (term "1,0,0,0"))
                                 (rule "nnf_imp2or" (formula "57") (term "0,1,0"))
                                 (rule "nnf_notAnd" (formula "48") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "48") (term "0,0,0"))
                                 (rule "mul_literals" (formula "48") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "48") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "48") (term "0,0,0"))
                                 (rule "mul_literals" (formula "48") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "48") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "48") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "48") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "48") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "48") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "48") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "48") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "48") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "48") (term "1,1,0,0"))
                                 (rule "nnf_imp2or" (formula "48") (term "0,1,0"))
                                 (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "13") (term "0,0,2,0,1,0"))
                                 (rule "distr_forallAnd" (formula "25"))
                                 (rule "andLeft" (formula "25"))
                                 (rule "nnf_notAnd" (formula "58") (term "0,0,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "58") (term "0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "58") (term "1,0,0,0,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "58") (term "0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "58") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "58") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "58") (term "1,1,0,0,0,1,0"))
                                 (rule "mul_literals" (formula "58") (term "0,1,0,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "58") (term "1,1,0,0,0,1,0"))
                                 (rule "inEqSimp_notLeq" (formula "58") (term "1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "58") (term "1,0,0,1,0,0,1,0"))
                                 (rule "mul_literals" (formula "58") (term "0,1,0,0,1,0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "58") (term "0,0,1,0,0,1,0"))
                                 (rule "add_literals" (formula "58") (term "0,0,0,1,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "58") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "58") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "58") (term "1,1,0,0,1,0"))
                                 (rule "mul_literals" (formula "58") (term "0,1,1,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "58") (term "1,1,1,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "58") (term "1,1,1,0,0,1,0"))
                                 (rule "nnf_notAnd" (formula "49") (term "0,0,1,0"))
                                 (rule "inEqSimp_notLeq" (formula "49") (term "1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "49") (term "1,0,0,1,0,0,1,0"))
                                 (rule "mul_literals" (formula "49") (term "0,1,0,0,1,0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "49") (term "0,0,1,0,0,1,0"))
                                 (rule "add_literals" (formula "49") (term "0,0,0,1,0,0,1,0"))
                                 (rule "add_zero_left" (formula "49") (term "0,0,1,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "49") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "49") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "49") (term "1,1,0,0,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "49") (term "0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "49") (term "1,0,0,0,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "49") (term "0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "49") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "49") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "49") (term "1,1,0,0,0,1,0"))
                                 (rule "mul_literals" (formula "49") (term "0,1,0,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "49") (term "1,1,0,0,0,1,0"))
                                 (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "37") (term "1,0") (inst "b=b"))
                                  (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "65")) (ifInst ""  (formula "66")) (ifInst ""  (formula "23")))
                                 (rule "translateJavaMulInt" (formula "37") (term "1,1,0,0,1,0"))
                                 (rule "mul_literals" (formula "37") (term "1,1,0,0,1,0"))
                                 (rule "eqSymm" (formula "37") (term "0,0,0,0,1,0"))
                                 (rule "replace_known_left" (formula "37") (term "1,0,0,1,0") (ifseqformula "22"))
                                  (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "76")))
                                 (rule "inEqSimp_ltToLeq" (formula "37") (term "1,0,0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1,0,0,1,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "37") (term "0,0,0,1,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "37") (term "0,1,0,1,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "37") (term "0,0,1,0"))
                                 (rule "applyEq" (formula "37") (term "0,0,0,1,0") (ifseqformula "8"))
                                 (rule "applyEq" (formula "37") (term "0,1,0,1,0") (ifseqformula "8"))
                                 (rule "replace_known_left" (formula "37") (term "1,0,1,0") (ifseqformula "24"))
                                  (builtin "One Step Simplification" (formula "37"))
                                 (rule "applyEq" (formula "37") (term "0,1,0,0,1,0,0,1,1,0") (ifseqformula "8"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0,0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "37") (term "1,1,0,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "37") (term "1,1,0,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "37") (term "1,1,1,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "37") (term "0,1,1,0,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "37") (term "1,1,1,0,0,1,1,0"))
                                 (rule "inEqSimp_subsumption1" (formula "37") (term "0,1,0") (ifseqformula "45"))
                                 (rule "leq_literals" (formula "37") (term "0,0,1,0"))
                                  (builtin "One Step Simplification" (formula "37"))
                                 (rule "nnf_imp2or" (formula "37") (term "0,1,0"))
                                 (rule "Definition_axiom_for_isClassOfSlice_in_de_wiesler_Classifier" (formula "36") (term "0,1,0,1,0") (inst "i=i"))
                                  (builtin "One Step Simplification" (formula "36"))
                                 (rule "inEqSimp_ltToLeq" (formula "36") (term "1,0,0,1,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0,1,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0,1,0,0,1,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "36") (term "0,1,0,0,1,0,0,1,0,1,0"))
                                 (rule "mul_literals" (formula "36") (term "0,0,1,0,0,1,0,0,1,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0,1,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "36") (term "0,0,0,1,0,0,1,0,1,0"))
                                 (rule "add_literals" (formula "36") (term "0,0,0,0,1,0,0,1,0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,0,1,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0,1,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0,1,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0,1,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0,1,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "36") (term "0,1,1,0,0,1,0,1,0"))
                                 (rule "mul_literals" (formula "36") (term "0,0,1,1,0,0,1,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "36") (term "1,0,1,1,0,0,1,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "36") (term "1,0,1,1,0,0,1,0,1,0"))
                                 (rule "nnf_notAnd" (formula "37") (term "0,0,1,0"))
                                 (rule "inEqSimp_notLeq" (formula "37") (term "1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "37") (term "1,0,0,1,0,0,1,0"))
                                 (rule "mul_literals" (formula "37") (term "0,1,0,0,1,0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "37") (term "0,0,1,0,0,1,0"))
                                 (rule "add_literals" (formula "37") (term "0,0,0,1,0,0,1,0"))
                                 (rule "add_zero_left" (formula "37") (term "0,0,1,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "37") (term "1,1,0,0,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "37") (term "0,0,0,1,0"))
                                 (rule "mul_literals" (formula "37") (term "1,0,0,0,0,0,1,0"))
                                 (rule "add_literals" (formula "37") (term "0,0,0,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "0,0,0,1,0"))
                                 (rule "mul_literals" (formula "37") (term "1,0,0,0,1,0"))
                                 (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "38") (term "0,1,0,1,0"))
                                 (rule "nnf_imp2or" (formula "36") (term "0,1,0,1,0"))
                                 (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "48") (term "0") (inst "i=i"))
                                  (builtin "One Step Simplification" (formula "48"))
                                 (rule "translateJavaSubInt" (formula "48") (term "1,1,0,0"))
                                 (rule "translateJavaAddInt" (formula "48") (term "0,2,1,1,0"))
                                 (rule "polySimp_elimSub" (formula "48") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "48") (term "1,1,1,0,0"))
                                 (rule "polySimp_addComm0" (formula "48") (term "0,2,1,1,0"))
                                 (rule "polySimp_addComm0" (formula "48") (term "1,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "48") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "48") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "48") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "48") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "48") (term "0,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "48") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "48") (term "1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "48") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "48") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "48") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "48") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "48") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "48") (term "1,1,1,0,0"))
                                 (rule "nnf_imp2or" (formula "48") (term "0"))
                                 (rule "nnf_notAnd" (formula "48") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "48") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "48") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "48") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "48") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "48") (term "0,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "48") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "48") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "48") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "48") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "48") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "48") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "48") (term "0,0,0"))
                                 (rule "mul_literals" (formula "48") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "48") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "48") (term "0,0,0"))
                                 (rule "mul_literals" (formula "48") (term "1,0,0,0"))
                                 (rule "ifthenelse_split" (formula "46") (term "0"))
                                 (branch "self.equal_buckets = TRUE TRUE"
                                    (rule "newSym_eq" (formula "47") (inst "l=l_1") (inst "newSymDef=mul(j_0, Z(0(#)))"))
                                    (rule "times_zero_1" (formula "47") (term "1,1"))
                                    (rule "add_zero_right" (formula "47") (term "1"))
                                    (rule "applyEq" (formula "48") (term "0,0") (ifseqformula "47"))
                                    (rule "eqSymm" (formula "48"))
                                    (rule "applyEq" (formula "52") (term "1,0,2,0") (ifseqformula "47"))
                                    (rule "eqSymm" (formula "52"))
                                    (rule "applyEq" (formula "60") (term "1,1,1,0,0") (ifseqformula "47"))
                                    (rule "applyEq" (formula "51") (term "1,1,0,0,1,0") (ifseqformula "47"))
                                    (rule "applyEq" (formula "59") (term "0") (ifseqformula "47"))
                                    (rule "inEqSimp_commuteLeq" (formula "59"))
                                    (rule "applyEq" (formula "60") (term "1,1,1,0,0,1,0") (ifseqformula "47"))
                                    (rule "applyEq" (formula "57") (term "0") (ifseqformula "47"))
                                    (rule "applyEq" (formula "50") (term "1,1,1,0,0") (ifseqformula "47"))
                                    (rule "applyEq" (formula "51") (term "1,1,0,0") (ifseqformula "47"))
                                    (rule "applyEq" (formula "58") (term "1") (ifseqformula "47"))
                                    (rule "applyEq" (formula "37") (term "1,1,0,0,1,0") (ifseqformula "48"))
                                    (rule "applyEq" (formula "63") (term "2,1,0,0,1,1,0") (ifseqformula "48"))
                                    (rule "applyEqRigid" (formula "63") (term "0,2,0,1,1,0") (ifseqformula "48"))
                                    (rule "applyEq" (formula "10") (term "1,0,2,0") (ifseqformula "48"))
                                    (rule "applyEqRigid" (formula "38") (term "1,1,0,0") (ifseqformula "48"))
                                    (rule "applyEq" (formula "3") (term "0") (ifseqformula "48"))
                                    (rule "inEqSimp_homoInEq1" (formula "3"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                                    (rule "polySimp_addComm1" (formula "3") (term "0"))
                                    (rule "applyEqRigid" (formula "34") (term "1,1,0,0") (ifseqformula "48"))
                                    (rule "applyEqRigid" (formula "35") (term "1,0") (ifseqformula "48"))
                                    (rule "applyEq" (formula "26") (term "1,1,1,0") (ifseqformula "48"))
                                    (rule "applyEqRigid" (formula "39") (term "1,1,0,0") (ifseqformula "48"))
                                    (rule "applyEq" (formula "12") (term "2,1,0,1,1,0") (ifseqformula "48"))
                                    (rule "applyEq" (formula "24") (term "0") (ifseqformula "48"))
                                    (rule "applyEq" (formula "25") (term "1,1,0,0") (ifseqformula "48"))
                                    (rule "applyEq" (formula "40") (term "1,0") (ifseqformula "48"))
                                    (rule "applyEqRigid" (formula "63") (term "1,1,0,0") (ifseqformula "48"))
                                    (rule "applyEqRigid" (formula "12") (term "2,1,0,0,1,0") (ifseqformula "48"))
                                    (rule "applyEqRigid" (formula "13") (term "1,1,0,0") (ifseqformula "48"))
                                    (rule "applyEqRigid" (formula "45") (term "0") (ifseqformula "48"))
                                    (rule "applyEq" (formula "28") (term "1,1") (ifseqformula "48"))
                                    (rule "applyEqRigid" (formula "12") (term "1,1,1,0,0") (ifseqformula "48"))
                                    (rule "applyEqRigid" (formula "63") (term "0,2,0,0,1,0") (ifseqformula "48"))
                                    (rule "applyEq" (formula "63") (term "2,1,0,0,0,1,0") (ifseqformula "48"))
                                    (rule "applyEqRigid" (formula "11") (term "1,0") (ifseqformula "48"))
                                    (rule "applyEq" (formula "36") (term "1,1,1,0,0,1,0") (ifseqformula "48"))
                                    (rule "applyEq" (formula "55") (term "1") (ifseqformula "47"))
                                    (rule "applyEq" (formula "13") (term "2,1,0,2,1,1,1,0") (ifseqformula "48"))
                                    (rule "applyEq" (formula "33") (term "1") (ifseqformula "48"))
                                    (rule "applyEq" (formula "8") (term "1") (ifseqformula "48"))
                                    (rule "applyEq" (formula "52") (term "1,0,2,0") (ifseqformula "47"))
                                    (rule "eqSymm" (formula "52"))
                                    (rule "applyEq" (formula "13") (term "2,1,0,0,1,0,1,1,0") (ifseqformula "48"))
                                    (rule "applyEqRigid" (formula "13") (term "1,1,0,1,1,1,0") (ifseqformula "48"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                                    (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                    (rule "polySimp_rightDist" (formula "3") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                    (rule "mul_literals" (formula "3") (term "0,1"))
                                    (rule "inEqSimp_subsumption6" (formula "45") (ifseqformula "57"))
                                    (rule "greater_literals" (formula "45") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "45"))
                                    (rule "mul_literals" (formula "45") (term "1,0"))
                                    (rule "leq_literals" (formula "45") (term "0"))
                                     (builtin "One Step Simplification" (formula "45"))
                                    (rule "true_left" (formula "45"))
                                    (rule "elimGcdLeq_antec" (formula "24") (inst "elimGcdRightDiv=Z(6(5(2(#))))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(2(#))"))
                                    (rule "polySimp_mulLiterals" (formula "24") (term "1,0,1,0"))
                                    (rule "neg_literal" (formula "24") (term "0,0,0,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "24") (term "1,0,0,0,0,1,0"))
                                    (rule "leq_literals" (formula "24") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "24"))
                                    (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_addLiterals" (formula "24") (term "0,0,0,0"))
                                    (rule "add_zero_right" (formula "24") (term "0,0,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "24") (term "0,0"))
                                    (rule "add_literals" (formula "24") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "24") (term "1,0,0"))
                                    (rule "add_literals" (formula "24") (term "0,0"))
                                    (rule "qeq_literals" (formula "24") (term "0"))
                                     (builtin "One Step Simplification" (formula "24"))
                                    (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "3"))
                                    (rule "mul_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                    (rule "mul_literals" (formula "1") (term "1"))
                                    (rule "inEqSimp_subsumption6" (formula "1") (ifseqformula "57"))
                                    (rule "mul_literals" (formula "1") (term "1,1,0"))
                                    (rule "greater_literals" (formula "1") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "leq_literals" (formula "1") (term "0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "nnf_notAnd" (formula "36") (term "0,0,1,0,1,0"))
                                    (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0,1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "36") (term "1,0,0,0,0,0,1,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0,0,0,0,1,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "36") (term "0,1,0,0,0,0,0,1,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "36") (term "0,0,0,0,0,1,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0,1,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,0,1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "36") (term "1,0,0,0,1,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0,0,1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "36") (term "0,1,0,0,0,1,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "36") (term "1,0,1,0,0,0,1,0,1,0"))
                                    (rule "mul_literals" (formula "36") (term "0,0,1,0,0,0,1,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "36") (term "1,0,1,0,0,0,1,0,1,0"))
                                    (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0,1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0,1,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0,1,0,0,1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "36") (term "0,1,0,0,1,0,0,1,0,1,0"))
                                    (rule "mul_literals" (formula "36") (term "0,0,1,0,0,1,0,0,1,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0,1,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "36") (term "0,0,0,1,0,0,1,0,1,0"))
                                    (rule "add_literals" (formula "36") (term "0,0,0,0,1,0,0,1,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0,1,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0,1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0,1,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0,1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "36") (term "0,1,1,0,0,1,0,1,0"))
                                    (rule "mul_literals" (formula "36") (term "0,0,1,1,0,0,1,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "36") (term "1,0,1,1,0,0,1,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "36") (term "1,0,1,1,0,0,1,0,1,0"))
                                    (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "34") (term "0,0,2,0,1,0"))
                                    (rule "onlyCreatedObjectsAreReferencedFinal" (formula "72") (term "0") (ifseqformula "15") (ifseqformula "7"))
                                    (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "64"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "39") (term "1,1,1,0,0,1,0"))
                                    (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "40") (term "0,0,1,1,1,0"))
                                    (rule "arrayLengthIsAShort" (formula "58") (term "0"))
                                     (builtin "One Step Simplification" (formula "58"))
                                    (rule "true_left" (formula "58"))
                                    (rule "arrayLengthNotNegative" (formula "58") (term "0"))
                                    (rule "arrayLengthIsAShort" (formula "56") (term "0"))
                                     (builtin "One Step Simplification" (formula "56"))
                                    (rule "true_left" (formula "56"))
                                    (rule "arrayLengthNotNegative" (formula "56") (term "0"))
                                    (rule "inEqSimp_subsumption1" (formula "56") (ifseqformula "57"))
                                    (rule "leq_literals" (formula "56") (term "0"))
                                     (builtin "One Step Simplification" (formula "56"))
                                    (rule "true_left" (formula "56"))
                                    (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "38") (term "1") (inst "b=b"))
                                     (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "68")) (ifInst ""  (formula "69")) (ifInst ""  (formula "24")))
                                    (rule "translateJavaMulInt" (formula "38") (term "1,1,0,0,1"))
                                    (rule "mul_literals" (formula "38") (term "1,1,0,0,1"))
                                    (rule "eqSymm" (formula "38") (term "0,0,0,0,1"))
                                    (rule "replace_known_right" (formula "38") (term "0,0,0,0,1") (ifseqformula "79"))
                                     (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "23")))
                                    (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0,1,1"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "38") (term "0,1,0,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,1"))
                                    (rule "applyEq" (formula "38") (term "0,0,0,1") (ifseqformula "9"))
                                    (rule "applyEq" (formula "38") (term "0,1,0,1") (ifseqformula "9"))
                                    (rule "applyEq" (formula "38") (term "0,1,0,0,1,0,0,1,1") (ifseqformula "9"))
                                    (rule "polySimp_mulLiterals" (formula "38") (term "1,0,0,1,0,0,1,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0,1,1"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0,1,1"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0,1,1"))
                                    (rule "mul_literals" (formula "38") (term "0,1,1,0,0,1,1"))
                                    (rule "inEqSimp_subsumption6" (formula "38") (term "0,0,1") (ifseqformula "57"))
                                    (rule "mul_literals" (formula "38") (term "1,1,0,0,0,1"))
                                    (rule "greater_literals" (formula "38") (term "0,0,0,0,1"))
                                     (builtin "One Step Simplification" (formula "38"))
                                    (rule "leq_literals" (formula "38") (term "0,0,0,1"))
                                     (builtin "One Step Simplification" (formula "38"))
                                    (rule "inEqSimp_subsumption4" (formula "38") (term "0,1") (ifseqformula "25"))
                                    (rule "greater_literals" (formula "38") (term "0,0,0,1"))
                                     (builtin "One Step Simplification" (formula "38"))
                                    (rule "mul_literals" (formula "38") (term "0,0,0,1"))
                                    (rule "leq_literals" (formula "38") (term "0,0,1"))
                                     (builtin "One Step Simplification" (formula "38"))
                                    (rule "nnf_imp2or" (formula "38") (term "0,1"))
                                    (rule "nnf_notAnd" (formula "38") (term "0,0,1"))
                                    (rule "inEqSimp_notLeq" (formula "38") (term "1,0,0,1"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0,1"))
                                    (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0,1,0,0,1"))
                                    (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0,1"))
                                    (rule "add_literals" (formula "38") (term "0,0,0,1,0,0,1"))
                                    (rule "add_zero_left" (formula "38") (term "0,0,1,0,0,1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "1,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0,1"))
                                    (rule "inEqSimp_notGeq" (formula "38") (term "0,0,0,1"))
                                    (rule "mul_literals" (formula "38") (term "1,0,0,0,0,0,1"))
                                    (rule "add_zero_right" (formula "38") (term "0,0,0,0,0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0,1"))
                                    (rule "mul_literals" (formula "38") (term "1,0,0,0,1"))
                                    (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "37") (term "0,1,0,1,0,1,0"))
                                    (rule "commute_or" (formula "27") (term "0"))
                                    (rule "commute_or" (formula "51") (term "0,0,1,0"))
                                    (rule "commute_or" (formula "61") (term "0,0,1,0"))
                                    (rule "onlyCreatedObjectsAreReferencedFinal" (formula "49") (term "0") (ifseqformula "16") (ifseqformula "8"))
                                    (rule "applyEq" (formula "49") (term "0,0") (ifseqformula "50"))
                                    (rule "replace_known_right" (formula "49") (term "0") (ifseqformula "67"))
                                     (builtin "One Step Simplification" (formula "49"))
                                    (rule "applyEq" (formula "49") (term "1,0") (ifseqformula "50"))
                                    (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "38") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "65")) (ifInst ""  (formula "54")))
                                    (rule "translateJavaSubInt" (formula "38") (term "3,0,1,0,0"))
                                    (rule "polySimp_elimSub" (formula "38") (term "3,0,1,0,0"))
                                    (rule "mul_literals" (formula "38") (term "1,3,0,1,0,0"))
                                    (rule "polySimp_addComm0" (formula "38") (term "3,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "38") (term "1,0,0,0,0,0,0"))
                                    (rule "replace_known_left" (formula "38") (term "1,0,0,0,0,0,0") (ifseqformula "53"))
                                     (builtin "One Step Simplification" (formula "38"))
                                    (rule "inEqSimp_commuteLeq" (formula "38") (term "1,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "38") (term "1,1,0,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "38") (term "0,1,0,0,0,0"))
                                    (rule "applyEq" (formula "38") (term "0,0,1,0,0,0,0") (ifseqformula "55"))
                                    (rule "replace_known_left" (formula "38") (term "0,1,0,0,0,0") (ifseqformula "57"))
                                     (builtin "One Step Simplification" (formula "38"))
                                    (rule "applyEq" (formula "38") (term "1,3,0,1,0,0") (ifseqformula "55"))
                                    (rule "applyEq" (formula "38") (term "0,1,0,0,0,0,0") (ifseqformula "55"))
                                    (rule "eqSymm" (formula "38") (term "1,0,0,0,0,0"))
                                    (rule "replace_known_left" (formula "38") (term "1,0,0,0,0,0") (ifseqformula "47"))
                                     (builtin "One Step Simplification" (formula "38"))
                                    (rule "applyEq" (formula "38") (term "1,0,1,0,0") (ifseqformula "49"))
                                    (rule "applyEq" (formula "38") (term "1,1,0,0,0") (ifseqformula "55"))
                                    (rule "applyEq" (formula "38") (term "1,1,0,0,0,0") (ifseqformula "55"))
                                    (rule "replace_known_left" (formula "38") (term "1,0,0,0,0") (ifseqformula "59"))
                                     (builtin "One Step Simplification" (formula "38"))
                                    (rule "applyEq" (formula "38") (term "0,0,1,0,0,0") (ifseqformula "49"))
                                    (rule "replace_known_left" (formula "38") (term "1,0,0,0") (ifseqformula "60"))
                                     (builtin "One Step Simplification" (formula "38"))
                                    (rule "applyEq" (formula "38") (term "0,0,0,0,0") (ifseqformula "49"))
                                    (rule "replace_known_right" (formula "38") (term "0,0,0,0") (ifseqformula "66"))
                                     (builtin "One Step Simplification" (formula "38"))
                                    (rule "cnf_rightDist" (formula "40") (term "0"))
                                    (rule "distr_forallAnd" (formula "40"))
                                    (rule "andLeft" (formula "40"))
                                    (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "38") (term "0,0,0"))
                                    (rule "replace_known_left" (formula "38") (term "1,0") (ifseqformula "16"))
                                     (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "68")))
                                    (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "39") (term "0,0,0") (inst "i=i") (inst "j=j_1"))
                                     (builtin "One Step Simplification" (formula "39"))
                                    (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,0,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "39") (term "1,0,0,1,0,0,1,0,0,0"))
                                    (rule "mul_literals" (formula "39") (term "0,1,0,0,1,0,0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "39") (term "0,0,1,0,0,1,0,0,0"))
                                    (rule "add_literals" (formula "39") (term "0,0,0,1,0,0,1,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "39") (term "1,0,0,1,0,0,0,0"))
                                    (rule "mul_literals" (formula "39") (term "0,1,0,0,1,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "39") (term "0,0,1,0,0,0,0"))
                                    (rule "add_literals" (formula "39") (term "0,0,0,1,0,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "39") (term "1,0,1,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,0,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0,1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "39") (term "1,1,0,0,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "39") (term "1,1,0,0,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1,0,0,1,0,0,0"))
                                    (rule "mul_literals" (formula "39") (term "0,1,1,0,0,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "39") (term "1,1,1,0,0,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "39") (term "1,1,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "39") (term "1,1,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1,0,0,0,0"))
                                    (rule "mul_literals" (formula "39") (term "0,1,1,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "39") (term "1,1,1,0,0,0,0"))
                                    (rule "nnf_imp2or" (formula "39") (term "0,0,0"))
                                    (rule "nnf_notAnd" (formula "39") (term "0,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "39") (term "1,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "39") (term "1,0,0,1,0,0,0,0"))
                                    (rule "mul_literals" (formula "39") (term "0,1,0,0,1,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "39") (term "0,0,1,0,0,0,0"))
                                    (rule "add_literals" (formula "39") (term "0,0,0,1,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "1,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "39") (term "1,1,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "39") (term "1,1,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1,0,0,0,0"))
                                    (rule "mul_literals" (formula "39") (term "0,1,1,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "39") (term "1,1,1,0,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "39") (term "0,0,0,0,0"))
                                    (rule "times_zero_1" (formula "39") (term "1,0,0,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "39") (term "0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "0,0,0,0,0"))
                                    (rule "mul_literals" (formula "39") (term "1,0,0,0,0,0"))
                                    (rule "nnf_imp2or" (formula "39") (term "0,1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "39") (term "0,0,1,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "39") (term "0,0,0,1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0,0,0,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "0,0,0,1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "39") (term "1,0,0,0,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,0,0,1,0,0,0"))
                                    (rule "mul_literals" (formula "39") (term "0,1,0,0,0,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "39") (term "1,1,0,0,0,1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "39") (term "1,0,0,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "39") (term "1,0,0,1,0,0,1,0,0,0"))
                                    (rule "mul_literals" (formula "39") (term "0,1,0,0,1,0,0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "39") (term "0,0,1,0,0,1,0,0,0"))
                                    (rule "add_literals" (formula "39") (term "0,0,0,1,0,0,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "1,0,0,1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "39") (term "1,1,0,0,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "39") (term "1,1,0,0,1,0,0,0"))
                                    (rule "mul_literals" (formula "39") (term "0,1,1,0,0,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1,0,0,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "39") (term "1,1,1,0,0,1,0,0,0"))
                                    (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "38") (term "0,0"))
                                    (rule "replace_known_left" (formula "38") (term "1,0") (ifseqformula "16"))
                                     (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "69")) (ifInst ""  (formula "39")))
                                    (rule "true_left" (formula "38"))
                                    (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "38") (term "0,0") (inst "i=i") (inst "j=j_1"))
                                     (builtin "One Step Simplification" (formula "38"))
                                    (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0,1,0,0"))
                                    (rule "add_literals" (formula "38") (term "0,0,0,1,0,0,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0,0"))
                                    (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0,0"))
                                    (rule "add_literals" (formula "38") (term "0,0,0,1,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "38") (term "1,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "38") (term "0,1,1,0,0,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0,0"))
                                    (rule "mul_literals" (formula "38") (term "0,1,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0,0"))
                                    (rule "nnf_imp2or" (formula "38") (term "0,0"))
                                    (rule "nnf_notAnd" (formula "38") (term "0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "38") (term "0,0,0,0"))
                                    (rule "mul_literals" (formula "38") (term "1,0,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "38") (term "0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0,0"))
                                    (rule "mul_literals" (formula "38") (term "1,0,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "38") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0,0"))
                                    (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0,0"))
                                    (rule "add_literals" (formula "38") (term "0,0,0,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0,0"))
                                    (rule "mul_literals" (formula "38") (term "0,1,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0,0"))
                                    (rule "nnf_imp2or" (formula "38") (term "0,1,0,0"))
                                    (rule "nnf_notAnd" (formula "38") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "38") (term "0,0,0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,0,0,0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "38") (term "0,1,0,0,0,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0,0,1,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "38") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0,1,0,0"))
                                    (rule "add_literals" (formula "38") (term "0,0,0,1,0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "38") (term "0,1,1,0,0,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0,1,0,0"))
                                    (rule "commute_or_2" (formula "42") (term "0"))
                                    (rule "cnf_rightDist" (formula "41") (term "0"))
                                    (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "38") (term "0,1"))
                                    (rule "replace_known_left" (formula "38") (term "1,0") (ifseqformula "16"))
                                     (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "69")))
                                    (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "39") (term "0,1") (inst "i=i"))
                                     (builtin "One Step Simplification" (formula "39"))
                                    (rule "translateJavaAddInt" (formula "39") (term "0,2,1,1,0,1"))
                                    (rule "translateJavaSubInt" (formula "39") (term "1,1,0,0,1"))
                                    (rule "polySimp_elimSub" (formula "39") (term "1,1,0,0,1"))
                                    (rule "mul_literals" (formula "39") (term "1,1,1,0,0,1"))
                                    (rule "polySimp_addComm0" (formula "39") (term "0,2,1,1,0,1"))
                                    (rule "polySimp_addComm1" (formula "39") (term "1,1,0,0,1"))
                                    (rule "add_literals" (formula "39") (term "0,1,1,0,0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,0,1"))
                                    (rule "polySimp_rightDist" (formula "39") (term "1,0,0,1,0,0,1"))
                                    (rule "mul_literals" (formula "39") (term "0,1,0,0,1,0,0,1"))
                                    (rule "polySimp_addAssoc" (formula "39") (term "0,0,1,0,0,1"))
                                    (rule "add_literals" (formula "39") (term "0,0,0,1,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "39") (term "1,0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "39") (term "1,1,0,0,1"))
                                    (rule "polySimp_rightDist" (formula "39") (term "1,1,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1,0,0,1"))
                                    (rule "mul_literals" (formula "39") (term "0,1,1,0,0,1"))
                                    (rule "polySimp_elimOne" (formula "39") (term "1,1,1,0,0,1"))
                                    (rule "nnf_imp2or" (formula "39") (term "0,1"))
                                    (rule "nnf_notAnd" (formula "39") (term "0,0,1"))
                                    (rule "inEqSimp_notLeq" (formula "39") (term "1,0,0,1"))
                                    (rule "polySimp_rightDist" (formula "39") (term "1,0,0,1,0,0,1"))
                                    (rule "mul_literals" (formula "39") (term "0,1,0,0,1,0,0,1"))
                                    (rule "polySimp_addAssoc" (formula "39") (term "0,0,1,0,0,1"))
                                    (rule "add_literals" (formula "39") (term "0,0,0,1,0,0,1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "1,0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "39") (term "1,1,0,0,1"))
                                    (rule "polySimp_rightDist" (formula "39") (term "1,1,0,0,1"))
                                    (rule "mul_literals" (formula "39") (term "0,1,1,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1,0,0,1"))
                                    (rule "polySimp_elimOne" (formula "39") (term "1,1,1,0,0,1"))
                                    (rule "inEqSimp_notGeq" (formula "39") (term "0,0,0,1"))
                                    (rule "mul_literals" (formula "39") (term "1,0,0,0,0,0,1"))
                                    (rule "add_zero_right" (formula "39") (term "0,0,0,0,0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "0,0,0,1"))
                                    (rule "mul_literals" (formula "39") (term "1,0,0,0,1"))
                                    (rule "distr_forallAnd" (formula "42"))
                                    (rule "andLeft" (formula "42"))
                                    (rule "cnf_rightDist" (formula "40") (term "0,1"))
                                    (rule "cnf_rightDist" (formula "40") (term "0,1,0"))
                                    (rule "all_pull_out3" (formula "41") (term "0"))
                                    (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "38") (term "0,1") (inst "i=i") (inst "j=j_1"))
                                     (builtin "One Step Simplification" (formula "38"))
                                    (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0,1,0,1"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0,1,0,1"))
                                    (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0,1,0,1"))
                                    (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0,1,0,1"))
                                    (rule "add_literals" (formula "38") (term "0,0,0,1,0,0,1,0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0,1"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0,1"))
                                    (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0,1"))
                                    (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0,1"))
                                    (rule "add_literals" (formula "38") (term "0,0,0,1,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0,1,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "38") (term "1,0,1,0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0,1,0,1"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0,1,0,1"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0,1,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0,1,0,1"))
                                    (rule "mul_literals" (formula "38") (term "0,1,1,0,0,1,0,1"))
                                    (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0,1,0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0,1"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0,1"))
                                    (rule "mul_literals" (formula "38") (term "0,1,1,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0,1"))
                                    (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0,1"))
                                    (rule "nnf_imp2or" (formula "38") (term "0,1"))
                                    (rule "nnf_notAnd" (formula "38") (term "0,0,1"))
                                    (rule "inEqSimp_notGeq" (formula "38") (term "0,0,0,1"))
                                    (rule "mul_literals" (formula "38") (term "1,0,0,0,0,0,1"))
                                    (rule "add_zero_right" (formula "38") (term "0,0,0,0,0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0,1"))
                                    (rule "mul_literals" (formula "38") (term "1,0,0,0,1"))
                                    (rule "inEqSimp_notLeq" (formula "38") (term "1,0,0,1"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0,1"))
                                    (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0,1"))
                                    (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0,1"))
                                    (rule "add_literals" (formula "38") (term "0,0,0,1,0,0,1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "1,0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0,1"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0,1"))
                                    (rule "mul_literals" (formula "38") (term "0,1,1,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0,1"))
                                    (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0,1"))
                                    (rule "nnf_imp2or" (formula "38") (term "0,1,0,1"))
                                    (rule "nnf_notAnd" (formula "38") (term "0,0,1,0,1"))
                                    (rule "inEqSimp_notGeq" (formula "38") (term "0,0,0,1,0,1"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,0,0,1,0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0,1,0,1"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,1,0,1"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,0,0,0,1,0,1"))
                                    (rule "mul_literals" (formula "38") (term "0,1,0,0,0,1,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0,0,1,0,1"))
                                    (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0,0,1,0,1"))
                                    (rule "inEqSimp_notLeq" (formula "38") (term "1,0,0,1,0,1"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0,1,0,1"))
                                    (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0,1,0,1"))
                                    (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0,1,0,1"))
                                    (rule "add_literals" (formula "38") (term "0,0,0,1,0,0,1,0,1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "1,0,0,1,0,1"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0,1,0,1"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0,1,0,1"))
                                    (rule "mul_literals" (formula "38") (term "0,1,1,0,0,1,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0,1,0,1"))
                                    (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0,1,0,1"))
                                    (rule "commute_or" (formula "44") (term "0,0"))
                                    (rule "all_pull_out1" (formula "37") (term "0,1,0"))
                                    (rule "commute_or" (formula "40") (term "0,0,1,0,0,0"))
                                    (rule "replace_known_left" (formula "40") (term "0,0") (ifseqformula "65"))
                                     (builtin "One Step Simplification" (formula "40"))
                                    (rule "true_left" (formula "40"))
                                    (rule "all_pull_out3" (formula "54") (term "0"))
                                    (rule "all_pull_out3" (formula "64") (term "0"))
                                    (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "38") (term "0,0"))
                                    (rule "replace_known_right" (formula "38") (term "0,0,0") (ifseqformula "70"))
                                     (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "16")))
                                    (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "39") (term "0,0") (inst "i=i"))
                                     (builtin "One Step Simplification" (formula "39"))
                                    (rule "translateJavaAddInt" (formula "39") (term "0,2,1,1,0,0"))
                                    (rule "translateJavaSubInt" (formula "39") (term "1,1,0,0,0"))
                                    (rule "polySimp_elimSub" (formula "39") (term "1,1,0,0,0"))
                                    (rule "mul_literals" (formula "39") (term "1,1,1,0,0,0"))
                                    (rule "polySimp_addComm0" (formula "39") (term "0,2,1,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "39") (term "1,1,0,0,0"))
                                    (rule "add_literals" (formula "39") (term "0,1,1,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "39") (term "1,0,0,1,0,0,0"))
                                    (rule "mul_literals" (formula "39") (term "0,1,0,0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "39") (term "0,0,1,0,0,0"))
                                    (rule "add_literals" (formula "39") (term "0,0,0,1,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "39") (term "1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "39") (term "1,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "39") (term "1,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1,0,0,0"))
                                    (rule "mul_literals" (formula "39") (term "0,1,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "39") (term "1,1,1,0,0,0"))
                                    (rule "nnf_imp2or" (formula "39") (term "0,0"))
                                    (rule "nnf_notAnd" (formula "39") (term "0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "39") (term "0,0,0,0"))
                                    (rule "times_zero_1" (formula "39") (term "1,0,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "39") (term "0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "0,0,0,0"))
                                    (rule "mul_literals" (formula "39") (term "1,0,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "39") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "39") (term "1,0,0,1,0,0,0"))
                                    (rule "mul_literals" (formula "39") (term "0,1,0,0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "39") (term "0,0,1,0,0,0"))
                                    (rule "add_literals" (formula "39") (term "0,0,0,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "39") (term "1,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "39") (term "1,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1,0,0,0"))
                                    (rule "mul_literals" (formula "39") (term "0,1,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "39") (term "1,1,1,0,0,0"))
                                    (rule "commute_or" (formula "43") (term "0"))
                                    (rule "commute_or" (formula "40") (term "0,0,1,0,0"))
                                    (rule "shift_paren_or" (formula "41") (term "0,0"))
                                    (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "38") (term "0,0"))
                                    (rule "replace_known_left" (formula "38") (term "1,0") (ifseqformula "16"))
                                     (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "71")) (ifInst ""  (formula "39")))
                                    (rule "true_left" (formula "38"))
                                    (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "38") (term "0,0") (inst "i=i"))
                                     (builtin "One Step Simplification" (formula "38"))
                                    (rule "translateJavaAddInt" (formula "38") (term "0,2,1,1,0,0"))
                                    (rule "translateJavaSubInt" (formula "38") (term "1,1,0,0,0"))
                                    (rule "polySimp_elimSub" (formula "38") (term "1,1,0,0,0"))
                                    (rule "mul_literals" (formula "38") (term "1,1,1,0,0,0"))
                                    (rule "polySimp_addComm0" (formula "38") (term "0,2,1,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "38") (term "1,1,0,0,0"))
                                    (rule "add_literals" (formula "38") (term "0,1,1,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0,0"))
                                    (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0,0"))
                                    (rule "add_literals" (formula "38") (term "0,0,0,1,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "38") (term "1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0,0"))
                                    (rule "mul_literals" (formula "38") (term "0,1,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0,0"))
                                    (rule "nnf_imp2or" (formula "38") (term "0,0"))
                                    (rule "nnf_notAnd" (formula "38") (term "0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "38") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0,0"))
                                    (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0,0"))
                                    (rule "add_literals" (formula "38") (term "0,0,0,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0,0"))
                                    (rule "mul_literals" (formula "38") (term "0,1,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "38") (term "0,0,0,0"))
                                    (rule "mul_literals" (formula "38") (term "1,0,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "38") (term "0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0,0"))
                                    (rule "mul_literals" (formula "38") (term "1,0,0,0,0"))
                                    (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "38") (term "0,1") (inst "i=i") (inst "j=j_1"))
                                     (builtin "One Step Simplification" (formula "38"))
                                    (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0,1"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0,1"))
                                    (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0,1"))
                                    (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0,1"))
                                    (rule "add_literals" (formula "38") (term "0,0,0,1,0,0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0,1,0,1"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0,1,0,1"))
                                    (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0,1,0,1"))
                                    (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0,1,0,1"))
                                    (rule "add_literals" (formula "38") (term "0,0,0,1,0,0,1,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "38") (term "1,0,1,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0,1,0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0,1"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0,1"))
                                    (rule "mul_literals" (formula "38") (term "0,1,1,0,0,1"))
                                    (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0,1,0,1"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0,1,0,1"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0,1,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0,1,0,1"))
                                    (rule "mul_literals" (formula "38") (term "0,1,1,0,0,1,0,1"))
                                    (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0,1,0,1"))
                                    (rule "nnf_imp2or" (formula "38") (term "0,1"))
                                    (rule "nnf_notAnd" (formula "38") (term "0,0,1"))
                                    (rule "inEqSimp_notLeq" (formula "38") (term "1,0,0,1"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0,1"))
                                    (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0,1"))
                                    (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0,1"))
                                    (rule "add_literals" (formula "38") (term "0,0,0,1,0,0,1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "1,0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0,1"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0,1"))
                                    (rule "mul_literals" (formula "38") (term "0,1,1,0,0,1"))
                                    (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0,1"))
                                    (rule "inEqSimp_notGeq" (formula "38") (term "0,0,0,1"))
                                    (rule "mul_literals" (formula "38") (term "1,0,0,0,0,0,1"))
                                    (rule "add_zero_right" (formula "38") (term "0,0,0,0,0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0,1"))
                                    (rule "mul_literals" (formula "38") (term "1,0,0,0,1"))
                                    (rule "nnf_imp2or" (formula "38") (term "0,1,0,1"))
                                    (rule "nnf_notAnd" (formula "38") (term "0,0,1,0,1"))
                                    (rule "inEqSimp_notGeq" (formula "38") (term "0,0,0,1,0,1"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,0,0,1,0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0,1,0,1"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,1,0,1"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,0,0,0,1,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0,0,1,0,1"))
                                    (rule "mul_literals" (formula "38") (term "0,1,0,0,0,1,0,1"))
                                    (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0,0,1,0,1"))
                                    (rule "inEqSimp_notLeq" (formula "38") (term "1,0,0,1,0,1"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0,1,0,1"))
                                    (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0,1,0,1"))
                                    (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0,1,0,1"))
                                    (rule "add_literals" (formula "38") (term "0,0,0,1,0,0,1,0,1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "1,0,0,1,0,1"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0,1,0,1"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0,1,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0,1,0,1"))
                                    (rule "mul_literals" (formula "38") (term "0,1,1,0,0,1,0,1"))
                                    (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0,1,0,1"))
                                    (rule "shift_paren_or" (formula "54") (term "0,0"))
                                    (rule "shift_paren_or" (formula "64") (term "0,0"))
                                    (rule "commute_or" (formula "38") (term "0,0,1,0,1"))
                                    (rule "shift_paren_or" (formula "40") (term "0,0,0"))
                                    (rule "impLeft" (formula "39"))
                                    (branch
                                       (rule "allRight" (formula "67") (inst "sk=i_0"))
                                       (rule "cutUpperBound" (formula "67") (ifseqformula "42"))
                                       (branch
                                          (rule "crossInst" (formula "43") (inst "sk=b_1") (ifseqformula "68"))
                                          (rule "orRight" (formula "69"))
                                          (rule "andLeft" (formula "43"))
                                          (rule "orRight" (formula "70"))
                                          (rule "allRight" (formula "72") (inst "sk=j_1_0"))
                                          (rule "orRight" (formula "72"))
                                          (rule "orRight" (formula "72"))
                                          (rule "eqSymm" (formula "43"))
                                          (rule "inEqSimp_geqRight" (formula "71"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                          (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0,0"))
                                          (rule "inEqSimp_leqRight" (formula "71"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "inEqSimp_geqRight" (formula "74"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "inEqSimp_geqRight" (formula "73"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                          (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0,0"))
                                          (rule "inEqSimp_leqRight" (formula "74"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                          (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0,0"))
                                          (rule "applyEqRigid" (formula "4") (term "0") (ifseqformula "6"))
                                          (rule "applyEqRigid" (formula "5") (term "1,0") (ifseqformula "48"))
                                          (rule "applyEqRigid" (formula "6") (term "0") (ifseqformula "48"))
                                          (rule "applyEq" (formula "5") (term "1,0") (ifseqformula "6"))
                                          (rule "polySimp_addAssoc" (formula "5") (term "0"))
                                          (rule "polySimp_addComm1" (formula "5") (term "0,0"))
                                          (rule "add_literals" (formula "5") (term "0,0,0"))
                                          (rule "polySimp_pullOutFactor2b" (formula "5") (term "0"))
                                          (rule "add_literals" (formula "5") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "5") (term "1,0"))
                                          (rule "add_zero_right" (formula "5") (term "0"))
                                          (rule "leq_literals" (formula "5"))
                                          (rule "closeFalse" (formula "5"))
                                       )
                                       (branch
                                          (rule "crossInst" (formula "43") (inst "sk=b_1") (ifseqformula "68"))
                                          (rule "orRight" (formula "69"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "andLeft" (formula "42"))
                                          (rule "orRight" (formula "70"))
                                          (rule "allRight" (formula "72") (inst "sk=j_1_0"))
                                          (rule "orRight" (formula "72"))
                                          (rule "orRight" (formula "72"))
                                          (rule "eqSymm" (formula "42"))
                                          (rule "inEqSimp_geqRight" (formula "71"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                          (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0,0"))
                                          (rule "inEqSimp_leqRight" (formula "71"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "inEqSimp_geqRight" (formula "74"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "inEqSimp_geqRight" (formula "73"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                          (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0,0"))
                                          (rule "inEqSimp_leqRight" (formula "74"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                          (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0,0"))
                                          (rule "applyEq" (formula "5") (term "1,0") (ifseqformula "47"))
                                          (rule "applyEq" (formula "4") (term "0") (ifseqformula "47"))
                                          (rule "applyEqRigid" (formula "74") (term "0") (ifseqformula "47"))
                                          (rule "applyEqRigid" (formula "3") (term "0,2,0,1,0,0") (ifseqformula "47"))
                                          (rule "applyEqRigid" (formula "1") (term "0,0,0") (ifseqformula "47"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                          (rule "polySimp_rightDist" (formula "2") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                          (rule "mul_literals" (formula "2") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                          (rule "polySimp_mulComm0" (formula "5") (term "1"))
                                          (rule "polySimp_rightDist" (formula "5") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                                          (rule "mul_literals" (formula "5") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                                          (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                          (rule "polySimp_rightDist" (formula "3") (term "1"))
                                          (rule "mul_literals" (formula "3") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                          (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1"))
                                          (rule "inEqSimp_contradEq3" (formula "74") (ifseqformula "5"))
                                          (rule "polySimp_rightDist" (formula "74") (term "1,0,0"))
                                          (rule "mul_literals" (formula "74") (term "0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "74") (term "0,0"))
                                          (rule "polySimp_addComm1" (formula "74") (term "0,0,0"))
                                          (rule "add_literals" (formula "74") (term "0,0,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "74") (term "0,0"))
                                          (rule "add_literals" (formula "74") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "74") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "74") (term "0,0"))
                                          (rule "qeq_literals" (formula "74") (term "0"))
                                           (builtin "One Step Simplification" (formula "74"))
                                          (rule "false_right" (formula "74"))
                                          (rule "inEqSimp_contradInEq1" (formula "48") (term "0,0,0") (ifseqformula "4"))
                                          (rule "qeq_literals" (formula "48") (term "0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "48"))
                                          (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "5"))
                                          (rule "mul_literals" (formula "4") (term "0,0"))
                                          (rule "add_zero_left" (formula "4") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                          (rule "mul_literals" (formula "4") (term "1"))
                                          (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                          (rule "polySimp_addComm0" (formula "1") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "0"))
                                          (rule "allLeft" (formula "18") (inst "t=add(Z(neglit(1(#))), l_1)"))
                                          (rule "polySimp_addAssoc" (formula "18") (term "0,2,0,1"))
                                          (rule "add_literals" (formula "18") (term "0,0,2,0,1"))
                                          (rule "add_zero_left" (formula "18") (term "0,2,0,1"))
                                          (rule "inEqSimp_commuteGeq" (formula "18") (term "1"))
                                          (rule "inEqSimp_homoInEq1" (formula "18") (term "1,0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "1,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "18") (term "1,0,1,0"))
                                          (rule "mul_literals" (formula "18") (term "0,1,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "18") (term "0,1,0"))
                                          (rule "polySimp_addComm1" (formula "18") (term "0,0,1,0"))
                                          (rule "add_literals" (formula "18") (term "0,0,0,1,0"))
                                          (rule "add_zero_left" (formula "18") (term "0,0,1,0"))
                                          (rule "polySimp_pullOutFactor0" (formula "18") (term "0,1,0"))
                                          (rule "add_literals" (formula "18") (term "1,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "18") (term "0,1,0"))
                                          (rule "inEqSimp_homoInEq0" (formula "18") (term "0,0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0"))
                                          (rule "mul_literals" (formula "18") (term "0,1,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "18") (term "0,0,0"))
                                          (rule "add_literals" (formula "18") (term "0,0,0,0"))
                                          (rule "add_zero_left" (formula "18") (term "0,0,0"))
                                          (rule "inEqSimp_invertInEq1" (formula "18") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "18") (term "0,0,0"))
                                          (rule "times_zero_2" (formula "18") (term "1,0,0"))
                                          (rule "polySimp_elimOne" (formula "18") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "18"))
                                          (rule "inEqSimp_contradInEq1" (formula "18") (term "0") (ifseqformula "67"))
                                          (rule "qeq_literals" (formula "18") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "18"))
                                          (rule "pullOutSelect" (formula "18") (term "0") (inst "selectSK=arr_5"))
                                          (rule "simplifySelectOfAnon" (formula "18"))
                                           (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "97")) (ifInst ""  (formula "27")))
                                          (rule "elementOfArrayRangeConcrete" (formula "18") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "18"))
                                          (rule "inEqSimp_commuteLeq" (formula "19"))
                                          (rule "inEqSimp_homoInEq0" (formula "18") (term "0,0,0"))
                                          (rule "mul_literals" (formula "18") (term "1,0,0,0,0"))
                                          (rule "add_zero_right" (formula "18") (term "0,0,0,0"))
                                          (rule "inEqSimp_homoInEq0" (formula "18") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "1,0,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "18") (term "1,0,1,0,0"))
                                          (rule "mul_literals" (formula "18") (term "0,1,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "18") (term "0,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "18") (term "0,0,1,0,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "18") (term "0,1,0,0"))
                                          (rule "add_literals" (formula "18") (term "1,1,0,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "18") (term "1,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "0,0,0"))
                                          (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
                                          (rule "mul_literals" (formula "18") (term "1,1,0,0"))
                                          (rule "inEqSimp_subsumption1" (formula "18") (term "1,0,0") (ifseqformula "68"))
                                          (rule "leq_literals" (formula "18") (term "0,1,0,0"))
                                           (builtin "One Step Simplification" (formula "18"))
                                          (rule "inEqSimp_subsumption1" (formula "18") (term "0,0") (ifseqformula "68"))
                                          (rule "leq_literals" (formula "18") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "18"))
                                          (rule "applyEqReverse" (formula "19") (term "1") (ifseqformula "18"))
                                          (rule "hideAuxiliaryEq" (formula "18"))
                                          (rule "pullOutSelect" (formula "18") (term "0") (inst "selectSK=arr_6"))
                                          (rule "simplifySelectOfAnon" (formula "18"))
                                           (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "97")) (ifInst ""  (formula "27")))
                                          (rule "elementOfArrayRangeConcrete" (formula "18") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "18"))
                                          (rule "inEqSimp_commuteGeq" (formula "19"))
                                          (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                                          (rule "inEqSimp_homoInEq0" (formula "18") (term "1,0,0"))
                                          (rule "polySimp_pullOutFactor0" (formula "18") (term "0,1,0,0"))
                                          (rule "add_literals" (formula "18") (term "1,0,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "18") (term "0,1,0,0"))
                                           (builtin "One Step Simplification" (formula "18"))
                                          (rule "inEqSimp_subsumption1" (formula "18") (term "0,0") (ifseqformula "68"))
                                          (rule "leq_literals" (formula "18") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "18"))
                                          (rule "applyEqReverse" (formula "19") (term "1") (ifseqformula "18"))
                                          (rule "hideAuxiliaryEq" (formula "18"))
                                          (rule "allLeft" (formula "60") (inst "t=add(Z(neglit(2(#))), l_1)"))
                                          (rule "polySimp_addAssoc" (formula "60") (term "0,2,0,1"))
                                          (rule "add_literals" (formula "60") (term "0,0,2,0,1"))
                                          (rule "inEqSimp_commuteGeq" (formula "60") (term "1"))
                                          (rule "inEqSimp_homoInEq1" (formula "60") (term "1,0"))
                                          (rule "polySimp_mulComm0" (formula "60") (term "1,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "60") (term "1,0,1,0"))
                                          (rule "mul_literals" (formula "60") (term "0,1,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "60") (term "0,1,0"))
                                          (rule "polySimp_addComm1" (formula "60") (term "0,0,1,0"))
                                          (rule "add_literals" (formula "60") (term "0,0,0,1,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "60") (term "0,1,0"))
                                          (rule "add_literals" (formula "60") (term "1,1,0,1,0"))
                                          (rule "times_zero_1" (formula "60") (term "1,0,1,0"))
                                          (rule "add_zero_right" (formula "60") (term "0,1,0"))
                                          (rule "leq_literals" (formula "60") (term "1,0"))
                                           (builtin "One Step Simplification" (formula "60"))
                                          (rule "inEqSimp_homoInEq0" (formula "60") (term "0"))
                                          (rule "polySimp_mulComm0" (formula "60") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "60") (term "1,0,0"))
                                          (rule "mul_literals" (formula "60") (term "0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "60") (term "0,0"))
                                          (rule "add_literals" (formula "60") (term "0,0,0"))
                                          (rule "applyEq" (formula "60") (term "0,1") (ifseqformula "63"))
                                          (rule "inEqSimp_homoInEq0" (formula "60") (term "1"))
                                          (rule "polySimp_pullOutFactor1" (formula "60") (term "0,1"))
                                          (rule "add_literals" (formula "60") (term "1,0,1"))
                                          (rule "times_zero_1" (formula "60") (term "0,1"))
                                          (rule "qeq_literals" (formula "60") (term "1"))
                                           (builtin "One Step Simplification" (formula "60"))
                                          (rule "true_left" (formula "60"))
                                          (rule "allLeft" (formula "60") (inst "t=Z(0(#))"))
                                          (rule "add_literals" (formula "60") (term "0,2,0,1"))
                                          (rule "leq_literals" (formula "60") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "60"))
                                          (rule "inEqSimp_homoInEq1" (formula "60") (term "0"))
                                          (rule "times_zero_2" (formula "60") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "60") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "60") (term "0"))
                                          (rule "mul_literals" (formula "60") (term "1,0"))
                                          (rule "inEqSimp_contradInEq1" (formula "60") (term "0") (ifseqformula "68"))
                                          (rule "qeq_literals" (formula "60") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "60"))
                                          (rule "allLeft" (formula "19") (inst "t=b_0"))
                                          (rule "inEqSimp_contradInEq0" (formula "19") (term "1,0") (ifseqformula "9"))
                                          (rule "inEqSimp_homoInEq1" (formula "19") (term "0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0"))
                                          (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0"))
                                          (rule "polySimp_addComm1" (formula "19") (term "0,0,0,1,0"))
                                          (rule "add_literals" (formula "19") (term "0,0,0,0,1,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "19") (term "0,0,1,0"))
                                          (rule "add_literals" (formula "19") (term "1,1,0,0,1,0"))
                                          (rule "times_zero_1" (formula "19") (term "1,0,0,1,0"))
                                          (rule "add_literals" (formula "19") (term "0,0,1,0"))
                                          (rule "leq_literals" (formula "19") (term "0,1,0"))
                                           (builtin "One Step Simplification" (formula "19"))
                                          (rule "inEqSimp_contradInEq1" (formula "19") (term "0") (ifseqformula "7"))
                                          (rule "qeq_literals" (formula "19") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "19"))
                                          (rule "pullOutSelect" (formula "19") (term "0") (inst "selectSK=arr_7"))
                                          (rule "simplifySelectOfAnon" (formula "19"))
                                           (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "99")) (ifInst ""  (formula "28")))
                                          (rule "elementOfArrayRangeConcrete" (formula "19") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "19"))
                                          (rule "inEqSimp_commuteGeq" (formula "20"))
                                          (rule "inEqSimp_homoInEq0" (formula "19") (term "0,0,0"))
                                          (rule "mul_literals" (formula "19") (term "1,0,0,0,0"))
                                          (rule "add_zero_right" (formula "19") (term "0,0,0,0"))
                                          (rule "inEqSimp_homoInEq0" (formula "19") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "1,0,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "19") (term "1,0,1,0,0"))
                                          (rule "mul_literals" (formula "19") (term "0,1,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "19") (term "0,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "19") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "0,0,0"))
                                          (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "19") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "19") (term "0,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "19") (term "0,1,0,0"))
                                          (rule "inEqSimp_subsumption1" (formula "19") (term "0,0,0") (ifseqformula "7"))
                                          (rule "leq_literals" (formula "19") (term "0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "19"))
                                          (rule "inEqSimp_subsumption0" (formula "19") (term "0,0") (ifseqformula "9"))
                                          (rule "inEqSimp_homoInEq0" (formula "19") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,0"))
                                          (rule "mul_literals" (formula "19") (term "0,1,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "19") (term "0,0,0,0"))
                                          (rule "polySimp_addComm1" (formula "19") (term "0,0,0,0,0"))
                                          (rule "add_literals" (formula "19") (term "0,0,0,0,0,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "19") (term "0,0,0,0"))
                                          (rule "add_literals" (formula "19") (term "1,1,0,0,0,0"))
                                          (rule "times_zero_1" (formula "19") (term "1,0,0,0,0"))
                                          (rule "add_literals" (formula "19") (term "0,0,0,0"))
                                          (rule "qeq_literals" (formula "19") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "19"))
                                          (rule "applyEqReverse" (formula "20") (term "1") (ifseqformula "19"))
                                          (rule "hideAuxiliaryEq" (formula "19"))
                                          (rule "pullOutSelect" (formula "19") (term "0") (inst "selectSK=arr_8"))
                                          (rule "simplifySelectOfAnon" (formula "19"))
                                           (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "99")) (ifInst ""  (formula "28")))
                                          (rule "elementOfArrayRangeConcrete" (formula "19") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "19"))
                                          (rule "inEqSimp_commuteLeq" (formula "20"))
                                          (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                                          (rule "replace_known_left" (formula "19") (term "0,0,0") (ifseqformula "7"))
                                           (builtin "One Step Simplification" (formula "19"))
                                          (rule "inEqSimp_subsumption0" (formula "19") (term "0,0") (ifseqformula "9"))
                                          (rule "inEqSimp_homoInEq0" (formula "19") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,0,0"))
                                          (rule "mul_literals" (formula "19") (term "0,1,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "19") (term "0,0,0,0"))
                                          (rule "polySimp_addComm0" (formula "19") (term "0,0,0,0,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "19") (term "0,0,0,0"))
                                          (rule "add_literals" (formula "19") (term "1,1,0,0,0,0"))
                                          (rule "times_zero_1" (formula "19") (term "1,0,0,0,0"))
                                          (rule "add_literals" (formula "19") (term "0,0,0,0"))
                                          (rule "qeq_literals" (formula "19") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "19"))
                                          (rule "applyEqReverse" (formula "20") (term "1") (ifseqformula "19"))
                                          (rule "hideAuxiliaryEq" (formula "19"))
                                          (rule "allLeft" (formula "20") (inst "t=add(Z(neglit(2(#))), l_1)"))
                                          (rule "polySimp_addAssoc" (formula "20") (term "0,2,0,1"))
                                          (rule "add_literals" (formula "20") (term "0,0,2,0,1"))
                                          (rule "replaceKnownSelect_taclet10010100012011_11" (formula "20") (term "0,1"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet10010100012011_12" (formula "20") (term "0,1"))
                                          (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
                                          (rule "inEqSimp_homoInEq1" (formula "20") (term "1,0"))
                                          (rule "polySimp_mulComm0" (formula "20") (term "1,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "20") (term "1,0,1,0"))
                                          (rule "mul_literals" (formula "20") (term "0,1,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "20") (term "0,1,0"))
                                          (rule "polySimp_addComm1" (formula "20") (term "0,0,1,0"))
                                          (rule "add_literals" (formula "20") (term "0,0,0,1,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "20") (term "0,1,0"))
                                          (rule "add_literals" (formula "20") (term "1,1,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "20") (term "1,0,1,0"))
                                          (rule "inEqSimp_homoInEq0" (formula "20") (term "0,0"))
                                          (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0"))
                                          (rule "mul_literals" (formula "20") (term "0,1,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "20") (term "0,0,0"))
                                          (rule "add_literals" (formula "20") (term "0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0"))
                                          (rule "mul_literals" (formula "20") (term "1,1,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "20") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "20") (term "0,0,0"))
                                          (rule "polySimp_elimOne" (formula "20") (term "0,0,0"))
                                          (rule "inEqSimp_contradInEq1" (formula "20") (term "1,0") (ifseqformula "70"))
                                          (rule "qeq_literals" (formula "20") (term "0,1,0"))
                                           (builtin "One Step Simplification" (formula "20"))
                                          (rule "inEqSimp_contradInEq1" (formula "20") (term "0") (ifseqformula "70"))
                                          (rule "qeq_literals" (formula "20") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "20"))
                                          (rule "pullOutSelect" (formula "20") (term "0") (inst "selectSK=arr_9"))
                                          (rule "simplifySelectOfAnon" (formula "20"))
                                           (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "100")) (ifInst ""  (formula "29")))
                                          (rule "elementOfArrayRangeConcrete" (formula "20") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "20"))
                                          (rule "inEqSimp_commuteLeq" (formula "21"))
                                          (rule "inEqSimp_homoInEq0" (formula "20") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "20") (term "1,0,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "20") (term "1,0,1,0,0"))
                                          (rule "mul_literals" (formula "20") (term "0,1,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "20") (term "0,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "20") (term "0,0,1,0,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "20") (term "0,1,0,0"))
                                          (rule "add_literals" (formula "20") (term "1,1,0,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "20") (term "1,0,1,0,0"))
                                          (rule "inEqSimp_homoInEq0" (formula "20") (term "0,0,0"))
                                          (rule "mul_literals" (formula "20") (term "1,0,0,0,0"))
                                          (rule "add_zero_right" (formula "20") (term "0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                                          (rule "mul_literals" (formula "20") (term "1,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "0,0,0"))
                                          (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                                          (rule "replace_known_left" (formula "20") (term "0,0,0") (ifseqformula "71"))
                                           (builtin "One Step Simplification" (formula "20"))
                                          (rule "inEqSimp_subsumption1" (formula "20") (term "0,0") (ifseqformula "71"))
                                          (rule "leq_literals" (formula "20") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "20"))
                                          (rule "applyEqReverse" (formula "21") (term "1") (ifseqformula "20"))
                                          (rule "hideAuxiliaryEq" (formula "20"))
                                          (rule "inEqSimp_commuteGeq" (formula "20"))
                                          (rule "allLeft" (formula "77") (inst "t=b_0"))
                                          (rule "inEqSimp_contradInEq0" (formula "77") (term "1,0") (ifseqformula "9"))
                                          (rule "inEqSimp_homoInEq1" (formula "77") (term "0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "77") (term "1,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "77") (term "1,0,0,1,0"))
                                          (rule "mul_literals" (formula "77") (term "0,1,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "77") (term "1,1,0,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "77") (term "0,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "77") (term "0,0,0,1,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "77") (term "0,0,1,0"))
                                          (rule "add_literals" (formula "77") (term "1,1,0,0,1,0"))
                                          (rule "times_zero_1" (formula "77") (term "1,0,0,1,0"))
                                          (rule "add_literals" (formula "77") (term "0,0,1,0"))
                                          (rule "leq_literals" (formula "77") (term "0,1,0"))
                                           (builtin "One Step Simplification" (formula "77"))
                                          (rule "inEqSimp_contradInEq1" (formula "77") (term "0") (ifseqformula "7"))
                                          (rule "qeq_literals" (formula "77") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "77"))
                                          (rule "pullOutSelect" (formula "77") (term "1") (inst "selectSK=arr_10"))
                                          (rule "simplifySelectOfStore" (formula "77"))
                                           (builtin "One Step Simplification" (formula "77"))
                                          (rule "replaceKnownSelect_taclet10010100012011_17" (formula "77") (term "2,0"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet10010100012011_18" (formula "77") (term "2,0"))
                                          (rule "castDel" (formula "77") (term "1,0"))
                                          (rule "eqSymm" (formula "77") (term "0,0"))
                                          (rule "inEqSimp_contradEq3" (formula "77") (term "0,0") (ifseqformula "9"))
                                          (rule "polySimp_mulAssoc" (formula "77") (term "1,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "77") (term "0,1,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "77") (term "1,0,0,0,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "77") (term "0,0,0,0"))
                                          (rule "add_literals" (formula "77") (term "1,1,0,0,0,0"))
                                          (rule "times_zero_1" (formula "77") (term "1,0,0,0,0"))
                                          (rule "add_literals" (formula "77") (term "0,0,0,0"))
                                          (rule "qeq_literals" (formula "77") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "77"))
                                          (rule "applyEqReverse" (formula "78") (term "1") (ifseqformula "77"))
                                          (rule "hideAuxiliaryEq" (formula "77"))
                                          (rule "pullOutSelect" (formula "77") (term "0") (inst "selectSK=arr_11"))
                                          (rule "simplifySelectOfStore" (formula "77"))
                                           (builtin "One Step Simplification" (formula "77"))
                                          (rule "replaceKnownSelect_taclet10010100012011_15" (formula "77") (term "2,0"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet10010100012011_16" (formula "77") (term "2,0"))
                                          (rule "castDel" (formula "77") (term "1,0"))
                                          (rule "polySimp_homoEq" (formula "77") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "77") (term "1,0,0,0"))
                                          (rule "polySimp_addComm1" (formula "77") (term "0,0,0"))
                                          (rule "inEqSimp_commuteGeq" (formula "78"))
                                          (rule "polySimp_sepPosMonomial" (formula "77") (term "0,0"))
                                          (rule "polySimp_mulComm0" (formula "77") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "77") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "77") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "77") (term "0,1,0,0"))
                                          (rule "inEqSimp_contradEq3" (formula "77") (term "0,0") (ifseqformula "9"))
                                          (rule "polySimp_rightDist" (formula "77") (term "1,0,0,0,0"))
                                          (rule "mul_literals" (formula "77") (term "0,1,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "77") (term "1,1,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "77") (term "0,0,0,0"))
                                          (rule "polySimp_addComm1" (formula "77") (term "0,0,0,0,0"))
                                          (rule "add_literals" (formula "77") (term "0,0,0,0,0,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "77") (term "0,0,0,0"))
                                          (rule "add_literals" (formula "77") (term "1,1,0,0,0,0"))
                                          (rule "times_zero_1" (formula "77") (term "1,0,0,0,0"))
                                          (rule "add_literals" (formula "77") (term "0,0,0,0"))
                                          (rule "qeq_literals" (formula "77") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "77"))
                                          (rule "applyEqReverse" (formula "78") (term "1") (ifseqformula "77"))
                                          (rule "hideAuxiliaryEq" (formula "77"))
                                          (rule "inEqSimp_commuteLeq" (formula "77"))
                                          (rule "allLeft" (formula "34") (inst "t=b_0"))
                                          (rule "inEqSimp_contradInEq0" (formula "34") (term "1,0") (ifseqformula "9"))
                                          (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "34") (term "0,0,0,1,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "34") (term "0,0,1,0"))
                                          (rule "add_literals" (formula "34") (term "1,1,0,0,1,0"))
                                          (rule "times_zero_1" (formula "34") (term "1,0,0,1,0"))
                                          (rule "add_literals" (formula "34") (term "0,0,1,0"))
                                          (rule "leq_literals" (formula "34") (term "0,1,0"))
                                           (builtin "One Step Simplification" (formula "34"))
                                          (rule "inEqSimp_contradInEq1" (formula "34") (term "0") (ifseqformula "7"))
                                          (rule "qeq_literals" (formula "34") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "34"))
                                          (rule "allLeft" (formula "35") (inst "t=add(Z(1(#)), b_0)"))
                                          (rule "inEqSimp_homoInEq1" (formula "35") (term "1,0"))
                                          (rule "polySimp_mulComm0" (formula "35") (term "1,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "35") (term "1,0,1,0"))
                                          (rule "mul_literals" (formula "35") (term "0,1,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "35") (term "0,1,0"))
                                          (rule "polySimp_addComm0" (formula "35") (term "0,0,1,0"))
                                          (rule "inEqSimp_homoInEq0" (formula "35") (term "0,0"))
                                          (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "35") (term "1,0,0,0"))
                                          (rule "mul_literals" (formula "35") (term "0,1,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "35") (term "0,0,0"))
                                          (rule "add_literals" (formula "35") (term "0,0,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "35") (term "1,0"))
                                          (rule "polySimp_mulLiterals" (formula "35") (term "0,1,0"))
                                          (rule "polySimp_elimOne" (formula "35") (term "0,1,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "35") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "35") (term "0,0,0"))
                                          (rule "polySimp_elimOne" (formula "35") (term "0,0,0"))
                                          (rule "inEqSimp_contradInEq0" (formula "35") (term "1,0") (ifseqformula "9"))
                                          (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0"))
                                          (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0"))
                                          (rule "polySimp_addComm1" (formula "35") (term "0,0,0,1,0"))
                                          (rule "add_literals" (formula "35") (term "0,0,0,0,1,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "35") (term "0,0,1,0"))
                                          (rule "add_literals" (formula "35") (term "1,1,0,0,1,0"))
                                          (rule "times_zero_1" (formula "35") (term "1,0,0,1,0"))
                                          (rule "add_literals" (formula "35") (term "0,0,1,0"))
                                          (rule "leq_literals" (formula "35") (term "0,1,0"))
                                           (builtin "One Step Simplification" (formula "35"))
                                          (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "7"))
                                          (rule "qeq_literals" (formula "35") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "35"))
                                          (rule "allLeft" (formula "79") (inst "t=add(Z(1(#)), b_0)"))
                                          (rule "replaceKnownSelect_taclet10010100012011_23" (formula "79") (term "1,1"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet10010100012011_24" (formula "79") (term "1,1"))
                                          (rule "polySimp_addAssoc" (formula "79") (term "0,2,0,1"))
                                          (rule "add_literals" (formula "79") (term "0,0,2,0,1"))
                                          (rule "inEqSimp_homoInEq0" (formula "79") (term "0,0"))
                                          (rule "polySimp_mulComm0" (formula "79") (term "1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "79") (term "1,0,0,0"))
                                          (rule "mul_literals" (formula "79") (term "0,1,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "79") (term "0,0,0"))
                                          (rule "add_literals" (formula "79") (term "0,0,0,0"))
                                          (rule "inEqSimp_homoInEq1" (formula "79") (term "1,0"))
                                          (rule "polySimp_mulComm0" (formula "79") (term "1,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "79") (term "1,0,1,0"))
                                          (rule "mul_literals" (formula "79") (term "0,1,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "79") (term "0,1,0"))
                                          (rule "polySimp_addComm0" (formula "79") (term "0,0,1,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "79") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "79") (term "0,0,0"))
                                          (rule "polySimp_elimOne" (formula "79") (term "0,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "79") (term "1,0"))
                                          (rule "polySimp_mulLiterals" (formula "79") (term "0,1,0"))
                                          (rule "polySimp_elimOne" (formula "79") (term "0,1,0"))
                                          (rule "inEqSimp_contradInEq0" (formula "79") (term "1,0") (ifseqformula "9"))
                                          (rule "inEqSimp_homoInEq1" (formula "79") (term "0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "79") (term "1,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "79") (term "1,0,0,1,0"))
                                          (rule "mul_literals" (formula "79") (term "0,1,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "79") (term "1,1,0,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "79") (term "0,0,1,0"))
                                          (rule "polySimp_addComm1" (formula "79") (term "0,0,0,1,0"))
                                          (rule "add_literals" (formula "79") (term "0,0,0,0,1,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "79") (term "0,0,1,0"))
                                          (rule "add_literals" (formula "79") (term "1,1,0,0,1,0"))
                                          (rule "times_zero_1" (formula "79") (term "1,0,0,1,0"))
                                          (rule "add_literals" (formula "79") (term "0,0,1,0"))
                                          (rule "leq_literals" (formula "79") (term "0,1,0"))
                                           (builtin "One Step Simplification" (formula "79"))
                                          (rule "inEqSimp_contradInEq1" (formula "79") (term "0") (ifseqformula "7"))
                                          (rule "qeq_literals" (formula "79") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "79"))
                                          (rule "pullOutSelect" (formula "79") (term "0") (inst "selectSK=arr_12"))
                                          (rule "simplifySelectOfStore" (formula "79"))
                                           (builtin "One Step Simplification" (formula "79"))
                                          (rule "castDel" (formula "79") (term "1,0"))
                                          (rule "polySimp_homoEq" (formula "79") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "79") (term "1,0,0,0"))
                                          (rule "polySimp_addComm1" (formula "79") (term "0,0,0"))
                                          (rule "inEqSimp_commuteGeq" (formula "80"))
                                          (rule "polySimp_sepPosMonomial" (formula "79") (term "0,0"))
                                          (rule "polySimp_mulComm0" (formula "79") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "79") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "79") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "79") (term "0,1,0,0"))
                                          (rule "pullOutSelect" (formula "79") (term "2,0") (inst "selectSK=arr_13"))
                                          (rule "simplifySelectOfAnon" (formula "79"))
                                           (builtin "One Step Simplification" (formula "79") (ifInst ""  (formula "104")) (ifInst ""  (formula "28")))
                                          (rule "elementOfArrayRangeConcrete" (formula "79") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "79"))
                                          (rule "inEqSimp_homoInEq0" (formula "79") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "79") (term "1,0,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "79") (term "1,0,1,0,0"))
                                          (rule "mul_literals" (formula "79") (term "0,1,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "79") (term "0,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "79") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_homoInEq0" (formula "79") (term "0,0,0"))
                                          (rule "mul_literals" (formula "79") (term "1,0,0,0,0"))
                                          (rule "add_zero_right" (formula "79") (term "0,0,0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "79") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "79") (term "0,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "79") (term "0,1,0,0"))
                                          (rule "replace_known_left" (formula "79") (term "1,0,0") (ifseqformula "9"))
                                           (builtin "One Step Simplification" (formula "79"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "79") (term "0,0"))
                                          (rule "mul_literals" (formula "79") (term "1,0,0"))
                                          (rule "inEqSimp_subsumption1" (formula "79") (term "0,0") (ifseqformula "7"))
                                          (rule "leq_literals" (formula "79") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "79"))
                                          (rule "applyEqReverse" (formula "80") (term "2,0") (ifseqformula "79"))
                                          (rule "hideAuxiliaryEq" (formula "79"))
                                          (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "80"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "0,0"))
                                          (rule "polySimp_addComm0" (formula "19") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "19"))
                                          (rule "polySimp_mulLiterals" (formula "19") (term "0"))
                                          (rule "polySimp_elimOne" (formula "19") (term "0"))
                                          (rule "allLeft" (formula "37") (inst "t=add(Z(neglit(1(#))), l_1)"))
                                          (rule "inEqSimp_homoInEq0" (formula "37") (term "0,0"))
                                          (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "37") (term "1,0,0,0"))
                                          (rule "mul_literals" (formula "37") (term "0,1,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "37") (term "0,0,0"))
                                          (rule "add_literals" (formula "37") (term "0,0,0,0"))
                                          (rule "add_zero_left" (formula "37") (term "0,0,0"))
                                          (rule "inEqSimp_homoInEq1" (formula "37") (term "1,0"))
                                          (rule "polySimp_mulComm0" (formula "37") (term "1,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "37") (term "1,0,1,0"))
                                          (rule "mul_literals" (formula "37") (term "0,1,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "37") (term "0,1,0"))
                                          (rule "polySimp_addComm0" (formula "37") (term "0,0,1,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "37") (term "0,1,0"))
                                          (rule "add_literals" (formula "37") (term "1,1,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "37") (term "1,0,1,0"))
                                          (rule "inEqSimp_invertInEq1" (formula "37") (term "0,0"))
                                          (rule "mul_literals" (formula "37") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "37") (term "0,0,0"))
                                          (rule "polySimp_elimOne" (formula "37") (term "0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0"))
                                          (rule "mul_literals" (formula "37") (term "1,1,0"))
                                          (rule "inEqSimp_contradInEq1" (formula "37") (term "0,0") (ifseqformula "74"))
                                          (rule "qeq_literals" (formula "37") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "37"))
                                          (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "74"))
                                          (rule "qeq_literals" (formula "37") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "37"))
                                          (rule "allLeft" (formula "83") (inst "t=add(Z(neglit(1(#))), l_1)"))
                                          (rule "polySimp_addAssoc" (formula "83") (term "0,2,0,1"))
                                          (rule "add_literals" (formula "83") (term "0,0,2,0,1"))
                                          (rule "add_zero_left" (formula "83") (term "0,2,0,1"))
                                          (rule "inEqSimp_commuteGeq" (formula "83") (term "1"))
                                          (rule "inEqSimp_homoInEq0" (formula "83") (term "0,0"))
                                          (rule "polySimp_mulComm0" (formula "83") (term "1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "83") (term "1,0,0,0"))
                                          (rule "mul_literals" (formula "83") (term "0,1,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "83") (term "0,0,0"))
                                          (rule "add_literals" (formula "83") (term "0,0,0,0"))
                                          (rule "add_zero_left" (formula "83") (term "0,0,0"))
                                          (rule "inEqSimp_homoInEq1" (formula "83") (term "1,0"))
                                          (rule "polySimp_mulComm0" (formula "83") (term "1,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "83") (term "1,0,1,0"))
                                          (rule "mul_literals" (formula "83") (term "0,1,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "83") (term "0,1,0"))
                                          (rule "polySimp_addComm0" (formula "83") (term "0,0,1,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "83") (term "0,1,0"))
                                          (rule "add_literals" (formula "83") (term "1,1,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "83") (term "1,0,1,0"))
                                          (rule "inEqSimp_invertInEq1" (formula "83") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "83") (term "0,0,0"))
                                          (rule "times_zero_2" (formula "83") (term "1,0,0"))
                                          (rule "polySimp_elimOne" (formula "83") (term "0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "83") (term "1,0"))
                                          (rule "mul_literals" (formula "83") (term "1,1,0"))
                                          (rule "inEqSimp_contradInEq1" (formula "83") (term "0,0") (ifseqformula "74"))
                                          (rule "qeq_literals" (formula "83") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "83"))
                                          (rule "inEqSimp_contradInEq1" (formula "83") (term "0") (ifseqformula "74"))
                                          (rule "qeq_literals" (formula "83") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "83"))
                                          (rule "pullOutSelect" (formula "83") (term "1") (inst "selectSK=arr_14"))
                                          (rule "simplifySelectOfStore" (formula "83"))
                                           (builtin "One Step Simplification" (formula "83"))
                                          (rule "replaceKnownSelect_taclet10010100012011_13" (formula "83") (term "2,0"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet10010100012011_14" (formula "83") (term "2,0"))
                                          (rule "castDel" (formula "83") (term "1,0"))
                                          (rule "polySimp_homoEq" (formula "83") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "83") (term "1,0,0,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "83") (term "0,0,0"))
                                          (rule "add_literals" (formula "83") (term "1,0,0,0"))
                                          (rule "polySimp_invertEq" (formula "83") (term "0,0"))
                                          (rule "times_zero_2" (formula "83") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "83") (term "0,0,0"))
                                          (rule "polySimp_elimOne" (formula "83") (term "0,0,0"))
                                          (rule "inEqSimp_contradEq7" (formula "83") (term "0,0") (ifseqformula "74"))
                                          (rule "mul_literals" (formula "83") (term "1,0,0,0,0"))
                                          (rule "add_literals" (formula "83") (term "0,0,0,0"))
                                          (rule "leq_literals" (formula "83") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "83"))
                                          (rule "applyEqReverse" (formula "84") (term "1") (ifseqformula "83"))
                                          (rule "hideAuxiliaryEq" (formula "83"))
                                          (rule "pullOutSelect" (formula "83") (term "0") (inst "selectSK=arr_15"))
                                          (rule "simplifySelectOfStore" (formula "83"))
                                           (builtin "One Step Simplification" (formula "83"))
                                          (rule "replaceKnownSelect_taclet10010100012011_11" (formula "83") (term "2,0"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet10010100012011_12" (formula "83") (term "2,0"))
                                          (rule "castDel" (formula "83") (term "1,0"))
                                          (rule "polySimp_homoEq" (formula "83") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "83") (term "1,0,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "83") (term "0,0,0"))
                                          (rule "add_literals" (formula "83") (term "1,1,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "84"))
                                          (rule "polySimp_sepNegMonomial" (formula "83") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "83") (term "0,0,0"))
                                          (rule "polySimp_elimOne" (formula "83") (term "0,0,0"))
                                          (rule "inEqSimp_contradEq7" (formula "83") (term "0,0") (ifseqformula "74"))
                                          (rule "mul_literals" (formula "83") (term "1,0,0,0,0"))
                                          (rule "add_literals" (formula "83") (term "0,0,0,0"))
                                          (rule "leq_literals" (formula "83") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "83"))
                                          (rule "applyEqReverse" (formula "84") (term "1") (ifseqformula "83"))
                                          (rule "hideAuxiliaryEq" (formula "83"))
                                          (rule "inEqSimp_commuteGeq" (formula "83"))
                                          (rule "allLeft" (formula "83") (inst "t=add(Z(neglit(2(#))), l_1)"))
                                          (rule "polySimp_addAssoc" (formula "83") (term "0,2,0,1"))
                                          (rule "add_literals" (formula "83") (term "0,0,2,0,1"))
                                          (rule "replaceKnownSelect_taclet10010100012011_30" (formula "83") (term "0,1"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet10010100012011_31" (formula "83") (term "0,1"))
                                          (rule "inEqSimp_commuteGeq" (formula "83") (term "1"))
                                          (rule "inEqSimp_homoInEq1" (formula "83") (term "1,0"))
                                          (rule "polySimp_mulComm0" (formula "83") (term "1,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "83") (term "1,0,1,0"))
                                          (rule "mul_literals" (formula "83") (term "0,1,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "83") (term "0,1,0"))
                                          (rule "polySimp_addComm0" (formula "83") (term "0,0,1,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "83") (term "0,1,0"))
                                          (rule "add_literals" (formula "83") (term "1,1,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "83") (term "1,0,1,0"))
                                          (rule "inEqSimp_homoInEq0" (formula "83") (term "0,0"))
                                          (rule "polySimp_mulComm0" (formula "83") (term "1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "83") (term "1,0,0,0"))
                                          (rule "mul_literals" (formula "83") (term "0,1,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "83") (term "0,0,0"))
                                          (rule "add_literals" (formula "83") (term "0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "83") (term "1,0"))
                                          (rule "mul_literals" (formula "83") (term "1,1,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "83") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "83") (term "0,0,0"))
                                          (rule "polySimp_elimOne" (formula "83") (term "0,0,0"))
                                          (rule "inEqSimp_contradInEq1" (formula "83") (term "1,0") (ifseqformula "74"))
                                          (rule "qeq_literals" (formula "83") (term "0,1,0"))
                                           (builtin "One Step Simplification" (formula "83"))
                                          (rule "inEqSimp_contradInEq1" (formula "83") (term "0") (ifseqformula "74"))
                                          (rule "qeq_literals" (formula "83") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "83"))
                                          (rule "pullOutSelect" (formula "83") (term "0") (inst "selectSK=arr_16"))
                                          (rule "simplifySelectOfStore" (formula "83"))
                                           (builtin "One Step Simplification" (formula "83"))
                                          (rule "replaceKnownSelect_taclet10010100012011_19" (formula "83") (term "2,0"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet10010100012011_20" (formula "83") (term "2,0"))
                                          (rule "castDel" (formula "83") (term "1,0"))
                                          (rule "polySimp_homoEq" (formula "83") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "83") (term "1,0,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "83") (term "0,0,0"))
                                          (rule "add_literals" (formula "83") (term "1,1,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "84"))
                                          (rule "polySimp_sepNegMonomial" (formula "83") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "83") (term "0,0,0"))
                                          (rule "polySimp_elimOne" (formula "83") (term "0,0,0"))
                                          (rule "inEqSimp_contradEq7" (formula "83") (term "0,0") (ifseqformula "74"))
                                          (rule "mul_literals" (formula "83") (term "1,0,0,0,0"))
                                          (rule "add_literals" (formula "83") (term "0,0,0,0"))
                                          (rule "leq_literals" (formula "83") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "83"))
                                          (rule "applyEqReverse" (formula "84") (term "1") (ifseqformula "83"))
                                          (rule "hideAuxiliaryEq" (formula "83"))
                                          (rule "inEqSimp_commuteGeq" (formula "83"))
                                          (rule "allLeft" (formula "38") (inst "t=add(Z(neglit(2(#))), l_1)"))
                                          (rule "inEqSimp_homoInEq1" (formula "38") (term "1,0"))
                                          (rule "polySimp_mulComm0" (formula "38") (term "1,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "38") (term "1,0,1,0"))
                                          (rule "mul_literals" (formula "38") (term "0,1,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "38") (term "0,1,0"))
                                          (rule "polySimp_addComm0" (formula "38") (term "0,0,1,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "38") (term "0,1,0"))
                                          (rule "add_literals" (formula "38") (term "1,1,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "38") (term "1,0,1,0"))
                                          (rule "inEqSimp_homoInEq0" (formula "38") (term "0,0"))
                                          (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "38") (term "1,0,0,0"))
                                          (rule "mul_literals" (formula "38") (term "0,1,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "38") (term "0,0,0"))
                                          (rule "add_literals" (formula "38") (term "0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0"))
                                          (rule "mul_literals" (formula "38") (term "1,1,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "38") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "38") (term "0,0,0"))
                                          (rule "polySimp_elimOne" (formula "38") (term "0,0,0"))
                                          (rule "inEqSimp_contradInEq1" (formula "38") (term "1,0") (ifseqformula "75"))
                                          (rule "qeq_literals" (formula "38") (term "0,1,0"))
                                           (builtin "One Step Simplification" (formula "38"))
                                          (rule "inEqSimp_contradInEq1" (formula "38") (term "0") (ifseqformula "75"))
                                          (rule "qeq_literals" (formula "38") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "38"))
                                          (rule "allLeft" (formula "23") (inst "t=add(Z(1(#)), b_0)"))
                                          (rule "replaceKnownSelect_taclet10010100012011_15" (formula "23") (term "0,1,0,1,1"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet10010100012011_16" (formula "23") (term "0,1,0,1,1"))
                                          (rule "polySimp_homoEq" (formula "23") (term "0,1,1,1"))
                                          (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,1,1"))
                                          (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,1,1"))
                                          (rule "mul_literals" (formula "23") (term "0,1,0,0,1,1,1"))
                                          (rule "polySimp_addAssoc" (formula "23") (term "0,2,2,1,1,1"))
                                          (rule "add_literals" (formula "23") (term "0,0,2,2,1,1,1"))
                                          (rule "replaceKnownSelect_taclet10010100012011_26" (formula "23") (term "2,1,1,1"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet10010100012011_27" (formula "23") (term "2,1,1,1"))
                                          (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,1,1"))
                                          (rule "polySimp_addComm1" (formula "23") (term "0,0,0,1,1,1"))
                                          (rule "add_literals" (formula "23") (term "0,0,0,0,1,1,1"))
                                          (rule "inEqSimp_homoInEq1" (formula "23") (term "1,0"))
                                          (rule "polySimp_mulComm0" (formula "23") (term "1,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "23") (term "1,0,1,0"))
                                          (rule "mul_literals" (formula "23") (term "0,1,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "23") (term "0,1,0"))
                                          (rule "polySimp_addComm0" (formula "23") (term "0,0,1,0"))
                                          (rule "inEqSimp_homoInEq0" (formula "23") (term "0,0"))
                                          (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0"))
                                          (rule "mul_literals" (formula "23") (term "0,1,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "23") (term "0,0,0"))
                                          (rule "add_literals" (formula "23") (term "0,0,0,0"))
                                          (rule "polySimp_sepNegMonomial" (formula "23") (term "0,1,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "23") (term "0,0,1,1,1"))
                                          (rule "polySimp_elimOne" (formula "23") (term "0,0,1,1,1"))
                                          (rule "applyEq" (formula "23") (term "1,1,1") (ifseqformula "83"))
                                          (rule "polySimp_addComm1" (formula "23") (term "1,1"))
                                          (rule "polySimp_addComm0" (formula "23") (term "0,1,1"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "1,0"))
                                          (rule "polySimp_mulLiterals" (formula "23") (term "0,1,0"))
                                          (rule "polySimp_elimOne" (formula "23") (term "0,1,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "23") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "23") (term "0,0,0"))
                                          (rule "polySimp_elimOne" (formula "23") (term "0,0,0"))
                                          (rule "inEqSimp_contradInEq0" (formula "23") (term "1,0") (ifseqformula "9"))
                                          (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0"))
                                          (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0"))
                                          (rule "polySimp_addComm1" (formula "23") (term "0,0,0,1,0"))
                                          (rule "add_literals" (formula "23") (term "0,0,0,0,1,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "23") (term "0,0,1,0"))
                                          (rule "add_literals" (formula "23") (term "1,1,0,0,1,0"))
                                          (rule "times_zero_1" (formula "23") (term "1,0,0,1,0"))
                                          (rule "add_literals" (formula "23") (term "0,0,1,0"))
                                          (rule "leq_literals" (formula "23") (term "0,1,0"))
                                           (builtin "One Step Simplification" (formula "23"))
                                          (rule "inEqSimp_contradInEq1" (formula "23") (term "0") (ifseqformula "7"))
                                          (rule "qeq_literals" (formula "23") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "23"))
                                          (rule "allLeft" (formula "24") (inst "t=add(Z(neglit(1(#))), l_1)"))
                                          (rule "replaceKnownSelect_taclet10010100012011_11" (formula "24") (term "0,1,0,1,1"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet10010100012011_12" (formula "24") (term "0,1,0,1,1"))
                                          (rule "polySimp_homoEq" (formula "24") (term "0,1,1,1"))
                                          (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,1,1"))
                                          (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,1,1"))
                                          (rule "mul_literals" (formula "24") (term "0,1,0,0,1,1,1"))
                                          (rule "polySimp_addAssoc" (formula "24") (term "0,2,2,1,1,1"))
                                          (rule "add_literals" (formula "24") (term "0,0,2,2,1,1,1"))
                                          (rule "add_zero_left" (formula "24") (term "0,2,2,1,1,1"))
                                          (rule "replaceKnownSelect_taclet10010100012011_13" (formula "24") (term "2,1,1,1"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet10010100012011_14" (formula "24") (term "2,1,1,1"))
                                          (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,1,1"))
                                          (rule "polySimp_addComm1" (formula "24") (term "0,0,0,1,1,1"))
                                          (rule "add_literals" (formula "24") (term "0,0,0,0,1,1,1"))
                                          (rule "add_zero_left" (formula "24") (term "0,0,0,1,1,1"))
                                          (rule "polySimp_pullOutFactor0" (formula "24") (term "0,0,1,1,1"))
                                          (rule "add_literals" (formula "24") (term "1,0,0,1,1,1"))
                                          (rule "polySimp_elimOne" (formula "24") (term "0,0,1,1,1"))
                                          (rule "inEqSimp_homoInEq1" (formula "24") (term "1,0"))
                                          (rule "polySimp_mulComm0" (formula "24") (term "1,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "24") (term "1,0,1,0"))
                                          (rule "mul_literals" (formula "24") (term "0,1,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "24") (term "0,1,0"))
                                          (rule "polySimp_addComm0" (formula "24") (term "0,0,1,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "24") (term "0,1,0"))
                                          (rule "add_literals" (formula "24") (term "1,1,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "24") (term "1,0,1,0"))
                                          (rule "inEqSimp_homoInEq0" (formula "24") (term "0,0"))
                                          (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0"))
                                          (rule "mul_literals" (formula "24") (term "0,1,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "24") (term "0,0,0"))
                                          (rule "add_literals" (formula "24") (term "0,0,0,0"))
                                          (rule "add_zero_left" (formula "24") (term "0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0"))
                                          (rule "mul_literals" (formula "24") (term "1,1,0"))
                                          (rule "inEqSimp_invertInEq1" (formula "24") (term "0,0"))
                                          (rule "times_zero_2" (formula "24") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "24") (term "0,0,0"))
                                          (rule "polySimp_elimOne" (formula "24") (term "0,0,0"))
                                          (rule "inEqSimp_contradEq7" (formula "24") (term "0,1,1,1") (ifseqformula "77"))
                                          (rule "mul_literals" (formula "24") (term "1,0,0,0,1,1,1"))
                                          (rule "add_literals" (formula "24") (term "0,0,0,1,1,1"))
                                          (rule "leq_literals" (formula "24") (term "0,0,1,1,1"))
                                           (builtin "One Step Simplification" (formula "24"))
                                          (rule "polySimp_addComm1" (formula "24") (term "1,1"))
                                          (rule "inEqSimp_contradInEq1" (formula "24") (term "0,0") (ifseqformula "77"))
                                          (rule "qeq_literals" (formula "24") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "24"))
                                          (rule "inEqSimp_contradInEq1" (formula "24") (term "0") (ifseqformula "77"))
                                          (rule "qeq_literals" (formula "24") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "24"))
                                          (rule "allLeft" (formula "25") (inst "t=add(Z(neglit(2(#))), l_1)"))
                                          (rule "replaceKnownSelect_taclet10010100012011_19" (formula "25") (term "0,1,0,1,1"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet10010100012011_20" (formula "25") (term "0,1,0,1,1"))
                                          (rule "polySimp_homoEq" (formula "25") (term "0,1,1,1"))
                                          (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,1,1"))
                                          (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,1,1"))
                                          (rule "mul_literals" (formula "25") (term "0,1,0,0,1,1,1"))
                                          (rule "polySimp_addAssoc" (formula "25") (term "0,2,2,1,1,1"))
                                          (rule "add_literals" (formula "25") (term "0,0,2,2,1,1,1"))
                                          (rule "replaceKnownSelect_taclet10010100012011_11" (formula "25") (term "2,1,1,1"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet10010100012011_12" (formula "25") (term "2,1,1,1"))
                                          (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,1,1"))
                                          (rule "polySimp_addComm1" (formula "25") (term "0,0,0,1,1,1"))
                                          (rule "add_literals" (formula "25") (term "0,0,0,0,1,1,1"))
                                          (rule "polySimp_pullOutFactor0b" (formula "25") (term "0,0,1,1,1"))
                                          (rule "add_literals" (formula "25") (term "1,1,0,0,1,1,1"))
                                          (rule "polySimp_elimOne" (formula "25") (term "1,0,0,1,1,1"))
                                          (rule "inEqSimp_homoInEq1" (formula "25") (term "1,0"))
                                          (rule "polySimp_mulComm0" (formula "25") (term "1,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "25") (term "1,0,1,0"))
                                          (rule "mul_literals" (formula "25") (term "0,1,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "25") (term "0,1,0"))
                                          (rule "polySimp_addComm0" (formula "25") (term "0,0,1,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "25") (term "0,1,0"))
                                          (rule "add_literals" (formula "25") (term "1,1,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "25") (term "1,0,1,0"))
                                          (rule "inEqSimp_homoInEq0" (formula "25") (term "0,0"))
                                          (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0"))
                                          (rule "mul_literals" (formula "25") (term "0,1,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "25") (term "0,0,0"))
                                          (rule "add_literals" (formula "25") (term "0,0,0,0"))
                                          (rule "polySimp_sepPosMonomial" (formula "25") (term "0,1,1,1"))
                                          (rule "mul_literals" (formula "25") (term "1,0,1,1,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0"))
                                          (rule "mul_literals" (formula "25") (term "1,1,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "25") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "25") (term "0,0,0"))
                                          (rule "polySimp_elimOne" (formula "25") (term "0,0,0"))
                                          (rule "inEqSimp_contradEq7" (formula "25") (term "0,1,1,1") (ifseqformula "78"))
                                          (rule "mul_literals" (formula "25") (term "1,0,0,0,1,1,1"))
                                          (rule "add_literals" (formula "25") (term "0,0,0,1,1,1"))
                                          (rule "leq_literals" (formula "25") (term "0,0,1,1,1"))
                                           (builtin "One Step Simplification" (formula "25"))
                                          (rule "polySimp_addComm1" (formula "25") (term "1,1"))
                                          (rule "inEqSimp_contradInEq1" (formula "25") (term "1,0") (ifseqformula "78"))
                                          (rule "qeq_literals" (formula "25") (term "0,1,0"))
                                           (builtin "One Step Simplification" (formula "25"))
                                          (rule "inEqSimp_contradInEq1" (formula "25") (term "0") (ifseqformula "78"))
                                          (rule "qeq_literals" (formula "25") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "25"))
                                          (rule "allLeft" (formula "26") (inst "t=b_0"))
                                          (rule "replaceKnownSelect_taclet10010100012011_15" (formula "26") (term "2,1,1,1"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet10010100012011_16" (formula "26") (term "2,1,1,1"))
                                          (rule "replaceKnownSelect_taclet10010100012011_17" (formula "26") (term "0,1,0,1,1"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet10010100012011_18" (formula "26") (term "0,1,0,1,1"))
                                          (rule "inEqSimp_contradEq3" (formula "26") (term "0,1,1,1") (ifseqformula "9"))
                                          (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0,1,1,1"))
                                          (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0,1,1,1"))
                                          (rule "mul_literals" (formula "26") (term "0,1,0,0,0,1,1,1"))
                                          (rule "polySimp_addAssoc" (formula "26") (term "0,0,0,1,1,1"))
                                          (rule "polySimp_addComm1" (formula "26") (term "0,0,0,0,1,1,1"))
                                          (rule "add_literals" (formula "26") (term "0,0,0,0,0,1,1,1"))
                                          (rule "polySimp_pullOutFactor0b" (formula "26") (term "0,0,0,1,1,1"))
                                          (rule "add_literals" (formula "26") (term "1,1,0,0,0,1,1,1"))
                                          (rule "times_zero_1" (formula "26") (term "1,0,0,0,1,1,1"))
                                          (rule "add_literals" (formula "26") (term "0,0,0,1,1,1"))
                                          (rule "qeq_literals" (formula "26") (term "0,0,1,1,1"))
                                           (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "113")))
                                          (rule "inEqSimp_contradInEq0" (formula "26") (term "1") (ifseqformula "9"))
                                          (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
                                          (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,1"))
                                          (rule "mul_literals" (formula "26") (term "0,1,0,0,1"))
                                          (rule "polySimp_addAssoc" (formula "26") (term "0,0,1"))
                                          (rule "polySimp_addComm0" (formula "26") (term "0,0,0,1"))
                                          (rule "polySimp_pullOutFactor0b" (formula "26") (term "0,0,1"))
                                          (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
                                          (rule "add_zero_right" (formula "26") (term "0,0,1"))
                                          (rule "leq_literals" (formula "26") (term "0,1"))
                                           (builtin "One Step Simplification" (formula "26"))
                                          (rule "inEqSimp_contradInEq1" (formula "26") (ifseqformula "7"))
                                          (rule "qeq_literals" (formula "26") (term "0"))
                                           (builtin "One Step Simplification" (formula "26"))
                                          (rule "closeFalse" (formula "26"))
                                       )
                                    )
                                    (branch
                                       (rule "replace_known_left" (formula "38") (term "0") (ifseqformula "39"))
                                        (builtin "One Step Simplification" (formula "38"))
                                       (rule "allLeft" (formula "67") (inst "t=b_0"))
                                       (rule "inEqSimp_contradInEq1" (formula "67") (term "0,0") (ifseqformula "2"))
                                       (rule "qeq_literals" (formula "67") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "67"))
                                       (rule "inEqSimp_contradInEq0" (formula "67") (term "0") (ifseqformula "4"))
                                       (rule "inEqSimp_homoInEq1" (formula "67") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "67") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "67") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "67") (term "0,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "67") (term "1,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "67") (term "0,0,0"))
                                       (rule "polySimp_addComm0" (formula "67") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "67") (term "0,0,0"))
                                       (rule "add_literals" (formula "67") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "67") (term "1,0,0,0"))
                                       (rule "add_literals" (formula "67") (term "0,0,0"))
                                       (rule "leq_literals" (formula "67") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "67"))
                                       (rule "pullOutSelect" (formula "67") (term "0") (inst "selectSK=arr_5"))
                                       (rule "simplifySelectOfStore" (formula "67"))
                                        (builtin "One Step Simplification" (formula "67"))
                                       (rule "castDel" (formula "67") (term "1,0"))
                                       (rule "polySimp_homoEq" (formula "67") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "67") (term "1,0,0,0"))
                                       (rule "polySimp_addComm1" (formula "67") (term "0,0,0"))
                                       (rule "inEqSimp_commuteGeq" (formula "68"))
                                       (rule "polySimp_sepPosMonomial" (formula "67") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "67") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "67") (term "1,0,0"))
                                       (rule "mul_literals" (formula "67") (term "0,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "67") (term "1,1,0,0"))
                                       (rule "inEqSimp_contradEq3" (formula "67") (term "0,0") (ifseqformula "4"))
                                       (rule "polySimp_rightDist" (formula "67") (term "1,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "67") (term "1,1,0,0,0,0"))
                                       (rule "mul_literals" (formula "67") (term "0,1,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "67") (term "0,0,0,0"))
                                       (rule "polySimp_addComm1" (formula "67") (term "0,0,0,0,0"))
                                       (rule "add_literals" (formula "67") (term "0,0,0,0,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "67") (term "0,0,0,0"))
                                       (rule "add_literals" (formula "67") (term "1,1,0,0,0,0"))
                                       (rule "times_zero_1" (formula "67") (term "1,0,0,0,0"))
                                       (rule "add_zero_right" (formula "67") (term "0,0,0,0"))
                                       (rule "qeq_literals" (formula "67") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "67"))
                                       (rule "simplifySelectOfAnon" (formula "67"))
                                        (builtin "One Step Simplification" (formula "67") (ifInst ""  (formula "91")) (ifInst ""  (formula "20")))
                                       (rule "elementOfArrayRangeConcrete" (formula "67") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "67"))
                                       (rule "inEqSimp_homoInEq0" (formula "67") (term "0,0,0"))
                                       (rule "mul_literals" (formula "67") (term "1,0,0,0,0"))
                                       (rule "add_zero_right" (formula "67") (term "0,0,0,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "67") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "67") (term "1,0,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "67") (term "1,0,1,0,0"))
                                       (rule "mul_literals" (formula "67") (term "0,1,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "67") (term "0,1,0,0"))
                                       (rule "polySimp_addComm0" (formula "67") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "67") (term "0,0,0"))
                                       (rule "mul_literals" (formula "67") (term "1,0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "67") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "67") (term "0,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "67") (term "0,1,0,0"))
                                       (rule "inEqSimp_subsumption1" (formula "67") (term "0,0,0") (ifseqformula "2"))
                                       (rule "leq_literals" (formula "67") (term "0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "67"))
                                       (rule "inEqSimp_subsumption0" (formula "67") (term "0,0") (ifseqformula "4"))
                                       (rule "inEqSimp_homoInEq0" (formula "67") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "67") (term "1,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "67") (term "1,0,0,0,0"))
                                       (rule "mul_literals" (formula "67") (term "0,1,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "67") (term "1,1,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "67") (term "0,0,0,0"))
                                       (rule "polySimp_addComm1" (formula "67") (term "0,0,0,0,0"))
                                       (rule "add_literals" (formula "67") (term "0,0,0,0,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "67") (term "0,0,0,0"))
                                       (rule "add_literals" (formula "67") (term "1,1,0,0,0,0"))
                                       (rule "times_zero_1" (formula "67") (term "1,0,0,0,0"))
                                       (rule "add_zero_right" (formula "67") (term "0,0,0,0"))
                                       (rule "qeq_literals" (formula "67") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "67"))
                                       (rule "applyEqReverse" (formula "68") (term "1") (ifseqformula "67"))
                                       (rule "hideAuxiliaryEq" (formula "67"))
                                       (rule "pullOutSelect" (formula "67") (term "0") (inst "selectSK=arr_6"))
                                       (rule "simplifySelectOfStore" (formula "67"))
                                        (builtin "One Step Simplification" (formula "67"))
                                       (rule "castDel" (formula "67") (term "1,0"))
                                       (rule "eqSymm" (formula "67") (term "0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "68"))
                                       (rule "inEqSimp_contradEq3" (formula "67") (term "0,0") (ifseqformula "4"))
                                       (rule "polySimp_mulAssoc" (formula "67") (term "1,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "67") (term "0,1,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "67") (term "1,0,0,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "67") (term "0,0,0,0"))
                                       (rule "add_literals" (formula "67") (term "1,1,0,0,0,0"))
                                       (rule "times_zero_1" (formula "67") (term "1,0,0,0,0"))
                                       (rule "add_zero_right" (formula "67") (term "0,0,0,0"))
                                       (rule "qeq_literals" (formula "67") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "67"))
                                       (rule "simplifySelectOfAnon" (formula "67"))
                                        (builtin "One Step Simplification" (formula "67") (ifInst ""  (formula "91")) (ifInst ""  (formula "20")))
                                       (rule "elementOfArrayRangeConcrete" (formula "67") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "67"))
                                       (rule "inEqSimp_commuteLeq" (formula "67") (term "0,0,0"))
                                       (rule "replace_known_left" (formula "67") (term "0,0,0") (ifseqformula "2"))
                                        (builtin "One Step Simplification" (formula "67"))
                                       (rule "inEqSimp_subsumption0" (formula "67") (term "0,0") (ifseqformula "4"))
                                       (rule "inEqSimp_homoInEq0" (formula "67") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "67") (term "1,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "67") (term "1,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "67") (term "1,1,0,0,0,0"))
                                       (rule "mul_literals" (formula "67") (term "0,1,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "67") (term "0,0,0,0"))
                                       (rule "polySimp_addComm0" (formula "67") (term "0,0,0,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "67") (term "0,0,0,0"))
                                       (rule "add_literals" (formula "67") (term "1,1,0,0,0,0"))
                                       (rule "times_zero_1" (formula "67") (term "1,0,0,0,0"))
                                       (rule "add_zero_right" (formula "67") (term "0,0,0,0"))
                                       (rule "qeq_literals" (formula "67") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "67"))
                                       (rule "applyEqReverse" (formula "68") (term "1") (ifseqformula "67"))
                                       (rule "hideAuxiliaryEq" (formula "67"))
                                       (rule "allLeft" (formula "68") (inst "t=add(Z(1(#)), b_0)"))
                                       (rule "replaceKnownSelect_taclet1010100012011_11" (formula "68") (term "1,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1010100012011_13" (formula "68") (term "1,1"))
                                       (rule "polySimp_addAssoc" (formula "68") (term "0,2,0,1"))
                                       (rule "add_literals" (formula "68") (term "0,0,2,0,1"))
                                       (rule "inEqSimp_homoInEq1" (formula "68") (term "1,0"))
                                       (rule "polySimp_mulComm0" (formula "68") (term "1,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "68") (term "1,0,1,0"))
                                       (rule "mul_literals" (formula "68") (term "0,1,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "68") (term "0,1,0"))
                                       (rule "polySimp_addComm0" (formula "68") (term "0,0,1,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "68") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "68") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "68") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "68") (term "0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "68") (term "0,0,0"))
                                       (rule "add_literals" (formula "68") (term "0,0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "68") (term "1,0"))
                                       (rule "polySimp_mulLiterals" (formula "68") (term "0,1,0"))
                                       (rule "polySimp_elimOne" (formula "68") (term "0,1,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "68") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "68") (term "0,0,0"))
                                       (rule "polySimp_elimOne" (formula "68") (term "0,0,0"))
                                       (rule "inEqSimp_contradInEq0" (formula "68") (term "1,0") (ifseqformula "4"))
                                       (rule "inEqSimp_homoInEq1" (formula "68") (term "0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "68") (term "1,0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "68") (term "1,0,0,1,0"))
                                       (rule "mul_literals" (formula "68") (term "0,1,0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "68") (term "1,1,0,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "68") (term "0,0,1,0"))
                                       (rule "polySimp_addComm1" (formula "68") (term "0,0,0,1,0"))
                                       (rule "add_literals" (formula "68") (term "0,0,0,0,1,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "68") (term "0,0,1,0"))
                                       (rule "add_literals" (formula "68") (term "1,1,0,0,1,0"))
                                       (rule "times_zero_1" (formula "68") (term "1,0,0,1,0"))
                                       (rule "add_literals" (formula "68") (term "0,0,1,0"))
                                       (rule "leq_literals" (formula "68") (term "0,1,0"))
                                        (builtin "One Step Simplification" (formula "68"))
                                       (rule "inEqSimp_contradInEq1" (formula "68") (term "0") (ifseqformula "2"))
                                       (rule "qeq_literals" (formula "68") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "68"))
                                       (rule "pullOutSelect" (formula "68") (term "0") (inst "selectSK=arr_7"))
                                       (rule "simplifySelectOfStore" (formula "68"))
                                        (builtin "One Step Simplification" (formula "68"))
                                       (rule "castDel" (formula "68") (term "1,0"))
                                       (rule "polySimp_homoEq" (formula "68") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "68") (term "1,0,0,0"))
                                       (rule "polySimp_addComm1" (formula "68") (term "0,0,0"))
                                       (rule "inEqSimp_commuteGeq" (formula "69"))
                                       (rule "polySimp_sepPosMonomial" (formula "68") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "68") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "68") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "68") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "68") (term "0,1,0,0"))
                                       (rule "pullOutSelect" (formula "68") (term "2,0") (inst "selectSK=arr_8"))
                                       (rule "simplifySelectOfAnon" (formula "68"))
                                        (builtin "One Step Simplification" (formula "68") (ifInst ""  (formula "93")) (ifInst ""  (formula "20")))
                                       (rule "elementOfArrayRangeConcrete" (formula "68") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "68"))
                                       (rule "inEqSimp_homoInEq0" (formula "68") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "68") (term "1,0,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "68") (term "1,0,1,0,0"))
                                       (rule "mul_literals" (formula "68") (term "0,1,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "68") (term "0,1,0,0"))
                                       (rule "polySimp_addComm0" (formula "68") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "68") (term "0,0,0"))
                                       (rule "mul_literals" (formula "68") (term "1,0,0,0,0"))
                                       (rule "add_zero_right" (formula "68") (term "0,0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "68") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "68") (term "0,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "68") (term "0,1,0,0"))
                                       (rule "replace_known_left" (formula "68") (term "1,0,0") (ifseqformula "4"))
                                        (builtin "One Step Simplification" (formula "68"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "68") (term "0,0"))
                                       (rule "mul_literals" (formula "68") (term "1,0,0"))
                                       (rule "inEqSimp_subsumption1" (formula "68") (term "0,0") (ifseqformula "2"))
                                       (rule "leq_literals" (formula "68") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "68"))
                                       (rule "applyEqReverse" (formula "69") (term "2,0") (ifseqformula "68"))
                                       (rule "hideAuxiliaryEq" (formula "68"))
                                       (rule "inEqSimp_exactShadow3" (formula "67") (ifseqformula "69"))
                                       (rule "polySimp_mulComm0" (formula "67") (term "0,0"))
                                       (rule "polySimp_addComm0" (formula "67") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "67"))
                                       (rule "polySimp_mulLiterals" (formula "67") (term "0"))
                                       (rule "polySimp_elimOne" (formula "67") (term "0"))
                                       (rule "allLeft" (formula "71") (inst "t=add(Z(neglit(1(#))), l_1)"))
                                       (rule "polySimp_addAssoc" (formula "71") (term "0,2,0,1"))
                                       (rule "add_literals" (formula "71") (term "0,0,2,0,1"))
                                       (rule "add_zero_left" (formula "71") (term "0,2,0,1"))
                                       (rule "inEqSimp_commuteGeq" (formula "71") (term "1"))
                                       (rule "inEqSimp_homoInEq1" (formula "71") (term "1,0"))
                                       (rule "polySimp_mulComm0" (formula "71") (term "1,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "71") (term "1,0,1,0"))
                                       (rule "mul_literals" (formula "71") (term "0,1,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "71") (term "0,1,0"))
                                       (rule "polySimp_addComm0" (formula "71") (term "0,0,1,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "71") (term "0,1,0"))
                                       (rule "add_literals" (formula "71") (term "1,1,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "71") (term "1,0,1,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "71") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "71") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "71") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "71") (term "0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "71") (term "0,0,0"))
                                       (rule "add_literals" (formula "71") (term "0,0,0,0"))
                                       (rule "add_zero_left" (formula "71") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "71") (term "1,0"))
                                       (rule "mul_literals" (formula "71") (term "1,1,0"))
                                       (rule "inEqSimp_invertInEq1" (formula "71") (term "0,0"))
                                       (rule "times_zero_2" (formula "71") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "71") (term "0,0,0"))
                                       (rule "polySimp_elimOne" (formula "71") (term "0,0,0"))
                                       (rule "inEqSimp_contradInEq1" (formula "71") (term "0,0") (ifseqformula "60"))
                                       (rule "qeq_literals" (formula "71") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "71"))
                                       (rule "inEqSimp_contradInEq1" (formula "71") (term "0") (ifseqformula "60"))
                                       (rule "qeq_literals" (formula "71") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "71"))
                                       (rule "pullOutSelect" (formula "71") (term "0") (inst "selectSK=arr_9"))
                                       (rule "simplifySelectOfStore" (formula "71"))
                                        (builtin "One Step Simplification" (formula "71"))
                                       (rule "castDel" (formula "71") (term "1,0"))
                                       (rule "polySimp_homoEq" (formula "71") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "71") (term "1,0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "71") (term "0,0,0"))
                                       (rule "add_literals" (formula "71") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "72"))
                                       (rule "polySimp_sepNegMonomial" (formula "71") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "71") (term "0,0,0"))
                                       (rule "polySimp_elimOne" (formula "71") (term "0,0,0"))
                                       (rule "inEqSimp_contradEq7" (formula "71") (term "0,0") (ifseqformula "60"))
                                       (rule "mul_literals" (formula "71") (term "1,0,0,0,0"))
                                       (rule "add_literals" (formula "71") (term "0,0,0,0"))
                                       (rule "leq_literals" (formula "71") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "71"))
                                       (rule "simplifySelectOfAnon" (formula "71"))
                                        (builtin "One Step Simplification" (formula "71") (ifInst ""  (formula "95")) (ifInst ""  (formula "20")))
                                       (rule "elementOfArrayRangeConcrete" (formula "71") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "71"))
                                       (rule "inEqSimp_homoInEq0" (formula "71") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "71") (term "1,0,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "71") (term "1,0,1,0,0"))
                                       (rule "mul_literals" (formula "71") (term "0,1,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "71") (term "0,1,0,0"))
                                       (rule "polySimp_addComm0" (formula "71") (term "0,0,1,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "71") (term "0,1,0,0"))
                                       (rule "add_literals" (formula "71") (term "1,1,0,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "71") (term "1,0,1,0,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "71") (term "0,0,0"))
                                       (rule "mul_literals" (formula "71") (term "1,0,0,0,0"))
                                       (rule "add_zero_right" (formula "71") (term "0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "71") (term "1,0,0"))
                                       (rule "mul_literals" (formula "71") (term "1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "71") (term "0,0,0"))
                                       (rule "mul_literals" (formula "71") (term "1,0,0,0"))
                                       (rule "inEqSimp_subsumption1" (formula "71") (term "0,0,0") (ifseqformula "60"))
                                       (rule "leq_literals" (formula "71") (term "0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "71"))
                                       (rule "inEqSimp_subsumption1" (formula "71") (term "0,0") (ifseqformula "60"))
                                       (rule "leq_literals" (formula "71") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "71"))
                                       (rule "applyEqReverse" (formula "72") (term "1") (ifseqformula "71"))
                                       (rule "hideAuxiliaryEq" (formula "71"))
                                       (rule "pullOutSelect" (formula "71") (term "0") (inst "selectSK=arr_10"))
                                       (rule "simplifySelectOfStore" (formula "71"))
                                        (builtin "One Step Simplification" (formula "71"))
                                       (rule "castDel" (formula "71") (term "1,0"))
                                       (rule "polySimp_homoEq" (formula "71") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "71") (term "1,0,0,0"))
                                       (rule "polySimp_pullOutFactor1" (formula "71") (term "0,0,0"))
                                       (rule "add_literals" (formula "71") (term "1,0,0,0"))
                                       (rule "inEqSimp_commuteGeq" (formula "72"))
                                       (rule "polySimp_invertEq" (formula "71") (term "0,0"))
                                       (rule "times_zero_2" (formula "71") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "71") (term "0,0,0"))
                                       (rule "polySimp_elimOne" (formula "71") (term "0,0,0"))
                                       (rule "inEqSimp_contradEq7" (formula "71") (term "0,0") (ifseqformula "60"))
                                       (rule "times_zero_1" (formula "71") (term "1,0,0,0,0"))
                                       (rule "add_literals" (formula "71") (term "0,0,0,0"))
                                       (rule "leq_literals" (formula "71") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "71"))
                                       (rule "simplifySelectOfAnon" (formula "71"))
                                        (builtin "One Step Simplification" (formula "71") (ifInst ""  (formula "95")) (ifInst ""  (formula "20")))
                                       (rule "elementOfArrayRangeConcrete" (formula "71") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "71"))
                                       (rule "inEqSimp_commuteLeq" (formula "71") (term "0,0,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "71") (term "1,0,0"))
                                       (rule "polySimp_pullOutFactor0" (formula "71") (term "0,1,0,0"))
                                       (rule "add_literals" (formula "71") (term "1,0,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "71") (term "0,1,0,0"))
                                        (builtin "One Step Simplification" (formula "71"))
                                       (rule "inEqSimp_subsumption1" (formula "71") (term "0,0") (ifseqformula "60"))
                                       (rule "leq_literals" (formula "71") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "71"))
                                       (rule "applyEqReverse" (formula "72") (term "1") (ifseqformula "71"))
                                       (rule "hideAuxiliaryEq" (formula "71"))
                                       (rule "allLeft" (formula "13") (inst "t=add(Z(neglit(1(#))), l_1)"))
                                       (rule "replaceKnownSelect_taclet1010100012011_21" (formula "13") (term "1,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1010100012011_22" (formula "13") (term "1,1"))
                                       (rule "polySimp_addAssoc" (formula "13") (term "0,2,0,1"))
                                       (rule "add_literals" (formula "13") (term "0,0,2,0,1"))
                                       (rule "add_zero_left" (formula "13") (term "0,2,0,1"))
                                       (rule "replaceKnownSelect_taclet1010100012011_24" (formula "13") (term "0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1010100012011_25" (formula "13") (term "0,1"))
                                       (rule "inEqSimp_commuteGeq" (formula "13") (term "1"))
                                       (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "72"))
                                        (builtin "One Step Simplification" (formula "13"))
                                       (rule "true_left" (formula "13"))
                                       (rule "allLeft" (formula "72") (inst "t=add(Z(neglit(2(#))), l_1)"))
                                       (rule "polySimp_addAssoc" (formula "72") (term "0,2,0,1"))
                                       (rule "add_literals" (formula "72") (term "0,0,2,0,1"))
                                       (rule "replaceKnownSelect_taclet1010100012011_20" (formula "72") (term "0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1010100012011_22" (formula "72") (term "0,1"))
                                       (rule "inEqSimp_commuteGeq" (formula "72") (term "1"))
                                       (rule "inEqSimp_homoInEq0" (formula "72") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "72") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "72") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "72") (term "0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "72") (term "0,0,0"))
                                       (rule "add_literals" (formula "72") (term "0,0,0,0"))
                                       (rule "inEqSimp_homoInEq1" (formula "72") (term "1,0"))
                                       (rule "polySimp_mulComm0" (formula "72") (term "1,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "72") (term "1,0,1,0"))
                                       (rule "mul_literals" (formula "72") (term "0,1,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "72") (term "0,1,0"))
                                       (rule "polySimp_addComm0" (formula "72") (term "0,0,1,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "72") (term "0,1,0"))
                                       (rule "add_literals" (formula "72") (term "1,1,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "72") (term "1,0,1,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "72") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "72") (term "0,0,0"))
                                       (rule "polySimp_elimOne" (formula "72") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "72") (term "1,0"))
                                       (rule "mul_literals" (formula "72") (term "1,1,0"))
                                       (rule "inEqSimp_contradInEq1" (formula "72") (term "0,0") (ifseqformula "60"))
                                       (rule "qeq_literals" (formula "72") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "72"))
                                       (rule "inEqSimp_contradInEq1" (formula "72") (term "0") (ifseqformula "60"))
                                       (rule "qeq_literals" (formula "72") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "72"))
                                       (rule "pullOutSelect" (formula "72") (term "0") (inst "selectSK=arr_11"))
                                       (rule "simplifySelectOfStore" (formula "72"))
                                        (builtin "One Step Simplification" (formula "72"))
                                       (rule "castDel" (formula "72") (term "1,0"))
                                       (rule "polySimp_homoEq" (formula "72") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "72") (term "1,0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "72") (term "0,0,0"))
                                       (rule "add_literals" (formula "72") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "73"))
                                       (rule "polySimp_sepNegMonomial" (formula "72") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "72") (term "0,0,0"))
                                       (rule "polySimp_elimOne" (formula "72") (term "0,0,0"))
                                       (rule "inEqSimp_contradEq7" (formula "72") (term "0,0") (ifseqformula "60"))
                                       (rule "mul_literals" (formula "72") (term "1,0,0,0,0"))
                                       (rule "add_literals" (formula "72") (term "0,0,0,0"))
                                       (rule "leq_literals" (formula "72") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "72"))
                                       (rule "simplifySelectOfAnon" (formula "72"))
                                        (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "96")) (ifInst ""  (formula "20")))
                                       (rule "elementOfArrayRangeConcrete" (formula "72") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "72"))
                                       (rule "inEqSimp_homoInEq0" (formula "72") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "72") (term "1,0,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "72") (term "1,0,1,0,0"))
                                       (rule "mul_literals" (formula "72") (term "0,1,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "72") (term "0,1,0,0"))
                                       (rule "polySimp_addComm0" (formula "72") (term "0,0,1,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "72") (term "0,1,0,0"))
                                       (rule "add_literals" (formula "72") (term "1,1,0,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "72") (term "1,0,1,0,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "72") (term "0,0,0"))
                                       (rule "times_zero_2" (formula "72") (term "1,0,0,0,0"))
                                       (rule "add_zero_right" (formula "72") (term "0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "72") (term "1,0,0"))
                                       (rule "mul_literals" (formula "72") (term "1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "72") (term "0,0,0"))
                                       (rule "mul_literals" (formula "72") (term "1,0,0,0"))
                                       (rule "replace_known_left" (formula "72") (term "0,0,0") (ifseqformula "60"))
                                        (builtin "One Step Simplification" (formula "72"))
                                       (rule "inEqSimp_subsumption1" (formula "72") (term "0,0") (ifseqformula "60"))
                                       (rule "leq_literals" (formula "72") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "72"))
                                       (rule "applyEqReverse" (formula "73") (term "1") (ifseqformula "72"))
                                       (rule "hideAuxiliaryEq" (formula "72"))
                                       (rule "inEqSimp_commuteGeq" (formula "72"))
                                       (rule "allLeft" (formula "26") (inst "t=b_0"))
                                       (rule "inEqSimp_contradInEq0" (formula "26") (term "1,0") (ifseqformula "4"))
                                       (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,1,0"))
                                       (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0"))
                                       (rule "polySimp_addComm0" (formula "26") (term "0,0,0,1,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "26") (term "0,0,1,0"))
                                       (rule "add_literals" (formula "26") (term "1,1,0,0,1,0"))
                                       (rule "times_zero_1" (formula "26") (term "1,0,0,1,0"))
                                       (rule "add_literals" (formula "26") (term "0,0,1,0"))
                                       (rule "leq_literals" (formula "26") (term "0,1,0"))
                                        (builtin "One Step Simplification" (formula "26"))
                                       (rule "inEqSimp_contradInEq1" (formula "26") (term "0") (ifseqformula "2"))
                                       (rule "qeq_literals" (formula "26") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "26"))
                                       (rule "allLeft" (formula "27") (inst "t=add(Z(1(#)), b_0)"))
                                       (rule "inEqSimp_homoInEq0" (formula "27") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "27") (term "0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "27") (term "0,0,0"))
                                       (rule "add_literals" (formula "27") (term "0,0,0,0"))
                                       (rule "inEqSimp_homoInEq1" (formula "27") (term "1,0"))
                                       (rule "polySimp_mulComm0" (formula "27") (term "1,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "27") (term "1,0,1,0"))
                                       (rule "mul_literals" (formula "27") (term "0,1,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "27") (term "0,1,0"))
                                       (rule "polySimp_addComm0" (formula "27") (term "0,0,1,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "27") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "27") (term "0,0,0"))
                                       (rule "polySimp_elimOne" (formula "27") (term "0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "27") (term "1,0"))
                                       (rule "polySimp_mulLiterals" (formula "27") (term "0,1,0"))
                                       (rule "polySimp_elimOne" (formula "27") (term "0,1,0"))
                                       (rule "inEqSimp_contradInEq1" (formula "27") (term "0,0") (ifseqformula "2"))
                                       (rule "qeq_literals" (formula "27") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "27"))
                                       (rule "inEqSimp_contradInEq0" (formula "27") (term "0") (ifseqformula "4"))
                                       (rule "inEqSimp_homoInEq1" (formula "27") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,0"))
                                       (rule "mul_literals" (formula "27") (term "0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "27") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "27") (term "0,0,0,0"))
                                       (rule "add_literals" (formula "27") (term "0,0,0,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "27") (term "0,0,0"))
                                       (rule "add_literals" (formula "27") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "27") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "27") (term "0,0,0"))
                                       (rule "leq_literals" (formula "27") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "27"))
                                       (rule "allLeft" (formula "28") (inst "t=add(Z(neglit(1(#))), l_1)"))
                                       (rule "inEqSimp_homoInEq1" (formula "28") (term "1,0"))
                                       (rule "polySimp_mulComm0" (formula "28") (term "1,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "28") (term "1,0,1,0"))
                                       (rule "mul_literals" (formula "28") (term "0,1,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "28") (term "0,1,0"))
                                       (rule "polySimp_addComm0" (formula "28") (term "0,0,1,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "28") (term "0,1,0"))
                                       (rule "add_literals" (formula "28") (term "1,1,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "28") (term "1,0,1,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "28") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "28") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "28") (term "0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "28") (term "0,0,0"))
                                       (rule "add_literals" (formula "28") (term "0,0,0,0"))
                                       (rule "add_zero_left" (formula "28") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0"))
                                       (rule "mul_literals" (formula "28") (term "1,1,0"))
                                       (rule "inEqSimp_invertInEq1" (formula "28") (term "0,0"))
                                       (rule "mul_literals" (formula "28") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "28") (term "0,0,0"))
                                       (rule "polySimp_elimOne" (formula "28") (term "0,0,0"))
                                       (rule "inEqSimp_contradInEq1" (formula "28") (term "1,0") (ifseqformula "63"))
                                       (rule "qeq_literals" (formula "28") (term "0,1,0"))
                                        (builtin "One Step Simplification" (formula "28"))
                                       (rule "inEqSimp_contradInEq1" (formula "28") (term "0") (ifseqformula "63"))
                                       (rule "qeq_literals" (formula "28") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "28"))
                                       (rule "allLeft" (formula "56") (inst "t=add(Z(neglit(2(#))), l_1)"))
                                       (rule "polySimp_addAssoc" (formula "56") (term "0,2,0,1"))
                                       (rule "add_literals" (formula "56") (term "0,0,2,0,1"))
                                       (rule "inEqSimp_commuteGeq" (formula "56") (term "1"))
                                       (rule "inEqSimp_homoInEq0" (formula "56") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "56") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "56") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "56") (term "0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "56") (term "0,0,0"))
                                       (rule "add_literals" (formula "56") (term "0,0,0,0"))
                                       (rule "inEqSimp_homoInEq1" (formula "56") (term "1,0"))
                                       (rule "polySimp_mulComm0" (formula "56") (term "1,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "56") (term "1,0,1,0"))
                                       (rule "mul_literals" (formula "56") (term "0,1,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "56") (term "0,1,0"))
                                       (rule "polySimp_addComm1" (formula "56") (term "0,0,1,0"))
                                       (rule "add_literals" (formula "56") (term "0,0,0,1,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "56") (term "0,1,0"))
                                       (rule "add_literals" (formula "56") (term "1,1,0,1,0"))
                                       (rule "times_zero_1" (formula "56") (term "1,0,1,0"))
                                       (rule "add_zero_right" (formula "56") (term "0,1,0"))
                                       (rule "leq_literals" (formula "56") (term "1,0"))
                                        (builtin "One Step Simplification" (formula "56"))
                                       (rule "applyEq" (formula "56") (term "0,1") (ifseqformula "59"))
                                       (rule "inEqSimp_homoInEq0" (formula "56") (term "1"))
                                       (rule "polySimp_pullOutFactor1" (formula "56") (term "0,1"))
                                       (rule "add_literals" (formula "56") (term "1,0,1"))
                                       (rule "times_zero_1" (formula "56") (term "0,1"))
                                       (rule "qeq_literals" (formula "56") (term "1"))
                                        (builtin "One Step Simplification" (formula "56"))
                                       (rule "true_left" (formula "56"))
                                       (rule "allLeft" (formula "56") (inst "t=Z(0(#))"))
                                       (rule "leq_literals" (formula "56") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "56"))
                                       (rule "add_literals" (formula "56") (term "0,2,0,1"))
                                       (rule "inEqSimp_homoInEq1" (formula "56") (term "0"))
                                       (rule "mul_literals" (formula "56") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "56") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "56") (term "0"))
                                       (rule "mul_literals" (formula "56") (term "1,0"))
                                       (rule "inEqSimp_contradInEq1" (formula "56") (term "0") (ifseqformula "64"))
                                       (rule "qeq_literals" (formula "56") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "56"))
                                       (rule "allLeft" (formula "29") (inst "t=add(Z(neglit(2(#))), l_1)"))
                                       (rule "inEqSimp_homoInEq0" (formula "29") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "29") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "29") (term "0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "29") (term "0,0,0"))
                                       (rule "add_literals" (formula "29") (term "0,0,0,0"))
                                       (rule "inEqSimp_homoInEq1" (formula "29") (term "1,0"))
                                       (rule "polySimp_mulComm0" (formula "29") (term "1,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "29") (term "1,0,1,0"))
                                       (rule "mul_literals" (formula "29") (term "0,1,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "29") (term "0,1,0"))
                                       (rule "polySimp_addComm0" (formula "29") (term "0,0,1,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "29") (term "0,1,0"))
                                       (rule "add_literals" (formula "29") (term "1,1,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "29") (term "1,0,1,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "29") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "29") (term "0,0,0"))
                                       (rule "polySimp_elimOne" (formula "29") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0"))
                                       (rule "mul_literals" (formula "29") (term "1,1,0"))
                                       (rule "inEqSimp_contradInEq1" (formula "29") (term "1,0") (ifseqformula "65"))
                                       (rule "qeq_literals" (formula "29") (term "0,1,0"))
                                        (builtin "One Step Simplification" (formula "29"))
                                       (rule "inEqSimp_contradInEq1" (formula "29") (term "0") (ifseqformula "65"))
                                       (rule "qeq_literals" (formula "29") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "29"))
                                       (rule "allLeft" (formula "13") (inst "t=b_0"))
                                       (rule "replaceKnownSelect_taclet1010100012011_12" (formula "13") (term "0,1"))
                                       (rule "replaceKnownSelect_taclet1010100012011_15" (formula "13") (term "1,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1010100012011_13" (formula "13") (term "0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1010100012011_16" (formula "13") (term "1,1"))
                                       (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "74"))
                                        (builtin "One Step Simplification" (formula "13"))
                                       (rule "true_left" (formula "13"))
                                       (rule "allLeft" (formula "13") (inst "t=add(Z(neglit(2(#))), l_1)"))
                                       (rule "replaceKnownSelect_taclet1010100012011_27" (formula "13") (term "1,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1010100012011_28" (formula "13") (term "1,1"))
                                       (rule "polySimp_addAssoc" (formula "13") (term "0,2,0,1"))
                                       (rule "add_literals" (formula "13") (term "0,0,2,0,1"))
                                       (rule "replaceKnownSelect_taclet1010100012011_21" (formula "13") (term "0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1010100012011_22" (formula "13") (term "0,1"))
                                       (rule "inEqSimp_commuteGeq" (formula "13") (term "1"))
                                       (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "78"))
                                        (builtin "One Step Simplification" (formula "13"))
                                       (rule "true_left" (formula "13"))
                                       (rule "allLeft" (formula "14") (inst "t=add(Z(1(#)), b_0)"))
                                       (rule "replaceKnownSelect_taclet1010100012011_12" (formula "14") (term "0,1,0,1,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1010100012011_13" (formula "14") (term "0,1,0,1,1"))
                                       (rule "polySimp_homoEq" (formula "14") (term "0,1,1,1"))
                                       (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,1,1"))
                                       (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,1,1"))
                                       (rule "mul_literals" (formula "14") (term "0,1,0,0,1,1,1"))
                                       (rule "polySimp_addAssoc" (formula "14") (term "0,2,2,1,1,1"))
                                       (rule "add_literals" (formula "14") (term "0,0,2,2,1,1,1"))
                                       (rule "replaceKnownSelect_taclet1010100012011_18" (formula "14") (term "2,1,1,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1010100012011_19" (formula "14") (term "2,1,1,1"))
                                       (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,1,1"))
                                       (rule "polySimp_addComm1" (formula "14") (term "0,0,0,1,1,1"))
                                       (rule "add_literals" (formula "14") (term "0,0,0,0,1,1,1"))
                                       (rule "inEqSimp_homoInEq1" (formula "14") (term "1,0"))
                                       (rule "polySimp_mulComm0" (formula "14") (term "1,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "14") (term "1,0,1,0"))
                                       (rule "mul_literals" (formula "14") (term "0,1,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "14") (term "0,1,0"))
                                       (rule "polySimp_addComm0" (formula "14") (term "0,0,1,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "14") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "14") (term "0,0,0"))
                                       (rule "add_literals" (formula "14") (term "0,0,0,0"))
                                       (rule "polySimp_sepNegMonomial" (formula "14") (term "0,1,1,1"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "0,0,1,1,1"))
                                       (rule "polySimp_elimOne" (formula "14") (term "0,0,1,1,1"))
                                       (rule "applyEq" (formula "14") (term "1,1,1") (ifseqformula "75"))
                                       (rule "polySimp_addComm1" (formula "14") (term "1,1"))
                                       (rule "polySimp_addComm0" (formula "14") (term "0,1,1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "1,0"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0"))
                                       (rule "polySimp_elimOne" (formula "14") (term "0,1,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "14") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0"))
                                       (rule "polySimp_elimOne" (formula "14") (term "0,0,0"))
                                       (rule "inEqSimp_contradInEq0" (formula "14") (term "1,0") (ifseqformula "4"))
                                       (rule "inEqSimp_homoInEq1" (formula "14") (term "0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,1,0"))
                                       (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0"))
                                       (rule "polySimp_addComm1" (formula "14") (term "0,0,0,1,0"))
                                       (rule "add_literals" (formula "14") (term "0,0,0,0,1,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,0,1,0"))
                                       (rule "add_literals" (formula "14") (term "1,1,0,0,1,0"))
                                       (rule "times_zero_1" (formula "14") (term "1,0,0,1,0"))
                                       (rule "add_literals" (formula "14") (term "0,0,1,0"))
                                       (rule "leq_literals" (formula "14") (term "0,1,0"))
                                        (builtin "One Step Simplification" (formula "14"))
                                       (rule "inEqSimp_contradInEq1" (formula "14") (term "0") (ifseqformula "2"))
                                       (rule "qeq_literals" (formula "14") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "14"))
                                       (rule "allLeft" (formula "15") (inst "t=add(Z(neglit(1(#))), l_1)"))
                                       (rule "replaceKnownSelect_taclet1010100012011_21" (formula "15") (term "0,1,0,1,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1010100012011_22" (formula "15") (term "0,1,0,1,1"))
                                       (rule "polySimp_homoEq" (formula "15") (term "0,1,1,1"))
                                       (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,1,1"))
                                       (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,1,1"))
                                       (rule "mul_literals" (formula "15") (term "0,1,0,0,1,1,1"))
                                       (rule "polySimp_addAssoc" (formula "15") (term "0,2,2,1,1,1"))
                                       (rule "add_literals" (formula "15") (term "0,0,2,2,1,1,1"))
                                       (rule "add_zero_left" (formula "15") (term "0,2,2,1,1,1"))
                                       (rule "replaceKnownSelect_taclet1010100012011_24" (formula "15") (term "2,1,1,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1010100012011_25" (formula "15") (term "2,1,1,1"))
                                       (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,1,1"))
                                       (rule "polySimp_addComm1" (formula "15") (term "0,0,0,1,1,1"))
                                       (rule "add_literals" (formula "15") (term "0,0,0,0,1,1,1"))
                                       (rule "add_zero_left" (formula "15") (term "0,0,0,1,1,1"))
                                       (rule "polySimp_pullOutFactor0" (formula "15") (term "0,0,1,1,1"))
                                       (rule "add_literals" (formula "15") (term "1,0,0,1,1,1"))
                                       (rule "polySimp_elimOne" (formula "15") (term "0,0,1,1,1"))
                                       (rule "inEqSimp_homoInEq0" (formula "15") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "15") (term "0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "15") (term "0,0,0"))
                                       (rule "add_literals" (formula "15") (term "0,0,0,0"))
                                       (rule "add_zero_left" (formula "15") (term "0,0,0"))
                                       (rule "inEqSimp_homoInEq1" (formula "15") (term "1,0"))
                                       (rule "polySimp_mulComm0" (formula "15") (term "1,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "15") (term "1,0,1,0"))
                                       (rule "mul_literals" (formula "15") (term "0,1,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "15") (term "0,1,0"))
                                       (rule "polySimp_addComm0" (formula "15") (term "0,0,1,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "15") (term "0,1,0"))
                                       (rule "add_literals" (formula "15") (term "1,1,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "15") (term "1,0,1,0"))
                                       (rule "inEqSimp_invertInEq1" (formula "15") (term "0,0"))
                                       (rule "mul_literals" (formula "15") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0"))
                                       (rule "polySimp_elimOne" (formula "15") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0"))
                                       (rule "mul_literals" (formula "15") (term "1,1,0"))
                                       (rule "inEqSimp_contradEq7" (formula "15") (term "0,1,1,1") (ifseqformula "67"))
                                       (rule "mul_literals" (formula "15") (term "1,0,0,0,1,1,1"))
                                       (rule "add_literals" (formula "15") (term "0,0,0,1,1,1"))
                                       (rule "leq_literals" (formula "15") (term "0,0,1,1,1"))
                                        (builtin "One Step Simplification" (formula "15"))
                                       (rule "polySimp_addComm1" (formula "15") (term "1,1"))
                                       (rule "inEqSimp_contradInEq1" (formula "15") (term "0,0") (ifseqformula "67"))
                                       (rule "qeq_literals" (formula "15") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "15"))
                                       (rule "inEqSimp_contradInEq1" (formula "15") (term "0") (ifseqformula "67"))
                                       (rule "qeq_literals" (formula "15") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "15"))
                                       (rule "allLeft" (formula "16") (inst "t=add(Z(neglit(2(#))), l_1)"))
                                       (rule "replaceKnownSelect_taclet1010100012011_27" (formula "16") (term "0,1,0,1,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1010100012011_28" (formula "16") (term "0,1,0,1,1"))
                                       (rule "polySimp_homoEq" (formula "16") (term "0,1,1,1"))
                                       (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,1,1"))
                                       (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,1,1"))
                                       (rule "mul_literals" (formula "16") (term "0,1,0,0,1,1,1"))
                                       (rule "polySimp_addAssoc" (formula "16") (term "0,2,2,1,1,1"))
                                       (rule "add_literals" (formula "16") (term "0,0,2,2,1,1,1"))
                                       (rule "replaceKnownSelect_taclet1010100012011_21" (formula "16") (term "2,1,1,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1010100012011_22" (formula "16") (term "2,1,1,1"))
                                       (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,1,1"))
                                       (rule "polySimp_addComm1" (formula "16") (term "0,0,0,1,1,1"))
                                       (rule "add_literals" (formula "16") (term "0,0,0,0,1,1,1"))
                                       (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,0,1,1,1"))
                                       (rule "add_literals" (formula "16") (term "1,1,0,0,1,1,1"))
                                       (rule "polySimp_elimOne" (formula "16") (term "1,0,0,1,1,1"))
                                       (rule "inEqSimp_homoInEq0" (formula "16") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "16") (term "0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "16") (term "0,0,0"))
                                       (rule "add_literals" (formula "16") (term "0,0,0,0"))
                                       (rule "inEqSimp_homoInEq1" (formula "16") (term "1,0"))
                                       (rule "polySimp_mulComm0" (formula "16") (term "1,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "16") (term "1,0,1,0"))
                                       (rule "mul_literals" (formula "16") (term "0,1,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "16") (term "0,1,0"))
                                       (rule "polySimp_addComm0" (formula "16") (term "0,0,1,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,1,0"))
                                       (rule "add_literals" (formula "16") (term "1,1,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "16") (term "1,0,1,0"))
                                       (rule "polySimp_sepPosMonomial" (formula "16") (term "0,1,1,1"))
                                       (rule "mul_literals" (formula "16") (term "1,0,1,1,1"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "16") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0"))
                                       (rule "polySimp_elimOne" (formula "16") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0"))
                                       (rule "mul_literals" (formula "16") (term "1,1,0"))
                                       (rule "inEqSimp_contradEq7" (formula "16") (term "0,1,1,1") (ifseqformula "68"))
                                       (rule "mul_literals" (formula "16") (term "1,0,0,0,1,1,1"))
                                       (rule "add_literals" (formula "16") (term "0,0,0,1,1,1"))
                                       (rule "leq_literals" (formula "16") (term "0,0,1,1,1"))
                                        (builtin "One Step Simplification" (formula "16"))
                                       (rule "polySimp_addComm1" (formula "16") (term "1,1"))
                                       (rule "inEqSimp_contradInEq1" (formula "16") (term "1,0") (ifseqformula "68"))
                                       (rule "qeq_literals" (formula "16") (term "0,1,0"))
                                        (builtin "One Step Simplification" (formula "16"))
                                       (rule "inEqSimp_contradInEq1" (formula "16") (term "0") (ifseqformula "68"))
                                       (rule "qeq_literals" (formula "16") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "16"))
                                       (rule "allLeft" (formula "17") (inst "t=b_0"))
                                       (rule "replaceKnownSelect_taclet1010100012011_12" (formula "17") (term "2,1,1,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1010100012011_13" (formula "17") (term "2,1,1,1"))
                                       (rule "replaceKnownSelect_taclet1010100012011_15" (formula "17") (term "0,1,0,1,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1010100012011_16" (formula "17") (term "0,1,0,1,1"))
                                       (rule "inEqSimp_contradEq3" (formula "17") (term "0,1,1,1") (ifseqformula "4"))
                                       (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,1,1,1"))
                                       (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0,1,1,1"))
                                       (rule "mul_literals" (formula "17") (term "0,1,0,0,0,1,1,1"))
                                       (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,1,1,1"))
                                       (rule "polySimp_addComm1" (formula "17") (term "0,0,0,0,1,1,1"))
                                       (rule "add_literals" (formula "17") (term "0,0,0,0,0,1,1,1"))
                                       (rule "polySimp_pullOutFactor0b" (formula "17") (term "0,0,0,1,1,1"))
                                       (rule "add_literals" (formula "17") (term "1,1,0,0,0,1,1,1"))
                                       (rule "times_zero_1" (formula "17") (term "1,0,0,0,1,1,1"))
                                       (rule "add_literals" (formula "17") (term "0,0,0,1,1,1"))
                                       (rule "qeq_literals" (formula "17") (term "0,0,1,1,1"))
                                        (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "107")))
                                       (rule "inEqSimp_contradInEq0" (formula "17") (term "1") (ifseqformula "4"))
                                       (rule "inEqSimp_homoInEq1" (formula "17") (term "0,1"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,1"))
                                       (rule "mul_literals" (formula "17") (term "0,1,0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "17") (term "0,0,1"))
                                       (rule "polySimp_addComm0" (formula "17") (term "0,0,0,1"))
                                       (rule "polySimp_pullOutFactor0b" (formula "17") (term "0,0,1"))
                                       (rule "add_literals" (formula "17") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "17") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "17") (term "0,0,1"))
                                       (rule "leq_literals" (formula "17") (term "0,1"))
                                        (builtin "One Step Simplification" (formula "17"))
                                       (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "17"))
                                       (rule "qeq_literals" (formula "2") (term "0"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "closeFalse" (formula "2"))
                                    )
                                 )
                                 (branch "self.equal_buckets = TRUE FALSE"
                                    (rule "applyEq" (formula "50") (term "1,0,2,0") (ifseqformula "46"))
                                    (rule "eqSymm" (formula "50"))
                                    (rule "applyEq" (formula "57") (term "0") (ifseqformula "46"))
                                    (rule "inEqSimp_commuteLeq" (formula "57"))
                                    (rule "applyEq" (formula "48") (term "1,1,1,0,0") (ifseqformula "46"))
                                    (rule "applyEq" (formula "56") (term "1") (ifseqformula "46"))
                                    (rule "applyEq" (formula "49") (term "1,1,0,0") (ifseqformula "46"))
                                    (rule "applyEq" (formula "49") (term "1,1,0,0,1,0") (ifseqformula "46"))
                                    (rule "applyEq" (formula "55") (term "0") (ifseqformula "46"))
                                    (rule "applyEq" (formula "57") (term "1,1,1,0,0,1,0") (ifseqformula "46"))
                                    (rule "applyEq" (formula "57") (term "1,1,1,0,0") (ifseqformula "46"))
                                    (rule "applyEq" (formula "50") (term "1,0,2,0") (ifseqformula "46"))
                                    (rule "eqSymm" (formula "50"))
                                    (rule "applyEq" (formula "53") (term "1") (ifseqformula "46"))
                                    (rule "nnf_notAnd" (formula "36") (term "0,0,1,0,1,0"))
                                    (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0,1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0,1,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0,1,0,0,1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "36") (term "0,1,0,0,1,0,0,1,0,1,0"))
                                    (rule "mul_literals" (formula "36") (term "0,0,1,0,0,1,0,0,1,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0,1,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "36") (term "0,0,0,1,0,0,1,0,1,0"))
                                    (rule "add_literals" (formula "36") (term "0,0,0,0,1,0,0,1,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0,1,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0,1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0,1,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0,1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "36") (term "0,1,1,0,0,1,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "36") (term "1,0,1,1,0,0,1,0,1,0"))
                                    (rule "mul_literals" (formula "36") (term "0,0,1,1,0,0,1,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "36") (term "1,0,1,1,0,0,1,0,1,0"))
                                    (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0,1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "36") (term "1,0,0,0,0,0,1,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0,0,0,0,1,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "36") (term "0,1,0,0,0,0,0,1,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "36") (term "0,0,0,0,0,1,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0,1,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,0,1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "36") (term "1,0,0,0,1,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0,0,1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "36") (term "0,1,0,0,0,1,0,1,0"))
                                    (rule "mul_literals" (formula "36") (term "0,0,1,0,0,0,1,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "36") (term "1,0,1,0,0,0,1,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "36") (term "1,0,1,0,0,0,1,0,1,0"))
                                    (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "34") (term "0,0,2,0,1,0"))
                                    (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "38") (term "1,1,1,0,0,1,0"))
                                    (rule "onlyCreatedObjectsAreReferencedFinal" (formula "81") (term "0") (ifseqformula "15") (ifseqformula "7"))
                                    (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "63"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "40") (term "0,0,1,1,1,0"))
                                    (rule "arrayLengthNotNegative" (formula "56") (term "0"))
                                    (rule "arrayLengthIsAShort" (formula "57") (term "0"))
                                     (builtin "One Step Simplification" (formula "57"))
                                    (rule "true_left" (formula "57"))
                                    (rule "arrayLengthIsAShort" (formula "55") (term "0"))
                                     (builtin "One Step Simplification" (formula "55"))
                                    (rule "true_left" (formula "55"))
                                    (rule "arrayLengthNotNegative" (formula "55") (term "0"))
                                    (rule "inEqSimp_subsumption1" (formula "55") (ifseqformula "56"))
                                    (rule "leq_literals" (formula "55") (term "0"))
                                     (builtin "One Step Simplification" (formula "55"))
                                    (rule "true_left" (formula "55"))
                                    (rule "commute_or" (formula "27") (term "0"))
                                    (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "38") (term "1") (inst "b=b"))
                                     (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "67")) (ifInst ""  (formula "68")) (ifInst ""  (formula "24")))
                                    (rule "translateJavaMulInt" (formula "38") (term "1,1,0,0,1"))
                                    (rule "mul_literals" (formula "38") (term "1,1,0,0,1"))
                                    (rule "eqSymm" (formula "38") (term "0,0,0,0,1"))
                                    (rule "replace_known_right" (formula "38") (term "0,0,0,0,1") (ifseqformula "78"))
                                     (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "23")))
                                    (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0,1,1"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "38") (term "0,1,0,1,1"))
                                    (rule "applyEq" (formula "38") (term "0,0,0,1") (ifseqformula "9"))
                                    (rule "applyEq" (formula "38") (term "0,1,0,1") (ifseqformula "9"))
                                    (rule "replace_known_left" (formula "38") (term "1,0,1") (ifseqformula "25"))
                                     (builtin "One Step Simplification" (formula "38"))
                                    (rule "applyEq" (formula "38") (term "0,1,0,0,1,0,0,1,1") (ifseqformula "9"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0,1,1"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0,1,1"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0,1,1"))
                                    (rule "mul_literals" (formula "38") (term "0,1,1,0,0,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0,1,1"))
                                    (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0,1,1"))
                                    (rule "inEqSimp_subsumption1" (formula "38") (term "0,1") (ifseqformula "46"))
                                    (rule "leq_literals" (formula "38") (term "0,0,1"))
                                     (builtin "One Step Simplification" (formula "38"))
                                    (rule "nnf_imp2or" (formula "38") (term "0,1"))
                                    (rule "nnf_notAnd" (formula "38") (term "0,0,1"))
                                    (rule "inEqSimp_notLeq" (formula "38") (term "1,0,0,1"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0,1"))
                                    (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0,1"))
                                    (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0,1"))
                                    (rule "add_literals" (formula "38") (term "0,0,0,1,0,0,1"))
                                    (rule "add_zero_left" (formula "38") (term "0,0,1,0,0,1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "1,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0,1"))
                                    (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0,1"))
                                    (rule "inEqSimp_notGeq" (formula "38") (term "0,0,0,1"))
                                    (rule "mul_literals" (formula "38") (term "1,0,0,0,0,0,1"))
                                    (rule "add_literals" (formula "38") (term "0,0,0,0,0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0,1"))
                                    (rule "mul_literals" (formula "38") (term "1,0,0,0,1"))
                                    (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "37") (term "0,1,0,1,0,1,0"))
                                    (rule "commute_or" (formula "50") (term "0,0,1,0"))
                                    (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "38") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "64")) (ifInst ""  (formula "53")))
                                    (rule "translateJavaSubInt" (formula "38") (term "3,0,1,0,0"))
                                    (rule "polySimp_elimSub" (formula "38") (term "3,0,1,0,0"))
                                    (rule "mul_literals" (formula "38") (term "1,3,0,1,0,0"))
                                    (rule "polySimp_addComm0" (formula "38") (term "3,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "38") (term "1,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "38") (term "1,0,0,0,0,0,0"))
                                    (rule "replace_known_left" (formula "38") (term "1,0,0,0,0,0,0") (ifseqformula "52"))
                                     (builtin "One Step Simplification" (formula "38"))
                                    (rule "inEqSimp_commuteLeq" (formula "38") (term "1,1,0,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "38") (term "0,1,0,0,0,0"))
                                    (rule "applyEq" (formula "38") (term "1,1,0,0,0") (ifseqformula "54"))
                                    (rule "applyEq" (formula "38") (term "1,0,1,0,0") (ifseqformula "48"))
                                    (rule "applyEq" (formula "38") (term "1,1,1,0,0,0,0") (ifseqformula "54"))
                                    (rule "replace_known_left" (formula "38") (term "1,1,0,0,0,0") (ifseqformula "57"))
                                     (builtin "One Step Simplification" (formula "38"))
                                    (rule "applyEq" (formula "38") (term "1,3,0,1,0,0") (ifseqformula "54"))
                                    (rule "applyEq" (formula "38") (term "0,0,0,0,0,0,0,0") (ifseqformula "48"))
                                    (rule "replace_known_right" (formula "38") (term "0,0,0,0,0,0,0") (ifseqformula "65"))
                                     (builtin "One Step Simplification" (formula "38"))
                                    (rule "applyEq" (formula "38") (term "0,0,1,0,0,0") (ifseqformula "48"))
                                    (rule "replace_known_left" (formula "38") (term "1,0,0,0") (ifseqformula "58"))
                                     (builtin "One Step Simplification" (formula "38"))
                                    (rule "applyEq" (formula "38") (term "0,0,0,0,0") (ifseqformula "54"))
                                    (rule "eqSymm" (formula "38") (term "0,0,0,0"))
                                    (rule "replace_known_left" (formula "38") (term "0,0,0,0") (ifseqformula "47"))
                                     (builtin "One Step Simplification" (formula "38"))
                                    (rule "applyEq" (formula "38") (term "0,0,0,0") (ifseqformula "54"))
                                    (rule "replace_known_left" (formula "38") (term "0,0,0") (ifseqformula "46"))
                                     (builtin "One Step Simplification" (formula "38"))
                                    (rule "commute_or" (formula "59") (term "0,0,1,0"))
                                    (rule "allLeft" (formula "13") (inst "t=b_0"))
                                    (rule "replaceKnownSelect_taclet0100012011_7" (formula "13") (term "0,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet0100012011_8" (formula "13") (term "0,1"))
                                    (rule "inEqSimp_commuteGeq" (formula "13") (term "1"))
                                    (rule "inEqSimp_homoInEq1" (formula "13") (term "1,0"))
                                    (rule "polySimp_addComm1" (formula "13") (term "0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "1,1,0"))
                                    (rule "polySimp_rightDist" (formula "13") (term "1,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0"))
                                    (rule "mul_literals" (formula "13") (term "0,1,1,0"))
                                    (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "13") (term "1,0") (ifseqformula "4"))
                                    (rule "inEqSimp_homoInEq1" (formula "13") (term "0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0"))
                                    (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0"))
                                    (rule "polySimp_addComm1" (formula "13") (term "0,0,0,1,0"))
                                    (rule "add_literals" (formula "13") (term "0,0,0,0,1,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,1,0"))
                                    (rule "add_literals" (formula "13") (term "1,1,0,0,1,0"))
                                    (rule "times_zero_1" (formula "13") (term "1,0,0,1,0"))
                                    (rule "add_zero_right" (formula "13") (term "0,0,1,0"))
                                    (rule "leq_literals" (formula "13") (term "0,1,0"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "inEqSimp_contradInEq1" (formula "13") (term "0") (ifseqformula "2"))
                                    (rule "qeq_literals" (formula "13") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "pullOutSelect" (formula "13") (term "0") (inst "selectSK=arr_5"))
                                    (rule "simplifySelectOfAnon" (formula "13"))
                                     (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "87")) (ifInst ""  (formula "22")))
                                    (rule "elementOfArrayRangeConcrete" (formula "13") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "inEqSimp_commuteLeq" (formula "14"))
                                    (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                                    (rule "replace_known_left" (formula "13") (term "0,0,0") (ifseqformula "2"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0"))
                                    (rule "inEqSimp_subsumption1" (formula "13") (term "0,0") (ifseqformula "4"))
                                    (rule "inEqSimp_homoInEq0" (formula "13") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "13") (term "1,1,0,0,0,0"))
                                    (rule "times_zero_1" (formula "13") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "13") (term "0,0,0,0"))
                                    (rule "qeq_literals" (formula "13") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "applyEqReverse" (formula "14") (term "1") (ifseqformula "13"))
                                    (rule "hideAuxiliaryEq" (formula "13"))
                                    (rule "allLeft" (formula "14") (inst "t=Z(0(#))"))
                                    (rule "add_zero_right" (formula "14") (term "0,2,0,1"))
                                    (rule "leq_literals" (formula "14") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "14"))
                                    (rule "inEqSimp_homoInEq1" (formula "14") (term "0"))
                                    (rule "mul_literals" (formula "14") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "14") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0"))
                                    (rule "mul_literals" (formula "14") (term "1,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "14") (term "0") (ifseqformula "48"))
                                    (rule "qeq_literals" (formula "14") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "14"))
                                    (rule "pullOutSelect" (formula "14") (term "1") (inst "selectSK=arr_6"))
                                    (rule "simplifySelectOfAnon" (formula "14"))
                                     (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "88")) (ifInst ""  (formula "23")))
                                    (rule "elementOfArrayRangeConcrete" (formula "14") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "14"))
                                    (rule "leq_literals" (formula "14") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "14"))
                                    (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0"))
                                    (rule "applyEq" (formula "14") (term "1,0") (ifseqformula "10"))
                                    (rule "inEqSimp_subsumption1" (formula "14") (term "0,0") (ifseqformula "49"))
                                    (rule "leq_literals" (formula "14") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "14"))
                                    (rule "applyEqReverse" (formula "15") (term "1") (ifseqformula "14"))
                                    (rule "hideAuxiliaryEq" (formula "14"))
                                    (rule "pullOutSelect" (formula "14") (term "0") (inst "selectSK=arr_7"))
                                    (rule "simplifySelectOfAnon" (formula "14"))
                                     (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "88")) (ifInst ""  (formula "23")))
                                    (rule "elementOfArrayRangeConcrete" (formula "14") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "14"))
                                    (rule "leq_literals" (formula "14") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "14"))
                                    (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0"))
                                    (rule "inEqSimp_subsumption1" (formula "14") (term "0,0") (ifseqformula "49"))
                                    (rule "leq_literals" (formula "14") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "14"))
                                    (rule "applyEqReverse" (formula "15") (term "0") (ifseqformula "14"))
                                    (rule "hideAuxiliaryEq" (formula "14"))
                                    (rule "cnf_rightDist" (formula "42") (term "0"))
                                    (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "40") (term "0,0,0") (inst "i=i") (inst "j=j_1"))
                                     (builtin "One Step Simplification" (formula "40"))
                                    (rule "inEqSimp_ltToLeq" (formula "40") (term "1,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "40") (term "1,0,0,1,0,0,0,0"))
                                    (rule "mul_literals" (formula "40") (term "0,1,0,0,1,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "40") (term "0,0,1,0,0,0,0"))
                                    (rule "add_literals" (formula "40") (term "0,0,0,1,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "40") (term "1,0,0,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "40") (term "1,0,0,1,0,0,1,0,0,0"))
                                    (rule "mul_literals" (formula "40") (term "0,1,0,0,1,0,0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "40") (term "0,0,1,0,0,1,0,0,0"))
                                    (rule "add_literals" (formula "40") (term "0,0,0,1,0,0,1,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,0,1,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "40") (term "1,0,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "1,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "40") (term "1,1,0,0,0,0"))
                                    (rule "mul_literals" (formula "40") (term "0,1,1,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "40") (term "1,1,1,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "1,0,0,1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,0,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "40") (term "1,1,0,0,1,0,0,0"))
                                    (rule "mul_literals" (formula "40") (term "0,1,1,0,0,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,0,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "40") (term "1,1,1,0,0,1,0,0,0"))
                                    (rule "nnf_imp2or" (formula "40") (term "0,0,0"))
                                    (rule "nnf_notAnd" (formula "40") (term "0,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "40") (term "1,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "40") (term "1,0,0,1,0,0,0,0"))
                                    (rule "mul_literals" (formula "40") (term "0,1,0,0,1,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "40") (term "0,0,1,0,0,0,0"))
                                    (rule "add_literals" (formula "40") (term "0,0,0,1,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "40") (term "1,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "40") (term "1,1,0,0,0,0"))
                                    (rule "mul_literals" (formula "40") (term "0,1,1,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "40") (term "1,1,1,0,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "40") (term "0,0,0,0,0"))
                                    (rule "mul_literals" (formula "40") (term "1,0,0,0,0,0,0,0"))
                                    (rule "add_literals" (formula "40") (term "0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "0,0,0,0,0"))
                                    (rule "mul_literals" (formula "40") (term "1,0,0,0,0,0"))
                                    (rule "nnf_imp2or" (formula "40") (term "0,1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "40") (term "0,0,1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "40") (term "1,0,0,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "40") (term "1,0,0,1,0,0,1,0,0,0"))
                                    (rule "mul_literals" (formula "40") (term "0,1,0,0,1,0,0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "40") (term "0,0,1,0,0,1,0,0,0"))
                                    (rule "add_literals" (formula "40") (term "0,0,0,1,0,0,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "40") (term "1,0,0,1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,0,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "40") (term "1,1,0,0,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,0,1,0,0,0"))
                                    (rule "mul_literals" (formula "40") (term "0,1,1,0,0,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "40") (term "1,1,1,0,0,1,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "40") (term "0,0,0,1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,0,0,0,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "0,0,0,1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,0,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "40") (term "1,0,0,0,1,0,0,0"))
                                    (rule "mul_literals" (formula "40") (term "0,1,0,0,0,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,0,0,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "40") (term "1,1,0,0,0,1,0,0,0"))
                                    (rule "onlyCreatedObjectsAreReferencedFinal" (formula "50") (term "0") (ifseqformula "18") (ifseqformula "8"))
                                    (rule "applyEq" (formula "50") (term "1,0,1") (ifseqformula "51"))
                                    (rule "replace_known_left" (formula "50") (term "1") (ifseqformula "5"))
                                     (builtin "One Step Simplification" (formula "50"))
                                    (rule "true_left" (formula "50"))
                                    (rule "distr_forallAnd" (formula "42"))
                                    (rule "andLeft" (formula "42"))
                                    (rule "allLeft" (formula "65") (inst "t=b_0"))
                                    (rule "inEqSimp_commuteGeq" (formula "65") (term "1,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "65") (term "1,0") (ifseqformula "4"))
                                    (rule "inEqSimp_homoInEq1" (formula "65") (term "0,1,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "65") (term "0,0,1,0"))
                                    (rule "add_literals" (formula "65") (term "1,1,0,0,1,0"))
                                    (rule "times_zero_1" (formula "65") (term "1,0,0,1,0"))
                                    (rule "add_literals" (formula "65") (term "0,0,1,0"))
                                    (rule "leq_literals" (formula "65") (term "0,1,0"))
                                     (builtin "One Step Simplification" (formula "65"))
                                    (rule "inEqSimp_contradInEq1" (formula "65") (term "0") (ifseqformula "2"))
                                    (rule "qeq_literals" (formula "65") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "65"))
                                    (rule "pullOutSelect" (formula "65") (term "1") (inst "selectSK=arr_8"))
                                    (rule "simplifySelectOfStore" (formula "65"))
                                     (builtin "One Step Simplification" (formula "65"))
                                    (rule "replaceKnownSelect_taclet110100012011_11" (formula "65") (term "2,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet110100012011_12" (formula "65") (term "2,0"))
                                    (rule "castDel" (formula "65") (term "1,0"))
                                    (rule "inEqSimp_contradEq7" (formula "65") (term "0,0") (ifseqformula "4"))
                                    (rule "polySimp_mulComm0" (formula "65") (term "1,0,0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "65") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "65") (term "1,1,0,0,0,0"))
                                    (rule "times_zero_1" (formula "65") (term "1,0,0,0,0"))
                                    (rule "add_literals" (formula "65") (term "0,0,0,0"))
                                    (rule "leq_literals" (formula "65") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "65"))
                                    (rule "applyEqReverse" (formula "66") (term "1") (ifseqformula "65"))
                                    (rule "hideAuxiliaryEq" (formula "65"))
                                    (rule "pullOutSelect" (formula "65") (term "0") (inst "selectSK=arr_9"))
                                    (rule "simplifySelectOfStore" (formula "65"))
                                     (builtin "One Step Simplification" (formula "65"))
                                    (rule "replaceKnownSelect_taclet0100012011_7" (formula "65") (term "2,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet0100012011_8" (formula "65") (term "2,0"))
                                    (rule "castDel" (formula "65") (term "1,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "66"))
                                    (rule "inEqSimp_contradEq7" (formula "65") (term "0,0") (ifseqformula "4"))
                                    (rule "polySimp_rightDist" (formula "65") (term "1,0,0,0,0"))
                                    (rule "mul_literals" (formula "65") (term "0,1,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "65") (term "0,0,0,0"))
                                    (rule "polySimp_addComm1" (formula "65") (term "0,0,0,0,0"))
                                    (rule "add_literals" (formula "65") (term "0,0,0,0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "65") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "65") (term "1,1,0,0,0,0"))
                                    (rule "times_zero_1" (formula "65") (term "1,0,0,0,0"))
                                    (rule "add_literals" (formula "65") (term "0,0,0,0"))
                                    (rule "leq_literals" (formula "65") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "65"))
                                    (rule "applyEqReverse" (formula "66") (term "1") (ifseqformula "65"))
                                    (rule "hideAuxiliaryEq" (formula "65"))
                                    (rule "inEqSimp_commuteLeq" (formula "65"))
                                    (rule "allLeft" (formula "65") (inst "t=add(Z(neglit(1(#))), j_0)"))
                                    (rule "polySimp_addAssoc" (formula "65") (term "0,2,0,1"))
                                    (rule "add_literals" (formula "65") (term "0,0,2,0,1"))
                                    (rule "add_zero_left" (formula "65") (term "0,2,0,1"))
                                    (rule "inEqSimp_commuteGeq" (formula "65") (term "1"))
                                    (rule "inEqSimp_homoInEq0" (formula "65") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "65") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "65") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "65") (term "0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "65") (term "0,0,0"))
                                    (rule "add_literals" (formula "65") (term "0,0,0,0"))
                                    (rule "add_zero_left" (formula "65") (term "0,0,0"))
                                    (rule "inEqSimp_homoInEq1" (formula "65") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "65") (term "1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "65") (term "1,0,1,0"))
                                    (rule "mul_literals" (formula "65") (term "0,1,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "65") (term "0,1,0"))
                                    (rule "polySimp_addComm0" (formula "65") (term "0,0,1,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "65") (term "0,1,0"))
                                    (rule "add_literals" (formula "65") (term "1,1,0,1,0"))
                                    (rule "times_zero_1" (formula "65") (term "1,0,1,0"))
                                    (rule "add_zero_right" (formula "65") (term "0,1,0"))
                                    (rule "leq_literals" (formula "65") (term "1,0"))
                                     (builtin "One Step Simplification" (formula "65"))
                                    (rule "inEqSimp_invertInEq1" (formula "65") (term "0"))
                                    (rule "mul_literals" (formula "65") (term "1,0"))
                                    (rule "polySimp_mulLiterals" (formula "65") (term "0,0"))
                                    (rule "polySimp_elimOne" (formula "65") (term "0,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "65") (term "0") (ifseqformula "49"))
                                    (rule "qeq_literals" (formula "65") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "65"))
                                    (rule "pullOutSelect" (formula "65") (term "0") (inst "selectSK=arr_10"))
                                    (rule "simplifySelectOfStore" (formula "65"))
                                     (builtin "One Step Simplification" (formula "65"))
                                    (rule "castDel" (formula "65") (term "1,0"))
                                    (rule "polySimp_homoEq" (formula "65") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "65") (term "0,0,0"))
                                    (rule "add_literals" (formula "65") (term "1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "65") (term "1,0,0,0"))
                                    (rule "add_literals" (formula "65") (term "0,0,0"))
                                    (rule "equal_literals" (formula "65") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "65"))
                                    (rule "simplifySelectOfAnon" (formula "65"))
                                     (builtin "One Step Simplification" (formula "65") (ifInst ""  (formula "90")) (ifInst ""  (formula "22")))
                                    (rule "elementOfArrayRangeConcrete" (formula "65") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "65"))
                                    (rule "inEqSimp_commuteLeq" (formula "66"))
                                    (rule "inEqSimp_homoInEq0" (formula "65") (term "0,0,0"))
                                    (rule "mul_literals" (formula "65") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "65") (term "0,0,0,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "65") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "65") (term "1,0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "65") (term "1,0,1,0,0"))
                                    (rule "mul_literals" (formula "65") (term "0,1,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "65") (term "0,1,0,0"))
                                    (rule "polySimp_addComm0" (formula "65") (term "0,0,1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "65") (term "0,1,0,0"))
                                    (rule "add_literals" (formula "65") (term "1,1,0,1,0,0"))
                                    (rule "times_zero_1" (formula "65") (term "1,0,1,0,0"))
                                    (rule "add_literals" (formula "65") (term "0,1,0,0"))
                                    (rule "qeq_literals" (formula "65") (term "1,0,0"))
                                     (builtin "One Step Simplification" (formula "65"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "65") (term "0,0"))
                                    (rule "mul_literals" (formula "65") (term "1,0,0"))
                                    (rule "inEqSimp_subsumption1" (formula "65") (term "0,0") (ifseqformula "49"))
                                    (rule "leq_literals" (formula "65") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "65"))
                                    (rule "applyEqReverse" (formula "66") (term "1") (ifseqformula "65"))
                                    (rule "hideAuxiliaryEq" (formula "65"))
                                    (rule "pullOutSelect" (formula "65") (term "0") (inst "selectSK=arr_11"))
                                    (rule "simplifySelectOfStore" (formula "65"))
                                     (builtin "One Step Simplification" (formula "65"))
                                    (rule "castDel" (formula "65") (term "0"))
                                    (rule "applyEqReverse" (formula "66") (term "0") (ifseqformula "65"))
                                    (rule "hideAuxiliaryEq" (formula "65"))
                                    (rule "inEqSimp_commuteGeq" (formula "65"))
                                    (rule "allLeft" (formula "65") (inst "t=add(Z(1(#)), b_0)"))
                                    (rule "replaceKnownSelect_taclet110100012011_19" (formula "65") (term "1,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet110100012011_20" (formula "65") (term "1,1"))
                                    (rule "polySimp_addAssoc" (formula "65") (term "0,2,0,1"))
                                    (rule "add_literals" (formula "65") (term "0,0,2,0,1"))
                                    (rule "inEqSimp_commuteGeq" (formula "65") (term "1,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "65") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "65") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "65") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "65") (term "0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "65") (term "0,0,0"))
                                    (rule "add_literals" (formula "65") (term "0,0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "65") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "65") (term "0,0,0"))
                                    (rule "polySimp_elimOne" (formula "65") (term "0,0,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "65") (term "0,0") (ifseqformula "2"))
                                    (rule "qeq_literals" (formula "65") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "65"))
                                    (rule "inEqSimp_contradInEq1" (formula "65") (term "0") (ifseqformula "4"))
                                    (rule "inEqSimp_homoInEq1" (formula "65") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "65") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "65") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "65") (term "0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "65") (term "0,0,0"))
                                    (rule "polySimp_addComm1" (formula "65") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "65") (term "0,0,0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "65") (term "0,0,0"))
                                    (rule "add_literals" (formula "65") (term "1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "65") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "65") (term "0,0,0"))
                                    (rule "leq_literals" (formula "65") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "65"))
                                    (rule "pullOutSelect" (formula "65") (term "0") (inst "selectSK=arr_12"))
                                    (rule "simplifySelectOfStore" (formula "65"))
                                     (builtin "One Step Simplification" (formula "65"))
                                    (rule "castDel" (formula "65") (term "1,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "66"))
                                    (rule "pullOutSelect" (formula "65") (term "2,0") (inst "selectSK=arr_13"))
                                    (rule "simplifySelectOfAnon" (formula "65"))
                                     (builtin "One Step Simplification" (formula "65") (ifInst ""  (formula "91")) (ifInst ""  (formula "22")))
                                    (rule "elementOfArrayRangeConcrete" (formula "65") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "65"))
                                    (rule "inEqSimp_commuteLeq" (formula "65") (term "1,0,0"))
                                    (rule "replace_known_left" (formula "65") (term "1,0,0") (ifseqformula "4"))
                                     (builtin "One Step Simplification" (formula "65"))
                                    (rule "inEqSimp_homoInEq0" (formula "65") (term "0,0"))
                                    (rule "mul_literals" (formula "65") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "65") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "65") (term "0,0"))
                                    (rule "mul_literals" (formula "65") (term "1,0,0"))
                                    (rule "inEqSimp_subsumption1" (formula "65") (term "0,0") (ifseqformula "2"))
                                    (rule "leq_literals" (formula "65") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "65"))
                                    (rule "applyEqReverse" (formula "66") (term "2,0") (ifseqformula "65"))
                                    (rule "hideAuxiliaryEq" (formula "65"))
                                    (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "66"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "0,0"))
                                    (rule "polySimp_addComm0" (formula "13") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "13"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                                    (rule "polySimp_elimOne" (formula "13") (term "0"))
                                    (rule "allLeft" (formula "68") (inst "t=Z(0(#))"))
                                    (rule "add_literals" (formula "68") (term "0,2,0,1"))
                                    (rule "leq_literals" (formula "68") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "68"))
                                    (rule "inEqSimp_commuteGeq" (formula "68") (term "0"))
                                    (rule "inEqSimp_contradInEq1" (formula "68") (term "0") (ifseqformula "50"))
                                    (rule "qeq_literals" (formula "68") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "68"))
                                    (rule "pullOutSelect" (formula "68") (term "0") (inst "selectSK=arr_14"))
                                    (rule "simplifySelectOfStore" (formula "68"))
                                     (builtin "One Step Simplification" (formula "68"))
                                    (rule "replaceKnownSelect_taclet110100012011_15" (formula "68") (term "2,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet110100012011_16" (formula "68") (term "2,0"))
                                    (rule "castDel" (formula "68") (term "1,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "69"))
                                    (rule "inEqSimp_contradEq7" (formula "68") (term "0,0") (ifseqformula "50"))
                                    (rule "mul_literals" (formula "68") (term "1,0,0,0,0"))
                                    (rule "add_literals" (formula "68") (term "0,0,0,0"))
                                    (rule "leq_literals" (formula "68") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "68"))
                                    (rule "applyEqReverse" (formula "69") (term "1") (ifseqformula "68"))
                                    (rule "hideAuxiliaryEq" (formula "68"))
                                    (rule "pullOutSelect" (formula "68") (term "0") (inst "selectSK=arr_15"))
                                    (rule "simplifySelectOfStore" (formula "68"))
                                     (builtin "One Step Simplification" (formula "68"))
                                    (rule "replaceKnownSelect_taclet110100012011_13" (formula "68") (term "2,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet110100012011_14" (formula "68") (term "2,0"))
                                    (rule "castDel" (formula "68") (term "1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "69"))
                                    (rule "inEqSimp_contradEq7" (formula "68") (term "0,0") (ifseqformula "50"))
                                    (rule "mul_literals" (formula "68") (term "1,0,0,0,0"))
                                    (rule "add_literals" (formula "68") (term "0,0,0,0"))
                                    (rule "leq_literals" (formula "68") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "68"))
                                    (rule "applyEqReverse" (formula "69") (term "1") (ifseqformula "68"))
                                    (rule "hideAuxiliaryEq" (formula "68"))
                                    (rule "all_pull_out3" (formula "42") (term "0"))
                                    (rule "allLeft" (formula "16") (inst "t=add(Z(1(#)), b_0)"))
                                    (rule "replaceKnownSelect_taclet0100012011_7" (formula "16") (term "1,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet0100012011_8" (formula "16") (term "1,1"))
                                    (rule "polySimp_addAssoc" (formula "16") (term "0,2,0,1"))
                                    (rule "add_literals" (formula "16") (term "0,0,2,0,1"))
                                    (rule "replaceKnownSelect_taclet110100012011_27" (formula "16") (term "0,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet110100012011_28" (formula "16") (term "0,1"))
                                    (rule "inEqSimp_homoInEq0" (formula "16") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "16") (term "0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "16") (term "0,0,0"))
                                    (rule "add_literals" (formula "16") (term "0,0,0,0"))
                                    (rule "inEqSimp_homoInEq1" (formula "16") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "16") (term "1,0,1,0"))
                                    (rule "mul_literals" (formula "16") (term "0,1,0,1,0"))
                                    (rule "polySimp_addComm1" (formula "16") (term "0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0"))
                                    (rule "add_literals" (formula "16") (term "0,0,0,1,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "16") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0"))
                                    (rule "polySimp_elimOne" (formula "16") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "1,1,0"))
                                    (rule "polySimp_rightDist" (formula "16") (term "1,1,0"))
                                    (rule "mul_literals" (formula "16") (term "0,1,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0"))
                                    (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "16") (term "0,0") (ifseqformula "2"))
                                    (rule "qeq_literals" (formula "16") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "cnf_rightDist" (formula "42") (term "0,1"))
                                    (rule "commute_or_2" (formula "45") (term "0"))
                                    (rule "all_pull_out1" (formula "41") (term "0,1,0"))
                                    (rule "all_pull_out3" (formula "55") (term "0"))
                                    (rule "cnf_rightDist" (formula "42") (term "0,1,0"))
                                    (rule "all_pull_out3" (formula "64") (term "0"))
                                    (rule "cnf_rightDist" (formula "44") (term "0"))
                                    (rule "allLeft" (formula "18") (inst "t=Z(0(#))"))
                                    (rule "replaceKnownSelect_taclet110100012011_13" (formula "18") (term "0,1,0,1,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet110100012011_14" (formula "18") (term "0,1,0,1,1"))
                                    (rule "add_literals" (formula "18") (term "0,2,2,1,1,1"))
                                    (rule "replaceKnownSelect_taclet110100012011_15" (formula "18") (term "2,1,1,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet110100012011_16" (formula "18") (term "2,1,1,1"))
                                    (rule "leq_literals" (formula "18") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "18"))
                                    (rule "mul_literals" (formula "18") (term "1,0,1,1"))
                                    (rule "add_zero_right" (formula "18") (term "0,1,1"))
                                    (rule "polySimp_homoEq" (formula "18") (term "0,1,1,1"))
                                    (rule "mul_literals" (formula "18") (term "1,0,0,1,1,1"))
                                    (rule "add_zero_right" (formula "18") (term "0,0,1,1,1"))
                                    (rule "inEqSimp_commuteGeq" (formula "18") (term "0"))
                                    (rule "polySimp_sepPosMonomial" (formula "18") (term "0,1,1,1"))
                                    (rule "mul_literals" (formula "18") (term "1,0,1,1,1"))
                                    (rule "inEqSimp_contradEq7" (formula "18") (term "0,1,1,1") (ifseqformula "52"))
                                    (rule "mul_literals" (formula "18") (term "1,0,0,0,1,1,1"))
                                    (rule "add_literals" (formula "18") (term "0,0,0,1,1,1"))
                                    (rule "leq_literals" (formula "18") (term "0,0,1,1,1"))
                                     (builtin "One Step Simplification" (formula "18"))
                                    (rule "inEqSimp_contradInEq1" (formula "18") (term "0") (ifseqformula "52"))
                                    (rule "qeq_literals" (formula "18") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "18"))
                                    (rule "allLeft" (formula "17") (inst "t=add(Z(neglit(2(#))), j_0)"))
                                    (rule "polySimp_addAssoc" (formula "17") (term "0,2,0,1"))
                                    (rule "add_literals" (formula "17") (term "0,0,2,0,1"))
                                    (rule "replaceKnownSelect_taclet110100012011_22" (formula "17") (term "0,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet110100012011_23" (formula "17") (term "0,1"))
                                    (rule "inEqSimp_commuteGeq" (formula "17") (term "1"))
                                    (rule "inEqSimp_homoInEq1" (formula "17") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "17") (term "1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "17") (term "1,0,1,0"))
                                    (rule "mul_literals" (formula "17") (term "0,1,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "17") (term "0,1,0"))
                                    (rule "polySimp_addComm1" (formula "17") (term "0,0,1,0"))
                                    (rule "add_literals" (formula "17") (term "0,0,0,1,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,1,0"))
                                    (rule "add_literals" (formula "17") (term "1,1,0,1,0"))
                                    (rule "times_zero_1" (formula "17") (term "1,0,1,0"))
                                    (rule "add_zero_right" (formula "17") (term "0,1,0"))
                                    (rule "leq_literals" (formula "17") (term "1,0"))
                                     (builtin "One Step Simplification" (formula "17"))
                                    (rule "inEqSimp_homoInEq0" (formula "17") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "17") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "17") (term "1,0,0"))
                                    (rule "mul_literals" (formula "17") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "17") (term "0,0"))
                                    (rule "add_literals" (formula "17") (term "0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "17") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "17") (term "0,0"))
                                    (rule "polySimp_elimOne" (formula "17") (term "0,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "17") (term "0") (ifseqformula "53"))
                                    (rule "qeq_literals" (formula "17") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "17"))
                                    (rule "pullOutSelect" (formula "17") (term "0") (inst "selectSK=arr_16"))
                                    (rule "simplifySelectOfAnon" (formula "17"))
                                     (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "95")) (ifInst ""  (formula "27")))
                                    (rule "elementOfArrayRangeConcrete" (formula "17") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "17"))
                                    (rule "inEqSimp_commuteLeq" (formula "18"))
                                    (rule "inEqSimp_homoInEq0" (formula "17") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "17") (term "1,0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "17") (term "1,0,1,0,0"))
                                    (rule "mul_literals" (formula "17") (term "0,1,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "17") (term "0,1,0,0"))
                                    (rule "polySimp_addComm0" (formula "17") (term "0,0,1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,1,0,0"))
                                    (rule "add_literals" (formula "17") (term "1,1,0,1,0,0"))
                                    (rule "times_zero_1" (formula "17") (term "1,0,1,0,0"))
                                    (rule "add_literals" (formula "17") (term "0,1,0,0"))
                                    (rule "qeq_literals" (formula "17") (term "1,0,0"))
                                     (builtin "One Step Simplification" (formula "17"))
                                    (rule "inEqSimp_homoInEq0" (formula "17") (term "0,0"))
                                    (rule "mul_literals" (formula "17") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "17") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "0,0"))
                                    (rule "mul_literals" (formula "17") (term "1,0,0"))
                                    (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "54"))
                                     (builtin "One Step Simplification" (formula "17"))
                                    (rule "applyEqReverse" (formula "18") (term "1") (ifseqformula "17"))
                                    (rule "hideAuxiliaryEq" (formula "17"))
                                    (rule "inEqSimp_commuteGeq" (formula "17"))
                                    (rule "allLeft" (formula "32") (inst "t=b_0"))
                                    (rule "inEqSimp_commuteGeq" (formula "32") (term "1,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "32") (term "0,0") (ifseqformula "2"))
                                    (rule "qeq_literals" (formula "32") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "32"))
                                    (rule "inEqSimp_contradInEq1" (formula "32") (term "0") (ifseqformula "4"))
                                    (rule "inEqSimp_homoInEq1" (formula "32") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,0"))
                                    (rule "add_literals" (formula "32") (term "1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "32") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "32") (term "0,0,0"))
                                    (rule "leq_literals" (formula "32") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "32"))
                                    (rule "allLeft" (formula "33") (inst "t=add(Z(neglit(1(#))), j_0)"))
                                    (rule "inEqSimp_homoInEq1" (formula "33") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "33") (term "1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "33") (term "1,0,1,0"))
                                    (rule "mul_literals" (formula "33") (term "0,1,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "33") (term "0,1,0"))
                                    (rule "polySimp_addComm0" (formula "33") (term "0,0,1,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,1,0"))
                                    (rule "add_literals" (formula "33") (term "1,1,0,1,0"))
                                    (rule "times_zero_1" (formula "33") (term "1,0,1,0"))
                                    (rule "add_zero_right" (formula "33") (term "0,1,0"))
                                    (rule "leq_literals" (formula "33") (term "1,0"))
                                     (builtin "One Step Simplification" (formula "33"))
                                    (rule "inEqSimp_homoInEq0" (formula "33") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "33") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "33") (term "1,0,0"))
                                    (rule "mul_literals" (formula "33") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "33") (term "0,0"))
                                    (rule "add_literals" (formula "33") (term "0,0,0"))
                                    (rule "add_zero_left" (formula "33") (term "0,0"))
                                    (rule "inEqSimp_invertInEq1" (formula "33") (term "0"))
                                    (rule "mul_literals" (formula "33") (term "1,0"))
                                    (rule "polySimp_mulLiterals" (formula "33") (term "0,0"))
                                    (rule "polySimp_elimOne" (formula "33") (term "0,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "33") (term "0") (ifseqformula "55"))
                                    (rule "qeq_literals" (formula "33") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "33"))
                                    (rule "allLeft" (formula "34") (inst "t=Z(0(#))"))
                                    (rule "leq_literals" (formula "34") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "34"))
                                    (rule "inEqSimp_commuteGeq" (formula "34") (term "0"))
                                    (rule "inEqSimp_contradInEq1" (formula "34") (term "0") (ifseqformula "56"))
                                    (rule "qeq_literals" (formula "34") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "34"))
                                    (rule "allLeft" (formula "35") (inst "t=add(Z(1(#)), b_0)"))
                                    (rule "inEqSimp_commuteGeq" (formula "35") (term "1,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "35") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "35") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "35") (term "0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "35") (term "0,0,0"))
                                    (rule "add_literals" (formula "35") (term "0,0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "35") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "35") (term "0,0,0"))
                                    (rule "polySimp_elimOne" (formula "35") (term "0,0,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "35") (term "1,0") (ifseqformula "4"))
                                    (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0"))
                                    (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0"))
                                    (rule "polySimp_addComm1" (formula "35") (term "0,0,0,1,0"))
                                    (rule "add_literals" (formula "35") (term "0,0,0,0,1,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1,0"))
                                    (rule "add_literals" (formula "35") (term "1,1,0,0,1,0"))
                                    (rule "times_zero_1" (formula "35") (term "1,0,0,1,0"))
                                    (rule "add_literals" (formula "35") (term "0,0,1,0"))
                                    (rule "leq_literals" (formula "35") (term "0,1,0"))
                                     (builtin "One Step Simplification" (formula "35"))
                                    (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "2"))
                                    (rule "qeq_literals" (formula "35") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "35"))
                                    (rule "allLeft" (formula "36") (inst "t=add(Z(neglit(2(#))), j_0)"))
                                    (rule "inEqSimp_homoInEq0" (formula "36") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "36") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "36") (term "0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "36") (term "0,0,0"))
                                    (rule "add_literals" (formula "36") (term "0,0,0,0"))
                                    (rule "inEqSimp_homoInEq1" (formula "36") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "36") (term "1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "36") (term "1,0,1,0"))
                                    (rule "mul_literals" (formula "36") (term "0,1,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "36") (term "0,1,0"))
                                    (rule "polySimp_addComm0" (formula "36") (term "0,0,1,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,1,0"))
                                    (rule "add_literals" (formula "36") (term "1,1,0,1,0"))
                                    (rule "times_zero_1" (formula "36") (term "1,0,1,0"))
                                    (rule "add_zero_right" (formula "36") (term "0,1,0"))
                                    (rule "leq_literals" (formula "36") (term "1,0"))
                                     (builtin "One Step Simplification" (formula "36"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "36") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "36") (term "0,0"))
                                    (rule "polySimp_elimOne" (formula "36") (term "0,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "36") (term "0") (ifseqformula "58"))
                                    (rule "qeq_literals" (formula "36") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "36"))
                                    (rule "allLeft" (formula "20") (inst "t=add(Z(neglit(1(#))), j_0)"))
                                     (builtin "One Step Simplification" (formula "20"))
                                    (rule "replaceKnownSelect_taclet110100012011_22" (formula "20") (term "0,1,0,1,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet110100012011_23" (formula "20") (term "0,1,0,1,1"))
                                    (rule "polySimp_addComm1" (formula "20") (term "1,1"))
                                    (rule "polySimp_addComm0" (formula "20") (term "0,1,1"))
                                    (rule "inEqSimp_homoInEq0" (formula "20") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "20") (term "0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "20") (term "0,0,0"))
                                    (rule "add_literals" (formula "20") (term "0,0,0,0"))
                                    (rule "add_zero_left" (formula "20") (term "0,0,0"))
                                    (rule "inEqSimp_homoInEq1" (formula "20") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "20") (term "1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "20") (term "1,0,1,0"))
                                    (rule "mul_literals" (formula "20") (term "0,1,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "20") (term "0,1,0"))
                                    (rule "polySimp_addComm0" (formula "20") (term "0,0,1,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,1,0"))
                                    (rule "add_literals" (formula "20") (term "1,1,0,1,0"))
                                    (rule "times_zero_1" (formula "20") (term "1,0,1,0"))
                                    (rule "add_zero_right" (formula "20") (term "0,1,0"))
                                    (rule "leq_literals" (formula "20") (term "1,0"))
                                     (builtin "One Step Simplification" (formula "20"))
                                    (rule "inEqSimp_invertInEq1" (formula "20") (term "0"))
                                    (rule "mul_literals" (formula "20") (term "1,0"))
                                    (rule "polySimp_mulLiterals" (formula "20") (term "0,0"))
                                    (rule "polySimp_elimOne" (formula "20") (term "0,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "20") (term "0") (ifseqformula "59"))
                                    (rule "qeq_literals" (formula "20") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "20"))
                                    (rule "allLeft" (formula "21") (inst "t=add(Z(1(#)), b_0)"))
                                    (rule "replaceKnownSelect_taclet0100012011_7" (formula "21") (term "0,1,0,1,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet0100012011_8" (formula "21") (term "0,1,0,1,1"))
                                    (rule "polySimp_homoEq" (formula "21") (term "0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,1,1"))
                                    (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,1,1"))
                                    (rule "mul_literals" (formula "21") (term "0,1,0,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "21") (term "0,0,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "21") (term "0,2,2,1,1,1"))
                                    (rule "add_literals" (formula "21") (term "0,0,2,2,1,1,1"))
                                    (rule "replaceKnownSelect_taclet110100012011_27" (formula "21") (term "2,1,1,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet110100012011_28" (formula "21") (term "2,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,1,1,1"))
                                    (rule "add_literals" (formula "21") (term "0,0,0,0,1,1,1"))
                                    (rule "inEqSimp_commuteGeq" (formula "21") (term "1,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "21") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "21") (term "0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "21") (term "0,0,0"))
                                    (rule "add_literals" (formula "21") (term "0,0,0,0"))
                                    (rule "polySimp_sepPosMonomial" (formula "21") (term "0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,0,1,1,1"))
                                    (rule "polySimp_rightDist" (formula "21") (term "1,0,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,1,1,1"))
                                    (rule "mul_literals" (formula "21") (term "0,1,0,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "21") (term "1,1,0,1,1,1"))
                                    (rule "applyEq" (formula "21") (term "1,1,1") (ifseqformula "76"))
                                    (rule "polySimp_addComm1" (formula "21") (term "1,1"))
                                    (rule "polySimp_addComm0" (formula "21") (term "0,1,1"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "21") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "21") (term "0,0,0"))
                                    (rule "polySimp_elimOne" (formula "21") (term "0,0,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "21") (term "1,0") (ifseqformula "4"))
                                    (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0"))
                                    (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0"))
                                    (rule "polySimp_addComm1" (formula "21") (term "0,0,0,1,0"))
                                    (rule "add_literals" (formula "21") (term "0,0,0,0,1,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1,0"))
                                    (rule "add_literals" (formula "21") (term "1,1,0,0,1,0"))
                                    (rule "times_zero_1" (formula "21") (term "1,0,0,1,0"))
                                    (rule "add_literals" (formula "21") (term "0,0,1,0"))
                                    (rule "leq_literals" (formula "21") (term "0,1,0"))
                                     (builtin "One Step Simplification" (formula "21"))
                                    (rule "inEqSimp_contradInEq1" (formula "21") (term "0") (ifseqformula "2"))
                                    (rule "qeq_literals" (formula "21") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "21"))
                                    (rule "allLeft" (formula "22") (inst "t=add(Z(neglit(2(#))), j_0)"))
                                    (rule "replaceKnownSelect_taclet110100012011_33" (formula "22") (term "0,1,0,1,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet110100012011_34" (formula "22") (term "0,1,0,1,1"))
                                    (rule "polySimp_homoEq" (formula "22") (term "0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,1,1"))
                                    (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,1,1"))
                                    (rule "mul_literals" (formula "22") (term "0,1,0,0,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "22") (term "0,2,2,1,1,1"))
                                    (rule "add_literals" (formula "22") (term "0,0,2,2,1,1,1"))
                                    (rule "replaceKnownSelect_taclet110100012011_22" (formula "22") (term "2,1,1,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet110100012011_23" (formula "22") (term "2,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "22") (term "0,0,0,1,1,1"))
                                    (rule "add_literals" (formula "22") (term "0,0,0,0,1,1,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1,1,1"))
                                    (rule "add_literals" (formula "22") (term "1,1,0,0,1,1,1"))
                                    (rule "times_zero_1" (formula "22") (term "1,0,0,1,1,1"))
                                    (rule "add_literals" (formula "22") (term "0,0,1,1,1"))
                                    (rule "equal_literals" (formula "22") (term "0,1,1,1"))
                                     (builtin "One Step Simplification" (formula "22"))
                                    (rule "polySimp_addComm1" (formula "22") (term "1,1"))
                                    (rule "inEqSimp_homoInEq1" (formula "22") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "22") (term "1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "22") (term "1,0,1,0"))
                                    (rule "mul_literals" (formula "22") (term "0,1,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "22") (term "0,1,0"))
                                    (rule "polySimp_addComm0" (formula "22") (term "0,0,1,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,1,0"))
                                    (rule "add_literals" (formula "22") (term "1,1,0,1,0"))
                                    (rule "times_zero_1" (formula "22") (term "1,0,1,0"))
                                    (rule "add_zero_right" (formula "22") (term "0,1,0"))
                                    (rule "leq_literals" (formula "22") (term "1,0"))
                                     (builtin "One Step Simplification" (formula "22"))
                                    (rule "inEqSimp_homoInEq0" (formula "22") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "22") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "22") (term "1,0,0"))
                                    (rule "mul_literals" (formula "22") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "22") (term "0,0"))
                                    (rule "add_literals" (formula "22") (term "0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "22") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "22") (term "0,0"))
                                    (rule "polySimp_elimOne" (formula "22") (term "0,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "22") (term "0") (ifseqformula "61"))
                                    (rule "qeq_literals" (formula "22") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "22"))
                                    (rule "allLeft" (formula "23") (inst "t=b_0"))
                                    (rule "replaceKnownSelect_taclet0100012011_7" (formula "23") (term "2,1,1,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet0100012011_8" (formula "23") (term "2,1,1,1"))
                                    (rule "replaceKnownSelect_taclet110100012011_11" (formula "23") (term "0,1,0,1,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet110100012011_12" (formula "23") (term "0,1,0,1,1"))
                                    (rule "polySimp_homoEq" (formula "23") (term "0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "23") (term "0,0,1,1,1"))
                                    (rule "inEqSimp_commuteGeq" (formula "23") (term "1,0"))
                                    (rule "polySimp_sepPosMonomial" (formula "23") (term "0,1,1,1"))
                                    (rule "polySimp_mulComm0" (formula "23") (term "1,0,1,1,1"))
                                    (rule "polySimp_rightDist" (formula "23") (term "1,0,1,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,1,1,1"))
                                    (rule "mul_literals" (formula "23") (term "0,1,0,1,1,1"))
                                    (rule "polySimp_elimOne" (formula "23") (term "1,1,0,1,1,1"))
                                    (rule "inEqSimp_contradEq7" (formula "23") (term "0,1,1,1") (ifseqformula "4"))
                                    (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0,1,1,1"))
                                    (rule "mul_literals" (formula "23") (term "0,1,0,0,0,1,1,1"))
                                    (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,1,1,1"))
                                    (rule "polySimp_addComm1" (formula "23") (term "0,0,0,0,1,1,1"))
                                    (rule "add_literals" (formula "23") (term "0,0,0,0,0,1,1,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,0,1,1,1"))
                                    (rule "add_literals" (formula "23") (term "1,1,0,0,0,1,1,1"))
                                    (rule "times_zero_1" (formula "23") (term "1,0,0,0,1,1,1"))
                                    (rule "add_literals" (formula "23") (term "0,0,0,1,1,1"))
                                    (rule "leq_literals" (formula "23") (term "0,0,1,1,1"))
                                     (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "106")))
                                    (rule "inEqSimp_contradInEq1" (formula "23") (term "0") (ifseqformula "2"))
                                    (rule "qeq_literals" (formula "23") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "23"))
                                    (rule "inEqSimp_contradEq3" (formula "78") (term "0,0") (ifseqformula "23"))
                                    (rule "polySimp_rightDist" (formula "78") (term "1,0,0,0,0"))
                                    (rule "mul_literals" (formula "78") (term "0,1,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "78") (term "0,0,0,0"))
                                    (rule "polySimp_addComm0" (formula "78") (term "0,0,0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "78") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "78") (term "1,1,0,0,0,0"))
                                    (rule "times_zero_1" (formula "78") (term "1,0,0,0,0"))
                                    (rule "add_literals" (formula "78") (term "0,0,0,0"))
                                    (rule "qeq_literals" (formula "78") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "78"))
                                    (rule "applyEqReverse" (formula "79") (term "1") (ifseqformula "78"))
                                    (rule "applyEqReverse" (formula "21") (term "0,0,1") (ifseqformula "78"))
                                    (rule "applyEqReverse" (formula "13") (term "1") (ifseqformula "78"))
                                    (rule "hideAuxiliaryEq" (formula "78"))
                                    (rule "polySimp_addComm0" (formula "21") (term "0,1"))
                                    (rule "polySimp_addComm1" (formula "21") (term "1"))
                                    (rule "inEqSimp_commuteLeq" (formula "78"))
                                    (rule "replace_known_left" (formula "16") (term "1") (ifseqformula "78"))
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "true_left" (formula "16"))
                                    (rule "inEqSimp_commuteLeq" (formula "13"))
                                    (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "22"))
                                    (rule "andLeft" (formula "4"))
                                    (rule "inEqSimp_homoInEq1" (formula "4"))
                                    (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
                                    (rule "add_literals" (formula "4") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "4") (term "1,0"))
                                    (rule "add_literals" (formula "4") (term "0"))
                                    (rule "leq_literals" (formula "4"))
                                    (rule "closeFalse" (formula "4"))
                                 )
                              )
                           )
                           (branch "Case 2"
                               (builtin "One Step Simplification" (formula "59"))
                               (builtin "One Step Simplification" (formula "1"))
                               (builtin "Use Dependency Contract" (formula "59") (ifInst ""  (formula "35")) (contract "de.wiesler.Classifier[java.lang.Object::<inv>()].JML accessible clause.0") (userinteraction))
                              (rule "true_left" (formula "1"))
                              (rule "wellFormedStorePrimitiveArray" (formula "38") (term "1,1,0,0,0"))
                              (rule "wellFormedAnon" (formula "38") (term "1,1,0,0,0"))
                              (rule "replace_known_left" (formula "38") (term "1,0,0,0,0") (ifseqformula "16"))
                               (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "58")) (ifInst ""  (formula "15")) (ifInst ""  (formula "15")) (ifInst ""  (formula "14")) (ifInst ""  (formula "34")) (ifInst ""  (formula "59")) (ifInst ""  (formula "34")))
                              (rule "notLeft" (formula "38"))
                              (rule "polySimp_homoEq" (formula "13") (term "0,1,0,1,0"))
                              (rule "polySimp_homoEq" (formula "13") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "13") (term "1,0,1,0"))
                              (rule "polySimp_mulAssoc" (formula "13") (term "0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "13") (term "0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,1,1,0,1,0"))
                              (rule "mul_literals" (formula "13") (term "0,1,0,0,0,1,1,0,1,0"))
                              (rule "disjointDefinition" (formula "38"))
                              (rule "polySimp_addAssoc" (formula "13") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,1,0,1,0"))
                              (rule "polySimp_addComm0" (formula "13") (term "0,0,0,0,1,0,1,0"))
                              (rule "inEqSimp_ltRight" (formula "39"))
                              (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "1") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "10") (term "0"))
                              (rule "add_zero_right" (formula "10") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                              (rule "inEqSimp_homoInEq0" (formula "9") (term "0,0,0"))
                              (rule "times_zero_2" (formula "9") (term "1,0,0,0,0"))
                              (rule "add_zero_right" (formula "9") (term "0,0,0,0"))
                              (rule "inEqSimp_homoInEq1" (formula "10") (term "1,1"))
                              (rule "polySimp_mulComm0" (formula "10") (term "1,0,1,1"))
                              (rule "polySimp_rightDist" (formula "10") (term "1,0,1,1"))
                              (rule "polySimp_mulAssoc" (formula "10") (term "0,1,0,1,1"))
                              (rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0,1,1"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,1,1"))
                              (rule "polySimp_elimOne" (formula "10") (term "0,1,0,1,1"))
                              (rule "polySimp_addAssoc" (formula "10") (term "0,1,1"))
                              (rule "inEqSimp_homoInEq1" (formula "25"))
                              (rule "polySimp_addComm1" (formula "25") (term "0"))
                              (rule "polySimp_sepNegMonomial" (formula "14") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "0,1,0"))
                              (rule "polySimp_sepNegMonomial" (formula "14") (term "0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "0,0,0,1,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
                              (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0"))
                              (rule "mul_literals" (formula "13") (term "0,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "0,0"))
                              (rule "polySimp_elimOne" (formula "10") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0,0"))
                              (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "1,1"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "0,1,1"))
                              (rule "polySimp_elimOne" (formula "10") (term "0,1,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "25"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1"))
                              (rule "polySimp_rightDist" (formula "25") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1"))
                              (rule "mul_literals" (formula "25") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1"))
                              (rule "inEqSimp_subsumption1" (formula "9") (term "1,0,0") (ifseqformula "7"))
                              (rule "inEqSimp_homoInEq0" (formula "9") (term "0,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                              (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                              (rule "polySimp_addComm0" (formula "9") (term "0,0,0,1,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "9") (term "1,1,0,0,1,0,0"))
                              (rule "times_zero_1" (formula "9") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "9") (term "0,0,1,0,0"))
                              (rule "qeq_literals" (formula "9") (term "0,1,0,0"))
                               (builtin "One Step Simplification" (formula "9"))
                              (rule "distributeIntersection_2" (formula "39") (term "0"))
                              (rule "distributeIntersection" (formula "39") (term "0,0"))
                              (rule "distributeIntersection" (formula "39") (term "1,0"))
                              (rule "intersectWithSingleton" (formula "39") (term "1,0,0"))
                               (builtin "One Step Simplification" (formula "39"))
                              (rule "eqSymm" (formula "39") (term "0,1,0,0"))
                              (rule "replace_known_right" (formula "39") (term "0,1,0,0") (ifseqformula "48"))
                               (builtin "One Step Simplification" (formula "39"))
                              (rule "intersectWithSingleton" (formula "39") (term "0,0"))
                               (builtin "One Step Simplification" (formula "39"))
                              (rule "eqSymm" (formula "39") (term "0,0,0"))
                              (rule "replace_known_right" (formula "39") (term "0,0,0") (ifseqformula "47"))
                               (builtin "One Step Simplification" (formula "39"))
                              (rule "unionEqualsEmpty" (formula "39"))
                              (rule "disjointArrayRangeAllFields2" (formula "39") (term "1"))
                              (rule "eqSymm" (formula "39") (term "0,0,1"))
                              (rule "replace_known_right" (formula "39") (term "0,0,1") (ifseqformula "48"))
                               (builtin "One Step Simplification" (formula "39"))
                              (rule "disjointArrayRangeAllFields2" (formula "39"))
                              (rule "notRight" (formula "39"))
                              (rule "andLeft" (formula "1"))
                              (rule "eqSymm" (formula "1"))
                              (rule "close" (formula "48") (ifseqformula "1"))
                           )
                        )
                     )
                     (branch "Case 2"
                         (builtin "One Step Simplification" (formula "1"))
                         (builtin "One Step Simplification" (formula "59"))
                        (rule "closeTrue" (formula "59"))
                     )
                  )
                  (branch "Case 2"
                      (builtin "One Step Simplification" (formula "1"))
                      (builtin "One Step Simplification" (formula "59"))
                     (rule "allRight" (formula "59") (inst "sk=f_0"))
                     (rule "allRight" (formula "59") (inst "sk=o_0"))
                     (rule "orRight" (formula "59"))
                     (rule "orRight" (formula "59"))
                     (rule "eqSymm" (formula "61"))
                     (rule "eqSymm" (formula "59") (term "0,0,0,1"))
                     (rule "applyEq" (formula "59") (term "1,1,0,1") (ifseqformula "30"))
                     (rule "pullOutSelect" (formula "61") (term "0") (inst "selectSK=f_0_0"))
                     (rule "simplifySelectOfStore" (formula "1"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "eqSymm" (formula "62"))
                     (rule "eqSymm" (formula "1") (term "0,0,0"))
                     (rule "eqSymm" (formula "1") (term "1,0,0"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
                     (rule "simplifySelectOfAnon" (formula "1"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "62")))
                     (rule "elementOfArrayRange" (formula "1") (term "0,0,0") (inst "iv=iv"))
                     (rule "eqSymm" (formula "1") (term "0,0,0,1,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1,0,0,0"))
                     (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "61"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "commute_and" (formula "1") (term "0,0"))
                     (rule "ifthenelse_split" (formula "1") (term "0"))
                     (branch "f_0 = arr(buffers.num_buckets) & o_0 = bucket_starts TRUE"
                        (rule "andLeft" (formula "1"))
                        (rule "applyEqReverse" (formula "64") (term "1") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "replace_known_left" (formula "61") (term "0") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "61"))
                        (rule "applyEq" (formula "62") (term "1,0,0,1") (ifseqformula "2"))
                        (rule "replace_known_left" (formula "62") (term "0,1") (ifseqformula "22"))
                         (builtin "One Step Simplification" (formula "62"))
                        (rule "false_right" (formula "62"))
                        (rule "applyEq" (formula "62") (term "2,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "62") (term "1,0") (ifseqformula "2"))
                        (rule "narrowSelectArrayType" (formula "62") (term "0") (ifseqformula "18") (ifseqformula "58"))
                        (rule "applyEq" (formula "61") (term "1,0,0,0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "61"))
                        (rule "nnf_ex2all" (formula "61"))
                        (rule "nnf_notAnd" (formula "1") (term "0"))
                        (rule "inEqSimp_notLeq" (formula "1") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0"))
                        (rule "nnf_notAnd" (formula "1") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,1,0,0"))
                        (rule "commute_or" (formula "1") (term "0,0"))
                        (rule "commute_or_2" (formula "1") (term "0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "1") (term "1"))
                        (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,1"))
                        (rule "add_literals" (formula "1") (term "1,1,0,1"))
                        (rule "times_zero_1" (formula "1") (term "1,0,1"))
                        (rule "add_literals" (formula "1") (term "0,1"))
                        (rule "leq_literals" (formula "1") (term "1"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "4"))
                        (rule "polySimp_homoEq" (formula "16") (term "0,1,0,1,0"))
                        (rule "polySimp_homoEq" (formula "16") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,1,1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,1,1,0,1,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,0,0,1,1,1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,0,1,0"))
                        (rule "polySimp_mulAssoc" (formula "16") (term "0,1,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "0,0,1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "16") (term "0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,1,1,0,1,0"))
                        (rule "polySimp_addComm0" (formula "16") (term "0,0,0,0,1,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,1,0"))
                        (rule "inEqSimp_ltRight" (formula "41"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "13") (term "0"))
                        (rule "add_zero_right" (formula "13") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "13") (term "1,1"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,1,1"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,0,1,1"))
                        (rule "polySimp_mulAssoc" (formula "13") (term "0,1,0,1,1"))
                        (rule "polySimp_mulComm0" (formula "13") (term "0,0,1,0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0,1,1"))
                        (rule "polySimp_elimOne" (formula "13") (term "0,1,0,1,1"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,1,1"))
                        (rule "inEqSimp_homoInEq1" (formula "28"))
                        (rule "polySimp_addComm1" (formula "28") (term "0"))
                        (rule "inEqSimp_homoInEq0" (formula "12") (term "0,0,0"))
                        (rule "times_zero_2" (formula "12") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "12") (term "0,0,0,0"))
                        (rule "polySimp_sepNegMonomial" (formula "17") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "0,1,0"))
                        (rule "polySimp_elimOne" (formula "17") (term "0,1,0"))
                        (rule "polySimp_sepNegMonomial" (formula "17") (term "0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "17") (term "0,0,0,1,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "0,0"))
                        (rule "polySimp_elimOne" (formula "13") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "17") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "1,1"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "0,1,1"))
                        (rule "polySimp_elimOne" (formula "13") (term "0,1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "28"))
                        (rule "polySimp_mulComm0" (formula "28") (term "1"))
                        (rule "polySimp_rightDist" (formula "28") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "28") (term "1,1"))
                        (rule "mul_literals" (formula "28") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "28") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0"))
                        (rule "mul_literals" (formula "12") (term "1,0,0,0"))
                        (rule "inEqSimp_subsumption1" (formula "12") (term "1,0,0") (ifseqformula "10"))
                        (rule "inEqSimp_homoInEq0" (formula "12") (term "0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                        (rule "polySimp_addComm0" (formula "12") (term "0,0,0,1,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "12") (term "1,1,0,0,1,0,0"))
                        (rule "times_zero_1" (formula "12") (term "1,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "12") (term "0,0,1,0,0"))
                        (rule "qeq_literals" (formula "12") (term "0,1,0,0"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "inEqSimp_contradInEq0" (formula "11") (term "0,0") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "11") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "applyEqReverse" (formula "13") (term "0,0,1") (ifseqformula "11"))
                        (rule "hideAuxiliaryEq" (formula "11"))
                        (rule "inEqSimp_antiSymm" (formula "10") (ifseqformula "1"))
                        (rule "applyEq" (formula "11") (term "0") (ifseqformula "10"))
                        (rule "inEqSimp_homoInEq1" (formula "11"))
                        (rule "polySimp_pullOutFactor1" (formula "11") (term "0"))
                        (rule "add_literals" (formula "11") (term "1,0"))
                        (rule "times_zero_1" (formula "11") (term "0"))
                        (rule "leq_literals" (formula "11"))
                        (rule "true_left" (formula "11"))
                        (rule "applyEq" (formula "15") (term "1,1,0,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "2") (term "0") (ifseqformula "10"))
                        (rule "applyEq" (formula "14") (term "2,1,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "27") (term "0") (ifseqformula "10"))
                        (rule "inEqSimp_homoInEq0" (formula "27"))
                        (rule "polySimp_addComm1" (formula "27") (term "0"))
                        (rule "applyEq" (formula "40") (term "0,2,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "15") (term "2,1,0,0,1,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "60") (term "0,2,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "40") (term "1,3,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "40") (term "2,1,0,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "1") (term "0") (ifseqformula "10"))
                        (rule "inEqSimp_homoInEq0" (formula "1"))
                        (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "1,0"))
                        (rule "times_zero_1" (formula "1") (term "0"))
                        (rule "qeq_literals" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "applyEq" (formula "15") (term "2,1,0,2,0,1,0") (ifseqformula "9"))
                        (rule "applyEq" (formula "31") (term "1") (ifseqformula "9"))
                        (rule "applyEq" (formula "15") (term "2,1,0,1,1,1,0") (ifseqformula "9"))
                        (rule "applyEq" (formula "2") (term "0,1") (ifseqformula "9"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "26"))
                        (rule "polySimp_mulComm0" (formula "26") (term "1"))
                        (rule "polySimp_rightDist" (formula "26") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "26") (term "1,1"))
                        (rule "mul_literals" (formula "26") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "26") (term "1,1"))
                        (rule "inEqSimp_contradInEq0" (formula "10") (term "0,0") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "10") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "applyEqReverse" (formula "11") (term "0,1,1,1") (ifseqformula "10"))
                        (rule "hideAuxiliaryEq" (formula "10"))
                        (rule "polySimp_addComm0" (formula "10") (term "1,1,1"))
                        (rule "inEqSimp_homoInEq1" (formula "10") (term "1,1"))
                        (rule "polySimp_addComm1" (formula "10") (term "0,1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,1"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,1,1"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,1,1"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,1"))
                        (rule "polySimp_elimOne" (formula "10") (term "1,1,1,1"))
                        (rule "polySimp_mulComm0" (formula "10") (term "0,1,1,1"))
                        (rule "inEqSimp_contradInEq0" (formula "10") (term "0") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "10") (term "0,0"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "true_left" (formula "10"))
                        (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "8"))
                        (rule "qeq_literals" (formula "1") (term "0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch "f_0 = arr(buffers.num_buckets) & o_0 = bucket_starts FALSE"
                        (rule "close" (formula "63") (ifseqformula "1"))
                     )
                  )
               )
               (branch "Case 2"
                  (rule "impRight" (formula "58"))
                  (rule "andRight" (formula "59"))
                  (branch "Case 1"
                     (rule "andRight" (formula "59"))
                     (branch "Case 1"
                        (rule "andRight" (formula "59"))
                        (branch "Case 1"
                           (rule "andRight" (formula "59"))
                           (branch "Case 1"
                              (rule "andRight" (formula "59"))
                              (branch "Case 1"
                                 (rule "andRight" (formula "59"))
                                 (branch "Case 1"
                                    (rule "andRight" (formula "59"))
                                    (branch "Case 1"
                                       (rule "andRight" (formula "59"))
                                       (branch "Case 1"
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                       (branch "Case 2"
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                    )
                                    (branch "Case 2"
                                       (rule "impRight" (formula "59"))
                                       (rule "andRight" (formula "60"))
                                       (branch "Case 1"
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "closeFalse" (formula "2"))
                                       )
                                       (branch "Case 2"
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "closeFalse" (formula "2"))
                                       )
                                    )
                                 )
                                 (branch "Case 2"
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                              )
                              (branch "Case 2"
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                           )
                           (branch "Case 2"
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                        )
                        (branch "Case 2"
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                     (branch "Case 2"
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
                  (branch "Case 2"
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
               )
            )
         )
      )
      (branch "Null Reference (x_arr = null)"
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "49")))
         (rule "closeFalse" (formula "1"))
      )
      (branch "Index Out of Bounds (x_arr != null, but x Out of Bounds!)"
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "49")))
         (rule "false_right" (formula "52"))
         (rule "polySimp_homoEq" (formula "10") (term "1,0"))
         (rule "polySimp_homoEq" (formula "10") (term "0,1,0,1,0,1,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,1,0,1,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,1,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,0,1,0"))
         (rule "polySimp_mulAssoc" (formula "10") (term "0,1,0,1,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,1,0"))
         (rule "polySimp_elimOne" (formula "10") (term "0,1,0,1,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,1,1,0,1,0"))
         (rule "mul_literals" (formula "10") (term "0,1,0,0,0,1,1,0,1,0"))
         (rule "polySimp_addAssoc" (formula "10") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,1,0,1,0"))
         (rule "polySimp_addComm0" (formula "10") (term "0,0,0,0,1,0,1,0"))
         (rule "inEqSimp_ltRight" (formula "32"))
         (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
         (rule "polySimp_addComm0" (formula "1") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "7") (term "0"))
         (rule "add_zero_right" (formula "7") (term "0,0"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "2") (term "1"))
         (rule "times_zero_1" (formula "2") (term "1,0,0,1"))
         (rule "add_literals" (formula "2") (term "0,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "2") (term "0"))
         (rule "inEqSimp_homoInEq0" (formula "6") (term "0,0,0"))
         (rule "times_zero_2" (formula "6") (term "1,0,0,0,0"))
         (rule "add_zero_right" (formula "6") (term "0,0,0,0"))
         (rule "inEqSimp_homoInEq1" (formula "22"))
         (rule "polySimp_addComm1" (formula "22") (term "0"))
         (rule "applyEq" (formula "2") (term "1,0,1") (ifseqformula "27"))
         (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "27"))
         (rule "polySimp_sepNegMonomial" (formula "11") (term "1,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0"))
         (rule "polySimp_elimOne" (formula "11") (term "0,1,0"))
         (rule "polySimp_sepNegMonomial" (formula "11") (term "0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "11") (term "0,0,0,1,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
         (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "0,0"))
         (rule "polySimp_elimOne" (formula "7") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0"))
         (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "0,0,0"))
         (rule "mul_literals" (formula "6") (term "1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "22"))
         (rule "polySimp_mulComm0" (formula "22") (term "1"))
         (rule "polySimp_rightDist" (formula "22") (term "1"))
         (rule "polySimp_mulLiterals" (formula "22") (term "1,1"))
         (rule "mul_literals" (formula "22") (term "0,1"))
         (rule "polySimp_elimOne" (formula "22") (term "1,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1"))
         (rule "mul_literals" (formula "2") (term "1,1"))
         (rule "inEqSimp_contradInEq0" (formula "2") (term "0") (ifseqformula "22"))
         (rule "inEqSimp_homoInEq1" (formula "2") (term "0,0"))
         (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0"))
         (rule "mul_literals" (formula "2") (term "0,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,0,0"))
         (rule "polySimp_addComm0" (formula "2") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,0"))
         (rule "add_literals" (formula "2") (term "1,1,0,0,0"))
         (rule "times_zero_1" (formula "2") (term "1,0,0,0"))
         (rule "add_literals" (formula "2") (term "0,0,0"))
         (rule "leq_literals" (formula "2") (term "0,0"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "inEqSimp_subsumption1" (formula "6") (term "1,0,0") (ifseqformula "4"))
         (rule "inEqSimp_homoInEq0" (formula "6") (term "0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
         (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
         (rule "polySimp_addComm0" (formula "6") (term "0,0,0,1,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "6") (term "1,1,0,0,1,0,0"))
         (rule "times_zero_1" (formula "6") (term "1,0,0,1,0,0"))
         (rule "add_zero_right" (formula "6") (term "0,0,1,0,0"))
         (rule "qeq_literals" (formula "6") (term "0,1,0,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "inEqSimp_contradInEq0" (formula "5") (term "0,0") (ifseqformula "2"))
         (rule "qeq_literals" (formula "5") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "applyEqReverse" (formula "7") (term "0,0,1") (ifseqformula "5"))
         (rule "hideAuxiliaryEq" (formula "5"))
         (rule "inEqSimp_antiSymm" (formula "4") (ifseqformula "1"))
         (rule "applyEq" (formula "1") (term "0") (ifseqformula "4"))
         (rule "inEqSimp_homoInEq0" (formula "1"))
         (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
         (rule "add_literals" (formula "1") (term "1,0"))
         (rule "times_zero_1" (formula "1") (term "0"))
         (rule "qeq_literals" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "applyEq" (formula "1") (term "0") (ifseqformula "3"))
         (rule "applyEq" (formula "21") (term "0") (ifseqformula "3"))
         (rule "inEqSimp_homoInEq0" (formula "21"))
         (rule "polySimp_addComm1" (formula "21") (term "0"))
         (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
         (rule "inEqSimp_homoInEq1" (formula "4"))
         (rule "polySimp_pullOutFactor1" (formula "4") (term "0"))
         (rule "add_literals" (formula "4") (term "1,0"))
         (rule "times_zero_1" (formula "4") (term "0"))
         (rule "leq_literals" (formula "4"))
         (rule "true_left" (formula "4"))
         (rule "applyEq" (formula "8") (term "2,1,0,0,1,0") (ifseqformula "3"))
         (rule "applyEq" (formula "7") (term "2,1,0,0") (ifseqformula "3"))
         (rule "applyEq" (formula "9") (term "2,1,0,2,0,1,0") (ifseqformula "3"))
         (rule "applyEq" (formula "8") (term "1,1,0,0,0") (ifseqformula "3"))
         (rule "applyEq" (formula "25") (term "1") (ifseqformula "3"))
         (rule "applyEq" (formula "9") (term "2,1,0,1,1,1,0") (ifseqformula "3"))
         (rule "inEqSimp_sepPosMonomial1" (formula "20"))
         (rule "polySimp_mulComm0" (formula "20") (term "1"))
         (rule "polySimp_rightDist" (formula "20") (term "1"))
         (rule "polySimp_mulLiterals" (formula "20") (term "1,1"))
         (rule "mul_literals" (formula "20") (term "0,1"))
         (rule "polySimp_elimOne" (formula "20") (term "1,1"))
         (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "1"))
         (rule "qeq_literals" (formula "2") (term "0"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "closeFalse" (formula "2"))
      )
   )
)
)
}
