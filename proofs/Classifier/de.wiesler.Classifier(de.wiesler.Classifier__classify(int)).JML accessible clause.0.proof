\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sun Apr 16 15:21:38 CEST 2023
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_OFF
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L , finalFields-finalFields\\:immutable
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../src";

\proofObligation "#Proof Obligation Settings
#Sun Apr 16 15:21:38 CEST 2023
contract=de.wiesler.Classifier[de.wiesler.Classifier\\:\\:classify(int)].JML accessible clause.0
name=de.wiesler.Classifier[de.wiesler.Classifier\\:\\:classify(int)].JML accessible clause.0
class=de.uka.ilkd.key.proof.init.DependencyContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "802059dea3"))
(keyLog "1" (keyUser "Julian" ) (keyVersion "802059dea3"))
(keyLog "2" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))
(keyLog "3" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))

(autoModeTime "186059")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "self,value,anon_heap"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
 (builtin "One Step Simplification" (formula "9") (userinteraction))
(rule "Query_axiom_for_classify_int__in_de_wiesler_Classifier" (formula "9") (term "0") (inst "#res=x") (inst "#self=c") (inst "#p0=x_1") (inst "classify_sk=classify_sk_0") (ifseqformula "4") (userinteraction))
 (builtin "One Step Simplification" (formula "6"))
 (builtin "One Step Simplification" (formula "1"))
(rule "true_left" (formula "6"))
(rule "eqSymm" (formula "9"))
(rule "eqSymm" (formula "1") (term "0,1"))
(rule "boxToDiamond" (formula "1") (term "1"))
 (builtin "One Step Simplification" (formula "1"))
(rule "notLeft" (formula "1"))
(rule "methodBodyExpand" (formula "7") (term "1") (newnames "heapBefore_classify,savedHeapBefore_classify"))
 (builtin "One Step Simplification" (formula "7"))
(rule "variableDeclarationAssign" (formula "7") (term "1"))
(rule "variableDeclaration" (formula "7") (term "1") (newnames "index_1"))
(rule "methodCallWithAssignmentUnfoldTarget" (formula "7") (term "1") (inst "#v0=t"))
(rule "variableDeclaration" (formula "7") (term "1") (newnames "t"))
(rule "assignment_read_attribute_this_final" (formula "7"))
 (builtin "One Step Simplification" (formula "7"))
 (builtin "Use Operation Contract" (formula "7") (newnames "heapBefore_classify_0,result_241,exc_285") (contract "de.wiesler.Tree[de.wiesler.Tree::classify(int)].JML normal_behavior operation contract.0"))
(branch "Post (classify)"
    (builtin "One Step Simplification" (formula "7"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "translateJavaMulInt" (formula "7") (term "1,1,0,0,1"))
   (rule "translateJavaSubInt" (formula "7") (term "3,0,0,1,0,1"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "10"))
   (rule "eqSymm" (formula "7"))
   (rule "polySimp_elimSub" (formula "10") (term "3,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1"))
   (rule "assignment" (formula "13") (term "1"))
    (builtin "One Step Simplification" (formula "13"))
   (rule "variableDeclaration" (formula "13") (term "1") (newnames "bucket"))
   (rule "ifElseUnfold" (formula "13") (term "1") (inst "#boolv=x_2"))
   (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_2"))
   (rule "assignment_read_attribute_this_final" (formula "13"))
    (builtin "One Step Simplification" (formula "13"))
   (rule "ifElseSplit" (formula "13"))
   (branch "if x_2 true"
       (builtin "One Step Simplification" (formula "14"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "variableDeclarationAssign" (formula "14") (term "1"))
      (rule "variableDeclaration" (formula "14") (term "1") (newnames "bucket_index"))
      (rule "compound_subtraction_2" (formula "14") (term "1") (inst "#v0=x_2") (inst "#v1=x_3"))
      (rule "variableDeclarationAssign" (formula "14") (term "1"))
      (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_4"))
      (rule "assignment" (formula "14") (term "1"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "variableDeclarationAssign" (formula "14") (term "1"))
      (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_3"))
      (rule "compound_division_1" (formula "14") (term "1") (inst "#v=x_5"))
      (rule "variableDeclarationAssign" (formula "14") (term "1"))
      (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_5"))
      (rule "assignment_read_attribute_this_final" (formula "14"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "assignmentDivisionInt" (formula "14"))
      (branch "Case 1"
          (builtin "One Step Simplification" (formula "14"))
         (rule "translateJavaDivInt" (formula "14") (term "0,1,0"))
         (rule "assignmentSubtractionInt" (formula "14") (term "1"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "translateJavaSubInt" (formula "14") (term "0,1,0"))
         (rule "polySimp_elimSub" (formula "14") (term "0,1,0"))
         (rule "variableDeclarationAssign" (formula "14") (term "1"))
         (rule "variableDeclaration" (formula "14") (term "1") (newnames "equal_to_splitter"))
         (rule "compound_assignment_2" (formula "14") (term "1") (inst "#v=x_2"))
         (rule "variableDeclarationAssign" (formula "14") (term "1"))
         (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_6"))
         (rule "methodCallWithAssignmentUnfoldArguments" (formula "14") (term "1"))
         (rule "variableDeclarationAssign" (formula "14") (term "1"))
         (rule "variableDeclaration" (formula "14") (term "1") (newnames "var"))
         (rule "assignment" (formula "14") (term "1"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "variableDeclarationAssign" (formula "14") (term "1"))
         (rule "variableDeclaration" (formula "14") (term "1") (newnames "var_1"))
         (rule "eval_order_array_access4" (formula "14") (term "1") (inst "#v0=x_arr"))
         (rule "variableDeclarationAssign" (formula "14") (term "1"))
         (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_arr"))
         (rule "assignment_read_attribute_this_final" (formula "14"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "assignment_array2" (formula "14"))
         (branch "Normal Execution (x_arr != null)"
             (builtin "One Step Simplification" (formula "14"))
            (rule "onlyCreatedObjectsAreReferencedFinal" (formula "16") (term "0,0,1,1,1,0,0") (ifseqformula "2") (ifseqformula "4"))
            (rule "onlyCreatedObjectsAreReferencedFinal" (formula "17") (term "0,0,1,1,0,0") (ifseqformula "3") (ifseqformula "5"))
            (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "16") (term "1") (inst "#v0=x_7"))
            (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_7"))
            (rule "variableDeclarationAssign" (formula "16") (term "1"))
            (rule "variableDeclaration" (formula "16") (term "1") (newnames "a"))
            (rule "assignment" (formula "16") (term "1"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "variableDeclarationAssign" (formula "16") (term "1"))
            (rule "variableDeclaration" (formula "16") (term "1") (newnames "b"))
            (rule "assignment" (formula "16") (term "1"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_cmp,savedHeapBefore_cmp"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "returnUnfold" (formula "16") (term "1") (inst "#v0=x_8"))
            (rule "variableDeclarationAssign" (formula "16") (term "1"))
            (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_8"))
            (rule "less_than_comparison_simple" (formula "16") (term "1"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "methodCallReturn" (formula "16") (term "1"))
            (rule "assignment" (formula "16") (term "1"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "methodCallEmpty" (formula "16") (term "1"))
            (rule "blockEmpty" (formula "16") (term "1"))
            (rule "assignment" (formula "16") (term "1"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "blockEmpty" (formula "16") (term "1"))
            (rule "compound_assignment_1_new" (formula "16") (term "1"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "compound_subtraction_2" (formula "16") (term "1") (inst "#v0=x_1") (inst "#v1=x_2"))
            (rule "variableDeclarationAssign" (formula "16") (term "1"))
            (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_1"))
            (rule "compound_addition_2" (formula "16") (term "1") (inst "#v0=x_3") (inst "#v1=x_4"))
            (rule "variableDeclarationAssign" (formula "16") (term "1"))
            (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_9"))
            (rule "assignmentMultiplicationInt" (formula "16") (term "1"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "translateJavaMulInt" (formula "16") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "16") (term "0,1,0"))
            (rule "variableDeclarationAssign" (formula "16") (term "1"))
            (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_10"))
            (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "16") (term "1") (inst "#v0=x_11"))
            (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_11"))
            (rule "variableDeclarationAssign" (formula "16") (term "1"))
            (rule "variableDeclaration" (formula "16") (term "1") (newnames "b_1"))
            (rule "assignment" (formula "16") (term "1"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_toInt,savedHeapBefore_toInt"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "returnUnfold" (formula "16") (term "1") (inst "#v0=x_12"))
            (rule "variableDeclarationAssign" (formula "16") (term "1"))
            (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_12"))
            (rule "condition_simple" (formula "16") (term "1"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "ifthenelse_negated" (formula "16") (term "0,1,0"))
            (rule "methodCallReturn" (formula "16") (term "1"))
            (rule "assignment" (formula "16") (term "1"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "methodCallEmpty" (formula "16") (term "1"))
            (rule "blockEmpty" (formula "16") (term "1"))
            (rule "assignment" (formula "16") (term "1"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "assignmentAdditionInt" (formula "16") (term "1"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "translateJavaAddInt" (formula "16") (term "0,1,0"))
            (rule "variableDeclarationAssign" (formula "16") (term "1"))
            (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_13"))
            (rule "assignment_read_attribute_this_final" (formula "16"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "assignmentSubtractionInt" (formula "16") (term "1"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "translateJavaSubInt" (formula "16") (term "0,1,0"))
            (rule "polySimp_elimSub" (formula "16") (term "0,1,0"))
            (rule "polySimp_addComm1" (formula "16") (term "0,1,0"))
            (rule "blockEmpty" (formula "16") (term "1"))
            (rule "methodCallReturn" (formula "16") (term "1"))
            (rule "assignment" (formula "16") (term "1"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "methodCallEmpty" (formula "16") (term "1"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "emptyModality" (formula "16") (term "1"))
             (builtin "One Step Simplification" (formula "16") (userinteraction))
            (rule "Query_axiom_for_classify_int__in_de_wiesler_Classifier" (formula "18") (term "0") (inst "#res=x") (inst "#self=c") (inst "#p0=x_1") (inst "classify_sk=classify_sk_1") (ifseqformula "7") (userinteraction))
             (builtin "One Step Simplification" (formula "1"))
            (rule "notRight" (formula "17"))
            (rule "eqSymm" (formula "2") (term "0,1"))
            (rule "boxToDiamond" (formula "2") (term "1"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "notLeft" (formula "2"))
            (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_classify_1,savedHeapBefore_classify_0"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "variableDeclarationAssign" (formula "17") (term "1"))
            (rule "variableDeclaration" (formula "17") (term "1") (newnames "index_2"))
            (rule "methodCallWithAssignmentUnfoldTarget" (formula "17") (term "1") (inst "#v0=t"))
            (rule "variableDeclaration" (formula "17") (term "1") (newnames "t_1"))
            (rule "assignment_read_attribute_this_final" (formula "17"))
             (builtin "One Step Simplification" (formula "17"))
             (builtin "Use Operation Contract" (formula "17") (newnames "heapBefore_classify_2,result_242,exc_286") (contract "de.wiesler.Tree[de.wiesler.Tree::classify(int)].JML normal_behavior operation contract.0"))
            (branch "Post (classify)"
                (builtin "One Step Simplification" (formula "18"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "translateJavaMulInt" (formula "17") (term "1,1,0,0,1"))
               (rule "translateJavaSubInt" (formula "17") (term "3,0,0,1,0,1"))
               (rule "andLeft" (formula "17"))
               (rule "andLeft" (formula "18"))
               (rule "andLeft" (formula "17"))
               (rule "andLeft" (formula "18"))
               (rule "andLeft" (formula "18"))
               (rule "andLeft" (formula "20"))
               (rule "eqSymm" (formula "17"))
               (rule "polySimp_elimSub" (formula "20") (term "3,0"))
               (rule "polySimp_mulComm0" (formula "19") (term "1"))
               (rule "assignment" (formula "23") (term "1"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "variableDeclaration" (formula "23") (term "1") (newnames "bucket_1"))
               (rule "ifElseUnfold" (formula "23") (term "1") (inst "#boolv=x_2"))
               (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_14"))
               (rule "assignment_read_attribute_this_final" (formula "23"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "applyEq" (formula "23") (term "0,1,0") (ifseqformula "4"))
               (rule "ifElseSplit" (formula "23"))
               (branch "if x_14 true"
                   (builtin "One Step Simplification" (formula "24"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "variableDeclarationAssign" (formula "23") (term "1"))
                  (rule "variableDeclaration" (formula "23") (term "1") (newnames "bucket_index_1"))
                  (rule "compound_subtraction_2" (formula "23") (term "1") (inst "#v0=x_2") (inst "#v1=x_3"))
                  (rule "variableDeclarationAssign" (formula "23") (term "1"))
                  (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_15"))
                  (rule "assignment" (formula "23") (term "1"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "variableDeclarationAssign" (formula "23") (term "1"))
                  (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_16"))
                  (rule "compound_division_1" (formula "23") (term "1") (inst "#v=x_17"))
                  (rule "variableDeclarationAssign" (formula "23") (term "1"))
                  (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_17"))
                  (rule "assignment_read_attribute_this_final" (formula "23"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "assignmentDivisionInt" (formula "23"))
                  (branch "Case 1"
                      (builtin "One Step Simplification" (formula "23"))
                     (rule "translateJavaDivInt" (formula "23") (term "0,1,0"))
                     (rule "assignmentSubtractionInt" (formula "23") (term "1"))
                      (builtin "One Step Simplification" (formula "23"))
                     (rule "translateJavaSubInt" (formula "23") (term "0,1,0"))
                     (rule "polySimp_elimSub" (formula "23") (term "0,1,0"))
                     (rule "variableDeclarationAssign" (formula "23") (term "1"))
                     (rule "variableDeclaration" (formula "23") (term "1") (newnames "equal_to_splitter_1"))
                     (rule "compound_assignment_2" (formula "23") (term "1") (inst "#v=x_2"))
                     (rule "variableDeclarationAssign" (formula "23") (term "1"))
                     (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_18"))
                     (rule "methodCallWithAssignmentUnfoldArguments" (formula "23") (term "1"))
                     (rule "variableDeclarationAssign" (formula "23") (term "1"))
                     (rule "variableDeclaration" (formula "23") (term "1") (newnames "var_2"))
                     (rule "assignment" (formula "23") (term "1"))
                      (builtin "One Step Simplification" (formula "23"))
                     (rule "variableDeclarationAssign" (formula "23") (term "1"))
                     (rule "variableDeclaration" (formula "23") (term "1") (newnames "var_3"))
                     (rule "eval_order_array_access4" (formula "23") (term "1") (inst "#v0=x_arr"))
                     (rule "variableDeclarationAssign" (formula "23") (term "1"))
                     (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_arr_1"))
                     (rule "assignment_read_attribute_this_final" (formula "23"))
                      (builtin "One Step Simplification" (formula "23"))
                     (rule "assignment_array2" (formula "23"))
                     (branch "Normal Execution (x_arr_1 != null)"
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "pullOutSelect" (formula "23") (term "0,1,0") (inst "selectSK=arr_0"))
                        (rule "simplifySelectOfAnon" (formula "1"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                         (builtin "Use Dependency Contract" (formula "18") (term "0") (ifInst ""  (formula "12") (term "0")) (contract "de.wiesler.Tree[de.wiesler.Tree::classify(int)].JML accessible clause.0"))
                         (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "6")) (ifInst ""  (formula "16")))
                        (rule "wellFormedAnon" (formula "24") (term "1,0,0"))
                        (rule "replace_known_left" (formula "24") (term "0,1,0,0") (ifseqformula "6"))
                         (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "7")))
                        (rule "disjointDefinition" (formula "24") (term "1,0"))
                        (rule "applyEq" (formula "24") (term "0,1") (ifseqformula "18"))
                        (rule "eqSymm" (formula "24") (term "1"))
                        (rule "applyEq" (formula "24") (term "0,1") (ifseqformula "12"))
                        (rule "eqSymm" (formula "24") (term "1"))
                        (rule "distributeIntersection" (formula "24") (term "0,1,0"))
                        (rule "unionEqualsEmpty" (formula "24") (term "1,0"))
                        (rule "commuteIntersection" (formula "24") (term "0,0,1,0"))
                        (rule "commuteIntersection" (formula "24") (term "0,1,1,0"))
                        (rule "commute_and_2" (formula "24") (term "0"))
                        (rule "commute_and" (formula "24") (term "1,0,0"))
                        (rule "shift_paren_and" (formula "24") (term "0,0"))
                        (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "25") (term "1") (inst "#v0=x_19"))
                        (rule "variableDeclaration" (formula "25") (term "1") (newnames "x_19"))
                        (rule "variableDeclarationAssign" (formula "25") (term "1"))
                        (rule "variableDeclaration" (formula "25") (term "1") (newnames "a_1"))
                        (rule "assignment" (formula "25") (term "1"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "variableDeclarationAssign" (formula "25") (term "1"))
                        (rule "variableDeclaration" (formula "25") (term "1") (newnames "b_2"))
                        (rule "assignment" (formula "25") (term "1"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "methodBodyExpand" (formula "25") (term "1") (newnames "heapBefore_cmp_0,savedHeapBefore_cmp_0"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "returnUnfold" (formula "25") (term "1") (inst "#v0=x_20"))
                        (rule "variableDeclarationAssign" (formula "25") (term "1"))
                        (rule "variableDeclaration" (formula "25") (term "1") (newnames "x_20"))
                        (rule "less_than_comparison_simple" (formula "25") (term "1"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "methodCallReturn" (formula "25") (term "1"))
                        (rule "assignment" (formula "25") (term "1"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "methodCallEmpty" (formula "25") (term "1"))
                        (rule "blockEmpty" (formula "25") (term "1"))
                        (rule "assignment" (formula "25") (term "1"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "blockEmpty" (formula "25") (term "1"))
                        (rule "compound_assignment_1_new" (formula "25") (term "1"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "compound_subtraction_2" (formula "25") (term "1") (inst "#v0=x_1") (inst "#v1=x_2"))
                        (rule "variableDeclarationAssign" (formula "25") (term "1"))
                        (rule "variableDeclaration" (formula "25") (term "1") (newnames "x_21"))
                        (rule "compound_addition_2" (formula "25") (term "1") (inst "#v0=x_22") (inst "#v1=x_23"))
                        (rule "variableDeclarationAssign" (formula "25") (term "1"))
                        (rule "variableDeclaration" (formula "25") (term "1") (newnames "x_22"))
                        (rule "assignmentMultiplicationInt" (formula "25") (term "1"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "translateJavaMulInt" (formula "25") (term "0,1,0"))
                        (rule "polySimp_mulComm0" (formula "25") (term "0,1,0"))
                        (rule "variableDeclarationAssign" (formula "25") (term "1"))
                        (rule "variableDeclaration" (formula "25") (term "1") (newnames "x_23"))
                        (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "25") (term "1") (inst "#v0=x_24"))
                        (rule "variableDeclaration" (formula "25") (term "1") (newnames "x_24"))
                        (rule "variableDeclarationAssign" (formula "25") (term "1"))
                        (rule "variableDeclaration" (formula "25") (term "1") (newnames "b_3"))
                        (rule "assignment" (formula "25") (term "1"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "methodBodyExpand" (formula "25") (term "1") (newnames "heapBefore_toInt_0,savedHeapBefore_toInt_0"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "returnUnfold" (formula "25") (term "1") (inst "#v0=x_25"))
                        (rule "variableDeclarationAssign" (formula "25") (term "1"))
                        (rule "variableDeclaration" (formula "25") (term "1") (newnames "x_25"))
                        (rule "condition_simple" (formula "25") (term "1"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "ifthenelse_negated" (formula "25") (term "0,1,0"))
                        (rule "methodCallReturn" (formula "25") (term "1"))
                        (rule "assignment" (formula "25") (term "1"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "methodCallEmpty" (formula "25") (term "1"))
                        (rule "blockEmpty" (formula "25") (term "1"))
                        (rule "assignment" (formula "25") (term "1"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "assignmentAdditionInt" (formula "25") (term "1"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "translateJavaAddInt" (formula "25") (term "0,1,0"))
                        (rule "variableDeclarationAssign" (formula "25") (term "1"))
                        (rule "variableDeclaration" (formula "25") (term "1") (newnames "x_26"))
                        (rule "assignment_read_attribute_this_final" (formula "25"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "assignmentSubtractionInt" (formula "25") (term "1"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "translateJavaSubInt" (formula "25") (term "0,1,0"))
                        (rule "polySimp_elimSub" (formula "25") (term "0,1,0"))
                        (rule "polySimp_addComm1" (formula "25") (term "0,1,0"))
                        (rule "blockEmpty" (formula "25") (term "1"))
                        (rule "methodCallReturn" (formula "25") (term "1"))
                        (rule "assignment" (formula "25") (term "1"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "methodCallEmpty" (formula "25") (term "1"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "emptyModality" (formula "25") (term "1"))
                         (builtin "Use Dependency Contract" (formula "18") (term "0") (ifInst ""  (formula "12") (term "0")) (contract "de.wiesler.Tree[de.wiesler.Tree::classify(int)].JML accessible clause.0") (userinteraction))
                        (rule "impLeft" (formula "25") (userinteraction))
                        (branch "Case 1"
                           (rule "andRight" (formula "25"))
                           (branch "Case 1"
                              (rule "andRight" (formula "25"))
                              (branch "Case 1"
                                 (rule "andRight" (formula "25"))
                                 (branch "Case 1"
                                    (rule "andRight" (formula "25"))
                                    (branch "Case 1"
                                       (rule "andRight" (formula "25"))
                                       (branch "Case 1"
                                           (builtin "One Step Simplification" (formula "26"))
                                          (rule "notRight" (formula "25"))
                                          (rule "notRight" (formula "26"))
                                          (rule "replace_known_left" (formula "6") (term "0") (ifseqformula "2"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "replace_known_left" (formula "25") (term "0,0,0,0,0") (ifseqformula "2"))
                                           (builtin "One Step Simplification" (formula "25"))
                                          (rule "true_left" (formula "25"))
                                          (rule "polySimp_homoEq" (formula "4"))
                                          (rule "polySimp_homoEq" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "4") (term "0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "4") (term "1,0,1,0"))
                                          (rule "polySimp_mulAssoc" (formula "4") (term "0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "4") (term "0,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "4") (term "0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "1") (term "0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1,0,1,0"))
                                          (rule "polySimp_mulAssoc" (formula "1") (term "0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "0,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "4") (term "0"))
                                          (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                          (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                                          (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "15"))
                                          (rule "polySimp_mulAssoc" (formula "15") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "15") (term "0,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "15") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "21"))
                                          (rule "polySimp_mulAssoc" (formula "21") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "21") (term "0,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "21") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "21") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,1,0"))
                                          (rule "polySimp_addComm1" (formula "4") (term "0,0,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,1,0"))
                                          (rule "applyEq" (formula "22") (term "0,0,1,3,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "21") (term "0,0,1,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "23") (term "1") (ifseqformula "2"))
                                          (rule "applyEq" (formula "17") (term "1") (ifseqformula "2"))
                                          (rule "applyEq" (formula "16") (term "1,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "16") (term "0,0,1,3,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "23") (term "0,0,1,1,1,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "15") (term "0,0,1,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "22") (term "1,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "20") (term "0,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "19") (term "0,0,1,1,1,0,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "19") (term "1,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "13") (term "1,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "22") (term "0,0,1,1,1,0,0") (ifseqformula "2"))
                                          (rule "polySimp_sepNegMonomial" (formula "4"))
                                          (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                          (rule "polySimp_elimOne" (formula "4") (term "0"))
                                          (rule "polySimp_sepNegMonomial" (formula "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "21"))
                                          (rule "polySimp_mulLiterals" (formula "21") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "15"))
                                          (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "4") (term "0,0,0"))
                                          (rule "polySimp_elimOne" (formula "4") (term "0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                          (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                                          (rule "inEqSimp_exactShadow1" (formula "21") (ifseqformula "14"))
                                          (rule "greater_literals" (formula "21") (term "0"))
                                           (builtin "One Step Simplification" (formula "21"))
                                          (rule "polySimp_mulComm0" (formula "21") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "21") (term "0,0"))
                                          (rule "mul_literals" (formula "21") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "21") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "21"))
                                          (rule "polySimp_mulLiterals" (formula "21") (term "0"))
                                          (rule "polySimp_elimOne" (formula "21") (term "0"))
                                          (rule "inEqSimp_exactShadow1" (formula "22") (ifseqformula "20"))
                                          (rule "greater_literals" (formula "22") (term "0"))
                                           (builtin "One Step Simplification" (formula "22"))
                                          (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "22") (term "0,0"))
                                          (rule "mul_literals" (formula "22") (term "0,0,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "22") (term "0"))
                                          (rule "add_literals" (formula "22") (term "1,1,0"))
                                          (rule "polySimp_elimOne" (formula "22") (term "1,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "22"))
                                          (rule "mul_literals" (formula "22") (term "1"))
                                          (rule "inEqSimp_exactShadow1" (formula "15") (ifseqformula "20"))
                                          (rule "greater_literals" (formula "15") (term "0"))
                                           (builtin "One Step Simplification" (formula "15"))
                                          (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "15") (term "0,0"))
                                          (rule "mul_literals" (formula "15") (term "0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                                          (rule "polySimp_mulComm0" (formula "15") (term "1"))
                                          (rule "polySimp_rightDist" (formula "15") (term "1"))
                                          (rule "mul_literals" (formula "15") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
                                          (rule "polySimp_elimOne" (formula "15") (term "1,1"))
                                          (rule "inEqSimp_exactShadow1" (formula "16") (ifseqformula "14"))
                                          (rule "greater_literals" (formula "16") (term "0"))
                                           (builtin "One Step Simplification" (formula "16"))
                                          (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "16") (term "0,0"))
                                          (rule "mul_literals" (formula "16") (term "0,0,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "16") (term "0"))
                                          (rule "add_literals" (formula "16") (term "1,1,0"))
                                          (rule "polySimp_elimOne" (formula "16") (term "1,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                                          (rule "mul_literals" (formula "16") (term "1"))
                                          (rule "inEqSimp_exactShadow3" (formula "24") (ifseqformula "23"))
                                          (rule "mul_literals" (formula "24") (term "0,0"))
                                          (rule "polySimp_addAssoc" (formula "24") (term "0"))
                                          (rule "add_literals" (formula "24") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "24"))
                                          (rule "mul_literals" (formula "24") (term "1"))
                                          (rule "inEqSimp_subsumption6" (formula "24") (ifseqformula "16"))
                                          (rule "mul_literals" (formula "24") (term "1,1,0"))
                                          (rule "greater_literals" (formula "24") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "24"))
                                          (rule "leq_literals" (formula "24") (term "0"))
                                           (builtin "One Step Simplification" (formula "24"))
                                          (rule "true_left" (formula "24"))
                                          (rule "inEqSimp_exactShadow1" (formula "15") (ifseqformula "23"))
                                          (rule "greater_literals" (formula "15") (term "0"))
                                           (builtin "One Step Simplification" (formula "15"))
                                          (rule "polySimp_rightDist" (formula "15") (term "0,0"))
                                          (rule "mul_literals" (formula "15") (term "0,0,0"))
                                          (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                                          (rule "mul_literals" (formula "15") (term "0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0"))
                                          (rule "polySimp_addAssoc" (formula "15") (term "0"))
                                          (rule "polySimp_addComm1" (formula "15") (term "0,0"))
                                          (rule "add_literals" (formula "15") (term "0,0,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "15") (term "0"))
                                          (rule "add_literals" (formula "15") (term "1,1,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                                          (rule "mul_literals" (formula "15") (term "1"))
                                          (rule "inEqSimp_subsumption6" (formula "15") (ifseqformula "17"))
                                          (rule "mul_literals" (formula "15") (term "1,1,0"))
                                          (rule "greater_literals" (formula "15") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "15"))
                                          (rule "leq_literals" (formula "15") (term "0"))
                                           (builtin "One Step Simplification" (formula "15"))
                                          (rule "true_left" (formula "15"))
                                          (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "12"))
                                           (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "2")) (ifInst ""  (formula "6")))
                                          (rule "closeFalse" (formula "12"))
                                       )
                                       (branch "Case 2"
                                           (builtin "One Step Simplification" (formula "26"))
                                          (rule "notRight" (formula "26"))
                                          (rule "replace_known_right" (formula "5") (term "1") (ifseqformula "26"))
                                           (builtin "One Step Simplification" (formula "5"))
                                          (rule "replace_known_left" (formula "25") (term "0,0,0,0,0") (ifseqformula "5"))
                                           (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "26")))
                                          (rule "true_left" (formula "25"))
                                          (rule "polySimp_homoEq" (formula "3"))
                                          (rule "polySimp_homoEq" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "3") (term "0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "3") (term "1,0,1,0"))
                                          (rule "polySimp_mulAssoc" (formula "3") (term "0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "3") (term "0,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "3") (term "0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "1") (term "0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1,0,1,0"))
                                          (rule "polySimp_mulAssoc" (formula "1") (term "0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "0,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                          (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                          (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                                          (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "21"))
                                          (rule "polySimp_mulAssoc" (formula "21") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "21") (term "0,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "21") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "21") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "15"))
                                          (rule "polySimp_mulAssoc" (formula "15") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "15") (term "0,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "15") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,0,1,0"))
                                          (rule "polySimp_addComm1" (formula "3") (term "0,0,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,1,0"))
                                          (rule "applyEq" (formula "15") (term "0,0,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "21") (term "0,0,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "22") (term "0,0,1,1,1,0,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "23") (term "0,0,1,1,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "25") (term "1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "22") (term "0,0,1,3,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "19") (term "1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "23") (term "1") (ifseqformula "5"))
                                          (rule "applyEq" (formula "20") (term "0,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "16") (term "0,0,1,3,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "13") (term "1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "19") (term "0,0,1,1,1,0,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "16") (term "1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "17") (term "1") (ifseqformula "5"))
                                          (rule "applyEq" (formula "22") (term "1,0") (ifseqformula "5"))
                                          (rule "polySimp_sepNegMonomial" (formula "3"))
                                          (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                          (rule "polySimp_elimOne" (formula "3") (term "0"))
                                          (rule "polySimp_sepNegMonomial" (formula "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "15"))
                                          (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "21"))
                                          (rule "polySimp_mulLiterals" (formula "21") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0"))
                                          (rule "polySimp_elimOne" (formula "3") (term "0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                                          (rule "inEqSimp_exactShadow1" (formula "15") (ifseqformula "14"))
                                          (rule "greater_literals" (formula "15") (term "0"))
                                           (builtin "One Step Simplification" (formula "15"))
                                          (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "15") (term "0,0"))
                                          (rule "mul_literals" (formula "15") (term "0,0,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "15") (term "0"))
                                          (rule "add_literals" (formula "15") (term "1,1,0"))
                                          (rule "polySimp_elimOne" (formula "15") (term "1,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                                          (rule "mul_literals" (formula "15") (term "1"))
                                          (rule "inEqSimp_exactShadow1" (formula "16") (ifseqformula "21"))
                                          (rule "greater_literals" (formula "16") (term "0"))
                                           (builtin "One Step Simplification" (formula "16"))
                                          (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "16") (term "0,0"))
                                          (rule "mul_literals" (formula "16") (term "0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                                          (rule "polySimp_mulComm0" (formula "16") (term "1"))
                                          (rule "polySimp_rightDist" (formula "16") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "16") (term "1,1"))
                                          (rule "mul_literals" (formula "16") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "16") (term "1,1"))
                                          (rule "inEqSimp_exactShadow1" (formula "23") (ifseqformula "14"))
                                          (rule "greater_literals" (formula "23") (term "0"))
                                           (builtin "One Step Simplification" (formula "23"))
                                          (rule "polySimp_mulComm0" (formula "23") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "23") (term "0,0"))
                                          (rule "mul_literals" (formula "23") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "23") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "23"))
                                          (rule "polySimp_mulLiterals" (formula "23") (term "0"))
                                          (rule "polySimp_elimOne" (formula "23") (term "0"))
                                          (rule "inEqSimp_exactShadow1" (formula "24") (ifseqformula "22"))
                                          (rule "greater_literals" (formula "24") (term "0"))
                                           (builtin "One Step Simplification" (formula "24"))
                                          (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "24") (term "0,0"))
                                          (rule "mul_literals" (formula "24") (term "0,0,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "24") (term "0"))
                                          (rule "add_literals" (formula "24") (term "1,1,0"))
                                          (rule "polySimp_elimOne" (formula "24") (term "1,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "24"))
                                          (rule "mul_literals" (formula "24") (term "1"))
                                          (rule "inEqSimp_exactShadow3" (formula "24") (ifseqformula "23"))
                                          (rule "mul_literals" (formula "24") (term "0,0"))
                                          (rule "polySimp_addAssoc" (formula "24") (term "0"))
                                          (rule "add_literals" (formula "24") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "24"))
                                          (rule "mul_literals" (formula "24") (term "1"))
                                          (rule "inEqSimp_subsumption6" (formula "24") (ifseqformula "15"))
                                          (rule "greater_literals" (formula "24") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "24"))
                                          (rule "mul_literals" (formula "24") (term "1,0"))
                                          (rule "leq_literals" (formula "24") (term "0"))
                                           (builtin "One Step Simplification" (formula "24"))
                                          (rule "true_left" (formula "24"))
                                          (rule "inEqSimp_exactShadow1" (formula "16") (ifseqformula "23"))
                                          (rule "greater_literals" (formula "16") (term "0"))
                                           (builtin "One Step Simplification" (formula "16"))
                                          (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                                          (rule "mul_literals" (formula "16") (term "0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0"))
                                          (rule "polySimp_rightDist" (formula "16") (term "0,0"))
                                          (rule "mul_literals" (formula "16") (term "0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "16") (term "0"))
                                          (rule "polySimp_addComm1" (formula "16") (term "0,0"))
                                          (rule "add_literals" (formula "16") (term "0,0,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "16") (term "0"))
                                          (rule "add_literals" (formula "16") (term "1,1,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                                          (rule "mul_literals" (formula "16") (term "1"))
                                          (rule "inEqSimp_subsumption6" (formula "16") (ifseqformula "15"))
                                          (rule "greater_literals" (formula "16") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "16"))
                                          (rule "mul_literals" (formula "16") (term "1,0"))
                                          (rule "leq_literals" (formula "16") (term "0"))
                                           (builtin "One Step Simplification" (formula "16"))
                                          (rule "true_left" (formula "16"))
                                          (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "12"))
                                           (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "5")) (ifInst ""  (formula "6")))
                                          (rule "closeFalse" (formula "12"))
                                       )
                                    )
                                    (branch "Case 2"
                                       (rule "andRight" (formula "25"))
                                       (branch "Case 1"
                                          (rule "close" (formula "25") (ifseqformula "6"))
                                       )
                                       (branch "Case 2"
                                           (builtin "One Step Simplification" (formula "26"))
                                          (rule "wellFormedAnon" (formula "25"))
                                          (rule "notRight" (formula "26"))
                                          (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "8"))
                                           (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "7")))
                                          (rule "closeTrue" (formula "26"))
                                       )
                                    )
                                 )
                                 (branch "Case 2"
                                     (builtin "One Step Simplification" (formula "26"))
                                     (builtin "One Step Simplification" (formula "25"))
                                    (rule "closeTrue" (formula "25"))
                                 )
                              )
                              (branch "Case 2"
                                 (rule "close" (formula "25") (ifseqformula "16"))
                              )
                           )
                           (branch "Case 2"
                              (rule "Partial_inv_axiom_for_JML_class_invariant_nr_29_in_Classifier" (formula "11") (userinteraction))
                              (rule "applyEq" (formula "26") (term "0,1,1") (ifseqformula "11") (userinteraction))
                              (rule "disjointDefinition" (formula "26"))
                              (rule "distributeIntersection" (formula "26") (term "0"))
                              (rule "unionEqualsEmpty" (formula "26"))
                              (rule "commuteIntersection" (formula "26") (term "0,1"))
                              (rule "commute_and" (formula "26"))
                              (rule "cut_direct" (formula "26") (term "0"))
                              (branch "CUT: self_285.sorted_splitters.* cap allLocs setMinus self_285.sorted_splitters.* cup self_285.tree.tree.* = {} TRUE"
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "equalityToElementOfRight" (formula "27") (inst "fv=fv") (inst "ov=ov"))
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "allRight" (formula "27") (inst "sk=ov_0"))
                                 (rule "allRight" (formula "27") (inst "sk=fv_0"))
                                 (rule "notRight" (formula "27"))
                                 (rule "elementOfIntersect" (formula "1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                                 (rule "elementOfSetMinus" (formula "1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "elementOfUnion" (formula "28"))
                                  (builtin "One Step Simplification" (formula "28"))
                                 (rule "closeTrue" (formula "28"))
                              )
                              (branch "CUT: self_285.sorted_splitters.* cap allLocs setMinus self_285.sorted_splitters.* cup self_285.tree.tree.* = {} FALSE"
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "false_right" (formula "27"))
                                 (rule "equalityToElementOfRight" (formula "26") (inst "fv=fv") (inst "ov=ov"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "allRight" (formula "26") (inst "sk=ov_0"))
                                 (rule "allRight" (formula "26") (inst "sk=fv_0"))
                                 (rule "notRight" (formula "26"))
                                 (rule "elementOfIntersect" (formula "1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                 (rule "elementOfSetMinus" (formula "2"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "elementOfUnion" (formula "27"))
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "closeTrue" (formula "27"))
                              )
                           )
                        )
                        (branch "Case 2"
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "notRight" (formula "26"))
                           (rule "polySimp_homoEq" (formula "3"))
                           (rule "polySimp_homoEq" (formula "1"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,0,1,0"))
                           (rule "polySimp_mulAssoc" (formula "3") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "0,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,0,1,0"))
                           (rule "polySimp_mulAssoc" (formula "1") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "15"))
                           (rule "polySimp_mulAssoc" (formula "15") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "15") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "21"))
                           (rule "polySimp_mulAssoc" (formula "21") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "21") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "21") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,0,1,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,1,0"))
                           (rule "applyEq" (formula "26") (term "0") (ifseqformula "19"))
                           (rule "eqSymm" (formula "26"))
                           (rule "applyEq" (formula "26") (term "0") (ifseqformula "13"))
                           (rule "eqSymm" (formula "26"))
                           (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "26"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "true_left" (formula "25"))
                           (rule "applyEq" (formula "20") (term "1") (ifseqformula "25"))
                           (rule "applyEq" (formula "21") (term "0,3,0") (ifseqformula "24"))
                           (rule "applyEq" (formula "2") (term "0,0,2,2,0") (ifseqformula "24"))
                           (rule "applyEq" (formula "2") (term "0,0,2,1,0") (ifseqformula "24"))
                           (rule "applyEq" (formula "20") (term "1,0,0") (ifseqformula "24"))
                           (rule "applyEq" (formula "19") (term "1") (ifseqformula "23"))
                           (rule "applyEq" (formula "1") (term "0,1,0,0,0") (ifseqformula "23"))
                           (rule "polySimp_sepNegMonomial" (formula "3"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                           (rule "polySimp_elimOne" (formula "3") (term "0"))
                           (rule "polySimp_sepNegMonomial" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "15"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0"))
                           (rule "polySimp_elimOne" (formula "3") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                           (rule "inEqSimp_exactShadow1" (formula "15") (ifseqformula "14"))
                           (rule "greater_literals" (formula "15") (term "0"))
                            (builtin "One Step Simplification" (formula "15"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "15") (term "0,0"))
                           (rule "mul_literals" (formula "15") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "15") (term "0"))
                           (rule "add_literals" (formula "15") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "15") (term "1,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                           (rule "mul_literals" (formula "15") (term "1"))
                           (rule "Contract_axiom_for_isClassifiedAs_in_Tree" (formula "17") (term "0"))
                           (rule "replace_known_left" (formula "17") (term "1,0,0,0") (ifseqformula "7"))
                            (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "19")) (ifInst ""  (formula "19")))
                           (rule "true_left" (formula "17"))
                           (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "22"))
                            (builtin "One Step Simplification" (formula "22"))
                           (rule "translateJavaSubInt" (formula "22") (term "3,0,1"))
                           (rule "andLeft" (formula "22"))
                           (rule "andLeft" (formula "22"))
                           (rule "andLeft" (formula "22"))
                           (rule "andLeft" (formula "22"))
                           (rule "andLeft" (formula "24"))
                           (rule "andLeft" (formula "22"))
                           (rule "andLeft" (formula "23"))
                           (rule "andLeft" (formula "22"))
                           (rule "notLeft" (formula "22"))
                           (rule "notLeft" (formula "22"))
                           (rule "polySimp_elimSub" (formula "28") (term "3,0"))
                           (rule "mul_literals" (formula "28") (term "1,3,0"))
                           (rule "polySimp_addComm0" (formula "28") (term "3,0"))
                           (rule "inEqSimp_commuteLeq" (formula "27"))
                           (rule "inEqSimp_commuteLeq" (formula "25"))
                           (rule "inEqSimp_commuteLeq" (formula "26"))
                           (rule "inEqSimp_commuteLeq" (formula "22"))
                           (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "24"))
                           (rule "applyEq" (formula "17") (term "0,1,3,0") (ifseqformula "24"))
                           (rule "applyEq" (formula "26") (term "1") (ifseqformula "24"))
                           (rule "applyEq" (formula "27") (term "1") (ifseqformula "24"))
                           (rule "applyEq" (formula "28") (term "1,3,0") (ifseqformula "24"))
                           (rule "applyEq" (formula "25") (term "0") (ifseqformula "24"))
                           (rule "applyEq" (formula "21") (term "0,1,3,0") (ifseqformula "24"))
                           (rule "applyEq" (formula "14") (term "0") (ifseqformula "24"))
                           (rule "inEqSimp_exactShadow1" (formula "16") (ifseqformula "14"))
                           (rule "greater_literals" (formula "16") (term "0"))
                            (builtin "One Step Simplification" (formula "16"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "0,0"))
                           (rule "mul_literals" (formula "16") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "16") (term "0"))
                           (rule "add_literals" (formula "16") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "16") (term "1,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                           (rule "mul_literals" (formula "16") (term "1"))
                           (rule "inEqSimp_exactShadow3" (formula "25") (ifseqformula "14"))
                           (rule "mul_literals" (formula "25") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "25"))
                           (rule "mul_literals" (formula "25") (term "1"))
                           (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "25"))
                           (rule "leq_literals" (formula "15") (term "0"))
                            (builtin "One Step Simplification" (formula "15"))
                           (rule "true_left" (formula "15"))
                           (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "12"))
                            (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "6")) (ifInst ""  (formula "17")))
                           (rule "translateJavaSubInt" (formula "12") (term "0,2,0,1"))
                           (rule "translateJavaMulInt" (formula "12") (term "1,1,0,0,0"))
                           (rule "translateJavaSubInt" (formula "12") (term "0,2,1,1"))
                           (rule "andLeft" (formula "12"))
                           (rule "andLeft" (formula "12"))
                           (rule "andLeft" (formula "12"))
                           (rule "andLeft" (formula "12"))
                           (rule "andLeft" (formula "12"))
                           (rule "andLeft" (formula "13"))
                           (rule "andLeft" (formula "12"))
                           (rule "notLeft" (formula "13"))
                           (rule "notLeft" (formula "12"))
                           (rule "eqSymm" (formula "17"))
                           (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "37"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "36"))
                            (builtin "One Step Simplification" (formula "5"))
                           (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "37"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "replace_known_left" (formula "2") (term "0,0,0") (ifseqformula "4"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "applyEqReverse" (formula "1") (term "1,1,0,0") (ifseqformula "2"))
                           (rule "hideAuxiliaryEq" (formula "2"))
                           (rule "polySimp_elimSub" (formula "16") (term "0,2,1"))
                           (rule "mul_literals" (formula "16") (term "1,0,2,1"))
                           (rule "polySimp_elimSub" (formula "16") (term "0,2,0"))
                           (rule "mul_literals" (formula "16") (term "1,0,2,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1"))
                           (rule "eqSymm" (formula "13"))
                           (rule "polySimp_addComm0" (formula "16") (term "0,2,1"))
                           (rule "polySimp_addComm0" (formula "16") (term "0,2,0"))
                           (rule "inEqSimp_commuteLeq" (formula "11"))
                           (rule "inEqSimp_homoInEq0" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
                           (rule "applyEq" (formula "38") (term "0") (ifseqformula "14"))
                           (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "14"))
                           (rule "inEqSimp_commuteGeq" (formula "31"))
                           (rule "applyEq" (formula "15") (term "3,0") (ifseqformula "27"))
                           (rule "applyEq" (formula "13") (term "0,0") (ifseqformula "27"))
                           (rule "applyEq" (formula "16") (term "1,0,2,0") (ifseqformula "27"))
                           (rule "eqSymm" (formula "16"))
                           (rule "applyEq" (formula "32") (term "1,0") (ifseqformula "14"))
                           (rule "applyEq" (formula "16") (term "1,0,2,0") (ifseqformula "27"))
                           (rule "eqSymm" (formula "16"))
                           (rule "applyEq" (formula "19") (term "0") (ifseqformula "13"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                           (rule "polySimp_homoEq" (formula "1"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "1,1,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0"))
                           (rule "add_zero_right" (formula "1") (term "0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "1,1,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0"))
                           (rule "add_zero_right" (formula "1") (term "0"))
                           (rule "polySimp_addComm0" (formula "1") (term "0"))
                           (rule "polySimp_sepPosMonomial" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1"))
                           (rule "close" (formula "39") (ifseqformula "1"))
                        )
                     )
                     (branch "Null Reference (x_arr_1 = null)"
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "false_right" (formula "24"))
                        (rule "replace_known_left" (formula "3") (term "0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "polySimp_homoEq" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "2") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,0,1,0"))
                        (rule "polySimp_mulAssoc" (formula "2") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "2") (term "0"))
                        (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "19"))
                        (rule "polySimp_mulAssoc" (formula "19") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "19") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "19") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "13"))
                        (rule "polySimp_mulAssoc" (formula "13") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "13") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0,1,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0,0,0,1,0"))
                        (rule "applyEq" (formula "21") (term "0,0,1,1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "17") (term "0,0,1,1,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "20") (term "0,0,1,1,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "2") (term "1,0,1,0,0,0,1,0") (ifseqformula "1"))
                        (rule "polySimp_sepNegMonomial" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "19"))
                        (rule "polySimp_mulLiterals" (formula "19") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "13"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0,0,0"))
                        (rule "inEqSimp_exactShadow1" (formula "19") (ifseqformula "18"))
                        (rule "greater_literals" (formula "19") (term "0"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "0,0"))
                        (rule "mul_literals" (formula "19") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "19") (term "0"))
                        (rule "add_literals" (formula "19") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "19") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "19"))
                        (rule "mul_literals" (formula "19") (term "1"))
                        (rule "inEqSimp_exactShadow1" (formula "20") (ifseqformula "12"))
                        (rule "greater_literals" (formula "20") (term "0"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "0,0"))
                        (rule "mul_literals" (formula "20") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "20") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "20"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "0"))
                        (rule "polySimp_elimOne" (formula "20") (term "0"))
                        (rule "inEqSimp_exactShadow1" (formula "13") (ifseqformula "12"))
                        (rule "greater_literals" (formula "13") (term "0"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "0,0"))
                        (rule "mul_literals" (formula "13") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "13") (term "0"))
                        (rule "add_literals" (formula "13") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "13") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "13"))
                        (rule "mul_literals" (formula "13") (term "1"))
                        (rule "inEqSimp_exactShadow1" (formula "14") (ifseqformula "19"))
                        (rule "greater_literals" (formula "14") (term "0"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "0,0"))
                        (rule "mul_literals" (formula "14") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1"))
                        (rule "polySimp_rightDist" (formula "14") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
                        (rule "mul_literals" (formula "14") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1"))
                        (rule "inEqSimp_exactShadow1" (formula "14") (ifseqformula "22"))
                        (rule "greater_literals" (formula "14") (term "0"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "0,0"))
                        (rule "mul_literals" (formula "14") (term "0,0,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0"))
                        (rule "polySimp_addComm1" (formula "14") (term "0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "14") (term "0"))
                        (rule "add_literals" (formula "14") (term "1,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                        (rule "mul_literals" (formula "14") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "14") (ifseqformula "13"))
                        (rule "greater_literals" (formula "14") (term "0,0"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "mul_literals" (formula "14") (term "1,0"))
                        (rule "leq_literals" (formula "14") (term "0"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "true_left" (formula "14"))
                        (rule "inEqSimp_exactShadow3" (formula "21") (ifseqformula "22"))
                        (rule "mul_literals" (formula "21") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "21") (term "0"))
                        (rule "add_literals" (formula "21") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "21"))
                        (rule "mul_literals" (formula "21") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "21") (ifseqformula "13"))
                        (rule "greater_literals" (formula "21") (term "0,0"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "mul_literals" (formula "21") (term "1,0"))
                        (rule "leq_literals" (formula "21") (term "0"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "true_left" (formula "21"))
                        (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "10"))
                         (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "1")) (ifInst ""  (formula "4")) (ifInst ""  (formula "17")))
                        (rule "closeFalse" (formula "10"))
                     )
                     (branch "Index Out of Bounds (x_arr_1 != null, but bucket_index_1 Out of Bounds!)"
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "false_right" (formula "24"))
                        (rule "andLeft" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "24"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "polySimp_homoEq" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "2") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,0,1,0"))
                        (rule "polySimp_mulAssoc" (formula "2") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "2") (term "0"))
                        (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "14"))
                        (rule "polySimp_mulAssoc" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "14") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "20"))
                        (rule "polySimp_mulAssoc" (formula "20") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "20") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "1") (term "0,0,1"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0,1,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0,0,0,1,0"))
                        (rule "polySimp_sepNegMonomial" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "14"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "20"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "0,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0,0,0"))
                        (rule "inEqSimp_exactShadow1" (formula "14") (ifseqformula "19"))
                        (rule "greater_literals" (formula "14") (term "0"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "0,0"))
                        (rule "mul_literals" (formula "14") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1"))
                        (rule "polySimp_rightDist" (formula "14") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
                        (rule "mul_literals" (formula "14") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1"))
                        (rule "inEqSimp_exactShadow1" (formula "15") (ifseqformula "13"))
                        (rule "greater_literals" (formula "15") (term "0"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "0,0"))
                        (rule "mul_literals" (formula "15") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "15") (term "0"))
                        (rule "add_literals" (formula "15") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                        (rule "mul_literals" (formula "15") (term "1"))
                        (rule "inEqSimp_exactShadow1" (formula "22") (ifseqformula "13"))
                        (rule "greater_literals" (formula "22") (term "0"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "0,0"))
                        (rule "mul_literals" (formula "22") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "22") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "22"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "0"))
                        (rule "polySimp_elimOne" (formula "22") (term "0"))
                        (rule "inEqSimp_exactShadow1" (formula "23") (ifseqformula "21"))
                        (rule "greater_literals" (formula "23") (term "0"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "23") (term "0,0"))
                        (rule "mul_literals" (formula "23") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "23") (term "0"))
                        (rule "add_literals" (formula "23") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "23") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "23"))
                        (rule "mul_literals" (formula "23") (term "1"))
                        (rule "inEqSimp_exactShadow3" (formula "23") (ifseqformula "22"))
                        (rule "mul_literals" (formula "23") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "23") (term "0"))
                        (rule "add_literals" (formula "23") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "23"))
                        (rule "mul_literals" (formula "23") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "23") (ifseqformula "15"))
                        (rule "mul_literals" (formula "23") (term "1,1,0"))
                        (rule "greater_literals" (formula "23") (term "0,0"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "leq_literals" (formula "23") (term "0"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "true_left" (formula "23"))
                        (rule "inEqSimp_exactShadow1" (formula "14") (ifseqformula "22"))
                        (rule "greater_literals" (formula "14") (term "0"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "0,0"))
                        (rule "mul_literals" (formula "14") (term "0,0,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0"))
                        (rule "polySimp_addComm1" (formula "14") (term "0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "14") (term "0"))
                        (rule "add_literals" (formula "14") (term "1,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                        (rule "mul_literals" (formula "14") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "14") (ifseqformula "16"))
                        (rule "mul_literals" (formula "14") (term "1,1,0"))
                        (rule "greater_literals" (formula "14") (term "0,0"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "leq_literals" (formula "14") (term "0"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "true_left" (formula "14"))
                        (rule "Contract_axiom_for_isClassifiedAs_in_Tree" (formula "25") (term "0"))
                         (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "27")) (ifInst ""  (formula "27")))
                        (rule "true_left" (formula "25"))
                        (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "18"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "translateJavaSubInt" (formula "18") (term "3,0,1"))
                        (rule "andLeft" (formula "18"))
                        (rule "andLeft" (formula "18"))
                        (rule "andLeft" (formula "18"))
                        (rule "andLeft" (formula "18"))
                        (rule "andLeft" (formula "20"))
                        (rule "andLeft" (formula "18"))
                        (rule "andLeft" (formula "19"))
                        (rule "andLeft" (formula "18"))
                        (rule "notLeft" (formula "18"))
                        (rule "notLeft" (formula "18"))
                        (rule "polySimp_elimSub" (formula "24") (term "3,0"))
                        (rule "mul_literals" (formula "24") (term "1,3,0"))
                        (rule "polySimp_addComm0" (formula "24") (term "3,0"))
                        (rule "inEqSimp_commuteLeq" (formula "23"))
                        (rule "inEqSimp_commuteLeq" (formula "21"))
                        (rule "inEqSimp_commuteLeq" (formula "22"))
                        (rule "inEqSimp_commuteLeq" (formula "18"))
                        (rule "applyEq" (formula "23") (term "1") (ifseqformula "20"))
                        (rule "applyEq" (formula "22") (term "1") (ifseqformula "20"))
                        (rule "applyEq" (formula "21") (term "0") (ifseqformula "20"))
                        (rule "applyEq" (formula "24") (term "1,3,0") (ifseqformula "20"))
                        (rule "applyEq" (formula "13") (term "0") (ifseqformula "20"))
                        (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "20"))
                        (rule "applyEq" (formula "27") (term "0") (ifseqformula "20"))
                        (rule "applyEq" (formula "31") (term "0,1,3,0") (ifseqformula "20"))
                        (rule "applyEq" (formula "17") (term "0,1,3,0") (ifseqformula "20"))
                        (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "20"))
                        (rule "inEqSimp_exactShadow3" (formula "21") (ifseqformula "13"))
                        (rule "mul_literals" (formula "21") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "21"))
                        (rule "mul_literals" (formula "21") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "21"))
                        (rule "leq_literals" (formula "15") (term "0"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "true_left" (formula "15"))
                        (rule "inEqSimp_exactShadow3" (formula "21") (ifseqformula "27"))
                        (rule "mul_literals" (formula "21") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "21"))
                        (rule "mul_literals" (formula "21") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "30") (ifseqformula "21"))
                        (rule "leq_literals" (formula "30") (term "0"))
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "true_left" (formula "30"))
                        (rule "inEqSimp_exactShadow1" (formula "15") (ifseqformula "13"))
                        (rule "greater_literals" (formula "15") (term "0"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "0,0"))
                        (rule "mul_literals" (formula "15") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "15") (term "0"))
                        (rule "add_literals" (formula "15") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                        (rule "mul_literals" (formula "15") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "21"))
                        (rule "leq_literals" (formula "15") (term "0"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "true_left" (formula "15"))
                        (rule "inEqSimp_exactShadow1" (formula "15") (ifseqformula "28"))
                        (rule "greater_literals" (formula "15") (term "0"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "0,0"))
                        (rule "mul_literals" (formula "15") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1"))
                        (rule "polySimp_rightDist" (formula "15") (term "1"))
                        (rule "mul_literals" (formula "15") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "15") (term "1,1"))
                        (rule "inEqSimp_exactShadow1" (formula "30") (ifseqformula "13"))
                        (rule "greater_literals" (formula "30") (term "0"))
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "polySimp_mulComm0" (formula "30") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "30") (term "0,0"))
                        (rule "mul_literals" (formula "30") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "30") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "30"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                        (rule "polySimp_elimOne" (formula "30") (term "0"))
                        (rule "inEqSimp_exactShadow1" (formula "30") (ifseqformula "28"))
                        (rule "greater_literals" (formula "30") (term "0"))
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "polySimp_mulComm0" (formula "30") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "30") (term "0,0"))
                        (rule "mul_literals" (formula "30") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "30") (term "0"))
                        (rule "add_literals" (formula "30") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "30") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "30"))
                        (rule "mul_literals" (formula "30") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "30") (ifseqformula "21"))
                        (rule "leq_literals" (formula "30") (term "0"))
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "true_left" (formula "30"))
                        (rule "inEqSimp_exactShadow3" (formula "21") (ifseqformula "29"))
                        (rule "mul_literals" (formula "21") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "21") (term "0"))
                        (rule "add_literals" (formula "21") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "21"))
                        (rule "mul_literals" (formula "21") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "21") (ifseqformula "20"))
                        (rule "greater_literals" (formula "21") (term "0,0"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "mul_literals" (formula "21") (term "1,0"))
                        (rule "leq_literals" (formula "21") (term "0"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "true_left" (formula "21"))
                        (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "11"))
                         (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "36")) (ifInst ""  (formula "5")))
                        (rule "translateJavaMulInt" (formula "11") (term "1,1,0,0,0,0"))
                        (rule "translateJavaSubInt" (formula "11") (term "0,2,0,1,0"))
                        (rule "translateJavaSubInt" (formula "11") (term "0,2,1,1,0"))
                        (rule "andLeft" (formula "11"))
                        (rule "andLeft" (formula "11"))
                        (rule "andLeft" (formula "11"))
                        (rule "andLeft" (formula "11"))
                        (rule "andLeft" (formula "11"))
                        (rule "andLeft" (formula "11"))
                        (rule "notLeft" (formula "11"))
                        (rule "andLeft" (formula "11"))
                        (rule "eqSymm" (formula "16"))
                        (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "40"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "polySimp_elimSub" (formula "16") (term "0,2,1"))
                        (rule "mul_literals" (formula "16") (term "1,0,2,1"))
                        (rule "polySimp_elimSub" (formula "16") (term "0,2,0"))
                        (rule "mul_literals" (formula "16") (term "1,0,2,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1"))
                        (rule "eqSymm" (formula "13"))
                        (rule "polySimp_addComm0" (formula "16") (term "0,2,1"))
                        (rule "polySimp_addComm0" (formula "16") (term "0,2,0"))
                        (rule "inEqSimp_commuteLeq" (formula "11"))
                        (rule "applyEq" (formula "13") (term "0,0") (ifseqformula "25"))
                        (rule "applyEq" (formula "16") (term "1,0,2,0") (ifseqformula "25"))
                        (rule "eqSymm" (formula "16"))
                        (rule "applyEq" (formula "15") (term "3,0") (ifseqformula "25"))
                        (rule "applyEq" (formula "31") (term "1,0") (ifseqformula "14"))
                        (rule "applyEq" (formula "42") (term "0") (ifseqformula "14"))
                        (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "14"))
                        (rule "inEqSimp_commuteGeq" (formula "30"))
                        (rule "applyEq" (formula "36") (term "0") (ifseqformula "13"))
                        (rule "applyEq" (formula "21") (term "0") (ifseqformula "13"))
                        (rule "applyEq" (formula "16") (term "1,0,2,0") (ifseqformula "25"))
                        (rule "eqSymm" (formula "16"))
                        (rule "newSym_eq" (formula "13") (inst "l=l_0") (inst "newSymDef=mul(int::final(self,
               de.wiesler.Classifier::$num_buckets),
    Z(0(#)))"))
                        (rule "times_zero_1" (formula "13") (term "1,1"))
                        (rule "add_zero_right" (formula "13") (term "1"))
                        (rule "applyEq" (formula "30") (term "1") (ifseqformula "13"))
                        (rule "applyEq" (formula "17") (term "1,0,2,0") (ifseqformula "13"))
                        (rule "eqSymm" (formula "17"))
                        (rule "applyEq" (formula "23") (term "0,1,3,0") (ifseqformula "13"))
                        (rule "polySimp_addComm0" (formula "23") (term "3,0"))
                        (rule "applyEq" (formula "20") (term "0") (ifseqformula "13"))
                        (rule "inEqSimp_commuteLeq" (formula "20"))
                        (rule "applyEq" (formula "29") (term "0") (ifseqformula "13"))
                        (rule "applyEq" (formula "16") (term "3,0") (ifseqformula "13"))
                        (rule "applyEq" (formula "31") (term "0") (ifseqformula "13"))
                        (rule "inEqSimp_commuteLeq" (formula "31"))
                        (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "13"))
                        (rule "eqSymm" (formula "14"))
                        (rule "applyEq" (formula "32") (term "1,3,0") (ifseqformula "13"))
                        (rule "applyEq" (formula "35") (term "0") (ifseqformula "13"))
                        (rule "inEqSimp_commuteLeq" (formula "35"))
                        (rule "applyEq" (formula "38") (term "0,1,3,0") (ifseqformula "13"))
                        (rule "polySimp_addComm0" (formula "38") (term "3,0"))
                        (rule "applyEq" (formula "22") (term "0") (ifseqformula "14"))
                        (rule "inEqSimp_homoInEq1" (formula "22"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "22") (term "0"))
                        (rule "applyEq" (formula "37") (term "0") (ifseqformula "14"))
                        (rule "inEqSimp_homoInEq1" (formula "37"))
                        (rule "polySimp_mulLiterals" (formula "37") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "37") (term "0"))
                        (rule "applyEq" (formula "1") (term "0,0,1,1,0") (ifseqformula "14"))
                        (rule "polySimp_addComm0" (formula "1") (term "1,0"))
                        (rule "applyEq" (formula "11") (term "0") (ifseqformula "14"))
                        (rule "applyEq" (formula "2") (term "0,0,1,0,2,0,0,0") (ifseqformula "14"))
                        (rule "polySimp_addComm0" (formula "2") (term "0,2,0,0,0"))
                        (rule "applyEq" (formula "1") (term "0,0,1") (ifseqformula "14"))
                        (rule "inEqSimp_homoInEq1" (formula "1") (term "1"))
                        (rule "polySimp_addComm1" (formula "1") (term "0,1"))
                        (rule "applyEq" (formula "12") (term "0") (ifseqformula "14"))
                        (rule "applyEq" (formula "17") (term "1,0,2,0") (ifseqformula "13"))
                        (rule "eqSymm" (formula "17"))
                        (rule "applyEq" (formula "2") (term "1,1") (ifseqformula "14"))
                        (rule "polySimp_addComm1" (formula "2") (term "1"))
                        (rule "polySimp_addComm0" (formula "2") (term "0,1"))
                        (rule "applyEq" (formula "26") (term "1") (ifseqformula "13"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "22"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1"))
                        (rule "polySimp_rightDist" (formula "22") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "1,1"))
                        (rule "mul_literals" (formula "22") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "37"))
                        (rule "polySimp_mulComm0" (formula "37") (term "1"))
                        (rule "polySimp_rightDist" (formula "37") (term "1"))
                        (rule "mul_literals" (formula "37") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "37") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1"))
                        (rule "mul_literals" (formula "1") (term "0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1,1"))
                        (rule "inEqSimp_subsumption6" (formula "11") (ifseqformula "29"))
                        (rule "greater_literals" (formula "11") (term "0,0"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "mul_literals" (formula "11") (term "1,0"))
                        (rule "leq_literals" (formula "11") (term "0"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "true_left" (formula "11"))
                        (rule "elimGcdLeq_antec" (formula "11") (inst "elimGcdRightDiv=Z(4(6(#)))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "leq_literals" (formula "11") (term "0,0"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "neg_literal" (formula "11") (term "0,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "11") (term "0,0,0,0"))
                        (rule "add_literals" (formula "11") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0"))
                        (rule "add_literals" (formula "11") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "11") (term "1,0,0"))
                        (rule "add_zero_right" (formula "11") (term "0,0"))
                        (rule "qeq_literals" (formula "11") (term "0"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "true_left" (formula "11"))
                        (rule "inEqSimp_exactShadow3" (formula "26") (ifseqformula "35"))
                        (rule "mul_literals" (formula "26") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "26") (term "0"))
                        (rule "add_literals" (formula "26") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "26"))
                        (rule "mul_literals" (formula "26") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "26") (ifseqformula "28"))
                        (rule "greater_literals" (formula "26") (term "0,0"))
                         (builtin "One Step Simplification" (formula "26"))
                        (rule "mul_literals" (formula "26") (term "1,0"))
                        (rule "leq_literals" (formula "26") (term "0"))
                         (builtin "One Step Simplification" (formula "26"))
                        (rule "true_left" (formula "26"))
                        (rule "inEqSimp_exactShadow1" (formula "19") (ifseqformula "35"))
                        (rule "greater_literals" (formula "19") (term "0"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "polySimp_rightDist" (formula "19") (term "0,0"))
                        (rule "mul_literals" (formula "19") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,0"))
                        (rule "polySimp_addComm1" (formula "19") (term "0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,0"))
                        (rule "add_literals" (formula "19") (term "0,0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "19"))
                        (rule "polySimp_mulLiterals" (formula "19") (term "0"))
                        (rule "polySimp_elimOne" (formula "19") (term "0"))
                        (rule "inEqSimp_exactShadow3" (formula "26") (ifseqformula "21"))
                        (rule "mul_literals" (formula "26") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "26") (term "0"))
                        (rule "add_literals" (formula "26") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "26"))
                        (rule "mul_literals" (formula "26") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "26") (ifseqformula "29"))
                        (rule "mul_literals" (formula "26") (term "1,1,0"))
                        (rule "greater_literals" (formula "26") (term "0,0"))
                         (builtin "One Step Simplification" (formula "26"))
                        (rule "leq_literals" (formula "26") (term "0"))
                         (builtin "One Step Simplification" (formula "26"))
                        (rule "true_left" (formula "26"))
                        (rule "inEqSimp_exactShadow3" (formula "34") (ifseqformula "36"))
                        (rule "polySimp_mulComm0" (formula "34") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "34") (term "0"))
                        (rule "polySimp_addComm0" (formula "34") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "34") (term "0"))
                        (rule "add_literals" (formula "34") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "34") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "34"))
                        (rule "mul_literals" (formula "34") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "28"))
                        (rule "leq_literals" (formula "34") (term "0"))
                         (builtin "One Step Simplification" (formula "34"))
                        (rule "true_left" (formula "34"))
                        (rule "inEqSimp_exactShadow3" (formula "34") (ifseqformula "35"))
                        (rule "polySimp_mulComm0" (formula "34") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "34") (term "0"))
                        (rule "polySimp_addComm0" (formula "34") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "34"))
                        (rule "polySimp_mulComm0" (formula "34") (term "1"))
                        (rule "polySimp_rightDist" (formula "34") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "34") (term "1,1"))
                        (rule "mul_literals" (formula "34") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "34") (term "1,1"))
                        (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "21"))
                        (rule "polySimp_mulComm0" (formula "18") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0"))
                        (rule "polySimp_addComm0" (formula "18") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "18") (term "0"))
                        (rule "add_literals" (formula "18") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "18") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "18"))
                        (rule "mul_literals" (formula "18") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "29"))
                        (rule "leq_literals" (formula "18") (term "0"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "true_left" (formula "18"))
                        (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "19"))
                        (rule "polySimp_mulComm0" (formula "18") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0"))
                        (rule "polySimp_addComm0" (formula "18") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "18") (term "0"))
                        (rule "add_literals" (formula "18") (term "1,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "18"))
                        (rule "mul_literals" (formula "18") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "18") (ifseqformula "29"))
                        (rule "mul_literals" (formula "18") (term "1,1,0"))
                        (rule "greater_literals" (formula "18") (term "0,0"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "leq_literals" (formula "18") (term "0"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "true_left" (formula "18"))
                        (rule "inEqSimp_exactShadow3" (formula "26") (ifseqformula "19"))
                        (rule "mul_literals" (formula "26") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "26") (term "0"))
                        (rule "add_literals" (formula "26") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "26"))
                        (rule "mul_literals" (formula "26") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "26") (ifseqformula "29"))
                        (rule "mul_literals" (formula "26") (term "1,1,0"))
                        (rule "greater_literals" (formula "26") (term "0,0"))
                         (builtin "One Step Simplification" (formula "26"))
                        (rule "leq_literals" (formula "26") (term "0"))
                         (builtin "One Step Simplification" (formula "26"))
                        (rule "true_left" (formula "26"))
                        (rule "inEqSimp_exactShadow1" (formula "34") (ifseqformula "19"))
                        (rule "greater_literals" (formula "34") (term "0"))
                         (builtin "One Step Simplification" (formula "34"))
                        (rule "polySimp_rightDist" (formula "34") (term "0,0"))
                        (rule "mul_literals" (formula "34") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "34") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0"))
                        (rule "mul_literals" (formula "34") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "34") (term "0"))
                        (rule "polySimp_addComm1" (formula "34") (term "0,0"))
                        (rule "add_literals" (formula "34") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "34") (term "0"))
                        (rule "add_literals" (formula "34") (term "1,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "34"))
                        (rule "mul_literals" (formula "34") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "34") (ifseqformula "28"))
                        (rule "mul_literals" (formula "34") (term "1,1,0"))
                        (rule "greater_literals" (formula "34") (term "0,0"))
                         (builtin "One Step Simplification" (formula "34"))
                        (rule "leq_literals" (formula "34") (term "0"))
                         (builtin "One Step Simplification" (formula "34"))
                        (rule "true_left" (formula "34"))
                        (rule "inEqSimp_exactShadow1" (formula "34") (ifseqformula "21"))
                        (rule "greater_literals" (formula "34") (term "0"))
                         (builtin "One Step Simplification" (formula "34"))
                        (rule "polySimp_rightDist" (formula "34") (term "0,0"))
                        (rule "mul_literals" (formula "34") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "34") (term "1,0"))
                        (rule "mul_literals" (formula "34") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0"))
                        (rule "polySimp_addAssoc" (formula "34") (term "0"))
                        (rule "polySimp_addComm1" (formula "34") (term "0,0"))
                        (rule "add_literals" (formula "34") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "34") (term "0"))
                        (rule "add_literals" (formula "34") (term "1,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "34"))
                        (rule "mul_literals" (formula "34") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "34") (ifseqformula "28"))
                        (rule "mul_literals" (formula "34") (term "1,1,0"))
                        (rule "greater_literals" (formula "34") (term "0,0"))
                         (builtin "One Step Simplification" (formula "34"))
                        (rule "leq_literals" (formula "34") (term "0"))
                         (builtin "One Step Simplification" (formula "34"))
                        (rule "true_left" (formula "34"))
                        (rule "commute_or" (formula "1"))
                        (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "31") (term "0") (inst "i=i") (inst "j=j"))
                         (builtin "One Step Simplification" (formula "31"))
                        (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "31") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0,1,0"))
                        (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0,1,0"))
                        (rule "add_literals" (formula "31") (term "0,0,0,1,0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "31") (term "1,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "31") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "31") (term "0,1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,1,0"))
                        (rule "nnf_imp2or" (formula "31") (term "0"))
                        (rule "nnf_notAnd" (formula "31") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "31") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "31") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0"))
                        (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "31") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0"))
                        (rule "mul_literals" (formula "31") (term "1,0,0,0"))
                        (rule "nnf_imp2or" (formula "31") (term "0,1,0"))
                        (rule "nnf_notAnd" (formula "31") (term "0,0,1,0"))
                        (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0,1,0"))
                        (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0,1,0"))
                        (rule "add_literals" (formula "31") (term "0,0,0,1,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "31") (term "0,1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,1,0"))
                        (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "31") (term "1,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0,0,1,0"))
                        (rule "mul_literals" (formula "31") (term "0,1,0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0,0,1,0"))
                        (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "14") (term "0") (inst "i=i") (inst "j=j"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                        (rule "Definition_axiom_for_isClassifiedAs_in_de_wiesler_Tree" (formula "22") (term "0"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "translateJavaSubInt" (formula "22") (term "0,2,0,1,0"))
                        (rule "translateJavaSubInt" (formula "22") (term "1,0,1"))
                        (rule "andLeft" (formula "22"))
                        (rule "polySimp_elimSub" (formula "23") (term "1,0"))
                        (rule "mul_literals" (formula "23") (term "1,1,0"))
                        (rule "polySimp_elimSub" (formula "22") (term "0,2,0,1"))
                        (rule "mul_literals" (formula "22") (term "1,0,2,0,1"))
                        (rule "polySimp_addComm0" (formula "23") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "22") (term "0,2,0,1"))
                        (rule "polySimp_addComm0" (formula "22") (term "0,0,2,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "22") (term "0"))
                        (rule "add_zero_right" (formula "22") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0,0"))
                        (rule "polySimp_mulAssoc" (formula "22") (term "0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "22") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "23") (term "0"))
                        (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "23") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "23") (term "0,0,0"))
                        (rule "add_literals" (formula "23") (term "0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "23") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "23") (term "0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "22") (term "1"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "23") (term "1"))
                        (rule "applyEq" (formula "23") (term "0,1,0,0") (ifseqformula "26"))
                        (rule "polySimp_addComm1" (formula "23") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "23") (term "0,0,0"))
                        (rule "add_literals" (formula "23") (term "1,1,0,0,0"))
                        (rule "applyEq" (formula "23") (term "1,0,1") (ifseqformula "13"))
                        (rule "applyEq" (formula "22") (term "1,1,0,1") (ifseqformula "13"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "0,0"))
                        (rule "polySimp_elimOne" (formula "22") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "23") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0"))
                        (rule "mul_literals" (formula "23") (term "0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,1"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1"))
                        (rule "mul_literals" (formula "22") (term "0,1,1"))
                        (rule "polySimp_elimOne" (formula "22") (term "1,1,1"))
                        (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "16"))
                         (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "43")) (ifInst ""  (formula "25")))
                        (rule "translateJavaSubInt" (formula "16") (term "3,0,1"))
                        (rule "andLeft" (formula "16"))
                        (rule "andLeft" (formula "16"))
                        (rule "andLeft" (formula "16"))
                        (rule "andLeft" (formula "16"))
                        (rule "andLeft" (formula "18"))
                        (rule "andLeft" (formula "16"))
                        (rule "notLeft" (formula "16"))
                        (rule "polySimp_elimSub" (formula "21") (term "3,0"))
                        (rule "mul_literals" (formula "21") (term "1,3,0"))
                        (rule "polySimp_addComm0" (formula "21") (term "3,0"))
                        (rule "inEqSimp_commuteLeq" (formula "20"))
                        (rule "inEqSimp_commuteLeq" (formula "18"))
                        (rule "inEqSimp_commuteLeq" (formula "19"))
                        (rule "inEqSimp_commuteLeq" (formula "16"))
                        (rule "applyEq" (formula "17") (term "0") (ifseqformula "16"))
                        (rule "applyEq" (formula "20") (term "1,3,0") (ifseqformula "30"))
                        (rule "applyEq" (formula "19") (term "1") (ifseqformula "30"))
                        (rule "applyEq" (formula "19") (term "0,0") (ifseqformula "13"))
                        (rule "applyEq" (formula "18") (term "1") (ifseqformula "16"))
                        (rule "applyEq" (formula "16") (term "0") (ifseqformula "29"))
                        (rule "eqSymm" (formula "16"))
                        (rule "applyEq" (formula "44") (term "0") (ifseqformula "13"))
                        (rule "applyEq" (formula "18") (term "1,0") (ifseqformula "13"))
                        (rule "applyEq" (formula "16") (term "0") (ifseqformula "11"))
                        (rule "applyEq" (formula "16") (term "1") (ifseqformula "11"))
                        (rule "Contract_axiom_for_isClassifiedAs_in_Tree" (formula "39") (term "0"))
                         (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "41")) (ifInst ""  (formula "43")) (ifInst ""  (formula "41")))
                        (rule "true_left" (formula "39"))
                        (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "40"))
                         (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "43")) (ifInst ""  (formula "25")))
                        (rule "translateJavaSubInt" (formula "40") (term "3,0,1"))
                        (rule "andLeft" (formula "40"))
                        (rule "andLeft" (formula "40"))
                        (rule "andLeft" (formula "40"))
                        (rule "andLeft" (formula "40"))
                        (rule "andLeft" (formula "42"))
                        (rule "andLeft" (formula "40"))
                        (rule "notLeft" (formula "40"))
                        (rule "polySimp_elimSub" (formula "45") (term "3,0"))
                        (rule "mul_literals" (formula "45") (term "1,3,0"))
                        (rule "polySimp_addComm0" (formula "45") (term "3,0"))
                        (rule "inEqSimp_commuteLeq" (formula "44"))
                        (rule "inEqSimp_commuteLeq" (formula "42"))
                        (rule "inEqSimp_commuteLeq" (formula "43"))
                        (rule "inEqSimp_commuteLeq" (formula "40"))
                        (rule "applyEq" (formula "44") (term "1,3,0") (ifseqformula "26"))
                        (rule "applyEq" (formula "43") (term "1") (ifseqformula "26"))
                        (rule "applyEq" (formula "46") (term "0") (ifseqformula "13"))
                        (rule "applyEq" (formula "40") (term "0") (ifseqformula "26"))
                        (rule "eqSymm" (formula "40"))
                        (rule "applyEq" (formula "41") (term "1") (ifseqformula "26"))
                        (rule "applyEq" (formula "41") (term "0,0") (ifseqformula "13"))
                        (rule "applyEq" (formula "40") (term "0") (ifseqformula "26"))
                        (rule "applyEq" (formula "40") (term "1,0") (ifseqformula "13"))
                        (rule "Definition_axiom_for_isClassifiedAs_in_de_wiesler_Tree" (formula "39") (term "0"))
                         (builtin "One Step Simplification" (formula "39"))
                        (rule "translateJavaSubInt" (formula "39") (term "1,0,1"))
                        (rule "translateJavaSubInt" (formula "39") (term "0,2,0,1,0"))
                        (rule "andLeft" (formula "39"))
                        (rule "polySimp_elimSub" (formula "40") (term "1,0"))
                        (rule "mul_literals" (formula "40") (term "1,1,0"))
                        (rule "polySimp_elimSub" (formula "39") (term "0,2,0,1"))
                        (rule "mul_literals" (formula "39") (term "1,0,2,0,1"))
                        (rule "polySimp_addComm0" (formula "40") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "39") (term "0,2,0,1"))
                        (rule "polySimp_addComm0" (formula "39") (term "0,0,2,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "39") (term "0"))
                        (rule "add_zero_right" (formula "39") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "39") (term "1,0,0"))
                        (rule "polySimp_mulAssoc" (formula "39") (term "0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "39") (term "0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "39") (term "0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "39") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "39") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "40") (term "0"))
                        (rule "polySimp_rightDist" (formula "40") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "40") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "40") (term "0,0,0"))
                        (rule "add_literals" (formula "40") (term "0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "40") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "40") (term "0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "39") (term "1"))
                        (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "40") (term "1"))
                        (rule "applyEq" (formula "40") (term "1,0,1") (ifseqformula "13"))
                        (rule "applyEq" (formula "39") (term "1,1,0,1") (ifseqformula "13"))
                        (rule "applyEq" (formula "40") (term "0,1,0,0") (ifseqformula "26"))
                        (rule "polySimp_addComm1" (formula "40") (term "0,0"))
                        (rule "polySimp_pullOutFactor3b" (formula "40") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "40") (term "1,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "39") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "39") (term "0,0"))
                        (rule "polySimp_elimOne" (formula "39") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1"))
                        (rule "polySimp_mulComm0" (formula "39") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "39") (term "1,1"))
                        (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1"))
                        (rule "mul_literals" (formula "39") (term "0,1,1"))
                        (rule "polySimp_elimOne" (formula "39") (term "1,1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "0"))
                        (rule "polySimp_mulComm0" (formula "40") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "40") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0"))
                        (rule "mul_literals" (formula "40") (term "0,1,0"))
                        (rule "pullOutSelect" (formula "40") (term "0,1") (inst "selectSK=arr_0"))
                        (rule "simplifySelectOfAnon" (formula "40"))
                         (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "46")) (ifInst ""  (formula "3")))
                        (rule "inEqSimp_commuteGeq" (formula "41") (term "1"))
                        (rule "elementOfSetMinus" (formula "40") (term "0,0"))
                         (builtin "One Step Simplification" (formula "40"))
                        (rule "ifthenelse_negated" (formula "40") (term "0"))
                        (rule "elementOfUnion" (formula "40") (term "0,0"))
                         (builtin "One Step Simplification" (formula "40"))
                        (rule "applyEqReverse" (formula "41") (term "1,1") (ifseqformula "40"))
                        (rule "hideAuxiliaryEq" (formula "40"))
                        (rule "inEqSimp_commuteLeq" (formula "40") (term "1"))
                        (rule "pullOutSelect" (formula "39") (term "0,1") (inst "selectSK=arr_1"))
                        (rule "simplifySelectOfAnon" (formula "39"))
                         (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "46")) (ifInst ""  (formula "3")))
                        (rule "inEqSimp_homoInEq0" (formula "40") (term "1"))
                        (rule "polySimp_addComm1" (formula "40") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "40") (term "1"))
                        (rule "polySimp_mulComm0" (formula "40") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "40") (term "1,1"))
                        (rule "mul_literals" (formula "40") (term "0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1"))
                        (rule "polySimp_elimOne" (formula "40") (term "1,1,1"))
                        (rule "elementOfSetMinus" (formula "39") (term "0,0"))
                         (builtin "One Step Simplification" (formula "39"))
                        (rule "ifthenelse_negated" (formula "39") (term "0"))
                        (rule "elementOfUnion" (formula "39") (term "0,0"))
                         (builtin "One Step Simplification" (formula "39"))
                        (rule "applyEqReverse" (formula "40") (term "1,1,1") (ifseqformula "39"))
                        (rule "hideAuxiliaryEq" (formula "39"))
                        (rule "inEqSimp_homoInEq1" (formula "39") (term "1"))
                        (rule "polySimp_addComm1" (formula "39") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1"))
                        (rule "polySimp_mulComm0" (formula "39") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "39") (term "1,1"))
                        (rule "mul_literals" (formula "39") (term "0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1"))
                        (rule "polySimp_elimOne" (formula "39") (term "1,1,1"))
                        (rule "nnf_imp2or" (formula "14") (term "0"))
                        (rule "nnf_notAnd" (formula "14") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "14") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
                        (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "14") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                        (rule "mul_literals" (formula "14") (term "1,0,0,0"))
                        (rule "nnf_imp2or" (formula "14") (term "0,1,0"))
                        (rule "nnf_notAnd" (formula "14") (term "0,0,1,0"))
                        (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,1,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,1,0"))
                        (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,1,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,1,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,1,0"))
                        (rule "add_zero_left" (formula "14") (term "0,0,1,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,1,0"))
                        (rule "jdiv_axiom" (formula "2") (term "0,0,0,2,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0,0,2,1"))
                        (rule "eqSymm" (formula "2"))
                        (rule "inEqSimp_subsumption6" (formula "2") (term "0,0") (ifseqformula "30"))
                        (rule "greater_literals" (formula "2") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "mul_literals" (formula "2") (term "1,0,0,0"))
                        (rule "leq_literals" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2"))
                        (rule "applyEqRigid" (formula "1") (term "1,1,0") (ifseqformula "2"))
                        (rule "applyEqRigid" (formula "1") (term "0,0,1,1") (ifseqformula "2"))
                        (rule "applyEq" (formula "3") (term "0,0,0,2,0,0,0") (ifseqformula "2"))
                        (rule "polyDiv_pullOut" (formula "3") (term "0,0,0,2,0,0,0") (inst "polyDivCoeff=l_0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,2,0,0,0,2,0,0,0"))
                        (rule "equal_literals" (formula "3") (term "0,0,0,0,2,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "polySimp_pullOutFactor0" (formula "3") (term "0,0,0,0,0,2,0,0,0"))
                        (rule "add_literals" (formula "3") (term "1,0,0,0,0,0,2,0,0,0"))
                        (rule "times_zero_1" (formula "3") (term "0,0,0,0,0,2,0,0,0"))
                        (rule "div_literals" (formula "3") (term "0,0,0,0,2,0,0,0"))
                        (rule "add_zero_left" (formula "3") (term "0,0,0,2,0,0,0"))
                        (rule "polyDiv_pullOut" (formula "1") (term "0,0,1,1") (inst "polyDivCoeff=l_0"))
                        (rule "equal_literals" (formula "1") (term "0,0,0,1,1"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0,0,1,1"))
                        (rule "polySimp_pullOutFactor0" (formula "1") (term "0,0,0,0,1,1"))
                        (rule "add_literals" (formula "1") (term "1,0,0,0,0,1,1"))
                        (rule "times_zero_1" (formula "1") (term "0,0,0,0,1,1"))
                        (rule "div_literals" (formula "1") (term "0,0,0,1,1"))
                        (rule "add_zero_left" (formula "1") (term "0,0,1,1"))
                        (rule "polyDiv_pullOut" (formula "2") (term "1") (inst "polyDivCoeff=l_0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,2,1"))
                        (rule "equal_literals" (formula "2") (term "0,1"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "polySimp_pullOutFactor0" (formula "2") (term "0,0,1"))
                        (rule "add_literals" (formula "2") (term "1,0,0,1"))
                        (rule "times_zero_1" (formula "2") (term "0,0,1"))
                        (rule "div_literals" (formula "2") (term "0,1"))
                        (rule "add_zero_left" (formula "2") (term "1"))
                        (rule "polyDiv_pullOut" (formula "1") (term "1,1,0") (inst "polyDivCoeff=l_0"))
                        (rule "equal_literals" (formula "1") (term "0,1,1,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,1,1,0"))
                        (rule "polySimp_pullOutFactor0" (formula "1") (term "0,0,1,1,0"))
                        (rule "add_literals" (formula "1") (term "1,0,0,1,1,0"))
                        (rule "times_zero_1" (formula "1") (term "0,0,1,1,0"))
                        (rule "div_literals" (formula "1") (term "0,1,1,0"))
                        (rule "add_zero_left" (formula "1") (term "1,1,0"))
                        (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "37"))
                        (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                        (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0,0"))
                        (rule "leq_literals" (formula "1") (term "0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "inEqSimp_exactShadow3" (formula "32") (ifseqformula "1"))
                        (rule "polySimp_mulComm0" (formula "32") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "32") (term "0"))
                        (rule "polySimp_pullOutFactor0" (formula "32") (term "0,0"))
                        (rule "add_literals" (formula "32") (term "1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "32"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "42") (term "0") (ifseqformula "32"))
                        (rule "inEqSimp_homoInEq1" (formula "42") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "42") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "42") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "42") (term "0,0,0"))
                        (rule "polySimp_addComm0" (formula "42") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "42") (term "0,0,0"))
                        (rule "add_literals" (formula "42") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "42") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "42") (term "0,0,0"))
                        (rule "leq_literals" (formula "42") (term "0,0"))
                         (builtin "One Step Simplification" (formula "42"))
                        (rule "true_left" (formula "42"))
                        (rule "inEqSimp_contradInEq1" (formula "40") (ifseqformula "32"))
                        (rule "andLeft" (formula "40"))
                        (rule "inEqSimp_homoInEq1" (formula "40"))
                        (rule "polySimp_mulComm0" (formula "40") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "40") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0"))
                        (rule "mul_literals" (formula "40") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "40") (term "0"))
                        (rule "polySimp_addComm0" (formula "40") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "40") (term "0"))
                        (rule "add_literals" (formula "40") (term "1,1,0"))
                        (rule "times_zero_1" (formula "40") (term "1,0"))
                        (rule "add_zero_right" (formula "40") (term "0"))
                        (rule "leq_literals" (formula "40"))
                        (rule "closeFalse" (formula "40"))
                     )
                  )
                  (branch "Case 2"
                      (builtin "One Step Simplification" (formula "23"))
                     (rule "equal_literals" (formula "23") (term "0"))
                      (builtin "One Step Simplification" (formula "23"))
                     (rule "closeTrue" (formula "23"))
                  )
               )
               (branch "if x_14 false"
                   (builtin "One Step Simplification" (formula "24"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
            )
            (branch "Exceptional Post (classify)"
                (builtin "One Step Simplification" (formula "18"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "translateJavaSubInt" (formula "17") (term "3,0,0,1,0,1"))
               (rule "translateJavaMulInt" (formula "17") (term "1,1,0,0,1"))
               (rule "andLeft" (formula "17"))
               (rule "andLeft" (formula "18"))
               (rule "andLeft" (formula "17"))
               (rule "andLeft" (formula "19"))
               (rule "notLeft" (formula "17"))
               (rule "close" (formula "21") (ifseqformula "20"))
            )
            (branch "Pre (classify)"
                (builtin "One Step Simplification" (formula "17"))
               (rule "wellFormedAnon" (formula "17") (term "0,1"))
               (rule "replace_known_left" (formula "17") (term "0,0,1") (ifseqformula "5"))
                (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "6")))
               (rule "polySimp_homoEq" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0"))
               (rule "polySimp_rightDist" (formula "1") (term "0,1,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
               (rule "polySimp_elimOne" (formula "1") (term "1,0,1,0"))
               (rule "polySimp_mulAssoc" (formula "1") (term "0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "13"))
               (rule "polySimp_mulAssoc" (formula "13") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "13") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,1,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0,0,0,1,0"))
               (rule "polySimp_sepNegMonomial" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "13"))
               (rule "polySimp_mulLiterals" (formula "13") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
               (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
               (rule "inEqSimp_exactShadow1" (formula "13") (ifseqformula "12"))
               (rule "greater_literals" (formula "13") (term "0"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
               (rule "polySimp_rightDist" (formula "13") (term "0,0"))
               (rule "mul_literals" (formula "13") (term "0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "13") (term "0"))
               (rule "add_literals" (formula "13") (term "1,1,0"))
               (rule "polySimp_elimOne" (formula "13") (term "1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "13"))
               (rule "mul_literals" (formula "13") (term "1"))
               (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "16"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "translateJavaSubInt" (formula "16") (term "3,0,1"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "17"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "17"))
               (rule "andLeft" (formula "16"))
               (rule "notLeft" (formula "17"))
               (rule "notLeft" (formula "16"))
               (rule "polySimp_elimSub" (formula "22") (term "3,0"))
               (rule "mul_literals" (formula "22") (term "1,3,0"))
               (rule "polySimp_addComm0" (formula "22") (term "3,0"))
               (rule "inEqSimp_commuteLeq" (formula "21"))
               (rule "inEqSimp_commuteLeq" (formula "20"))
               (rule "inEqSimp_commuteLeq" (formula "19"))
               (rule "inEqSimp_commuteLeq" (formula "16"))
               (rule "applyEq" (formula "20") (term "1") (ifseqformula "18"))
               (rule "applyEq" (formula "22") (term "1,3,0") (ifseqformula "18"))
               (rule "applyEq" (formula "19") (term "0") (ifseqformula "18"))
               (rule "applyEq" (formula "21") (term "1") (ifseqformula "18"))
               (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "18"))
               (rule "applyEq" (formula "15") (term "0,1,3,0") (ifseqformula "18"))
               (rule "applyEq" (formula "12") (term "0") (ifseqformula "18"))
               (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "12"))
               (rule "mul_literals" (formula "19") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "19"))
               (rule "mul_literals" (formula "19") (term "1"))
               (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "19"))
               (rule "leq_literals" (formula "13") (term "0"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "true_left" (formula "13"))
               (rule "inEqSimp_exactShadow1" (formula "13") (ifseqformula "12"))
               (rule "greater_literals" (formula "13") (term "0"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
               (rule "polySimp_rightDist" (formula "13") (term "0,0"))
               (rule "mul_literals" (formula "13") (term "0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "13") (term "0"))
               (rule "add_literals" (formula "13") (term "1,1,0"))
               (rule "polySimp_elimOne" (formula "13") (term "1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "13"))
               (rule "mul_literals" (formula "13") (term "1"))
               (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "19"))
               (rule "leq_literals" (formula "13") (term "0"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "true_left" (formula "13"))
               (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "10"))
                (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "4")))
               (rule "translateJavaSubInt" (formula "10") (term "0,2,0,1,0"))
               (rule "translateJavaSubInt" (formula "10") (term "0,2,1,1,0"))
               (rule "translateJavaMulInt" (formula "10") (term "1,1,0,0,0,0"))
               (rule "andLeft" (formula "10"))
               (rule "andLeft" (formula "10"))
               (rule "andLeft" (formula "10"))
               (rule "andLeft" (formula "10"))
               (rule "andLeft" (formula "10"))
               (rule "andLeft" (formula "10"))
               (rule "andLeft" (formula "10"))
               (rule "andLeft" (formula "12"))
               (rule "notLeft" (formula "11"))
               (rule "notLeft" (formula "10"))
               (rule "eqSymm" (formula "15"))
               (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "30"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "31"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "replace_known_left" (formula "34") (term "0,1") (ifseqformula "3"))
                (builtin "One Step Simplification" (formula "34"))
               (rule "polySimp_elimSub" (formula "15") (term "0,2,0"))
               (rule "mul_literals" (formula "15") (term "1,0,2,0"))
               (rule "eqSymm" (formula "15"))
               (rule "polySimp_elimSub" (formula "15") (term "0,2,0"))
               (rule "mul_literals" (formula "15") (term "1,0,2,0"))
               (rule "eqSymm" (formula "15"))
               (rule "polySimp_mulComm0" (formula "12") (term "1"))
               (rule "eqSymm" (formula "12"))
               (rule "polySimp_addComm0" (formula "15") (term "0,2,0"))
               (rule "eqSymm" (formula "15"))
               (rule "polySimp_addComm0" (formula "15") (term "0,2,0"))
               (rule "eqSymm" (formula "15"))
               (rule "inEqSimp_commuteLeq" (formula "10"))
               (rule "applyEq" (formula "15") (term "1,0,2,0") (ifseqformula "23"))
               (rule "eqSymm" (formula "15"))
               (rule "applyEq" (formula "14") (term "3,0") (ifseqformula "23"))
               (rule "applyEq" (formula "27") (term "0,0") (ifseqformula "13"))
               (rule "inEqSimp_commuteGeq" (formula "27"))
               (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "23"))
               (rule "applyEq" (formula "28") (term "1,0") (ifseqformula "13"))
               (rule "applyEq" (formula "32") (term "0") (ifseqformula "13"))
               (rule "applyEq" (formula "19") (term "0") (ifseqformula "12"))
               (rule "applyEq" (formula "15") (term "1,0,2,0") (ifseqformula "23"))
               (rule "eqSymm" (formula "15"))
               (rule "newSym_eq" (formula "12") (inst "l=l_0") (inst "newSymDef=mul(int::final(self,
               de.wiesler.Classifier::$num_buckets),
    Z(0(#)))"))
               (rule "times_zero_1" (formula "12") (term "1,1"))
               (rule "add_zero_right" (formula "12") (term "1"))
               (rule "applyEq" (formula "26") (term "0") (ifseqformula "12"))
               (rule "applyEq" (formula "15") (term "3,0") (ifseqformula "12"))
               (rule "applyEq" (formula "28") (term "0") (ifseqformula "12"))
               (rule "inEqSimp_commuteLeq" (formula "28"))
               (rule "applyEq" (formula "27") (term "1") (ifseqformula "12"))
               (rule "applyEq" (formula "13") (term "0,0") (ifseqformula "12"))
               (rule "eqSymm" (formula "13"))
               (rule "applyEq" (formula "19") (term "0") (ifseqformula "12"))
               (rule "inEqSimp_commuteLeq" (formula "19"))
               (rule "applyEq" (formula "21") (term "0,1,3,0") (ifseqformula "12"))
               (rule "polySimp_addComm0" (formula "21") (term "3,0"))
               (rule "applyEq" (formula "16") (term "1,0,2,0") (ifseqformula "12"))
               (rule "eqSymm" (formula "16"))
               (rule "applyEq" (formula "29") (term "1,3,0") (ifseqformula "12"))
               (rule "applyEq" (formula "10") (term "0") (ifseqformula "13"))
               (rule "applyEq" (formula "1") (term "0,0,1,0,2,0,0,0") (ifseqformula "13"))
               (rule "polySimp_addComm0" (formula "1") (term "0,2,0,0,0"))
               (rule "applyEq" (formula "20") (term "0") (ifseqformula "13"))
               (rule "inEqSimp_homoInEq1" (formula "20"))
               (rule "polySimp_mulLiterals" (formula "20") (term "1,0"))
               (rule "polySimp_addComm1" (formula "20") (term "0"))
               (rule "applyEq" (formula "11") (term "0") (ifseqformula "13"))
               (rule "applyEq" (formula "16") (term "1,0,2,0") (ifseqformula "12"))
               (rule "eqSymm" (formula "16"))
               (rule "applyEq" (formula "1") (term "1,1") (ifseqformula "13"))
               (rule "polySimp_addComm1" (formula "1") (term "1"))
               (rule "polySimp_addComm0" (formula "1") (term "0,1"))
               (rule "applyEq" (formula "24") (term "1") (ifseqformula "12"))
               (rule "inEqSimp_sepPosMonomial0" (formula "20"))
               (rule "polySimp_mulComm0" (formula "20") (term "1"))
               (rule "polySimp_rightDist" (formula "20") (term "1"))
               (rule "polySimp_mulLiterals" (formula "20") (term "1,1"))
               (rule "mul_literals" (formula "20") (term "0,1"))
               (rule "inEqSimp_subsumption6" (formula "10") (ifseqformula "26"))
               (rule "mul_literals" (formula "10") (term "1,1,0"))
               (rule "greater_literals" (formula "10") (term "0,0"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "leq_literals" (formula "10") (term "0"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "true_left" (formula "10"))
               (rule "elimGcdLeq_antec" (formula "10") (inst "elimGcdRightDiv=Z(4(6(#)))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
               (rule "leq_literals" (formula "10") (term "0,0"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0"))
               (rule "neg_literal" (formula "10") (term "0,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0,0,0"))
               (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0"))
               (rule "polySimp_addLiterals" (formula "10") (term "0,0,0,0"))
               (rule "add_literals" (formula "10") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
               (rule "add_literals" (formula "10") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "10") (term "1,0,0"))
               (rule "add_zero_right" (formula "10") (term "0,0"))
               (rule "qeq_literals" (formula "10") (term "0"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "true_left" (formula "10"))
               (rule "inEqSimp_exactShadow3" (formula "23") (ifseqformula "18"))
               (rule "mul_literals" (formula "23") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "23") (term "0"))
               (rule "add_literals" (formula "23") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "23"))
               (rule "mul_literals" (formula "23") (term "1"))
               (rule "inEqSimp_subsumption6" (formula "23") (ifseqformula "25"))
               (rule "mul_literals" (formula "23") (term "1,1,0"))
               (rule "greater_literals" (formula "23") (term "0,0"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "leq_literals" (formula "23") (term "0"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "true_left" (formula "23"))
               (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "18"))
               (rule "polySimp_mulComm0" (formula "17") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "17") (term "0"))
               (rule "polySimp_addComm0" (formula "17") (term "0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "17") (term "0"))
               (rule "add_literals" (formula "17") (term "1,1,0"))
               (rule "polySimp_elimOne" (formula "17") (term "1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "17"))
               (rule "mul_literals" (formula "17") (term "1"))
               (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "25"))
               (rule "leq_literals" (formula "17") (term "0"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "true_left" (formula "17"))
               (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "32"))
                (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "31")) (ifInst ""  (formula "21")))
               (rule "translateJavaSubInt" (formula "32") (term "3,0,1"))
               (rule "polySimp_elimSub" (formula "32") (term "3,0,1"))
               (rule "mul_literals" (formula "32") (term "1,3,0,1"))
               (rule "polySimp_addComm0" (formula "32") (term "3,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "32") (term "1,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "32") (term "1,0,0,0,0"))
               (rule "replace_known_left" (formula "32") (term "1,0,0,0,0") (ifseqformula "20"))
                (builtin "One Step Simplification" (formula "32"))
               (rule "inEqSimp_commuteLeq" (formula "32") (term "1,0"))
               (rule "inEqSimp_commuteLeq" (formula "32") (term "0,1,0,0"))
               (rule "applyEq" (formula "32") (term "1,1,0") (ifseqformula "22"))
               (rule "applyEq" (formula "32") (term "0,0,0,0,0,0") (ifseqformula "12"))
               (rule "replace_known_right" (formula "32") (term "0,0,0,0,0") (ifseqformula "30"))
                (builtin "One Step Simplification" (formula "32"))
               (rule "applyEq" (formula "32") (term "0,0,1,0") (ifseqformula "12"))
               (rule "replace_known_left" (formula "32") (term "1,0") (ifseqformula "26"))
                (builtin "One Step Simplification" (formula "32"))
               (rule "applyEq" (formula "32") (term "1,3,0,1") (ifseqformula "22"))
               (rule "applyEq" (formula "32") (term "1,1,1,0") (ifseqformula "22"))
               (rule "replace_known_left" (formula "32") (term "1,1,0") (ifseqformula "25"))
                (builtin "One Step Simplification" (formula "32"))
               (rule "applyEq" (formula "32") (term "0,1,0") (ifseqformula "22"))
               (rule "replace_known_left" (formula "32") (term "1,0") (ifseqformula "24"))
                (builtin "One Step Simplification" (formula "32"))
               (rule "applyEq" (formula "32") (term "1,0,1") (ifseqformula "12"))
               (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "22"))
               (rule "eqSymm" (formula "32") (term "0"))
               (rule "replace_known_left" (formula "32") (term "0") (ifseqformula "10"))
                (builtin "One Step Simplification" (formula "32"))
               (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "27") (term "0") (inst "i=i") (inst "j=j"))
                (builtin "One Step Simplification" (formula "27"))
               (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,1,0"))
               (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,1,0"))
               (rule "add_literals" (formula "27") (term "0,0,0,1,0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "27") (term "1,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,1,0"))
               (rule "mul_literals" (formula "27") (term "0,1,1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0"))
               (rule "mul_literals" (formula "27") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0"))
               (rule "nnf_imp2or" (formula "27") (term "0"))
               (rule "nnf_notAnd" (formula "27") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
               (rule "mul_literals" (formula "27") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "27") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
               (rule "mul_literals" (formula "27") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0"))
               (rule "mul_literals" (formula "27") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0"))
               (rule "nnf_imp2or" (formula "27") (term "0,1,0"))
               (rule "nnf_notAnd" (formula "27") (term "0,0,1,0"))
               (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,1,0"))
               (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,1,0"))
               (rule "add_literals" (formula "27") (term "0,0,0,1,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,1,0"))
               (rule "mul_literals" (formula "27") (term "0,1,1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,1,0"))
               (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0,1,0"))
               (rule "mul_literals" (formula "27") (term "0,1,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,0,1,0"))
               (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "13") (term "0") (inst "i=i") (inst "j=j"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
               (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,1,0"))
               (rule "mul_literals" (formula "13") (term "0,1,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,1,0"))
               (rule "nnf_imp2or" (formula "13") (term "0"))
               (rule "nnf_notAnd" (formula "13") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
               (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "13") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
               (rule "mul_literals" (formula "13") (term "1,0,0,0"))
               (rule "nnf_imp2or" (formula "13") (term "0,1,0"))
               (rule "nnf_notAnd" (formula "13") (term "0,0,1,0"))
               (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,1,0"))
               (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,1,0"))
               (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,1,0"))
               (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,1,0"))
               (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,1,0"))
               (rule "mul_literals" (formula "13") (term "0,1,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,1,0"))
               (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "15"))
                (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "31")) (ifInst ""  (formula "21")))
               (rule "translateJavaSubInt" (formula "15") (term "3,0,1"))
               (rule "andLeft" (formula "15"))
               (rule "andLeft" (formula "15"))
               (rule "andLeft" (formula "15"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "15"))
               (rule "andLeft" (formula "15"))
               (rule "notLeft" (formula "15"))
               (rule "polySimp_elimSub" (formula "20") (term "3,0"))
               (rule "mul_literals" (formula "20") (term "1,3,0"))
               (rule "polySimp_addComm0" (formula "20") (term "3,0"))
               (rule "inEqSimp_commuteLeq" (formula "19"))
               (rule "inEqSimp_commuteLeq" (formula "17"))
               (rule "inEqSimp_commuteLeq" (formula "18"))
               (rule "inEqSimp_commuteLeq" (formula "15"))
               (rule "applyEq" (formula "15") (term "0") (ifseqformula "26"))
               (rule "eqSymm" (formula "15"))
               (rule "applyEq" (formula "18") (term "1,0") (ifseqformula "12"))
               (rule "applyEq" (formula "18") (term "1,3,0") (ifseqformula "25"))
               (rule "applyEq" (formula "15") (term "0") (ifseqformula "25"))
               (rule "applyEq" (formula "15") (term "1") (ifseqformula "24"))
               (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "12"))
               (rule "inEqSimp_commuteGeq" (formula "15"))
               (rule "applyEq" (formula "30") (term "0") (ifseqformula "12"))
               (rule "applyEq" (formula "15") (term "0") (ifseqformula "23"))
               (rule "inEqSimp_commuteLeq" (formula "15"))
               (rule "Contract_axiom_for_isClassifiedAs_in_Tree" (formula "19") (term "0"))
               (rule "replace_known_right" (formula "19") (term "0,1,0") (ifseqformula "30"))
                (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "5")) (ifInst ""  (formula "3")))
               (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "19") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
               (rule "inEqSimp_homoInEq0" (formula "19") (term "0,0,0"))
               (rule "times_zero_2" (formula "19") (term "1,0,0,0,0"))
               (rule "add_zero_right" (formula "19") (term "0,0,0,0"))
               (rule "applyEq" (formula "19") (term "0,1,0,1,0,0") (ifseqformula "23"))
               (rule "polySimp_addComm1" (formula "19") (term "0,1,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "19") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "19") (term "1,1,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "19") (term "1,0,0,0"))
               (rule "polySimp_elimOne" (formula "19") (term "1,0,0,0"))
               (rule "replace_known_left" (formula "19") (term "0,0,0") (ifseqformula "17"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "19") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
               (rule "mul_literals" (formula "19") (term "0,1,0,0"))
               (rule "replace_known_left" (formula "19") (term "0,0") (ifseqformula "18"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "true_left" (formula "19"))
               (rule "Definition_axiom_for_isClassifiedAs_in_de_wiesler_Tree" (formula "19") (term "0"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "translateJavaSubInt" (formula "19") (term "1,0,1"))
               (rule "translateJavaSubInt" (formula "19") (term "0,2,0,1,0"))
               (rule "andLeft" (formula "19"))
               (rule "polySimp_elimSub" (formula "20") (term "1,0"))
               (rule "mul_literals" (formula "20") (term "1,1,0"))
               (rule "polySimp_elimSub" (formula "19") (term "0,2,0,1"))
               (rule "mul_literals" (formula "19") (term "1,0,2,0,1"))
               (rule "polySimp_addComm0" (formula "20") (term "1,0"))
               (rule "polySimp_addComm1" (formula "19") (term "0,2,0,1"))
               (rule "polySimp_addComm0" (formula "19") (term "0,0,2,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "19") (term "0"))
               (rule "add_zero_right" (formula "19") (term "0,0"))
               (rule "polySimp_rightDist" (formula "19") (term "1,0,0"))
               (rule "polySimp_mulAssoc" (formula "19") (term "0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "19") (term "0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "19") (term "0,1,0,0"))
               (rule "polySimp_elimOne" (formula "19") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "19") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "20") (term "0"))
               (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0"))
               (rule "mul_literals" (formula "20") (term "0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "20") (term "0,0,0"))
               (rule "add_literals" (formula "20") (term "0,0,0,0"))
               (rule "polySimp_addComm1" (formula "20") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "20") (term "0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "19") (term "1"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "20") (term "1"))
               (rule "applyEq" (formula "20") (term "0,1,0,0") (ifseqformula "23"))
               (rule "polySimp_addComm1" (formula "20") (term "0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "20") (term "0,0,0"))
               (rule "add_literals" (formula "20") (term "1,1,0,0,0"))
               (rule "applyEq" (formula "19") (term "1,1,0,1") (ifseqformula "12"))
               (rule "applyEq" (formula "20") (term "1,0,1") (ifseqformula "12"))
               (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0"))
               (rule "polySimp_mulLiterals" (formula "19") (term "0,0"))
               (rule "polySimp_elimOne" (formula "19") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0"))
               (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
               (rule "polySimp_rightDist" (formula "20") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0"))
               (rule "mul_literals" (formula "20") (term "0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,1"))
               (rule "polySimp_rightDist" (formula "19") (term "1,1"))
               (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1"))
               (rule "mul_literals" (formula "19") (term "0,1,1"))
               (rule "polySimp_elimOne" (formula "19") (term "1,1,1"))
               (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "33") (term "0"))
               (rule "wellFormedAnon" (formula "1") (term "1,0"))
               (rule "replace_known_left" (formula "1") (term "0,1,0") (ifseqformula "6"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "32")) (ifInst ""  (formula "7")) (ifInst ""  (formula "34")))
               (rule "true_left" (formula "1"))
               (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "33") (term "0") (inst "i=i") (inst "j=j"))
                (builtin "One Step Simplification" (formula "33"))
               (rule "allRight" (formula "33") (inst "sk=i_0"))
               (rule "impRight" (formula "33"))
               (rule "andLeft" (formula "1"))
               (rule "allRight" (formula "35") (inst "sk=j_0"))
               (rule "impRight" (formula "35"))
               (rule "andLeft" (formula "1"))
               (rule "inEqSimp_leqRight" (formula "37"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "5"))
               (rule "polySimp_rightDist" (formula "5") (term "1,0,0"))
               (rule "mul_literals" (formula "5") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "5") (term "0,0"))
               (rule "add_literals" (formula "5") (term "0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "3"))
               (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
               (rule "mul_literals" (formula "3") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
               (rule "add_literals" (formula "3") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "4"))
               (rule "inEqSimp_commuteLeq" (formula "2"))
               (rule "inEqSimp_sepNegMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "5"))
               (rule "polySimp_mulComm0" (formula "5") (term "1"))
               (rule "polySimp_rightDist" (formula "5") (term "1"))
               (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
               (rule "mul_literals" (formula "5") (term "0,1"))
               (rule "polySimp_elimOne" (formula "5") (term "1,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "3"))
               (rule "polySimp_mulComm0" (formula "3") (term "1"))
               (rule "polySimp_rightDist" (formula "3") (term "1"))
               (rule "mul_literals" (formula "3") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
               (rule "polySimp_elimOne" (formula "3") (term "1,1"))
               (rule "pullOutSelect" (formula "1") (term "1,1") (inst "selectSK=arr_0"))
               (rule "simplifySelectOfAnon" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "37")) (ifInst ""  (formula "8")))
               (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "ifthenelse_negated" (formula "1") (term "0"))
               (rule "elementOfUnion" (formula "1") (term "0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "2") (term "1,1") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=arr_1"))
               (rule "simplifySelectOfAnon" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "37")) (ifInst ""  (formula "8")))
               (rule "inEqSimp_homoInEq0" (formula "2"))
               (rule "polySimp_addComm1" (formula "2") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "2"))
               (rule "polySimp_mulComm0" (formula "2") (term "1"))
               (rule "polySimp_rightDist" (formula "2") (term "1"))
               (rule "mul_literals" (formula "2") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
               (rule "polySimp_elimOne" (formula "2") (term "1,1"))
               (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "ifthenelse_negated" (formula "1") (term "0"))
               (rule "elementOfUnion" (formula "1") (term "0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "2") (term "1,1") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "inEqSimp_homoInEq1" (formula "1"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
               (rule "mul_literals" (formula "1") (term "0,1"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1"))
               (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "3"))
               (rule "polySimp_mulComm0" (formula "2") (term "0,0"))
               (rule "polySimp_addComm0" (formula "2") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0"))
               (rule "polySimp_elimOne" (formula "2") (term "0"))
               (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "5"))
               (rule "times_zero_1" (formula "4") (term "0,0"))
               (rule "add_zero_left" (formula "4") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "4"))
               (rule "mul_literals" (formula "4") (term "1"))
               (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "20") (term "0") (inst "i=i") (inst "j=j"))
                (builtin "One Step Simplification" (formula "20"))
               (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,1,0"))
               (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,1,0"))
               (rule "add_literals" (formula "20") (term "0,0,0,1,0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "20") (term "1,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0,1,0"))
               (rule "mul_literals" (formula "20") (term "0,1,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
               (rule "nnf_imp2or" (formula "20") (term "0"))
               (rule "nnf_notAnd" (formula "20") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
               (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
               (rule "mul_literals" (formula "20") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
               (rule "nnf_imp2or" (formula "20") (term "0,1,0"))
               (rule "commute_or" (formula "33") (term "0,0,1,0"))
               (rule "nnf_notAnd" (formula "20") (term "0,0,1,0"))
               (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,1,0"))
               (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,1,0"))
               (rule "add_literals" (formula "20") (term "0,0,0,1,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0,1,0"))
               (rule "mul_literals" (formula "20") (term "0,1,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0,1,0"))
               (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0,1,0"))
               (rule "mul_literals" (formula "20") (term "0,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0,1,0"))
               (rule "jdiv_axiom" (formula "6") (term "0,0,0,2,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "6") (term "0,0,2,1"))
               (rule "eqSymm" (formula "6"))
               (rule "inEqSimp_subsumption6" (formula "6") (term "0,0") (ifseqformula "31"))
               (rule "mul_literals" (formula "6") (term "1,1,0,0,0"))
               (rule "greater_literals" (formula "6") (term "0,0,0,0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "leq_literals" (formula "6") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "eqSymm" (formula "6"))
               (rule "applyEq" (formula "7") (term "0,0,0,2,0,0,0") (ifseqformula "6"))
               (rule "polyDiv_pullOut" (formula "7") (term "0,0,0,2,0,0,0") (inst "polyDivCoeff=l_0"))
               (rule "equal_literals" (formula "7") (term "0,0,0,0,2,0,0,0"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0,0,0,2,0,0,0"))
               (rule "polySimp_pullOutFactor0" (formula "7") (term "0,0,0,0,0,2,0,0,0"))
               (rule "add_literals" (formula "7") (term "1,0,0,0,0,0,2,0,0,0"))
               (rule "times_zero_1" (formula "7") (term "0,0,0,0,0,2,0,0,0"))
               (rule "div_literals" (formula "7") (term "0,0,0,0,2,0,0,0"))
               (rule "add_zero_left" (formula "7") (term "0,0,0,2,0,0,0"))
               (rule "polyDiv_pullOut" (formula "6") (term "1") (inst "polyDivCoeff=l_0"))
               (rule "equal_literals" (formula "6") (term "0,1"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0,1"))
               (rule "polySimp_pullOutFactor0" (formula "6") (term "0,0,1"))
               (rule "add_literals" (formula "6") (term "1,0,0,1"))
               (rule "times_zero_1" (formula "6") (term "0,0,1"))
               (rule "div_literals" (formula "6") (term "0,1"))
               (rule "add_zero_left" (formula "6") (term "1"))
               (rule "commute_or" (formula "19") (term "0,0,1,0"))
               (rule "arrayLengthIsAShort" (formula "33") (term "0"))
                (builtin "One Step Simplification" (formula "33"))
               (rule "true_left" (formula "33"))
               (rule "arrayLengthIsAShort" (formula "32") (term "0"))
                (builtin "One Step Simplification" (formula "32"))
               (rule "true_left" (formula "32"))
               (rule "arrayLengthNotNegative" (formula "32") (term "0"))
               (rule "arrayLengthNotNegative" (formula "34") (term "0"))
               (rule "commute_or" (formula "21") (term "0,0,1,0"))
               (rule "cut_direct" (formula "24") (term "0"))
               (branch "CUT: result_241 >= 1 + l_0 TRUE"
                   (builtin "One Step Simplification" (formula "25"))
                  (rule "inEqSimp_subsumption1" (formula "22") (ifseqformula "24"))
                  (rule "inEqSimp_homoInEq0" (formula "22") (term "0"))
                  (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0"))
                  (rule "add_literals" (formula "22") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "22") (term "1,0,0"))
                  (rule "add_zero_right" (formula "22") (term "0,0"))
                  (rule "qeq_literals" (formula "22") (term "0"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "true_left" (formula "22"))
                  (rule "inEqSimp_exactShadow3" (formula "23") (ifseqformula "22"))
                  (rule "polySimp_rightDist" (formula "23") (term "0,0"))
                  (rule "mul_literals" (formula "23") (term "0,0,0"))
                  (rule "polySimp_addAssoc" (formula "23") (term "0"))
                  (rule "polySimp_addComm1" (formula "23") (term "0,0"))
                  (rule "add_literals" (formula "23") (term "0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "23") (term "0"))
                  (rule "add_literals" (formula "23") (term "1,1,0"))
                  (rule "polySimp_elimOne" (formula "23") (term "1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "23"))
                  (rule "mul_literals" (formula "23") (term "1"))
                  (rule "cut_direct" (formula "25") (term "0"))
                  (branch "CUT: result_241 <= -2 + l_0 * 2 TRUE"
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "inEqSimp_subsumption0" (formula "22") (ifseqformula "25"))
                     (rule "inEqSimp_homoInEq0" (formula "22") (term "0"))
                     (rule "polySimp_mulComm0" (formula "22") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "22") (term "1,0,0"))
                     (rule "mul_literals" (formula "22") (term "0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "22") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "22") (term "0,0,0"))
                     (rule "add_literals" (formula "22") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "22") (term "0,0"))
                     (rule "add_literals" (formula "22") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "22") (term "1,0,0"))
                     (rule "add_zero_right" (formula "22") (term "0,0"))
                     (rule "qeq_literals" (formula "22") (term "0"))
                      (builtin "One Step Simplification" (formula "22"))
                     (rule "true_left" (formula "22"))
                     (rule "inEqSimp_exactShadow3" (formula "29") (ifseqformula "24"))
                     (rule "mul_literals" (formula "29") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "29") (term "0"))
                     (rule "add_literals" (formula "29") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "29"))
                     (rule "mul_literals" (formula "29") (term "1"))
                     (rule "inEqSimp_subsumption6" (formula "29") (ifseqformula "31"))
                     (rule "mul_literals" (formula "29") (term "1,1,0"))
                     (rule "greater_literals" (formula "29") (term "0,0"))
                      (builtin "One Step Simplification" (formula "29"))
                     (rule "leq_literals" (formula "29") (term "0"))
                      (builtin "One Step Simplification" (formula "29"))
                     (rule "true_left" (formula "29"))
                     (rule "inEqSimp_exactShadow3" (formula "22") (ifseqformula "24"))
                     (rule "polySimp_rightDist" (formula "22") (term "0,0"))
                     (rule "mul_literals" (formula "22") (term "0,0,0"))
                     (rule "polySimp_addAssoc" (formula "22") (term "0"))
                     (rule "polySimp_addComm1" (formula "22") (term "0,0"))
                     (rule "add_literals" (formula "22") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "22") (term "0"))
                     (rule "add_literals" (formula "22") (term "1,1,0"))
                     (rule "polySimp_elimOne" (formula "22") (term "1,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "22"))
                     (rule "mul_literals" (formula "22") (term "1"))
                     (rule "inEqSimp_subsumption1" (formula "31") (ifseqformula "22"))
                     (rule "leq_literals" (formula "31") (term "0"))
                      (builtin "One Step Simplification" (formula "31"))
                     (rule "true_left" (formula "31"))
                     (rule "all_pull_out3" (formula "35") (term "0"))
                     (rule "shift_paren_or" (formula "35") (term "0,0"))
                     (rule "shift_paren_or" (formula "35") (term "0,0,0"))
                     (rule "all_pull_out3" (formula "19") (term "0"))
                     (rule "shift_paren_or" (formula "19") (term "0,0"))
                     (rule "shift_paren_or" (formula "19") (term "0,0,0"))
                     (rule "ifthenelse_split" (formula "7") (term "0"))
                     (branch " self.sorted_splitters[l_0 * -1 + result_241] >= 1 + value TRUE"
                        (rule "polySimp_homoEq" (formula "8"))
                        (rule "times_zero_2" (formula "8") (term "1,0"))
                        (rule "add_zero_right" (formula "8") (term "0"))
                        (rule "polySimp_sepNegMonomial" (formula "8"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                        (rule "inEqSimp_subsumption1" (formula "27") (ifseqformula "7"))
                        (rule "inEqSimp_homoInEq0" (formula "27") (term "0"))
                        (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0"))
                        (rule "add_literals" (formula "27") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "27") (term "1,0,0"))
                        (rule "add_zero_right" (formula "27") (term "0,0"))
                        (rule "qeq_literals" (formula "27") (term "0"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "true_left" (formula "27"))
                        (rule "newSym_eq" (formula "8") (inst "l=l_1") (inst "newSymDef=add(l_0, mul(classify_sk_0, Z(0(#))))"))
                        (rule "times_zero_1" (formula "8") (term "1,1,1"))
                        (rule "add_zero_right" (formula "8") (term "1,1"))
                        (rule "applyEq" (formula "9") (term "0,0") (ifseqformula "8"))
                        (rule "polySimp_mulComm0" (formula "9") (term "0"))
                        (rule "polySimp_rightDist" (formula "9") (term "0"))
                        (rule "polySimp_homoEq" (formula "9"))
                        (rule "polySimp_mulComm0" (formula "9") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0"))
                        (rule "polySimp_mulAssoc" (formula "9") (term "0,1,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0"))
                        (rule "polySimp_addComm1" (formula "9") (term "0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "9") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0"))
                        (rule "add_literals" (formula "9") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "9") (term "1,0,0"))
                        (rule "add_zero_right" (formula "9") (term "0,0"))
                        (rule "applyEq" (formula "7") (term "1,0,2,0") (ifseqformula "8"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,2,0"))
                        (rule "polySimp_addComm0" (formula "7") (term "0,0,2,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "7") (term "0,2,0"))
                        (rule "add_literals" (formula "7") (term "1,1,0,2,0"))
                        (rule "times_zero_1" (formula "7") (term "1,0,2,0"))
                        (rule "add_zero_right" (formula "7") (term "0,2,0"))
                        (rule "applyEq" (formula "25") (term "0") (ifseqformula "8"))
                        (rule "inEqSimp_homoInEq1" (formula "25"))
                        (rule "polySimp_mulComm0" (formula "25") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "25") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "25") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "25") (term "0"))
                        (rule "polySimp_addComm1" (formula "25") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "25") (term "0"))
                        (rule "add_literals" (formula "25") (term "1,1,0"))
                        (rule "times_zero_1" (formula "25") (term "1,0"))
                        (rule "add_zero_right" (formula "25") (term "0"))
                        (rule "applyEq" (formula "31") (term "0") (ifseqformula "8"))
                        (rule "inEqSimp_homoInEq1" (formula "31"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "31") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "31") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "31") (term "0"))
                        (rule "applyEq" (formula "26") (term "1,0,2,0") (ifseqformula "8"))
                        (rule "polySimp_addAssoc" (formula "26") (term "0,2,0"))
                        (rule "polySimp_addComm1" (formula "26") (term "0,0,2,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "26") (term "0,2,0"))
                        (rule "add_literals" (formula "26") (term "1,1,0,2,0"))
                        (rule "times_zero_1" (formula "26") (term "1,0,2,0"))
                        (rule "add_zero_right" (formula "26") (term "0,2,0"))
                        (rule "applyEq" (formula "27") (term "0") (ifseqformula "8"))
                        (rule "inEqSimp_homoInEq0" (formula "27"))
                        (rule "polySimp_mulComm0" (formula "27") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "27") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "27") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "27") (term "0"))
                        (rule "polySimp_addComm1" (formula "27") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "27") (term "0"))
                        (rule "add_literals" (formula "27") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "27") (term "1,0"))
                        (rule "applyEq" (formula "23") (term "1") (ifseqformula "8"))
                        (rule "polySimp_sepPosMonomial" (formula "9"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1"))
                        (rule "applyEq" (formula "42") (term "1") (ifseqformula "9"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "25"))
                        (rule "polySimp_mulLiterals" (formula "25") (term "0"))
                        (rule "polySimp_elimOne" (formula "25") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "31"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "0"))
                        (rule "polySimp_elimOne" (formula "31") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "27"))
                        (rule "polySimp_mulComm0" (formula "27") (term "1"))
                        (rule "polySimp_rightDist" (formula "27") (term "1"))
                        (rule "mul_literals" (formula "27") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "27") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "27") (term "1,1"))
                        (rule "allLeft" (formula "36") (inst "t=i_0"))
                        (rule "inEqSimp_contradInEq1" (formula "36") (term "0,0,0,0,0") (ifseqformula "4"))
                        (rule "qeq_literals" (formula "36") (term "0,0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "36"))
                        (rule "inEqSimp_contradInEq0" (formula "36") (term "0,0,0,0") (ifseqformula "5"))
                        (rule "inEqSimp_homoInEq1" (formula "36") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "36") (term "1,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "36") (term "0,1,0,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "36") (term "0,0,0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "36") (term "0,0,0,0,0,0,0"))
                        (rule "add_literals" (formula "36") (term "0,0,0,0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,0,0,0,0"))
                        (rule "add_literals" (formula "36") (term "1,1,0,0,0,0,0,0"))
                        (rule "times_zero_1" (formula "36") (term "1,0,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "36") (term "0,0,0,0,0,0"))
                        (rule "leq_literals" (formula "36") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "36"))
                        (rule "commute_or" (formula "36") (term "0,0"))
                        (rule "allLeft" (formula "21") (inst "t=i_0"))
                        (rule "inEqSimp_contradInEq0" (formula "21") (term "1,0,0,0,0") (ifseqformula "5"))
                        (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,0,0"))
                        (rule "polySimp_addComm0" (formula "21") (term "0,0,0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "21") (term "1,1,0,0,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "21") (term "1,0,0,1,0,0,0,0"))
                        (rule "add_zero_right" (formula "21") (term "0,0,1,0,0,0,0"))
                        (rule "leq_literals" (formula "21") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "inEqSimp_contradInEq1" (formula "21") (term "0,0,0,0") (ifseqformula "4"))
                        (rule "qeq_literals" (formula "21") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "commute_or" (formula "21") (term "0,0"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "42") (term "0") (ifseqformula "13") (ifseqformula "11"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "43"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "21") (term "0") (ifseqformula "14") (ifseqformula "12"))
                        (rule "applyEq" (formula "21") (term "0,0") (ifseqformula "22"))
                        (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "43"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "applyEq" (formula "21") (term "1,0") (ifseqformula "22"))
                        (rule "allLeft" (formula "39") (inst "t=add(Z(neglit(1(#))), l_1)"))
                        (rule "polySimp_addAssoc" (formula "39") (term "1,1,0,0"))
                        (rule "add_literals" (formula "39") (term "0,1,1,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "39") (term "1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "39") (term "1,0,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "39") (term "1,0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "39") (term "0,1,0,1,0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "39") (term "0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "39") (term "0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "39") (term "0,0,0,1,0,0,0,0"))
                        (rule "add_zero_left" (formula "39") (term "0,0,1,0,0,0,0"))
                        (rule "inEqSimp_homoInEq0" (formula "39") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "39") (term "1,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "39") (term "0,1,0,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "39") (term "0,0,0,0,0,0"))
                        (rule "add_literals" (formula "39") (term "0,0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "39") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "39") (term "1,1,0,0,0,0"))
                        (rule "inEqSimp_invertInEq1" (formula "39") (term "0,0,0,0,0"))
                        (rule "times_zero_2" (formula "39") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "39") (term "0,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "39") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "39") (term "0,0,0,0,0") (ifseqformula "27"))
                        (rule "qeq_literals" (formula "39") (term "0,0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "39"))
                        (rule "inEqSimp_contradInEq1" (formula "39") (term "0,0,0,0") (ifseqformula "29"))
                        (rule "inEqSimp_homoInEq1" (formula "39") (term "0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0,0,0,0,0"))
                        (rule "add_literals" (formula "39") (term "1,1,0,0,0,0,0,0"))
                        (rule "times_zero_1" (formula "39") (term "1,0,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "39") (term "0,0,0,0,0,0"))
                        (rule "leq_literals" (formula "39") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "39"))
                        (rule "allLeft" (formula "40") (inst "t=l_1"))
                        (rule "inEqSimp_homoInEq1" (formula "40") (term "1,0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "40") (term "0,1,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "40") (term "1,1,0,0,0,0"))
                        (rule "mul_literals" (formula "40") (term "0,1,1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "40") (term "1,1,1,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "40") (term "0,0,0,0,0") (ifseqformula "27"))
                        (rule "qeq_literals" (formula "40") (term "0,0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "40"))
                        (rule "inEqSimp_contradInEq1" (formula "40") (term "0,0,0,0") (ifseqformula "29"))
                        (rule "inEqSimp_homoInEq1" (formula "40") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "40") (term "1,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "40") (term "0,1,0,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "40") (term "0,0,0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "40") (term "0,0,0,0,0,0,0"))
                        (rule "add_literals" (formula "40") (term "0,0,0,0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "40") (term "0,0,0,0,0,0"))
                        (rule "add_literals" (formula "40") (term "1,1,0,0,0,0,0,0"))
                        (rule "times_zero_1" (formula "40") (term "1,0,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "40") (term "0,0,0,0,0,0"))
                        (rule "leq_literals" (formula "40") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "40"))
                        (rule "allLeft" (formula "38") (inst "t=j_0"))
                        (rule "inEqSimp_contradInEq0" (formula "38") (term "1,0") (ifseqformula "4"))
                        (rule "inEqSimp_homoInEq1" (formula "38") (term "0,1,0"))
                        (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0"))
                        (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0"))
                        (rule "polySimp_addComm1" (formula "38") (term "0,0,0,1,0"))
                        (rule "add_literals" (formula "38") (term "0,0,0,0,1,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "38") (term "0,0,1,0"))
                        (rule "add_literals" (formula "38") (term "1,1,0,0,1,0"))
                        (rule "times_zero_1" (formula "38") (term "1,0,0,1,0"))
                        (rule "add_zero_right" (formula "38") (term "0,0,1,0"))
                        (rule "leq_literals" (formula "38") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "38"))
                        (rule "inEqSimp_contradInEq1" (formula "38") (term "0") (ifseqformula "3"))
                        (rule "inEqSimp_homoInEq1" (formula "38") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "38") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "38") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "38") (term "0,0,0"))
                        (rule "polySimp_addComm0" (formula "38") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "38") (term "0,0,0"))
                        (rule "add_literals" (formula "38") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "38") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "38") (term "0,0,0"))
                        (rule "leq_literals" (formula "38") (term "0,0"))
                         (builtin "One Step Simplification" (formula "38"))
                        (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "38"))
                        (rule "andLeft" (formula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                        (rule "mul_literals" (formula "2") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "2") (term "0"))
                        (rule "polySimp_addComm0" (formula "2") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                        (rule "add_literals" (formula "2") (term "1,1,0"))
                        (rule "times_zero_1" (formula "2") (term "1,0"))
                        (rule "add_literals" (formula "2") (term "0"))
                        (rule "leq_literals" (formula "2"))
                        (rule "closeFalse" (formula "2"))
                     )
                     (branch " self.sorted_splitters[l_0 * -1 + result_241] >= 1 + value FALSE"
                        (rule "polySimp_homoEq" (formula "7"))
                        (rule "mul_literals" (formula "7") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "7") (term "0,0,0"))
                        (rule "inEqSimp_geqRight" (formula "37"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0"))
                        (rule "polySimp_sepNegMonomial" (formula "8"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1"))
                        (rule "newSym_eq" (formula "8") (inst "l=l_1") (inst "newSymDef=add(add(Z(neglit(1(#))), l_0),
    mul(classify_sk_0, Z(0(#))))"))
                        (rule "times_zero_1" (formula "8") (term "1,1,1"))
                        (rule "add_zero_right" (formula "8") (term "1,1"))
                        (rule "polySimp_addAssoc" (formula "8") (term "1"))
                        (rule "polySimp_addComm0" (formula "8") (term "0,1"))
                        (rule "applyEq" (formula "1") (term "1,0,2,0") (ifseqformula "8"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,2,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0,0,2,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "1") (term "0,2,0"))
                        (rule "add_literals" (formula "1") (term "1,1,0,2,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0,2,0"))
                        (rule "add_zero_right" (formula "1") (term "0,2,0"))
                        (rule "applyEq" (formula "25") (term "0") (ifseqformula "8"))
                        (rule "inEqSimp_homoInEq1" (formula "25"))
                        (rule "polySimp_mulComm0" (formula "25") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "25") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "25") (term "0,1,0"))
                        (rule "mul_literals" (formula "25") (term "0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "25") (term "0"))
                        (rule "polySimp_addComm1" (formula "25") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "25") (term "0"))
                        (rule "add_literals" (formula "25") (term "1,1,0"))
                        (rule "times_zero_1" (formula "25") (term "1,0"))
                        (rule "add_zero_right" (formula "25") (term "0"))
                        (rule "polySimp_addAssoc" (formula "25") (term "0"))
                        (rule "add_literals" (formula "25") (term "0,0"))
                        (rule "applyEq" (formula "32") (term "0") (ifseqformula "8"))
                        (rule "inEqSimp_homoInEq1" (formula "32"))
                        (rule "polySimp_mulComm0" (formula "32") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "32") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "32") (term "0,1,0"))
                        (rule "mul_literals" (formula "32") (term "0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "32") (term "0"))
                        (rule "polySimp_addAssoc" (formula "32") (term "0,0"))
                        (rule "add_literals" (formula "32") (term "0,0,0"))
                        (rule "applyEq" (formula "27") (term "0") (ifseqformula "8"))
                        (rule "inEqSimp_homoInEq0" (formula "27"))
                        (rule "polySimp_mulComm0" (formula "27") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "27") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "27") (term "0,1,0"))
                        (rule "mul_literals" (formula "27") (term "0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "27") (term "0"))
                        (rule "polySimp_addComm1" (formula "27") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "27") (term "0"))
                        (rule "add_literals" (formula "27") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "27") (term "1,0"))
                        (rule "polySimp_addAssoc" (formula "27") (term "0,0"))
                        (rule "add_literals" (formula "27") (term "0,0,0"))
                        (rule "applyEq" (formula "26") (term "1,0,2,0") (ifseqformula "8"))
                        (rule "polySimp_addAssoc" (formula "26") (term "0,2,0"))
                        (rule "polySimp_addComm1" (formula "26") (term "0,0,2,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "26") (term "0,2,0"))
                        (rule "add_literals" (formula "26") (term "1,1,0,2,0"))
                        (rule "times_zero_1" (formula "26") (term "1,0,2,0"))
                        (rule "add_zero_right" (formula "26") (term "0,2,0"))
                        (rule "polySimp_addAssoc" (formula "26") (term "0,2,0"))
                        (rule "add_literals" (formula "26") (term "0,0,2,0"))
                        (rule "applyEq" (formula "9") (term "0,0") (ifseqformula "8"))
                        (rule "polySimp_mulComm0" (formula "9") (term "0"))
                        (rule "polySimp_rightDist" (formula "9") (term "0"))
                        (rule "polySimp_homoEq" (formula "9"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "0,1,1,0"))
                        (rule "mul_literals" (formula "9") (term "0,0,1,1,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "9") (term "0,0,1,0"))
                        (rule "polySimp_addComm1" (formula "9") (term "0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "9") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0"))
                        (rule "add_literals" (formula "9") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "9") (term "1,0,0"))
                        (rule "add_zero_right" (formula "9") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0,0"))
                        (rule "add_literals" (formula "9") (term "0,0,0"))
                        (rule "applyEq" (formula "28") (term "1,0,2,0") (ifseqformula "8"))
                        (rule "polySimp_addAssoc" (formula "28") (term "0,2,0"))
                        (rule "polySimp_addComm0" (formula "28") (term "0,0,2,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "28") (term "0,2,0"))
                        (rule "add_literals" (formula "28") (term "1,1,0,2,0"))
                        (rule "times_zero_1" (formula "28") (term "1,0,2,0"))
                        (rule "add_zero_right" (formula "28") (term "0,2,0"))
                        (rule "applyEq" (formula "23") (term "1") (ifseqformula "8"))
                        (rule "polySimp_sepPosMonomial" (formula "9"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1"))
                        (rule "polySimp_rightDist" (formula "9") (term "1"))
                        (rule "mul_literals" (formula "9") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1"))
                        (rule "applyEqRigid" (formula "43") (term "1") (ifseqformula "9"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "25"))
                        (rule "polySimp_mulLiterals" (formula "25") (term "0"))
                        (rule "polySimp_elimOne" (formula "25") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "32"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "0"))
                        (rule "polySimp_elimOne" (formula "32") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "27"))
                        (rule "polySimp_mulComm0" (formula "27") (term "1"))
                        (rule "polySimp_rightDist" (formula "27") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "27") (term "1,1"))
                        (rule "mul_literals" (formula "27") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "27") (term "1,1"))
                        (rule "inEqSimp_antiSymm" (formula "28") (ifseqformula "1"))
                        (rule "applyEq" (formula "29") (term "0") (ifseqformula "28"))
                        (rule "inEqSimp_homoInEq1" (formula "29"))
                        (rule "polySimp_pullOutFactor1" (formula "29") (term "0"))
                        (rule "add_literals" (formula "29") (term "1,0"))
                        (rule "times_zero_1" (formula "29") (term "0"))
                        (rule "leq_literals" (formula "29"))
                        (rule "true_left" (formula "29"))
                        (rule "applyEq" (formula "1") (term "0") (ifseqformula "28"))
                        (rule "inEqSimp_homoInEq0" (formula "1"))
                        (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "1,0"))
                        (rule "times_zero_1" (formula "1") (term "0"))
                        (rule "qeq_literals" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "allLeft" (formula "36") (inst "t=i_0"))
                        (rule "inEqSimp_contradInEq0" (formula "36") (term "1,0,0,0,0") (ifseqformula "5"))
                        (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "36") (term "0,0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "36") (term "0,0,0,0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "36") (term "1,1,0,0,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "36") (term "1,0,0,1,0,0,0,0"))
                        (rule "add_zero_right" (formula "36") (term "0,0,1,0,0,0,0"))
                        (rule "leq_literals" (formula "36") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "36"))
                        (rule "inEqSimp_contradInEq1" (formula "36") (term "0,0,0,0") (ifseqformula "4"))
                        (rule "qeq_literals" (formula "36") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "36"))
                        (rule "commute_or" (formula "36") (term "0,0"))
                        (rule "allLeft" (formula "20") (inst "t=i_0"))
                        (rule "inEqSimp_contradInEq0" (formula "20") (term "1,0,0,0,0") (ifseqformula "5"))
                        (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,0,0"))
                        (rule "polySimp_addComm0" (formula "20") (term "0,0,0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "20") (term "1,1,0,0,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "20") (term "1,0,0,1,0,0,0,0"))
                        (rule "add_zero_right" (formula "20") (term "0,0,1,0,0,0,0"))
                        (rule "leq_literals" (formula "20") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "inEqSimp_contradInEq1" (formula "20") (term "0,0,0,0") (ifseqformula "4"))
                        (rule "qeq_literals" (formula "20") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "commute_or" (formula "20") (term "0,0"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "19") (term "0") (ifseqformula "12") (ifseqformula "10"))
                        (rule "applyEq" (formula "19") (term "1,0,1") (ifseqformula "20"))
                        (rule "replace_known_left" (formula "19") (term "1") (ifseqformula "9"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "true_left" (formula "19"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "34") (term "0,0") (ifseqformula "12") (ifseqformula "10"))
                        (rule "replace_known_right" (formula "34") (term "0") (ifseqformula "43"))
                         (builtin "One Step Simplification" (formula "34"))
                        (rule "allLeft" (formula "39") (inst "t=add(Z(neglit(1(#))), l_1)"))
                        (rule "polySimp_addAssoc" (formula "39") (term "1,1,0,0"))
                        (rule "add_literals" (formula "39") (term "0,1,1,0,0"))
                        (rule "inEqSimp_homoInEq0" (formula "39") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "39") (term "1,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "39") (term "0,1,0,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "39") (term "0,0,0,0,0,0"))
                        (rule "add_literals" (formula "39") (term "0,0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "39") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "39") (term "1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "39") (term "1,0,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "39") (term "1,0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "39") (term "0,1,0,1,0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "39") (term "0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "39") (term "0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "39") (term "0,0,0,1,0,0,0,0"))
                        (rule "add_zero_left" (formula "39") (term "0,0,1,0,0,0,0"))
                        (rule "applyEq" (formula "39") (term "1,1,0") (ifseqformula "28"))
                        (rule "inEqSimp_invertInEq1" (formula "39") (term "0,0,0,0,0"))
                        (rule "times_zero_2" (formula "39") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "39") (term "0,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "39") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "39") (term "1,1,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "39") (term "1,0,0,0,0") (ifseqformula "27"))
                        (rule "inEqSimp_homoInEq1" (formula "39") (term "0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "39") (term "1,1,0,0,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "39") (term "1,0,0,1,0,0,0,0"))
                        (rule "add_zero_right" (formula "39") (term "0,0,1,0,0,0,0"))
                        (rule "leq_literals" (formula "39") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "39"))
                        (rule "inEqSimp_contradInEq1" (formula "39") (term "0,0,0,0") (ifseqformula "25"))
                        (rule "qeq_literals" (formula "39") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "39"))
                        (rule "allLeft" (formula "40") (inst "t=add(Z(neglit(2(#))), l_1)"))
                        (rule "polySimp_addAssoc" (formula "40") (term "1,1,0,0"))
                        (rule "add_literals" (formula "40") (term "0,1,1,0,0"))
                        (rule "inEqSimp_homoInEq0" (formula "40") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "40") (term "1,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "40") (term "0,1,0,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "40") (term "0,0,0,0,0,0"))
                        (rule "add_literals" (formula "40") (term "0,0,0,0,0,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "40") (term "1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "40") (term "1,0,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "40") (term "1,0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "40") (term "0,1,0,1,0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "40") (term "0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "40") (term "0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "40") (term "0,0,0,1,0,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "40") (term "0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "40") (term "0,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "40") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "40") (term "1,1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,0,0,0"))
                        (rule "mul_literals" (formula "40") (term "0,1,1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "40") (term "1,1,1,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "40") (term "1,0,0,0,0") (ifseqformula "27"))
                        (rule "inEqSimp_homoInEq1" (formula "40") (term "0,1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "40") (term "1,0,0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "40") (term "0,1,0,0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "40") (term "0,0,1,0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "40") (term "0,0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "40") (term "0,0,0,0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "40") (term "0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "40") (term "1,1,0,0,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "40") (term "1,0,0,1,0,0,0,0"))
                        (rule "add_zero_right" (formula "40") (term "0,0,1,0,0,0,0"))
                        (rule "leq_literals" (formula "40") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "40"))
                        (rule "inEqSimp_contradInEq1" (formula "40") (term "0,0,0,0") (ifseqformula "25"))
                        (rule "qeq_literals" (formula "40") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "40"))
                        (rule "allLeft" (formula "38") (inst "t=j_0"))
                        (rule "inEqSimp_contradInEq1" (formula "38") (term "0,0") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "38") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "38") (term "1,0,0,0,0"))
                        (rule "mul_literals" (formula "38") (term "0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "38") (term "0,0,0,0"))
                        (rule "polySimp_addComm0" (formula "38") (term "0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "38") (term "0,0,0,0"))
                        (rule "add_literals" (formula "38") (term "1,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "38") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "38") (term "0,0,0,0"))
                        (rule "leq_literals" (formula "38") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "38"))
                        (rule "inEqSimp_contradInEq0" (formula "38") (term "1") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "38") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1"))
                        (rule "mul_literals" (formula "38") (term "0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "38") (term "0,0,1"))
                        (rule "polySimp_addComm0" (formula "38") (term "0,0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "38") (term "0,0,1"))
                        (rule "add_literals" (formula "38") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "38") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "38") (term "0,0,1"))
                        (rule "leq_literals" (formula "38") (term "0,1"))
                         (builtin "One Step Simplification" (formula "38"))
                        (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "38"))
                        (rule "andLeft" (formula "3"))
                        (rule "inEqSimp_homoInEq1" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                        (rule "mul_literals" (formula "3") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                        (rule "add_literals" (formula "3") (term "1,1,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0"))
                        (rule "add_zero_right" (formula "3") (term "0"))
                        (rule "leq_literals" (formula "3"))
                        (rule "closeFalse" (formula "3"))
                     )
                  )
                  (branch "CUT: result_241 <= -2 + l_0 * 2 FALSE"
                      (builtin "One Step Simplification" (formula "25"))
                     (rule "true_left" (formula "25"))
                     (rule "inEqSimp_leqRight" (formula "36"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1"))
                     (rule "mul_literals" (formula "1") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                     (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "23"))
                     (rule "applyEq" (formula "25") (term "0") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "25"))
                     (rule "polySimp_mulComm0" (formula "25") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "25") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0"))
                     (rule "mul_literals" (formula "25") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "25") (term "0"))
                     (rule "polySimp_addComm1" (formula "25") (term "0,0"))
                     (rule "add_literals" (formula "25") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "25") (term "0"))
                     (rule "add_literals" (formula "25") (term "1,1,0"))
                     (rule "applyEq" (formula "24") (term "0") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq0" (formula "24"))
                     (rule "polySimp_pullOutFactor1" (formula "24") (term "0"))
                     (rule "add_literals" (formula "24") (term "1,0"))
                     (rule "times_zero_1" (formula "24") (term "0"))
                     (rule "qeq_literals" (formula "24"))
                     (rule "true_left" (formula "24"))
                     (rule "applyEq" (formula "29") (term "0") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "29"))
                     (rule "polySimp_mulComm0" (formula "29") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "29") (term "1,0"))
                     (rule "mul_literals" (formula "29") (term "0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0"))
                     (rule "polySimp_addAssoc" (formula "29") (term "0"))
                     (rule "add_literals" (formula "29") (term "0,0"))
                     (rule "applyEq" (formula "9") (term "1,0,2,0,0,0") (ifseqformula "1"))
                     (rule "polySimp_addAssoc" (formula "9") (term "0,2,0,0,0"))
                     (rule "polySimp_addComm0" (formula "9") (term "0,0,2,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,2,0,0,0"))
                     (rule "add_literals" (formula "9") (term "1,1,0,2,0,0,0"))
                     (rule "polySimp_elimOne" (formula "9") (term "1,0,2,0,0,0"))
                     (rule "applyEq" (formula "25") (term "1,0,2,0") (ifseqformula "1"))
                     (rule "polySimp_addAssoc" (formula "25") (term "0,2,0"))
                     (rule "polySimp_addComm1" (formula "25") (term "0,0,2,0"))
                     (rule "add_literals" (formula "25") (term "0,0,0,2,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "25") (term "0,2,0"))
                     (rule "add_literals" (formula "25") (term "1,1,0,2,0"))
                     (rule "polySimp_elimOne" (formula "25") (term "1,0,2,0"))
                     (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "2"))
                     (rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
                     (rule "add_literals" (formula "2") (term "1,0"))
                     (rule "times_zero_1" (formula "2") (term "0"))
                     (rule "leq_literals" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "applyEq" (formula "24") (term "0") (ifseqformula "21"))
                     (rule "applyEq" (formula "22") (term "1") (ifseqformula "1"))
                     (rule "applyEq" (formula "8") (term "0,1,1") (ifseqformula "1"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "8") (term "1,1"))
                     (rule "mul_literals" (formula "8") (term "0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1"))
                     (rule "polySimp_addComm1" (formula "8") (term "1"))
                     (rule "polySimp_addAssoc" (formula "8") (term "0,1"))
                     (rule "polySimp_addComm0" (formula "8") (term "0,0,1"))
                     (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,1"))
                     (rule "add_literals" (formula "8") (term "1,1,0,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "23"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "0"))
                     (rule "polySimp_elimOne" (formula "23") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "27"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "0"))
                     (rule "inEqSimp_subsumption6" (formula "27") (ifseqformula "28"))
                     (rule "mul_literals" (formula "27") (term "1,1,0"))
                     (rule "greater_literals" (formula "27") (term "0,0"))
                      (builtin "One Step Simplification" (formula "27"))
                     (rule "leq_literals" (formula "27") (term "0"))
                      (builtin "One Step Simplification" (formula "27"))
                     (rule "true_left" (formula "27"))
                     (rule "inEqSimp_contradInEq0" (formula "8") (term "0,0") (ifseqformula "23"))
                     (rule "inEqSimp_homoInEq1" (formula "8") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0"))
                     (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,0"))
                     (rule "polySimp_addComm1" (formula "8") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "8") (term "0,0,0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,0,0"))
                     (rule "add_literals" (formula "8") (term "1,1,0,0,0,0"))
                     (rule "times_zero_1" (formula "8") (term "1,0,0,0,0"))
                     (rule "add_zero_right" (formula "8") (term "0,0,0,0"))
                     (rule "leq_literals" (formula "8") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "polySimp_homoEq" (formula "8"))
                     (rule "mul_literals" (formula "8") (term "1,0"))
                     (rule "polySimp_addComm1" (formula "8") (term "0"))
                     (rule "polySimp_addComm1" (formula "8") (term "0,0"))
                     (rule "add_literals" (formula "8") (term "0,0,0"))
                     (rule "polySimp_sepPosMonomial" (formula "8"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1"))
                     (rule "polySimp_rightDist" (formula "8") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
                     (rule "mul_literals" (formula "8") (term "0,1"))
                     (rule "applyEqRigid" (formula "38") (term "1") (ifseqformula "8"))
                     (rule "all_pull_out3" (formula "32") (term "0"))
                     (rule "shift_paren_or" (formula "32") (term "0,0"))
                     (rule "shift_paren_or" (formula "32") (term "0,0,0"))
                     (rule "all_pull_out3" (formula "20") (term "0"))
                     (rule "shift_paren_or" (formula "20") (term "0,0"))
                     (rule "shift_paren_or" (formula "20") (term "0,0,0"))
                     (rule "onlyCreatedObjectsAreReferencedFinal" (formula "19") (term "0") (ifseqformula "12") (ifseqformula "10"))
                     (rule "applyEq" (formula "19") (term "1,0,1") (ifseqformula "20"))
                     (rule "replace_known_left" (formula "19") (term "1") (ifseqformula "9"))
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "true_left" (formula "19"))
                     (rule "onlyCreatedObjectsAreReferencedFinal" (formula "29") (term "0,0") (ifseqformula "12") (ifseqformula "10"))
                     (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "37"))
                      (builtin "One Step Simplification" (formula "29"))
                     (rule "allLeft" (formula "33") (inst "t=i_0"))
                     (rule "inEqSimp_contradInEq0" (formula "33") (term "1,0,0,0,0") (ifseqformula "6"))
                     (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0,0,0"))
                     (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0,0,0"))
                     (rule "polySimp_addComm1" (formula "33") (term "0,0,0,1,0,0,0,0"))
                     (rule "add_literals" (formula "33") (term "0,0,0,0,1,0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1,0,0,0,0"))
                     (rule "add_literals" (formula "33") (term "1,1,0,0,1,0,0,0,0"))
                     (rule "times_zero_1" (formula "33") (term "1,0,0,1,0,0,0,0"))
                     (rule "add_zero_right" (formula "33") (term "0,0,1,0,0,0,0"))
                     (rule "leq_literals" (formula "33") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "33"))
                     (rule "inEqSimp_contradInEq1" (formula "33") (term "0,0,0,0") (ifseqformula "5"))
                     (rule "qeq_literals" (formula "33") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "33"))
                     (rule "commute_or" (formula "33") (term "0,0"))
                     (rule "allLeft" (formula "20") (inst "t=i_0"))
                     (rule "inEqSimp_contradInEq1" (formula "20") (term "0,0,0,0,0") (ifseqformula "5"))
                     (rule "qeq_literals" (formula "20") (term "0,0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "20"))
                     (rule "inEqSimp_contradInEq0" (formula "20") (term "0,0,0,0") (ifseqformula "6"))
                     (rule "inEqSimp_homoInEq1" (formula "20") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "20") (term "0,1,0,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "20") (term "0,0,0,0,0,0"))
                     (rule "polySimp_addComm0" (formula "20") (term "0,0,0,0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,0,0,0,0"))
                     (rule "add_literals" (formula "20") (term "1,1,0,0,0,0,0,0"))
                     (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "20") (term "0,0,0,0,0,0"))
                     (rule "leq_literals" (formula "20") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "20"))
                     (rule "commute_or" (formula "20") (term "0,0"))
                     (rule "allLeft" (formula "34") (inst "t=j_0"))
                     (rule "inEqSimp_contradInEq1" (formula "34") (term "0,0") (ifseqformula "3"))
                     (rule "inEqSimp_homoInEq1" (formula "34") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "34") (term "1,0,0,0,0"))
                     (rule "mul_literals" (formula "34") (term "0,1,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "34") (term "0,0,0,0"))
                     (rule "polySimp_addComm0" (formula "34") (term "0,0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,0,0"))
                     (rule "add_literals" (formula "34") (term "1,1,0,0,0,0"))
                     (rule "times_zero_1" (formula "34") (term "1,0,0,0,0"))
                     (rule "add_zero_right" (formula "34") (term "0,0,0,0"))
                     (rule "leq_literals" (formula "34") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "34"))
                     (rule "inEqSimp_contradInEq0" (formula "34") (term "1") (ifseqformula "2"))
                     (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1"))
                     (rule "mul_literals" (formula "34") (term "0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "34") (term "0,0,1"))
                     (rule "polySimp_addComm0" (formula "34") (term "0,0,0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                     (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "34") (term "0,0,1"))
                     (rule "leq_literals" (formula "34") (term "0,1"))
                      (builtin "One Step Simplification" (formula "34"))
                     (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "34"))
                     (rule "andLeft" (formula "4"))
                     (rule "inEqSimp_homoInEq1" (formula "4"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                     (rule "mul_literals" (formula "4") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "4") (term "0"))
                     (rule "polySimp_addComm1" (formula "4") (term "0,0"))
                     (rule "add_literals" (formula "4") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
                     (rule "add_literals" (formula "4") (term "1,1,0"))
                     (rule "times_zero_1" (formula "4") (term "1,0"))
                     (rule "add_zero_right" (formula "4") (term "0"))
                     (rule "leq_literals" (formula "4"))
                     (rule "closeFalse" (formula "4"))
                  )
               )
               (branch "CUT: result_241 >= 1 + l_0 FALSE"
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "true_left" (formula "24"))
                  (rule "inEqSimp_geqRight" (formula "36"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1"))
                  (rule "inEqSimp_antiSymm" (formula "23") (ifseqformula "1"))
                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "23"))
                  (rule "inEqSimp_homoInEq0" (formula "1"))
                  (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "1,0"))
                  (rule "times_zero_1" (formula "1") (term "0"))
                  (rule "qeq_literals" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "applyEq" (formula "23") (term "0") (ifseqformula "22"))
                  (rule "inEqSimp_homoInEq1" (formula "23"))
                  (rule "polySimp_pullOutFactor1" (formula "23") (term "0"))
                  (rule "add_literals" (formula "23") (term "1,0"))
                  (rule "times_zero_1" (formula "23") (term "0"))
                  (rule "leq_literals" (formula "23"))
                  (rule "true_left" (formula "23"))
                  (rule "applyEq" (formula "24") (term "1,0,2,0,1") (ifseqformula "22"))
                  (rule "polySimp_pullOutFactor2" (formula "24") (term "0,2,0,1"))
                  (rule "add_literals" (formula "24") (term "1,0,2,0,1"))
                  (rule "times_zero_1" (formula "24") (term "0,2,0,1"))
                  (rule "applyEq" (formula "7") (term "1,0,2,0,0,0") (ifseqformula "22"))
                  (rule "polySimp_pullOutFactor2" (formula "7") (term "0,2,0,0,0"))
                  (rule "add_literals" (formula "7") (term "1,0,2,0,0,0"))
                  (rule "times_zero_1" (formula "7") (term "0,2,0,0,0"))
                  (rule "applyEq" (formula "23") (term "0") (ifseqformula "22"))
                  (rule "inEqSimp_homoInEq0" (formula "23"))
                  (rule "polySimp_pullOutFactor0b" (formula "23") (term "0"))
                  (rule "add_literals" (formula "23") (term "1,1,0"))
                  (rule "polySimp_elimOne" (formula "23") (term "1,0"))
                  (rule "applyEq" (formula "28") (term "0") (ifseqformula "22"))
                  (rule "applyEq" (formula "24") (term "0,0") (ifseqformula "22"))
                  (rule "inEqSimp_homoInEq0" (formula "24") (term "0"))
                  (rule "polySimp_pullOutFactor0b" (formula "24") (term "0,0"))
                  (rule "add_literals" (formula "24") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "24") (term "1,0,0"))
                  (rule "applyEq" (formula "21") (term "1") (ifseqformula "22"))
                  (rule "applyEq" (formula "7") (term "0,1,1") (ifseqformula "22"))
                  (rule "polySimp_addComm1" (formula "7") (term "1"))
                  (rule "polySimp_pullOutFactor0" (formula "7") (term "0,1"))
                  (rule "add_literals" (formula "7") (term "1,0,1"))
                  (rule "times_zero_1" (formula "7") (term "0,1"))
                  (rule "add_zero_left" (formula "7") (term "1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "23"))
                  (rule "mul_literals" (formula "23") (term "1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "0"))
                  (rule "mul_literals" (formula "24") (term "1,0"))
                  (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "28"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "inEqSimp_subsumption1" (formula "23") (ifseqformula "28"))
                  (rule "leq_literals" (formula "23") (term "0"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "true_left" (formula "23"))
                  (rule "all_pull_out3" (formula "32") (term "0"))
                  (rule "shift_paren_or" (formula "32") (term "0,0"))
                  (rule "shift_paren_or" (formula "32") (term "0,0,0"))
                  (rule "all_pull_out3" (formula "19") (term "0"))
                  (rule "shift_paren_or" (formula "19") (term "0,0"))
                  (rule "shift_paren_or" (formula "19") (term "0,0,0"))
                  (rule "ifthenelse_split" (formula "7") (term "0"))
                  (branch "self.sorted_splitters[0] >= 1 + value TRUE"
                     (rule "eqSymm" (formula "8"))
                     (rule "applyEqRigid" (formula "39") (term "1") (ifseqformula "8"))
                     (rule "inEqSimp_subsumption1" (formula "24") (ifseqformula "7"))
                     (rule "inEqSimp_homoInEq0" (formula "24") (term "0"))
                     (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0"))
                     (rule "add_literals" (formula "24") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "24") (term "1,0,0"))
                     (rule "add_zero_right" (formula "24") (term "0,0"))
                     (rule "qeq_literals" (formula "24") (term "0"))
                      (builtin "One Step Simplification" (formula "24"))
                     (rule "true_left" (formula "24"))
                     (rule "allLeft" (formula "32") (inst "t=i_0"))
                     (rule "inEqSimp_contradInEq1" (formula "32") (term "0,0,0,0,0") (ifseqformula "4"))
                     (rule "qeq_literals" (formula "32") (term "0,0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "32"))
                     (rule "inEqSimp_contradInEq0" (formula "32") (term "0,0,0,0") (ifseqformula "5"))
                     (rule "inEqSimp_homoInEq1" (formula "32") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "32") (term "1,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "32") (term "0,1,0,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "32") (term "0,0,0,0,0,0"))
                     (rule "polySimp_addComm1" (formula "32") (term "0,0,0,0,0,0,0"))
                     (rule "add_literals" (formula "32") (term "0,0,0,0,0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,0,0,0,0"))
                     (rule "add_literals" (formula "32") (term "1,1,0,0,0,0,0,0"))
                     (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "32") (term "0,0,0,0,0,0"))
                     (rule "leq_literals" (formula "32") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "32"))
                     (rule "commute_or" (formula "32") (term "0,0"))
                     (rule "allLeft" (formula "20") (inst "t=i_0"))
                     (rule "inEqSimp_contradInEq0" (formula "20") (term "1,0,0,0,0") (ifseqformula "5"))
                     (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,0,0"))
                     (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,0,0"))
                     (rule "polySimp_addComm0" (formula "20") (term "0,0,0,1,0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1,0,0,0,0"))
                     (rule "add_literals" (formula "20") (term "1,1,0,0,1,0,0,0,0"))
                     (rule "times_zero_1" (formula "20") (term "1,0,0,1,0,0,0,0"))
                     (rule "add_zero_right" (formula "20") (term "0,0,1,0,0,0,0"))
                     (rule "leq_literals" (formula "20") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "20"))
                     (rule "inEqSimp_contradInEq1" (formula "20") (term "0,0,0,0") (ifseqformula "4"))
                     (rule "qeq_literals" (formula "20") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "20"))
                     (rule "commute_or" (formula "20") (term "0,0"))
                     (rule "onlyCreatedObjectsAreReferencedFinal" (formula "38") (term "0") (ifseqformula "12") (ifseqformula "10"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "39"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "allLeft" (formula "35") (inst "t=Z(0(#))"))
                     (rule "leq_literals" (formula "35") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "35"))
                     (rule "add_zero_right" (formula "35") (term "1,1,0,0"))
                     (rule "inEqSimp_homoInEq1" (formula "35") (term "0,0,0,0"))
                     (rule "times_zero_2" (formula "35") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "35") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0,0"))
                     (rule "mul_literals" (formula "35") (term "1,0,0,0,0"))
                     (rule "inEqSimp_contradInEq1" (formula "35") (term "0,0,0,0") (ifseqformula "29"))
                     (rule "qeq_literals" (formula "35") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "35"))
                     (rule "commute_or" (formula "35") (term "0,0"))
                     (rule "onlyCreatedObjectsAreReferencedFinal" (formula "20") (term "0") (ifseqformula "13") (ifseqformula "11"))
                     (rule "applyEq" (formula "20") (term "1,0,1") (ifseqformula "21"))
                     (rule "replace_known_left" (formula "20") (term "1") (ifseqformula "10"))
                      (builtin "One Step Simplification" (formula "20"))
                     (rule "true_left" (formula "20"))
                     (rule "allLeft" (formula "34") (inst "t=j_0"))
                     (rule "inEqSimp_contradInEq0" (formula "34") (term "1") (ifseqformula "2"))
                     (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1"))
                     (rule "mul_literals" (formula "34") (term "0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "34") (term "0,0,1"))
                     (rule "polySimp_addComm0" (formula "34") (term "0,0,0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                     (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "34") (term "0,0,1"))
                     (rule "leq_literals" (formula "34") (term "0,1"))
                      (builtin "One Step Simplification" (formula "34"))
                     (rule "inEqSimp_contradInEq1" (formula "34") (term "0") (ifseqformula "3"))
                     (rule "inEqSimp_homoInEq1" (formula "34") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "34") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "34") (term "0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "34") (term "0,0,0"))
                     (rule "polySimp_addComm0" (formula "34") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,0"))
                     (rule "add_literals" (formula "34") (term "1,1,0,0,0"))
                     (rule "times_zero_1" (formula "34") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "34") (term "0,0,0"))
                     (rule "leq_literals" (formula "34") (term "0,0"))
                      (builtin "One Step Simplification" (formula "34"))
                     (rule "inEqSimp_contradInEq0" (formula "34") (ifseqformula "4"))
                     (rule "andLeft" (formula "34"))
                     (rule "inEqSimp_homoInEq1" (formula "34"))
                     (rule "polySimp_mulComm0" (formula "34") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "34") (term "1,0"))
                     (rule "mul_literals" (formula "34") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "34") (term "0"))
                     (rule "polySimp_addComm1" (formula "34") (term "0,0"))
                     (rule "add_literals" (formula "34") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "34") (term "0"))
                     (rule "add_literals" (formula "34") (term "1,1,0"))
                     (rule "times_zero_1" (formula "34") (term "1,0"))
                     (rule "add_zero_right" (formula "34") (term "0"))
                     (rule "leq_literals" (formula "34"))
                     (rule "closeFalse" (formula "34"))
                  )
                  (branch "self.sorted_splitters[0] >= 1 + value FALSE"
                     (rule "eqSymm" (formula "7"))
                     (rule "inEqSimp_geqRight" (formula "34"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0"))
                     (rule "applyEqRigid" (formula "39") (term "1") (ifseqformula "8"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1"))
                     (rule "inEqSimp_antiSymm" (formula "24") (ifseqformula "1"))
                     (rule "applyEq" (formula "25") (term "0") (ifseqformula "24"))
                     (rule "inEqSimp_homoInEq1" (formula "25"))
                     (rule "polySimp_pullOutFactor1" (formula "25") (term "0"))
                     (rule "add_literals" (formula "25") (term "1,0"))
                     (rule "times_zero_1" (formula "25") (term "0"))
                     (rule "leq_literals" (formula "25"))
                     (rule "true_left" (formula "25"))
                     (rule "applyEq" (formula "1") (term "0") (ifseqformula "24"))
                     (rule "inEqSimp_homoInEq0" (formula "1"))
                     (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "1,0"))
                     (rule "times_zero_1" (formula "1") (term "0"))
                     (rule "qeq_literals" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "allLeft" (formula "32") (inst "t=i_0"))
                     (rule "inEqSimp_contradInEq1" (formula "32") (term "0,0,0,0,0") (ifseqformula "4"))
                     (rule "qeq_literals" (formula "32") (term "0,0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "32"))
                     (rule "inEqSimp_contradInEq0" (formula "32") (term "0,0,0,0") (ifseqformula "5"))
                     (rule "inEqSimp_homoInEq1" (formula "32") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "32") (term "1,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "32") (term "0,1,0,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "32") (term "0,0,0,0,0,0"))
                     (rule "polySimp_addComm1" (formula "32") (term "0,0,0,0,0,0,0"))
                     (rule "add_literals" (formula "32") (term "0,0,0,0,0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,0,0,0,0"))
                     (rule "add_literals" (formula "32") (term "1,1,0,0,0,0,0,0"))
                     (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "32") (term "0,0,0,0,0,0"))
                     (rule "leq_literals" (formula "32") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "32"))
                     (rule "commute_or" (formula "32") (term "0,0"))
                     (rule "allLeft" (formula "19") (inst "t=i_0"))
                     (rule "inEqSimp_contradInEq1" (formula "19") (term "0,0,0,0,0") (ifseqformula "4"))
                     (rule "qeq_literals" (formula "19") (term "0,0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "inEqSimp_contradInEq0" (formula "19") (term "0,0,0,0") (ifseqformula "5"))
                     (rule "inEqSimp_homoInEq1" (formula "19") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "19") (term "0,1,0,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "19") (term "0,0,0,0,0,0"))
                     (rule "polySimp_addComm0" (formula "19") (term "0,0,0,0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,0,0,0,0"))
                     (rule "add_literals" (formula "19") (term "1,1,0,0,0,0,0,0"))
                     (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "19") (term "0,0,0,0,0,0"))
                     (rule "leq_literals" (formula "19") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "commute_or" (formula "19") (term "0,0"))
                     (rule "onlyCreatedObjectsAreReferencedFinal" (formula "38") (term "0") (ifseqformula "11") (ifseqformula "9"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "39"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferencedFinal" (formula "19") (term "0") (ifseqformula "12") (ifseqformula "10"))
                     (rule "applyEq" (formula "19") (term "1,0,1") (ifseqformula "20"))
                     (rule "replace_known_left" (formula "19") (term "1") (ifseqformula "9"))
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "true_left" (formula "19"))
                     (rule "allLeft" (formula "35") (inst "t=Z(0(#))"))
                     (rule "add_zero_right" (formula "35") (term "1,1,0,0"))
                     (rule "leq_literals" (formula "35") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "35"))
                     (rule "inEqSimp_homoInEq1" (formula "35") (term "0,0,0,0"))
                     (rule "times_zero_2" (formula "35") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "35") (term "0,0,0,0,0"))
                     (rule "applyEq" (formula "35") (term "1,1,0") (ifseqformula "25"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0,0"))
                     (rule "mul_literals" (formula "35") (term "1,0,0,0,0"))
                     (rule "inEqSimp_contradInEq1" (formula "35") (term "0,0,0,0") (ifseqformula "29"))
                     (rule "qeq_literals" (formula "35") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "35"))
                     (rule "commute_or" (formula "35") (term "0,0"))
                     (rule "allLeft" (formula "34") (inst "t=j_0"))
                     (rule "inEqSimp_contradInEq1" (formula "34") (term "0,0") (ifseqformula "3"))
                     (rule "inEqSimp_homoInEq1" (formula "34") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "34") (term "1,0,0,0,0"))
                     (rule "mul_literals" (formula "34") (term "0,1,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "34") (term "0,0,0,0"))
                     (rule "polySimp_addComm0" (formula "34") (term "0,0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,0,0"))
                     (rule "add_literals" (formula "34") (term "1,1,0,0,0,0"))
                     (rule "times_zero_1" (formula "34") (term "1,0,0,0,0"))
                     (rule "add_zero_right" (formula "34") (term "0,0,0,0"))
                     (rule "leq_literals" (formula "34") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "34"))
                     (rule "inEqSimp_contradInEq0" (formula "34") (term "1") (ifseqformula "2"))
                     (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1"))
                     (rule "mul_literals" (formula "34") (term "0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "34") (term "0,0,1"))
                     (rule "polySimp_addComm0" (formula "34") (term "0,0,0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                     (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "34") (term "0,0,1"))
                     (rule "leq_literals" (formula "34") (term "0,1"))
                      (builtin "One Step Simplification" (formula "34"))
                     (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "34"))
                     (rule "andLeft" (formula "4"))
                     (rule "inEqSimp_homoInEq1" (formula "4"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                     (rule "mul_literals" (formula "4") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "4") (term "0"))
                     (rule "polySimp_addComm1" (formula "4") (term "0,0"))
                     (rule "add_literals" (formula "4") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
                     (rule "add_literals" (formula "4") (term "1,1,0"))
                     (rule "times_zero_1" (formula "4") (term "1,0"))
                     (rule "add_zero_right" (formula "4") (term "0"))
                     (rule "leq_literals" (formula "4"))
                     (rule "closeFalse" (formula "4"))
                  )
               )
            )
            (branch "Null reference (t_1 = null)"
                (builtin "One Step Simplification" (formula "17"))
               (rule "notRight" (formula "17"))
               (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "true_left" (formula "4"))
               (rule "polySimp_homoEq" (formula "2"))
               (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
               (rule "polySimp_rightDist" (formula "2") (term "1,0"))
               (rule "polySimp_rightDist" (formula "2") (term "0,1,0"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0"))
               (rule "polySimp_elimOne" (formula "2") (term "1,0,1,0"))
               (rule "polySimp_mulAssoc" (formula "2") (term "0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "2") (term "0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "2") (term "0"))
               (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "13"))
               (rule "polySimp_mulAssoc" (formula "13") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "13") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0,1,0"))
               (rule "polySimp_addComm1" (formula "2") (term "0,0,0,1,0"))
               (rule "applyEq" (formula "13") (term "0,0,1,0") (ifseqformula "1"))
               (rule "applyEq" (formula "14") (term "1,0") (ifseqformula "1"))
               (rule "applyEq" (formula "15") (term "1") (ifseqformula "1"))
               (rule "applyEq" (formula "14") (term "0,0,1,3,0") (ifseqformula "1"))
               (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "11") (term "1,0") (ifseqformula "1"))
               (rule "polySimp_sepNegMonomial" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0"))
               (rule "polySimp_elimOne" (formula "2") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "13"))
               (rule "polySimp_mulLiterals" (formula "13") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0"))
               (rule "polySimp_elimOne" (formula "2") (term "0,0,0"))
               (rule "inEqSimp_exactShadow1" (formula "13") (ifseqformula "12"))
               (rule "greater_literals" (formula "13") (term "0"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
               (rule "polySimp_rightDist" (formula "13") (term "0,0"))
               (rule "mul_literals" (formula "13") (term "0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "13") (term "0"))
               (rule "add_literals" (formula "13") (term "1,1,0"))
               (rule "polySimp_elimOne" (formula "13") (term "1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "13"))
               (rule "mul_literals" (formula "13") (term "1"))
               (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "10"))
                (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "1")) (ifInst ""  (formula "4")))
               (rule "closeFalse" (formula "10"))
            )
         )
         (branch "Null Reference (x_arr = null)"
            (rule "false_right" (formula "15"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "inEqSimp_ltToLeq" (formula "11"))
            (rule "polySimp_mulAssoc" (formula "11") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "11") (term "0"))
            (rule "applyEq" (formula "16") (term "0,0,1,1,0,0") (ifseqformula "1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "11"))
            (rule "polySimp_mulLiterals" (formula "11") (term "0"))
            (rule "inEqSimp_exactShadow1" (formula "11") (ifseqformula "10"))
            (rule "greater_literals" (formula "11") (term "0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
            (rule "polySimp_rightDist" (formula "11") (term "0,0"))
            (rule "mul_literals" (formula "11") (term "0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "11") (term "0"))
            (rule "add_literals" (formula "11") (term "1,1,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "11"))
            (rule "mul_literals" (formula "11") (term "1"))
            (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "8"))
             (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "1")) (ifInst ""  (formula "2")) (ifInst ""  (formula "14")))
            (rule "closeFalse" (formula "8"))
         )
         (branch "Index Out of Bounds (x_arr != null, but bucket_index Out of Bounds!)"
            (rule "false_right" (formula "15"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "inEqSimp_ltToLeq" (formula "11"))
            (rule "polySimp_mulAssoc" (formula "11") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "11") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "1") (term "0,0,1"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "11"))
            (rule "polySimp_mulLiterals" (formula "11") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0,1"))
            (rule "polySimp_elimOne" (formula "1") (term "0,1"))
            (rule "inEqSimp_exactShadow1" (formula "11") (ifseqformula "10"))
            (rule "greater_literals" (formula "11") (term "0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
            (rule "polySimp_rightDist" (formula "11") (term "0,0"))
            (rule "mul_literals" (formula "11") (term "0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "11") (term "0"))
            (rule "add_literals" (formula "11") (term "1,1,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "11"))
            (rule "mul_literals" (formula "11") (term "1"))
            (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "14"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "translateJavaSubInt" (formula "14") (term "3,0,1"))
            (rule "andLeft" (formula "14"))
            (rule "andLeft" (formula "14"))
            (rule "andLeft" (formula "14"))
            (rule "andLeft" (formula "15"))
            (rule "andLeft" (formula "14"))
            (rule "andLeft" (formula "14"))
            (rule "andLeft" (formula "15"))
            (rule "andLeft" (formula "14"))
            (rule "notLeft" (formula "15"))
            (rule "notLeft" (formula "14"))
            (rule "polySimp_elimSub" (formula "20") (term "3,0"))
            (rule "mul_literals" (formula "20") (term "1,3,0"))
            (rule "polySimp_addComm0" (formula "20") (term "3,0"))
            (rule "inEqSimp_commuteLeq" (formula "19"))
            (rule "inEqSimp_commuteLeq" (formula "17"))
            (rule "inEqSimp_commuteLeq" (formula "18"))
            (rule "inEqSimp_commuteLeq" (formula "14"))
            (rule "applyEq" (formula "20") (term "1,3,0") (ifseqformula "16"))
            (rule "applyEq" (formula "19") (term "1") (ifseqformula "16"))
            (rule "applyEq" (formula "17") (term "0") (ifseqformula "16"))
            (rule "applyEq" (formula "18") (term "1") (ifseqformula "16"))
            (rule "applyEq" (formula "10") (term "0") (ifseqformula "16"))
            (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "16"))
            (rule "applyEq" (formula "13") (term "0,1,3,0") (ifseqformula "16"))
            (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "10"))
            (rule "mul_literals" (formula "17") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "17"))
            (rule "mul_literals" (formula "17") (term "1"))
            (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "17"))
            (rule "leq_literals" (formula "11") (term "0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "inEqSimp_exactShadow1" (formula "11") (ifseqformula "10"))
            (rule "greater_literals" (formula "11") (term "0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
            (rule "polySimp_rightDist" (formula "11") (term "0,0"))
            (rule "mul_literals" (formula "11") (term "0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "11") (term "0"))
            (rule "add_literals" (formula "11") (term "1,1,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "11"))
            (rule "mul_literals" (formula "11") (term "1"))
            (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "17"))
            (rule "leq_literals" (formula "11") (term "0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "8"))
             (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "24")) (ifInst ""  (formula "2")))
            (rule "translateJavaSubInt" (formula "8") (term "0,2,1,1,0"))
            (rule "translateJavaSubInt" (formula "8") (term "0,2,0,1,0"))
            (rule "translateJavaMulInt" (formula "8") (term "1,1,0,0,0,0"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "9"))
            (rule "notLeft" (formula "8"))
            (rule "eqSymm" (formula "13"))
            (rule "polySimp_elimSub" (formula "13") (term "0,2,1"))
            (rule "mul_literals" (formula "13") (term "1,0,2,1"))
            (rule "polySimp_elimSub" (formula "13") (term "0,2,0"))
            (rule "mul_literals" (formula "13") (term "1,0,2,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "1"))
            (rule "eqSymm" (formula "10"))
            (rule "polySimp_addComm0" (formula "13") (term "0,2,1"))
            (rule "polySimp_addComm0" (formula "13") (term "0,2,0"))
            (rule "inEqSimp_commuteLeq" (formula "8"))
            (rule "applyEq" (formula "25") (term "0,0") (ifseqformula "11"))
            (rule "inEqSimp_commuteGeq" (formula "25"))
            (rule "applyEq" (formula "12") (term "3,0") (ifseqformula "21"))
            (rule "applyEq" (formula "29") (term "0") (ifseqformula "11"))
            (rule "applyEq" (formula "26") (term "1,0") (ifseqformula "11"))
            (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "21"))
            (rule "applyEq" (formula "13") (term "1,0,2,0") (ifseqformula "21"))
            (rule "eqSymm" (formula "13"))
            (rule "applyEq" (formula "17") (term "0") (ifseqformula "10"))
            (rule "applyEq" (formula "13") (term "1,0,2,0") (ifseqformula "21"))
            (rule "eqSymm" (formula "13"))
            (rule "newSym_eq" (formula "10") (inst "l=l_0") (inst "newSymDef=mul(int::final(self,
               de.wiesler.Classifier::$num_buckets),
    Z(0(#)))"))
            (rule "times_zero_1" (formula "10") (term "1,1"))
            (rule "add_zero_right" (formula "10") (term "1"))
            (rule "applyEq" (formula "26") (term "0") (ifseqformula "10"))
            (rule "inEqSimp_commuteLeq" (formula "26"))
            (rule "applyEq" (formula "17") (term "0") (ifseqformula "10"))
            (rule "inEqSimp_commuteLeq" (formula "17"))
            (rule "applyEq" (formula "25") (term "1") (ifseqformula "10"))
            (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "10"))
            (rule "eqSymm" (formula "11"))
            (rule "applyEq" (formula "19") (term "0,1,3,0") (ifseqformula "10"))
            (rule "polySimp_addComm0" (formula "19") (term "3,0"))
            (rule "applyEq" (formula "14") (term "1,0,2,0") (ifseqformula "10"))
            (rule "eqSymm" (formula "14"))
            (rule "applyEq" (formula "24") (term "0") (ifseqformula "10"))
            (rule "applyEq" (formula "13") (term "3,0") (ifseqformula "10"))
            (rule "applyEq" (formula "27") (term "1,3,0") (ifseqformula "10"))
            (rule "applyEq" (formula "1") (term "0,0,1,1,0") (ifseqformula "11"))
            (rule "polySimp_addComm0" (formula "1") (term "1,0"))
            (rule "applyEq" (formula "18") (term "0") (ifseqformula "11"))
            (rule "inEqSimp_homoInEq1" (formula "18"))
            (rule "polySimp_mulLiterals" (formula "18") (term "1,0"))
            (rule "polySimp_addComm1" (formula "18") (term "0"))
            (rule "applyEq" (formula "14") (term "1,0,2,0") (ifseqformula "10"))
            (rule "eqSymm" (formula "14"))
            (rule "applyEq" (formula "1") (term "0,0,1") (ifseqformula "11"))
            (rule "inEqSimp_homoInEq1" (formula "1") (term "1"))
            (rule "polySimp_addComm1" (formula "1") (term "0,1"))
            (rule "applyEq" (formula "9") (term "0") (ifseqformula "11"))
            (rule "applyEq" (formula "8") (term "0") (ifseqformula "11"))
            (rule "applyEq" (formula "22") (term "1") (ifseqformula "10"))
            (rule "inEqSimp_sepPosMonomial0" (formula "18"))
            (rule "polySimp_mulComm0" (formula "18") (term "1"))
            (rule "polySimp_rightDist" (formula "18") (term "1"))
            (rule "polySimp_mulLiterals" (formula "18") (term "1,1"))
            (rule "mul_literals" (formula "18") (term "0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,1"))
            (rule "polySimp_rightDist" (formula "1") (term "1,1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1"))
            (rule "mul_literals" (formula "1") (term "0,1,1"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1,1"))
            (rule "inEqSimp_subsumption6" (formula "8") (ifseqformula "24"))
            (rule "greater_literals" (formula "8") (term "0,0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "mul_literals" (formula "8") (term "1,0"))
            (rule "leq_literals" (formula "8") (term "0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "true_left" (formula "8"))
            (rule "elimGcdLeq_antec" (formula "8") (inst "elimGcdRightDiv=Z(4(6(#)))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
            (rule "neg_literal" (formula "8") (term "0,0,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0,0,1,0"))
            (rule "leq_literals" (formula "8") (term "0,0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
            (rule "polySimp_addLiterals" (formula "8") (term "0,0,0,0"))
            (rule "add_literals" (formula "8") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
            (rule "add_literals" (formula "8") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "8") (term "1,0,0"))
            (rule "add_zero_right" (formula "8") (term "0,0"))
            (rule "qeq_literals" (formula "8") (term "0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "true_left" (formula "8"))
            (rule "inEqSimp_exactShadow3" (formula "21") (ifseqformula "16"))
            (rule "mul_literals" (formula "21") (term "0,0"))
            (rule "polySimp_addAssoc" (formula "21") (term "0"))
            (rule "add_literals" (formula "21") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "21"))
            (rule "mul_literals" (formula "21") (term "1"))
            (rule "inEqSimp_subsumption6" (formula "21") (ifseqformula "23"))
            (rule "mul_literals" (formula "21") (term "1,1,0"))
            (rule "greater_literals" (formula "21") (term "0,0"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "leq_literals" (formula "21") (term "0"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "true_left" (formula "21"))
            (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "16"))
            (rule "polySimp_mulComm0" (formula "15") (term "0,0"))
            (rule "polySimp_addAssoc" (formula "15") (term "0"))
            (rule "polySimp_addComm0" (formula "15") (term "0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "15") (term "0"))
            (rule "add_literals" (formula "15") (term "1,1,0"))
            (rule "polySimp_elimOne" (formula "15") (term "1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "15"))
            (rule "mul_literals" (formula "15") (term "1"))
            (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "23"))
            (rule "leq_literals" (formula "15") (term "0"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "true_left" (formula "15"))
            (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "13"))
             (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "28")) (ifInst ""  (formula "19")))
            (rule "translateJavaSubInt" (formula "13") (term "3,0,1"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "15"))
            (rule "andLeft" (formula "13"))
            (rule "notLeft" (formula "13"))
            (rule "polySimp_elimSub" (formula "18") (term "3,0"))
            (rule "mul_literals" (formula "18") (term "1,3,0"))
            (rule "polySimp_addComm0" (formula "18") (term "3,0"))
            (rule "inEqSimp_commuteLeq" (formula "17"))
            (rule "inEqSimp_commuteLeq" (formula "16"))
            (rule "inEqSimp_commuteLeq" (formula "15"))
            (rule "inEqSimp_commuteLeq" (formula "13"))
            (rule "applyEq" (formula "17") (term "1,3,0") (ifseqformula "13"))
            (rule "applyEq" (formula "13") (term "0") (ifseqformula "24"))
            (rule "eqSymm" (formula "13"))
            (rule "applyEq" (formula "16") (term "1,0") (ifseqformula "10"))
            (rule "applyEq" (formula "14") (term "1") (ifseqformula "23"))
            (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "10"))
            (rule "inEqSimp_commuteGeq" (formula "14"))
            (rule "applyEq" (formula "13") (term "0") (ifseqformula "22"))
            (rule "applyEq" (formula "28") (term "0") (ifseqformula "10"))
            (rule "applyEq" (formula "13") (term "0") (ifseqformula "21"))
            (rule "inEqSimp_commuteLeq" (formula "13"))
            (rule "applyEq" (formula "13") (term "1,3,0") (ifseqformula "8"))
            (rule "Contract_axiom_for_isClassifiedAs_in_Tree" (formula "16") (term "0"))
            (rule "replace_known_right" (formula "16") (term "0,1,0") (ifseqformula "27"))
             (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "3")))
            (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,0"))
            (rule "polySimp_addComm1" (formula "16") (term "0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0,0"))
            (rule "inEqSimp_homoInEq0" (formula "16") (term "0,0,0,0"))
            (rule "times_zero_2" (formula "16") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
            (rule "applyEq" (formula "16") (term "0,1,0,1,0,0,0") (ifseqformula "20"))
            (rule "polySimp_addComm1" (formula "16") (term "0,1,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,0,1,0,0,0"))
            (rule "add_literals" (formula "16") (term "1,1,0,0,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "16") (term "1,0,0,0,0"))
            (rule "replace_known_left" (formula "16") (term "0,0,0,0") (ifseqformula "14"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "16") (term "0,1,0,0,0"))
            (rule "replace_known_left" (formula "16") (term "0,0,0") (ifseqformula "15"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "25") (term "0") (inst "i=i") (inst "j=j"))
             (builtin "One Step Simplification" (formula "25"))
            (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,1,0"))
            (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,1,0"))
            (rule "add_literals" (formula "25") (term "0,0,0,1,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "25") (term "1,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,1,0"))
            (rule "mul_literals" (formula "25") (term "0,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
            (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
            (rule "nnf_imp2or" (formula "25") (term "0"))
            (rule "nnf_notAnd" (formula "25") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
            (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
            (rule "mul_literals" (formula "25") (term "1,0,0,0"))
            (rule "nnf_imp2or" (formula "25") (term "0,1,0"))
            (rule "nnf_notAnd" (formula "25") (term "0,0,1,0"))
            (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,1,0"))
            (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,1,0"))
            (rule "add_literals" (formula "25") (term "0,0,0,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,1,0"))
            (rule "mul_literals" (formula "25") (term "0,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,1,0"))
            (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,0,1,0"))
            (rule "mul_literals" (formula "25") (term "0,1,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,0,1,0"))
            (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "11") (term "0"))
            (rule "replace_known_left" (formula "11") (term "1,0") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "30")) (ifInst ""  (formula "12")))
            (rule "commute_or" (formula "1"))
            (rule "Definition_axiom_for_isClassifiedAs_in_de_wiesler_Tree" (formula "18") (term "0"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "translateJavaSubInt" (formula "18") (term "0,2,0,1,0"))
            (rule "translateJavaSubInt" (formula "18") (term "1,0,1"))
            (rule "andLeft" (formula "18"))
            (rule "polySimp_elimSub" (formula "19") (term "1,0"))
            (rule "mul_literals" (formula "19") (term "1,1,0"))
            (rule "polySimp_elimSub" (formula "18") (term "0,2,0,1"))
            (rule "mul_literals" (formula "18") (term "1,0,2,0,1"))
            (rule "polySimp_addComm0" (formula "19") (term "1,0"))
            (rule "polySimp_addComm1" (formula "18") (term "0,2,0,1"))
            (rule "polySimp_addComm0" (formula "18") (term "0,0,2,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "18") (term "0"))
            (rule "add_zero_right" (formula "18") (term "0,0"))
            (rule "polySimp_rightDist" (formula "18") (term "1,0,0"))
            (rule "polySimp_mulAssoc" (formula "18") (term "0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "18") (term "0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "18") (term "0,1,0,0"))
            (rule "polySimp_elimOne" (formula "18") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "18") (term "0,0"))
            (rule "inEqSimp_ltToLeq" (formula "19") (term "0"))
            (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0"))
            (rule "mul_literals" (formula "19") (term "0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "19") (term "0,0,0"))
            (rule "add_literals" (formula "19") (term "0,0,0,0"))
            (rule "polySimp_addComm1" (formula "19") (term "0,0"))
            (rule "polySimp_addAssoc" (formula "19") (term "0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "18") (term "1"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "19") (term "1"))
            (rule "applyEq" (formula "19") (term "0,1,0,0") (ifseqformula "22"))
            (rule "polySimp_addComm1" (formula "19") (term "0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "19") (term "0,0,0"))
            (rule "add_literals" (formula "19") (term "1,1,0,0,0"))
            (rule "applyEq" (formula "18") (term "1,1,0,1") (ifseqformula "10"))
            (rule "applyEq" (formula "19") (term "1,0,1") (ifseqformula "10"))
            (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0"))
            (rule "polySimp_mulLiterals" (formula "18") (term "0,0"))
            (rule "polySimp_elimOne" (formula "18") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0"))
            (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
            (rule "polySimp_rightDist" (formula "19") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0"))
            (rule "mul_literals" (formula "19") (term "0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,1"))
            (rule "polySimp_rightDist" (formula "18") (term "1,1"))
            (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1"))
            (rule "mul_literals" (formula "18") (term "0,1,1"))
            (rule "polySimp_elimOne" (formula "18") (term "1,1,1"))
            (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "12") (term "0") (inst "i=i") (inst "j=j"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,1,0"))
            (rule "mul_literals" (formula "12") (term "0,1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
            (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
            (rule "nnf_imp2or" (formula "12") (term "0"))
            (rule "nnf_notAnd" (formula "12") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
            (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,0,0"))
            (rule "nnf_imp2or" (formula "12") (term "0,1,0"))
            (rule "nnf_notAnd" (formula "12") (term "0,0,1,0"))
            (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,1,0"))
            (rule "mul_literals" (formula "12") (term "0,1,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,1,0"))
            (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,1,0"))
            (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,1,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,1,0"))
            (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,1,0"))
            (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "17") (term "1"))
             (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "30")) (ifInst ""  (formula "21")))
            (rule "translateJavaSubInt" (formula "17") (term "3,0,1,1"))
            (rule "polySimp_elimSub" (formula "17") (term "3,0,1,1"))
            (rule "mul_literals" (formula "17") (term "1,3,0,1,1"))
            (rule "polySimp_addComm0" (formula "17") (term "3,0,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "17") (term "1,0,0,0,0,1"))
            (rule "replace_known_left" (formula "17") (term "1,0,0,0,0,1") (ifseqformula "20"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "inEqSimp_commuteLeq" (formula "17") (term "1,1,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "17") (term "1,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "17") (term "0,1,0,0,1"))
            (rule "applyEq" (formula "17") (term "0,1,0,0,0,1") (ifseqformula "22"))
            (rule "eqSymm" (formula "17") (term "1,0,0,0,1"))
            (rule "replace_known_left" (formula "17") (term "1,0,0,0,1") (ifseqformula "8"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "applyEq" (formula "17") (term "0,0,1,0,0,1") (ifseqformula "22"))
            (rule "replace_known_left" (formula "17") (term "0,1,0,0,1") (ifseqformula "24"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "applyEq" (formula "17") (term "1,3,0,1,1") (ifseqformula "22"))
            (rule "applyEq" (formula "17") (term "1,0,1,1") (ifseqformula "10"))
            (rule "applyEq" (formula "17") (term "0,0,1,0,1") (ifseqformula "10"))
            (rule "inEqSimp_commuteGeq" (formula "17") (term "1,0,1"))
            (rule "applyEq" (formula "17") (term "1,1,0,0,1") (ifseqformula "22"))
            (rule "replace_known_left" (formula "17") (term "1,0,0,1") (ifseqformula "25"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "applyEq" (formula "17") (term "0,0,0,0,1") (ifseqformula "10"))
            (rule "replace_known_right" (formula "17") (term "0,0,0,1") (ifseqformula "31"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "applyEq" (formula "17") (term "0,0,1") (ifseqformula "22"))
            (rule "inEqSimp_commuteLeq" (formula "17") (term "0,1"))
            (rule "replace_known_left" (formula "17") (term "0,1") (ifseqformula "26"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "11") (term "0"))
            (rule "replace_known_left" (formula "11") (term "0,1") (ifseqformula "12"))
             (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "32")) (ifInst ""  (formula "3")))
            (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "12") (term "0") (inst "i=i"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "translateJavaAddInt" (formula "12") (term "0,2,1,1,0"))
            (rule "translateJavaSubInt" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_elimSub" (formula "12") (term "1,1,0,0"))
            (rule "mul_literals" (formula "12") (term "1,1,1,0,0"))
            (rule "polySimp_addComm0" (formula "12") (term "0,2,1,1,0"))
            (rule "polySimp_addComm0" (formula "12") (term "1,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
            (rule "nnf_imp2or" (formula "12") (term "0"))
            (rule "nnf_notAnd" (formula "12") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
            (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,0,0"))
            (rule "commute_or" (formula "28") (term "0,0,1,0"))
            (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "18") (term "0,0"))
             (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "31")) (ifInst ""  (formula "22")))
            (rule "translateJavaSubInt" (formula "18") (term "3,0,1,0,0"))
            (rule "polySimp_elimSub" (formula "18") (term "3,0,1,0,0"))
            (rule "mul_literals" (formula "18") (term "1,3,0,1,0,0"))
            (rule "polySimp_addComm0" (formula "18") (term "3,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "18") (term "1,1,0,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "18") (term "1,0,0,0,0,0,0"))
            (rule "replace_known_left" (formula "18") (term "1,0,0,0,0,0,0") (ifseqformula "21"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "inEqSimp_commuteLeq" (formula "18") (term "0,1,0,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "18") (term "1,0,0,0"))
            (rule "applyEq" (formula "18") (term "1,1,0,0,0") (ifseqformula "23"))
            (rule "applyEq" (formula "18") (term "0,1,0,0,0,0,0") (ifseqformula "23"))
            (rule "eqSymm" (formula "18") (term "1,0,0,0,0,0"))
            (rule "replace_known_left" (formula "18") (term "1,0,0,0,0,0") (ifseqformula "8"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "applyEq" (formula "18") (term "0,0,0,0,0,0,0") (ifseqformula "10"))
            (rule "replace_known_right" (formula "18") (term "0,0,0,0,0,0") (ifseqformula "32"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "applyEq" (formula "18") (term "1,0,1,0,0") (ifseqformula "10"))
            (rule "applyEq" (formula "18") (term "0,0,0,0,0,0") (ifseqformula "23"))
            (rule "replace_known_left" (formula "18") (term "0,0,0,0,0") (ifseqformula "25"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "applyEq" (formula "18") (term "0,0,1,0,0,0") (ifseqformula "10"))
            (rule "replace_known_left" (formula "18") (term "1,0,0,0") (ifseqformula "27"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "applyEq" (formula "18") (term "1,3,0,1,0,0") (ifseqformula "23"))
            (rule "applyEq" (formula "18") (term "1,0,0,0") (ifseqformula "23"))
            (rule "replace_known_left" (formula "18") (term "0,0,0") (ifseqformula "26"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "11") (term "0") (inst "i=i") (inst "j=j"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,1,0"))
            (rule "mul_literals" (formula "11") (term "0,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
            (rule "nnf_imp2or" (formula "11") (term "0"))
            (rule "nnf_notAnd" (formula "11") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
            (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
            (rule "mul_literals" (formula "11") (term "1,0,0,0"))
            (rule "nnf_imp2or" (formula "11") (term "0,1,0"))
            (rule "nnf_notAnd" (formula "11") (term "0,0,1,0"))
            (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,1,0"))
            (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,1,0"))
            (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,1,0"))
            (rule "add_zero_left" (formula "11") (term "0,0,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,1,0"))
            (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,1,0"))
            (rule "mul_literals" (formula "11") (term "0,1,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,1,0"))
            (rule "commute_or" (formula "12") (term "0,0,1,0"))
            (rule "arrayLengthNotNegative" (formula "26") (term "0"))
            (rule "arrayLengthIsAShort" (formula "25") (term "0"))
             (builtin "One Step Simplification" (formula "25"))
            (rule "true_left" (formula "25"))
            (rule "arrayLengthNotNegative" (formula "25") (term "0"))
            (rule "arrayLengthIsAShort" (formula "28") (term "0"))
             (builtin "One Step Simplification" (formula "28"))
            (rule "true_left" (formula "28"))
            (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "17") (term "0,0,0"))
            (rule "replace_known_left" (formula "17") (term "1,0") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "34")))
            (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "18") (term "0,1"))
            (rule "replace_known_left" (formula "18") (term "1,0") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "35")) (ifInst ""  (formula "17")))
            (rule "true_left" (formula "18"))
            (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "18") (term "0,0,0") (inst "i=i") (inst "j=j"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,1,0,0,0"))
            (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,1,0,0,0"))
            (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,1,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,0,0"))
            (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,0,0"))
            (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "18") (term "1,0,1,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,1,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0,1,0,0,0"))
            (rule "mul_literals" (formula "18") (term "0,1,1,0,0,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0,0,0"))
            (rule "mul_literals" (formula "18") (term "0,1,1,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0,0,0"))
            (rule "nnf_imp2or" (formula "18") (term "0,0,0"))
            (rule "nnf_notAnd" (formula "18") (term "0,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,0,0"))
            (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,0,0"))
            (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0,0,0"))
            (rule "mul_literals" (formula "18") (term "0,1,1,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0,0,0"))
            (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0,0,0"))
            (rule "add_zero_right" (formula "18") (term "0,0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0,0,0"))
            (rule "mul_literals" (formula "18") (term "1,0,0,0,0,0"))
            (rule "nnf_imp2or" (formula "18") (term "0,1,0,0,0"))
            (rule "nnf_notAnd" (formula "18") (term "0,0,1,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0,1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0,1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,0,1,0,0,0"))
            (rule "mul_literals" (formula "18") (term "0,1,0,0,0,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,0,1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,1,0,0,0"))
            (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,1,0,0,0"))
            (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0,1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0,1,0,0,0"))
            (rule "mul_literals" (formula "18") (term "0,1,1,0,0,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0,1,0,0,0"))
            (rule "jdiv_axiom" (formula "1") (term "1,1,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0,0,2,1"))
            (rule "eqSymm" (formula "1"))
            (rule "inEqSimp_subsumption6" (formula "1") (term "0,0") (ifseqformula "26"))
            (rule "mul_literals" (formula "1") (term "1,1,0,0,0"))
            (rule "greater_literals" (formula "1") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "leq_literals" (formula "1") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "eqSymm" (formula "1"))
            (rule "applyEq" (formula "2") (term "1,1,0") (ifseqformula "1"))
            (rule "applyEqRigid" (formula "2") (term "0,0,1,1") (ifseqformula "1"))
            (rule "polyDiv_pullOut" (formula "2") (term "0,0,1,1") (inst "polyDivCoeff=l_0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,2,0,0,1,1"))
            (rule "equal_literals" (formula "2") (term "0,0,0,1,1"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "polySimp_pullOutFactor0" (formula "2") (term "0,0,0,0,1,1"))
            (rule "add_literals" (formula "2") (term "1,0,0,0,0,1,1"))
            (rule "times_zero_1" (formula "2") (term "0,0,0,0,1,1"))
            (rule "div_literals" (formula "2") (term "0,0,0,1,1"))
            (rule "add_zero_left" (formula "2") (term "0,0,1,1"))
            (rule "polyDiv_pullOut" (formula "1") (term "1") (inst "polyDivCoeff=l_0"))
            (rule "equal_literals" (formula "1") (term "0,1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,1"))
            (rule "polySimp_pullOutFactor0" (formula "1") (term "0,0,1"))
            (rule "add_literals" (formula "1") (term "1,0,0,1"))
            (rule "times_zero_1" (formula "1") (term "0,0,1"))
            (rule "div_literals" (formula "1") (term "0,1"))
            (rule "add_zero_left" (formula "1") (term "1"))
            (rule "polyDiv_pullOut" (formula "2") (term "1,1,0") (inst "polyDivCoeff=l_0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,2,1,1,0"))
            (rule "equal_literals" (formula "2") (term "0,1,1,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "polySimp_pullOutFactor0" (formula "2") (term "0,0,1,1,0"))
            (rule "add_literals" (formula "2") (term "1,0,0,1,1,0"))
            (rule "times_zero_1" (formula "2") (term "0,0,1,1,0"))
            (rule "div_literals" (formula "2") (term "0,1,1,0"))
            (rule "add_zero_left" (formula "2") (term "1,1,0"))
            (rule "inEqSimp_contradInEq1" (formula "2") (term "0") (ifseqformula "16"))
            (rule "inEqSimp_homoInEq1" (formula "2") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0"))
            (rule "mul_literals" (formula "2") (term "0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,0,0"))
            (rule "polySimp_addComm0" (formula "2") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,0"))
            (rule "add_literals" (formula "2") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "2") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "2") (term "0,0,0"))
            (rule "leq_literals" (formula "2") (term "0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "inEqSimp_exactShadow3" (formula "29") (ifseqformula "2"))
            (rule "times_zero_1" (formula "29") (term "0,0"))
            (rule "add_zero_left" (formula "29") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "29"))
            (rule "polySimp_mulLiterals" (formula "29") (term "1"))
            (rule "polySimp_elimOne" (formula "29") (term "1"))
            (rule "inEqSimp_exactShadow3" (formula "30") (ifseqformula "2"))
            (rule "polySimp_mulComm0" (formula "30") (term "0,0"))
            (rule "polySimp_addAssoc" (formula "30") (term "0"))
            (rule "polySimp_pullOutFactor0" (formula "30") (term "0,0"))
            (rule "add_literals" (formula "30") (term "1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "30"))
            (rule "polySimp_mulLiterals" (formula "30") (term "1"))
            (rule "inEqSimp_contradInEq0" (formula "30") (ifseqformula "17"))
            (rule "andLeft" (formula "30"))
            (rule "inEqSimp_homoInEq1" (formula "30"))
            (rule "polySimp_mulComm0" (formula "30") (term "1,0"))
            (rule "polySimp_rightDist" (formula "30") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0"))
            (rule "mul_literals" (formula "30") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "30") (term "0"))
            (rule "polySimp_addComm0" (formula "30") (term "0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "30") (term "0"))
            (rule "add_literals" (formula "30") (term "1,1,0"))
            (rule "times_zero_1" (formula "30") (term "1,0"))
            (rule "add_zero_right" (formula "30") (term "0"))
            (rule "leq_literals" (formula "30"))
            (rule "closeFalse" (formula "30"))
         )
      )
      (branch "Case 2"
          (builtin "One Step Simplification" (formula "14"))
         (rule "equal_literals" (formula "14") (term "0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "closeTrue" (formula "14"))
      )
   )
   (branch "if x_2 false"
       (builtin "One Step Simplification" (formula "14"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "elim_double_block_2" (formula "14") (term "1"))
      (rule "compound_subtraction_2" (formula "14") (term "1") (inst "#v0=x_1") (inst "#v1=x_2"))
      (rule "variableDeclarationAssign" (formula "14") (term "1"))
      (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_1"))
      (rule "assignment" (formula "14") (term "1"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "variableDeclarationAssign" (formula "14") (term "1"))
      (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_3"))
      (rule "assignment_read_attribute_this_final" (formula "14"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "assignmentSubtractionInt" (formula "14") (term "1"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "translateJavaSubInt" (formula "14") (term "0,1,0"))
      (rule "polySimp_elimSub" (formula "14") (term "0,1,0"))
      (rule "blockEmpty" (formula "14") (term "1"))
      (rule "methodCallReturn" (formula "14") (term "1"))
      (rule "assignment" (formula "14") (term "1"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "methodCallEmpty" (formula "14") (term "1"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "emptyModality" (formula "14") (term "1"))
      (rule "Query_axiom_for_classify_int__in_de_wiesler_Classifier" (formula "16") (term "0") (inst "#res=x") (inst "#self=c") (inst "#p0=x_1") (inst "classify_sk=classify_sk_1") (ifseqformula "4") (userinteraction))
       (builtin "One Step Simplification" (formula "1"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "notRight" (formula "15"))
      (rule "eqSymm" (formula "2") (term "0,1"))
      (rule "boxToDiamond" (formula "2") (term "1"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "notLeft" (formula "2"))
      (rule "methodBodyExpand" (formula "14") (term "1") (newnames "heapBefore_classify_1,savedHeapBefore_classify_0"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "variableDeclarationAssign" (formula "14") (term "1"))
      (rule "variableDeclaration" (formula "14") (term "1") (newnames "index_2"))
      (rule "methodCallWithAssignmentUnfoldTarget" (formula "14") (term "1") (inst "#v0=t"))
      (rule "variableDeclaration" (formula "14") (term "1") (newnames "t_1"))
      (rule "assignment_read_attribute_this_final" (formula "14"))
       (builtin "One Step Simplification" (formula "14"))
       (builtin "Use Operation Contract" (formula "14") (newnames "heapBefore_classify_2,result_242,exc_286") (contract "de.wiesler.Tree[de.wiesler.Tree::classify(int)].JML normal_behavior operation contract.0"))
      (branch "Post (classify)"
          (builtin "One Step Simplification" (formula "14"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "translateJavaMulInt" (formula "14") (term "1,1,0,0,1"))
         (rule "translateJavaSubInt" (formula "14") (term "3,0,0,1,0,1"))
         (rule "andLeft" (formula "14"))
         (rule "andLeft" (formula "14"))
         (rule "andLeft" (formula "16"))
         (rule "andLeft" (formula "16"))
         (rule "andLeft" (formula "16"))
         (rule "andLeft" (formula "18"))
         (rule "eqSymm" (formula "15"))
         (rule "polySimp_elimSub" (formula "18") (term "3,0"))
         (rule "polySimp_mulComm0" (formula "17") (term "1"))
         (rule "assignment" (formula "20") (term "1"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "variableDeclaration" (formula "20") (term "1") (newnames "bucket_1"))
         (rule "ifElseUnfold" (formula "20") (term "1") (inst "#boolv=x_2"))
         (rule "variableDeclaration" (formula "20") (term "1") (newnames "x_4"))
         (rule "assignment_read_attribute_this_final" (formula "20"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "apply_eq_boolean" (formula "20") (term "0,1,0") (ifseqformula "21"))
         (rule "ifElseSplit" (formula "20"))
         (branch "if x_4 true"
             (builtin "One Step Simplification" (formula "21"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "if x_4 false"
             (builtin "One Step Simplification" (formula "21"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "compound_subtraction_2" (formula "20") (term "1") (inst "#v0=x_1") (inst "#v1=x_2"))
            (rule "variableDeclarationAssign" (formula "20") (term "1"))
            (rule "variableDeclaration" (formula "20") (term "1") (newnames "x_5"))
            (rule "assignment" (formula "20") (term "1"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "variableDeclarationAssign" (formula "20") (term "1"))
            (rule "variableDeclaration" (formula "20") (term "1") (newnames "x_6"))
            (rule "assignment_read_attribute_this_final" (formula "20"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "assignmentSubtractionInt" (formula "20") (term "1"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "translateJavaSubInt" (formula "20") (term "0,1,0"))
            (rule "polySimp_elimSub" (formula "20") (term "0,1,0"))
            (rule "blockEmpty" (formula "20") (term "1"))
            (rule "methodCallReturn" (formula "20") (term "1"))
            (rule "assignment" (formula "20") (term "1"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "methodCallEmpty" (formula "20") (term "1"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "emptyModality" (formula "20") (term "1"))
             (builtin "Use Dependency Contract" (formula "15") (term "0") (ifInst ""  (formula "8") (term "0")) (contract "de.wiesler.Tree[de.wiesler.Tree::classify(int)].JML accessible clause.0") (userinteraction))
             (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "2")) (ifInst ""  (formula "12")))
             (builtin "One Step Simplification" (formula "21"))
            (rule "wellFormedAnon" (formula "20") (term "1,0,0"))
            (rule "notRight" (formula "21"))
            (rule "replace_known_left" (formula "21") (term "1,1,0,0") (ifseqformula "4"))
             (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "3")))
            (rule "polySimp_homoEq" (formula "2"))
            (rule "polySimp_homoEq" (formula "1"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
            (rule "polySimp_rightDist" (formula "2") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0"))
            (rule "polySimp_elimOne" (formula "2") (term "1,1,0"))
            (rule "polySimp_mulComm0" (formula "2") (term "0,1,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0"))
            (rule "disjointDefinition" (formula "21") (term "1,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "18"))
            (rule "polySimp_mulAssoc" (formula "18") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "18") (term "0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "18") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "18") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "11"))
            (rule "polySimp_mulAssoc" (formula "11") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "11") (term "0"))
            (rule "applyEq" (formula "21") (term "0,1") (ifseqformula "16"))
            (rule "eqSymm" (formula "21") (term "1"))
            (rule "applyEq" (formula "21") (term "0,1") (ifseqformula "9"))
            (rule "eqSymm" (formula "21") (term "1"))
            (rule "polySimp_sepPosMonomial" (formula "2"))
            (rule "polySimp_mulComm0" (formula "2") (term "1"))
            (rule "polySimp_rightDist" (formula "2") (term "1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
            (rule "polySimp_elimOne" (formula "2") (term "1,1"))
            (rule "polySimp_mulComm0" (formula "2") (term "0,1"))
            (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "2"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
            (rule "polySimp_addComm0" (formula "1") (term "0,0,0"))
            (rule "polySimp_sepNegMonomial" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "applyEq" (formula "21") (term "0,1") (ifseqformula "1"))
            (rule "polySimp_homoEq" (formula "21") (term "1"))
            (rule "polySimp_mulComm0" (formula "21") (term "1,0,1"))
            (rule "polySimp_rightDist" (formula "21") (term "1,0,1"))
            (rule "polySimp_rightDist" (formula "21") (term "0,1,0,1"))
            (rule "polySimp_mulAssoc" (formula "21") (term "0,0,1,0,1"))
            (rule "polySimp_mulComm0" (formula "21") (term "0,0,0,1,0,1"))
            (rule "polySimp_mulLiterals" (formula "21") (term "0,0,1,0,1"))
            (rule "polySimp_elimOne" (formula "21") (term "0,0,1,0,1"))
            (rule "polySimp_addAssoc" (formula "21") (term "0,1"))
            (rule "polySimp_addComm0" (formula "21") (term "0,0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,1"))
            (rule "add_literals" (formula "21") (term "1,1,0,1"))
            (rule "times_zero_1" (formula "21") (term "1,0,1"))
            (rule "add_zero_right" (formula "21") (term "0,1"))
            (rule "applyEq" (formula "17") (term "1") (ifseqformula "1"))
            (rule "applyEq" (formula "16") (term "1") (ifseqformula "1"))
            (rule "applyEq" (formula "18") (term "1,0,0") (ifseqformula "1"))
            (rule "polySimp_addAssoc" (formula "18") (term "0,0"))
            (rule "polySimp_addAssoc" (formula "18") (term "0,0,0"))
            (rule "applyEq" (formula "19") (term "0,3,0") (ifseqformula "1"))
            (rule "polySimp_sepNegMonomial" (formula "21") (term "1"))
            (rule "polySimp_mulLiterals" (formula "21") (term "0,1"))
            (rule "polySimp_elimOne" (formula "21") (term "0,1"))
            (rule "replace_known_right" (formula "21") (term "1") (ifseqformula "24"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "notLeft" (formula "21"))
            (rule "inEqSimp_sepNegMonomial0" (formula "11"))
            (rule "polySimp_mulLiterals" (formula "11") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "18"))
            (rule "polySimp_mulLiterals" (formula "18") (term "0"))
            (rule "distributeIntersection" (formula "21") (term "0,1"))
            (rule "unionEqualsEmpty" (formula "21") (term "1"))
            (rule "inEqSimp_exactShadow1" (formula "11") (ifseqformula "10"))
            (rule "greater_literals" (formula "11") (term "0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
            (rule "polySimp_rightDist" (formula "11") (term "0,0"))
            (rule "mul_literals" (formula "11") (term "0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "11") (term "0"))
            (rule "add_literals" (formula "11") (term "1,1,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "11"))
            (rule "mul_literals" (formula "11") (term "1"))
            (rule "inEqSimp_exactShadow1" (formula "12") (ifseqformula "18"))
            (rule "greater_literals" (formula "12") (term "0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "polySimp_rightDist" (formula "12") (term "0,0"))
            (rule "mul_literals" (formula "12") (term "0,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0"))
            (rule "polySimp_addComm1" (formula "12") (term "0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "12") (term "0"))
            (rule "add_literals" (formula "12") (term "1,1,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12"))
            (rule "polySimp_mulComm0" (formula "12") (term "1"))
            (rule "polySimp_rightDist" (formula "12") (term "1"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
            (rule "polySimp_rightDist" (formula "12") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1"))
            (rule "mul_literals" (formula "12") (term "0,0,1"))
            (rule "inEqSimp_exactShadow1" (formula "20") (ifseqformula "10"))
            (rule "greater_literals" (formula "20") (term "0"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
            (rule "polySimp_rightDist" (formula "20") (term "0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "20") (term "0"))
            (rule "add_literals" (formula "20") (term "1,1,0"))
            (rule "polySimp_elimOne" (formula "20") (term "1,0"))
            (rule "polySimp_rightDist" (formula "20") (term "0,0"))
            (rule "polySimp_rightDist" (formula "20") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "20") (term "1,0,0,0"))
            (rule "mul_literals" (formula "20") (term "0,0,0,0"))
            (rule "polySimp_elimOne" (formula "20") (term "1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "20"))
            (rule "polySimp_mulComm0" (formula "20") (term "1"))
            (rule "polySimp_rightDist" (formula "20") (term "1"))
            (rule "polySimp_mulLiterals" (formula "20") (term "1,1"))
            (rule "polySimp_elimOne" (formula "20") (term "1,1"))
            (rule "polySimp_rightDist" (formula "20") (term "0,1"))
            (rule "mul_literals" (formula "20") (term "0,0,1"))
            (rule "inEqSimp_exactShadow1" (formula "21") (ifseqformula "19"))
            (rule "greater_literals" (formula "21") (term "0"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "polySimp_rightDist" (formula "21") (term "0,0"))
            (rule "polySimp_rightDist" (formula "21") (term "1,0"))
            (rule "polySimp_rightDist" (formula "21") (term "0,0,0"))
            (rule "polySimp_rightDist" (formula "21") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "21") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "21") (term "0,0,1,0"))
            (rule "polySimp_rightDist" (formula "21") (term "0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "21") (term "1,0,0,0,0"))
            (rule "mul_literals" (formula "21") (term "0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "21") (term "1,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "21") (term "0"))
            (rule "polySimp_addComm1" (formula "21") (term "0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "21") (term "0"))
            (rule "add_literals" (formula "21") (term "1,1,0"))
            (rule "polySimp_elimOne" (formula "21") (term "1,0"))
            (rule "polySimp_addAssoc" (formula "21") (term "0,0"))
            (rule "polySimp_addComm1" (formula "21") (term "0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "21") (term "0,0"))
            (rule "add_literals" (formula "21") (term "1,1,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,0"))
            (rule "add_literals" (formula "21") (term "1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "21") (term "1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "21"))
            (rule "polySimp_mulComm0" (formula "21") (term "1"))
            (rule "polySimp_rightDist" (formula "21") (term "1"))
            (rule "polySimp_rightDist" (formula "21") (term "0,1"))
            (rule "mul_literals" (formula "21") (term "0,0,1"))
            (rule "polySimp_mulLiterals" (formula "21") (term "1,0,1"))
            (rule "polySimp_elimOne" (formula "21") (term "1,0,1"))
            (rule "commuteIntersection" (formula "25") (term "0,1,1"))
            (rule "commuteIntersection" (formula "25") (term "0,0,1"))
            (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "8"))
             (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "26")) (ifInst ""  (formula "15")))
            (rule "translateJavaSubInt" (formula "8") (term "0,2,0,1"))
            (rule "translateJavaSubInt" (formula "8") (term "0,2,1,1"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "9"))
            (rule "andLeft" (formula "8"))
            (rule "notLeft" (formula "8"))
            (rule "notLeft" (formula "8"))
            (rule "eqSymm" (formula "13"))
            (rule "eqSymm" (formula "10"))
            (rule "replace_known_right" (formula "32") (term "0,0,0") (ifseqformula "31"))
             (builtin "One Step Simplification" (formula "32"))
            (rule "polySimp_elimSub" (formula "13") (term "0,2,1"))
            (rule "mul_literals" (formula "13") (term "1,0,2,1"))
            (rule "polySimp_elimSub" (formula "13") (term "0,2,0"))
            (rule "mul_literals" (formula "13") (term "1,0,2,0"))
            (rule "polySimp_addComm0" (formula "13") (term "0,2,1"))
            (rule "polySimp_addComm0" (formula "13") (term "0,2,0"))
            (rule "inEqSimp_commuteLeq" (formula "8"))
            (rule "applyEq" (formula "32") (term "0,0,0,1,1") (ifseqformula "11"))
            (rule "applyEq" (formula "9") (term "0") (ifseqformula "2"))
            (rule "inEqSimp_homoInEq0" (formula "9"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,0"))
            (rule "polySimp_mulAssoc" (formula "9") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0"))
            (rule "polySimp_elimOne" (formula "9") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "9") (term "0"))
            (rule "applyEq" (formula "15") (term "0") (ifseqformula "10"))
            (rule "applyEq" (formula "28") (term "0,1,3,0") (ifseqformula "10"))
            (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "10"))
            (rule "applyEq" (formula "12") (term "3,0") (ifseqformula "10"))
            (rule "applyEq" (formula "13") (term "1,0,2,0") (ifseqformula "10"))
            (rule "eqSymm" (formula "13"))
            (rule "applyEq" (formula "27") (term "0,0") (ifseqformula "10"))
            (rule "applyEq" (formula "24") (term "0") (ifseqformula "10"))
            (rule "applyEq" (formula "8") (term "0") (ifseqformula "2"))
            (rule "inEqSimp_homoInEq1" (formula "8"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
            (rule "polySimp_rightDist" (formula "8") (term "1,0"))
            (rule "polySimp_mulAssoc" (formula "8") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "0,1,0"))
            (rule "polySimp_elimOne" (formula "8") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "8") (term "0"))
            (rule "applyEq" (formula "19") (term "0,1,3,0") (ifseqformula "10"))
            (rule "applyEq" (formula "10") (term "1") (ifseqformula "2"))
            (rule "applyEq" (formula "13") (term "1,0,2,0") (ifseqformula "10"))
            (rule "eqSymm" (formula "13"))
            (rule "polySimp_addAssoc" (formula "13") (term "0,2,1"))
            (rule "applyEq" (formula "24") (term "0") (ifseqformula "2"))
            (rule "inEqSimp_homoInEq0" (formula "24"))
            (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
            (rule "polySimp_rightDist" (formula "24") (term "1,0"))
            (rule "polySimp_mulAssoc" (formula "24") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "24") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "24") (term "0,1,0"))
            (rule "polySimp_elimOne" (formula "24") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "24") (term "0"))
            (rule "polySimp_addComm1" (formula "24") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "24") (term "0"))
            (rule "add_literals" (formula "24") (term "1,1,0"))
            (rule "times_zero_1" (formula "24") (term "1,0"))
            (rule "add_zero_right" (formula "24") (term "0"))
            (rule "polySimp_addComm1" (formula "24") (term "0"))
            (rule "polySimp_pullOutFactor2" (formula "24") (term "0,0"))
            (rule "add_literals" (formula "24") (term "1,0,0"))
            (rule "times_zero_1" (formula "24") (term "0,0"))
            (rule "add_zero_left" (formula "24") (term "0"))
            (rule "applyEq" (formula "19") (term "0,1,3,0") (ifseqformula "2"))
            (rule "polySimp_mulComm0" (formula "19") (term "1,3,0"))
            (rule "polySimp_rightDist" (formula "19") (term "1,3,0"))
            (rule "polySimp_mulAssoc" (formula "19") (term "0,1,3,0"))
            (rule "polySimp_mulComm0" (formula "19") (term "0,0,1,3,0"))
            (rule "polySimp_mulLiterals" (formula "19") (term "0,1,3,0"))
            (rule "polySimp_elimOne" (formula "19") (term "0,1,3,0"))
            (rule "polySimp_addAssoc" (formula "19") (term "3,0"))
            (rule "polySimp_addComm0" (formula "19") (term "0,3,0"))
            (rule "polySimp_pullOutFactor1b" (formula "19") (term "3,0"))
            (rule "add_literals" (formula "19") (term "1,1,3,0"))
            (rule "times_zero_1" (formula "19") (term "1,3,0"))
            (rule "add_zero_right" (formula "19") (term "3,0"))
            (rule "applyEq" (formula "28") (term "0,1,3,0") (ifseqformula "2"))
            (rule "polySimp_mulComm0" (formula "28") (term "1,3,0"))
            (rule "polySimp_rightDist" (formula "28") (term "1,3,0"))
            (rule "polySimp_mulAssoc" (formula "28") (term "0,1,3,0"))
            (rule "polySimp_mulComm0" (formula "28") (term "0,0,1,3,0"))
            (rule "polySimp_mulLiterals" (formula "28") (term "0,1,3,0"))
            (rule "polySimp_elimOne" (formula "28") (term "0,1,3,0"))
            (rule "polySimp_addAssoc" (formula "28") (term "3,0"))
            (rule "polySimp_addComm1" (formula "28") (term "0,3,0"))
            (rule "polySimp_pullOutFactor1b" (formula "28") (term "3,0"))
            (rule "add_literals" (formula "28") (term "1,1,3,0"))
            (rule "times_zero_1" (formula "28") (term "1,3,0"))
            (rule "add_zero_right" (formula "28") (term "3,0"))
            (rule "polySimp_addComm1" (formula "28") (term "3,0"))
            (rule "polySimp_pullOutFactor2" (formula "28") (term "0,3,0"))
            (rule "add_literals" (formula "28") (term "1,0,3,0"))
            (rule "times_zero_1" (formula "28") (term "0,3,0"))
            (rule "add_zero_left" (formula "28") (term "3,0"))
            (rule "applyEq" (formula "27") (term "0,0") (ifseqformula "2"))
            (rule "polySimp_mulComm0" (formula "27") (term "0"))
            (rule "polySimp_rightDist" (formula "27") (term "0"))
            (rule "polySimp_mulComm0" (formula "27") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "27") (term "0,0"))
            (rule "inEqSimp_homoInEq1" (formula "27"))
            (rule "polySimp_mulComm0" (formula "27") (term "1,0"))
            (rule "polySimp_rightDist" (formula "27") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0"))
            (rule "polySimp_mulComm0" (formula "27") (term "0,1,0"))
            (rule "polySimp_mulLiterals" (formula "27") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "27") (term "0"))
            (rule "polySimp_addComm1" (formula "27") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "27") (term "0"))
            (rule "add_literals" (formula "27") (term "1,1,0"))
            (rule "polySimp_addComm1" (formula "27") (term "0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "27") (term "0,0,0"))
            (rule "add_literals" (formula "27") (term "1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "27") (term "1,0,0,0"))
            (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "2"))
            (rule "polySimp_mulComm0" (formula "18") (term "0"))
            (rule "polySimp_rightDist" (formula "18") (term "0"))
            (rule "polySimp_mulComm0" (formula "18") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "18") (term "0,0"))
            (rule "inEqSimp_homoInEq1" (formula "18"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
            (rule "polySimp_rightDist" (formula "18") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0"))
            (rule "polySimp_mulComm0" (formula "18") (term "0,1,0"))
            (rule "polySimp_mulLiterals" (formula "18") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "18") (term "0"))
            (rule "polySimp_addComm1" (formula "18") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "18") (term "0"))
            (rule "add_literals" (formula "18") (term "1,1,0"))
            (rule "applyEq" (formula "15") (term "0") (ifseqformula "2"))
            (rule "inEqSimp_homoInEq0" (formula "15"))
            (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
            (rule "polySimp_rightDist" (formula "15") (term "1,0"))
            (rule "polySimp_mulAssoc" (formula "15") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "15") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0"))
            (rule "polySimp_elimOne" (formula "15") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "15") (term "0"))
            (rule "polySimp_addComm0" (formula "15") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "15") (term "0"))
            (rule "add_literals" (formula "15") (term "1,1,0"))
            (rule "times_zero_1" (formula "15") (term "1,0"))
            (rule "add_zero_right" (formula "15") (term "0"))
            (rule "applyEq" (formula "12") (term "3,0") (ifseqformula "2"))
            (rule "applyEq" (formula "13") (term "1,0,2,0") (ifseqformula "2"))
            (rule "eqSymm" (formula "13"))
            (rule "polySimp_addAssoc" (formula "13") (term "0,2,1"))
            (rule "eqSymm" (formula "13"))
            (rule "inEqSimp_sepNegMonomial1" (formula "9"))
            (rule "polySimp_mulLiterals" (formula "9") (term "0"))
            (rule "polySimp_elimOne" (formula "9") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "8"))
            (rule "polySimp_mulLiterals" (formula "8") (term "0"))
            (rule "polySimp_elimOne" (formula "8") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "27"))
            (rule "polySimp_mulLiterals" (formula "27") (term "0"))
            (rule "polySimp_elimOne" (formula "27") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "18"))
            (rule "polySimp_mulLiterals" (formula "18") (term "0"))
            (rule "polySimp_elimOne" (formula "18") (term "0"))
            (rule "inEqSimp_exactShadow3" (formula "26") (ifseqformula "9"))
            (rule "polySimp_rightDist" (formula "26") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "26") (term "1,0,0"))
            (rule "polySimp_elimOne" (formula "26") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "26") (term "0"))
            (rule "polySimp_rightDist" (formula "26") (term "0,0,0"))
            (rule "mul_literals" (formula "26") (term "0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "26") (term "0,0"))
            (rule "polySimp_addComm1" (formula "26") (term "0,0,0"))
            (rule "add_literals" (formula "26") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor2b" (formula "26") (term "0,0"))
            (rule "add_literals" (formula "26") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "26") (term "1,0,0"))
            (rule "add_zero_right" (formula "26") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "26"))
            (rule "mul_literals" (formula "26") (term "1"))
            (rule "inEqSimp_subsumption1" (formula "26") (ifseqformula "24"))
            (rule "leq_literals" (formula "26") (term "0"))
             (builtin "One Step Simplification" (formula "26"))
            (rule "true_left" (formula "26"))
            (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "9"))
            (rule "polySimp_rightDist" (formula "17") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "17") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "17") (term "0"))
            (rule "polySimp_rightDist" (formula "17") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "17") (term "1,0,0,0"))
            (rule "mul_literals" (formula "17") (term "0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "17") (term "0,0"))
            (rule "polySimp_addComm1" (formula "17") (term "0,0,0"))
            (rule "add_literals" (formula "17") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor2b" (formula "17") (term "0,0"))
            (rule "add_literals" (formula "17") (term "1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "17"))
            (rule "polySimp_mulComm0" (formula "17") (term "1"))
            (rule "polySimp_rightDist" (formula "17") (term "1"))
            (rule "polySimp_mulLiterals" (formula "17") (term "1,1"))
            (rule "mul_literals" (formula "17") (term "0,1"))
            (rule "polySimp_elimOne" (formula "17") (term "1,1"))
            (rule "inEqSimp_exactShadow3" (formula "26") (ifseqformula "9"))
            (rule "polySimp_rightDist" (formula "26") (term "0,0"))
            (rule "polySimp_addComm1" (formula "26") (term "0"))
            (rule "polySimp_rightDist" (formula "26") (term "0,0,0"))
            (rule "mul_literals" (formula "26") (term "0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "26") (term "1,0,0,0"))
            (rule "polySimp_elimOne" (formula "26") (term "1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "26") (term "0,0"))
            (rule "polySimp_addComm1" (formula "26") (term "0,0,0"))
            (rule "add_literals" (formula "26") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor3b" (formula "26") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "26"))
            (rule "polySimp_mulLiterals" (formula "26") (term "0"))
            (rule "polySimp_elimOne" (formula "26") (term "0"))
            (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "9"))
            (rule "mul_literals" (formula "16") (term "0,0"))
            (rule "polySimp_addAssoc" (formula "16") (term "0"))
            (rule "add_literals" (formula "16") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "16"))
            (rule "mul_literals" (formula "16") (term "1"))
            (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "15"))
            (rule "leq_literals" (formula "16") (term "0"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "true_left" (formula "16"))
            (rule "inEqSimp_exactShadow3" (formula "29") (ifseqformula "9"))
            (rule "polySimp_rightDist" (formula "29") (term "0,0"))
            (rule "polySimp_addComm1" (formula "29") (term "0"))
            (rule "polySimp_rightDist" (formula "29") (term "0,0,0"))
            (rule "mul_literals" (formula "29") (term "0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "29") (term "0,0"))
            (rule "polySimp_addComm1" (formula "29") (term "0,0,0"))
            (rule "add_literals" (formula "29") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor2b" (formula "29") (term "0,0"))
            (rule "add_literals" (formula "29") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "29") (term "1,0,0"))
            (rule "add_zero_right" (formula "29") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "29"))
            (rule "polySimp_mulLiterals" (formula "29") (term "0"))
            (rule "polySimp_elimOne" (formula "29") (term "0"))
            (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "9"))
            (rule "polySimp_rightDist" (formula "19") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "19") (term "1,0,0"))
            (rule "mul_literals" (formula "19") (term "0,0,0"))
            (rule "polySimp_addAssoc" (formula "19") (term "0"))
            (rule "polySimp_addComm1" (formula "19") (term "0,0"))
            (rule "add_literals" (formula "19") (term "0,0,0"))
            (rule "polySimp_pullOutFactor2b" (formula "19") (term "0"))
            (rule "add_literals" (formula "19") (term "1,1,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "19"))
            (rule "polySimp_mulLiterals" (formula "19") (term "0"))
            (rule "polySimp_elimOne" (formula "19") (term "0"))
            (rule "inEqSimp_exactShadow3" (formula "26") (ifseqformula "27"))
            (rule "times_zero_1" (formula "26") (term "0,0"))
            (rule "add_zero_left" (formula "26") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "26"))
            (rule "mul_literals" (formula "26") (term "1"))
            (rule "inEqSimp_subsumption6" (formula "26") (ifseqformula "15"))
            (rule "greater_literals" (formula "26") (term "0,0"))
             (builtin "One Step Simplification" (formula "26"))
            (rule "mul_literals" (formula "26") (term "1,0"))
            (rule "leq_literals" (formula "26") (term "0"))
             (builtin "One Step Simplification" (formula "26"))
            (rule "true_left" (formula "26"))
            (rule "inEqSimp_exactShadow1" (formula "17") (ifseqformula "27"))
            (rule "greater_literals" (formula "17") (term "0"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "polySimp_rightDist" (formula "17") (term "1,0"))
            (rule "mul_literals" (formula "17") (term "0,1,0"))
            (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0"))
            (rule "polySimp_rightDist" (formula "17") (term "0,0"))
            (rule "mul_literals" (formula "17") (term "0,0,0"))
            (rule "polySimp_addAssoc" (formula "17") (term "0"))
            (rule "polySimp_addComm1" (formula "17") (term "0,0"))
            (rule "add_literals" (formula "17") (term "0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "17") (term "0"))
            (rule "add_literals" (formula "17") (term "1,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "17"))
            (rule "mul_literals" (formula "17") (term "1"))
            (rule "inEqSimp_subsumption6" (formula "17") (ifseqformula "15"))
            (rule "greater_literals" (formula "17") (term "0,0"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "times_zero_1" (formula "17") (term "1,0"))
            (rule "leq_literals" (formula "17") (term "0"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "true_left" (formula "17"))
            (rule "inEqSimp_exactShadow1" (formula "17") (ifseqformula "30"))
            (rule "mul_literals" (formula "17") (term "1,0,1"))
            (rule "greater_literals" (formula "17") (term "0"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "polySimp_rightDist" (formula "17") (term "0,0"))
            (rule "mul_literals" (formula "17") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "17") (term "0"))
            (rule "add_literals" (formula "17") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "17"))
            (rule "polySimp_mulLiterals" (formula "17") (term "0"))
            (rule "polySimp_elimOne" (formula "17") (term "0"))
            (rule "inEqSimp_subsumption0" (formula "17") (ifseqformula "20"))
            (rule "leq_literals" (formula "17") (term "0"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "true_left" (formula "17"))
            (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "22"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "translateJavaSubInt" (formula "22") (term "3,0,1"))
            (rule "andLeft" (formula "22"))
            (rule "andLeft" (formula "22"))
            (rule "andLeft" (formula "22"))
            (rule "andLeft" (formula "23"))
            (rule "andLeft" (formula "22"))
            (rule "andLeft" (formula "22"))
            (rule "andLeft" (formula "22"))
            (rule "andLeft" (formula "24"))
            (rule "notLeft" (formula "23"))
            (rule "notLeft" (formula "22"))
            (rule "polySimp_elimSub" (formula "28") (term "3,0"))
            (rule "mul_literals" (formula "28") (term "1,3,0"))
            (rule "polySimp_addComm0" (formula "28") (term "3,0"))
            (rule "inEqSimp_commuteLeq" (formula "27"))
            (rule "inEqSimp_commuteLeq" (formula "25"))
            (rule "inEqSimp_commuteLeq" (formula "26"))
            (rule "inEqSimp_commuteLeq" (formula "22"))
            (rule "applyEq" (formula "10") (term "0") (ifseqformula "24"))
            (rule "applyEq" (formula "27") (term "0,0") (ifseqformula "11"))
            (rule "inEqSimp_commuteGeq" (formula "27"))
            (rule "applyEq" (formula "28") (term "1,0") (ifseqformula "11"))
            (rule "applyEq" (formula "26") (term "1") (ifseqformula "24"))
            (rule "applyEq" (formula "40") (term "0") (ifseqformula "11"))
            (rule "applyEq" (formula "25") (term "0") (ifseqformula "24"))
            (rule "applyEq" (formula "28") (term "1,3,0") (ifseqformula "24"))
            (rule "applyEq" (formula "28") (term "1,3,0") (ifseqformula "10"))
            (rule "polySimp_addAssoc" (formula "28") (term "3,0"))
            (rule "applyEq" (formula "25") (term "0") (ifseqformula "10"))
            (rule "inEqSimp_homoInEq1" (formula "25"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0"))
            (rule "polySimp_rightDist" (formula "25") (term "1,0"))
            (rule "polySimp_mulAssoc" (formula "25") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "25") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "25") (term "0,1,0"))
            (rule "polySimp_elimOne" (formula "25") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "25") (term "0"))
            (rule "applyEq" (formula "27") (term "0") (ifseqformula "24"))
            (rule "applyEq" (formula "26") (term "1") (ifseqformula "10"))
            (rule "applyEq" (formula "24") (term "1") (ifseqformula "10"))
            (rule "applyEq" (formula "27") (term "0") (ifseqformula "10"))
            (rule "inEqSimp_commuteLeq" (formula "27"))
            (rule "inEqSimp_sepNegMonomial0" (formula "25"))
            (rule "polySimp_mulLiterals" (formula "25") (term "0"))
            (rule "polySimp_elimOne" (formula "25") (term "0"))
            (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "38"))
             (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "39")) (ifInst ""  (formula "23")))
            (rule "translateJavaSubInt" (formula "38") (term "3,0,1"))
            (rule "andLeft" (formula "38"))
            (rule "andLeft" (formula "38"))
            (rule "andLeft" (formula "38"))
            (rule "andLeft" (formula "39"))
            (rule "andLeft" (formula "38"))
            (rule "andLeft" (formula "38"))
            (rule "notLeft" (formula "38"))
            (rule "polySimp_elimSub" (formula "43") (term "3,0"))
            (rule "mul_literals" (formula "43") (term "1,3,0"))
            (rule "polySimp_addComm0" (formula "43") (term "3,0"))
            (rule "inEqSimp_commuteLeq" (formula "42"))
            (rule "inEqSimp_commuteLeq" (formula "40"))
            (rule "inEqSimp_commuteLeq" (formula "41"))
            (rule "inEqSimp_commuteLeq" (formula "38"))
            (rule "applyEq" (formula "42") (term "1,3,0") (ifseqformula "24"))
            (rule "polySimp_addAssoc" (formula "42") (term "3,0"))
            (rule "applyEq" (formula "40") (term "1") (ifseqformula "24"))
            (rule "applyEq" (formula "42") (term "0") (ifseqformula "11"))
            (rule "applyEq" (formula "40") (term "0,0") (ifseqformula "11"))
            (rule "inEqSimp_commuteGeq" (formula "40"))
            (rule "applyEq" (formula "39") (term "0") (ifseqformula "24"))
            (rule "inEqSimp_homoInEq1" (formula "39"))
            (rule "polySimp_mulComm0" (formula "39") (term "1,0"))
            (rule "polySimp_rightDist" (formula "39") (term "1,0"))
            (rule "polySimp_mulAssoc" (formula "39") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "39") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "39") (term "0,1,0"))
            (rule "polySimp_elimOne" (formula "39") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "39") (term "0"))
            (rule "applyEq" (formula "38") (term "0") (ifseqformula "24"))
            (rule "eqSymm" (formula "38"))
            (rule "applyEq" (formula "40") (term "1,0") (ifseqformula "11"))
            (rule "applyEq" (formula "39") (term "0") (ifseqformula "24"))
            (rule "inEqSimp_commuteLeq" (formula "39"))
            (rule "inEqSimp_sepNegMonomial0" (formula "38"))
            (rule "polySimp_mulLiterals" (formula "38") (term "0"))
            (rule "polySimp_elimOne" (formula "38") (term "0"))
            (rule "commute_and" (formula "42"))
            (rule "Definition_axiom_for_isClassifiedAs_in_de_wiesler_Tree" (formula "21") (term "0"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "translateJavaSubInt" (formula "21") (term "1,0,1"))
            (rule "translateJavaSubInt" (formula "21") (term "0,2,0,1,0"))
            (rule "andLeft" (formula "21"))
            (rule "polySimp_elimSub" (formula "21") (term "0,2,0,1"))
            (rule "mul_literals" (formula "21") (term "1,0,2,0,1"))
            (rule "polySimp_elimSub" (formula "22") (term "1,0"))
            (rule "mul_literals" (formula "22") (term "1,1,0"))
            (rule "polySimp_addComm0" (formula "21") (term "0,2,0,1"))
            (rule "polySimp_addComm0" (formula "22") (term "1,0"))
            (rule "inEqSimp_ltToLeq" (formula "21") (term "0"))
            (rule "add_zero_right" (formula "21") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "21") (term "1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "21") (term "1"))
            (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "22") (term "0"))
            (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0"))
            (rule "mul_literals" (formula "22") (term "0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "22") (term "0,0,0"))
            (rule "add_literals" (formula "22") (term "0,0,0,0"))
            (rule "polySimp_addComm1" (formula "22") (term "0,0"))
            (rule "inEqSimp_commuteLeq" (formula "22") (term "1"))
            (rule "applyEq" (formula "22") (term "0,1,0,0") (ifseqformula "25"))
            (rule "polySimp_mulComm0" (formula "22") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "22") (term "1,0,0"))
            (rule "polySimp_mulAssoc" (formula "22") (term "0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "22") (term "0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "22") (term "0,1,0,0"))
            (rule "polySimp_elimOne" (formula "22") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "22") (term "0,0"))
            (rule "polySimp_pullOutFactor3b" (formula "22") (term "0,0,0"))
            (rule "applyEq" (formula "22") (term "1,0,1") (ifseqformula "11"))
            (rule "applyEq" (formula "21") (term "1,1,0,1") (ifseqformula "11"))
            (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "0"))
            (rule "polySimp_mulLiterals" (formula "21") (term "0,0"))
            (rule "polySimp_elimOne" (formula "21") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0"))
            (rule "polySimp_mulLiterals" (formula "22") (term "0,0"))
            (rule "polySimp_elimOne" (formula "22") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1"))
            (rule "polySimp_mulComm0" (formula "21") (term "1,1"))
            (rule "polySimp_rightDist" (formula "21") (term "1,1"))
            (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1"))
            (rule "mul_literals" (formula "21") (term "0,1,1"))
            (rule "polySimp_elimOne" (formula "21") (term "1,1,1"))
            (rule "Definition_axiom_for_isClassifiedAs_in_de_wiesler_Tree" (formula "38") (term "0"))
             (builtin "One Step Simplification" (formula "38"))
            (rule "translateJavaSubInt" (formula "38") (term "0,2,0,1,0"))
            (rule "translateJavaSubInt" (formula "38") (term "1,0,1"))
            (rule "andLeft" (formula "38"))
            (rule "polySimp_elimSub" (formula "39") (term "1,0"))
            (rule "mul_literals" (formula "39") (term "1,1,0"))
            (rule "polySimp_elimSub" (formula "38") (term "0,2,0,1"))
            (rule "mul_literals" (formula "38") (term "1,0,2,0,1"))
            (rule "polySimp_addComm0" (formula "39") (term "1,0"))
            (rule "polySimp_addComm0" (formula "38") (term "0,2,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "38") (term "0"))
            (rule "add_zero_right" (formula "38") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "38") (term "1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "39") (term "0"))
            (rule "polySimp_rightDist" (formula "39") (term "1,0,0,0"))
            (rule "mul_literals" (formula "39") (term "0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "39") (term "0,0,0"))
            (rule "add_literals" (formula "39") (term "0,0,0,0"))
            (rule "polySimp_addComm1" (formula "39") (term "0,0"))
            (rule "inEqSimp_ltToLeq" (formula "38") (term "1"))
            (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "39") (term "1"))
            (rule "applyEq" (formula "39") (term "0,1,0,0") (ifseqformula "25"))
            (rule "polySimp_mulComm0" (formula "39") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "39") (term "1,0,0"))
            (rule "polySimp_mulAssoc" (formula "39") (term "0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "39") (term "0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "39") (term "0,1,0,0"))
            (rule "polySimp_elimOne" (formula "39") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "39") (term "0,0"))
            (rule "polySimp_addComm1" (formula "39") (term "0,0,0"))
            (rule "applyEq" (formula "38") (term "1,1,0,1") (ifseqformula "11"))
            (rule "applyEq" (formula "39") (term "1,0,1") (ifseqformula "11"))
            (rule "inEqSimp_sepNegMonomial0" (formula "38") (term "0"))
            (rule "polySimp_mulLiterals" (formula "38") (term "0,0"))
            (rule "polySimp_elimOne" (formula "38") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "39") (term "0"))
            (rule "polySimp_mulLiterals" (formula "39") (term "0,0"))
            (rule "polySimp_elimOne" (formula "39") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1"))
            (rule "polySimp_mulComm0" (formula "38") (term "1,1"))
            (rule "polySimp_rightDist" (formula "38") (term "1,1"))
            (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1"))
            (rule "mul_literals" (formula "38") (term "0,1,1"))
            (rule "polySimp_elimOne" (formula "38") (term "1,1,1"))
            (rule "pullOutSelect" (formula "39") (term "0,1") (inst "selectSK=arr_0"))
            (rule "simplifySelectOfAnon" (formula "39"))
             (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "43")))
            (rule "inEqSimp_commuteGeq" (formula "40") (term "1"))
            (rule "elementOfSetMinus" (formula "39") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "39"))
            (rule "elementOfUnion" (formula "39") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "39"))
            (rule "ifthenelse_negated" (formula "39") (term "0"))
            (rule "pullOutSelect" (formula "38") (term "0,1") (inst "selectSK=arr_1"))
            (rule "simplifySelectOfAnon" (formula "38"))
             (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "44")))
            (rule "inEqSimp_homoInEq0" (formula "39") (term "1"))
            (rule "polySimp_addComm1" (formula "39") (term "0,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "1"))
            (rule "polySimp_mulComm0" (formula "39") (term "1,1"))
            (rule "polySimp_rightDist" (formula "39") (term "1,1"))
            (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1"))
            (rule "mul_literals" (formula "39") (term "0,1,1"))
            (rule "polySimp_elimOne" (formula "39") (term "1,1,1"))
            (rule "elementOfSetMinus" (formula "38") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "38"))
            (rule "elementOfUnion" (formula "38") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "38"))
            (rule "ifthenelse_negated" (formula "38") (term "0"))
            (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "12") (term "0") (inst "j=j") (inst "i=i"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,1,0"))
            (rule "polySimp_mulAssoc" (formula "12") (term "0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "0,0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "12") (term "0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
            (rule "polySimp_mulAssoc" (formula "12") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "0,0,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "0,1,1,0,0,1,0"))
            (rule "mul_literals" (formula "12") (term "0,0,1,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "0,1,1,0,0"))
            (rule "mul_literals" (formula "12") (term "0,0,1,1,0,0"))
            (rule "nnf_imp2or" (formula "12") (term "0"))
            (rule "nnf_notAnd" (formula "12") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "0,1,0,0,1,0,0"))
            (rule "mul_literals" (formula "12") (term "0,0,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,1,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "12") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "0,1,1,0,0"))
            (rule "nnf_imp2or" (formula "12") (term "0,1,0"))
            (rule "nnf_notAnd" (formula "12") (term "0,0,1,0"))
            (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "0,1,0,0,1,0,0,1,0"))
            (rule "mul_literals" (formula "12") (term "0,0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,1,0,0,1,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,0,1,0,0,1,0"))
            (rule "add_zero_left" (formula "12") (term "0,0,0,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "0,1,1,0,0,1,0"))
            (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,1,0"))
            (rule "mul_literals" (formula "12") (term "0,1,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,1,0"))
            (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "28") (term "0"))
            (rule "replace_known_left" (formula "28") (term "1,0") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "45")) (ifInst ""  (formula "29")))
            (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "29") (term "0") (inst "j=j") (inst "i=i"))
             (builtin "One Step Simplification" (formula "29"))
            (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "29") (term "0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1,0,0,1,0,0,1,0"))
            (rule "mul_literals" (formula "29") (term "0,0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "29") (term "1,0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "29") (term "0,0,0,1,0,0,1,0"))
            (rule "add_literals" (formula "29") (term "0,0,0,0,1,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "29") (term "0,1,0,0,1,0,0"))
            (rule "mul_literals" (formula "29") (term "0,0,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "29") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "29") (term "0,0,0,1,0,0"))
            (rule "add_literals" (formula "29") (term "0,0,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "29") (term "1,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "29") (term "0,1,1,0,0,1,0"))
            (rule "mul_literals" (formula "29") (term "0,0,1,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0"))
            (rule "polySimp_rightDist" (formula "29") (term "0,1,1,0,0"))
            (rule "mul_literals" (formula "29") (term "0,0,1,1,0,0"))
            (rule "nnf_imp2or" (formula "29") (term "0"))
            (rule "nnf_notAnd" (formula "29") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "29") (term "0,1,0,0,1,0,0"))
            (rule "mul_literals" (formula "29") (term "0,0,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "29") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "29") (term "0,0,0,1,0,0"))
            (rule "add_literals" (formula "29") (term "0,0,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0"))
            (rule "polySimp_rightDist" (formula "29") (term "0,1,1,0,0"))
            (rule "mul_literals" (formula "29") (term "0,0,1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0"))
            (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "29") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0"))
            (rule "mul_literals" (formula "29") (term "1,0,0,0"))
            (rule "nnf_imp2or" (formula "29") (term "0,1,0"))
            (rule "nnf_notAnd" (formula "29") (term "0,0,1,0"))
            (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "29") (term "1,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0,1,0"))
            (rule "mul_literals" (formula "29") (term "0,1,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0,1,0"))
            (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "29") (term "0,1,0,0,1,0,0,1,0"))
            (rule "mul_literals" (formula "29") (term "0,0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "29") (term "1,0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "29") (term "0,0,0,1,0,0,1,0"))
            (rule "add_literals" (formula "29") (term "0,0,0,0,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "29") (term "0,1,1,0,0,1,0"))
            (rule "mul_literals" (formula "29") (term "0,0,1,1,0,0,1,0"))
            (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "43") (term "0") (inst "j=j") (inst "i=i"))
             (builtin "One Step Simplification" (formula "43"))
            (rule "inEqSimp_ltToLeq" (formula "43") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "43") (term "1,0,0,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "43") (term "0,1,0,0,1,0,0,1,0"))
            (rule "mul_literals" (formula "43") (term "0,0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "43") (term "1,0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "43") (term "1,0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "43") (term "0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "43") (term "0,0,0,1,0,0,1,0"))
            (rule "add_literals" (formula "43") (term "0,0,0,0,1,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "43") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "43") (term "1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "43") (term "0,1,0,0,1,0,0"))
            (rule "mul_literals" (formula "43") (term "0,0,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "43") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "43") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "43") (term "0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "43") (term "0,0,0,1,0,0"))
            (rule "add_literals" (formula "43") (term "0,0,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "43") (term "0,0,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "43") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "43") (term "1,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "43") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "43") (term "1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "43") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "43") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "43") (term "0,1,1,0,0,1,0"))
            (rule "mul_literals" (formula "43") (term "0,0,1,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "43") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "43") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "43") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "43") (term "1,1,1,0,0"))
            (rule "polySimp_rightDist" (formula "43") (term "0,1,1,0,0"))
            (rule "mul_literals" (formula "43") (term "0,0,1,1,0,0"))
            (rule "nnf_imp2or" (formula "43") (term "0"))
            (rule "nnf_notAnd" (formula "43") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "43") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "43") (term "1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "43") (term "0,1,0,0,1,0,0"))
            (rule "mul_literals" (formula "43") (term "0,0,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "43") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "43") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "43") (term "0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "43") (term "0,0,0,1,0,0"))
            (rule "add_literals" (formula "43") (term "0,0,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "43") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "43") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "43") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "43") (term "1,1,1,0,0"))
            (rule "polySimp_rightDist" (formula "43") (term "0,1,1,0,0"))
            (rule "mul_literals" (formula "43") (term "0,0,1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "43") (term "0,0,0"))
            (rule "times_zero_1" (formula "43") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "43") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "0,0,0"))
            (rule "mul_literals" (formula "43") (term "1,0,0,0"))
            (rule "nnf_imp2or" (formula "43") (term "0,1,0"))
            (rule "nnf_notAnd" (formula "43") (term "0,0,1,0"))
            (rule "inEqSimp_notGeq" (formula "43") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "43") (term "1,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "43") (term "1,1,0,0,0,1,0"))
            (rule "mul_literals" (formula "43") (term "0,1,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "43") (term "1,1,0,0,0,1,0"))
            (rule "inEqSimp_notLeq" (formula "43") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "43") (term "1,0,0,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "43") (term "0,1,0,0,1,0,0,1,0"))
            (rule "mul_literals" (formula "43") (term "0,0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "43") (term "1,0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "43") (term "1,0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "43") (term "0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "43") (term "0,0,0,1,0,0,1,0"))
            (rule "add_literals" (formula "43") (term "0,0,0,0,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "43") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "43") (term "1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "43") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "43") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "43") (term "0,1,1,0,0,1,0"))
            (rule "mul_literals" (formula "43") (term "0,0,1,1,0,0,1,0"))
            (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "28") (term "0") (inst "i=i"))
             (builtin "One Step Simplification" (formula "28"))
            (rule "translateJavaAddInt" (formula "28") (term "0,2,1,1,0"))
            (rule "translateJavaSubInt" (formula "28") (term "1,1,0,0"))
            (rule "polySimp_elimSub" (formula "28") (term "1,1,0,0"))
            (rule "mul_literals" (formula "28") (term "1,1,1,0,0"))
            (rule "polySimp_addComm0" (formula "28") (term "0,2,1,1,0"))
            (rule "polySimp_addComm1" (formula "28") (term "1,1,0,0"))
            (rule "polySimp_addComm1" (formula "28") (term "0,1,1,0,0"))
            (rule "add_literals" (formula "28") (term "0,0,1,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "28") (term "0,1,0,0,1,0,0"))
            (rule "mul_literals" (formula "28") (term "0,0,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "28") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "28") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "28") (term "0,0,0,1,0,0"))
            (rule "add_literals" (formula "28") (term "0,0,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "28") (term "1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0"))
            (rule "polySimp_rightDist" (formula "28") (term "0,1,1,0,0"))
            (rule "mul_literals" (formula "28") (term "0,0,1,1,0,0"))
            (rule "nnf_imp2or" (formula "28") (term "0"))
            (rule "nnf_notAnd" (formula "28") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "28") (term "0,1,0,0,1,0,0"))
            (rule "mul_literals" (formula "28") (term "0,0,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "28") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "28") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "28") (term "0,0,0,1,0,0"))
            (rule "add_literals" (formula "28") (term "0,0,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0"))
            (rule "polySimp_rightDist" (formula "28") (term "0,1,1,0,0"))
            (rule "mul_literals" (formula "28") (term "0,0,1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0"))
            (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "28") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
            (rule "mul_literals" (formula "28") (term "1,0,0,0"))
            (rule "commute_and" (formula "47") (term "0"))
            (rule "commute_or" (formula "12") (term "0,0,1,0"))
            (rule "commute_or" (formula "29") (term "0,0,1,0"))
            (rule "ifthenelse_split" (formula "39") (term "0"))
            (branch "self.sorted_splitters.<created> = TRUE TRUE"
               (rule "applyEqReverse" (formula "41") (term "1,1,1") (ifseqformula "40"))
               (rule "hideAuxiliaryEq" (formula "40"))
               (rule "replace_known_left" (formula "41") (term "0,0") (ifseqformula "39"))
                (builtin "One Step Simplification" (formula "41"))
               (rule "applyEqReverse" (formula "42") (term "1,1") (ifseqformula "41"))
               (rule "hideAuxiliaryEq" (formula "41"))
               (rule "inEqSimp_commuteLeq" (formula "41") (term "1"))
               (rule "inEqSimp_homoInEq1" (formula "40") (term "1"))
               (rule "polySimp_addComm1" (formula "40") (term "0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "1"))
               (rule "polySimp_mulComm0" (formula "40") (term "1,1"))
               (rule "polySimp_rightDist" (formula "40") (term "1,1"))
               (rule "mul_literals" (formula "40") (term "0,1,1"))
               (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1"))
               (rule "polySimp_elimOne" (formula "40") (term "1,1,1"))
               (rule "commute_or" (formula "42") (term "0,0,1,0"))
               (rule "cut_direct" (formula "21") (term "0"))
               (branch "CUT: classify_sk_0 >= 1 TRUE"
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "21"))
                  (rule "leq_literals" (formula "15") (term "0"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "true_left" (formula "15"))
                  (rule "arrayLengthIsAShort" (formula "26") (term "0"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "true_left" (formula "26"))
                  (rule "arrayLengthNotNegative" (formula "26") (term "0"))
                  (rule "cut_direct" (formula "42") (term "0"))
                  (branch "CUT: result_241 >= 2 + classify_sk_0 + classify_sk_1 TRUE"
                      (builtin "One Step Simplification" (formula "43"))
                     (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "42"))
                     (rule "inEqSimp_homoInEq0" (formula "39") (term "0"))
                     (rule "polySimp_mulComm0" (formula "39") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "39") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "39") (term "0,1,0,0"))
                     (rule "mul_literals" (formula "39") (term "0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "39") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "39") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0"))
                     (rule "add_literals" (formula "39") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "39") (term "1,0,0"))
                     (rule "add_zero_right" (formula "39") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "39") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "39") (term "0,0,0"))
                     (rule "add_literals" (formula "39") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0"))
                     (rule "add_literals" (formula "39") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "39") (term "1,0,0"))
                     (rule "add_zero_right" (formula "39") (term "0,0"))
                     (rule "qeq_literals" (formula "39") (term "0"))
                      (builtin "One Step Simplification" (formula "39"))
                     (rule "true_left" (formula "39"))
                     (rule "inEqSimp_exactShadow3" (formula "41") (ifseqformula "9"))
                     (rule "polySimp_rightDist" (formula "41") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "41") (term "0"))
                     (rule "polySimp_rightDist" (formula "41") (term "0,0,0"))
                     (rule "mul_literals" (formula "41") (term "0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "41") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "41") (term "0,0,0"))
                     (rule "add_literals" (formula "41") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor2b" (formula "41") (term "0,0"))
                     (rule "add_literals" (formula "41") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "41") (term "1,0,0"))
                     (rule "add_zero_right" (formula "41") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "41"))
                     (rule "polySimp_mulLiterals" (formula "41") (term "0"))
                     (rule "polySimp_elimOne" (formula "41") (term "0"))
                     (rule "inEqSimp_subsumption0" (formula "38") (ifseqformula "41"))
                     (rule "leq_literals" (formula "38") (term "0"))
                      (builtin "One Step Simplification" (formula "38"))
                     (rule "true_left" (formula "38"))
                     (rule "inEqSimp_exactShadow1" (formula "16") (ifseqformula "40"))
                     (rule "mul_literals" (formula "16") (term "1,0,1"))
                     (rule "greater_literals" (formula "16") (term "0"))
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "polySimp_rightDist" (formula "16") (term "0,0"))
                     (rule "mul_literals" (formula "16") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "16") (term "0"))
                     (rule "add_literals" (formula "16") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "16"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                     (rule "polySimp_elimOne" (formula "16") (term "0"))
                     (rule "inEqSimp_subsumption0" (formula "16") (ifseqformula "19"))
                     (rule "leq_literals" (formula "16") (term "0"))
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "true_left" (formula "16"))
                     (rule "arrayLengthIsAShort" (formula "28") (term "0"))
                      (builtin "One Step Simplification" (formula "28"))
                     (rule "true_left" (formula "28"))
                     (rule "cut_direct" (formula "47") (term "1"))
                     (branch "CUT: self.tree.<created> = TRUE TRUE"
                         (builtin "One Step Simplification" (formula "48"))
                        (rule "cut_direct" (formula "40") (term "0"))
                        (branch "CUT: classify_sk_1 >= 1 TRUE"
                            (builtin "One Step Simplification" (formula "41"))
                           (rule "inEqSimp_subsumption1" (formula "35") (ifseqformula "40"))
                           (rule "leq_literals" (formula "35") (term "0"))
                            (builtin "One Step Simplification" (formula "35"))
                           (rule "true_left" (formula "35"))
                           (rule "inEqSimp_exactShadow3" (formula "39") (ifseqformula "35"))
                           (rule "mul_literals" (formula "39") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "39") (term "0"))
                           (rule "add_literals" (formula "39") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "39"))
                           (rule "mul_literals" (formula "39") (term "1"))
                           (rule "inEqSimp_subsumption6" (formula "39") (ifseqformula "21"))
                           (rule "greater_literals" (formula "39") (term "0,0"))
                            (builtin "One Step Simplification" (formula "39"))
                           (rule "mul_literals" (formula "39") (term "1,0"))
                           (rule "leq_literals" (formula "39") (term "0"))
                            (builtin "One Step Simplification" (formula "39"))
                           (rule "true_left" (formula "39"))
                           (rule "arrayLengthNotNegative" (formula "29") (term "0"))
                           (rule "cut_direct" (formula "23") (term "1"))
                           (branch "CUT: self.sorted_splitters[classify_sk_0] >= value TRUE"
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "true_left" (formula "24"))
                              (rule "all_pull_out3" (formula "13") (term "0"))
                              (rule "shift_paren_or" (formula "13") (term "0,0"))
                              (rule "shift_paren_or" (formula "13") (term "0,0,0"))
                              (rule "all_pull_out3" (formula "32") (term "0"))
                              (rule "shift_paren_or" (formula "32") (term "0,0"))
                              (rule "shift_paren_or" (formula "32") (term "0,0,0"))
                              (rule "all_pull_out3" (formula "45") (term "0"))
                              (rule "shift_paren_or" (formula "45") (term "0,0"))
                              (rule "shift_paren_or" (formula "45") (term "0,0,0"))
                              (rule "onlyCreatedObjectsAreReferencedFinal" (formula "15") (term "1,0") (ifseqformula "4") (ifseqformula "6"))
                              (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "49"))
                               (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "1")))
                              (rule "true_left" (formula "15"))
                              (rule "onlyCreatedObjectsAreReferencedFinal" (formula "35") (term "0,0,1,1,0,0") (ifseqformula "4") (ifseqformula "6"))
                              (rule "replace_known_right" (formula "35") (term "0") (ifseqformula "48"))
                               (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "40")))
                              (rule "true_left" (formula "35"))
                              (rule "allLeft" (formula "31") (inst "t=add(Z(neglit(1(#))), classify_sk_1)"))
                              (rule "polySimp_addAssoc" (formula "31") (term "0,2,0,1"))
                              (rule "add_literals" (formula "31") (term "0,0,2,0,1"))
                              (rule "add_zero_left" (formula "31") (term "0,2,0,1"))
                              (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
                              (rule "inEqSimp_homoInEq0" (formula "31") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "31") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "31") (term "0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "31") (term "0,0,0"))
                              (rule "add_literals" (formula "31") (term "0,0,0,0"))
                              (rule "add_zero_left" (formula "31") (term "0,0,0"))
                              (rule "inEqSimp_homoInEq1" (formula "31") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "31") (term "1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "31") (term "1,0,1,0"))
                              (rule "mul_literals" (formula "31") (term "0,1,0,1,0"))
                              (rule "polySimp_addComm1" (formula "31") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0"))
                              (rule "polySimp_addComm1" (formula "31") (term "0,0,0,1,0"))
                              (rule "add_literals" (formula "31") (term "0,0,0,0,1,0"))
                              (rule "inEqSimp_invertInEq1" (formula "31") (term "0,0"))
                              (rule "times_zero_2" (formula "31") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "0,0,0"))
                              (rule "polySimp_elimOne" (formula "31") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "31") (term "1,1,0"))
                              (rule "polySimp_rightDist" (formula "31") (term "1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0"))
                              (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0"))
                              (rule "polySimp_rightDist" (formula "31") (term "0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "1,0,1,1,0"))
                              (rule "mul_literals" (formula "31") (term "0,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "31") (term "1,0,1,1,0"))
                              (rule "inEqSimp_contradInEq1" (formula "31") (term "0,0") (ifseqformula "41"))
                              (rule "qeq_literals" (formula "31") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "31"))
                              (rule "inEqSimp_contradInEq1" (formula "31") (term "0") (ifseqformula "44"))
                              (rule "inEqSimp_homoInEq1" (formula "31") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "31") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "31") (term "0,1,0,0,0"))
                              (rule "mul_literals" (formula "31") (term "0,0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "31") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "31") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,0"))
                              (rule "add_literals" (formula "31") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "31") (term "1,0,0,0"))
                              (rule "add_zero_right" (formula "31") (term "0,0,0"))
                              (rule "polySimp_addAssoc" (formula "31") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "31") (term "0,0,0,0"))
                              (rule "add_literals" (formula "31") (term "0,0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,0"))
                              (rule "add_literals" (formula "31") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "31") (term "1,0,0,0"))
                              (rule "add_zero_right" (formula "31") (term "0,0,0"))
                              (rule "leq_literals" (formula "31") (term "0,0"))
                               (builtin "One Step Simplification" (formula "31"))
                              (rule "allLeft" (formula "13") (inst "t=add(add(Z(neglit(2(#))),
        mul(classify_sk_0, Z(neglit(1(#))))),
    result_241)"))
                              (rule "polySimp_addAssoc" (formula "13") (term "1,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "13") (term "0,1,1,0,0"))
                              (rule "add_literals" (formula "13") (term "0,0,1,1,0,0"))
                              (rule "inEqSimp_homoInEq0" (formula "13") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "13") (term "0,1,0,0,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,0,0,0,0,0,0"))
                              (rule "mul_literals" (formula "13") (term "0,0,1,0,0,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "13") (term "1,0,1,0,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,0,0,0"))
                              (rule "add_literals" (formula "13") (term "0,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_homoInEq1" (formula "13") (term "1,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,0,1,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "13") (term "1,0,1,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "13") (term "0,1,0,1,0,0,0,0"))
                              (rule "mul_literals" (formula "13") (term "0,0,1,0,1,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,0,1,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "13") (term "1,0,1,0,1,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "13") (term "0,1,0,0,0,0"))
                              (rule "polySimp_addComm1" (formula "13") (term "0,0,1,0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,1,0,0,0,0"))
                              (rule "add_literals" (formula "13") (term "1,1,0,1,0,0,0,0"))
                              (rule "times_zero_1" (formula "13") (term "1,0,1,0,0,0,0"))
                              (rule "add_zero_right" (formula "13") (term "0,1,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "13") (term "0,1,0,0,0,0"))
                              (rule "polySimp_addComm0" (formula "13") (term "0,0,1,0,0,0,0"))
                              (rule "polySimp_pullOutFactor2b" (formula "13") (term "0,1,0,0,0,0"))
                              (rule "add_literals" (formula "13") (term "1,1,0,1,0,0,0,0"))
                              (rule "times_zero_1" (formula "13") (term "1,0,1,0,0,0,0"))
                              (rule "add_zero_right" (formula "13") (term "0,1,0,0,0,0"))
                              (rule "leq_literals" (formula "13") (term "1,0,0,0,0"))
                               (builtin "One Step Simplification" (formula "13"))
                              (rule "applyEq" (formula "13") (term "1,1,0") (ifseqformula "15"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "13") (term "0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "13") (term "0,0,0,0,0"))
                              (rule "inEqSimp_contradInEq1" (formula "13") (term "0,0,0,0") (ifseqformula "9"))
                              (rule "inEqSimp_homoInEq1" (formula "13") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0,0"))
                              (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,0,0"))
                              (rule "polySimp_addComm1" (formula "13") (term "0,0,0,0,0,0,0"))
                              (rule "add_literals" (formula "13") (term "0,0,0,0,0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,0,0,0,0"))
                              (rule "add_literals" (formula "13") (term "1,1,0,0,0,0,0,0"))
                              (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "13") (term "0,0,0,0,0,0"))
                              (rule "leq_literals" (formula "13") (term "0,0,0,0,0"))
                               (builtin "One Step Simplification" (formula "13"))
                              (rule "commute_or" (formula "13") (term "0,0"))
                              (rule "allLeft" (formula "14") (inst "t=classify_sk_1"))
                              (rule "inEqSimp_homoInEq1" (formula "14") (term "1,0,0,0,0"))
                              (rule "polySimp_addComm1" (formula "14") (term "0,1,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,0,0"))
                              (rule "polySimp_mulAssoc" (formula "14") (term "0,1,1,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "0,0,1,1,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "0,1,1,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "0,1,1,0,0,0,0"))
                              (rule "inEqSimp_contradInEq1" (formula "14") (term "0,0,0,0,0") (ifseqformula "43"))
                              (rule "qeq_literals" (formula "14") (term "0,0,0,0,0,0"))
                               (builtin "One Step Simplification" (formula "14"))
                              (rule "inEqSimp_contradInEq1" (formula "14") (term "0,0,0,0") (ifseqformula "46"))
                              (rule "inEqSimp_homoInEq1" (formula "14") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "0,1,0,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0,0,0"))
                              (rule "polySimp_addComm1" (formula "14") (term "0,0,0,0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,0,0,0,0"))
                              (rule "add_literals" (formula "14") (term "1,1,0,0,0,0,0,0"))
                              (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "14") (term "0,0,0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,0,0,0,0"))
                              (rule "add_literals" (formula "14") (term "1,1,0,0,0,0,0,0"))
                              (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "14") (term "0,0,0,0,0,0"))
                              (rule "leq_literals" (formula "14") (term "0,0,0,0,0"))
                               (builtin "One Step Simplification" (formula "14"))
                              (rule "commute_or" (formula "14") (term "0,0"))
                              (rule "allLeft" (formula "15") (inst "t=classify_sk_0"))
                              (rule "inEqSimp_homoInEq1" (formula "15") (term "1,0,0,0,0"))
                              (rule "polySimp_addComm1" (formula "15") (term "0,1,0,0,0,0"))
                              (rule "polySimp_pullOutFactor0" (formula "15") (term "0,0,1,0,0,0,0"))
                              (rule "add_literals" (formula "15") (term "1,0,0,1,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,0"))
                              (rule "inEqSimp_contradInEq1" (formula "15") (term "0,0,0,0,0") (ifseqformula "24"))
                              (rule "qeq_literals" (formula "15") (term "0,0,0,0,0,0"))
                               (builtin "One Step Simplification" (formula "15"))
                              (rule "inEqSimp_contradInEq1" (formula "15") (term "0,0,0,0") (ifseqformula "23"))
                              (rule "inEqSimp_homoInEq1" (formula "15") (term "0,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,0,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "15") (term "0,0,0,0,0,0"))
                              (rule "add_literals" (formula "15") (term "1,1,0,0,0,0,0,0"))
                              (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "15") (term "0,0,0,0,0,0"))
                              (rule "leq_literals" (formula "15") (term "0,0,0,0,0"))
                               (builtin "One Step Simplification" (formula "15"))
                              (rule "commute_or" (formula "15") (term "0,0"))
                              (rule "allLeft" (formula "16") (inst "t=add(Z(neglit(1(#))), classify_sk_1)"))
                              (rule "polySimp_addAssoc" (formula "16") (term "1,1,0,0"))
                              (rule "add_literals" (formula "16") (term "0,1,1,0,0"))
                              (rule "inEqSimp_homoInEq0" (formula "16") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0,0"))
                              (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,0,0,0"))
                              (rule "add_literals" (formula "16") (term "0,0,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "16") (term "0,0,0,0,0,0"))
                              (rule "inEqSimp_homoInEq1" (formula "16") (term "1,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "16") (term "1,0,1,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "16") (term "1,0,1,0,0,0,0"))
                              (rule "mul_literals" (formula "16") (term "0,1,0,1,0,0,0,0"))
                              (rule "polySimp_addComm1" (formula "16") (term "0,1,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0,0,0"))
                              (rule "polySimp_addComm0" (formula "16") (term "0,0,0,1,0,0,0,0"))
                              (rule "inEqSimp_invertInEq1" (formula "16") (term "0,0,0,0,0"))
                              (rule "times_zero_2" (formula "16") (term "1,0,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "16") (term "0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "16") (term "0,1,1,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "16") (term "1,0,1,1,0,0,0,0"))
                              (rule "mul_literals" (formula "16") (term "0,0,1,1,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "16") (term "1,0,1,1,0,0,0,0"))
                              (rule "inEqSimp_contradInEq1" (formula "16") (term "0,0,0,0,0") (ifseqformula "45"))
                              (rule "qeq_literals" (formula "16") (term "0,0,0,0,0,0"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "inEqSimp_contradInEq1" (formula "16") (term "0,0,0,0") (ifseqformula "48"))
                              (rule "inEqSimp_homoInEq1" (formula "16") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "16") (term "0,1,0,0,0,0,0,0"))
                              (rule "mul_literals" (formula "16") (term "0,0,1,0,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,0,0,0"))
                              (rule "polySimp_addComm1" (formula "16") (term "0,0,0,0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,0,0,0,0"))
                              (rule "add_literals" (formula "16") (term "1,1,0,0,0,0,0,0"))
                              (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "16") (term "0,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,0,0,0"))
                              (rule "polySimp_addComm1" (formula "16") (term "0,0,0,0,0,0,0"))
                              (rule "add_literals" (formula "16") (term "0,0,0,0,0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,0,0,0,0"))
                              (rule "add_literals" (formula "16") (term "1,1,0,0,0,0,0,0"))
                              (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "16") (term "0,0,0,0,0,0"))
                              (rule "leq_literals" (formula "16") (term "0,0,0,0,0"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "allLeft" (formula "17") (inst "t=add(Z(neglit(1(#))), classify_sk_0)"))
                              (rule "polySimp_addAssoc" (formula "17") (term "1,1,0,0"))
                              (rule "add_literals" (formula "17") (term "0,1,1,0,0"))
                              (rule "inEqSimp_homoInEq1" (formula "17") (term "1,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "17") (term "1,0,1,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "17") (term "1,0,1,0,0,0,0"))
                              (rule "mul_literals" (formula "17") (term "0,1,0,1,0,0,0,0"))
                              (rule "polySimp_addComm1" (formula "17") (term "0,1,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,0,0"))
                              (rule "polySimp_addComm0" (formula "17") (term "0,0,0,1,0,0,0,0"))
                              (rule "polySimp_pullOutFactor3b" (formula "17") (term "0,0,1,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "17") (term "1,0,0,1,0,0,0,0"))
                              (rule "inEqSimp_homoInEq0" (formula "17") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,0,0,0"))
                              (rule "mul_literals" (formula "17") (term "0,1,0,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,0,0,0"))
                              (rule "add_literals" (formula "17") (term "0,0,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "17") (term "0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,0,0"))
                              (rule "mul_literals" (formula "17") (term "0,1,1,0,0,0,0"))
                              (rule "inEqSimp_invertInEq1" (formula "17") (term "0,0,0,0,0"))
                              (rule "mul_literals" (formula "17") (term "1,0,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "17") (term "0,0,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "17") (term "0,0,0,0,0,0"))
                              (rule "inEqSimp_contradInEq1" (formula "17") (term "1,0,0,0,0") (ifseqformula "25"))
                              (rule "inEqSimp_homoInEq1" (formula "17") (term "0,1,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,1,0,0,0,0"))
                              (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,0,0"))
                              (rule "polySimp_addComm1" (formula "17") (term "0,0,0,1,0,0,0,0"))
                              (rule "add_literals" (formula "17") (term "0,0,0,0,1,0,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "17") (term "0,0,1,0,0,0,0"))
                              (rule "add_literals" (formula "17") (term "1,1,0,0,1,0,0,0,0"))
                              (rule "times_zero_1" (formula "17") (term "1,0,0,1,0,0,0,0"))
                              (rule "add_zero_right" (formula "17") (term "0,0,1,0,0,0,0"))
                              (rule "leq_literals" (formula "17") (term "0,1,0,0,0,0"))
                               (builtin "One Step Simplification" (formula "17"))
                              (rule "inEqSimp_contradInEq1" (formula "17") (term "0,0,0,0") (ifseqformula "26"))
                              (rule "qeq_literals" (formula "17") (term "0,0,0,0,0"))
                               (builtin "One Step Simplification" (formula "17"))
                              (rule "commute_or" (formula "16") (term "0,0"))
                              (rule "allLeft" (formula "38") (inst "t=add(Z(neglit(1(#))), classify_sk_1)"))
                              (rule "polySimp_addAssoc" (formula "38") (term "1,1,0,0"))
                              (rule "add_literals" (formula "38") (term "0,1,1,0,0"))
                              (rule "inEqSimp_homoInEq1" (formula "38") (term "1,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "38") (term "1,0,1,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "38") (term "1,0,1,0,0,0,0"))
                              (rule "mul_literals" (formula "38") (term "0,1,0,1,0,0,0,0"))
                              (rule "polySimp_addComm1" (formula "38") (term "0,1,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0,0,0"))
                              (rule "polySimp_addComm1" (formula "38") (term "0,0,0,1,0,0,0,0"))
                              (rule "add_literals" (formula "38") (term "0,0,0,0,1,0,0,0,0"))
                              (rule "add_zero_left" (formula "38") (term "0,0,0,1,0,0,0,0"))
                              (rule "inEqSimp_homoInEq0" (formula "38") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "38") (term "1,0,0,0,0,0,0"))
                              (rule "mul_literals" (formula "38") (term "0,1,0,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "38") (term "0,0,0,0,0,0"))
                              (rule "add_literals" (formula "38") (term "0,0,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "38") (term "0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0,0,0"))
                              (rule "polySimp_mulAssoc" (formula "38") (term "0,1,1,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "38") (term "0,0,1,1,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "38") (term "0,1,1,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "38") (term "0,1,1,0,0,0,0"))
                              (rule "inEqSimp_invertInEq1" (formula "38") (term "0,0,0,0,0"))
                              (rule "mul_literals" (formula "38") (term "1,0,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "38") (term "0,0,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "38") (term "0,0,0,0,0,0"))
                              (rule "inEqSimp_contradInEq1" (formula "38") (term "1,0,0,0,0") (ifseqformula "50"))
                              (rule "inEqSimp_homoInEq1" (formula "38") (term "0,1,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "38") (term "0,1,0,0,1,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0,0,0"))
                              (rule "polySimp_addComm1" (formula "38") (term "0,0,0,1,0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "38") (term "0,0,0,0,1,0,0,0,0"))
                              (rule "add_literals" (formula "38") (term "1,1,0,0,0,0,1,0,0,0,0"))
                              (rule "times_zero_1" (formula "38") (term "1,0,0,0,0,1,0,0,0,0"))
                              (rule "add_zero_right" (formula "38") (term "0,0,0,0,1,0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "38") (term "0,0,1,0,0,0,0"))
                              (rule "add_literals" (formula "38") (term "1,1,0,0,1,0,0,0,0"))
                              (rule "times_zero_1" (formula "38") (term "1,0,0,1,0,0,0,0"))
                              (rule "add_zero_right" (formula "38") (term "0,0,1,0,0,0,0"))
                              (rule "leq_literals" (formula "38") (term "0,1,0,0,0,0"))
                               (builtin "One Step Simplification" (formula "38"))
                              (rule "inEqSimp_contradInEq1" (formula "38") (term "0,0,0,0") (ifseqformula "47"))
                              (rule "qeq_literals" (formula "38") (term "0,0,0,0,0"))
                               (builtin "One Step Simplification" (formula "38"))
                              (rule "allLeft" (formula "39") (inst "t=add(Z(neglit(1(#))), classify_sk_0)"))
                              (rule "polySimp_addAssoc" (formula "39") (term "1,1,0,0"))
                              (rule "add_literals" (formula "39") (term "0,1,1,0,0"))
                              (rule "inEqSimp_homoInEq0" (formula "39") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "39") (term "1,0,0,0,0,0,0"))
                              (rule "mul_literals" (formula "39") (term "0,1,0,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "39") (term "0,0,0,0,0,0"))
                              (rule "add_literals" (formula "39") (term "0,0,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "39") (term "0,0,0,0,0,0"))
                              (rule "inEqSimp_homoInEq1" (formula "39") (term "1,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "39") (term "1,0,1,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "39") (term "1,0,1,0,0,0,0"))
                              (rule "mul_literals" (formula "39") (term "0,1,0,1,0,0,0,0"))
                              (rule "polySimp_addComm1" (formula "39") (term "0,1,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "39") (term "0,0,1,0,0,0,0"))
                              (rule "polySimp_addComm1" (formula "39") (term "0,0,0,1,0,0,0,0"))
                              (rule "add_literals" (formula "39") (term "0,0,0,0,1,0,0,0,0"))
                              (rule "add_zero_left" (formula "39") (term "0,0,0,1,0,0,0,0"))
                              (rule "polySimp_pullOutFactor0" (formula "39") (term "0,0,1,0,0,0,0"))
                              (rule "add_literals" (formula "39") (term "1,0,0,1,0,0,0,0"))
                              (rule "inEqSimp_invertInEq1" (formula "39") (term "0,0,0,0,0"))
                              (rule "mul_literals" (formula "39") (term "1,0,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "39") (term "0,0,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "39") (term "0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,0,0,0"))
                              (rule "inEqSimp_contradInEq1" (formula "39") (term "1,0,0,0,0") (ifseqformula "25"))
                              (rule "inEqSimp_homoInEq1" (formula "39") (term "0,1,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "39") (term "1,0,0,1,0,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "39") (term "0,0,1,0,0,0,0"))
                              (rule "add_literals" (formula "39") (term "1,1,0,0,1,0,0,0,0"))
                              (rule "times_zero_1" (formula "39") (term "1,0,0,1,0,0,0,0"))
                              (rule "add_zero_right" (formula "39") (term "0,0,1,0,0,0,0"))
                              (rule "leq_literals" (formula "39") (term "0,1,0,0,0,0"))
                               (builtin "One Step Simplification" (formula "39"))
                              (rule "inEqSimp_contradInEq1" (formula "39") (term "0,0,0,0") (ifseqformula "26"))
                              (rule "qeq_literals" (formula "39") (term "0,0,0,0,0"))
                               (builtin "One Step Simplification" (formula "39"))
                              (rule "allLeft" (formula "40") (inst "t=classify_sk_1"))
                              (rule "inEqSimp_homoInEq1" (formula "40") (term "1,0,0,0,0"))
                              (rule "polySimp_addComm1" (formula "40") (term "0,1,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "1,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "40") (term "1,1,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "40") (term "1,1,1,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "40") (term "0,1,1,0,0,0,0"))
                              (rule "mul_literals" (formula "40") (term "0,0,1,1,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "40") (term "1,0,1,1,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "40") (term "1,0,1,1,0,0,0,0"))
                              (rule "inEqSimp_contradInEq1" (formula "40") (term "0,0,0,0,0") (ifseqformula "49"))
                              (rule "qeq_literals" (formula "40") (term "0,0,0,0,0,0"))
                               (builtin "One Step Simplification" (formula "40"))
                              (rule "inEqSimp_contradInEq1" (formula "40") (term "0,0,0,0") (ifseqformula "52"))
                              (rule "inEqSimp_homoInEq1" (formula "40") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "40") (term "1,0,0,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "40") (term "0,1,0,0,0,0,0,0"))
                              (rule "mul_literals" (formula "40") (term "0,0,1,0,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "40") (term "0,0,0,0,0,0"))
                              (rule "polySimp_addComm1" (formula "40") (term "0,0,0,0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "40") (term "0,0,0,0,0,0"))
                              (rule "add_literals" (formula "40") (term "1,1,0,0,0,0,0,0"))
                              (rule "times_zero_1" (formula "40") (term "1,0,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "40") (term "0,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "40") (term "0,0,0,0,0,0"))
                              (rule "polySimp_addComm1" (formula "40") (term "0,0,0,0,0,0,0"))
                              (rule "add_literals" (formula "40") (term "0,0,0,0,0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "40") (term "0,0,0,0,0,0"))
                              (rule "add_literals" (formula "40") (term "1,1,0,0,0,0,0,0"))
                              (rule "times_zero_1" (formula "40") (term "1,0,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "40") (term "0,0,0,0,0,0"))
                              (rule "leq_literals" (formula "40") (term "0,0,0,0,0"))
                               (builtin "One Step Simplification" (formula "40"))
                              (rule "allLeft" (formula "54") (inst "t=classify_sk_1"))
                              (rule "replaceKnownSelect_taclet1010_0" (formula "54") (term "1,1,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet01010_3" (formula "54") (term "1,1,0"))
                              (rule "inEqSimp_homoInEq1" (formula "54") (term "1,0,0,0,0"))
                              (rule "polySimp_addComm1" (formula "54") (term "0,1,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "54") (term "1,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "54") (term "1,1,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "54") (term "1,1,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "54") (term "1,1,1,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "54") (term "1,1,1,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "54") (term "0,1,1,0,0,0,0"))
                              (rule "mul_literals" (formula "54") (term "0,0,1,1,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "54") (term "1,0,1,1,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "54") (term "1,0,1,1,0,0,0,0"))
                              (rule "inEqSimp_contradInEq1" (formula "54") (term "0,0,0,0,0") (ifseqformula "49"))
                              (rule "qeq_literals" (formula "54") (term "0,0,0,0,0,0"))
                               (builtin "One Step Simplification" (formula "54"))
                              (rule "inEqSimp_contradInEq1" (formula "54") (term "0,0,0,0") (ifseqformula "52"))
                              (rule "inEqSimp_homoInEq1" (formula "54") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "54") (term "1,0,0,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "54") (term "1,0,0,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "54") (term "0,1,0,0,0,0,0,0"))
                              (rule "mul_literals" (formula "54") (term "0,0,1,0,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "54") (term "0,0,0,0,0,0"))
                              (rule "polySimp_addComm1" (formula "54") (term "0,0,0,0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "54") (term "0,0,0,0,0,0"))
                              (rule "add_literals" (formula "54") (term "1,1,0,0,0,0,0,0"))
                              (rule "times_zero_1" (formula "54") (term "1,0,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "54") (term "0,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "54") (term "0,0,0,0,0,0"))
                              (rule "polySimp_addComm1" (formula "54") (term "0,0,0,0,0,0,0"))
                              (rule "add_literals" (formula "54") (term "0,0,0,0,0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "54") (term "0,0,0,0,0,0"))
                              (rule "add_literals" (formula "54") (term "1,1,0,0,0,0,0,0"))
                              (rule "times_zero_1" (formula "54") (term "1,0,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "54") (term "0,0,0,0,0,0"))
                              (rule "leq_literals" (formula "54") (term "0,0,0,0,0"))
                               (builtin "One Step Simplification" (formula "54"))
                              (rule "allLeft" (formula "55") (inst "t=add(Z(neglit(1(#))), classify_sk_1)"))
                              (rule "replaceKnownSelect_taclet1010_1" (formula "55") (term "1,1,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet01010_2" (formula "55") (term "1,1,0"))
                              (rule "polySimp_addAssoc" (formula "55") (term "1,1,0,0"))
                              (rule "add_literals" (formula "55") (term "0,1,1,0,0"))
                              (rule "inEqSimp_homoInEq0" (formula "55") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "55") (term "1,0,0,0,0,0,0"))
                              (rule "mul_literals" (formula "55") (term "0,1,0,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "55") (term "0,0,0,0,0,0"))
                              (rule "add_literals" (formula "55") (term "0,0,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "55") (term "0,0,0,0,0,0"))
                              (rule "inEqSimp_homoInEq1" (formula "55") (term "1,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "55") (term "1,0,1,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "55") (term "1,0,1,0,0,0,0"))
                              (rule "mul_literals" (formula "55") (term "0,1,0,1,0,0,0,0"))
                              (rule "polySimp_addComm1" (formula "55") (term "0,1,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "55") (term "0,0,1,0,0,0,0"))
                              (rule "polySimp_addComm1" (formula "55") (term "0,0,0,1,0,0,0,0"))
                              (rule "add_literals" (formula "55") (term "0,0,0,0,1,0,0,0,0"))
                              (rule "add_zero_left" (formula "55") (term "0,0,0,1,0,0,0,0"))
                              (rule "inEqSimp_invertInEq1" (formula "55") (term "0,0,0,0,0"))
                              (rule "mul_literals" (formula "55") (term "1,0,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "55") (term "0,0,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "55") (term "0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "55") (term "1,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "55") (term "1,1,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "55") (term "1,1,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "55") (term "1,1,1,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "55") (term "1,1,1,0,0,0,0"))
                              (rule "polySimp_mulAssoc" (formula "55") (term "0,1,1,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "55") (term "0,0,1,1,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "55") (term "0,1,1,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "55") (term "0,1,1,0,0,0,0"))
                              (rule "inEqSimp_contradInEq1" (formula "55") (term "0,0,0,0,0") (ifseqformula "49"))
                              (rule "qeq_literals" (formula "55") (term "0,0,0,0,0,0"))
                               (builtin "One Step Simplification" (formula "55"))
                              (rule "inEqSimp_contradInEq1" (formula "55") (term "0,0,0,0") (ifseqformula "52"))
                              (rule "inEqSimp_homoInEq1" (formula "55") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "55") (term "1,0,0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "55") (term "0,1,0,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "55") (term "0,0,0,0,0,0"))
                              (rule "polySimp_addComm1" (formula "55") (term "0,0,0,0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "55") (term "0,0,0,0,0,0"))
                              (rule "add_literals" (formula "55") (term "1,1,0,0,0,0,0,0"))
                              (rule "times_zero_1" (formula "55") (term "1,0,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "55") (term "0,0,0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "55") (term "0,0,0,0,0,0"))
                              (rule "add_literals" (formula "55") (term "1,1,0,0,0,0,0,0"))
                              (rule "times_zero_1" (formula "55") (term "1,0,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "55") (term "0,0,0,0,0,0"))
                              (rule "leq_literals" (formula "55") (term "0,0,0,0,0"))
                               (builtin "One Step Simplification" (formula "55"))
                              (rule "allLeft" (formula "56") (inst "t=add(Z(neglit(1(#))), classify_sk_0)"))
                              (rule "polySimp_addAssoc" (formula "56") (term "1,1,0,0"))
                              (rule "add_literals" (formula "56") (term "0,1,1,0,0"))
                              (rule "inEqSimp_homoInEq0" (formula "56") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "56") (term "1,0,0,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "56") (term "1,0,0,0,0,0,0"))
                              (rule "mul_literals" (formula "56") (term "0,1,0,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "56") (term "0,0,0,0,0,0"))
                              (rule "add_literals" (formula "56") (term "0,0,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "56") (term "0,0,0,0,0,0"))
                              (rule "inEqSimp_homoInEq1" (formula "56") (term "1,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "56") (term "1,0,1,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "56") (term "1,0,1,0,0,0,0"))
                              (rule "mul_literals" (formula "56") (term "0,1,0,1,0,0,0,0"))
                              (rule "polySimp_addComm1" (formula "56") (term "0,1,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "56") (term "0,0,1,0,0,0,0"))
                              (rule "polySimp_addComm1" (formula "56") (term "0,0,0,1,0,0,0,0"))
                              (rule "add_literals" (formula "56") (term "0,0,0,0,1,0,0,0,0"))
                              (rule "add_zero_left" (formula "56") (term "0,0,0,1,0,0,0,0"))
                              (rule "polySimp_pullOutFactor3" (formula "56") (term "0,0,1,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "56") (term "0,0,1,0,0,0,0"))
                              (rule "inEqSimp_invertInEq1" (formula "56") (term "0,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "56") (term "0,0,0,0,0,0"))
                              (rule "times_zero_2" (formula "56") (term "1,0,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "56") (term "0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "56") (term "1,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "56") (term "1,1,0,0,0,0"))
                              (rule "inEqSimp_contradInEq1" (formula "56") (term "0,0,0,0,0") (ifseqformula "26"))
                              (rule "qeq_literals" (formula "56") (term "0,0,0,0,0,0"))
                               (builtin "One Step Simplification" (formula "56"))
                              (rule "inEqSimp_contradInEq1" (formula "56") (term "0,0,0,0") (ifseqformula "25"))
                              (rule "inEqSimp_homoInEq1" (formula "56") (term "0,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "56") (term "1,0,0,0,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "56") (term "0,0,0,0,0,0"))
                              (rule "add_literals" (formula "56") (term "1,1,0,0,0,0,0,0"))
                              (rule "times_zero_1" (formula "56") (term "1,0,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "56") (term "0,0,0,0,0,0"))
                              (rule "leq_literals" (formula "56") (term "0,0,0,0,0"))
                               (builtin "One Step Simplification" (formula "56"))
                              (rule "pullOutSelect" (formula "56") (term "1,1,0") (inst "selectSK=arr_2"))
                              (rule "simplifySelectOfAnon" (formula "56"))
                               (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "60")) (ifInst ""  (formula "48")))
                              (rule "elementOfSetMinus" (formula "56") (term "0,0"))
                               (builtin "One Step Simplification" (formula "56"))
                              (rule "ifthenelse_negated" (formula "56") (term "0"))
                              (rule "elementOfUnion" (formula "56") (term "0,0"))
                               (builtin "One Step Simplification" (formula "56"))
                              (rule "applyEqReverse" (formula "57") (term "1,1,0") (ifseqformula "56"))
                              (rule "hideAuxiliaryEq" (formula "56"))
                              (rule "commute_or" (formula "17") (term "0,0"))
                              (rule "cut_direct" (formula "61") (term "0"))
                              (branch "CUT: self.sorted_splitters.* cap allLocs setMinus self.sorted_splitters.* cup self.tree.tree.* = {} TRUE"
                                  (builtin "One Step Simplification" (formula "62"))
                                 (rule "onlyCreatedObjectsAreReferencedFinal" (formula "59") (term "0") (ifseqformula "5") (ifseqformula "2"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "60"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferencedFinal" (formula "14") (term "0") (ifseqformula "6") (ifseqformula "3"))
                                 (rule "applyEq" (formula "14") (term "1,0,1") (ifseqformula "15"))
                                 (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "51"))
                                  (builtin "One Step Simplification" (formula "14"))
                                 (rule "true_left" (formula "14"))
                                 (rule "commute_or" (formula "40") (term "0,0"))
                                 (rule "commute_or" (formula "41") (term "0,0"))
                                 (rule "commute_or" (formula "42") (term "0,0"))
                                 (rule "allLeft" (formula "20") (inst "t=add(add(Z(neglit(1(#))),
        mul(classify_sk_0, Z(neglit(1(#))))),
    result_241)"))
                                 (rule "polySimp_addAssoc" (formula "20") (term "1,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "20") (term "0,1,1,0,0"))
                                 (rule "add_literals" (formula "20") (term "0,0,1,1,0,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "20") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "20") (term "0,1,0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "20") (term "0,0,1,0,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "20") (term "1,0,1,0,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "20") (term "1,0,1,0,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "20") (term "0,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "20") (term "0,0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "20") (term "0,0,0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "20") (term "0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "20") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "20") (term "1,0,1,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "20") (term "1,0,1,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "20") (term "0,1,0,1,0,0,0,0"))
                                 (rule "mul_literals" (formula "20") (term "0,0,1,0,1,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "20") (term "1,0,1,0,1,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "20") (term "1,0,1,0,1,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "20") (term "0,1,0,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "20") (term "0,0,1,0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,1,0,0,0,0"))
                                 (rule "add_literals" (formula "20") (term "1,1,0,1,0,0,0,0"))
                                 (rule "times_zero_1" (formula "20") (term "1,0,1,0,0,0,0"))
                                 (rule "add_zero_right" (formula "20") (term "0,1,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "20") (term "0,1,0,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "20") (term "0,0,1,0,0,0,0"))
                                 (rule "polySimp_pullOutFactor2b" (formula "20") (term "0,1,0,0,0,0"))
                                 (rule "add_literals" (formula "20") (term "1,1,0,1,0,0,0,0"))
                                 (rule "times_zero_1" (formula "20") (term "1,0,1,0,0,0,0"))
                                 (rule "add_literals" (formula "20") (term "0,1,0,0,0,0"))
                                 (rule "leq_literals" (formula "20") (term "1,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "20"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "20") (term "0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "20") (term "0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "20") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "20") (term "0,0,0,0") (ifseqformula "11"))
                                 (rule "inEqSimp_homoInEq1" (formula "20") (term "0,0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "20") (term "1,1,0,0,0,0,0,0"))
                                 (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "20") (term "0,0,0,0,0,0"))
                                 (rule "leq_literals" (formula "20") (term "0,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "20"))
                                 (rule "allLeft" (formula "40") (inst "t=classify_sk_0"))
                                 (rule "inEqSimp_homoInEq1" (formula "40") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "40") (term "0,1,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "40") (term "0,0,1,0"))
                                 (rule "add_literals" (formula "40") (term "1,1,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "40") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "40") (term "1,1,0"))
                                 (rule "mul_literals" (formula "40") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "40") (term "0,0") (ifseqformula "29"))
                                 (rule "qeq_literals" (formula "40") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "40"))
                                 (rule "allLeft" (formula "41") (inst "t=classify_sk_1"))
                                 (rule "inEqSimp_homoInEq1" (formula "41") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "41") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "41") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "41") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "41") (term "1,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "41") (term "0,1,1,0"))
                                 (rule "mul_literals" (formula "41") (term "0,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "41") (term "1,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "41") (term "1,0,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "41") (term "0,0") (ifseqformula "54"))
                                 (rule "qeq_literals" (formula "41") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "41"))
                                 (rule "allLeft" (formula "42") (inst "t=add(Z(neglit(1(#))), classify_sk_0)"))
                                 (rule "polySimp_addAssoc" (formula "42") (term "0,2,0,1"))
                                 (rule "add_literals" (formula "42") (term "0,0,2,0,1"))
                                 (rule "add_zero_left" (formula "42") (term "0,2,0,1"))
                                 (rule "inEqSimp_commuteGeq" (formula "42") (term "1"))
                                 (rule "inEqSimp_homoInEq0" (formula "42") (term "0,0"))
                                 (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "42") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "42") (term "0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "42") (term "0,0,0"))
                                 (rule "add_literals" (formula "42") (term "0,0,0,0"))
                                 (rule "add_zero_left" (formula "42") (term "0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "42") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "42") (term "1,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "42") (term "1,0,1,0"))
                                 (rule "mul_literals" (formula "42") (term "0,1,0,1,0"))
                                 (rule "polySimp_addComm1" (formula "42") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "42") (term "0,0,1,0"))
                                 (rule "polySimp_addComm1" (formula "42") (term "0,0,0,1,0"))
                                 (rule "add_literals" (formula "42") (term "0,0,0,0,1,0"))
                                 (rule "polySimp_pullOutFactor3b" (formula "42") (term "0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "42") (term "1,0,0,1,0"))
                                 (rule "inEqSimp_invertInEq1" (formula "42") (term "0,0"))
                                 (rule "polySimp_mulLiterals" (formula "42") (term "0,0,0"))
                                 (rule "times_zero_2" (formula "42") (term "1,0,0"))
                                 (rule "polySimp_elimOne" (formula "42") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "42") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "42") (term "1,1,0"))
                                 (rule "mul_literals" (formula "42") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "42") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "42") (term "0,0") (ifseqformula "29"))
                                 (rule "qeq_literals" (formula "42") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "42"))
                                 (rule "allLeft" (formula "43") (inst "t=mul(classify_sk_0, Z(2(#)))"))
                                 (rule "inEqSimp_homoInEq1" (formula "43") (term "1,0"))
                                 (rule "polySimp_mulLiterals" (formula "43") (term "1,0,1,0"))
                                 (rule "polySimp_addComm1" (formula "43") (term "0,1,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "43") (term "0,0,1,0"))
                                 (rule "add_literals" (formula "43") (term "1,1,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "43") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "43") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "43") (term "1,1,1,0"))
                                 (rule "mul_literals" (formula "43") (term "0,1,1,0"))
                                 (rule "inEqSimp_contradInEq5" (formula "43") (term "0,0") (ifseqformula "29"))
                                 (rule "mul_literals" (formula "43") (term "1,1,0,0,0"))
                                 (rule "greater_literals" (formula "43") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "43"))
                                 (rule "qeq_literals" (formula "43") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "43"))
                                 (rule "allLeft" (formula "21") (inst "t=value<<origin(\"accessible @ file Classifier.java @ line 291\",\"[]\")>>"))
                                 (rule "allLeft" (formula "22") (inst "t=value"))
                                 (rule "allLeft" (formula "65") (inst "t=add(add(Z(neglit(2(#))),
        mul(classify_sk_0, Z(neglit(1(#))))),
    result_241)"))
                                 (rule "polySimp_addAssoc" (formula "65") (term "1,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "65") (term "0,1,1,0,0"))
                                 (rule "add_literals" (formula "65") (term "0,0,1,1,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "65") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "65") (term "1,0,1,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "65") (term "1,0,1,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "65") (term "0,1,0,1,0,0,0,0"))
                                 (rule "mul_literals" (formula "65") (term "0,0,1,0,1,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "65") (term "1,0,1,0,1,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "65") (term "1,0,1,0,1,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "65") (term "0,1,0,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "65") (term "0,0,1,0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "65") (term "0,1,0,0,0,0"))
                                 (rule "add_literals" (formula "65") (term "1,1,0,1,0,0,0,0"))
                                 (rule "times_zero_1" (formula "65") (term "1,0,1,0,0,0,0"))
                                 (rule "add_zero_right" (formula "65") (term "0,1,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "65") (term "0,1,0,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "65") (term "0,0,1,0,0,0,0"))
                                 (rule "add_literals" (formula "65") (term "0,0,0,1,0,0,0,0"))
                                 (rule "polySimp_pullOutFactor2b" (formula "65") (term "0,1,0,0,0,0"))
                                 (rule "add_literals" (formula "65") (term "1,1,0,1,0,0,0,0"))
                                 (rule "times_zero_1" (formula "65") (term "1,0,1,0,0,0,0"))
                                 (rule "add_literals" (formula "65") (term "0,1,0,0,0,0"))
                                 (rule "leq_literals" (formula "65") (term "1,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "65"))
                                 (rule "inEqSimp_homoInEq0" (formula "65") (term "0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "65") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "65") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "65") (term "0,1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "65") (term "0,0,1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "65") (term "1,0,1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "65") (term "1,0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "65") (term "0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "65") (term "0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "65") (term "0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "65") (term "0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "65") (term "0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "65") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "65") (term "0,0,0,0") (ifseqformula "11"))
                                 (rule "inEqSimp_homoInEq1" (formula "65") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "65") (term "1,0,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "65") (term "1,0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "65") (term "0,1,0,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "65") (term "0,0,0,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "65") (term "0,0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "65") (term "0,0,0,0,0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "65") (term "0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "65") (term "1,1,0,0,0,0,0,0"))
                                 (rule "times_zero_1" (formula "65") (term "1,0,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "65") (term "0,0,0,0,0,0"))
                                 (rule "leq_literals" (formula "65") (term "0,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "65"))
                                 (rule "pullOutSelect" (formula "65") (term "1,1,0") (inst "selectSK=arr_3"))
                                 (rule "simplifySelectOfAnon" (formula "65"))
                                  (builtin "One Step Simplification" (formula "65") (ifInst ""  (formula "69")) (ifInst ""  (formula "56")))
                                 (rule "disjointAllFields" (formula "65") (term "0,0") (ifseqformula "2"))
                                  (builtin "One Step Simplification" (formula "65"))
                                 (rule "applyEqReverse" (formula "66") (term "1,1,0") (ifseqformula "65"))
                                 (rule "hideAuxiliaryEq" (formula "65"))
                                 (rule "applyEq" (formula "65") (term "1,1,0") (ifseqformula "23"))
                                 (rule "allLeft" (formula "49") (inst "t=add(add(Z(neglit(2(#))),
        mul(classify_sk_0, Z(neglit(1(#))))),
    result_241)"))
                                 (rule "polySimp_addAssoc" (formula "49") (term "1,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "49") (term "0,1,1,0,0"))
                                 (rule "add_literals" (formula "49") (term "0,0,1,1,0,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "49") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "49") (term "1,0,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "49") (term "1,0,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "49") (term "0,1,0,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "49") (term "1,0,1,0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "49") (term "0,0,1,0,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "49") (term "1,0,1,0,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "49") (term "0,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "49") (term "0,0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "49") (term "0,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "49") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "49") (term "1,0,1,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "49") (term "1,0,1,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "49") (term "0,1,0,1,0,0,0,0"))
                                 (rule "mul_literals" (formula "49") (term "0,0,1,0,1,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "49") (term "1,0,1,0,1,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "49") (term "1,0,1,0,1,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "49") (term "0,1,0,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "49") (term "0,0,1,0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "49") (term "0,1,0,0,0,0"))
                                 (rule "add_literals" (formula "49") (term "1,1,0,1,0,0,0,0"))
                                 (rule "times_zero_1" (formula "49") (term "1,0,1,0,0,0,0"))
                                 (rule "add_zero_right" (formula "49") (term "0,1,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "49") (term "0,1,0,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "49") (term "0,0,1,0,0,0,0"))
                                 (rule "add_literals" (formula "49") (term "0,0,0,1,0,0,0,0"))
                                 (rule "polySimp_pullOutFactor2b" (formula "49") (term "0,1,0,0,0,0"))
                                 (rule "add_literals" (formula "49") (term "1,1,0,1,0,0,0,0"))
                                 (rule "times_zero_1" (formula "49") (term "1,0,1,0,0,0,0"))
                                 (rule "add_literals" (formula "49") (term "0,1,0,0,0,0"))
                                 (rule "leq_literals" (formula "49") (term "1,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "49"))
                                 (rule "applyEq" (formula "49") (term "1,1,0") (ifseqformula "23"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "49") (term "0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "49") (term "0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "49") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "49") (term "0,0,0,0") (ifseqformula "11"))
                                 (rule "inEqSimp_homoInEq1" (formula "49") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "49") (term "1,0,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "49") (term "1,0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "49") (term "0,1,0,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "49") (term "0,0,0,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "49") (term "0,0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "49") (term "0,0,0,0,0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "49") (term "0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "49") (term "1,1,0,0,0,0,0,0"))
                                 (rule "times_zero_1" (formula "49") (term "1,0,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "49") (term "0,0,0,0,0,0"))
                                 (rule "leq_literals" (formula "49") (term "0,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "49"))
                                 (rule "allLeft" (formula "67") (inst "t=classify_sk_0"))
                                 (rule "inEqSimp_homoInEq1" (formula "67") (term "1,0,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "67") (term "0,1,0,0,0,0"))
                                 (rule "polySimp_pullOutFactor3b" (formula "67") (term "0,0,1,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "67") (term "1,0,0,1,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "67") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "67") (term "1,1,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "67") (term "1,1,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "67") (term "1,1,1,0,0,0,0"))
                                 (rule "mul_literals" (formula "67") (term "0,1,1,0,0,0,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "67") (term "0,0,0,0,0") (ifseqformula "30"))
                                 (rule "qeq_literals" (formula "67") (term "0,0,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "67"))
                                 (rule "pullOutSelect" (formula "67") (term "1,1,0") (inst "selectSK=arr_4"))
                                 (rule "simplifySelectOfAnon" (formula "67"))
                                  (builtin "One Step Simplification" (formula "67") (ifInst ""  (formula "71")) (ifInst ""  (formula "57")))
                                 (rule "disjointAllFields" (formula "67") (term "0,0") (ifseqformula "2"))
                                  (builtin "One Step Simplification" (formula "67"))
                                 (rule "applyEqReverse" (formula "68") (term "1,1,0") (ifseqformula "67"))
                                 (rule "hideAuxiliaryEq" (formula "67"))
                                 (rule "allLeft" (formula "50") (inst "t=classify_sk_0"))
                                 (rule "inEqSimp_homoInEq1" (formula "50") (term "1,0,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "50") (term "0,1,0,0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "50") (term "0,0,1,0,0,0,0"))
                                 (rule "add_literals" (formula "50") (term "1,1,0,0,1,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "50") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "50") (term "1,1,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "50") (term "1,1,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "50") (term "1,1,1,0,0,0,0"))
                                 (rule "mul_literals" (formula "50") (term "0,1,1,0,0,0,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "50") (term "0,0,0,0,0") (ifseqformula "30"))
                                 (rule "qeq_literals" (formula "50") (term "0,0,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "50"))
                                 (rule "allLeft" (formula "51") (inst "t=value"))
                                 (rule "allLeft" (formula "52") (inst "t=value<<origin(\"accessible @ file Classifier.java @ line 291\",\"[]\")>>"))
                                 (rule "allLeft" (formula "70") (inst "t=value"))
                                 (rule "pullOutSelect" (formula "70") (term "1,1,0") (inst "selectSK=arr_5"))
                                 (rule "simplifySelectOfAnon" (formula "70"))
                                  (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "74")) (ifInst ""  (formula "59")))
                                 (rule "disjointAllFields" (formula "70") (term "0,0") (ifseqformula "2"))
                                  (builtin "One Step Simplification" (formula "70"))
                                 (rule "applyEqReverse" (formula "71") (term "1,1,0") (ifseqformula "70"))
                                 (rule "hideAuxiliaryEq" (formula "70"))
                                 (rule "allLeft" (formula "71") (inst "t=value<<origin(\"accessible @ file Classifier.java @ line 291\",\"[]\")>>"))
                                 (rule "replaceKnownSelect_taclet00000001010_10" (formula "71") (term "1,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet00000001010_11" (formula "71") (term "1,1,0"))
                                 (rule "commute_or" (formula "65") (term "0,0"))
                                 (rule "commute_or" (formula "66") (term "0,0"))
                                 (rule "commute_or" (formula "67") (term "0,0"))
                                 (rule "commute_or" (formula "20") (term "0,0"))
                                 (rule "inEqSimp_or_antiSymm0" (formula "20") (term "0,0"))
                                 (rule "polySimp_homoEq" (formula "20") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,0"))
                                 (rule "mul_literals" (formula "20") (term "0,1,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "20") (term "0,1,1,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "20") (term "1,0,1,1,0,0,0,0"))
                                 (rule "mul_literals" (formula "20") (term "0,0,1,1,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "20") (term "1,0,1,1,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "20") (term "1,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "20") (term "1,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "20") (term "0,1,0,1,0,0"))
                                 (rule "add_literals" (formula "20") (term "0,0,1,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "20") (term "0,1,0,0,0,0"))
                                 (rule "add_literals" (formula "20") (term "0,0,1,0,0,0,0"))
                                 (rule "add_zero_left" (formula "20") (term "0,1,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "20") (term "0,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "20") (term "0,0,0,0,0"))
                                 (rule "polySimp_pullOutFactor2" (formula "20") (term "0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "20") (term "1,0,0,0,0,0,0"))
                                 (rule "times_zero_1" (formula "20") (term "0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "20") (term "0,0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "20") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "20") (term "1,0,0,0,0"))
                                 (rule "times_zero_1" (formula "20") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "20"))
                                 (rule "equalityToElementOfRight" (formula "75") (inst "fv=fv") (inst "ov=ov"))
                                  (builtin "One Step Simplification" (formula "75"))
                                 (rule "allRight" (formula "75") (inst "sk=ov_0"))
                                 (rule "allRight" (formula "75") (inst "sk=fv_0"))
                                 (rule "notRight" (formula "75"))
                                 (rule "elementOfIntersect" (formula "1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                 (rule "elementOfSetMinus" (formula "2"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "elementOfUnion" (formula "73"))
                                  (builtin "One Step Simplification" (formula "73"))
                                 (rule "closeTrue" (formula "73"))
                              )
                              (branch "CUT: self.sorted_splitters.* cap allLocs setMinus self.sorted_splitters.* cup self.tree.tree.* = {} FALSE"
                                  (builtin "One Step Simplification" (formula "62"))
                                 (rule "false_right" (formula "62"))
                                 (rule "onlyCreatedObjectsAreReferencedFinal" (formula "12") (term "0") (ifseqformula "4") (ifseqformula "1"))
                                 (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "13"))
                                 (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "60"))
                                  (builtin "One Step Simplification" (formula "12"))
                                 (rule "applyEq" (formula "12") (term "1,0") (ifseqformula "13"))
                                 (rule "onlyCreatedObjectsAreReferencedFinal" (formula "44") (term "0,1,1,1,0,0") (ifseqformula "4") (ifseqformula "1"))
                                 (rule "replace_known_right" (formula "44") (term "0") (ifseqformula "59"))
                                  (builtin "One Step Simplification" (formula "44"))
                                 (rule "commute_or" (formula "38") (term "0,0"))
                                 (rule "commute_or" (formula "39") (term "0,0"))
                                 (rule "commute_or" (formula "40") (term "0,0"))
                                 (rule "allLeft" (formula "37") (inst "t=classify_sk_1"))
                                 (rule "inEqSimp_homoInEq1" (formula "37") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "37") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "37") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "37") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "37") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "37") (term "1,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "37") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "37") (term "1,0,1,1,0"))
                                 (rule "mul_literals" (formula "37") (term "0,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "37") (term "1,0,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "37") (term "0,0") (ifseqformula "51"))
                                 (rule "qeq_literals" (formula "37") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "37"))
                                 (rule "allLeft" (formula "38") (inst "t=classify_sk_0"))
                                 (rule "inEqSimp_homoInEq1" (formula "38") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "38") (term "0,1,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "38") (term "0,0,1,0"))
                                 (rule "add_literals" (formula "38") (term "1,1,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "38") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "38") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0"))
                                 (rule "mul_literals" (formula "38") (term "0,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "38") (term "0,0") (ifseqformula "26"))
                                 (rule "qeq_literals" (formula "38") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "38"))
                                 (rule "allLeft" (formula "39") (inst "t=add(Z(neglit(1(#))), classify_sk_0)"))
                                 (rule "polySimp_addAssoc" (formula "39") (term "0,2,0,1"))
                                 (rule "add_literals" (formula "39") (term "0,0,2,0,1"))
                                 (rule "add_zero_left" (formula "39") (term "0,2,0,1"))
                                 (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                 (rule "inEqSimp_homoInEq0" (formula "39") (term "0,0"))
                                 (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "39") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "39") (term "0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "39") (term "0,0,0"))
                                 (rule "add_literals" (formula "39") (term "0,0,0,0"))
                                 (rule "add_zero_left" (formula "39") (term "0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "39") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "39") (term "1,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "39") (term "1,0,1,0"))
                                 (rule "mul_literals" (formula "39") (term "0,1,0,1,0"))
                                 (rule "polySimp_addComm1" (formula "39") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "39") (term "0,0,1,0"))
                                 (rule "polySimp_addComm1" (formula "39") (term "0,0,0,1,0"))
                                 (rule "add_literals" (formula "39") (term "0,0,0,0,1,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "39") (term "0,0,1,0"))
                                 (rule "add_literals" (formula "39") (term "1,1,0,0,1,0"))
                                 (rule "inEqSimp_invertInEq1" (formula "39") (term "0,0"))
                                 (rule "times_zero_2" (formula "39") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "39") (term "0,0,0"))
                                 (rule "polySimp_elimOne" (formula "39") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "39") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "39") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1,0"))
                                 (rule "mul_literals" (formula "39") (term "0,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "39") (term "0,0") (ifseqformula "26"))
                                 (rule "qeq_literals" (formula "39") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "39"))
                                 (rule "allLeft" (formula "18") (inst "t=add(add(Z(neglit(1(#))),
        mul(classify_sk_0, Z(neglit(1(#))))),
    result_241)"))
                                 (rule "polySimp_addAssoc" (formula "18") (term "1,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "18") (term "0,1,1,0,0"))
                                 (rule "add_literals" (formula "18") (term "0,0,1,1,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "18") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "18") (term "1,0,1,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "18") (term "1,0,1,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "18") (term "0,1,0,1,0,0,0,0"))
                                 (rule "mul_literals" (formula "18") (term "0,0,1,0,1,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "18") (term "1,0,1,0,1,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "18") (term "1,0,1,0,1,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "18") (term "0,1,0,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "18") (term "0,0,1,0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,1,0,0,0,0"))
                                 (rule "add_literals" (formula "18") (term "1,1,0,1,0,0,0,0"))
                                 (rule "times_zero_1" (formula "18") (term "1,0,1,0,0,0,0"))
                                 (rule "add_zero_right" (formula "18") (term "0,1,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "18") (term "0,1,0,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "18") (term "0,0,1,0,0,0,0"))
                                 (rule "polySimp_pullOutFactor2b" (formula "18") (term "0,1,0,0,0,0"))
                                 (rule "add_literals" (formula "18") (term "1,1,0,1,0,0,0,0"))
                                 (rule "times_zero_1" (formula "18") (term "1,0,1,0,0,0,0"))
                                 (rule "add_literals" (formula "18") (term "0,1,0,0,0,0"))
                                 (rule "leq_literals" (formula "18") (term "1,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "18"))
                                 (rule "inEqSimp_homoInEq0" (formula "18") (term "0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "18") (term "0,1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "18") (term "0,0,1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "18") (term "1,0,1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "18") (term "1,0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "18") (term "0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "18") (term "0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "18") (term "0,0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "18") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "18") (term "0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "18") (term "0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "18") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "18") (term "0,0,0,0") (ifseqformula "9"))
                                 (rule "inEqSimp_homoInEq1" (formula "18") (term "0,0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "18") (term "1,1,0,0,0,0,0,0"))
                                 (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "18") (term "0,0,0,0,0,0"))
                                 (rule "leq_literals" (formula "18") (term "0,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "18"))
                                 (rule "allLeft" (formula "41") (inst "t=mul(classify_sk_0, Z(2(#)))"))
                                 (rule "inEqSimp_homoInEq1" (formula "41") (term "1,0"))
                                 (rule "polySimp_mulLiterals" (formula "41") (term "1,0,1,0"))
                                 (rule "polySimp_addComm1" (formula "41") (term "0,1,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "41") (term "0,0,1,0"))
                                 (rule "add_literals" (formula "41") (term "1,1,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "41") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "41") (term "1,1,0"))
                                 (rule "mul_literals" (formula "41") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq5" (formula "41") (term "0,0") (ifseqformula "27"))
                                 (rule "mul_literals" (formula "41") (term "1,1,0,0,0"))
                                 (rule "greater_literals" (formula "41") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "41"))
                                 (rule "qeq_literals" (formula "41") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "41"))
                                 (rule "allLeft" (formula "19") (inst "t=value<<origin(\"accessible @ file Classifier.java @ line 291\",\"[]\")>>"))
                                 (rule "allLeft" (formula "20") (inst "t=value"))
                                 (rule "allLeft" (formula "64") (inst "t=add(add(Z(neglit(2(#))),
        mul(classify_sk_0, Z(neglit(1(#))))),
    result_241)"))
                                 (rule "polySimp_addAssoc" (formula "64") (term "1,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "64") (term "0,1,1,0,0"))
                                 (rule "add_literals" (formula "64") (term "0,0,1,1,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "64") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "64") (term "1,0,1,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "64") (term "1,0,1,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "64") (term "0,1,0,1,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "64") (term "1,0,1,0,1,0,0,0,0"))
                                 (rule "mul_literals" (formula "64") (term "0,0,1,0,1,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "64") (term "1,0,1,0,1,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "64") (term "0,1,0,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "64") (term "0,0,1,0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "64") (term "0,1,0,0,0,0"))
                                 (rule "add_literals" (formula "64") (term "1,1,0,1,0,0,0,0"))
                                 (rule "times_zero_1" (formula "64") (term "1,0,1,0,0,0,0"))
                                 (rule "add_zero_right" (formula "64") (term "0,1,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "64") (term "0,1,0,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "64") (term "0,0,1,0,0,0,0"))
                                 (rule "add_literals" (formula "64") (term "0,0,0,1,0,0,0,0"))
                                 (rule "polySimp_pullOutFactor2b" (formula "64") (term "0,1,0,0,0,0"))
                                 (rule "add_literals" (formula "64") (term "1,1,0,1,0,0,0,0"))
                                 (rule "times_zero_1" (formula "64") (term "1,0,1,0,0,0,0"))
                                 (rule "add_literals" (formula "64") (term "0,1,0,0,0,0"))
                                 (rule "leq_literals" (formula "64") (term "1,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "64"))
                                 (rule "inEqSimp_homoInEq0" (formula "64") (term "0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "64") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "64") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "64") (term "0,1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "64") (term "0,0,1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "64") (term "1,0,1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "64") (term "1,0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "64") (term "0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "64") (term "0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "64") (term "0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "64") (term "0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "64") (term "0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "64") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "64") (term "0,0,0,0") (ifseqformula "9"))
                                 (rule "inEqSimp_homoInEq1" (formula "64") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "64") (term "1,0,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "64") (term "1,0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "64") (term "0,1,0,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "64") (term "0,0,0,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "64") (term "0,0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "64") (term "0,0,0,0,0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "64") (term "0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "64") (term "1,1,0,0,0,0,0,0"))
                                 (rule "times_zero_1" (formula "64") (term "1,0,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "64") (term "0,0,0,0,0,0"))
                                 (rule "leq_literals" (formula "64") (term "0,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "64"))
                                 (rule "pullOutSelect" (formula "64") (term "1,1,0") (inst "selectSK=arr_3"))
                                 (rule "simplifySelectOfAnon" (formula "64"))
                                  (builtin "One Step Simplification" (formula "64") (ifInst ""  (formula "68")) (ifInst ""  (formula "55")))
                                 (rule "applyEq" (formula "64") (term "2,0") (ifseqformula "21"))
                                 (rule "elementOfSetMinus" (formula "64") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "64"))
                                 (rule "ifthenelse_negated" (formula "64") (term "0"))
                                 (rule "elementOfUnion" (formula "64") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "64"))
                                 (rule "applyEqReverse" (formula "65") (term "1,1,0") (ifseqformula "64"))
                                 (rule "hideAuxiliaryEq" (formula "64"))
                                 (rule "allLeft" (formula "47") (inst "t=add(add(Z(neglit(2(#))),
        mul(classify_sk_0, Z(neglit(1(#))))),
    result_241)"))
                                 (rule "polySimp_addAssoc" (formula "47") (term "1,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "47") (term "0,1,1,0,0"))
                                 (rule "add_literals" (formula "47") (term "0,0,1,1,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "47") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "47") (term "1,0,1,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "47") (term "1,0,1,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "47") (term "0,1,0,1,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "47") (term "1,0,1,0,1,0,0,0,0"))
                                 (rule "mul_literals" (formula "47") (term "0,0,1,0,1,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "47") (term "1,0,1,0,1,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "47") (term "0,1,0,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "47") (term "0,0,1,0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "47") (term "0,1,0,0,0,0"))
                                 (rule "add_literals" (formula "47") (term "1,1,0,1,0,0,0,0"))
                                 (rule "times_zero_1" (formula "47") (term "1,0,1,0,0,0,0"))
                                 (rule "add_zero_right" (formula "47") (term "0,1,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "47") (term "0,1,0,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "47") (term "0,0,1,0,0,0,0"))
                                 (rule "add_literals" (formula "47") (term "0,0,0,1,0,0,0,0"))
                                 (rule "polySimp_pullOutFactor2b" (formula "47") (term "0,1,0,0,0,0"))
                                 (rule "add_literals" (formula "47") (term "1,1,0,1,0,0,0,0"))
                                 (rule "times_zero_1" (formula "47") (term "1,0,1,0,0,0,0"))
                                 (rule "add_literals" (formula "47") (term "0,1,0,0,0,0"))
                                 (rule "leq_literals" (formula "47") (term "1,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "47"))
                                 (rule "inEqSimp_homoInEq0" (formula "47") (term "0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "47") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "47") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "47") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "47") (term "1,0,1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "47") (term "0,0,1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "47") (term "1,0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "47") (term "0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "47") (term "0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "47") (term "0,0,0,0,0,0,0"))
                                 (rule "applyEq" (formula "47") (term "1,1,0") (ifseqformula "21"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "47") (term "0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "47") (term "0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "47") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "47") (term "0,0,0,0") (ifseqformula "9"))
                                 (rule "inEqSimp_homoInEq1" (formula "47") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "47") (term "1,0,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "47") (term "1,0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "47") (term "0,1,0,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "47") (term "0,0,0,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "47") (term "0,0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "47") (term "0,0,0,0,0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "47") (term "0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "47") (term "1,1,0,0,0,0,0,0"))
                                 (rule "times_zero_1" (formula "47") (term "1,0,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "47") (term "0,0,0,0,0,0"))
                                 (rule "leq_literals" (formula "47") (term "0,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "47"))
                                 (rule "allLeft" (formula "48") (inst "t=classify_sk_0"))
                                 (rule "inEqSimp_homoInEq1" (formula "48") (term "1,0,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "48") (term "0,1,0,0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "48") (term "0,0,1,0,0,0,0"))
                                 (rule "add_literals" (formula "48") (term "1,1,0,0,1,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "48") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "48") (term "1,1,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "48") (term "1,1,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "48") (term "1,1,1,0,0,0,0"))
                                 (rule "mul_literals" (formula "48") (term "0,1,1,0,0,0,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "48") (term "0,0,0,0,0") (ifseqformula "28"))
                                 (rule "qeq_literals" (formula "48") (term "0,0,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "48"))
                                 (rule "allLeft" (formula "67") (inst "t=classify_sk_0"))
                                 (rule "inEqSimp_homoInEq1" (formula "67") (term "1,0,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "67") (term "0,1,0,0,0,0"))
                                 (rule "polySimp_pullOutFactor3b" (formula "67") (term "0,0,1,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "67") (term "1,0,0,1,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "67") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "67") (term "1,1,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "67") (term "1,1,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "67") (term "1,1,1,0,0,0,0"))
                                 (rule "mul_literals" (formula "67") (term "0,1,1,0,0,0,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "67") (term "0,0,0,0,0") (ifseqformula "28"))
                                 (rule "qeq_literals" (formula "67") (term "0,0,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "67"))
                                 (rule "pullOutSelect" (formula "67") (term "1,1,0") (inst "selectSK=arr_4"))
                                 (rule "simplifySelectOfAnon" (formula "67"))
                                  (builtin "One Step Simplification" (formula "67") (ifInst ""  (formula "71")) (ifInst ""  (formula "57")))
                                 (rule "elementOfSetMinus" (formula "67") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "67"))
                                 (rule "ifthenelse_negated" (formula "67") (term "0"))
                                 (rule "elementOfUnion" (formula "67") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "67"))
                                 (rule "applyEqReverse" (formula "68") (term "1,1,0") (ifseqformula "67"))
                                 (rule "hideAuxiliaryEq" (formula "67"))
                                 (rule "allLeft" (formula "68") (inst "t=value<<origin(\"accessible @ file Classifier.java @ line 291\",\"[]\")>>"))
                                 (rule "pullOutSelect" (formula "68") (term "1,1,0") (inst "selectSK=arr_5"))
                                 (rule "simplifySelectOfAnon" (formula "68"))
                                  (builtin "One Step Simplification" (formula "68") (ifInst ""  (formula "72")) (ifInst ""  (formula "57")))
                                 (rule "elementOfSetMinus" (formula "68") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "68"))
                                 (rule "ifthenelse_negated" (formula "68") (term "0"))
                                 (rule "elementOfUnion" (formula "68") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "68"))
                                 (rule "applyEqReverse" (formula "69") (term "1,1,0") (ifseqformula "68"))
                                 (rule "hideAuxiliaryEq" (formula "68"))
                                 (rule "allLeft" (formula "49") (inst "t=value<<origin(\"accessible @ file Classifier.java @ line 291\",\"[]\")>>"))
                                 (rule "allLeft" (formula "70") (inst "t=value"))
                                 (rule "replaceKnownSelect_taclet10000001010_10" (formula "70") (term "1,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet10000001010_11" (formula "70") (term "1,1,0"))
                                 (rule "allLeft" (formula "50") (inst "t=value"))
                                 (rule "commute_or" (formula "64") (term "0,0"))
                                 (rule "commute_or" (formula "65") (term "0,0"))
                                 (rule "commute_or" (formula "66") (term "0,0"))
                                 (rule "equalityToElementOfRight" (formula "74") (inst "fv=fv") (inst "ov=ov"))
                                  (builtin "One Step Simplification" (formula "74"))
                                 (rule "allRight" (formula "74") (inst "sk=ov_0"))
                                 (rule "allRight" (formula "74") (inst "sk=fv_0"))
                                 (rule "notRight" (formula "74"))
                                 (rule "elementOfIntersect" (formula "1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                 (rule "elementOfSetMinus" (formula "2"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "elementOfUnion" (formula "72"))
                                  (builtin "One Step Simplification" (formula "72"))
                                 (rule "closeTrue" (formula "72"))
                              )
                           )
                           (branch "CUT: self.sorted_splitters[classify_sk_0] >= value FALSE"
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "notLeft" (formula "23"))
                              (rule "inEqSimp_geqRight" (formula "46"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "inEqSimp_geqRight" (formula "46"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1"))
                              (rule "polySimp_rightDist" (formula "2") (term "1"))
                              (rule "mul_literals" (formula "2") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1"))
                              (rule "polySimp_rightDist" (formula "1") (term "1"))
                              (rule "mul_literals" (formula "1") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                              (rule "inEqSimp_antiSymm" (formula "22") (ifseqformula "1"))
                              (rule "applyEq" (formula "20") (term "0") (ifseqformula "22"))
                              (rule "inEqSimp_homoInEq1" (formula "20"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                              (rule "mul_literals" (formula "20") (term "0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0"))
                              (rule "polySimp_addComm1" (formula "20") (term "0"))
                              (rule "polySimp_addAssoc" (formula "20") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "20") (term "0,0,0"))
                              (rule "add_literals" (formula "20") (term "0,0,0,0"))
                              (rule "add_zero_left" (formula "20") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor0" (formula "20") (term "0,0"))
                              (rule "add_literals" (formula "20") (term "1,0,0"))
                              (rule "times_zero_1" (formula "20") (term "0,0"))
                              (rule "add_zero_left" (formula "20") (term "0"))
                              (rule "applyEq" (formula "34") (term "1,1,1,0,0") (ifseqformula "22"))
                              (rule "polySimp_addAssoc" (formula "34") (term "1,1,0,0"))
                              (rule "polySimp_addComm1" (formula "34") (term "0,1,1,0,0"))
                              (rule "add_literals" (formula "34") (term "0,0,1,1,0,0"))
                              (rule "add_zero_left" (formula "34") (term "0,1,1,0,0"))
                              (rule "polySimp_pullOutFactor0" (formula "34") (term "1,1,0,0"))
                              (rule "add_literals" (formula "34") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0"))
                              (rule "applyEq" (formula "47") (term "1,1,1,0,0") (ifseqformula "22"))
                              (rule "polySimp_addAssoc" (formula "47") (term "1,1,0,0"))
                              (rule "polySimp_addComm1" (formula "47") (term "0,1,1,0,0"))
                              (rule "add_literals" (formula "47") (term "0,0,1,1,0,0"))
                              (rule "add_zero_left" (formula "47") (term "0,1,1,0,0"))
                              (rule "polySimp_pullOutFactor0" (formula "47") (term "1,1,0,0"))
                              (rule "add_literals" (formula "47") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "47") (term "1,1,0,0"))
                              (rule "applyEq" (formula "45") (term "0") (ifseqformula "22"))
                              (rule "inEqSimp_homoInEq1" (formula "45"))
                              (rule "polySimp_mulComm0" (formula "45") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "45") (term "1,0"))
                              (rule "mul_literals" (formula "45") (term "0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "45") (term "1,1,0"))
                              (rule "polySimp_addComm1" (formula "45") (term "0"))
                              (rule "polySimp_addAssoc" (formula "45") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "45") (term "0,0,0"))
                              (rule "add_literals" (formula "45") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "45") (term "0,0"))
                              (rule "add_literals" (formula "45") (term "1,1,0,0"))
                              (rule "applyEq" (formula "15") (term "1,1,1,0,0") (ifseqformula "22"))
                              (rule "polySimp_addAssoc" (formula "15") (term "1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "15") (term "0,1,1,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "15") (term "1,1,0,0"))
                              (rule "add_literals" (formula "15") (term "1,1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                              (rule "applyEq" (formula "33") (term "1,1,1,0,0") (ifseqformula "22"))
                              (rule "polySimp_addAssoc" (formula "33") (term "1,1,0,0"))
                              (rule "polySimp_addComm1" (formula "33") (term "0,1,1,0,0"))
                              (rule "add_literals" (formula "33") (term "0,0,1,1,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "33") (term "1,1,0,0"))
                              (rule "add_literals" (formula "33") (term "1,1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0"))
                              (rule "applyEq" (formula "18") (term "0") (ifseqformula "22"))
                              (rule "inEqSimp_homoInEq1" (formula "18"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                              (rule "mul_literals" (formula "18") (term "0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0"))
                              (rule "polySimp_addAssoc" (formula "18") (term "0"))
                              (rule "add_literals" (formula "18") (term "0,0"))
                              (rule "add_zero_left" (formula "18") (term "0"))
                              (rule "applyEq" (formula "30") (term "1,1") (ifseqformula "22"))
                              (rule "polySimp_addAssoc" (formula "30") (term "1"))
                              (rule "polySimp_addComm0" (formula "30") (term "0,1"))
                              (rule "polySimp_pullOutFactor0b" (formula "30") (term "1"))
                              (rule "add_literals" (formula "30") (term "1,1,1"))
                              (rule "polySimp_elimOne" (formula "30") (term "1,1"))
                              (rule "applyEq" (formula "32") (term "1,1") (ifseqformula "22"))
                              (rule "polySimp_addAssoc" (formula "32") (term "1"))
                              (rule "polySimp_addComm0" (formula "32") (term "0,1"))
                              (rule "polySimp_pullOutFactor0b" (formula "32") (term "1"))
                              (rule "add_literals" (formula "32") (term "1,1,1"))
                              (rule "polySimp_elimOne" (formula "32") (term "1,1"))
                              (rule "applyEq" (formula "40") (term "0") (ifseqformula "22"))
                              (rule "inEqSimp_homoInEq1" (formula "40"))
                              (rule "polySimp_mulComm0" (formula "40") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "40") (term "1,0"))
                              (rule "mul_literals" (formula "40") (term "0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0"))
                              (rule "polySimp_addComm1" (formula "40") (term "0"))
                              (rule "polySimp_addAssoc" (formula "40") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "40") (term "0,0,0"))
                              (rule "add_literals" (formula "40") (term "0,0,0,0"))
                              (rule "add_zero_left" (formula "40") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor1" (formula "40") (term "0,0"))
                              (rule "add_literals" (formula "40") (term "1,0,0"))
                              (rule "applyEq" (formula "15") (term "1,1,0,0,0,1,0") (ifseqformula "22"))
                              (rule "polySimp_addAssoc" (formula "15") (term "1,0,0,0,1,0"))
                              (rule "polySimp_addComm0" (formula "15") (term "0,1,0,0,0,1,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "15") (term "1,0,0,0,1,0"))
                              (rule "add_literals" (formula "15") (term "1,1,1,0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,1,0"))
                              (rule "applyEq" (formula "11") (term "0") (ifseqformula "22"))
                              (rule "inEqSimp_homoInEq1" (formula "11"))
                              (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "11") (term "1,0"))
                              (rule "mul_literals" (formula "11") (term "0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0"))
                              (rule "polySimp_addAssoc" (formula "11") (term "0"))
                              (rule "polySimp_addComm1" (formula "11") (term "0,0"))
                              (rule "add_literals" (formula "11") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "11") (term "0"))
                              (rule "add_literals" (formula "11") (term "1,1,0"))
                              (rule "applyEq" (formula "12") (term "0") (ifseqformula "22"))
                              (rule "inEqSimp_homoInEq0" (formula "12"))
                              (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "12") (term "1,0"))
                              (rule "mul_literals" (formula "12") (term "0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0"))
                              (rule "polySimp_addAssoc" (formula "12") (term "0"))
                              (rule "polySimp_addComm1" (formula "12") (term "0,0"))
                              (rule "add_literals" (formula "12") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "12") (term "0"))
                              (rule "add_literals" (formula "12") (term "1,1,0"))
                              (rule "applyEq" (formula "47") (term "1,1,0,0,0,1,0") (ifseqformula "22"))
                              (rule "polySimp_addAssoc" (formula "47") (term "1,0,0,0,1,0"))
                              (rule "polySimp_addComm1" (formula "47") (term "0,1,0,0,0,1,0"))
                              (rule "add_literals" (formula "47") (term "0,0,1,0,0,0,1,0"))
                              (rule "add_zero_left" (formula "47") (term "0,1,0,0,0,1,0"))
                              (rule "polySimp_pullOutFactor0" (formula "47") (term "1,0,0,0,1,0"))
                              (rule "add_literals" (formula "47") (term "1,1,0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "47") (term "1,0,0,0,1,0"))
                              (rule "applyEq" (formula "16") (term "1,0,2,0") (ifseqformula "22"))
                              (rule "eqSymm" (formula "16"))
                              (rule "polySimp_addAssoc" (formula "16") (term "0,2,1"))
                              (rule "polySimp_addComm1" (formula "16") (term "0,0,2,1"))
                              (rule "add_literals" (formula "16") (term "0,0,0,2,1"))
                              (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,2,1"))
                              (rule "add_literals" (formula "16") (term "1,1,0,2,1"))
                              (rule "polySimp_elimOne" (formula "16") (term "1,0,2,1"))
                              (rule "applyEq" (formula "1") (term "0") (ifseqformula "22"))
                              (rule "inEqSimp_homoInEq0" (formula "1"))
                              (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                              (rule "add_literals" (formula "1") (term "1,0"))
                              (rule "times_zero_1" (formula "1") (term "0"))
                              (rule "qeq_literals" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "applyEq" (formula "33") (term "1,1,0,0,0,1,0") (ifseqformula "21"))
                              (rule "polySimp_addAssoc" (formula "33") (term "1,0,0,0,1,0"))
                              (rule "polySimp_addComm1" (formula "33") (term "0,1,0,0,0,1,0"))
                              (rule "add_literals" (formula "33") (term "0,0,1,0,0,0,1,0"))
                              (rule "add_zero_left" (formula "33") (term "0,1,0,0,0,1,0"))
                              (rule "polySimp_pullOutFactor0" (formula "33") (term "1,0,0,0,1,0"))
                              (rule "add_literals" (formula "33") (term "1,1,0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "33") (term "1,0,0,0,1,0"))
                              (rule "applyEq" (formula "22") (term "0") (ifseqformula "21"))
                              (rule "inEqSimp_homoInEq1" (formula "22"))
                              (rule "polySimp_pullOutFactor1" (formula "22") (term "0"))
                              (rule "add_literals" (formula "22") (term "1,0"))
                              (rule "times_zero_1" (formula "22") (term "0"))
                              (rule "leq_literals" (formula "22"))
                              (rule "true_left" (formula "22"))
                              (rule "applyEq" (formula "37") (term "0") (ifseqformula "21"))
                              (rule "inEqSimp_homoInEq1" (formula "37"))
                              (rule "polySimp_mulComm0" (formula "37") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "37") (term "1,0"))
                              (rule "mul_literals" (formula "37") (term "0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0"))
                              (rule "polySimp_addComm1" (formula "37") (term "0"))
                              (rule "polySimp_addAssoc" (formula "37") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "37") (term "0,0,0"))
                              (rule "add_literals" (formula "37") (term "0,0,0,0"))
                              (rule "add_zero_left" (formula "37") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor0" (formula "37") (term "0,0"))
                              (rule "add_literals" (formula "37") (term "1,0,0"))
                              (rule "applyEq" (formula "15") (term "1,0,2,0") (ifseqformula "21"))
                              (rule "polySimp_addAssoc" (formula "15") (term "0,2,0"))
                              (rule "polySimp_addComm1" (formula "15") (term "0,0,2,0"))
                              (rule "add_literals" (formula "15") (term "0,0,0,2,0"))
                              (rule "add_zero_left" (formula "15") (term "0,0,2,0"))
                              (rule "polySimp_pullOutFactor0" (formula "15") (term "0,2,0"))
                              (rule "add_literals" (formula "15") (term "1,0,2,0"))
                              (rule "polySimp_elimOne" (formula "15") (term "0,2,0"))
                              (rule "eqSymm" (formula "15"))
                              (rule "applyEq" (formula "12") (term "1,1") (ifseqformula "21"))
                              (rule "polySimp_addAssoc" (formula "12") (term "1"))
                              (rule "polySimp_addComm0" (formula "12") (term "0,1"))
                              (rule "polySimp_pullOutFactor0b" (formula "12") (term "1"))
                              (rule "add_literals" (formula "12") (term "1,1,1"))
                              (rule "polySimp_elimOne" (formula "12") (term "1,1"))
                              (rule "applyEq" (formula "26") (term "1,1") (ifseqformula "21"))
                              (rule "polySimp_addAssoc" (formula "26") (term "1"))
                              (rule "polySimp_addComm0" (formula "26") (term "0,1"))
                              (rule "polySimp_pullOutFactor0b" (formula "26") (term "1"))
                              (rule "add_literals" (formula "26") (term "1,1,1"))
                              (rule "polySimp_elimOne" (formula "26") (term "1,1"))
                              (rule "applyEq" (formula "4") (term "1,1") (ifseqformula "21"))
                              (rule "polySimp_addAssoc" (formula "4") (term "1"))
                              (rule "polySimp_addComm0" (formula "4") (term "0,1"))
                              (rule "polySimp_pullOutFactor0b" (formula "4") (term "1"))
                              (rule "add_literals" (formula "4") (term "1,1,1"))
                              (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                              (rule "applyEq" (formula "16") (term "1") (ifseqformula "21"))
                              (rule "applyEq" (formula "35") (term "1,1") (ifseqformula "21"))
                              (rule "polySimp_addComm1" (formula "35") (term "1"))
                              (rule "polySimp_addAssoc" (formula "35") (term "0,1"))
                              (rule "polySimp_addComm0" (formula "35") (term "0,0,1"))
                              (rule "polySimp_pullOutFactor0b" (formula "35") (term "0,1"))
                              (rule "add_literals" (formula "35") (term "1,1,0,1"))
                              (rule "polySimp_elimOne" (formula "35") (term "1,0,1"))
                              (rule "applyEq" (formula "3") (term "1,1") (ifseqformula "21"))
                              (rule "polySimp_addComm1" (formula "3") (term "1"))
                              (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                              (rule "polySimp_addComm0" (formula "3") (term "0,0,1"))
                              (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,1"))
                              (rule "add_literals" (formula "3") (term "1,1,0,1"))
                              (rule "polySimp_elimOne" (formula "3") (term "1,0,1"))
                              (rule "applyEq" (formula "23") (term "0") (ifseqformula "15"))
                              (rule "inEqSimp_invertInEq0" (formula "19"))
                              (rule "times_zero_2" (formula "19") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "19") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "42"))
                              (rule "polySimp_mulComm0" (formula "42") (term "1"))
                              (rule "polySimp_rightDist" (formula "42") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "42") (term "1,1"))
                              (rule "mul_literals" (formula "42") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "42") (term "1,1"))
                              (rule "inEqSimp_invertInEq0" (formula "17"))
                              (rule "polySimp_mulLiterals" (formula "17") (term "0"))
                              (rule "times_zero_2" (formula "17") (term "1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "37"))
                              (rule "polySimp_mulLiterals" (formula "37") (term "0"))
                              (rule "polySimp_elimOne" (formula "37") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "10"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                              (rule "polySimp_elimOne" (formula "10") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                              (rule "polySimp_elimOne" (formula "10") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "34"))
                              (rule "polySimp_mulLiterals" (formula "34") (term "1"))
                              (rule "inEqSimp_contradEq3" (formula "49") (ifseqformula "40"))
                              (rule "polySimp_mulComm0" (formula "49") (term "1,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "49") (term "0,0"))
                              (rule "add_literals" (formula "49") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "49") (term "1,0,0"))
                              (rule "add_zero_right" (formula "49") (term "0,0"))
                              (rule "qeq_literals" (formula "49") (term "0"))
                               (builtin "One Step Simplification" (formula "49"))
                              (rule "false_right" (formula "49"))
                              (rule "inEqSimp_subsumption6" (formula "15") (ifseqformula "20"))
                              (rule "greater_literals" (formula "15") (term "0,0"))
                               (builtin "One Step Simplification" (formula "15"))
                              (rule "mul_literals" (formula "15") (term "1,0"))
                              (rule "leq_literals" (formula "15") (term "0"))
                               (builtin "One Step Simplification" (formula "15"))
                              (rule "true_left" (formula "15"))
                              (rule "inEqSimp_subsumption6" (formula "16") (ifseqformula "36"))
                              (rule "mul_literals" (formula "16") (term "1,1,0"))
                              (rule "greater_literals" (formula "16") (term "0,0"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "leq_literals" (formula "16") (term "0"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "true_left" (formula "16"))
                              (rule "inEqSimp_exactShadow1" (formula "15") (ifseqformula "32"))
                              (rule "greater_literals" (formula "15") (term "0"))
                               (builtin "One Step Simplification" (formula "15"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "15") (term "0,0"))
                              (rule "mul_literals" (formula "15") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "15") (term "0"))
                              (rule "add_literals" (formula "15") (term "1,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                              (rule "mul_literals" (formula "15") (term "1"))
                              (rule "inEqSimp_subsumption6" (formula "15") (ifseqformula "19"))
                              (rule "greater_literals" (formula "15") (term "0,0"))
                               (builtin "One Step Simplification" (formula "15"))
                              (rule "mul_literals" (formula "15") (term "1,0"))
                              (rule "leq_literals" (formula "15") (term "0"))
                               (builtin "One Step Simplification" (formula "15"))
                              (rule "true_left" (formula "15"))
                              (rule "inEqSimp_exactShadow1" (formula "15") (ifseqformula "38"))
                              (rule "greater_literals" (formula "15") (term "0"))
                               (builtin "One Step Simplification" (formula "15"))
                              (rule "polySimp_rightDist" (formula "15") (term "0,0"))
                              (rule "mul_literals" (formula "15") (term "0,0,0"))
                              (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                              (rule "mul_literals" (formula "15") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "15") (term "0"))
                              (rule "polySimp_addComm1" (formula "15") (term "0,0"))
                              (rule "add_literals" (formula "15") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "15") (term "0"))
                              (rule "add_literals" (formula "15") (term "1,1,0"))
                              (rule "polySimp_elimOne" (formula "15") (term "1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                              (rule "mul_literals" (formula "15") (term "1"))
                              (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "19"))
                              (rule "leq_literals" (formula "15") (term "0"))
                               (builtin "One Step Simplification" (formula "15"))
                              (rule "true_left" (formula "15"))
                              (rule "inEqSimp_exactShadow3" (formula "35") (ifseqformula "32"))
                              (rule "mul_literals" (formula "35") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "35"))
                              (rule "mul_literals" (formula "35") (term "1"))
                              (rule "inEqSimp_subsumption6" (formula "35") (ifseqformula "18"))
                              (rule "greater_literals" (formula "35") (term "0,0"))
                               (builtin "One Step Simplification" (formula "35"))
                              (rule "mul_literals" (formula "35") (term "1,0"))
                              (rule "leq_literals" (formula "35") (term "0"))
                               (builtin "One Step Simplification" (formula "35"))
                              (rule "true_left" (formula "35"))
                              (rule "inEqSimp_exactShadow3" (formula "35") (ifseqformula "38"))
                              (rule "mul_literals" (formula "35") (term "0,0"))
                              (rule "polySimp_addAssoc" (formula "35") (term "0"))
                              (rule "add_literals" (formula "35") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "35"))
                              (rule "mul_literals" (formula "35") (term "1"))
                              (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "35"))
                              (rule "leq_literals" (formula "18") (term "0"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "true_left" (formula "18"))
                              (rule "inEqSimp_exactShadow3" (formula "32") (ifseqformula "31"))
                              (rule "polySimp_mulAssoc" (formula "32") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "32") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "32") (term "0,0"))
                              (rule "polySimp_elimOne" (formula "32") (term "0,0"))
                              (rule "polySimp_pullOutFactor1" (formula "32") (term "0"))
                              (rule "add_literals" (formula "32") (term "1,0"))
                              (rule "inEqSimp_subsumption6" (formula "32") (ifseqformula "35"))
                              (rule "mul_literals" (formula "32") (term "1,1,0"))
                              (rule "greater_literals" (formula "32") (term "0,0"))
                               (builtin "One Step Simplification" (formula "32"))
                              (rule "leq_literals" (formula "32") (term "0"))
                               (builtin "One Step Simplification" (formula "32"))
                              (rule "true_left" (formula "32"))
                              (rule "inEqSimp_exactShadow3" (formula "32") (ifseqformula "38"))
                              (rule "polySimp_mulAssoc" (formula "32") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "32") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "32") (term "0,0"))
                              (rule "polySimp_elimOne" (formula "32") (term "0,0"))
                              (rule "polySimp_addAssoc" (formula "32") (term "0"))
                              (rule "polySimp_addComm0" (formula "32") (term "0,0"))
                              (rule "polySimp_pullOutFactor3b" (formula "32") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "32"))
                              (rule "mul_literals" (formula "32") (term "1"))
                              (rule "inEqSimp_subsumption6" (formula "32") (ifseqformula "35"))
                              (rule "mul_literals" (formula "32") (term "1,1,0"))
                              (rule "greater_literals" (formula "32") (term "0,0"))
                               (builtin "One Step Simplification" (formula "32"))
                              (rule "leq_literals" (formula "32") (term "0"))
                               (builtin "One Step Simplification" (formula "32"))
                              (rule "true_left" (formula "32"))
                              (rule "inEqSimp_exactShadow3" (formula "32") (ifseqformula "30"))
                              (rule "polySimp_mulAssoc" (formula "32") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "32") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "32") (term "0,0"))
                              (rule "polySimp_elimOne" (formula "32") (term "0,0"))
                              (rule "polySimp_addAssoc" (formula "32") (term "0"))
                              (rule "polySimp_addComm0" (formula "32") (term "0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "32") (term "0"))
                              (rule "add_literals" (formula "32") (term "1,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "32"))
                              (rule "mul_literals" (formula "32") (term "1"))
                              (rule "inEqSimp_subsumption6" (formula "32") (ifseqformula "35"))
                              (rule "mul_literals" (formula "32") (term "1,1,0"))
                              (rule "greater_literals" (formula "32") (term "0,0"))
                               (builtin "One Step Simplification" (formula "32"))
                              (rule "leq_literals" (formula "32") (term "0"))
                               (builtin "One Step Simplification" (formula "32"))
                              (rule "true_left" (formula "32"))
                              (rule "inEqSimp_exactShadow3" (formula "32") (ifseqformula "37"))
                              (rule "polySimp_mulAssoc" (formula "32") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "32") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "32") (term "0,0"))
                              (rule "polySimp_elimOne" (formula "32") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "32") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "32"))
                              (rule "mul_literals" (formula "32") (term "1"))
                              (rule "inEqSimp_subsumption1" (formula "32") (ifseqformula "35"))
                              (rule "leq_literals" (formula "32") (term "0"))
                               (builtin "One Step Simplification" (formula "32"))
                              (rule "true_left" (formula "32"))
                              (rule "onlyCreatedObjectsAreReferencedFinal" (formula "24") (term "0,0") (ifseqformula "5") (ifseqformula "7"))
                              (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "34"))
                               (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "43")))
                              (rule "true_left" (formula "24"))
                              (rule "onlyCreatedObjectsAreReferencedFinal" (formula "43") (term "0") (ifseqformula "5") (ifseqformula "7"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "44"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
                              (rule "true_left" (formula "1"))
                              (rule "cut_direct" (formula "44") (term "0"))
                              (branch "CUT: self.sorted_splitters.* cap allLocs setMinus self.sorted_splitters.* cup self.tree.tree.* = {} TRUE"
                                  (builtin "One Step Simplification" (formula "45"))
                                 (rule "all_pull_out3" (formula "13") (term "0"))
                                 (rule "all_pull_out3" (formula "41") (term "0"))
                                 (rule "all_pull_out3" (formula "27") (term "0"))
                                 (rule "shift_paren_or" (formula "13") (term "0,0"))
                                 (rule "shift_paren_or" (formula "41") (term "0,0"))
                                 (rule "shift_paren_or" (formula "27") (term "0,0"))
                                 (rule "shift_paren_or" (formula "13") (term "0,0,0"))
                                 (rule "shift_paren_or" (formula "41") (term "0,0,0"))
                                 (rule "shift_paren_or" (formula "27") (term "0,0,0"))
                                 (rule "equalityToElementOfRight" (formula "45") (inst "fv=fv") (inst "ov=ov"))
                                  (builtin "One Step Simplification" (formula "45"))
                                 (rule "allRight" (formula "45") (inst "sk=ov_0"))
                                 (rule "allRight" (formula "45") (inst "sk=fv_0"))
                                 (rule "notRight" (formula "45"))
                                 (rule "elementOfIntersect" (formula "1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                 (rule "elementOfSetMinus" (formula "2"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "elementOfUnion" (formula "43"))
                                  (builtin "One Step Simplification" (formula "43"))
                                 (rule "closeTrue" (formula "43"))
                              )
                              (branch "CUT: self.sorted_splitters.* cap allLocs setMinus self.sorted_splitters.* cup self.tree.tree.* = {} FALSE"
                                  (builtin "One Step Simplification" (formula "45"))
                                 (rule "false_right" (formula "45"))
                                 (rule "all_pull_out3" (formula "12") (term "0"))
                                 (rule "all_pull_out3" (formula "40") (term "0"))
                                 (rule "all_pull_out3" (formula "26") (term "0"))
                                 (rule "shift_paren_or" (formula "12") (term "0,0"))
                                 (rule "shift_paren_or" (formula "40") (term "0,0"))
                                 (rule "shift_paren_or" (formula "26") (term "0,0"))
                                 (rule "shift_paren_or" (formula "12") (term "0,0,0"))
                                 (rule "shift_paren_or" (formula "40") (term "0,0,0"))
                                 (rule "shift_paren_or" (formula "26") (term "0,0,0"))
                                 (rule "equalityToElementOfRight" (formula "44") (inst "fv=fv") (inst "ov=ov"))
                                  (builtin "One Step Simplification" (formula "44"))
                                 (rule "allRight" (formula "44") (inst "sk=ov_0"))
                                 (rule "allRight" (formula "44") (inst "sk=fv_0"))
                                 (rule "notRight" (formula "44"))
                                 (rule "elementOfIntersect" (formula "1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                 (rule "elementOfSetMinus" (formula "2"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "elementOfUnion" (formula "42"))
                                  (builtin "One Step Simplification" (formula "42"))
                                 (rule "closeTrue" (formula "42"))
                              )
                           )
                        )
                        (branch "CUT: classify_sk_1 >= 1 FALSE"
                            (builtin "One Step Simplification" (formula "40"))
                           (rule "true_left" (formula "40"))
                           (rule "inEqSimp_geqRight" (formula "44"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_subsumption0" (formula "41") (ifseqformula "1"))
                           (rule "leq_literals" (formula "41") (term "0"))
                            (builtin "One Step Simplification" (formula "41"))
                           (rule "true_left" (formula "41"))
                           (rule "inEqSimp_antiSymm" (formula "36") (ifseqformula "1"))
                           (rule "applyEq" (formula "40") (term "0,1,1") (ifseqformula "36"))
                           (rule "times_zero_2" (formula "40") (term "1,1"))
                           (rule "add_zero_right" (formula "40") (term "1"))
                           (rule "applyEq" (formula "38") (term "0") (ifseqformula "36"))
                           (rule "inEqSimp_homoInEq0" (formula "38"))
                           (rule "times_zero_2" (formula "38") (term "1,0"))
                           (rule "add_zero_right" (formula "38") (term "0"))
                           (rule "applyEq" (formula "51") (term "0") (ifseqformula "36"))
                           (rule "eqSymm" (formula "51"))
                           (rule "applyEqRigid" (formula "43") (term "0,2,0") (ifseqformula "36"))
                           (rule "applyEq" (formula "37") (term "0") (ifseqformula "36"))
                           (rule "qeq_literals" (formula "37"))
                           (rule "true_left" (formula "37"))
                           (rule "applyEq" (formula "41") (term "1,1") (ifseqformula "36"))
                           (rule "add_zero_right" (formula "41") (term "1"))
                           (rule "applyEqRigid" (formula "38") (term "1,1") (ifseqformula "36"))
                           (rule "add_zero_right" (formula "38") (term "1"))
                           (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "36"))
                           (rule "times_zero_2" (formula "18") (term "0"))
                           (rule "inEqSimp_homoInEq1" (formula "18"))
                           (rule "times_zero_2" (formula "18") (term "1,0"))
                           (rule "add_zero_right" (formula "18") (term "0"))
                           (rule "applyEqRigid" (formula "19") (term "0,1,1") (ifseqformula "36"))
                           (rule "times_zero_2" (formula "19") (term "1,1"))
                           (rule "add_zero_right" (formula "19") (term "1"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "35"))
                           (rule "leq_literals" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "applyEqRigid" (formula "33") (term "1,0,1") (ifseqformula "34"))
                           (rule "add_zero_right" (formula "33") (term "0,1"))
                           (rule "applyEqRigid" (formula "2") (term "1,0,1") (ifseqformula "34"))
                           (rule "add_zero_right" (formula "2") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "35"))
                           (rule "mul_literals" (formula "35") (term "1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "17"))
                           (rule "mul_literals" (formula "17") (term "1"))
                           (rule "inEqSimp_contradEq7" (formula "46") (ifseqformula "19"))
                           (rule "times_zero_1" (formula "46") (term "1,0,0"))
                           (rule "add_zero_right" (formula "46") (term "0,0"))
                           (rule "leq_literals" (formula "46") (term "0"))
                            (builtin "One Step Simplification" (formula "46"))
                           (rule "false_right" (formula "46"))
                           (rule "inEqSimp_subsumption6" (formula "34") (ifseqformula "19"))
                           (rule "greater_literals" (formula "34") (term "0,0"))
                            (builtin "One Step Simplification" (formula "34"))
                           (rule "mul_literals" (formula "34") (term "1,0"))
                           (rule "leq_literals" (formula "34") (term "0"))
                            (builtin "One Step Simplification" (formula "34"))
                           (rule "true_left" (formula "34"))
                           (rule "inEqSimp_subsumption1" (formula "35") (ifseqformula "9"))
                           (rule "inEqSimp_homoInEq0" (formula "35") (term "0"))
                           (rule "polySimp_mulComm0" (formula "35") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "35") (term "1,0,0"))
                           (rule "mul_literals" (formula "35") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "35") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "35") (term "0,0,0"))
                           (rule "add_literals" (formula "35") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0"))
                           (rule "add_literals" (formula "35") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "35") (term "1,0,0"))
                           (rule "add_zero_right" (formula "35") (term "0,0"))
                           (rule "qeq_literals" (formula "35") (term "0"))
                            (builtin "One Step Simplification" (formula "35"))
                           (rule "true_left" (formula "35"))
                           (rule "inEqSimp_exactShadow3" (formula "34") (ifseqformula "10"))
                           (rule "polySimp_rightDist" (formula "34") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "34") (term "1,0,0"))
                           (rule "mul_literals" (formula "34") (term "0,0,0"))
                           (rule "polySimp_elimOne" (formula "34") (term "1,0,0"))
                           (rule "polySimp_addAssoc" (formula "34") (term "0"))
                           (rule "polySimp_addComm1" (formula "34") (term "0,0"))
                           (rule "add_literals" (formula "34") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor3b" (formula "34") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "34"))
                           (rule "mul_literals" (formula "34") (term "1"))
                           (rule "inEqSimp_subsumption6" (formula "34") (ifseqformula "19"))
                           (rule "greater_literals" (formula "34") (term "0,0"))
                            (builtin "One Step Simplification" (formula "34"))
                           (rule "mul_literals" (formula "34") (term "1,0"))
                           (rule "leq_literals" (formula "34") (term "0"))
                            (builtin "One Step Simplification" (formula "34"))
                           (rule "true_left" (formula "34"))
                           (rule "arrayLengthNotNegative" (formula "27") (term "0"))
                           (rule "cut_direct" (formula "21") (term "1"))
                           (branch "CUT: self.sorted_splitters[classify_sk_0] >= value TRUE"
                               (builtin "One Step Simplification" (formula "22"))
                              (rule "true_left" (formula "22"))
                              (rule "all_pull_out3" (formula "13") (term "0"))
                              (rule "all_pull_out3" (formula "30") (term "0"))
                              (rule "all_pull_out3" (formula "38") (term "0"))
                              (rule "shift_paren_or" (formula "13") (term "0,0"))
                              (rule "shift_paren_or" (formula "30") (term "0,0"))
                              (rule "shift_paren_or" (formula "38") (term "0,0"))
                              (rule "shift_paren_or" (formula "13") (term "0,0,0"))
                              (rule "shift_paren_or" (formula "30") (term "0,0,0"))
                              (rule "shift_paren_or" (formula "38") (term "0,0,0"))
                              (rule "onlyCreatedObjectsAreReferencedFinal" (formula "14") (term "1,0") (ifseqformula "4") (ifseqformula "6"))
                              (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "41"))
                               (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "37")))
                              (rule "true_left" (formula "14"))
                              (rule "onlyCreatedObjectsAreReferencedFinal" (formula "41") (term "0") (ifseqformula "4") (ifseqformula "6"))
                              (rule "replace_known_left" (formula "1") (term "1") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "42")))
                              (rule "true_left" (formula "1"))
                              (rule "cut_direct" (formula "42") (term "0"))
                              (branch "CUT: self.sorted_splitters.* cap allLocs setMinus self.sorted_splitters.* cup self.tree.tree.* = {} TRUE"
                                  (builtin "One Step Simplification" (formula "43"))
                                 (rule "equalityToElementOfRight" (formula "43") (inst "fv=fv") (inst "ov=ov"))
                                  (builtin "One Step Simplification" (formula "43"))
                                 (rule "allRight" (formula "43") (inst "sk=ov_0"))
                                 (rule "allRight" (formula "43") (inst "sk=fv_0"))
                                 (rule "notRight" (formula "43"))
                                 (rule "elementOfIntersect" (formula "1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                 (rule "elementOfSetMinus" (formula "2"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "elementOfUnion" (formula "41"))
                                  (builtin "One Step Simplification" (formula "41"))
                                 (rule "closeTrue" (formula "41"))
                              )
                              (branch "CUT: self.sorted_splitters.* cap allLocs setMinus self.sorted_splitters.* cup self.tree.tree.* = {} FALSE"
                                  (builtin "One Step Simplification" (formula "43"))
                                 (rule "false_right" (formula "43"))
                                 (rule "equalityToElementOfRight" (formula "42") (inst "fv=fv") (inst "ov=ov"))
                                  (builtin "One Step Simplification" (formula "42"))
                                 (rule "allRight" (formula "42") (inst "sk=ov_0"))
                                 (rule "allRight" (formula "42") (inst "sk=fv_0"))
                                 (rule "notRight" (formula "42"))
                                 (rule "elementOfIntersect" (formula "1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                 (rule "elementOfSetMinus" (formula "2"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "elementOfUnion" (formula "40"))
                                  (builtin "One Step Simplification" (formula "40"))
                                 (rule "closeTrue" (formula "40"))
                              )
                           )
                           (branch "CUT: self.sorted_splitters[classify_sk_0] >= value FALSE"
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "notLeft" (formula "21"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1"))
                              (rule "polySimp_rightDist" (formula "2") (term "1"))
                              (rule "mul_literals" (formula "2") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1"))
                              (rule "polySimp_rightDist" (formula "1") (term "1"))
                              (rule "mul_literals" (formula "1") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                              (rule "inEqSimp_antiSymm" (formula "20") (ifseqformula "1"))
                              (rule "applyEq" (formula "1") (term "0") (ifseqformula "20"))
                              (rule "inEqSimp_homoInEq0" (formula "1"))
                              (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                              (rule "add_literals" (formula "1") (term "1,0"))
                              (rule "times_zero_1" (formula "1") (term "0"))
                              (rule "qeq_literals" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "applyEq" (formula "10") (term "0") (ifseqformula "19"))
                              (rule "inEqSimp_homoInEq1" (formula "10"))
                              (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "10") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0"))
                              (rule "mul_literals" (formula "10") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "10") (term "0"))
                              (rule "polySimp_addComm1" (formula "10") (term "0,0"))
                              (rule "add_literals" (formula "10") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                              (rule "add_literals" (formula "10") (term "1,1,0"))
                              (rule "applyEq" (formula "20") (term "0") (ifseqformula "19"))
                              (rule "inEqSimp_homoInEq1" (formula "20"))
                              (rule "polySimp_pullOutFactor1" (formula "20") (term "0"))
                              (rule "add_literals" (formula "20") (term "1,0"))
                              (rule "times_zero_1" (formula "20") (term "0"))
                              (rule "leq_literals" (formula "20"))
                              (rule "true_left" (formula "20"))
                              (rule "applyEq" (formula "14") (term "1,1,1,0,0") (ifseqformula "19"))
                              (rule "polySimp_addAssoc" (formula "14") (term "1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "14") (term "0,1,1,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "14") (term "1,1,0,0"))
                              (rule "add_literals" (formula "14") (term "1,1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                              (rule "applyEq" (formula "30") (term "1,1,0,0,0,1,0") (ifseqformula "19"))
                              (rule "polySimp_addAssoc" (formula "30") (term "1,0,0,0,1,0"))
                              (rule "polySimp_addComm1" (formula "30") (term "0,1,0,0,0,1,0"))
                              (rule "add_literals" (formula "30") (term "0,0,1,0,0,0,1,0"))
                              (rule "add_zero_left" (formula "30") (term "0,1,0,0,0,1,0"))
                              (rule "polySimp_pullOutFactor0" (formula "30") (term "1,0,0,0,1,0"))
                              (rule "add_literals" (formula "30") (term "1,1,0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "30") (term "1,0,0,0,1,0"))
                              (rule "applyEq" (formula "38") (term "1,1,1,0,0") (ifseqformula "19"))
                              (rule "polySimp_addAssoc" (formula "38") (term "1,1,0,0"))
                              (rule "polySimp_addComm1" (formula "38") (term "0,1,1,0,0"))
                              (rule "add_literals" (formula "38") (term "0,0,1,1,0,0"))
                              (rule "add_zero_left" (formula "38") (term "0,1,1,0,0"))
                              (rule "polySimp_pullOutFactor0" (formula "38") (term "1,1,0,0"))
                              (rule "add_literals" (formula "38") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0"))
                              (rule "applyEq" (formula "28") (term "1,1") (ifseqformula "19"))
                              (rule "polySimp_addAssoc" (formula "28") (term "1"))
                              (rule "polySimp_addComm0" (formula "28") (term "0,1"))
                              (rule "polySimp_pullOutFactor0b" (formula "28") (term "1"))
                              (rule "add_literals" (formula "28") (term "1,1,1"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,1"))
                              (rule "applyEq" (formula "35") (term "0") (ifseqformula "19"))
                              (rule "inEqSimp_homoInEq1" (formula "35"))
                              (rule "polySimp_mulComm0" (formula "35") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "35") (term "1,0"))
                              (rule "mul_literals" (formula "35") (term "0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0"))
                              (rule "polySimp_addAssoc" (formula "35") (term "0"))
                              (rule "polySimp_addComm1" (formula "35") (term "0,0"))
                              (rule "add_literals" (formula "35") (term "0,0,0"))
                              (rule "add_zero_left" (formula "35") (term "0,0"))
                              (rule "polySimp_pullOutFactor0" (formula "35") (term "0"))
                              (rule "add_literals" (formula "35") (term "1,0"))
                              (rule "applyEq" (formula "29") (term "1,1,1,0,0") (ifseqformula "19"))
                              (rule "polySimp_addAssoc" (formula "29") (term "1,1,0,0"))
                              (rule "polySimp_addComm1" (formula "29") (term "0,1,1,0,0"))
                              (rule "add_literals" (formula "29") (term "0,0,1,1,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "29") (term "1,1,0,0"))
                              (rule "add_literals" (formula "29") (term "1,1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0"))
                              (rule "applyEq" (formula "11") (term "0") (ifseqformula "19"))
                              (rule "inEqSimp_homoInEq0" (formula "11"))
                              (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "11") (term "1,0"))
                              (rule "mul_literals" (formula "11") (term "0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0"))
                              (rule "polySimp_addAssoc" (formula "11") (term "0"))
                              (rule "polySimp_addComm1" (formula "11") (term "0,0"))
                              (rule "add_literals" (formula "11") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "11") (term "0"))
                              (rule "add_literals" (formula "11") (term "1,1,0"))
                              (rule "applyEq" (formula "14") (term "1,1,0,0,0,1,0") (ifseqformula "19"))
                              (rule "polySimp_addAssoc" (formula "14") (term "1,0,0,0,1,0"))
                              (rule "polySimp_addComm0" (formula "14") (term "0,1,0,0,0,1,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "14") (term "1,0,0,0,1,0"))
                              (rule "add_literals" (formula "14") (term "1,1,1,0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,1,0"))
                              (rule "applyEq" (formula "17") (term "0") (ifseqformula "19"))
                              (rule "inEqSimp_homoInEq1" (formula "17"))
                              (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "17") (term "1,0"))
                              (rule "mul_literals" (formula "17") (term "0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0"))
                              (rule "polySimp_addAssoc" (formula "17") (term "0"))
                              (rule "add_literals" (formula "17") (term "0,0"))
                              (rule "add_zero_left" (formula "17") (term "0"))
                              (rule "applyEq" (formula "30") (term "1,1,1,0,0") (ifseqformula "19"))
                              (rule "polySimp_addAssoc" (formula "30") (term "1,1,0,0"))
                              (rule "polySimp_addComm1" (formula "30") (term "0,1,1,0,0"))
                              (rule "add_literals" (formula "30") (term "0,0,1,1,0,0"))
                              (rule "add_zero_left" (formula "30") (term "0,1,1,0,0"))
                              (rule "polySimp_pullOutFactor0" (formula "30") (term "1,1,0,0"))
                              (rule "add_literals" (formula "30") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0"))
                              (rule "applyEq" (formula "26") (term "1,1") (ifseqformula "19"))
                              (rule "polySimp_addAssoc" (formula "26") (term "1"))
                              (rule "polySimp_addComm0" (formula "26") (term "0,1"))
                              (rule "polySimp_pullOutFactor0b" (formula "26") (term "1"))
                              (rule "add_literals" (formula "26") (term "1,1,1"))
                              (rule "polySimp_elimOne" (formula "26") (term "1,1"))
                              (rule "applyEq" (formula "15") (term "1,0,2,0") (ifseqformula "19"))
                              (rule "eqSymm" (formula "15"))
                              (rule "polySimp_addAssoc" (formula "15") (term "0,2,1"))
                              (rule "polySimp_addComm1" (formula "15") (term "0,0,2,1"))
                              (rule "add_literals" (formula "15") (term "0,0,0,2,1"))
                              (rule "polySimp_pullOutFactor0b" (formula "15") (term "0,2,1"))
                              (rule "add_literals" (formula "15") (term "1,1,0,2,1"))
                              (rule "polySimp_elimOne" (formula "15") (term "1,0,2,1"))
                              (rule "applyEq" (formula "38") (term "1,1,0,0,0,1,0") (ifseqformula "19"))
                              (rule "polySimp_addAssoc" (formula "38") (term "1,0,0,0,1,0"))
                              (rule "polySimp_addComm1" (formula "38") (term "0,1,0,0,0,1,0"))
                              (rule "add_literals" (formula "38") (term "0,0,1,0,0,0,1,0"))
                              (rule "add_zero_left" (formula "38") (term "0,1,0,0,0,1,0"))
                              (rule "polySimp_pullOutFactor0" (formula "38") (term "1,0,0,0,1,0"))
                              (rule "add_literals" (formula "38") (term "1,1,0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "38") (term "1,0,0,0,1,0"))
                              (rule "applyEq" (formula "15") (term "1,0,2,0") (ifseqformula "19"))
                              (rule "polySimp_addAssoc" (formula "15") (term "0,2,0"))
                              (rule "polySimp_addComm1" (formula "15") (term "0,0,2,0"))
                              (rule "add_literals" (formula "15") (term "0,0,0,2,0"))
                              (rule "add_zero_left" (formula "15") (term "0,0,2,0"))
                              (rule "polySimp_pullOutFactor0" (formula "15") (term "0,2,0"))
                              (rule "add_literals" (formula "15") (term "1,0,2,0"))
                              (rule "polySimp_elimOne" (formula "15") (term "0,2,0"))
                              (rule "eqSymm" (formula "15"))
                              (rule "applyEq" (formula "12") (term "1,1") (ifseqformula "19"))
                              (rule "polySimp_addAssoc" (formula "12") (term "1"))
                              (rule "polySimp_addComm0" (formula "12") (term "0,1"))
                              (rule "polySimp_pullOutFactor0b" (formula "12") (term "1"))
                              (rule "add_literals" (formula "12") (term "1,1,1"))
                              (rule "polySimp_elimOne" (formula "12") (term "1,1"))
                              (rule "applyEq" (formula "3") (term "1,1") (ifseqformula "19"))
                              (rule "polySimp_addAssoc" (formula "3") (term "1"))
                              (rule "polySimp_addComm0" (formula "3") (term "0,1"))
                              (rule "polySimp_pullOutFactor0b" (formula "3") (term "1"))
                              (rule "add_literals" (formula "3") (term "1,1,1"))
                              (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                              (rule "applyEq" (formula "16") (term "1") (ifseqformula "19"))
                              (rule "applyEq" (formula "33") (term "1,1") (ifseqformula "19"))
                              (rule "polySimp_addAssoc" (formula "33") (term "1"))
                              (rule "polySimp_addComm0" (formula "33") (term "0,1"))
                              (rule "polySimp_pullOutFactor0b" (formula "33") (term "1"))
                              (rule "add_literals" (formula "33") (term "1,1,1"))
                              (rule "polySimp_elimOne" (formula "33") (term "1,1"))
                              (rule "applyEq" (formula "4") (term "1,1") (ifseqformula "19"))
                              (rule "polySimp_addAssoc" (formula "4") (term "1"))
                              (rule "polySimp_addComm0" (formula "4") (term "0,1"))
                              (rule "polySimp_pullOutFactor0b" (formula "4") (term "1"))
                              (rule "add_literals" (formula "4") (term "1,1,1"))
                              (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                              (rule "applyEq" (formula "24") (term "1,1") (ifseqformula "19"))
                              (rule "polySimp_addAssoc" (formula "24") (term "1"))
                              (rule "polySimp_addComm0" (formula "24") (term "0,1"))
                              (rule "polySimp_pullOutFactor0b" (formula "24") (term "1"))
                              (rule "add_literals" (formula "24") (term "1,1,1"))
                              (rule "polySimp_elimOne" (formula "24") (term "1,1"))
                              (rule "applyEq" (formula "21") (term "0") (ifseqformula "15"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "10"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                              (rule "polySimp_elimOne" (formula "10") (term "0"))
                              (rule "inEqSimp_invertInEq0" (formula "33"))
                              (rule "polySimp_mulLiterals" (formula "33") (term "0"))
                              (rule "times_zero_2" (formula "33") (term "1"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                              (rule "polySimp_elimOne" (formula "10") (term "0"))
                              (rule "inEqSimp_invertInEq0" (formula "15"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                              (rule "times_zero_2" (formula "15") (term "1"))
                              (rule "inEqSimp_subsumption6" (formula "32") (ifseqformula "18"))
                              (rule "greater_literals" (formula "32") (term "0,0"))
                               (builtin "One Step Simplification" (formula "32"))
                              (rule "mul_literals" (formula "32") (term "1,0"))
                              (rule "leq_literals" (formula "32") (term "0"))
                               (builtin "One Step Simplification" (formula "32"))
                              (rule "true_left" (formula "32"))
                              (rule "inEqSimp_subsumption6" (formula "15") (ifseqformula "18"))
                              (rule "greater_literals" (formula "15") (term "0,0"))
                               (builtin "One Step Simplification" (formula "15"))
                              (rule "mul_literals" (formula "15") (term "1,0"))
                              (rule "leq_literals" (formula "15") (term "0"))
                               (builtin "One Step Simplification" (formula "15"))
                              (rule "true_left" (formula "15"))
                              (rule "onlyCreatedObjectsAreReferencedFinal" (formula "24") (term "0,0") (ifseqformula "5") (ifseqformula "7"))
                              (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "32"))
                               (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "36")))
                              (rule "true_left" (formula "24"))
                              (rule "onlyCreatedObjectsAreReferencedFinal" (formula "36") (term "0") (ifseqformula "5") (ifseqformula "7"))
                              (rule "replace_known_left" (formula "1") (term "1") (ifseqformula "3"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "37")))
                              (rule "true_left" (formula "1"))
                              (rule "cut_direct" (formula "37") (term "0"))
                              (branch "CUT: self.sorted_splitters.* cap allLocs setMinus self.sorted_splitters.* cup self.tree.tree.* = {} TRUE"
                                  (builtin "One Step Simplification" (formula "38"))
                                 (rule "all_pull_out3" (formula "13") (term "0"))
                                 (rule "shift_paren_or" (formula "13") (term "0,0"))
                                 (rule "shift_paren_or" (formula "13") (term "0,0,0"))
                                 (rule "all_pull_out3" (formula "27") (term "0"))
                                 (rule "shift_paren_or" (formula "27") (term "0,0"))
                                 (rule "shift_paren_or" (formula "27") (term "0,0,0"))
                                 (rule "equalityToElementOfRight" (formula "38") (inst "fv=fv") (inst "ov=ov"))
                                  (builtin "One Step Simplification" (formula "38"))
                                 (rule "allRight" (formula "38") (inst "sk=ov_0"))
                                 (rule "allRight" (formula "38") (inst "sk=fv_0"))
                                 (rule "notRight" (formula "38"))
                                 (rule "elementOfIntersect" (formula "1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                 (rule "elementOfSetMinus" (formula "2"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "elementOfUnion" (formula "36"))
                                  (builtin "One Step Simplification" (formula "36"))
                                 (rule "closeTrue" (formula "36"))
                              )
                              (branch "CUT: self.sorted_splitters.* cap allLocs setMinus self.sorted_splitters.* cup self.tree.tree.* = {} FALSE"
                                  (builtin "One Step Simplification" (formula "38"))
                                 (rule "false_right" (formula "38"))
                                 (rule "all_pull_out3" (formula "12") (term "0"))
                                 (rule "shift_paren_or" (formula "12") (term "0,0"))
                                 (rule "shift_paren_or" (formula "12") (term "0,0,0"))
                                 (rule "all_pull_out3" (formula "26") (term "0"))
                                 (rule "shift_paren_or" (formula "26") (term "0,0"))
                                 (rule "shift_paren_or" (formula "26") (term "0,0,0"))
                                 (rule "equalityToElementOfRight" (formula "37") (inst "fv=fv") (inst "ov=ov"))
                                  (builtin "One Step Simplification" (formula "37"))
                                 (rule "allRight" (formula "37") (inst "sk=ov_0"))
                                 (rule "allRight" (formula "37") (inst "sk=fv_0"))
                                 (rule "notRight" (formula "37"))
                                 (rule "elementOfIntersect" (formula "1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                 (rule "elementOfSetMinus" (formula "2"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "elementOfUnion" (formula "35"))
                                  (builtin "One Step Simplification" (formula "35"))
                                 (rule "closeTrue" (formula "35"))
                              )
                           )
                        )
                     )
                     (branch "CUT: self.tree.<created> = TRUE FALSE"
                         (builtin "One Step Simplification" (formula "48"))
                        (rule "false_right" (formula "48"))
                        (rule "cut_direct" (formula "39") (term "0"))
                        (branch "CUT: classify_sk_1 >= 1 TRUE"
                            (builtin "One Step Simplification" (formula "40"))
                           (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "39"))
                           (rule "leq_literals" (formula "34") (term "0"))
                            (builtin "One Step Simplification" (formula "34"))
                           (rule "true_left" (formula "34"))
                           (rule "inEqSimp_exactShadow3" (formula "38") (ifseqformula "34"))
                           (rule "mul_literals" (formula "38") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "38") (term "0"))
                           (rule "add_literals" (formula "38") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "38"))
                           (rule "mul_literals" (formula "38") (term "1"))
                           (rule "inEqSimp_subsumption6" (formula "38") (ifseqformula "20"))
                           (rule "greater_literals" (formula "38") (term "0,0"))
                            (builtin "One Step Simplification" (formula "38"))
                           (rule "mul_literals" (formula "38") (term "1,0"))
                           (rule "leq_literals" (formula "38") (term "0"))
                            (builtin "One Step Simplification" (formula "38"))
                           (rule "true_left" (formula "38"))
                           (rule "arrayLengthNotNegative" (formula "28") (term "0"))
                           (rule "cut_direct" (formula "22") (term "1"))
                           (branch "CUT: self.sorted_splitters[classify_sk_0] >= value TRUE"
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "all_pull_out3" (formula "12") (term "0"))
                              (rule "shift_paren_or" (formula "12") (term "0,0"))
                              (rule "shift_paren_or" (formula "12") (term "0,0,0"))
                              (rule "all_pull_out3" (formula "31") (term "0"))
                              (rule "shift_paren_or" (formula "31") (term "0,0"))
                              (rule "shift_paren_or" (formula "31") (term "0,0,0"))
                              (rule "all_pull_out3" (formula "44") (term "0"))
                              (rule "shift_paren_or" (formula "44") (term "0,0"))
                              (rule "shift_paren_or" (formula "44") (term "0,0,0"))
                              (rule "onlyCreatedObjectsAreReferencedFinal" (formula "24") (term "0,0") (ifseqformula "3") (ifseqformula "5"))
                              (rule "replace_known_right" (formula "24") (term "0") (ifseqformula "48"))
                               (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "49")))
                              (rule "closeFalse" (formula "24"))
                           )
                           (branch "CUT: self.sorted_splitters[classify_sk_0] >= value FALSE"
                               (builtin "One Step Simplification" (formula "22"))
                              (rule "notLeft" (formula "22"))
                              (rule "inEqSimp_geqRight" (formula "45"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "inEqSimp_geqRight" (formula "45"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1"))
                              (rule "polySimp_rightDist" (formula "2") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                              (rule "mul_literals" (formula "2") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1"))
                              (rule "polySimp_rightDist" (formula "1") (term "1"))
                              (rule "mul_literals" (formula "1") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                              (rule "inEqSimp_antiSymm" (formula "21") (ifseqformula "1"))
                              (rule "applyEq" (formula "33") (term "1,1,0,0,0,1,0") (ifseqformula "21"))
                              (rule "polySimp_addAssoc" (formula "33") (term "1,0,0,0,1,0"))
                              (rule "polySimp_addComm1" (formula "33") (term "0,1,0,0,0,1,0"))
                              (rule "add_literals" (formula "33") (term "0,0,1,0,0,0,1,0"))
                              (rule "add_zero_left" (formula "33") (term "0,1,0,0,0,1,0"))
                              (rule "polySimp_pullOutFactor0" (formula "33") (term "1,0,0,0,1,0"))
                              (rule "add_literals" (formula "33") (term "1,1,0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "33") (term "1,0,0,0,1,0"))
                              (rule "applyEq" (formula "17") (term "0") (ifseqformula "21"))
                              (rule "inEqSimp_homoInEq1" (formula "17"))
                              (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "17") (term "1,0"))
                              (rule "mul_literals" (formula "17") (term "0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0"))
                              (rule "polySimp_addAssoc" (formula "17") (term "0"))
                              (rule "add_literals" (formula "17") (term "0,0"))
                              (rule "add_zero_left" (formula "17") (term "0"))
                              (rule "applyEq" (formula "31") (term "1,1") (ifseqformula "21"))
                              (rule "polySimp_addAssoc" (formula "31") (term "1"))
                              (rule "polySimp_addComm0" (formula "31") (term "0,1"))
                              (rule "polySimp_pullOutFactor0b" (formula "31") (term "1"))
                              (rule "add_literals" (formula "31") (term "1,1,1"))
                              (rule "polySimp_elimOne" (formula "31") (term "1,1"))
                              (rule "applyEq" (formula "44") (term "0") (ifseqformula "21"))
                              (rule "inEqSimp_homoInEq1" (formula "44"))
                              (rule "polySimp_mulComm0" (formula "44") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "44") (term "1,0"))
                              (rule "mul_literals" (formula "44") (term "0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "44") (term "1,1,0"))
                              (rule "polySimp_addComm1" (formula "44") (term "0"))
                              (rule "polySimp_addAssoc" (formula "44") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "44") (term "0,0,0"))
                              (rule "add_literals" (formula "44") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "44") (term "0,0"))
                              (rule "add_literals" (formula "44") (term "1,1,0,0"))
                              (rule "applyEq" (formula "32") (term "1,1,1,0,0") (ifseqformula "21"))
                              (rule "polySimp_addAssoc" (formula "32") (term "1,1,0,0"))
                              (rule "polySimp_addComm1" (formula "32") (term "0,1,1,0,0"))
                              (rule "add_literals" (formula "32") (term "0,0,1,1,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "32") (term "1,1,0,0"))
                              (rule "add_literals" (formula "32") (term "1,1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0"))
                              (rule "applyEq" (formula "10") (term "0") (ifseqformula "21"))
                              (rule "inEqSimp_homoInEq1" (formula "10"))
                              (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "10") (term "1,0"))
                              (rule "mul_literals" (formula "10") (term "0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0"))
                              (rule "polySimp_addAssoc" (formula "10") (term "0"))
                              (rule "polySimp_addComm1" (formula "10") (term "0,0"))
                              (rule "add_literals" (formula "10") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                              (rule "add_literals" (formula "10") (term "1,1,0"))
                              (rule "applyEq" (formula "11") (term "0") (ifseqformula "21"))
                              (rule "inEqSimp_homoInEq0" (formula "11"))
                              (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "11") (term "1,0"))
                              (rule "mul_literals" (formula "11") (term "0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0"))
                              (rule "polySimp_addAssoc" (formula "11") (term "0"))
                              (rule "polySimp_addComm1" (formula "11") (term "0,0"))
                              (rule "add_literals" (formula "11") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "11") (term "0"))
                              (rule "add_literals" (formula "11") (term "1,1,0"))
                              (rule "applyEq" (formula "38") (term "0") (ifseqformula "21"))
                              (rule "inEqSimp_homoInEq1" (formula "38"))
                              (rule "polySimp_mulComm0" (formula "38") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "38") (term "1,0"))
                              (rule "mul_literals" (formula "38") (term "0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0"))
                              (rule "polySimp_addComm1" (formula "38") (term "0"))
                              (rule "polySimp_addAssoc" (formula "38") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "38") (term "0,0,0"))
                              (rule "add_literals" (formula "38") (term "0,0,0,0"))
                              (rule "add_zero_left" (formula "38") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor0" (formula "38") (term "0,0"))
                              (rule "add_literals" (formula "38") (term "1,0,0"))
                              (rule "applyEq" (formula "14") (term "1,1,1,0,0") (ifseqformula "21"))
                              (rule "polySimp_addAssoc" (formula "14") (term "1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "14") (term "0,1,1,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "14") (term "1,1,0,0"))
                              (rule "add_literals" (formula "14") (term "1,1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                              (rule "applyEq" (formula "1") (term "0") (ifseqformula "21"))
                              (rule "inEqSimp_homoInEq0" (formula "1"))
                              (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                              (rule "add_literals" (formula "1") (term "1,0"))
                              (rule "times_zero_1" (formula "1") (term "0"))
                              (rule "qeq_literals" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "applyEq" (formula "38") (term "0") (ifseqformula "20"))
                              (rule "inEqSimp_homoInEq1" (formula "38"))
                              (rule "polySimp_mulComm0" (formula "38") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "38") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0"))
                              (rule "mul_literals" (formula "38") (term "0,1,0"))
                              (rule "polySimp_addComm1" (formula "38") (term "0"))
                              (rule "polySimp_addAssoc" (formula "38") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "38") (term "0,0,0"))
                              (rule "add_literals" (formula "38") (term "0,0,0,0"))
                              (rule "add_zero_left" (formula "38") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor1" (formula "38") (term "0,0"))
                              (rule "add_literals" (formula "38") (term "1,0,0"))
                              (rule "applyEq" (formula "21") (term "0") (ifseqformula "20"))
                              (rule "inEqSimp_homoInEq1" (formula "21"))
                              (rule "polySimp_pullOutFactor1" (formula "21") (term "0"))
                              (rule "add_literals" (formula "21") (term "1,0"))
                              (rule "times_zero_1" (formula "21") (term "0"))
                              (rule "leq_literals" (formula "21"))
                              (rule "true_left" (formula "21"))
                              (rule "applyEq" (formula "18") (term "0") (ifseqformula "20"))
                              (rule "inEqSimp_homoInEq1" (formula "18"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0"))
                              (rule "mul_literals" (formula "18") (term "0,1,0"))
                              (rule "polySimp_addComm1" (formula "18") (term "0"))
                              (rule "polySimp_addAssoc" (formula "18") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "18") (term "0,0,0"))
                              (rule "add_literals" (formula "18") (term "0,0,0,0"))
                              (rule "add_zero_left" (formula "18") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor0" (formula "18") (term "0,0"))
                              (rule "add_literals" (formula "18") (term "1,0,0"))
                              (rule "times_zero_1" (formula "18") (term "0,0"))
                              (rule "add_zero_left" (formula "18") (term "0"))
                              (rule "applyEq" (formula "14") (term "1,0,2,0") (ifseqformula "20"))
                              (rule "eqSymm" (formula "14"))
                              (rule "polySimp_addAssoc" (formula "14") (term "0,2,1"))
                              (rule "polySimp_addComm1" (formula "14") (term "0,0,2,1"))
                              (rule "add_literals" (formula "14") (term "0,0,0,2,1"))
                              (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,2,1"))
                              (rule "add_literals" (formula "14") (term "1,1,0,2,1"))
                              (rule "polySimp_elimOne" (formula "14") (term "1,0,2,1"))
                              (rule "applyEq" (formula "27") (term "1,1") (ifseqformula "20"))
                              (rule "polySimp_addAssoc" (formula "27") (term "1"))
                              (rule "polySimp_addComm0" (formula "27") (term "0,1"))
                              (rule "polySimp_pullOutFactor0b" (formula "27") (term "1"))
                              (rule "add_literals" (formula "27") (term "1,1,1"))
                              (rule "polySimp_elimOne" (formula "27") (term "1,1"))
                              (rule "applyEq" (formula "44") (term "1,1,0,0,0,1,0") (ifseqformula "20"))
                              (rule "polySimp_addAssoc" (formula "44") (term "1,0,0,0,1,0"))
                              (rule "polySimp_addComm1" (formula "44") (term "0,1,0,0,0,1,0"))
                              (rule "add_literals" (formula "44") (term "0,0,1,0,0,0,1,0"))
                              (rule "add_zero_left" (formula "44") (term "0,1,0,0,0,1,0"))
                              (rule "polySimp_pullOutFactor0" (formula "44") (term "1,0,0,0,1,0"))
                              (rule "add_literals" (formula "44") (term "1,1,0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "44") (term "1,0,0,0,1,0"))
                              (rule "applyEq" (formula "31") (term "1,1,1,0,0") (ifseqformula "20"))
                              (rule "polySimp_addAssoc" (formula "31") (term "1,1,0,0"))
                              (rule "polySimp_addComm1" (formula "31") (term "0,1,1,0,0"))
                              (rule "add_literals" (formula "31") (term "0,0,1,1,0,0"))
                              (rule "add_zero_left" (formula "31") (term "0,1,1,0,0"))
                              (rule "polySimp_pullOutFactor0" (formula "31") (term "1,1,0,0"))
                              (rule "add_literals" (formula "31") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0"))
                              (rule "applyEq" (formula "44") (term "1,1,1,0,0") (ifseqformula "20"))
                              (rule "polySimp_addAssoc" (formula "44") (term "1,1,0,0"))
                              (rule "polySimp_addComm1" (formula "44") (term "0,1,1,0,0"))
                              (rule "add_literals" (formula "44") (term "0,0,1,1,0,0"))
                              (rule "add_zero_left" (formula "44") (term "0,1,1,0,0"))
                              (rule "polySimp_pullOutFactor0" (formula "44") (term "1,1,0,0"))
                              (rule "add_literals" (formula "44") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "44") (term "1,1,0,0"))
                              (rule "applyEq" (formula "13") (term "1,1,0,0,0,1,0") (ifseqformula "20"))
                              (rule "polySimp_addAssoc" (formula "13") (term "1,0,0,0,1,0"))
                              (rule "polySimp_addComm0" (formula "13") (term "0,1,0,0,0,1,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "13") (term "1,0,0,0,1,0"))
                              (rule "add_literals" (formula "13") (term "1,1,1,0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,1,0"))
                              (rule "applyEq" (formula "14") (term "1,0,2,0") (ifseqformula "20"))
                              (rule "polySimp_addAssoc" (formula "14") (term "0,2,0"))
                              (rule "polySimp_addComm1" (formula "14") (term "0,0,2,0"))
                              (rule "add_literals" (formula "14") (term "0,0,0,2,0"))
                              (rule "add_zero_left" (formula "14") (term "0,0,2,0"))
                              (rule "polySimp_pullOutFactor0" (formula "14") (term "0,2,0"))
                              (rule "add_literals" (formula "14") (term "1,0,2,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "0,2,0"))
                              (rule "eqSymm" (formula "14"))
                              (rule "applyEq" (formula "34") (term "1,1") (ifseqformula "20"))
                              (rule "polySimp_addComm1" (formula "34") (term "1"))
                              (rule "polySimp_addAssoc" (formula "34") (term "0,1"))
                              (rule "polySimp_addComm0" (formula "34") (term "0,0,1"))
                              (rule "polySimp_pullOutFactor0b" (formula "34") (term "0,1"))
                              (rule "add_literals" (formula "34") (term "1,1,0,1"))
                              (rule "polySimp_elimOne" (formula "34") (term "1,0,1"))
                              (rule "applyEq" (formula "25") (term "1,1") (ifseqformula "20"))
                              (rule "polySimp_addAssoc" (formula "25") (term "1"))
                              (rule "polySimp_addComm0" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor0b" (formula "25") (term "1"))
                              (rule "add_literals" (formula "25") (term "1,1,1"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1"))
                              (rule "applyEq" (formula "15") (term "1") (ifseqformula "20"))
                              (rule "applyEq" (formula "11") (term "1,1") (ifseqformula "20"))
                              (rule "polySimp_addAssoc" (formula "11") (term "1"))
                              (rule "polySimp_addComm0" (formula "11") (term "0,1"))
                              (rule "polySimp_pullOutFactor0b" (formula "11") (term "1"))
                              (rule "add_literals" (formula "11") (term "1,1,1"))
                              (rule "polySimp_elimOne" (formula "11") (term "1,1"))
                              (rule "applyEq" (formula "3") (term "1,1") (ifseqformula "20"))
                              (rule "polySimp_addAssoc" (formula "3") (term "1"))
                              (rule "polySimp_addComm0" (formula "3") (term "0,1"))
                              (rule "polySimp_pullOutFactor0b" (formula "3") (term "1"))
                              (rule "add_literals" (formula "3") (term "1,1,1"))
                              (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                              (rule "applyEq" (formula "2") (term "1,1") (ifseqformula "20"))
                              (rule "polySimp_addComm1" (formula "2") (term "1"))
                              (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
                              (rule "polySimp_addComm0" (formula "2") (term "0,0,1"))
                              (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,1"))
                              (rule "add_literals" (formula "2") (term "1,1,0,1"))
                              (rule "polySimp_elimOne" (formula "2") (term "1,0,1"))
                              (rule "applyEq" (formula "22") (term "0") (ifseqformula "14"))
                              (rule "inEqSimp_invertInEq0" (formula "16"))
                              (rule "times_zero_2" (formula "16") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "41"))
                              (rule "polySimp_mulComm0" (formula "41") (term "1"))
                              (rule "polySimp_rightDist" (formula "41") (term "1"))
                              (rule "mul_literals" (formula "41") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "41") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "41") (term "1,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "9"))
                              (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                              (rule "polySimp_elimOne" (formula "9") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                              (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                              (rule "polySimp_elimOne" (formula "9") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "33"))
                              (rule "polySimp_mulLiterals" (formula "33") (term "1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "34"))
                              (rule "polySimp_mulLiterals" (formula "34") (term "0"))
                              (rule "polySimp_elimOne" (formula "34") (term "0"))
                              (rule "inEqSimp_invertInEq0" (formula "16"))
                              (rule "times_zero_2" (formula "16") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                              (rule "inEqSimp_contradEq3" (formula "48") (ifseqformula "39"))
                              (rule "polySimp_mulComm0" (formula "48") (term "1,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "48") (term "0,0"))
                              (rule "add_literals" (formula "48") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "48") (term "1,0,0"))
                              (rule "add_zero_right" (formula "48") (term "0,0"))
                              (rule "qeq_literals" (formula "48") (term "0"))
                               (builtin "One Step Simplification" (formula "48"))
                              (rule "false_right" (formula "48"))
                              (rule "inEqSimp_subsumption6" (formula "16") (ifseqformula "36"))
                              (rule "greater_literals" (formula "16") (term "0,0"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "mul_literals" (formula "16") (term "1,0"))
                              (rule "leq_literals" (formula "16") (term "0"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "true_left" (formula "16"))
                              (rule "inEqSimp_subsumption6" (formula "14") (ifseqformula "18"))
                              (rule "mul_literals" (formula "14") (term "1,1,0"))
                              (rule "greater_literals" (formula "14") (term "0,0"))
                               (builtin "One Step Simplification" (formula "14"))
                              (rule "leq_literals" (formula "14") (term "0"))
                               (builtin "One Step Simplification" (formula "14"))
                              (rule "true_left" (formula "14"))
                              (rule "inEqSimp_exactShadow1" (formula "14") (ifseqformula "37"))
                              (rule "greater_literals" (formula "14") (term "0"))
                               (builtin "One Step Simplification" (formula "14"))
                              (rule "polySimp_rightDist" (formula "14") (term "0,0"))
                              (rule "mul_literals" (formula "14") (term "0,0,0"))
                              (rule "polySimp_rightDist" (formula "14") (term "1,0"))
                              (rule "mul_literals" (formula "14") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "14") (term "0"))
                              (rule "polySimp_addComm1" (formula "14") (term "0,0"))
                              (rule "add_literals" (formula "14") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "14") (term "0"))
                              (rule "add_literals" (formula "14") (term "1,1,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                              (rule "mul_literals" (formula "14") (term "1"))
                              (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "18"))
                              (rule "leq_literals" (formula "14") (term "0"))
                               (builtin "One Step Simplification" (formula "14"))
                              (rule "true_left" (formula "14"))
                              (rule "inEqSimp_exactShadow3" (formula "32") (ifseqformula "31"))
                              (rule "polySimp_mulAssoc" (formula "32") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "32") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "32") (term "0,0"))
                              (rule "polySimp_pullOutFactor0" (formula "32") (term "0"))
                              (rule "add_literals" (formula "32") (term "1,0"))
                              (rule "inEqSimp_subsumption6" (formula "32") (ifseqformula "17"))
                              (rule "mul_literals" (formula "32") (term "1,1,0"))
                              (rule "greater_literals" (formula "32") (term "0,0"))
                               (builtin "One Step Simplification" (formula "32"))
                              (rule "leq_literals" (formula "32") (term "0"))
                               (builtin "One Step Simplification" (formula "32"))
                              (rule "true_left" (formula "32"))
                              (rule "inEqSimp_exactShadow3" (formula "32") (ifseqformula "37"))
                              (rule "polySimp_mulAssoc" (formula "32") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "32") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "32") (term "0,0"))
                              (rule "polySimp_elimOne" (formula "32") (term "0,0"))
                              (rule "polySimp_addAssoc" (formula "32") (term "0"))
                              (rule "polySimp_addComm0" (formula "32") (term "0,0"))
                              (rule "polySimp_pullOutFactor3b" (formula "32") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "32"))
                              (rule "mul_literals" (formula "32") (term "1"))
                              (rule "inEqSimp_subsumption6" (formula "32") (ifseqformula "17"))
                              (rule "mul_literals" (formula "32") (term "1,1,0"))
                              (rule "greater_literals" (formula "32") (term "0,0"))
                               (builtin "One Step Simplification" (formula "32"))
                              (rule "leq_literals" (formula "32") (term "0"))
                               (builtin "One Step Simplification" (formula "32"))
                              (rule "true_left" (formula "32"))
                              (rule "inEqSimp_exactShadow3" (formula "32") (ifseqformula "30"))
                              (rule "polySimp_mulAssoc" (formula "32") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "32") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "32") (term "0,0"))
                              (rule "polySimp_elimOne" (formula "32") (term "0,0"))
                              (rule "polySimp_addAssoc" (formula "32") (term "0"))
                              (rule "polySimp_addComm0" (formula "32") (term "0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "32") (term "0"))
                              (rule "add_literals" (formula "32") (term "1,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "32"))
                              (rule "mul_literals" (formula "32") (term "1"))
                              (rule "inEqSimp_subsumption6" (formula "32") (ifseqformula "17"))
                              (rule "greater_literals" (formula "32") (term "0,0"))
                               (builtin "One Step Simplification" (formula "32"))
                              (rule "mul_literals" (formula "32") (term "1,0"))
                              (rule "leq_literals" (formula "32") (term "0"))
                               (builtin "One Step Simplification" (formula "32"))
                              (rule "true_left" (formula "32"))
                              (rule "inEqSimp_exactShadow3" (formula "34") (ifseqformula "31"))
                              (rule "mul_literals" (formula "34") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "34"))
                              (rule "mul_literals" (formula "34") (term "1"))
                              (rule "inEqSimp_subsumption6" (formula "34") (ifseqformula "17"))
                              (rule "mul_literals" (formula "34") (term "1,1,0"))
                              (rule "greater_literals" (formula "34") (term "0,0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_exactShadow3" (formula "32") (ifseqformula "36"))
                              (rule "polySimp_mulAssoc" (formula "32") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "32") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "32") (term "0,0"))
                              (rule "polySimp_elimOne" (formula "32") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "32") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "32"))
                              (rule "mul_literals" (formula "32") (term "1"))
                              (rule "inEqSimp_subsumption1" (formula "32") (ifseqformula "17"))
                              (rule "leq_literals" (formula "32") (term "0"))
                               (builtin "One Step Simplification" (formula "32"))
                              (rule "true_left" (formula "32"))
                              (rule "inEqSimp_exactShadow3" (formula "34") (ifseqformula "37"))
                              (rule "mul_literals" (formula "34") (term "0,0"))
                              (rule "polySimp_addAssoc" (formula "34") (term "0"))
                              (rule "add_literals" (formula "34") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "34"))
                              (rule "mul_literals" (formula "34") (term "1"))
                              (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "34"))
                              (rule "leq_literals" (formula "17") (term "0"))
                               (builtin "One Step Simplification" (formula "17"))
                              (rule "true_left" (formula "17"))
                              (rule "inEqSimp_exactShadow1" (formula "14") (ifseqformula "30"))
                              (rule "greater_literals" (formula "14") (term "0"))
                               (builtin "One Step Simplification" (formula "14"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "14") (term "0,0"))
                              (rule "mul_literals" (formula "14") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "14") (term "0"))
                              (rule "add_literals" (formula "14") (term "1,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                              (rule "mul_literals" (formula "14") (term "1"))
                              (rule "inEqSimp_subsumption6" (formula "14") (ifseqformula "34"))
                              (rule "greater_literals" (formula "14") (term "0,0"))
                               (builtin "One Step Simplification" (formula "14"))
                              (rule "mul_literals" (formula "14") (term "1,0"))
                              (rule "leq_literals" (formula "14") (term "0"))
                               (builtin "One Step Simplification" (formula "14"))
                              (rule "true_left" (formula "14"))
                              (rule "onlyCreatedObjectsAreReferencedFinal" (formula "28") (term "0,0,1,1,1,0,0") (ifseqformula "4") (ifseqformula "6"))
                              (rule "replace_known_right" (formula "28") (term "0") (ifseqformula "43"))
                               (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "44")))
                              (rule "closeFalse" (formula "28"))
                           )
                        )
                        (branch "CUT: classify_sk_1 >= 1 FALSE"
                            (builtin "One Step Simplification" (formula "39"))
                           (rule "true_left" (formula "39"))
                           (rule "inEqSimp_geqRight" (formula "43"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_subsumption0" (formula "40") (ifseqformula "1"))
                           (rule "leq_literals" (formula "40") (term "0"))
                            (builtin "One Step Simplification" (formula "40"))
                           (rule "true_left" (formula "40"))
                           (rule "inEqSimp_antiSymm" (formula "35") (ifseqformula "1"))
                           (rule "applyEq" (formula "50") (term "0") (ifseqformula "35"))
                           (rule "eqSymm" (formula "50"))
                           (rule "applyEqRigid" (formula "37") (term "0") (ifseqformula "35"))
                           (rule "inEqSimp_homoInEq0" (formula "37"))
                           (rule "times_zero_2" (formula "37") (term "1,0"))
                           (rule "add_zero_right" (formula "37") (term "0"))
                           (rule "applyEq" (formula "18") (term "0,1,1") (ifseqformula "35"))
                           (rule "times_zero_2" (formula "18") (term "1,1"))
                           (rule "add_zero_right" (formula "18") (term "1"))
                           (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "34"))
                           (rule "leq_literals" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "applyEqRigid" (formula "40") (term "0,2,0") (ifseqformula "33"))
                           (rule "applyEq" (formula "34") (term "0") (ifseqformula "33"))
                           (rule "qeq_literals" (formula "34"))
                           (rule "true_left" (formula "34"))
                           (rule "applyEqRigid" (formula "38") (term "1,1") (ifseqformula "33"))
                           (rule "add_zero_right" (formula "38") (term "1"))
                           (rule "applyEq" (formula "36") (term "0,1,1") (ifseqformula "33"))
                           (rule "times_zero_2" (formula "36") (term "1,1"))
                           (rule "add_zero_right" (formula "36") (term "1"))
                           (rule "applyEqRigid" (formula "16") (term "0,0") (ifseqformula "33"))
                           (rule "times_zero_2" (formula "16") (term "0"))
                           (rule "inEqSimp_homoInEq1" (formula "16"))
                           (rule "times_zero_2" (formula "16") (term "1,0"))
                           (rule "add_zero_right" (formula "16") (term "0"))
                           (rule "applyEq" (formula "35") (term "1,1") (ifseqformula "33"))
                           (rule "add_zero_right" (formula "35") (term "1"))
                           (rule "applyEq" (formula "32") (term "1,0,1") (ifseqformula "33"))
                           (rule "add_zero_right" (formula "32") (term "0,1"))
                           (rule "applyEqRigid" (formula "1") (term "1,0,1") (ifseqformula "33"))
                           (rule "add_zero_right" (formula "1") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "34"))
                           (rule "mul_literals" (formula "34") (term "1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "16"))
                           (rule "mul_literals" (formula "16") (term "1"))
                           (rule "inEqSimp_contradEq7" (formula "45") (ifseqformula "18"))
                           (rule "times_zero_1" (formula "45") (term "1,0,0"))
                           (rule "add_zero_right" (formula "45") (term "0,0"))
                           (rule "leq_literals" (formula "45") (term "0"))
                            (builtin "One Step Simplification" (formula "45"))
                           (rule "false_right" (formula "45"))
                           (rule "inEqSimp_subsumption1" (formula "35") (ifseqformula "8"))
                           (rule "inEqSimp_homoInEq0" (formula "35") (term "0"))
                           (rule "polySimp_mulComm0" (formula "35") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "35") (term "1,0,0"))
                           (rule "mul_literals" (formula "35") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "35") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "35") (term "0,0,0"))
                           (rule "add_literals" (formula "35") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0"))
                           (rule "add_literals" (formula "35") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "35") (term "1,0,0"))
                           (rule "add_zero_right" (formula "35") (term "0,0"))
                           (rule "qeq_literals" (formula "35") (term "0"))
                            (builtin "One Step Simplification" (formula "35"))
                           (rule "true_left" (formula "35"))
                           (rule "inEqSimp_subsumption6" (formula "33") (ifseqformula "18"))
                           (rule "mul_literals" (formula "33") (term "1,1,0"))
                           (rule "greater_literals" (formula "33") (term "0,0"))
                            (builtin "One Step Simplification" (formula "33"))
                           (rule "leq_literals" (formula "33") (term "0"))
                            (builtin "One Step Simplification" (formula "33"))
                           (rule "true_left" (formula "33"))
                           (rule "inEqSimp_exactShadow3" (formula "33") (ifseqformula "9"))
                           (rule "polySimp_rightDist" (formula "33") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "33") (term "1,0,0"))
                           (rule "mul_literals" (formula "33") (term "0,0,0"))
                           (rule "polySimp_elimOne" (formula "33") (term "1,0,0"))
                           (rule "polySimp_addAssoc" (formula "33") (term "0"))
                           (rule "polySimp_addComm1" (formula "33") (term "0,0"))
                           (rule "add_literals" (formula "33") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor3b" (formula "33") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "33"))
                           (rule "mul_literals" (formula "33") (term "1"))
                           (rule "inEqSimp_subsumption6" (formula "33") (ifseqformula "18"))
                           (rule "mul_literals" (formula "33") (term "1,1,0"))
                           (rule "greater_literals" (formula "33") (term "0,0"))
                            (builtin "One Step Simplification" (formula "33"))
                           (rule "leq_literals" (formula "33") (term "0"))
                            (builtin "One Step Simplification" (formula "33"))
                           (rule "true_left" (formula "33"))
                           (rule "arrayLengthNotNegative" (formula "26") (term "0"))
                           (rule "cut_direct" (formula "20") (term "1"))
                           (branch "CUT: self.sorted_splitters[classify_sk_0] >= value TRUE"
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "true_left" (formula "21"))
                              (rule "all_pull_out3" (formula "12") (term "0"))
                              (rule "all_pull_out3" (formula "29") (term "0"))
                              (rule "all_pull_out3" (formula "37") (term "0"))
                              (rule "shift_paren_or" (formula "12") (term "0,0"))
                              (rule "shift_paren_or" (formula "29") (term "0,0"))
                              (rule "shift_paren_or" (formula "37") (term "0,0"))
                              (rule "shift_paren_or" (formula "12") (term "0,0,0"))
                              (rule "shift_paren_or" (formula "29") (term "0,0,0"))
                              (rule "shift_paren_or" (formula "37") (term "0,0,0"))
                              (rule "onlyCreatedObjectsAreReferencedFinal" (formula "13") (term "1,0") (ifseqformula "3") (ifseqformula "5"))
                              (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "36"))
                               (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "40")))
                              (rule "true_left" (formula "13"))
                              (rule "onlyCreatedObjectsAreReferencedFinal" (formula "21") (term "0,0") (ifseqformula "3") (ifseqformula "5"))
                              (rule "replace_known_right" (formula "21") (term "1") (ifseqformula "42"))
                               (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "41")))
                              (rule "closeFalse" (formula "21"))
                           )
                           (branch "CUT: self.sorted_splitters[classify_sk_0] >= value FALSE"
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "notLeft" (formula "20"))
                              (rule "inEqSimp_geqRight" (formula "38"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "inEqSimp_geqRight" (formula "38"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1"))
                              (rule "polySimp_rightDist" (formula "2") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                              (rule "mul_literals" (formula "2") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1"))
                              (rule "polySimp_rightDist" (formula "1") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                              (rule "mul_literals" (formula "1") (term "0,1"))
                              (rule "inEqSimp_antiSymm" (formula "19") (ifseqformula "1"))
                              (rule "applyEq" (formula "39") (term "1,1,1,0,0") (ifseqformula "19"))
                              (rule "polySimp_addAssoc" (formula "39") (term "1,1,0,0"))
                              (rule "polySimp_addComm1" (formula "39") (term "0,1,1,0,0"))
                              (rule "add_literals" (formula "39") (term "0,0,1,1,0,0"))
                              (rule "add_zero_left" (formula "39") (term "0,1,1,0,0"))
                              (rule "polySimp_pullOutFactor0" (formula "39") (term "1,1,0,0"))
                              (rule "add_literals" (formula "39") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "39") (term "1,1,0,0"))
                              (rule "applyEq" (formula "36") (term "0") (ifseqformula "19"))
                              (rule "inEqSimp_homoInEq1" (formula "36"))
                              (rule "polySimp_mulComm0" (formula "36") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "36") (term "1,0"))
                              (rule "mul_literals" (formula "36") (term "0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0"))
                              (rule "polySimp_addAssoc" (formula "36") (term "0"))
                              (rule "polySimp_addComm1" (formula "36") (term "0,0"))
                              (rule "add_literals" (formula "36") (term "0,0,0"))
                              (rule "add_zero_left" (formula "36") (term "0,0"))
                              (rule "polySimp_pullOutFactor0" (formula "36") (term "0"))
                              (rule "add_literals" (formula "36") (term "1,0"))
                              (rule "applyEq" (formula "31") (term "1,1,0,0,0,1,0") (ifseqformula "19"))
                              (rule "polySimp_addAssoc" (formula "31") (term "1,0,0,0,1,0"))
                              (rule "polySimp_addComm1" (formula "31") (term "0,1,0,0,0,1,0"))
                              (rule "add_literals" (formula "31") (term "0,0,1,0,0,0,1,0"))
                              (rule "add_zero_left" (formula "31") (term "0,1,0,0,0,1,0"))
                              (rule "polySimp_pullOutFactor0" (formula "31") (term "1,0,0,0,1,0"))
                              (rule "add_literals" (formula "31") (term "1,1,0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "31") (term "1,0,0,0,1,0"))
                              (rule "applyEq" (formula "14") (term "1,1,0,0,0,1,0") (ifseqformula "19"))
                              (rule "polySimp_addAssoc" (formula "14") (term "1,0,0,0,1,0"))
                              (rule "polySimp_addComm0" (formula "14") (term "0,1,0,0,0,1,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "14") (term "1,0,0,0,1,0"))
                              (rule "add_literals" (formula "14") (term "1,1,1,0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,1,0"))
                              (rule "applyEq" (formula "27") (term "1,1") (ifseqformula "19"))
                              (rule "polySimp_addAssoc" (formula "27") (term "1"))
                              (rule "polySimp_addComm0" (formula "27") (term "0,1"))
                              (rule "polySimp_pullOutFactor0b" (formula "27") (term "1"))
                              (rule "add_literals" (formula "27") (term "1,1,1"))
                              (rule "polySimp_elimOne" (formula "27") (term "1,1"))
                              (rule "applyEq" (formula "10") (term "0") (ifseqformula "19"))
                              (rule "inEqSimp_homoInEq1" (formula "10"))
                              (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "10") (term "1,0"))
                              (rule "mul_literals" (formula "10") (term "0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0"))
                              (rule "polySimp_addAssoc" (formula "10") (term "0"))
                              (rule "polySimp_addComm1" (formula "10") (term "0,0"))
                              (rule "add_literals" (formula "10") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                              (rule "add_literals" (formula "10") (term "1,1,0"))
                              (rule "applyEq" (formula "39") (term "1,1,0,0,0,1,0") (ifseqformula "19"))
                              (rule "polySimp_addAssoc" (formula "39") (term "1,0,0,0,1,0"))
                              (rule "polySimp_addComm1" (formula "39") (term "0,1,0,0,0,1,0"))
                              (rule "add_literals" (formula "39") (term "0,0,1,0,0,0,1,0"))
                              (rule "add_zero_left" (formula "39") (term "0,1,0,0,0,1,0"))
                              (rule "polySimp_pullOutFactor0" (formula "39") (term "1,0,0,0,1,0"))
                              (rule "add_literals" (formula "39") (term "1,1,0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "39") (term "1,0,0,0,1,0"))
                              (rule "applyEq" (formula "30") (term "1,1,1,0,0") (ifseqformula "19"))
                              (rule "polySimp_addAssoc" (formula "30") (term "1,1,0,0"))
                              (rule "polySimp_addComm1" (formula "30") (term "0,1,1,0,0"))
                              (rule "add_literals" (formula "30") (term "0,0,1,1,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "30") (term "1,1,0,0"))
                              (rule "add_literals" (formula "30") (term "1,1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0"))
                              (rule "applyEq" (formula "29") (term "1,1") (ifseqformula "19"))
                              (rule "polySimp_addAssoc" (formula "29") (term "1"))
                              (rule "polySimp_addComm0" (formula "29") (term "0,1"))
                              (rule "polySimp_pullOutFactor0b" (formula "29") (term "1"))
                              (rule "add_literals" (formula "29") (term "1,1,1"))
                              (rule "polySimp_elimOne" (formula "29") (term "1,1"))
                              (rule "applyEq" (formula "15") (term "1,0,2,0") (ifseqformula "19"))
                              (rule "eqSymm" (formula "15"))
                              (rule "polySimp_addAssoc" (formula "15") (term "0,2,1"))
                              (rule "polySimp_addComm1" (formula "15") (term "0,0,2,1"))
                              (rule "add_literals" (formula "15") (term "0,0,0,2,1"))
                              (rule "polySimp_pullOutFactor0b" (formula "15") (term "0,2,1"))
                              (rule "add_literals" (formula "15") (term "1,1,0,2,1"))
                              (rule "polySimp_elimOne" (formula "15") (term "1,0,2,1"))
                              (rule "applyEq" (formula "1") (term "0") (ifseqformula "19"))
                              (rule "inEqSimp_homoInEq0" (formula "1"))
                              (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                              (rule "add_literals" (formula "1") (term "1,0"))
                              (rule "times_zero_1" (formula "1") (term "0"))
                              (rule "qeq_literals" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "applyEq" (formula "10") (term "0") (ifseqformula "18"))
                              (rule "inEqSimp_homoInEq0" (formula "10"))
                              (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "10") (term "1,0"))
                              (rule "mul_literals" (formula "10") (term "0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0"))
                              (rule "polySimp_addAssoc" (formula "10") (term "0"))
                              (rule "polySimp_addComm1" (formula "10") (term "0,0"))
                              (rule "add_literals" (formula "10") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                              (rule "add_literals" (formula "10") (term "1,1,0"))
                              (rule "applyEq" (formula "16") (term "0") (ifseqformula "18"))
                              (rule "inEqSimp_homoInEq1" (formula "16"))
                              (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0"))
                              (rule "mul_literals" (formula "16") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "16") (term "0"))
                              (rule "add_literals" (formula "16") (term "0,0"))
                              (rule "add_zero_left" (formula "16") (term "0"))
                              (rule "applyEq" (formula "30") (term "1,1,1,0,0") (ifseqformula "18"))
                              (rule "polySimp_addAssoc" (formula "30") (term "1,1,0,0"))
                              (rule "polySimp_addComm1" (formula "30") (term "0,1,1,0,0"))
                              (rule "add_literals" (formula "30") (term "0,0,1,1,0,0"))
                              (rule "add_zero_left" (formula "30") (term "0,1,1,0,0"))
                              (rule "polySimp_pullOutFactor0" (formula "30") (term "1,1,0,0"))
                              (rule "add_literals" (formula "30") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0"))
                              (rule "applyEq" (formula "13") (term "1,1,1,0,0") (ifseqformula "18"))
                              (rule "polySimp_addAssoc" (formula "13") (term "1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "13") (term "0,1,1,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "13") (term "1,1,0,0"))
                              (rule "add_literals" (formula "13") (term "1,1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
                              (rule "applyEq" (formula "19") (term "0") (ifseqformula "18"))
                              (rule "inEqSimp_homoInEq1" (formula "19"))
                              (rule "polySimp_pullOutFactor1" (formula "19") (term "0"))
                              (rule "add_literals" (formula "19") (term "1,0"))
                              (rule "times_zero_1" (formula "19") (term "0"))
                              (rule "leq_literals" (formula "19"))
                              (rule "true_left" (formula "19"))
                              (rule "applyEq" (formula "14") (term "1,0,2,0") (ifseqformula "18"))
                              (rule "polySimp_addAssoc" (formula "14") (term "0,2,0"))
                              (rule "polySimp_addComm1" (formula "14") (term "0,0,2,0"))
                              (rule "add_literals" (formula "14") (term "0,0,0,2,0"))
                              (rule "add_zero_left" (formula "14") (term "0,0,2,0"))
                              (rule "polySimp_pullOutFactor0" (formula "14") (term "0,2,0"))
                              (rule "add_literals" (formula "14") (term "1,0,2,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "0,2,0"))
                              (rule "eqSymm" (formula "14"))
                              (rule "applyEq" (formula "23") (term "1,1") (ifseqformula "18"))
                              (rule "polySimp_addAssoc" (formula "23") (term "1"))
                              (rule "polySimp_addComm0" (formula "23") (term "0,1"))
                              (rule "polySimp_pullOutFactor0b" (formula "23") (term "1"))
                              (rule "add_literals" (formula "23") (term "1,1,1"))
                              (rule "polySimp_elimOne" (formula "23") (term "1,1"))
                              (rule "applyEq" (formula "32") (term "1,1") (ifseqformula "18"))
                              (rule "polySimp_addAssoc" (formula "32") (term "1"))
                              (rule "polySimp_addComm0" (formula "32") (term "0,1"))
                              (rule "polySimp_pullOutFactor0b" (formula "32") (term "1"))
                              (rule "add_literals" (formula "32") (term "1,1,1"))
                              (rule "polySimp_elimOne" (formula "32") (term "1,1"))
                              (rule "applyEq" (formula "2") (term "1,1") (ifseqformula "18"))
                              (rule "polySimp_addAssoc" (formula "2") (term "1"))
                              (rule "polySimp_addComm0" (formula "2") (term "0,1"))
                              (rule "polySimp_pullOutFactor0b" (formula "2") (term "1"))
                              (rule "add_literals" (formula "2") (term "1,1,1"))
                              (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                              (rule "applyEq" (formula "15") (term "1") (ifseqformula "18"))
                              (rule "applyEq" (formula "3") (term "1,1") (ifseqformula "18"))
                              (rule "polySimp_addAssoc" (formula "3") (term "1"))
                              (rule "polySimp_addComm0" (formula "3") (term "0,1"))
                              (rule "polySimp_pullOutFactor0b" (formula "3") (term "1"))
                              (rule "add_literals" (formula "3") (term "1,1,1"))
                              (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                              (rule "applyEq" (formula "11") (term "1,1") (ifseqformula "18"))
                              (rule "polySimp_addAssoc" (formula "11") (term "1"))
                              (rule "polySimp_addComm0" (formula "11") (term "0,1"))
                              (rule "polySimp_pullOutFactor0b" (formula "11") (term "1"))
                              (rule "add_literals" (formula "11") (term "1,1,1"))
                              (rule "polySimp_elimOne" (formula "11") (term "1,1"))
                              (rule "applyEq" (formula "20") (term "0") (ifseqformula "14"))
                              (rule "inEqSimp_invertInEq0" (formula "33"))
                              (rule "polySimp_mulLiterals" (formula "33") (term "0"))
                              (rule "times_zero_2" (formula "33") (term "1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "9"))
                              (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                              (rule "polySimp_elimOne" (formula "9") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                              (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                              (rule "polySimp_elimOne" (formula "9") (term "0"))
                              (rule "inEqSimp_invertInEq0" (formula "14"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                              (rule "times_zero_2" (formula "14") (term "1"))
                              (rule "inEqSimp_subsumption5" (formula "31") (ifseqformula "14"))
                              (rule "times_zero_1" (formula "31") (term "1,1,0"))
                              (rule "times_zero_1" (formula "31") (term "0,1,0"))
                              (rule "greater_literals" (formula "31") (term "1,0,0"))
                               (builtin "One Step Simplification" (formula "31"))
                              (rule "greater_literals" (formula "31") (term "0,0"))
                               (builtin "One Step Simplification" (formula "31"))
                              (rule "leq_literals" (formula "31") (term "0"))
                               (builtin "One Step Simplification" (formula "31"))
                              (rule "true_left" (formula "31"))
                              (rule "inEqSimp_subsumption6" (formula "14") (ifseqformula "17"))
                              (rule "mul_literals" (formula "14") (term "1,1,0"))
                              (rule "greater_literals" (formula "14") (term "0,0"))
                               (builtin "One Step Simplification" (formula "14"))
                              (rule "leq_literals" (formula "14") (term "0"))
                               (builtin "One Step Simplification" (formula "14"))
                              (rule "true_left" (formula "14"))
                              (rule "onlyCreatedObjectsAreReferencedFinal" (formula "23") (term "0,0") (ifseqformula "4") (ifseqformula "6"))
                              (rule "replace_known_left" (formula "23") (term "1") (ifseqformula "31"))
                               (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "35")))
                              (rule "true_left" (formula "23"))
                              (rule "onlyCreatedObjectsAreReferencedFinal" (formula "35") (term "0") (ifseqformula "4") (ifseqformula "6"))
                              (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "37"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "36")))
                              (rule "closeFalse" (formula "1"))
                           )
                        )
                     )
                  )
                  (branch "CUT: result_241 >= 2 + classify_sk_0 + classify_sk_1 FALSE"
                      (builtin "One Step Simplification" (formula "42"))
                     (rule "true_left" (formula "42"))
                     (rule "inEqSimp_geqRight" (formula "43"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "1") (term "0,1"))
                     (rule "mul_literals" (formula "1") (term "0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,0,1"))
                     (rule "inEqSimp_antiSymm" (formula "40") (ifseqformula "1"))
                     (rule "applyEq" (formula "13") (term "1,1,1,0,0") (ifseqformula "40"))
                     (rule "polySimp_addAssoc" (formula "13") (term "1,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0,1,1,0,0"))
                     (rule "polySimp_addComm0" (formula "13") (term "0,0,1,1,0,0"))
                     (rule "polySimp_pullOutFactor2b" (formula "13") (term "0,1,1,0,0"))
                     (rule "add_literals" (formula "13") (term "1,1,0,1,1,0,0"))
                     (rule "times_zero_1" (formula "13") (term "1,0,1,1,0,0"))
                     (rule "add_zero_right" (formula "13") (term "0,1,1,0,0"))
                     (rule "applyEq" (formula "38") (term "0") (ifseqformula "40"))
                     (rule "inEqSimp_homoInEq1" (formula "38"))
                     (rule "polySimp_mulComm0" (formula "38") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "38") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "38") (term "0,1,0"))
                     (rule "mul_literals" (formula "38") (term "0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "38") (term "0"))
                     (rule "polySimp_addComm1" (formula "38") (term "0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "38") (term "0"))
                     (rule "add_literals" (formula "38") (term "1,1,0"))
                     (rule "polySimp_addAssoc" (formula "38") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "38") (term "0,0,0"))
                     (rule "add_literals" (formula "38") (term "0,0,0,0"))
                     (rule "add_zero_left" (formula "38") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor1" (formula "38") (term "0,0"))
                     (rule "add_literals" (formula "38") (term "1,0,0"))
                     (rule "times_zero_1" (formula "38") (term "0,0"))
                     (rule "add_zero_left" (formula "38") (term "0"))
                     (rule "applyEq" (formula "13") (term "1,1,0,0,0,1,0") (ifseqformula "40"))
                     (rule "polySimp_addAssoc" (formula "13") (term "1,0,0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0,1,0,0,0,1,0"))
                     (rule "polySimp_addComm0" (formula "13") (term "0,0,1,0,0,0,1,0"))
                     (rule "polySimp_pullOutFactor2b" (formula "13") (term "0,1,0,0,0,1,0"))
                     (rule "add_literals" (formula "13") (term "1,1,0,1,0,0,0,1,0"))
                     (rule "times_zero_1" (formula "13") (term "1,0,1,0,0,0,1,0"))
                     (rule "add_zero_right" (formula "13") (term "0,1,0,0,0,1,0"))
                     (rule "applyEq" (formula "44") (term "1,1,0,0,0,1,0") (ifseqformula "40"))
                     (rule "polySimp_addAssoc" (formula "44") (term "1,0,0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "44") (term "0,1,0,0,0,1,0"))
                     (rule "polySimp_addComm1" (formula "44") (term "0,0,1,0,0,0,1,0"))
                     (rule "add_literals" (formula "44") (term "0,0,0,1,0,0,0,1,0"))
                     (rule "add_zero_left" (formula "44") (term "0,0,1,0,0,0,1,0"))
                     (rule "polySimp_pullOutFactor2" (formula "44") (term "0,1,0,0,0,1,0"))
                     (rule "add_literals" (formula "44") (term "1,0,1,0,0,0,1,0"))
                     (rule "times_zero_1" (formula "44") (term "0,1,0,0,0,1,0"))
                     (rule "add_zero_left" (formula "44") (term "1,0,0,0,1,0"))
                     (rule "applyEq" (formula "20") (term "0") (ifseqformula "40"))
                     (rule "inEqSimp_homoInEq1" (formula "20"))
                     (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "20") (term "0,1,0"))
                     (rule "mul_literals" (formula "20") (term "0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "20") (term "0"))
                     (rule "polySimp_addAssoc" (formula "20") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "20") (term "0,0,0"))
                     (rule "add_literals" (formula "20") (term "0,0,0,0"))
                     (rule "add_zero_left" (formula "20") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor0" (formula "20") (term "0,0"))
                     (rule "add_literals" (formula "20") (term "1,0,0"))
                     (rule "polySimp_elimOne" (formula "20") (term "0,0"))
                     (rule "applyEq" (formula "37") (term "0") (ifseqformula "40"))
                     (rule "inEqSimp_homoInEq1" (formula "37"))
                     (rule "polySimp_mulComm0" (formula "37") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "37") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "37") (term "0,1,0"))
                     (rule "mul_literals" (formula "37") (term "0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "37") (term "0"))
                     (rule "polySimp_addComm1" (formula "37") (term "0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "37") (term "0"))
                     (rule "add_literals" (formula "37") (term "1,1,0"))
                     (rule "times_zero_1" (formula "37") (term "1,0"))
                     (rule "add_zero_right" (formula "37") (term "0"))
                     (rule "polySimp_addAssoc" (formula "37") (term "0"))
                     (rule "polySimp_addComm1" (formula "37") (term "0,0"))
                     (rule "add_literals" (formula "37") (term "0,0,0"))
                     (rule "add_zero_left" (formula "37") (term "0,0"))
                     (rule "polySimp_pullOutFactor3" (formula "37") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "37") (term "0"))
                     (rule "applyEq" (formula "31") (term "1,1,0,0,0,1,0") (ifseqformula "40"))
                     (rule "polySimp_addAssoc" (formula "31") (term "1,0,0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "31") (term "0,1,0,0,0,1,0"))
                     (rule "polySimp_addComm1" (formula "31") (term "0,0,1,0,0,0,1,0"))
                     (rule "add_literals" (formula "31") (term "0,0,0,1,0,0,0,1,0"))
                     (rule "add_zero_left" (formula "31") (term "0,0,1,0,0,0,1,0"))
                     (rule "polySimp_pullOutFactor2" (formula "31") (term "0,1,0,0,0,1,0"))
                     (rule "add_literals" (formula "31") (term "1,0,1,0,0,0,1,0"))
                     (rule "times_zero_1" (formula "31") (term "0,1,0,0,0,1,0"))
                     (rule "add_zero_left" (formula "31") (term "1,0,0,0,1,0"))
                     (rule "applyEq" (formula "30") (term "1,1,1,0,0") (ifseqformula "40"))
                     (rule "polySimp_addAssoc" (formula "30") (term "1,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "30") (term "0,1,1,0,0"))
                     (rule "polySimp_addComm1" (formula "30") (term "0,0,1,1,0,0"))
                     (rule "add_literals" (formula "30") (term "0,0,0,1,1,0,0"))
                     (rule "polySimp_pullOutFactor2b" (formula "30") (term "0,1,1,0,0"))
                     (rule "add_literals" (formula "30") (term "1,1,0,1,1,0,0"))
                     (rule "times_zero_1" (formula "30") (term "1,0,1,1,0,0"))
                     (rule "add_zero_right" (formula "30") (term "0,1,1,0,0"))
                     (rule "applyEq" (formula "31") (term "1,1,1,0,0") (ifseqformula "40"))
                     (rule "polySimp_addAssoc" (formula "31") (term "1,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "31") (term "0,1,1,0,0"))
                     (rule "polySimp_addComm1" (formula "31") (term "0,0,1,1,0,0"))
                     (rule "add_literals" (formula "31") (term "0,0,0,1,1,0,0"))
                     (rule "add_zero_left" (formula "31") (term "0,0,1,1,0,0"))
                     (rule "polySimp_pullOutFactor2" (formula "31") (term "0,1,1,0,0"))
                     (rule "add_literals" (formula "31") (term "1,0,1,1,0,0"))
                     (rule "times_zero_1" (formula "31") (term "0,1,1,0,0"))
                     (rule "add_zero_left" (formula "31") (term "1,1,0,0"))
                     (rule "applyEq" (formula "29") (term "1,1") (ifseqformula "40"))
                     (rule "polySimp_addAssoc" (formula "29") (term "1"))
                     (rule "polySimp_addAssoc" (formula "29") (term "0,1"))
                     (rule "polySimp_addComm0" (formula "29") (term "0,0,1"))
                     (rule "polySimp_pullOutFactor2b" (formula "29") (term "0,1"))
                     (rule "add_literals" (formula "29") (term "1,1,0,1"))
                     (rule "times_zero_1" (formula "29") (term "1,0,1"))
                     (rule "add_zero_right" (formula "29") (term "0,1"))
                     (rule "applyEq" (formula "44") (term "1,1,1,0,0") (ifseqformula "40"))
                     (rule "polySimp_addAssoc" (formula "44") (term "1,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "44") (term "0,1,1,0,0"))
                     (rule "polySimp_addComm1" (formula "44") (term "0,0,1,1,0,0"))
                     (rule "add_literals" (formula "44") (term "0,0,0,1,1,0,0"))
                     (rule "add_zero_left" (formula "44") (term "0,0,1,1,0,0"))
                     (rule "polySimp_pullOutFactor2" (formula "44") (term "0,1,1,0,0"))
                     (rule "add_literals" (formula "44") (term "1,0,1,1,0,0"))
                     (rule "times_zero_1" (formula "44") (term "0,1,1,0,0"))
                     (rule "add_zero_left" (formula "44") (term "1,1,0,0"))
                     (rule "applyEq" (formula "23") (term "0,0") (ifseqformula "40"))
                     (rule "inEqSimp_homoInEq1" (formula "23") (term "0"))
                     (rule "polySimp_mulComm0" (formula "23") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "23") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "23") (term "0,1,0,0"))
                     (rule "mul_literals" (formula "23") (term "0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "23") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "23") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "23") (term "0,0,0,0"))
                     (rule "add_literals" (formula "23") (term "0,0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "23") (term "0,0,0"))
                     (rule "add_literals" (formula "23") (term "1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "23") (term "1,0,0,0"))
                     (rule "applyEq" (formula "1") (term "0") (ifseqformula "40"))
                     (rule "inEqSimp_homoInEq0" (formula "1"))
                     (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "1,0"))
                     (rule "times_zero_1" (formula "1") (term "0"))
                     (rule "qeq_literals" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "applyEq" (formula "9") (term "0") (ifseqformula "39"))
                     (rule "inEqSimp_homoInEq0" (formula "9"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "9") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "9") (term "0,1,0"))
                     (rule "mul_literals" (formula "9") (term "0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "9") (term "0"))
                     (rule "polySimp_addAssoc" (formula "9") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "9") (term "0,0,0"))
                     (rule "add_literals" (formula "9") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0"))
                     (rule "add_literals" (formula "9") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "9") (term "1,0,0"))
                     (rule "add_zero_right" (formula "9") (term "0,0"))
                     (rule "applyEq" (formula "13") (term "1,0,2,0") (ifseqformula "39"))
                     (rule "eqSymm" (formula "13"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0,2,1"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0,0,2,1"))
                     (rule "polySimp_addComm1" (formula "13") (term "0,0,0,2,1"))
                     (rule "add_literals" (formula "13") (term "0,0,0,0,2,1"))
                     (rule "polySimp_pullOutFactor2b" (formula "13") (term "0,0,2,1"))
                     (rule "add_literals" (formula "13") (term "1,1,0,0,2,1"))
                     (rule "times_zero_1" (formula "13") (term "1,0,0,2,1"))
                     (rule "add_zero_right" (formula "13") (term "0,0,2,1"))
                     (rule "applyEq" (formula "17") (term "0") (ifseqformula "39"))
                     (rule "inEqSimp_homoInEq1" (formula "17"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "17") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "17") (term "0,1,0"))
                     (rule "mul_literals" (formula "17") (term "0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "17") (term "0"))
                     (rule "polySimp_addComm1" (formula "17") (term "0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "17") (term "0"))
                     (rule "add_literals" (formula "17") (term "1,1,0"))
                     (rule "polySimp_addAssoc" (formula "17") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "17") (term "0,0,0"))
                     (rule "add_literals" (formula "17") (term "0,0,0,0"))
                     (rule "add_zero_left" (formula "17") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor0" (formula "17") (term "0,0"))
                     (rule "add_literals" (formula "17") (term "1,0,0"))
                     (rule "polySimp_elimOne" (formula "17") (term "0,0"))
                     (rule "applyEq" (formula "40") (term "0") (ifseqformula "39"))
                     (rule "inEqSimp_homoInEq1" (formula "40"))
                     (rule "polySimp_pullOutFactor1" (formula "40") (term "0"))
                     (rule "add_literals" (formula "40") (term "1,0"))
                     (rule "times_zero_1" (formula "40") (term "0"))
                     (rule "leq_literals" (formula "40"))
                     (rule "true_left" (formula "40"))
                     (rule "applyEq" (formula "8") (term "0") (ifseqformula "39"))
                     (rule "inEqSimp_homoInEq1" (formula "8"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "8") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "8") (term "0,1,0"))
                     (rule "mul_literals" (formula "8") (term "0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "8") (term "0"))
                     (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "8") (term "0,0,0"))
                     (rule "add_literals" (formula "8") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0"))
                     (rule "add_literals" (formula "8") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "8") (term "1,0,0"))
                     (rule "add_zero_right" (formula "8") (term "0,0"))
                     (rule "applyEq" (formula "15") (term "0") (ifseqformula "39"))
                     (rule "inEqSimp_homoInEq1" (formula "15"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "15") (term "0,1,0"))
                     (rule "mul_literals" (formula "15") (term "0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "15") (term "0"))
                     (rule "polySimp_addAssoc" (formula "15") (term "0,0"))
                     (rule "add_literals" (formula "15") (term "0,0,0"))
                     (rule "add_zero_left" (formula "15") (term "0,0"))
                     (rule "applyEq" (formula "27") (term "1,1") (ifseqformula "39"))
                     (rule "polySimp_addAssoc" (formula "27") (term "1"))
                     (rule "polySimp_addAssoc" (formula "27") (term "0,1"))
                     (rule "polySimp_addComm0" (formula "27") (term "0,0,1"))
                     (rule "polySimp_pullOutFactor2b" (formula "27") (term "0,1"))
                     (rule "add_literals" (formula "27") (term "1,1,0,1"))
                     (rule "times_zero_1" (formula "27") (term "1,0,1"))
                     (rule "add_zero_right" (formula "27") (term "0,1"))
                     (rule "applyEq" (formula "13") (term "1,0,2,0") (ifseqformula "39"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0,2,0"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0,0,2,0"))
                     (rule "polySimp_addComm1" (formula "13") (term "0,0,0,2,0"))
                     (rule "add_literals" (formula "13") (term "0,0,0,0,2,0"))
                     (rule "add_zero_left" (formula "13") (term "0,0,0,2,0"))
                     (rule "polySimp_pullOutFactor2" (formula "13") (term "0,0,2,0"))
                     (rule "add_literals" (formula "13") (term "1,0,0,2,0"))
                     (rule "times_zero_1" (formula "13") (term "0,0,2,0"))
                     (rule "add_zero_left" (formula "13") (term "0,2,0"))
                     (rule "eqSymm" (formula "13"))
                     (rule "applyEq" (formula "10") (term "1,1") (ifseqformula "39"))
                     (rule "polySimp_addAssoc" (formula "10") (term "1"))
                     (rule "polySimp_addAssoc" (formula "10") (term "0,1"))
                     (rule "polySimp_addComm0" (formula "10") (term "0,0,1"))
                     (rule "polySimp_pullOutFactor2b" (formula "10") (term "0,1"))
                     (rule "add_literals" (formula "10") (term "1,1,0,1"))
                     (rule "times_zero_1" (formula "10") (term "1,0,1"))
                     (rule "add_zero_right" (formula "10") (term "0,1"))
                     (rule "applyEq" (formula "1") (term "1,1") (ifseqformula "39"))
                     (rule "polySimp_addAssoc" (formula "1") (term "1"))
                     (rule "polySimp_addComm1" (formula "1") (term "0,1"))
                     (rule "polySimp_pullOutFactor3b" (formula "1") (term "1"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
                     (rule "polySimp_addComm0" (formula "1") (term "0,0,1"))
                     (rule "polySimp_pullOutFactor2b" (formula "1") (term "0,1"))
                     (rule "add_literals" (formula "1") (term "1,1,0,1"))
                     (rule "times_zero_1" (formula "1") (term "1,0,1"))
                     (rule "add_zero_right" (formula "1") (term "0,1"))
                     (rule "applyEq" (formula "14") (term "1") (ifseqformula "39"))
                     (rule "applyEq" (formula "33") (term "1,1") (ifseqformula "39"))
                     (rule "polySimp_addAssoc" (formula "33") (term "1"))
                     (rule "polySimp_addComm1" (formula "33") (term "0,1"))
                     (rule "polySimp_pullOutFactor3b" (formula "33") (term "1"))
                     (rule "polySimp_addAssoc" (formula "33") (term "0,1"))
                     (rule "polySimp_addComm0" (formula "33") (term "0,0,1"))
                     (rule "polySimp_pullOutFactor2b" (formula "33") (term "0,1"))
                     (rule "add_literals" (formula "33") (term "1,1,0,1"))
                     (rule "times_zero_1" (formula "33") (term "1,0,1"))
                     (rule "add_zero_right" (formula "33") (term "0,1"))
                     (rule "applyEq" (formula "2") (term "1,1") (ifseqformula "39"))
                     (rule "polySimp_addAssoc" (formula "2") (term "1"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
                     (rule "polySimp_addComm0" (formula "2") (term "0,0,1"))
                     (rule "polySimp_pullOutFactor2b" (formula "2") (term "0,1"))
                     (rule "add_literals" (formula "2") (term "1,1,0,1"))
                     (rule "times_zero_1" (formula "2") (term "1,0,1"))
                     (rule "add_zero_right" (formula "2") (term "0,1"))
                     (rule "applyEq" (formula "25") (term "1,1") (ifseqformula "39"))
                     (rule "polySimp_addAssoc" (formula "25") (term "1"))
                     (rule "polySimp_addAssoc" (formula "25") (term "0,1"))
                     (rule "polySimp_addComm0" (formula "25") (term "0,0,1"))
                     (rule "polySimp_pullOutFactor2b" (formula "25") (term "0,1"))
                     (rule "add_literals" (formula "25") (term "1,1,0,1"))
                     (rule "times_zero_1" (formula "25") (term "1,0,1"))
                     (rule "add_zero_right" (formula "25") (term "0,1"))
                     (rule "applyEq" (formula "41") (term "0,1") (ifseqformula "13"))
                     (rule "inEqSimp_invertInEq0" (formula "37"))
                     (rule "polySimp_mulLiterals" (formula "37") (term "0"))
                     (rule "times_zero_2" (formula "37") (term "1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "19"))
                     (rule "polySimp_mulLiterals" (formula "19") (term "0"))
                     (rule "polySimp_elimOne" (formula "19") (term "0"))
                     (rule "inEqSimp_invertInEq0" (formula "36"))
                     (rule "polySimp_mulLiterals" (formula "36") (term "0"))
                     (rule "times_zero_2" (formula "36") (term "1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "22") (term "0,0"))
                     (rule "polySimp_elimOne" (formula "22") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                     (rule "polySimp_elimOne" (formula "9") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "16"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "8"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                     (rule "polySimp_elimOne" (formula "8") (term "0"))
                     (rule "replace_known_left" (formula "40") (term "0") (ifseqformula "8"))
                      (builtin "One Step Simplification" (formula "40"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "14"))
                     (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                     (rule "polySimp_elimOne" (formula "14") (term "0"))
                     (rule "inEqSimp_strengthen1" (formula "18") (ifseqformula "48"))
                     (rule "replace_known_left" (formula "21") (term "0") (ifseqformula "18"))
                      (builtin "One Step Simplification" (formula "21"))
                     (rule "inEqSimp_contradEq7" (formula "48") (ifseqformula "18"))
                     (rule "polySimp_mulComm0" (formula "48") (term "1,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "48") (term "0,0"))
                     (rule "add_literals" (formula "48") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "48") (term "1,0,0"))
                     (rule "add_zero_right" (formula "48") (term "0,0"))
                     (rule "leq_literals" (formula "48") (term "0"))
                      (builtin "One Step Simplification" (formula "48"))
                     (rule "false_right" (formula "48"))
                     (rule "inEqSimp_subsumption1" (formula "33") (ifseqformula "8"))
                     (rule "leq_literals" (formula "33") (term "0"))
                      (builtin "One Step Simplification" (formula "33"))
                     (rule "true_left" (formula "33"))
                     (rule "inEqSimp_subsumption6" (formula "34") (ifseqformula "19"))
                     (rule "mul_literals" (formula "34") (term "1,1,0"))
                     (rule "greater_literals" (formula "34") (term "0,0"))
                      (builtin "One Step Simplification" (formula "34"))
                     (rule "leq_literals" (formula "34") (term "0"))
                      (builtin "One Step Simplification" (formula "34"))
                     (rule "true_left" (formula "34"))
                     (rule "inEqSimp_subsumption6" (formula "34") (ifseqformula "8"))
                     (rule "greater_literals" (formula "34") (term "0,0"))
                      (builtin "One Step Simplification" (formula "34"))
                     (rule "mul_literals" (formula "34") (term "1,0"))
                     (rule "leq_literals" (formula "34") (term "0"))
                      (builtin "One Step Simplification" (formula "34"))
                     (rule "true_left" (formula "34"))
                     (rule "inEqSimp_exactShadow1" (formula "16") (ifseqformula "34"))
                     (rule "mul_literals" (formula "16") (term "1,0,1"))
                     (rule "greater_literals" (formula "16") (term "0"))
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "polySimp_mulComm0" (formula "16") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "16") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "16"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                     (rule "polySimp_elimOne" (formula "16") (term "0"))
                     (rule "inEqSimp_subsumption0" (formula "16") (ifseqformula "18"))
                     (rule "leq_literals" (formula "16") (term "0"))
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "true_left" (formula "16"))
                     (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "34"))
                     (rule "polySimp_rightDist" (formula "18") (term "0,0"))
                     (rule "mul_literals" (formula "18") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "18") (term "0"))
                     (rule "add_literals" (formula "18") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "18"))
                     (rule "polySimp_mulLiterals" (formula "18") (term "0"))
                     (rule "polySimp_elimOne" (formula "18") (term "0"))
                     (rule "inEqSimp_subsumption0" (formula "17") (ifseqformula "18"))
                     (rule "leq_literals" (formula "17") (term "0"))
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "true_left" (formula "17"))
                     (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "33"))
                     (rule "mul_literals" (formula "8") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "8") (term "0"))
                     (rule "add_literals" (formula "8") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                     (rule "mul_literals" (formula "8") (term "1"))
                     (rule "inEqSimp_subsumption6" (formula "8") (ifseqformula "20"))
                     (rule "mul_literals" (formula "8") (term "1,1,0"))
                     (rule "greater_literals" (formula "8") (term "0,0"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "leq_literals" (formula "8") (term "0"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "true_left" (formula "8"))
                     (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "33"))
                     (rule "polySimp_rightDist" (formula "18") (term "0,0"))
                     (rule "mul_literals" (formula "18") (term "0,0,0"))
                     (rule "polySimp_addAssoc" (formula "18") (term "0"))
                     (rule "polySimp_addComm1" (formula "18") (term "0,0"))
                     (rule "add_literals" (formula "18") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "18") (term "0"))
                     (rule "add_literals" (formula "18") (term "1,1,0"))
                     (rule "polySimp_elimOne" (formula "18") (term "1,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "18"))
                     (rule "mul_literals" (formula "18") (term "1"))
                     (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "20"))
                     (rule "leq_literals" (formula "18") (term "0"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "true_left" (formula "18"))
                     (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "34"))
                     (rule "polySimp_mulAssoc" (formula "14") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "14") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "14") (term "0,0"))
                     (rule "polySimp_elimOne" (formula "14") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "14") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                     (rule "mul_literals" (formula "14") (term "1"))
                     (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "20"))
                     (rule "leq_literals" (formula "14") (term "0"))
                      (builtin "One Step Simplification" (formula "14"))
                     (rule "true_left" (formula "14"))
                     (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "33"))
                     (rule "polySimp_mulAssoc" (formula "14") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "14") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "14") (term "0,0"))
                     (rule "polySimp_elimOne" (formula "14") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "14") (term "0"))
                     (rule "polySimp_addComm0" (formula "14") (term "0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "14") (term "0"))
                     (rule "add_literals" (formula "14") (term "1,1,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                     (rule "mul_literals" (formula "14") (term "1"))
                     (rule "inEqSimp_subsumption6" (formula "14") (ifseqformula "20"))
                     (rule "mul_literals" (formula "14") (term "1,1,0"))
                     (rule "greater_literals" (formula "14") (term "0,0"))
                      (builtin "One Step Simplification" (formula "14"))
                     (rule "leq_literals" (formula "14") (term "0"))
                      (builtin "One Step Simplification" (formula "14"))
                     (rule "true_left" (formula "14"))
                     (rule "inEqSimp_exactShadow1" (formula "16") (ifseqformula "33"))
                     (rule "greater_literals" (formula "16") (term "0"))
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "polySimp_mulComm0" (formula "16") (term "0,0"))
                     (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0"))
                     (rule "mul_literals" (formula "16") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "16") (term "0"))
                     (rule "polySimp_addComm0" (formula "16") (term "0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "16") (term "0"))
                     (rule "add_literals" (formula "16") (term "1,1,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                     (rule "mul_literals" (formula "16") (term "1"))
                     (rule "inEqSimp_subsumption6" (formula "16") (ifseqformula "20"))
                     (rule "mul_literals" (formula "16") (term "1,1,0"))
                     (rule "greater_literals" (formula "16") (term "0,0"))
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "leq_literals" (formula "16") (term "0"))
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "true_left" (formula "16"))
                     (rule "arrayLengthIsAShort" (formula "27") (term "0"))
                      (builtin "One Step Simplification" (formula "27"))
                     (rule "true_left" (formula "27"))
                     (rule "cut_direct" (formula "42") (term "1"))
                     (branch "CUT: self.tree.<created> = TRUE TRUE"
                         (builtin "One Step Simplification" (formula "43"))
                        (rule "arrayLengthNotNegative" (formula "28") (term "0"))
                        (rule "all_pull_out3" (formula "12") (term "0"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "24") (term "0,0") (ifseqformula "4") (ifseqformula "6"))
                        (rule "replace_known_right" (formula "24") (term "0") (ifseqformula "44"))
                         (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "1")))
                        (rule "true_left" (formula "24"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "11") (term "1") (ifseqformula "4") (ifseqformula "6"))
                        (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "43"))
                         (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "39")))
                        (rule "true_left" (formula "11"))
                        (rule "all_pull_out3" (formula "31") (term "0"))
                        (rule "all_pull_out3" (formula "40") (term "0"))
                        (rule "shift_paren_or" (formula "12") (term "0,0"))
                        (rule "shift_paren_or" (formula "31") (term "0,0"))
                        (rule "shift_paren_or" (formula "40") (term "0,0"))
                        (rule "shift_paren_or" (formula "12") (term "0,0,0"))
                        (rule "shift_paren_or" (formula "31") (term "0,0,0"))
                        (rule "shift_paren_or" (formula "40") (term "0,0,0"))
                        (rule "allLeft" (formula "30") (inst "t=add(Z(neglit(1(#))), classify_sk_0)"))
                        (rule "polySimp_addAssoc" (formula "30") (term "0,2,0,1"))
                        (rule "add_literals" (formula "30") (term "0,0,2,0,1"))
                        (rule "add_zero_left" (formula "30") (term "0,2,0,1"))
                        (rule "inEqSimp_commuteGeq" (formula "30") (term "1"))
                        (rule "inEqSimp_homoInEq0" (formula "30") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "30") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "30") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "30") (term "0,0,0"))
                        (rule "add_literals" (formula "30") (term "0,0,0,0"))
                        (rule "add_zero_left" (formula "30") (term "0,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "30") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "30") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "30") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "30") (term "0,1,0,1,0"))
                        (rule "polySimp_addComm1" (formula "30") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0"))
                        (rule "add_literals" (formula "30") (term "0,0,0,1,0"))
                        (rule "add_zero_left" (formula "30") (term "0,0,1,0"))
                        (rule "inEqSimp_invertInEq1" (formula "30") (term "0,0"))
                        (rule "times_zero_2" (formula "30") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "30") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "30") (term "1,1,0"))
                        (rule "inEqSimp_contradInEq1" (formula "30") (term "0,0") (ifseqformula "20"))
                        (rule "qeq_literals" (formula "30") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "inEqSimp_contradInEq1" (formula "30") (term "0") (ifseqformula "19"))
                        (rule "inEqSimp_homoInEq1" (formula "30") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,0"))
                        (rule "add_literals" (formula "30") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "30") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "30") (term "0,0,0"))
                        (rule "leq_literals" (formula "30") (term "0,0"))
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "allLeft" (formula "12") (inst "t=add(Z(neglit(1(#))), classify_sk_1)"))
                        (rule "polySimp_addAssoc" (formula "12") (term "1,1,0,0"))
                        (rule "add_literals" (formula "12") (term "0,1,1,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "12") (term "0,1,0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "12") (term "0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,1,0,0,0,0"))
                        (rule "add_literals" (formula "12") (term "1,1,0,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "12") (term "1,0,1,0,0,0,0"))
                        (rule "add_zero_right" (formula "12") (term "0,1,0,0,0,0"))
                        (rule "leq_literals" (formula "12") (term "1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "inEqSimp_homoInEq0" (formula "12") (term "0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "12") (term "0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "12") (term "0,0,0,0,0"))
                        (rule "applyEq" (formula "12") (term "1,1,0") (ifseqformula "14"))
                        (rule "inEqSimp_invertInEq1" (formula "12") (term "0,0,0,0"))
                        (rule "times_zero_2" (formula "12") (term "1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "0,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "12") (term "0,0,0,0") (ifseqformula "9"))
                        (rule "qeq_literals" (formula "12") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "commute_or" (formula "12") (term "0,0"))
                        (rule "allLeft" (formula "42") (inst "t=add(Z(neglit(1(#))), classify_sk_0)"))
                        (rule "polySimp_addAssoc" (formula "42") (term "1,1,0,0"))
                        (rule "add_literals" (formula "42") (term "0,1,1,0,0"))
                        (rule "inEqSimp_commuteGeq" (formula "42") (term "1,0,0,0,0"))
                        (rule "inEqSimp_homoInEq0" (formula "42") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "42") (term "1,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "42") (term "0,1,0,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "42") (term "0,0,0,0,0,0"))
                        (rule "add_literals" (formula "42") (term "0,0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "42") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_invertInEq1" (formula "42") (term "0,0,0,0,0"))
                        (rule "times_zero_2" (formula "42") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "42") (term "0,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "42") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "42") (term "1,0,0,0,0") (ifseqformula "20"))
                        (rule "inEqSimp_homoInEq1" (formula "42") (term "0,1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "42") (term "1,0,0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "42") (term "0,1,0,0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "42") (term "0,0,1,0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "42") (term "0,0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "42") (term "0,0,0,0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "42") (term "0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "42") (term "1,1,0,0,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "42") (term "1,0,0,1,0,0,0,0"))
                        (rule "add_zero_right" (formula "42") (term "0,0,1,0,0,0,0"))
                        (rule "leq_literals" (formula "42") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "42"))
                        (rule "inEqSimp_contradInEq1" (formula "42") (term "0,0,0,0") (ifseqformula "21"))
                        (rule "qeq_literals" (formula "42") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "42"))
                        (rule "pullOutSelect" (formula "42") (term "1,1,0") (inst "selectSK=arr_2"))
                        (rule "simplifySelectOfAnon" (formula "42"))
                         (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "46")) (ifInst ""  (formula "40")))
                        (rule "elementOfSetMinus" (formula "42") (term "0,0"))
                         (builtin "One Step Simplification" (formula "42"))
                        (rule "ifthenelse_negated" (formula "42") (term "0"))
                        (rule "elementOfUnion" (formula "42") (term "0,0"))
                         (builtin "One Step Simplification" (formula "42"))
                        (rule "applyEqReverse" (formula "43") (term "1,1,0") (ifseqformula "42"))
                        (rule "hideAuxiliaryEq" (formula "42"))
                        (rule "commute_or" (formula "42") (term "0,0"))
                        (rule "allLeft" (formula "33") (inst "t=add(Z(neglit(1(#))), classify_sk_0)"))
                        (rule "polySimp_addAssoc" (formula "33") (term "1,1,0,0"))
                        (rule "add_literals" (formula "33") (term "0,1,1,0,0"))
                        (rule "inEqSimp_commuteGeq" (formula "33") (term "1,0,0,0,0"))
                        (rule "inEqSimp_homoInEq0" (formula "33") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "33") (term "1,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "33") (term "0,1,0,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "33") (term "0,0,0,0,0,0"))
                        (rule "add_literals" (formula "33") (term "0,0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "33") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_invertInEq1" (formula "33") (term "0,0,0,0,0"))
                        (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "0,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "33") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "33") (term "1,0,0,0,0") (ifseqformula "20"))
                        (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "33") (term "0,0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "33") (term "0,0,0,0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "33") (term "1,1,0,0,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "33") (term "1,0,0,1,0,0,0,0"))
                        (rule "add_zero_right" (formula "33") (term "0,0,1,0,0,0,0"))
                        (rule "leq_literals" (formula "33") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "33"))
                        (rule "inEqSimp_contradInEq1" (formula "33") (term "0,0,0,0") (ifseqformula "21"))
                        (rule "qeq_literals" (formula "33") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "33"))
                        (rule "commute_or" (formula "33") (term "0,0"))
                        (rule "allLeft" (formula "13") (inst "t=add(Z(neglit(1(#))), classify_sk_0)"))
                        (rule "polySimp_addAssoc" (formula "13") (term "1,1,0,0"))
                        (rule "add_literals" (formula "13") (term "0,1,1,0,0"))
                        (rule "inEqSimp_homoInEq0" (formula "13") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,0,0"))
                        (rule "add_literals" (formula "13") (term "0,0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "13") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "13") (term "1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,0,1,0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "13") (term "0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,0,0"))
                        (rule "inEqSimp_invertInEq1" (formula "13") (term "0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,0,0,0"))
                        (rule "times_zero_2" (formula "13") (term "1,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "13") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "13") (term "1,0,0,0,0") (ifseqformula "21"))
                        (rule "inEqSimp_homoInEq1" (formula "13") (term "0,1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "13") (term "0,0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "13") (term "0,0,0,0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "13") (term "1,1,0,0,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "13") (term "1,0,0,1,0,0,0,0"))
                        (rule "add_zero_right" (formula "13") (term "0,0,1,0,0,0,0"))
                        (rule "leq_literals" (formula "13") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "inEqSimp_contradInEq1" (formula "13") (term "0,0,0,0") (ifseqformula "22"))
                        (rule "qeq_literals" (formula "13") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "commute_or" (formula "13") (term "0,0"))
                        (rule "allLeft" (formula "45") (inst "t=classify_sk_0"))
                        (rule "inEqSimp_commuteGeq" (formula "45") (term "1,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "45") (term "0,0,0,0,0") (ifseqformula "22"))
                        (rule "qeq_literals" (formula "45") (term "0,0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "45"))
                        (rule "inEqSimp_contradInEq1" (formula "45") (term "0,0,0,0") (ifseqformula "21"))
                        (rule "inEqSimp_homoInEq1" (formula "45") (term "0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "45") (term "0,0,0,0,0,0"))
                        (rule "add_literals" (formula "45") (term "1,1,0,0,0,0,0,0"))
                        (rule "times_zero_1" (formula "45") (term "1,0,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "45") (term "0,0,0,0,0,0"))
                        (rule "leq_literals" (formula "45") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "45"))
                        (rule "pullOutSelect" (formula "45") (term "1,1,0") (inst "selectSK=arr_3"))
                        (rule "simplifySelectOfAnon" (formula "45"))
                         (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "49")) (ifInst ""  (formula "42")))
                        (rule "elementOfSetMinus" (formula "45") (term "0,0"))
                         (builtin "One Step Simplification" (formula "45"))
                        (rule "ifthenelse_negated" (formula "45") (term "0"))
                        (rule "elementOfUnion" (formula "45") (term "0,0"))
                         (builtin "One Step Simplification" (formula "45"))
                        (rule "applyEqReverse" (formula "46") (term "1,1,0") (ifseqformula "45"))
                        (rule "hideAuxiliaryEq" (formula "45"))
                        (rule "commute_or" (formula "45") (term "0,0"))
                        (rule "allLeft" (formula "14") (inst "t=classify_sk_0"))
                        (rule "inEqSimp_homoInEq1" (formula "14") (term "1,0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "14") (term "0,1,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "14") (term "0,0,0,0,0") (ifseqformula "23"))
                        (rule "qeq_literals" (formula "14") (term "0,0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "inEqSimp_contradInEq1" (formula "14") (term "0,0,0,0") (ifseqformula "22"))
                        (rule "inEqSimp_homoInEq1" (formula "14") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "14") (term "0,0,0,0,0,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,0,0,0,0"))
                        (rule "add_literals" (formula "14") (term "1,1,0,0,0,0,0,0"))
                        (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "14") (term "0,0,0,0,0,0"))
                        (rule "leq_literals" (formula "14") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "allLeft" (formula "36") (inst "t=classify_sk_0"))
                        (rule "inEqSimp_commuteGeq" (formula "36") (term "1,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "36") (term "1,0,0,0,0") (ifseqformula "22"))
                        (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "36") (term "1,1,0,0,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "36") (term "1,0,0,1,0,0,0,0"))
                        (rule "add_zero_right" (formula "36") (term "0,0,1,0,0,0,0"))
                        (rule "leq_literals" (formula "36") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "36"))
                        (rule "inEqSimp_contradInEq1" (formula "36") (term "0,0,0,0") (ifseqformula "23"))
                        (rule "qeq_literals" (formula "36") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "36"))
                        (rule "commute_or" (formula "14") (term "0,0"))
                        (rule "commute_or" (formula "36") (term "0,0"))
                         (builtin "Use Dependency Contract" (formula "40") (term "0") (ifInst ""  (formula "17") (term "0")) (contract "de.wiesler.Tree[de.wiesler.Tree::classify(int)].JML accessible clause.0"))
                         (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "52")) (ifInst ""  (formula "1")) (ifInst ""  (formula "4")))
                        (rule "wellFormedAnon" (formula "49") (term "0,0,0"))
                        (rule "replace_known_left" (formula "49") (term "1,0,0,0") (ifseqformula "5"))
                         (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "4")))
                        (rule "disjointDefinition" (formula "49") (term "1,0"))
                        (rule "applyEq" (formula "49") (term "0,1,1,0,1,0") (ifseqformula "11"))
                        (rule "applyEq" (formula "49") (term "0,1") (ifseqformula "40"))
                        (rule "eqSymm" (formula "49") (term "1"))
                        (rule "applyEq" (formula "49") (term "0,1") (ifseqformula "17"))
                        (rule "polySimp_homoEq" (formula "49") (term "1"))
                        (rule "polySimp_mulComm0" (formula "49") (term "1,0,1"))
                        (rule "polySimp_rightDist" (formula "49") (term "1,0,1"))
                        (rule "polySimp_rightDist" (formula "49") (term "0,1,0,1"))
                        (rule "mul_literals" (formula "49") (term "0,0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "49") (term "0,1"))
                        (rule "polySimp_addComm1" (formula "49") (term "0,0,1"))
                        (rule "polySimp_pullOutFactor0b" (formula "49") (term "0,1"))
                        (rule "add_literals" (formula "49") (term "1,1,0,1"))
                        (rule "polySimp_elimOne" (formula "49") (term "1,0,1"))
                        (rule "polySimp_addAssoc" (formula "49") (term "0,0,1"))
                        (rule "add_literals" (formula "49") (term "0,0,0,1"))
                        (rule "add_zero_left" (formula "49") (term "0,0,1"))
                        (rule "polySimp_sepPosMonomial" (formula "49") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "49") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "49") (term "1,1"))
                        (rule "inEqSimp_contradEq7" (formula "49") (term "1") (ifseqformula "22"))
                        (rule "polySimp_mulComm0" (formula "49") (term "1,0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "49") (term "0,0,1"))
                        (rule "add_literals" (formula "49") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "49") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "49") (term "0,0,1"))
                        (rule "leq_literals" (formula "49") (term "0,1"))
                         (builtin "One Step Simplification" (formula "49"))
                        (rule "notLeft" (formula "49"))
                        (rule "distributeIntersection" (formula "49") (term "0,1"))
                        (rule "unionEqualsEmpty" (formula "49") (term "1"))
                        (rule "commuteIntersection" (formula "49") (term "0,0,1"))
                        (rule "commuteIntersection" (formula "49") (term "0,1,1"))
                        (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "49") (term "0"))
                         (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "50")) (ifInst ""  (formula "27")))
                        (rule "translateJavaSubInt" (formula "49") (term "3,0,1,0"))
                        (rule "polySimp_elimSub" (formula "49") (term "3,0,1,0"))
                        (rule "mul_literals" (formula "49") (term "1,3,0,1,0"))
                        (rule "polySimp_addComm0" (formula "49") (term "3,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "49") (term "1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "49") (term "1,1,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "49") (term "1,0,0,0,0,0"))
                        (rule "replace_known_left" (formula "49") (term "1,0,0,0,0,0") (ifseqformula "26"))
                         (builtin "One Step Simplification" (formula "49"))
                        (rule "inEqSimp_commuteLeq" (formula "49") (term "0,1,0,0,0"))
                        (rule "applyEq" (formula "49") (term "0,1,0,0,0,0") (ifseqformula "28"))
                        (rule "eqSymm" (formula "49") (term "1,0,0,0,0"))
                        (rule "replace_known_left" (formula "49") (term "1,0,0,0,0") (ifseqformula "10"))
                         (builtin "One Step Simplification" (formula "49"))
                        (rule "applyEq" (formula "49") (term "1,3,0,1,0") (ifseqformula "28"))
                        (rule "polySimp_addAssoc" (formula "49") (term "3,0,1,0"))
                        (rule "add_literals" (formula "49") (term "0,3,0,1,0"))
                        (rule "add_zero_left" (formula "49") (term "3,0,1,0"))
                        (rule "applyEq" (formula "49") (term "0,0,0,0,0,0") (ifseqformula "11"))
                        (rule "replace_known_right" (formula "49") (term "0,0,0,0,0") (ifseqformula "51"))
                         (builtin "One Step Simplification" (formula "49"))
                        (rule "applyEq" (formula "49") (term "0,0,0,0,0") (ifseqformula "28"))
                        (rule "inEqSimp_homoInEq1" (formula "49") (term "0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "49") (term "1,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "49") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "49") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "49") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "49") (term "0,0,0,0,0,0"))
                        (rule "applyEq" (formula "49") (term "1,0,1,0") (ifseqformula "11"))
                        (rule "applyEq" (formula "49") (term "0,0,1,0,0") (ifseqformula "11"))
                        (rule "inEqSimp_commuteGeq" (formula "49") (term "1,0,0"))
                        (rule "applyEq" (formula "49") (term "1,1,0,0,0") (ifseqformula "28"))
                        (rule "replace_known_left" (formula "49") (term "1,0,0,0") (ifseqformula "30"))
                         (builtin "One Step Simplification" (formula "49"))
                        (rule "applyEq" (formula "49") (term "0,1,0,0") (ifseqformula "28"))
                        (rule "inEqSimp_commuteLeq" (formula "49") (term "1,0,0"))
                        (rule "replace_known_left" (formula "49") (term "1,0,0") (ifseqformula "32"))
                         (builtin "One Step Simplification" (formula "49"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "49") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "49") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "49") (term "0,0,0"))
                        (rule "replace_known_left" (formula "49") (term "0,0") (ifseqformula "9"))
                         (builtin "One Step Simplification" (formula "49"))
                        (rule "cut_direct" (formula "53") (term "0"))
                        (branch "CUT: self.sorted_splitters.* cap allLocs setMinus self.sorted_splitters.* cup self.tree.tree.* = {} TRUE"
                            (builtin "One Step Simplification" (formula "54"))
                           (rule "replace_known_left" (formula "50") (term "1,1") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "50") (ifInst ""  (formula "54")))
                           (rule "false_right" (formula "50"))
                           (rule "onlyCreatedObjectsAreReferencedFinal" (formula "50") (term "0") (ifseqformula "5") (ifseqformula "2"))
                           (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "51"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "onlyCreatedObjectsAreReferencedFinal" (formula "13") (term "0") (ifseqformula "6") (ifseqformula "3"))
                           (rule "applyEq" (formula "13") (term "0,0") (ifseqformula "14"))
                           (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "53"))
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "applyEq" (formula "13") (term "1,0") (ifseqformula "14"))
                           (rule "allLeft" (formula "36") (inst "t=classify_sk_0"))
                           (rule "inEqSimp_homoInEq1" (formula "36") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "36") (term "0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "36") (term "1,1,0"))
                           (rule "polySimp_rightDist" (formula "36") (term "1,1,0"))
                           (rule "mul_literals" (formula "36") (term "0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0"))
                           (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0"))
                           (rule "inEqSimp_contradInEq1" (formula "36") (term "0,0") (ifseqformula "25"))
                           (rule "qeq_literals" (formula "36") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "36"))
                           (rule "allLeft" (formula "40") (inst "t=add(Z(neglit(1(#))), classify_sk_1)"))
                           (rule "polySimp_addAssoc" (formula "40") (term "1,1,0,0"))
                           (rule "add_literals" (formula "40") (term "0,1,1,0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "40") (term "1,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "40") (term "1,0,1,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "40") (term "1,0,1,0,0,0,0"))
                           (rule "mul_literals" (formula "40") (term "0,1,0,1,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "40") (term "0,1,0,0,0,0"))
                           (rule "polySimp_addComm0" (formula "40") (term "0,0,1,0,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "40") (term "0,1,0,0,0,0"))
                           (rule "add_literals" (formula "40") (term "1,1,0,1,0,0,0,0"))
                           (rule "times_zero_1" (formula "40") (term "1,0,1,0,0,0,0"))
                           (rule "add_zero_right" (formula "40") (term "0,1,0,0,0,0"))
                           (rule "leq_literals" (formula "40") (term "1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "40"))
                           (rule "inEqSimp_homoInEq0" (formula "40") (term "0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "40") (term "1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "40") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "40") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "40") (term "0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "40") (term "0,0,0,0,0"))
                           (rule "applyEq" (formula "40") (term "1,1,0") (ifseqformula "18"))
                           (rule "inEqSimp_invertInEq1" (formula "40") (term "0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "40") (term "0,0,0,0,0"))
                           (rule "mul_literals" (formula "40") (term "1,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "40") (term "0,0,0,0,0"))
                           (rule "inEqSimp_contradInEq1" (formula "40") (term "0,0,0,0") (ifseqformula "11"))
                           (rule "qeq_literals" (formula "40") (term "0,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "40"))
                           (rule "commute_or" (formula "40") (term "0,0"))
                           (rule "inEqSimp_or_antiSymm0" (formula "40") (term "0,0"))
                           (rule "polySimp_homoEq" (formula "40") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "40") (term "1,0,0,0,0"))
                           (rule "mul_literals" (formula "40") (term "0,1,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "40") (term "1,1,0,0,0,0"))
                           (rule "mul_literals" (formula "40") (term "0,1,1,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "40") (term "1,0,1,0,0"))
                           (rule "add_literals" (formula "40") (term "0,1,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "40") (term "1,0,0,0,0"))
                           (rule "add_literals" (formula "40") (term "0,1,0,0,0,0"))
                           (rule "add_zero_left" (formula "40") (term "1,0,0,0,0"))
                           (rule "polySimp_pullOutFactor1" (formula "40") (term "0,0,0,0"))
                           (rule "add_literals" (formula "40") (term "1,0,0,0,0"))
                           (rule "times_zero_1" (formula "40") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "40"))
                           (rule "commute_or" (formula "40") (term "0"))
                            (builtin "One Step Simplification" (formula "40"))
                           (rule "applyEq" (formula "40") (term "0") (ifseqformula "18"))
                           (rule "inEqSimp_homoInEq1" (formula "40"))
                           (rule "polySimp_pullOutFactor1" (formula "40") (term "0"))
                           (rule "add_literals" (formula "40") (term "1,0"))
                           (rule "times_zero_1" (formula "40") (term "0"))
                           (rule "leq_literals" (formula "40"))
                           (rule "true_left" (formula "40"))
                           (rule "allLeft" (formula "51") (inst "t=add(Z(neglit(1(#))), classify_sk_1)"))
                           (rule "replaceKnownSelect_taclet1010_1" (formula "51") (term "1,1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet01010_2" (formula "51") (term "1,1,0"))
                           (rule "polySimp_addAssoc" (formula "51") (term "1,1,0,0"))
                           (rule "add_literals" (formula "51") (term "0,1,1,0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "51") (term "1,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "51") (term "1,0,1,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "51") (term "1,0,1,0,0,0,0"))
                           (rule "mul_literals" (formula "51") (term "0,1,0,1,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "51") (term "0,1,0,0,0,0"))
                           (rule "polySimp_addComm0" (formula "51") (term "0,0,1,0,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "51") (term "0,1,0,0,0,0"))
                           (rule "add_literals" (formula "51") (term "1,1,0,1,0,0,0,0"))
                           (rule "times_zero_1" (formula "51") (term "1,0,1,0,0,0,0"))
                           (rule "add_zero_right" (formula "51") (term "0,1,0,0,0,0"))
                           (rule "leq_literals" (formula "51") (term "1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "51"))
                           (rule "inEqSimp_homoInEq0" (formula "51") (term "0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "51") (term "1,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "51") (term "1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "51") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "51") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "51") (term "0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "51") (term "0,0,0,0,0"))
                           (rule "applyEq" (formula "51") (term "1,1,0") (ifseqformula "18"))
                           (rule "inEqSimp_invertInEq1" (formula "51") (term "0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "51") (term "0,0,0,0,0"))
                           (rule "mul_literals" (formula "51") (term "1,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "51") (term "0,0,0,0,0"))
                           (rule "inEqSimp_contradInEq1" (formula "51") (term "0,0,0,0") (ifseqformula "11"))
                           (rule "qeq_literals" (formula "51") (term "0,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "51"))
                           (rule "allLeft" (formula "40") (inst "t=value"))
                           (rule "allLeft" (formula "17") (inst "t=value<<origin(\"accessible @ file Classifier.java @ line 291\",\"[]\")>>"))
                           (rule "allLeft" (formula "42") (inst "t=value<<origin(\"accessible @ file Classifier.java @ line 291\",\"[]\")>>"))
                           (rule "allLeft" (formula "18") (inst "t=value"))
                           (rule "allLeft" (formula "54") (inst "t=value<<origin(\"accessible @ file Classifier.java @ line 291\",\"[]\")>>"))
                           (rule "pullOutSelect" (formula "54") (term "1,1,0") (inst "selectSK=arr_4"))
                           (rule "simplifySelectOfAnon" (formula "54"))
                            (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "58")) (ifInst ""  (formula "49")))
                           (rule "disjointAllFields" (formula "54") (term "0,0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "54"))
                           (rule "applyEqReverse" (formula "55") (term "1,1,0") (ifseqformula "54"))
                           (rule "hideAuxiliaryEq" (formula "54"))
                           (rule "allLeft" (formula "55") (inst "t=value"))
                           (rule "replaceKnownSelect_taclet001001010_8" (formula "55") (term "1,1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet001001010_9" (formula "55") (term "1,1,0"))
                           (rule "equalityToElementOfRight" (formula "59") (inst "fv=fv") (inst "ov=ov"))
                            (builtin "One Step Simplification" (formula "59"))
                           (rule "allRight" (formula "59") (inst "sk=ov_0"))
                           (rule "allRight" (formula "59") (inst "sk=fv_0"))
                           (rule "notRight" (formula "59"))
                           (rule "elementOfIntersect" (formula "1"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                           (rule "elementOfSetMinus" (formula "2"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "notLeft" (formula "2"))
                           (rule "elementOfUnion" (formula "57"))
                            (builtin "One Step Simplification" (formula "57"))
                           (rule "closeTrue" (formula "57"))
                        )
                        (branch "CUT: self.sorted_splitters.* cap allLocs setMinus self.sorted_splitters.* cup self.tree.tree.* = {} FALSE"
                            (builtin "One Step Simplification" (formula "54"))
                           (rule "false_right" (formula "54"))
                           (rule "replace_known_right" (formula "49") (term "1,1") (ifseqformula "53"))
                            (builtin "One Step Simplification" (formula "49"))
                           (rule "false_right" (formula "49"))
                           (rule "onlyCreatedObjectsAreReferencedFinal" (formula "40") (term "0,1,1,1,0,0") (ifseqformula "4") (ifseqformula "1"))
                           (rule "replace_known_right" (formula "40") (term "0") (ifseqformula "50"))
                            (builtin "One Step Simplification" (formula "40"))
                           (rule "onlyCreatedObjectsAreReferencedFinal" (formula "11") (term "0") (ifseqformula "4") (ifseqformula "1"))
                           (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "12"))
                           (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "52"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "applyEq" (formula "11") (term "1,0") (ifseqformula "12"))
                           (rule "allLeft" (formula "34") (inst "t=classify_sk_0"))
                           (rule "inEqSimp_homoInEq1" (formula "34") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "34") (term "0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "34") (term "1,1,0"))
                           (rule "polySimp_rightDist" (formula "34") (term "1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0"))
                           (rule "mul_literals" (formula "34") (term "0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0"))
                           (rule "inEqSimp_contradInEq1" (formula "34") (term "0,0") (ifseqformula "23"))
                           (rule "qeq_literals" (formula "34") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "34"))
                           (rule "allLeft" (formula "38") (inst "t=add(Z(neglit(1(#))), classify_sk_1)"))
                           (rule "polySimp_addAssoc" (formula "38") (term "1,1,0,0"))
                           (rule "add_literals" (formula "38") (term "0,1,1,0,0"))
                           (rule "inEqSimp_homoInEq0" (formula "38") (term "0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "38") (term "1,0,0,0,0,0,0"))
                           (rule "mul_literals" (formula "38") (term "0,1,0,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "38") (term "0,0,0,0,0,0"))
                           (rule "add_literals" (formula "38") (term "0,0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "38") (term "0,0,0,0,0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "38") (term "1,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "38") (term "1,0,1,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "38") (term "1,0,1,0,0,0,0"))
                           (rule "mul_literals" (formula "38") (term "0,1,0,1,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "38") (term "0,1,0,0,0,0"))
                           (rule "polySimp_addComm0" (formula "38") (term "0,0,1,0,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "38") (term "0,1,0,0,0,0"))
                           (rule "add_literals" (formula "38") (term "1,1,0,1,0,0,0,0"))
                           (rule "times_zero_1" (formula "38") (term "1,0,1,0,0,0,0"))
                           (rule "add_zero_right" (formula "38") (term "0,1,0,0,0,0"))
                           (rule "leq_literals" (formula "38") (term "1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "38"))
                           (rule "applyEq" (formula "38") (term "1,1,0") (ifseqformula "16"))
                           (rule "inEqSimp_invertInEq1" (formula "38") (term "0,0,0,0"))
                           (rule "mul_literals" (formula "38") (term "1,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "38") (term "0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "38") (term "0,0,0,0,0"))
                           (rule "inEqSimp_contradInEq1" (formula "38") (term "0,0,0,0") (ifseqformula "9"))
                           (rule "qeq_literals" (formula "38") (term "0,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "38"))
                           (rule "commute_or" (formula "38") (term "0,0"))
                           (rule "inEqSimp_or_antiSymm0" (formula "38") (term "0,0"))
                           (rule "polySimp_homoEq" (formula "38") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "38") (term "1,0,0,0,0"))
                           (rule "mul_literals" (formula "38") (term "0,1,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0,0,0"))
                           (rule "mul_literals" (formula "38") (term "0,1,1,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "38") (term "1,0,1,0,0"))
                           (rule "add_literals" (formula "38") (term "0,1,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "38") (term "1,0,0,0,0"))
                           (rule "add_literals" (formula "38") (term "0,1,0,0,0,0"))
                           (rule "add_zero_left" (formula "38") (term "1,0,0,0,0"))
                           (rule "polySimp_pullOutFactor1" (formula "38") (term "0,0,0,0"))
                           (rule "add_literals" (formula "38") (term "1,0,0,0,0"))
                           (rule "times_zero_1" (formula "38") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "38"))
                           (rule "commute_or" (formula "38") (term "0"))
                            (builtin "One Step Simplification" (formula "38"))
                           (rule "applyEq" (formula "38") (term "0") (ifseqformula "16"))
                           (rule "inEqSimp_homoInEq1" (formula "38"))
                           (rule "polySimp_pullOutFactor1" (formula "38") (term "0"))
                           (rule "add_literals" (formula "38") (term "1,0"))
                           (rule "times_zero_1" (formula "38") (term "0"))
                           (rule "leq_literals" (formula "38"))
                           (rule "true_left" (formula "38"))
                           (rule "allLeft" (formula "50") (inst "t=add(Z(neglit(1(#))), classify_sk_1)"))
                           (rule "replaceKnownSelect_taclet1010_1" (formula "50") (term "1,1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet01010_2" (formula "50") (term "1,1,0"))
                           (rule "polySimp_addAssoc" (formula "50") (term "1,1,0,0"))
                           (rule "add_literals" (formula "50") (term "0,1,1,0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "50") (term "1,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "50") (term "1,0,1,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "50") (term "1,0,1,0,0,0,0"))
                           (rule "mul_literals" (formula "50") (term "0,1,0,1,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "50") (term "0,1,0,0,0,0"))
                           (rule "polySimp_addComm0" (formula "50") (term "0,0,1,0,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "50") (term "0,1,0,0,0,0"))
                           (rule "add_literals" (formula "50") (term "1,1,0,1,0,0,0,0"))
                           (rule "times_zero_1" (formula "50") (term "1,0,1,0,0,0,0"))
                           (rule "add_zero_right" (formula "50") (term "0,1,0,0,0,0"))
                           (rule "leq_literals" (formula "50") (term "1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "50"))
                           (rule "inEqSimp_homoInEq0" (formula "50") (term "0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "50") (term "1,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "50") (term "1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "50") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "50") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "50") (term "0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "50") (term "0,0,0,0,0"))
                           (rule "applyEq" (formula "50") (term "1,1,0") (ifseqformula "16"))
                           (rule "inEqSimp_invertInEq1" (formula "50") (term "0,0,0,0"))
                           (rule "mul_literals" (formula "50") (term "1,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "50") (term "0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "50") (term "0,0,0,0,0"))
                           (rule "inEqSimp_contradInEq1" (formula "50") (term "0,0,0,0") (ifseqformula "9"))
                           (rule "qeq_literals" (formula "50") (term "0,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "50"))
                           (rule "allLeft" (formula "15") (inst "t=value<<origin(\"accessible @ file Classifier.java @ line 291\",\"[]\")>>"))
                           (rule "allLeft" (formula "39") (inst "t=value<<origin(\"accessible @ file Classifier.java @ line 291\",\"[]\")>>"))
                           (rule "allLeft" (formula "53") (inst "t=value<<origin(\"accessible @ file Classifier.java @ line 291\",\"[]\")>>"))
                           (rule "pullOutSelect" (formula "53") (term "1,1,0") (inst "selectSK=arr_4"))
                           (rule "simplifySelectOfAnon" (formula "53"))
                            (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "57")) (ifInst ""  (formula "48")))
                           (rule "elementOfSetMinus" (formula "53") (term "0,0"))
                            (builtin "One Step Simplification" (formula "53"))
                           (rule "ifthenelse_negated" (formula "53") (term "0"))
                           (rule "elementOfUnion" (formula "53") (term "0,0"))
                            (builtin "One Step Simplification" (formula "53"))
                           (rule "applyEqReverse" (formula "54") (term "1,1,0") (ifseqformula "53"))
                           (rule "hideAuxiliaryEq" (formula "53"))
                           (rule "allLeft" (formula "16") (inst "t=value"))
                           (rule "allLeft" (formula "40") (inst "t=value"))
                           (rule "allLeft" (formula "54") (inst "t=value"))
                           (rule "replaceKnownSelect_taclet101001010_8" (formula "54") (term "1,1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet101001010_9" (formula "54") (term "1,1,0"))
                           (rule "equalityToElementOfRight" (formula "58") (inst "fv=fv") (inst "ov=ov"))
                            (builtin "One Step Simplification" (formula "58"))
                           (rule "allRight" (formula "58") (inst "sk=ov_0"))
                           (rule "allRight" (formula "58") (inst "sk=fv_0"))
                           (rule "notRight" (formula "58"))
                           (rule "elementOfIntersect" (formula "1"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                           (rule "elementOfSetMinus" (formula "2"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "notLeft" (formula "2"))
                           (rule "elementOfUnion" (formula "56"))
                            (builtin "One Step Simplification" (formula "56"))
                           (rule "closeTrue" (formula "56"))
                        )
                     )
                     (branch "CUT: self.tree.<created> = TRUE FALSE"
                         (builtin "One Step Simplification" (formula "43"))
                        (rule "false_right" (formula "43"))
                        (rule "arrayLengthNotNegative" (formula "27") (term "0"))
                        (rule "all_pull_out3" (formula "11") (term "0"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "23") (term "0,0") (ifseqformula "3") (ifseqformula "5"))
                        (rule "replace_known_right" (formula "23") (term "0") (ifseqformula "43"))
                         (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "44")))
                        (rule "closeFalse" (formula "23"))
                     )
                  )
               )
               (branch "CUT: classify_sk_0 >= 1 FALSE"
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "true_left" (formula "21"))
                  (rule "inEqSimp_geqRight" (formula "42"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_subsumption0" (formula "20") (ifseqformula "1"))
                  (rule "leq_literals" (formula "20") (term "0"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "true_left" (formula "20"))
                  (rule "inEqSimp_antiSymm" (formula "16") (ifseqformula "1"))
                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "16"))
                  (rule "leq_literals" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "applyEqRigid" (formula "21") (term "0,2,0,1") (ifseqformula "15"))
                  (rule "applyEqRigid" (formula "33") (term "0,1,1") (ifseqformula "15"))
                  (rule "times_zero_2" (formula "33") (term "1,1"))
                  (rule "add_zero_right" (formula "33") (term "1"))
                  (rule "applyEqRigid" (formula "21") (term "0,1,1,0") (ifseqformula "15"))
                  (rule "mul_literals" (formula "21") (term "1,1,0"))
                  (rule "add_zero_right" (formula "21") (term "1,0"))
                  (rule "applyEqRigid" (formula "20") (term "0,1,1") (ifseqformula "15"))
                  (rule "times_zero_2" (formula "20") (term "1,1"))
                  (rule "add_zero_right" (formula "20") (term "1"))
                  (rule "applyEq" (formula "16") (term "0") (ifseqformula "15"))
                  (rule "qeq_literals" (formula "16"))
                  (rule "true_left" (formula "16"))
                  (rule "applyEq" (formula "9") (term "1,1") (ifseqformula "15"))
                  (rule "add_literals" (formula "9") (term "1"))
                  (rule "applyEq" (formula "17") (term "1,1") (ifseqformula "15"))
                  (rule "add_zero_right" (formula "17") (term "1"))
                  (rule "applyEq" (formula "8") (term "1,1") (ifseqformula "15"))
                  (rule "add_zero_right" (formula "8") (term "1"))
                  (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "8"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "applyEqRigid" (formula "12") (term "0,0,1,1,0,0") (ifseqformula "15"))
                  (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                  (rule "add_zero_left" (formula "12") (term "1,1,0,0"))
                  (rule "applyEq" (formula "26") (term "0,1,0,1,1,0,0") (ifseqformula "15"))
                  (rule "mul_literals" (formula "26") (term "1,0,1,1,0,0"))
                  (rule "add_zero_right" (formula "26") (term "0,1,1,0,0"))
                  (rule "applyEq" (formula "25") (term "0,1,0,1,1,0,0") (ifseqformula "15"))
                  (rule "times_zero_2" (formula "25") (term "1,0,1,1,0,0"))
                  (rule "add_zero_right" (formula "25") (term "0,1,1,0,0"))
                  (rule "applyEq" (formula "18") (term "0,1,0,1") (ifseqformula "15"))
                  (rule "times_zero_2" (formula "18") (term "1,0,1"))
                  (rule "add_zero_right" (formula "18") (term "0,1"))
                  (rule "applyEq" (formula "13") (term "0,1,0,0,2,0") (ifseqformula "15"))
                  (rule "times_zero_2" (formula "13") (term "1,0,0,2,0"))
                  (rule "add_zero_right" (formula "13") (term "0,0,2,0"))
                  (rule "eqSymm" (formula "13"))
                  (rule "applyEq" (formula "45") (term "1") (ifseqformula "15"))
                  (rule "applyEqRigid" (formula "23") (term "0,0,1") (ifseqformula "15"))
                  (rule "times_zero_2" (formula "23") (term "0,1"))
                  (rule "add_zero_left" (formula "23") (term "1"))
                  (rule "applyEq" (formula "37") (term "1,0,1,0") (ifseqformula "15"))
                  (rule "add_zero_right" (formula "37") (term "0,1,0"))
                  (rule "applyEq" (formula "38") (term "0,1,0,1,1,0,0") (ifseqformula "15"))
                  (rule "times_zero_2" (formula "38") (term "1,0,1,1,0,0"))
                  (rule "add_zero_right" (formula "38") (term "0,1,1,0,0"))
                  (rule "applyEqRigid" (formula "24") (term "0,0,1") (ifseqformula "15"))
                  (rule "times_zero_2" (formula "24") (term "0,1"))
                  (rule "add_zero_left" (formula "24") (term "1"))
                  (rule "applyEq" (formula "31") (term "0,1,0,1") (ifseqformula "15"))
                  (rule "times_zero_2" (formula "31") (term "1,0,1"))
                  (rule "add_zero_right" (formula "31") (term "0,1"))
                  (rule "applyEq" (formula "38") (term "0,1,0,1,0,0,0,1,0") (ifseqformula "15"))
                  (rule "times_zero_2" (formula "38") (term "1,0,1,0,0,0,1,0"))
                  (rule "add_zero_right" (formula "38") (term "0,1,0,0,0,1,0"))
                  (rule "applyEqRigid" (formula "12") (term "0,0,1,0,0,0,1,0") (ifseqformula "15"))
                  (rule "times_zero_2" (formula "12") (term "0,1,0,0,0,1,0"))
                  (rule "add_zero_left" (formula "12") (term "1,0,0,0,1,0"))
                  (rule "applyEqRigid" (formula "32") (term "1,0,1") (ifseqformula "15"))
                  (rule "add_zero_right" (formula "32") (term "0,1"))
                  (rule "applyEq" (formula "26") (term "0,1,0,1,0,0,0,1,0") (ifseqformula "15"))
                  (rule "times_zero_2" (formula "26") (term "1,0,1,0,0,0,1,0"))
                  (rule "add_zero_right" (formula "26") (term "0,1,0,0,0,1,0"))
                  (rule "applyEqRigid" (formula "34") (term "1,0,1") (ifseqformula "15"))
                  (rule "add_zero_right" (formula "34") (term "0,1"))
                  (rule "applyEq" (formula "10") (term "0,0,1") (ifseqformula "15"))
                  (rule "times_zero_2" (formula "10") (term "0,1"))
                  (rule "add_zero_left" (formula "10") (term "1"))
                  (rule "applyEq" (formula "22") (term "0,0,1") (ifseqformula "15"))
                  (rule "times_zero_2" (formula "22") (term "0,1"))
                  (rule "add_zero_left" (formula "22") (term "1"))
                  (rule "applyEqRigid" (formula "2") (term "0,0,1") (ifseqformula "15"))
                  (rule "times_zero_2" (formula "2") (term "0,1"))
                  (rule "add_zero_left" (formula "2") (term "1"))
                  (rule "applyEqRigid" (formula "29") (term "0,0,0,1") (ifseqformula "15"))
                  (rule "times_zero_2" (formula "29") (term "0,0,1"))
                  (rule "add_zero_left" (formula "29") (term "0,1"))
                  (rule "applyEqRigid" (formula "1") (term "0,0,0,1") (ifseqformula "15"))
                  (rule "times_zero_2" (formula "1") (term "0,0,1"))
                  (rule "add_zero_left" (formula "1") (term "0,1"))
                  (rule "applyEqRigid" (formula "13") (term "0,1,0,0,2,0") (ifseqformula "15"))
                  (rule "times_zero_2" (formula "13") (term "1,0,0,2,0"))
                  (rule "add_zero_right" (formula "13") (term "0,0,2,0"))
                  (rule "eqSymm" (formula "13"))
                  (rule "inEqSimp_strengthen1" (formula "30") (ifseqformula "44"))
                  (rule "add_zero_right" (formula "30") (term "1"))
                  (rule "replace_known_left" (formula "35") (term "0") (ifseqformula "30"))
                   (builtin "One Step Simplification" (formula "35"))
                  (rule "inEqSimp_contradEq7" (formula "44") (ifseqformula "30"))
                  (rule "times_zero_1" (formula "44") (term "1,0,0"))
                  (rule "add_zero_right" (formula "44") (term "0,0"))
                  (rule "leq_literals" (formula "44") (term "0"))
                   (builtin "One Step Simplification" (formula "44"))
                  (rule "false_right" (formula "44"))
                  (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "8"))
                  (rule "leq_literals" (formula "16") (term "0"))
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "true_left" (formula "16"))
                  (rule "inEqSimp_subsumption6" (formula "16") (ifseqformula "29"))
                  (rule "mul_literals" (formula "16") (term "1,1,0"))
                  (rule "greater_literals" (formula "16") (term "0,0"))
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "leq_literals" (formula "16") (term "0"))
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "true_left" (formula "16"))
                  (rule "inEqSimp_exactShadow3" (formula "29") (ifseqformula "9"))
                  (rule "polySimp_rightDist" (formula "29") (term "0,0"))
                  (rule "mul_literals" (formula "29") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "29") (term "0"))
                  (rule "add_literals" (formula "29") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "29"))
                  (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                  (rule "polySimp_elimOne" (formula "29") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "30") (ifseqformula "9"))
                  (rule "polySimp_rightDist" (formula "30") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "1,0,0"))
                  (rule "mul_literals" (formula "30") (term "0,0,0"))
                  (rule "polySimp_elimOne" (formula "30") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "30") (term "0"))
                  (rule "add_literals" (formula "30") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "30"))
                  (rule "mul_literals" (formula "30") (term "1"))
                  (rule "inEqSimp_subsumption1" (formula "30") (ifseqformula "28"))
                  (rule "leq_literals" (formula "30") (term "0"))
                   (builtin "One Step Simplification" (formula "30"))
                  (rule "true_left" (formula "30"))
                  (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "9"))
                  (rule "polySimp_rightDist" (formula "16") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0"))
                  (rule "mul_literals" (formula "16") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "16") (term "0"))
                  (rule "add_literals" (formula "16") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                  (rule "mul_literals" (formula "16") (term "1"))
                  (rule "inEqSimp_subsumption6" (formula "16") (ifseqformula "29"))
                  (rule "mul_literals" (formula "16") (term "1,1,0"))
                  (rule "greater_literals" (formula "16") (term "0,0"))
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "leq_literals" (formula "16") (term "0"))
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "true_left" (formula "16"))
                  (rule "arrayLengthIsAShort" (formula "21") (term "0"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "true_left" (formula "21"))
                  (rule "arrayLengthIsAShort" (formula "22") (term "0"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "true_left" (formula "22"))
                  (rule "cut_direct" (formula "39") (term "1"))
                  (branch "CUT: self.tree.<created> = TRUE TRUE"
                      (builtin "One Step Simplification" (formula "40"))
                     (rule "arrayLengthNotNegative" (formula "22") (term "0"))
                     (rule "arrayLengthNotNegative" (formula "24") (term "0"))
                     (rule "all_pull_out3" (formula "38") (term "0"))
                     (rule "shift_paren_or" (formula "38") (term "0,0"))
                     (rule "shift_paren_or" (formula "38") (term "0,0,0"))
                     (rule "all_pull_out3" (formula "13") (term "0"))
                     (rule "shift_paren_or" (formula "13") (term "0,0"))
                     (rule "shift_paren_or" (formula "13") (term "0,0,0"))
                     (rule "all_pull_out3" (formula "27") (term "0"))
                     (rule "shift_paren_or" (formula "27") (term "0,0"))
                     (rule "shift_paren_or" (formula "27") (term "0,0,0"))
                     (rule "onlyCreatedObjectsAreReferencedFinal" (formula "30") (term "0,0,1,1,1,0,0") (ifseqformula "4") (ifseqformula "6"))
                     (rule "replace_known_left" (formula "30") (term "1") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "42")))
                     (rule "true_left" (formula "30"))
                     (rule "onlyCreatedObjectsAreReferencedFinal" (formula "30") (term "0,0,1,1,0,0") (ifseqformula "4") (ifseqformula "6"))
                     (rule "replace_known_left" (formula "30") (term "1") (ifseqformula "36"))
                      (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "41")))
                     (rule "true_left" (formula "30"))
                     (rule "cut_direct" (formula "37") (term "0"))
                     (branch "CUT: result_241 >= 2 + classify_sk_1 TRUE"
                         (builtin "One Step Simplification" (formula "38"))
                        (rule "inEqSimp_subsumption1" (formula "32") (ifseqformula "37"))
                        (rule "inEqSimp_homoInEq0" (formula "32") (term "0"))
                        (rule "polySimp_mulComm0" (formula "32") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "32") (term "1,0,0"))
                        (rule "mul_literals" (formula "32") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "32") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "32") (term "0,0,0"))
                        (rule "add_literals" (formula "32") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0"))
                        (rule "add_literals" (formula "32") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "32") (term "1,0,0"))
                        (rule "add_zero_right" (formula "32") (term "0,0"))
                        (rule "qeq_literals" (formula "32") (term "0"))
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "true_left" (formula "32"))
                        (rule "inEqSimp_exactShadow3" (formula "36") (ifseqformula "10"))
                        (rule "polySimp_rightDist" (formula "36") (term "0,0"))
                        (rule "mul_literals" (formula "36") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "36") (term "0"))
                        (rule "add_literals" (formula "36") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "36"))
                        (rule "polySimp_mulLiterals" (formula "36") (term "0"))
                        (rule "polySimp_elimOne" (formula "36") (term "0"))
                        (rule "inEqSimp_subsumption0" (formula "33") (ifseqformula "36"))
                        (rule "leq_literals" (formula "33") (term "0"))
                         (builtin "One Step Simplification" (formula "33"))
                        (rule "true_left" (formula "33"))
                        (rule "allLeft" (formula "38") (inst "t=classify_sk_1"))
                        (rule "replaceKnownSelect_taclet1010_0" (formula "38") (term "1,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet01010_3" (formula "38") (term "1,1,0"))
                        (rule "inEqSimp_homoInEq1" (formula "38") (term "1,0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "38") (term "0,1,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0,0,0"))
                        (rule "mul_literals" (formula "38") (term "0,1,1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "38") (term "1,0,0,0,0") (ifseqformula "36"))
                        (rule "inEqSimp_homoInEq1" (formula "38") (term "0,1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "38") (term "0,0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "38") (term "0,0,0,0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "38") (term "0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "38") (term "1,1,0,0,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "38") (term "1,0,0,1,0,0,0,0"))
                        (rule "add_zero_right" (formula "38") (term "0,0,1,0,0,0,0"))
                        (rule "leq_literals" (formula "38") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "38"))
                        (rule "inEqSimp_contradInEq1" (formula "38") (term "0,0,0,0") (ifseqformula "31"))
                        (rule "qeq_literals" (formula "38") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "38"))
                        (rule "commute_or" (formula "38") (term "0,0"))
                        (rule "allLeft" (formula "13") (inst "t=Z(0(#))"))
                        (rule "add_zero_right" (formula "13") (term "1,1,0,0"))
                        (rule "leq_literals" (formula "13") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "inEqSimp_commuteGeq" (formula "13") (term "0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "13") (term "0,0,0,0") (ifseqformula "9"))
                        (rule "qeq_literals" (formula "13") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "commute_or" (formula "13") (term "0,0"))
                        (rule "allLeft" (formula "27") (inst "t=add(Z(neglit(1(#))), classify_sk_1)"))
                        (rule "polySimp_addAssoc" (formula "27") (term "0,2,0,1"))
                        (rule "add_literals" (formula "27") (term "0,0,2,0,1"))
                        (rule "add_zero_left" (formula "27") (term "0,2,0,1"))
                        (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                        (rule "inEqSimp_homoInEq0" (formula "27") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "27") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "27") (term "0,0,0"))
                        (rule "add_literals" (formula "27") (term "0,0,0,0"))
                        (rule "add_zero_left" (formula "27") (term "0,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "27") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "27") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "27") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "27") (term "0,1,0,1,0"))
                        (rule "polySimp_addComm1" (formula "27") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0"))
                        (rule "add_literals" (formula "27") (term "0,0,0,1,0"))
                        (rule "inEqSimp_invertInEq1" (formula "27") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "27") (term "0,0,0"))
                        (rule "times_zero_2" (formula "27") (term "1,0,0"))
                        (rule "polySimp_elimOne" (formula "27") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "27") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "27") (term "1,1,0"))
                        (rule "mul_literals" (formula "27") (term "0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0"))
                        (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0"))
                        (rule "inEqSimp_contradInEq1" (formula "27") (term "1,0") (ifseqformula "38"))
                        (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1,0"))
                        (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0"))
                        (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0"))
                        (rule "polySimp_addComm1" (formula "27") (term "0,0,0,1,0"))
                        (rule "add_literals" (formula "27") (term "0,0,0,0,1,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,1,0"))
                        (rule "add_literals" (formula "27") (term "1,1,0,0,1,0"))
                        (rule "times_zero_1" (formula "27") (term "1,0,0,1,0"))
                        (rule "add_zero_right" (formula "27") (term "0,0,1,0"))
                        (rule "leq_literals" (formula "27") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "inEqSimp_contradInEq1" (formula "27") (term "0") (ifseqformula "33"))
                        (rule "qeq_literals" (formula "27") (term "0,0"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "allLeft" (formula "41") (inst "t=Z(0(#))"))
                        (rule "add_zero_right" (formula "41") (term "1,1,0,0"))
                        (rule "leq_literals" (formula "41") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "41"))
                        (rule "inEqSimp_homoInEq1" (formula "41") (term "0,0,0,0"))
                        (rule "times_zero_2" (formula "41") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "41") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "0,0,0,0"))
                        (rule "mul_literals" (formula "41") (term "1,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "41") (term "0,0,0,0") (ifseqformula "9"))
                        (rule "qeq_literals" (formula "41") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "41"))
                        (rule "pullOutSelect" (formula "41") (term "1,1,0") (inst "selectSK=arr_2"))
                        (rule "simplifySelectOfAnon" (formula "41"))
                         (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "45")) (ifInst ""  (formula "35")))
                        (rule "elementOfSetMinus" (formula "41") (term "0,0"))
                         (builtin "One Step Simplification" (formula "41"))
                        (rule "ifthenelse_negated" (formula "41") (term "0"))
                        (rule "elementOfUnion" (formula "41") (term "0,0"))
                         (builtin "One Step Simplification" (formula "41"))
                        (rule "applyEqReverse" (formula "42") (term "1,1,0") (ifseqformula "41"))
                        (rule "hideAuxiliaryEq" (formula "41"))
                        (rule "commute_or" (formula "41") (term "0,0"))
                        (rule "allLeft" (formula "14") (inst "t=add(Z(neglit(2(#))), result_241)"))
                        (rule "polySimp_addAssoc" (formula "14") (term "1,1,0,0"))
                        (rule "add_literals" (formula "14") (term "0,1,1,0,0"))
                        (rule "inEqSimp_homoInEq0" (formula "14") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,0,0,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "14") (term "1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,1,0,0,0,0"))
                        (rule "polySimp_addComm0" (formula "14") (term "0,0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,1,0,0,0,0"))
                        (rule "add_literals" (formula "14") (term "1,1,0,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "14") (term "1,0,1,0,0,0,0"))
                        (rule "add_zero_right" (formula "14") (term "0,1,0,0,0,0"))
                        (rule "leq_literals" (formula "14") (term "1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "applyEq" (formula "14") (term "1,1,0") (ifseqformula "16"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "14") (term "0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "0,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "14") (term "0,0,0,0") (ifseqformula "9"))
                        (rule "qeq_literals" (formula "14") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "commute_or" (formula "14") (term "0,0"))
                        (rule "allLeft" (formula "30") (inst "t=add(Z(neglit(1(#))), classify_sk_1)"))
                        (rule "polySimp_addAssoc" (formula "30") (term "1,1,0,0"))
                        (rule "add_literals" (formula "30") (term "0,1,1,0,0"))
                        (rule "inEqSimp_homoInEq0" (formula "30") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "30") (term "1,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "30") (term "0,1,0,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "30") (term "0,0,0,0,0,0"))
                        (rule "add_literals" (formula "30") (term "0,0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "30") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "30") (term "1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "30") (term "1,0,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "30") (term "1,0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "30") (term "0,1,0,1,0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "30") (term "0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "30") (term "0,0,0,1,0,0,0,0"))
                        (rule "add_zero_left" (formula "30") (term "0,0,1,0,0,0,0"))
                        (rule "inEqSimp_invertInEq1" (formula "30") (term "0,0,0,0,0"))
                        (rule "mul_literals" (formula "30") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "0,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "30") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "30") (term "1,0,0,0,0") (ifseqformula "40"))
                        (rule "inEqSimp_homoInEq1" (formula "30") (term "0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "30") (term "1,1,0,0,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "30") (term "1,0,0,1,0,0,0,0"))
                        (rule "add_zero_right" (formula "30") (term "0,0,1,0,0,0,0"))
                        (rule "leq_literals" (formula "30") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "inEqSimp_contradInEq1" (formula "30") (term "0,0,0,0") (ifseqformula "35"))
                        (rule "qeq_literals" (formula "30") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "commute_or" (formula "30") (term "0,0"))
                        (rule "allLeft" (formula "31") (inst "t=classify_sk_1"))
                        (rule "inEqSimp_homoInEq1" (formula "31") (term "1,0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "31") (term "0,1,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,0,0"))
                        (rule "mul_literals" (formula "31") (term "0,1,1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "31") (term "0,0,0,0,0") (ifseqformula "36"))
                        (rule "qeq_literals" (formula "31") (term "0,0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "31"))
                        (rule "inEqSimp_contradInEq1" (formula "31") (term "0,0,0,0") (ifseqformula "41"))
                        (rule "inEqSimp_homoInEq1" (formula "31") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "31") (term "1,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "31") (term "0,1,0,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "31") (term "0,0,0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "31") (term "0,0,0,0,0,0,0"))
                        (rule "add_literals" (formula "31") (term "0,0,0,0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,0,0,0,0"))
                        (rule "add_literals" (formula "31") (term "1,1,0,0,0,0,0,0"))
                        (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "31") (term "0,0,0,0,0,0"))
                        (rule "leq_literals" (formula "31") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "31"))
                        (rule "commute_or" (formula "31") (term "0,0"))
                        (rule "allLeft" (formula "32") (inst "t=Z(0(#))"))
                        (rule "add_zero_right" (formula "32") (term "1,1,0,0"))
                        (rule "leq_literals" (formula "32") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "inEqSimp_homoInEq1" (formula "32") (term "0,0,0,0"))
                        (rule "times_zero_2" (formula "32") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "32") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0,0"))
                        (rule "mul_literals" (formula "32") (term "1,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "32") (term "0,0,0,0") (ifseqformula "9"))
                        (rule "qeq_literals" (formula "32") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "commute_or" (formula "32") (term "0,0"))
                        (rule "allLeft" (formula "15") (inst "t=add(Z(neglit(1(#))), classify_sk_1)"))
                        (rule "polySimp_addAssoc" (formula "15") (term "1,1,0,0"))
                        (rule "add_literals" (formula "15") (term "0,1,1,0,0"))
                        (rule "inEqSimp_commuteGeq" (formula "15") (term "1,0,0,0,0"))
                        (rule "inEqSimp_homoInEq0" (formula "15") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0,0,0"))
                        (rule "add_literals" (formula "15") (term "0,0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "15") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_invertInEq1" (formula "15") (term "0,0,0,0,0"))
                        (rule "times_zero_2" (formula "15") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "15") (term "1,0,0,0,0") (ifseqformula "43"))
                        (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "15") (term "0,0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "15") (term "0,0,0,0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "15") (term "1,1,0,0,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "15") (term "1,0,0,1,0,0,0,0"))
                        (rule "add_zero_right" (formula "15") (term "0,0,1,0,0,0,0"))
                        (rule "leq_literals" (formula "15") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "inEqSimp_contradInEq1" (formula "15") (term "0,0,0,0") (ifseqformula "38"))
                        (rule "qeq_literals" (formula "15") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "allLeft" (formula "16") (inst "t=classify_sk_1"))
                        (rule "inEqSimp_commuteGeq" (formula "16") (term "1,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "16") (term "1,0,0,0,0") (ifseqformula "44"))
                        (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "16") (term "1,1,0,0,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "16") (term "1,0,0,1,0,0,0,0"))
                        (rule "add_zero_right" (formula "16") (term "0,0,1,0,0,0,0"))
                        (rule "leq_literals" (formula "16") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "inEqSimp_contradInEq1" (formula "16") (term "0,0,0,0") (ifseqformula "39"))
                        (rule "qeq_literals" (formula "16") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "allLeft" (formula "48") (inst "t=add(Z(neglit(1(#))), classify_sk_1)"))
                        (rule "replaceKnownSelect_taclet1010_1" (formula "48") (term "1,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet01010_2" (formula "48") (term "1,1,0"))
                        (rule "polySimp_addAssoc" (formula "48") (term "1,1,0,0"))
                        (rule "add_literals" (formula "48") (term "0,1,1,0,0"))
                        (rule "inEqSimp_homoInEq0" (formula "48") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "48") (term "1,0,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "48") (term "1,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "48") (term "0,1,0,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "48") (term "0,0,0,0,0,0"))
                        (rule "add_literals" (formula "48") (term "0,0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "48") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "48") (term "1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "48") (term "1,0,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "48") (term "1,0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "48") (term "0,1,0,1,0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "48") (term "0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "48") (term "0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "48") (term "0,0,0,1,0,0,0,0"))
                        (rule "add_zero_left" (formula "48") (term "0,0,1,0,0,0,0"))
                        (rule "inEqSimp_invertInEq1" (formula "48") (term "0,0,0,0,0"))
                        (rule "times_zero_2" (formula "48") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "48") (term "0,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "48") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "48") (term "1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "48") (term "1,1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "48") (term "1,1,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "48") (term "0,0,0,0,0") (ifseqformula "39"))
                        (rule "qeq_literals" (formula "48") (term "0,0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "48"))
                        (rule "inEqSimp_contradInEq1" (formula "48") (term "0,0,0,0") (ifseqformula "44"))
                        (rule "inEqSimp_homoInEq1" (formula "48") (term "0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "48") (term "0,0,0,0,0,0"))
                        (rule "add_literals" (formula "48") (term "1,1,0,0,0,0,0,0"))
                        (rule "times_zero_1" (formula "48") (term "1,0,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "48") (term "0,0,0,0,0,0"))
                        (rule "leq_literals" (formula "48") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "48"))
                        (rule "commute_or" (formula "15") (term "0,0"))
                        (rule "commute_or" (formula "16") (term "0,0"))
                        (rule "cut_direct" (formula "53") (term "0"))
                        (branch "CUT: self.sorted_splitters.* cap allLocs setMinus self.sorted_splitters.* cup self.tree.tree.* = {} TRUE"
                            (builtin "One Step Simplification" (formula "54"))
                           (rule "onlyCreatedObjectsAreReferencedFinal" (formula "28") (term "0,0") (ifseqformula "5") (ifseqformula "2"))
                           (rule "replace_known_right" (formula "28") (term "0") (ifseqformula "52"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "onlyCreatedObjectsAreReferencedFinal" (formula "13") (term "0") (ifseqformula "5") (ifseqformula "2"))
                           (rule "applyEq" (formula "13") (term "1,0,1") (ifseqformula "14"))
                           (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "44"))
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "true_left" (formula "13"))
                           (rule "commute_or" (formula "50") (term "0,0"))
                           (rule "allLeft" (formula "33") (inst "t=classify_sk_1"))
                           (rule "inEqSimp_homoInEq1" (formula "33") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "33") (term "0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "33") (term "1,1,0"))
                           (rule "polySimp_rightDist" (formula "33") (term "1,1,0"))
                           (rule "mul_literals" (formula "33") (term "0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0"))
                           (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0"))
                           (rule "inEqSimp_contradInEq1" (formula "33") (term "0,0") (ifseqformula "42"))
                           (rule "qeq_literals" (formula "33") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "33"))
                           (rule "allLeft" (formula "34") (inst "t=Z(0(#))"))
                           (rule "leq_literals" (formula "34") (term "0,0"))
                            (builtin "One Step Simplification" (formula "34"))
                           (rule "add_zero_right" (formula "34") (term "0,2,0,1"))
                           (rule "inEqSimp_homoInEq1" (formula "34") (term "0"))
                           (rule "times_zero_2" (formula "34") (term "1,0,0"))
                           (rule "add_zero_right" (formula "34") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0"))
                           (rule "mul_literals" (formula "34") (term "1,0"))
                           (rule "allLeft" (formula "35") (inst "t=mul(classify_sk_1, Z(neglit(2(#))))"))
                           (rule "inEqSimp_homoInEq0" (formula "35") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "35") (term "1,0,0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "35") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "35") (term "1,0,1,0"))
                           (rule "polySimp_addComm1" (formula "35") (term "0,1,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "0,0"))
                           (rule "mul_literals" (formula "35") (term "1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "35") (term "1,1,0"))
                           (rule "polySimp_rightDist" (formula "35") (term "1,1,0"))
                           (rule "mul_literals" (formula "35") (term "0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0"))
                           (rule "inEqSimp_subsumption6" (formula "35") (term "0,0") (ifseqformula "44"))
                           (rule "mul_literals" (formula "35") (term "1,1,0,0,0"))
                           (rule "greater_literals" (formula "35") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "35"))
                           (rule "leq_literals" (formula "35") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "35"))
                           (rule "true_left" (formula "35"))
                           (rule "equalityToElementOfRight" (formula "57") (inst "fv=fv") (inst "ov=ov"))
                            (builtin "One Step Simplification" (formula "57"))
                           (rule "allRight" (formula "57") (inst "sk=ov_0"))
                           (rule "allRight" (formula "57") (inst "sk=fv_0"))
                           (rule "notRight" (formula "57"))
                           (rule "elementOfIntersect" (formula "1"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                           (rule "elementOfSetMinus" (formula "2"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "notLeft" (formula "2"))
                           (rule "elementOfUnion" (formula "55"))
                            (builtin "One Step Simplification" (formula "55"))
                           (rule "closeTrue" (formula "55"))
                        )
                        (branch "CUT: self.sorted_splitters.* cap allLocs setMinus self.sorted_splitters.* cup self.tree.tree.* = {} FALSE"
                            (builtin "One Step Simplification" (formula "54"))
                           (rule "false_right" (formula "54"))
                           (rule "onlyCreatedObjectsAreReferencedFinal" (formula "50") (term "0") (ifseqformula "4") (ifseqformula "1"))
                           (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "51"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "onlyCreatedObjectsAreReferencedFinal" (formula "13") (term "0") (ifseqformula "5") (ifseqformula "2"))
                           (rule "applyEq" (formula "13") (term "0,0") (ifseqformula "14"))
                           (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "53"))
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "applyEq" (formula "13") (term "1,0") (ifseqformula "14"))
                           (rule "commute_or" (formula "49") (term "0,0"))
                           (rule "allLeft" (formula "32") (inst "t=classify_sk_1"))
                           (rule "inEqSimp_homoInEq1" (formula "32") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "32") (term "0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "32") (term "1,1,0"))
                           (rule "polySimp_rightDist" (formula "32") (term "1,1,0"))
                           (rule "mul_literals" (formula "32") (term "0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0"))
                           (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0"))
                           (rule "inEqSimp_contradInEq1" (formula "32") (term "0,0") (ifseqformula "41"))
                           (rule "qeq_literals" (formula "32") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "32"))
                           (rule "allLeft" (formula "33") (inst "t=Z(0(#))"))
                           (rule "leq_literals" (formula "33") (term "0,0"))
                            (builtin "One Step Simplification" (formula "33"))
                           (rule "add_zero_right" (formula "33") (term "0,2,0,1"))
                           (rule "inEqSimp_homoInEq1" (formula "33") (term "0"))
                           (rule "times_zero_2" (formula "33") (term "1,0,0"))
                           (rule "add_zero_right" (formula "33") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0"))
                           (rule "mul_literals" (formula "33") (term "1,0"))
                           (rule "allLeft" (formula "34") (inst "t=mul(classify_sk_1, Z(neglit(2(#))))"))
                           (rule "inEqSimp_homoInEq1" (formula "34") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "34") (term "1,0,1,0"))
                           (rule "polySimp_addComm1" (formula "34") (term "0,1,0"))
                           (rule "inEqSimp_homoInEq0" (formula "34") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "34") (term "1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "34") (term "1,1,0"))
                           (rule "polySimp_rightDist" (formula "34") (term "1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0"))
                           (rule "mul_literals" (formula "34") (term "0,1,1,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "0,0"))
                           (rule "mul_literals" (formula "34") (term "1,0,0"))
                           (rule "inEqSimp_subsumption6" (formula "34") (term "0,0") (ifseqformula "43"))
                           (rule "greater_literals" (formula "34") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "34"))
                           (rule "mul_literals" (formula "34") (term "1,0,0,0"))
                           (rule "leq_literals" (formula "34") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "34"))
                           (rule "true_left" (formula "34"))
                           (rule "equalityToElementOfRight" (formula "56") (inst "fv=fv") (inst "ov=ov"))
                            (builtin "One Step Simplification" (formula "56"))
                           (rule "allRight" (formula "56") (inst "sk=ov_0"))
                           (rule "allRight" (formula "56") (inst "sk=fv_0"))
                           (rule "notRight" (formula "56"))
                           (rule "elementOfIntersect" (formula "1"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                           (rule "elementOfSetMinus" (formula "2"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "notLeft" (formula "2"))
                           (rule "elementOfUnion" (formula "54"))
                            (builtin "One Step Simplification" (formula "54"))
                           (rule "closeTrue" (formula "54"))
                        )
                     )
                     (branch "CUT: result_241 >= 2 + classify_sk_1 FALSE"
                         (builtin "One Step Simplification" (formula "37"))
                        (rule "true_left" (formula "37"))
                        (rule "inEqSimp_geqRight" (formula "38"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1"))
                        (rule "mul_literals" (formula "1") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                        (rule "inEqSimp_antiSymm" (formula "33") (ifseqformula "1"))
                        (rule "applyEq" (formula "1") (term "0") (ifseqformula "33"))
                        (rule "inEqSimp_homoInEq0" (formula "1"))
                        (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "1,0"))
                        (rule "times_zero_1" (formula "1") (term "0"))
                        (rule "qeq_literals" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "applyEq" (formula "25") (term "1") (ifseqformula "32"))
                        (rule "applyEq" (formula "17") (term "0") (ifseqformula "32"))
                        (rule "inEqSimp_homoInEq1" (formula "17"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "17") (term "1,0"))
                        (rule "mul_literals" (formula "17") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "17") (term "0"))
                        (rule "polySimp_addComm1" (formula "17") (term "0,0"))
                        (rule "add_literals" (formula "17") (term "0,0,0"))
                        (rule "add_zero_left" (formula "17") (term "0,0"))
                        (rule "polySimp_pullOutFactor0" (formula "17") (term "0"))
                        (rule "add_literals" (formula "17") (term "1,0"))
                        (rule "applyEq" (formula "14") (term "1,0,2,0") (ifseqformula "32"))
                        (rule "eqSymm" (formula "14"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,2,1"))
                        (rule "add_literals" (formula "14") (term "0,0,2,1"))
                        (rule "applyEq" (formula "13") (term "1,1,0,0,0,0") (ifseqformula "32"))
                        (rule "applyEq" (formula "38") (term "1,1,1,0,0,0,0") (ifseqformula "32"))
                        (rule "polySimp_addAssoc" (formula "38") (term "1,1,0,0,0,0"))
                        (rule "add_literals" (formula "38") (term "0,1,1,0,0,0,0"))
                        (rule "add_zero_left" (formula "38") (term "1,1,0,0,0,0"))
                        (rule "applyEq" (formula "26") (term "1,1,1,0,0") (ifseqformula "32"))
                        (rule "polySimp_addAssoc" (formula "26") (term "1,1,0,0"))
                        (rule "add_literals" (formula "26") (term "0,1,1,0,0"))
                        (rule "applyEq" (formula "27") (term "1,1,1,0,0,0,0") (ifseqformula "32"))
                        (rule "polySimp_addAssoc" (formula "27") (term "1,1,0,0,0,0"))
                        (rule "add_literals" (formula "27") (term "0,1,1,0,0,0,0"))
                        (rule "add_zero_left" (formula "27") (term "1,1,0,0,0,0"))
                        (rule "applyEq" (formula "9") (term "0") (ifseqformula "32"))
                        (rule "inEqSimp_homoInEq1" (formula "9"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0"))
                        (rule "add_literals" (formula "9") (term "0,0"))
                        (rule "applyEq" (formula "33") (term "0") (ifseqformula "32"))
                        (rule "inEqSimp_homoInEq1" (formula "33"))
                        (rule "polySimp_pullOutFactor1" (formula "33") (term "0"))
                        (rule "add_literals" (formula "33") (term "1,0"))
                        (rule "times_zero_1" (formula "33") (term "0"))
                        (rule "leq_literals" (formula "33"))
                        (rule "true_left" (formula "33"))
                        (rule "applyEq" (formula "37") (term "1,1,1,0,0,0,0,0") (ifseqformula "32"))
                        (rule "polySimp_addAssoc" (formula "37") (term "1,1,0,0,0,0,0"))
                        (rule "add_literals" (formula "37") (term "0,1,1,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "37") (term "1,1,0,0,0,0,0"))
                        (rule "applyEq" (formula "10") (term "0") (ifseqformula "32"))
                        (rule "inEqSimp_homoInEq0" (formula "10"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0"))
                        (rule "add_literals" (formula "10") (term "0,0"))
                        (rule "applyEq" (formula "27") (term "1,1,1,0,0,0,0,0") (ifseqformula "32"))
                        (rule "polySimp_addAssoc" (formula "27") (term "1,1,0,0,0,0,0"))
                        (rule "add_literals" (formula "27") (term "0,1,1,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "27") (term "1,1,0,0,0,0,0"))
                        (rule "applyEq" (formula "23") (term "1") (ifseqformula "32"))
                        (rule "applyEq" (formula "13") (term "1,1,0,0,0,0,0") (ifseqformula "32"))
                        (rule "applyEq" (formula "33") (term "0") (ifseqformula "32"))
                        (rule "inEqSimp_homoInEq1" (formula "33"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "33") (term "1,0"))
                        (rule "mul_literals" (formula "33") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "33") (term "0"))
                        (rule "polySimp_addComm1" (formula "33") (term "0,0"))
                        (rule "add_literals" (formula "33") (term "0,0,0"))
                        (rule "add_zero_left" (formula "33") (term "0,0"))
                        (rule "polySimp_pullOutFactor0" (formula "33") (term "0"))
                        (rule "add_literals" (formula "33") (term "1,0"))
                        (rule "applyEq" (formula "14") (term "1,0,2,0") (ifseqformula "32"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,2,0"))
                        (rule "add_literals" (formula "14") (term "0,0,2,0"))
                        (rule "add_zero_left" (formula "14") (term "0,2,0"))
                        (rule "eqSymm" (formula "14"))
                        (rule "applyEq" (formula "21") (term "1") (ifseqformula "32"))
                        (rule "applyEq" (formula "2") (term "1,1") (ifseqformula "32"))
                        (rule "polySimp_addAssoc" (formula "2") (term "1"))
                        (rule "polySimp_addComm0" (formula "2") (term "0,1"))
                        (rule "polySimp_pullOutFactor3b" (formula "2") (term "1"))
                        (rule "applyEq" (formula "36") (term "0") (ifseqformula "14"))
                        (rule "applyEq" (formula "11") (term "1") (ifseqformula "32"))
                        (rule "applyEq" (formula "30") (term "1,1") (ifseqformula "32"))
                        (rule "polySimp_addAssoc" (formula "30") (term "1"))
                        (rule "polySimp_addComm0" (formula "30") (term "0,1"))
                        (rule "polySimp_pullOutFactor3b" (formula "30") (term "1"))
                        (rule "applyEq" (formula "15") (term "1") (ifseqformula "32"))
                        (rule "applyEq" (formula "3") (term "1") (ifseqformula "32"))
                        (rule "inEqSimp_invertInEq0" (formula "17"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "0"))
                        (rule "times_zero_2" (formula "17") (term "1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "9"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                        (rule "polySimp_elimOne" (formula "9") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                        (rule "polySimp_elimOne" (formula "9") (term "0"))
                        (rule "inEqSimp_invertInEq0" (formula "31"))
                        (rule "times_zero_2" (formula "31") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "0"))
                        (rule "inEqSimp_subsumption6" (formula "31") (ifseqformula "29"))
                        (rule "mul_literals" (formula "31") (term "1,1,0"))
                        (rule "greater_literals" (formula "31") (term "0,0"))
                         (builtin "One Step Simplification" (formula "31"))
                        (rule "leq_literals" (formula "31") (term "0"))
                         (builtin "One Step Simplification" (formula "31"))
                        (rule "true_left" (formula "31"))
                        (rule "inEqSimp_subsumption6" (formula "15") (ifseqformula "29"))
                        (rule "greater_literals" (formula "15") (term "0,0"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "mul_literals" (formula "15") (term "1,0"))
                        (rule "leq_literals" (formula "15") (term "0"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "true_left" (formula "15"))
                        (rule "cut_direct" (formula "37") (term "0"))
                        (branch "CUT: self.sorted_splitters.* cap allLocs setMinus self.sorted_splitters.* cup self.tree.tree.* = {} TRUE"
                            (builtin "One Step Simplification" (formula "38"))
                           (rule "equalityToElementOfRight" (formula "38") (inst "fv=fv") (inst "ov=ov"))
                            (builtin "One Step Simplification" (formula "38"))
                           (rule "allRight" (formula "38") (inst "sk=ov_0"))
                           (rule "allRight" (formula "38") (inst "sk=fv_0"))
                           (rule "notRight" (formula "38"))
                           (rule "elementOfIntersect" (formula "1"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                           (rule "elementOfSetMinus" (formula "2"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "notLeft" (formula "2"))
                           (rule "elementOfUnion" (formula "36"))
                            (builtin "One Step Simplification" (formula "36"))
                           (rule "closeTrue" (formula "36"))
                        )
                        (branch "CUT: self.sorted_splitters.* cap allLocs setMinus self.sorted_splitters.* cup self.tree.tree.* = {} FALSE"
                            (builtin "One Step Simplification" (formula "38"))
                           (rule "false_right" (formula "38"))
                           (rule "equalityToElementOfRight" (formula "37") (inst "fv=fv") (inst "ov=ov"))
                            (builtin "One Step Simplification" (formula "37"))
                           (rule "allRight" (formula "37") (inst "sk=ov_0"))
                           (rule "allRight" (formula "37") (inst "sk=fv_0"))
                           (rule "notRight" (formula "37"))
                           (rule "elementOfIntersect" (formula "1"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                           (rule "elementOfSetMinus" (formula "2"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "notLeft" (formula "2"))
                           (rule "elementOfUnion" (formula "35"))
                            (builtin "One Step Simplification" (formula "35"))
                           (rule "closeTrue" (formula "35"))
                        )
                     )
                  )
                  (branch "CUT: self.tree.<created> = TRUE FALSE"
                      (builtin "One Step Simplification" (formula "40"))
                     (rule "false_right" (formula "40"))
                     (rule "arrayLengthNotNegative" (formula "21") (term "0"))
                     (rule "arrayLengthNotNegative" (formula "23") (term "0"))
                     (rule "all_pull_out3" (formula "37") (term "0"))
                     (rule "shift_paren_or" (formula "37") (term "0,0"))
                     (rule "shift_paren_or" (formula "37") (term "0,0,0"))
                     (rule "all_pull_out3" (formula "12") (term "0"))
                     (rule "shift_paren_or" (formula "12") (term "0,0"))
                     (rule "shift_paren_or" (formula "12") (term "0,0,0"))
                     (rule "all_pull_out3" (formula "26") (term "0"))
                     (rule "shift_paren_or" (formula "26") (term "0,0"))
                     (rule "shift_paren_or" (formula "26") (term "0,0,0"))
                     (rule "onlyCreatedObjectsAreReferencedFinal" (formula "38") (term "0,0") (ifseqformula "3") (ifseqformula "5"))
                     (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "42"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "41")))
                     (rule "closeFalse" (formula "1"))
                  )
               )
            )
            (branch "self.sorted_splitters.<created> = TRUE FALSE"
               (rule "applyEqReverse" (formula "40") (term "1,1,1") (ifseqformula "39"))
               (rule "hideAuxiliaryEq" (formula "39"))
               (rule "replace_known_right" (formula "40") (term "0,0") (ifseqformula "43"))
                (builtin "One Step Simplification" (formula "40"))
               (rule "applyEqReverse" (formula "41") (term "1,1") (ifseqformula "40"))
               (rule "hideAuxiliaryEq" (formula "40"))
               (rule "inEqSimp_commuteLeq" (formula "40") (term "1"))
               (rule "inEqSimp_homoInEq1" (formula "39") (term "1"))
               (rule "polySimp_addComm1" (formula "39") (term "0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1"))
               (rule "polySimp_mulComm0" (formula "39") (term "1,1"))
               (rule "polySimp_rightDist" (formula "39") (term "1,1"))
               (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1"))
               (rule "mul_literals" (formula "39") (term "0,1,1"))
               (rule "polySimp_elimOne" (formula "39") (term "1,1,1"))
               (rule "commute_or" (formula "41") (term "0,0,1,0"))
               (rule "arrayLengthNotNegative" (formula "27") (term "0"))
               (rule "cut_direct" (formula "22") (term "1"))
               (branch "CUT: self.sorted_splitters[classify_sk_0] >= value TRUE"
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "true_left" (formula "23"))
                  (rule "cut_direct" (formula "47") (term "1"))
                  (branch "CUT: self.tree.<created> = TRUE TRUE"
                      (builtin "One Step Simplification" (formula "48"))
                     (rule "cut_direct" (formula "42") (term "0"))
                     (branch "CUT: result_241 >= 2 + classify_sk_0 + classify_sk_1 TRUE"
                         (builtin "One Step Simplification" (formula "43"))
                        (rule "inEqSimp_subsumption1" (formula "40") (ifseqformula "42"))
                        (rule "inEqSimp_homoInEq0" (formula "40") (term "0"))
                        (rule "polySimp_mulComm0" (formula "40") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "40") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "40") (term "0,1,0,0"))
                        (rule "mul_literals" (formula "40") (term "0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "40") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "40") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "40") (term "0,0"))
                        (rule "add_literals" (formula "40") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "40") (term "1,0,0"))
                        (rule "add_zero_right" (formula "40") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "40") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "40") (term "0,0,0"))
                        (rule "add_literals" (formula "40") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "40") (term "0,0"))
                        (rule "add_literals" (formula "40") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "40") (term "1,0,0"))
                        (rule "add_zero_right" (formula "40") (term "0,0"))
                        (rule "qeq_literals" (formula "40") (term "0"))
                         (builtin "One Step Simplification" (formula "40"))
                        (rule "true_left" (formula "40"))
                        (rule "inEqSimp_exactShadow3" (formula "41") (ifseqformula "10"))
                        (rule "polySimp_rightDist" (formula "41") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "41") (term "0"))
                        (rule "polySimp_rightDist" (formula "41") (term "0,0,0"))
                        (rule "mul_literals" (formula "41") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "41") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "41") (term "0,0,0"))
                        (rule "add_literals" (formula "41") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "41") (term "0,0"))
                        (rule "add_literals" (formula "41") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "41") (term "1,0,0"))
                        (rule "add_zero_right" (formula "41") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "41"))
                        (rule "polySimp_mulLiterals" (formula "41") (term "0"))
                        (rule "polySimp_elimOne" (formula "41") (term "0"))
                        (rule "inEqSimp_subsumption0" (formula "39") (ifseqformula "41"))
                        (rule "leq_literals" (formula "39") (term "0"))
                         (builtin "One Step Simplification" (formula "39"))
                        (rule "true_left" (formula "39"))
                        (rule "inEqSimp_exactShadow1" (formula "18") (ifseqformula "40"))
                        (rule "greater_literals" (formula "18") (term "0"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "mul_literals" (formula "18") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "0,0"))
                        (rule "mul_literals" (formula "18") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "18") (term "0"))
                        (rule "add_literals" (formula "18") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "18"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "0"))
                        (rule "polySimp_elimOne" (formula "18") (term "0"))
                        (rule "inEqSimp_subsumption0" (formula "18") (ifseqformula "21"))
                        (rule "leq_literals" (formula "18") (term "0"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "true_left" (formula "18"))
                        (rule "cut_direct" (formula "39") (term "0"))
                        (branch "CUT: classify_sk_1 >= 1 TRUE"
                            (builtin "One Step Simplification" (formula "40"))
                           (rule "inEqSimp_subsumption1" (formula "35") (ifseqformula "39"))
                           (rule "leq_literals" (formula "35") (term "0"))
                            (builtin "One Step Simplification" (formula "35"))
                           (rule "true_left" (formula "35"))
                           (rule "inEqSimp_exactShadow3" (formula "38") (ifseqformula "35"))
                           (rule "mul_literals" (formula "38") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "38") (term "0"))
                           (rule "add_literals" (formula "38") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "38"))
                           (rule "mul_literals" (formula "38") (term "1"))
                           (rule "inEqSimp_subsumption6" (formula "38") (ifseqformula "16"))
                           (rule "times_zero_1" (formula "38") (term "1,1,0"))
                           (rule "greater_literals" (formula "38") (term "0,0"))
                            (builtin "One Step Simplification" (formula "38"))
                           (rule "leq_literals" (formula "38") (term "0"))
                            (builtin "One Step Simplification" (formula "38"))
                           (rule "true_left" (formula "38"))
                           (rule "arrayLengthIsAShort" (formula "27") (term "0"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "true_left" (formula "27"))
                           (rule "arrayLengthNotNegative" (formula "27") (term "0"))
                           (rule "arrayLengthIsAShort" (formula "30") (term "0"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "true_left" (formula "30"))
                           (rule "cut_direct" (formula "22") (term "0"))
                           (branch "CUT: classify_sk_0 >= 1 TRUE"
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "22"))
                              (rule "leq_literals" (formula "16") (term "0"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "true_left" (formula "16"))
                              (rule "all_pull_out3" (formula "13") (term "0"))
                              (rule "shift_paren_or" (formula "13") (term "0,0"))
                              (rule "shift_paren_or" (formula "13") (term "0,0,0"))
                              (rule "all_pull_out3" (formula "32") (term "0"))
                              (rule "shift_paren_or" (formula "32") (term "0,0"))
                              (rule "shift_paren_or" (formula "32") (term "0,0,0"))
                              (rule "all_pull_out3" (formula "44") (term "0"))
                              (rule "shift_paren_or" (formula "44") (term "0,0"))
                              (rule "shift_paren_or" (formula "44") (term "0,0,0"))
                              (rule "onlyCreatedObjectsAreReferencedFinal" (formula "48") (term "0") (ifseqformula "4") (ifseqformula "6"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "49"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "2")))
                              (rule "true_left" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferencedFinal" (formula "35") (term "0,0,1,1,0,0") (ifseqformula "4") (ifseqformula "6"))
                              (rule "replace_known_right" (formula "35") (term "0") (ifseqformula "48"))
                               (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "46")))
                              (rule "closeFalse" (formula "35"))
                           )
                           (branch "CUT: classify_sk_0 >= 1 FALSE"
                               (builtin "One Step Simplification" (formula "22"))
                              (rule "true_left" (formula "22"))
                              (rule "inEqSimp_geqRight" (formula "44"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_subsumption0" (formula "21") (ifseqformula "1"))
                              (rule "leq_literals" (formula "21") (term "0"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "true_left" (formula "21"))
                              (rule "inEqSimp_antiSymm" (formula "17") (ifseqformula "1"))
                              (rule "applyEqRigid" (formula "10") (term "1,1") (ifseqformula "17"))
                              (rule "add_zero_right" (formula "10") (term "1"))
                              (rule "applyEq" (formula "22") (term "0,1,1") (ifseqformula "17"))
                              (rule "times_zero_2" (formula "22") (term "1,1"))
                              (rule "add_zero_right" (formula "22") (term "1"))
                              (rule "applyEq" (formula "22") (term "0,2,0") (ifseqformula "17"))
                              (rule "applyEq" (formula "20") (term "1,1") (ifseqformula "17"))
                              (rule "add_zero_right" (formula "20") (term "1"))
                              (rule "applyEqRigid" (formula "35") (term "0,1,1") (ifseqformula "17"))
                              (rule "mul_literals" (formula "35") (term "1,1"))
                              (rule "add_zero_right" (formula "35") (term "1"))
                              (rule "applyEqRigid" (formula "11") (term "1,1") (ifseqformula "17"))
                              (rule "add_literals" (formula "11") (term "1"))
                              (rule "applyEq" (formula "18") (term "0") (ifseqformula "17"))
                              (rule "qeq_literals" (formula "18"))
                              (rule "true_left" (formula "18"))
                              (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "17"))
                              (rule "leq_literals" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "applyEq" (formula "39") (term "1,0,1") (ifseqformula "16"))
                              (rule "add_zero_right" (formula "39") (term "0,1"))
                              (rule "applyEqRigid" (formula "34") (term "0,1,0,1") (ifseqformula "16"))
                              (rule "times_zero_2" (formula "34") (term "1,0,1"))
                              (rule "add_zero_right" (formula "34") (term "0,1"))
                              (rule "applyEqRigid" (formula "35") (term "1,0,1") (ifseqformula "16"))
                              (rule "add_zero_right" (formula "35") (term "0,1"))
                              (rule "applyEqRigid" (formula "28") (term "0,1,0,1,1,0,0") (ifseqformula "16"))
                              (rule "times_zero_2" (formula "28") (term "1,0,1,1,0,0"))
                              (rule "add_zero_right" (formula "28") (term "0,1,1,0,0"))
                              (rule "applyEqRigid" (formula "19") (term "0,1,0,1") (ifseqformula "16"))
                              (rule "times_zero_2" (formula "19") (term "1,0,1"))
                              (rule "add_zero_right" (formula "19") (term "0,1"))
                              (rule "applyEq" (formula "29") (term "0,1,0,1,0,0,0,1,0") (ifseqformula "16"))
                              (rule "times_zero_2" (formula "29") (term "1,0,1,0,0,0,1,0"))
                              (rule "add_zero_right" (formula "29") (term "0,1,0,0,0,1,0"))
                              (rule "applyEqRigid" (formula "14") (term "0,1,0,0,2,0") (ifseqformula "16"))
                              (rule "times_zero_2" (formula "14") (term "1,0,0,2,0"))
                              (rule "add_zero_right" (formula "14") (term "0,0,2,0"))
                              (rule "eqSymm" (formula "14"))
                              (rule "applyEqRigid" (formula "29") (term "0,1,0,1,1,0,0") (ifseqformula "16"))
                              (rule "times_zero_2" (formula "29") (term "1,0,1,1,0,0"))
                              (rule "add_zero_right" (formula "29") (term "0,1,1,0,0"))
                              (rule "applyEq" (formula "41") (term "0,1,0,1,1,0,0") (ifseqformula "16"))
                              (rule "times_zero_2" (formula "41") (term "1,0,1,1,0,0"))
                              (rule "add_zero_right" (formula "41") (term "0,1,1,0,0"))
                              (rule "applyEqRigid" (formula "13") (term "0,0,1,1,0,0") (ifseqformula "16"))
                              (rule "times_zero_2" (formula "13") (term "0,1,1,0,0"))
                              (rule "add_zero_left" (formula "13") (term "1,1,0,0"))
                              (rule "applyEq" (formula "41") (term "0,1,0,1,0,0,0,1,0") (ifseqformula "16"))
                              (rule "times_zero_2" (formula "41") (term "1,0,1,0,0,0,1,0"))
                              (rule "add_zero_right" (formula "41") (term "0,1,0,0,0,1,0"))
                              (rule "applyEq" (formula "13") (term "0,0,1,0,0,0,1,0") (ifseqformula "16"))
                              (rule "times_zero_2" (formula "13") (term "0,1,0,0,0,1,0"))
                              (rule "add_zero_left" (formula "13") (term "1,0,0,0,1,0"))
                              (rule "applyEq" (formula "25") (term "0,0,1") (ifseqformula "16"))
                              (rule "times_zero_2" (formula "25") (term "0,1"))
                              (rule "add_zero_left" (formula "25") (term "1"))
                              (rule "applyEqRigid" (formula "49") (term "1") (ifseqformula "16"))
                              (rule "applyEq" (formula "27") (term "0,0,1") (ifseqformula "16"))
                              (rule "times_zero_2" (formula "27") (term "0,1"))
                              (rule "add_zero_left" (formula "27") (term "1"))
                              (rule "applyEqRigid" (formula "3") (term "0,0,1") (ifseqformula "16"))
                              (rule "times_zero_2" (formula "3") (term "0,1"))
                              (rule "add_zero_left" (formula "3") (term "1"))
                              (rule "applyEq" (formula "11") (term "0,0,1") (ifseqformula "16"))
                              (rule "times_zero_2" (formula "11") (term "0,1"))
                              (rule "add_zero_left" (formula "11") (term "1"))
                              (rule "applyEq" (formula "23") (term "0,0,1") (ifseqformula "16"))
                              (rule "times_zero_2" (formula "23") (term "0,1"))
                              (rule "add_zero_left" (formula "23") (term "1"))
                              (rule "applyEq" (formula "2") (term "0,0,0,1") (ifseqformula "16"))
                              (rule "times_zero_2" (formula "2") (term "0,0,1"))
                              (rule "add_zero_left" (formula "2") (term "0,1"))
                              (rule "applyEqRigid" (formula "32") (term "0,0,0,1") (ifseqformula "16"))
                              (rule "times_zero_2" (formula "32") (term "0,0,1"))
                              (rule "add_zero_left" (formula "32") (term "0,1"))
                              (rule "applyEq" (formula "14") (term "0,1,0,0,2,0") (ifseqformula "16"))
                              (rule "times_zero_2" (formula "14") (term "1,0,0,2,0"))
                              (rule "add_zero_right" (formula "14") (term "0,0,2,0"))
                              (rule "eqSymm" (formula "14"))
                              (rule "inEqSimp_contradEq7" (formula "49") (ifseqformula "36"))
                              (rule "times_zero_1" (formula "49") (term "1,0,0"))
                              (rule "add_zero_right" (formula "49") (term "0,0"))
                              (rule "leq_literals" (formula "49") (term "0"))
                               (builtin "One Step Simplification" (formula "49"))
                              (rule "false_right" (formula "49"))
                              (rule "inEqSimp_subsumption6" (formula "18") (ifseqformula "36"))
                              (rule "greater_literals" (formula "18") (term "0,0"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "mul_literals" (formula "18") (term "1,0"))
                              (rule "leq_literals" (formula "18") (term "0"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "true_left" (formula "18"))
                              (rule "inEqSimp_subsumption0" (formula "32") (ifseqformula "37"))
                              (rule "leq_literals" (formula "32") (term "0"))
                               (builtin "One Step Simplification" (formula "32"))
                              (rule "true_left" (formula "32"))
                              (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "9"))
                              (rule "leq_literals" (formula "17") (term "0"))
                               (builtin "One Step Simplification" (formula "17"))
                              (rule "true_left" (formula "17"))
                              (rule "inEqSimp_subsumption1" (formula "31") (ifseqformula "36"))
                              (rule "inEqSimp_homoInEq0" (formula "31") (term "0"))
                              (rule "polySimp_mulComm0" (formula "31") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "31") (term "1,0,0"))
                              (rule "mul_literals" (formula "31") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "31") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "31") (term "0,0,0"))
                              (rule "add_literals" (formula "31") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0"))
                              (rule "add_literals" (formula "31") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "31") (term "1,0,0"))
                              (rule "add_zero_right" (formula "31") (term "0,0"))
                              (rule "qeq_literals" (formula "31") (term "0"))
                               (builtin "One Step Simplification" (formula "31"))
                              (rule "true_left" (formula "31"))
                              (rule "inEqSimp_exactShadow3" (formula "31") (ifseqformula "10"))
                              (rule "polySimp_rightDist" (formula "31") (term "0,0"))
                              (rule "mul_literals" (formula "31") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "1,0,0"))
                              (rule "polySimp_elimOne" (formula "31") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "31") (term "0"))
                              (rule "add_literals" (formula "31") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "31"))
                              (rule "mul_literals" (formula "31") (term "1"))
                              (rule "inEqSimp_subsumption1" (formula "31") (ifseqformula "33"))
                              (rule "leq_literals" (formula "31") (term "0"))
                               (builtin "One Step Simplification" (formula "31"))
                              (rule "true_left" (formula "31"))
                              (rule "inEqSimp_exactShadow3" (formula "35") (ifseqformula "10"))
                              (rule "polySimp_rightDist" (formula "35") (term "0,0"))
                              (rule "mul_literals" (formula "35") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "35") (term "0"))
                              (rule "add_literals" (formula "35") (term "0,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "35"))
                              (rule "polySimp_mulLiterals" (formula "35") (term "0"))
                              (rule "polySimp_elimOne" (formula "35") (term "0"))
                              (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "10"))
                              (rule "polySimp_rightDist" (formula "17") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "17") (term "1,0,0"))
                              (rule "mul_literals" (formula "17") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "17") (term "0"))
                              (rule "add_literals" (formula "17") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "17"))
                              (rule "mul_literals" (formula "17") (term "1"))
                              (rule "inEqSimp_subsumption6" (formula "17") (ifseqformula "33"))
                              (rule "greater_literals" (formula "17") (term "0,0"))
                               (builtin "One Step Simplification" (formula "17"))
                              (rule "mul_literals" (formula "17") (term "1,0"))
                              (rule "leq_literals" (formula "17") (term "0"))
                               (builtin "One Step Simplification" (formula "17"))
                              (rule "true_left" (formula "17"))
                              (rule "onlyCreatedObjectsAreReferencedFinal" (formula "11") (term "0,1,0") (ifseqformula "4") (ifseqformula "6"))
                              (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "42")))
                              (rule "true_left" (formula "11"))
                              (rule "onlyCreatedObjectsAreReferencedFinal" (formula "13") (term "1,1,1,0,1,0") (ifseqformula "4") (ifseqformula "6"))
                              (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "41"))
                               (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "39")))
                              (rule "closeFalse" (formula "13"))
                           )
                        )
                        (branch "CUT: classify_sk_1 >= 1 FALSE"
                            (builtin "One Step Simplification" (formula "39"))
                           (rule "true_left" (formula "39"))
                           (rule "inEqSimp_geqRight" (formula "43"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_subsumption0" (formula "40") (ifseqformula "1"))
                           (rule "leq_literals" (formula "40") (term "0"))
                            (builtin "One Step Simplification" (formula "40"))
                           (rule "true_left" (formula "40"))
                           (rule "inEqSimp_antiSymm" (formula "36") (ifseqformula "1"))
                           (rule "applyEqRigid" (formula "40") (term "0,1,1") (ifseqformula "36"))
                           (rule "times_zero_2" (formula "40") (term "1,1"))
                           (rule "add_zero_right" (formula "40") (term "1"))
                           (rule "applyEq" (formula "19") (term "0,0") (ifseqformula "36"))
                           (rule "times_zero_2" (formula "19") (term "0"))
                           (rule "inEqSimp_homoInEq1" (formula "19"))
                           (rule "mul_literals" (formula "19") (term "1,0"))
                           (rule "add_zero_right" (formula "19") (term "0"))
                           (rule "applyEqRigid" (formula "51") (term "0") (ifseqformula "36"))
                           (rule "eqSymm" (formula "51"))
                           (rule "applyEq" (formula "38") (term "0") (ifseqformula "36"))
                           (rule "inEqSimp_homoInEq0" (formula "38"))
                           (rule "times_zero_2" (formula "38") (term "1,0"))
                           (rule "add_zero_right" (formula "38") (term "0"))
                           (rule "applyEqRigid" (formula "39") (term "1,1") (ifseqformula "36"))
                           (rule "add_zero_right" (formula "39") (term "1"))
                           (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "36"))
                           (rule "leq_literals" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "applyEq" (formula "40") (term "1,1") (ifseqformula "35"))
                           (rule "add_zero_right" (formula "40") (term "1"))
                           (rule "applyEq" (formula "19") (term "0,1,1") (ifseqformula "35"))
                           (rule "mul_literals" (formula "19") (term "1,1"))
                           (rule "add_zero_right" (formula "19") (term "1"))
                           (rule "applyEqRigid" (formula "35") (term "0") (ifseqformula "34"))
                           (rule "qeq_literals" (formula "35"))
                           (rule "true_left" (formula "35"))
                           (rule "applyEq" (formula "38") (term "0,2,0") (ifseqformula "34"))
                           (rule "applyEqRigid" (formula "33") (term "1,0,1") (ifseqformula "34"))
                           (rule "add_zero_right" (formula "33") (term "0,1"))
                           (rule "applyEqRigid" (formula "2") (term "1,0,1") (ifseqformula "34"))
                           (rule "add_zero_right" (formula "2") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "18"))
                           (rule "mul_literals" (formula "18") (term "1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "34"))
                           (rule "mul_literals" (formula "34") (term "1"))
                           (rule "inEqSimp_strengthen1" (formula "16") (ifseqformula "46"))
                           (rule "add_zero_right" (formula "16") (term "1"))
                           (rule "replace_known_left" (formula "20") (term "0") (ifseqformula "16"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "inEqSimp_contradEq7" (formula "46") (ifseqformula "16"))
                           (rule "times_zero_1" (formula "46") (term "1,0,0"))
                           (rule "add_zero_right" (formula "46") (term "0,0"))
                           (rule "leq_literals" (formula "46") (term "0"))
                            (builtin "One Step Simplification" (formula "46"))
                           (rule "false_right" (formula "46"))
                           (rule "inEqSimp_subsumption1" (formula "36") (ifseqformula "9"))
                           (rule "inEqSimp_homoInEq0" (formula "36") (term "0"))
                           (rule "polySimp_mulComm0" (formula "36") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "36") (term "1,0,0"))
                           (rule "mul_literals" (formula "36") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "36") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "36") (term "0,0,0"))
                           (rule "add_literals" (formula "36") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0"))
                           (rule "add_literals" (formula "36") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "36") (term "1,0,0"))
                           (rule "add_zero_right" (formula "36") (term "0,0"))
                           (rule "qeq_literals" (formula "36") (term "0"))
                            (builtin "One Step Simplification" (formula "36"))
                           (rule "true_left" (formula "36"))
                           (rule "inEqSimp_subsumption6" (formula "34") (ifseqformula "16"))
                           (rule "greater_literals" (formula "34") (term "0,0"))
                            (builtin "One Step Simplification" (formula "34"))
                           (rule "mul_literals" (formula "34") (term "1,0"))
                           (rule "leq_literals" (formula "34") (term "0"))
                            (builtin "One Step Simplification" (formula "34"))
                           (rule "true_left" (formula "34"))
                           (rule "inEqSimp_exactShadow3" (formula "34") (ifseqformula "10"))
                           (rule "polySimp_rightDist" (formula "34") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "34") (term "1,0,0"))
                           (rule "mul_literals" (formula "34") (term "0,0,0"))
                           (rule "polySimp_elimOne" (formula "34") (term "1,0,0"))
                           (rule "polySimp_addAssoc" (formula "34") (term "0"))
                           (rule "polySimp_addComm1" (formula "34") (term "0,0"))
                           (rule "add_literals" (formula "34") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor3b" (formula "34") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "34"))
                           (rule "mul_literals" (formula "34") (term "1"))
                           (rule "inEqSimp_subsumption6" (formula "34") (ifseqformula "16"))
                           (rule "greater_literals" (formula "34") (term "0,0"))
                            (builtin "One Step Simplification" (formula "34"))
                           (rule "mul_literals" (formula "34") (term "1,0"))
                           (rule "leq_literals" (formula "34") (term "0"))
                            (builtin "One Step Simplification" (formula "34"))
                           (rule "true_left" (formula "34"))
                           (rule "arrayLengthIsAShort" (formula "25") (term "0"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "true_left" (formula "25"))
                           (rule "arrayLengthIsAShort" (formula "27") (term "0"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "true_left" (formula "27"))
                           (rule "arrayLengthNotNegative" (formula "25") (term "0"))
                           (rule "all_pull_out3" (formula "13") (term "0"))
                           (rule "all_pull_out3" (formula "30") (term "0"))
                           (rule "shift_paren_or" (formula "13") (term "0,0"))
                           (rule "all_pull_out3" (formula "37") (term "0"))
                           (rule "shift_paren_or" (formula "30") (term "0,0"))
                           (rule "shift_paren_or" (formula "37") (term "0,0"))
                           (rule "shift_paren_or" (formula "13") (term "0,0,0"))
                           (rule "shift_paren_or" (formula "30") (term "0,0,0"))
                           (rule "shift_paren_or" (formula "37") (term "0,0,0"))
                           (rule "onlyCreatedObjectsAreReferencedFinal" (formula "23") (term "0,0") (ifseqformula "4") (ifseqformula "6"))
                           (rule "replace_known_left" (formula "23") (term "1") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "42")))
                           (rule "true_left" (formula "23"))
                           (rule "onlyCreatedObjectsAreReferencedFinal" (formula "12") (term "1") (ifseqformula "4") (ifseqformula "6"))
                           (rule "replace_known_right" (formula "12") (term "1") (ifseqformula "39"))
                            (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "41")))
                           (rule "closeFalse" (formula "12"))
                        )
                     )
                     (branch "CUT: result_241 >= 2 + classify_sk_0 + classify_sk_1 FALSE"
                         (builtin "One Step Simplification" (formula "42"))
                        (rule "true_left" (formula "42"))
                        (rule "inEqSimp_geqRight" (formula "43"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1"))
                        (rule "mul_literals" (formula "1") (term "0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,0,1"))
                        (rule "inEqSimp_antiSymm" (formula "41") (ifseqformula "1"))
                        (rule "applyEq" (formula "10") (term "0") (ifseqformula "41"))
                        (rule "inEqSimp_homoInEq1" (formula "10"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "0,1,0"))
                        (rule "mul_literals" (formula "10") (term "0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "10") (term "0,0,0"))
                        (rule "add_literals" (formula "10") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0"))
                        (rule "add_literals" (formula "10") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "10") (term "1,0,0"))
                        (rule "add_zero_right" (formula "10") (term "0,0"))
                        (rule "applyEq" (formula "44") (term "1,1,1,0,0") (ifseqformula "41"))
                        (rule "polySimp_addAssoc" (formula "44") (term "1,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "44") (term "0,1,1,0,0"))
                        (rule "polySimp_addComm1" (formula "44") (term "0,0,1,1,0,0"))
                        (rule "add_literals" (formula "44") (term "0,0,0,1,1,0,0"))
                        (rule "add_zero_left" (formula "44") (term "0,0,1,1,0,0"))
                        (rule "polySimp_pullOutFactor2" (formula "44") (term "0,1,1,0,0"))
                        (rule "add_literals" (formula "44") (term "1,0,1,1,0,0"))
                        (rule "times_zero_1" (formula "44") (term "0,1,1,0,0"))
                        (rule "add_zero_left" (formula "44") (term "1,1,0,0"))
                        (rule "applyEq" (formula "32") (term "1,1,0,0,0,1,0") (ifseqformula "41"))
                        (rule "polySimp_addAssoc" (formula "32") (term "1,0,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "32") (term "0,1,0,0,0,1,0"))
                        (rule "polySimp_addComm1" (formula "32") (term "0,0,1,0,0,0,1,0"))
                        (rule "add_literals" (formula "32") (term "0,0,0,1,0,0,0,1,0"))
                        (rule "add_zero_left" (formula "32") (term "0,0,1,0,0,0,1,0"))
                        (rule "polySimp_pullOutFactor2" (formula "32") (term "0,1,0,0,0,1,0"))
                        (rule "add_literals" (formula "32") (term "1,0,1,0,0,0,1,0"))
                        (rule "times_zero_1" (formula "32") (term "0,1,0,0,0,1,0"))
                        (rule "add_zero_left" (formula "32") (term "1,0,0,0,1,0"))
                        (rule "applyEq" (formula "28") (term "1,1") (ifseqformula "41"))
                        (rule "polySimp_addAssoc" (formula "28") (term "1"))
                        (rule "polySimp_addAssoc" (formula "28") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "28") (term "0,0,1"))
                        (rule "polySimp_pullOutFactor2b" (formula "28") (term "0,1"))
                        (rule "add_literals" (formula "28") (term "1,1,0,1"))
                        (rule "times_zero_1" (formula "28") (term "1,0,1"))
                        (rule "add_zero_right" (formula "28") (term "0,1"))
                        (rule "applyEq" (formula "14") (term "1,1,0,0,0,1,0") (ifseqformula "41"))
                        (rule "polySimp_addAssoc" (formula "14") (term "1,0,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,1,0,0,0,1,0"))
                        (rule "polySimp_addComm0" (formula "14") (term "0,0,1,0,0,0,1,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "14") (term "0,1,0,0,0,1,0"))
                        (rule "add_literals" (formula "14") (term "1,1,0,1,0,0,0,1,0"))
                        (rule "times_zero_1" (formula "14") (term "1,0,1,0,0,0,1,0"))
                        (rule "add_zero_right" (formula "14") (term "0,1,0,0,0,1,0"))
                        (rule "applyEq" (formula "11") (term "0") (ifseqformula "41"))
                        (rule "inEqSimp_homoInEq0" (formula "11"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "0,1,0"))
                        (rule "mul_literals" (formula "11") (term "0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "11") (term "0"))
                        (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "11") (term "0,0,0"))
                        (rule "add_literals" (formula "11") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0"))
                        (rule "add_literals" (formula "11") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "11") (term "1,0,0"))
                        (rule "add_zero_right" (formula "11") (term "0,0"))
                        (rule "applyEq" (formula "1") (term "0") (ifseqformula "41"))
                        (rule "inEqSimp_homoInEq0" (formula "1"))
                        (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "1,0"))
                        (rule "times_zero_1" (formula "1") (term "0"))
                        (rule "qeq_literals" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "applyEq" (formula "43") (term "1,1,0,0,0,1,0") (ifseqformula "40"))
                        (rule "polySimp_addAssoc" (formula "43") (term "1,0,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "43") (term "0,1,0,0,0,1,0"))
                        (rule "polySimp_addComm1" (formula "43") (term "0,0,1,0,0,0,1,0"))
                        (rule "add_literals" (formula "43") (term "0,0,0,1,0,0,0,1,0"))
                        (rule "add_zero_left" (formula "43") (term "0,0,1,0,0,0,1,0"))
                        (rule "polySimp_pullOutFactor2" (formula "43") (term "0,1,0,0,0,1,0"))
                        (rule "add_literals" (formula "43") (term "1,0,1,0,0,0,1,0"))
                        (rule "times_zero_1" (formula "43") (term "0,1,0,0,0,1,0"))
                        (rule "add_zero_left" (formula "43") (term "1,0,0,0,1,0"))
                        (rule "applyEq" (formula "21") (term "0") (ifseqformula "40"))
                        (rule "inEqSimp_homoInEq1" (formula "21"))
                        (rule "polySimp_mulComm0" (formula "21") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "21") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "21") (term "0,1,0"))
                        (rule "mul_literals" (formula "21") (term "0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "21") (term "0"))
                        (rule "polySimp_addAssoc" (formula "21") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "21") (term "0,0,0"))
                        (rule "add_literals" (formula "21") (term "0,0,0,0"))
                        (rule "add_zero_left" (formula "21") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0" (formula "21") (term "0,0"))
                        (rule "add_literals" (formula "21") (term "1,0,0"))
                        (rule "polySimp_elimOne" (formula "21") (term "0,0"))
                        (rule "applyEq" (formula "17") (term "0") (ifseqformula "40"))
                        (rule "inEqSimp_homoInEq1" (formula "17"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "17") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "17") (term "0,1,0"))
                        (rule "mul_literals" (formula "17") (term "0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "17") (term "0"))
                        (rule "polySimp_addAssoc" (formula "17") (term "0,0"))
                        (rule "add_literals" (formula "17") (term "0,0,0"))
                        (rule "add_zero_left" (formula "17") (term "0,0"))
                        (rule "applyEq" (formula "31") (term "1,1,1,0,0") (ifseqformula "40"))
                        (rule "polySimp_addAssoc" (formula "31") (term "1,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "31") (term "0,1,1,0,0"))
                        (rule "polySimp_addComm1" (formula "31") (term "0,0,1,1,0,0"))
                        (rule "add_literals" (formula "31") (term "0,0,0,1,1,0,0"))
                        (rule "add_zero_left" (formula "31") (term "0,0,1,1,0,0"))
                        (rule "polySimp_pullOutFactor2" (formula "31") (term "0,1,1,0,0"))
                        (rule "add_literals" (formula "31") (term "1,0,1,1,0,0"))
                        (rule "times_zero_1" (formula "31") (term "0,1,1,0,0"))
                        (rule "add_zero_left" (formula "31") (term "1,1,0,0"))
                        (rule "applyEq" (formula "29") (term "1,1") (ifseqformula "40"))
                        (rule "polySimp_addAssoc" (formula "29") (term "1"))
                        (rule "polySimp_addAssoc" (formula "29") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "29") (term "0,0,1"))
                        (rule "polySimp_pullOutFactor2b" (formula "29") (term "0,1"))
                        (rule "add_literals" (formula "29") (term "1,1,0,1"))
                        (rule "times_zero_1" (formula "29") (term "1,0,1"))
                        (rule "add_zero_right" (formula "29") (term "0,1"))
                        (rule "applyEq" (formula "13") (term "1,1,1,0,0") (ifseqformula "40"))
                        (rule "polySimp_addAssoc" (formula "13") (term "1,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "13") (term "0,0,1,1,0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "13") (term "0,1,1,0,0"))
                        (rule "add_literals" (formula "13") (term "1,1,0,1,1,0,0"))
                        (rule "times_zero_1" (formula "13") (term "1,0,1,1,0,0"))
                        (rule "add_zero_right" (formula "13") (term "0,1,1,0,0"))
                        (rule "applyEq" (formula "37") (term "0") (ifseqformula "40"))
                        (rule "inEqSimp_homoInEq1" (formula "37"))
                        (rule "polySimp_mulComm0" (formula "37") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "37") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "37") (term "0,1,0"))
                        (rule "mul_literals" (formula "37") (term "0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "37") (term "0"))
                        (rule "polySimp_addComm1" (formula "37") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "37") (term "0"))
                        (rule "add_literals" (formula "37") (term "1,1,0"))
                        (rule "times_zero_1" (formula "37") (term "1,0"))
                        (rule "add_zero_right" (formula "37") (term "0"))
                        (rule "polySimp_addAssoc" (formula "37") (term "0"))
                        (rule "polySimp_addComm1" (formula "37") (term "0,0"))
                        (rule "add_literals" (formula "37") (term "0,0,0"))
                        (rule "add_zero_left" (formula "37") (term "0,0"))
                        (rule "polySimp_pullOutFactor0" (formula "37") (term "0"))
                        (rule "add_literals" (formula "37") (term "1,0"))
                        (rule "applyEq" (formula "41") (term "0") (ifseqformula "40"))
                        (rule "inEqSimp_homoInEq1" (formula "41"))
                        (rule "polySimp_pullOutFactor1" (formula "41") (term "0"))
                        (rule "add_literals" (formula "41") (term "1,0"))
                        (rule "times_zero_1" (formula "41") (term "0"))
                        (rule "leq_literals" (formula "41"))
                        (rule "true_left" (formula "41"))
                        (rule "applyEq" (formula "30") (term "1,1,1,0,0") (ifseqformula "40"))
                        (rule "polySimp_addAssoc" (formula "30") (term "1,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "30") (term "0,1,1,0,0"))
                        (rule "polySimp_addComm1" (formula "30") (term "0,0,1,1,0,0"))
                        (rule "add_literals" (formula "30") (term "0,0,0,1,1,0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "30") (term "0,1,1,0,0"))
                        (rule "add_literals" (formula "30") (term "1,1,0,1,1,0,0"))
                        (rule "times_zero_1" (formula "30") (term "1,0,1,1,0,0"))
                        (rule "add_zero_right" (formula "30") (term "0,1,1,0,0"))
                        (rule "applyEq" (formula "19") (term "0") (ifseqformula "40"))
                        (rule "inEqSimp_homoInEq1" (formula "19"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "0,1,0"))
                        (rule "mul_literals" (formula "19") (term "0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0"))
                        (rule "polySimp_addComm1" (formula "19") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "19") (term "0"))
                        (rule "add_literals" (formula "19") (term "1,1,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "19") (term "0,0,0"))
                        (rule "add_literals" (formula "19") (term "0,0,0,0"))
                        (rule "add_zero_left" (formula "19") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0" (formula "19") (term "0,0"))
                        (rule "add_literals" (formula "19") (term "1,0,0"))
                        (rule "polySimp_elimOne" (formula "19") (term "0,0"))
                        (rule "applyEq" (formula "38") (term "0") (ifseqformula "40"))
                        (rule "inEqSimp_homoInEq1" (formula "38"))
                        (rule "polySimp_mulComm0" (formula "38") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "38") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "38") (term "0,1,0"))
                        (rule "mul_literals" (formula "38") (term "0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "38") (term "0"))
                        (rule "polySimp_addComm1" (formula "38") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "38") (term "0"))
                        (rule "add_literals" (formula "38") (term "1,1,0"))
                        (rule "polySimp_addAssoc" (formula "38") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "38") (term "0,0,0"))
                        (rule "add_literals" (formula "38") (term "0,0,0,0"))
                        (rule "add_zero_left" (formula "38") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor1" (formula "38") (term "0,0"))
                        (rule "add_literals" (formula "38") (term "1,0,0"))
                        (rule "times_zero_1" (formula "38") (term "0,0"))
                        (rule "add_zero_left" (formula "38") (term "0"))
                        (rule "applyEq" (formula "14") (term "1,0,2,0") (ifseqformula "40"))
                        (rule "eqSymm" (formula "14"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,2,1"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0,2,1"))
                        (rule "polySimp_addComm1" (formula "14") (term "0,0,0,2,1"))
                        (rule "add_literals" (formula "14") (term "0,0,0,0,2,1"))
                        (rule "polySimp_pullOutFactor2b" (formula "14") (term "0,0,2,1"))
                        (rule "add_literals" (formula "14") (term "1,1,0,0,2,1"))
                        (rule "times_zero_1" (formula "14") (term "1,0,0,2,1"))
                        (rule "add_zero_right" (formula "14") (term "0,0,2,1"))
                        (rule "applyEq" (formula "14") (term "1,0,2,0") (ifseqformula "40"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,2,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0,2,0"))
                        (rule "polySimp_addComm1" (formula "14") (term "0,0,0,2,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,0,2,0"))
                        (rule "add_zero_left" (formula "14") (term "0,0,0,2,0"))
                        (rule "polySimp_pullOutFactor2" (formula "14") (term "0,0,2,0"))
                        (rule "add_literals" (formula "14") (term "1,0,0,2,0"))
                        (rule "times_zero_1" (formula "14") (term "0,0,2,0"))
                        (rule "add_zero_left" (formula "14") (term "0,2,0"))
                        (rule "eqSymm" (formula "14"))
                        (rule "applyEq" (formula "34") (term "1,1") (ifseqformula "40"))
                        (rule "polySimp_addAssoc" (formula "34") (term "1"))
                        (rule "polySimp_addComm1" (formula "34") (term "0,1"))
                        (rule "polySimp_pullOutFactor3b" (formula "34") (term "1"))
                        (rule "polySimp_addAssoc" (formula "34") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "34") (term "0,0,1"))
                        (rule "polySimp_pullOutFactor2b" (formula "34") (term "0,1"))
                        (rule "add_literals" (formula "34") (term "1,1,0,1"))
                        (rule "times_zero_1" (formula "34") (term "1,0,1"))
                        (rule "add_zero_right" (formula "34") (term "0,1"))
                        (rule "applyEq" (formula "2") (term "1,1") (ifseqformula "40"))
                        (rule "polySimp_addAssoc" (formula "2") (term "1"))
                        (rule "polySimp_addComm1" (formula "2") (term "0,1"))
                        (rule "polySimp_pullOutFactor3b" (formula "2") (term "1"))
                        (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "2") (term "0,0,1"))
                        (rule "polySimp_pullOutFactor2b" (formula "2") (term "0,1"))
                        (rule "add_literals" (formula "2") (term "1,1,0,1"))
                        (rule "times_zero_1" (formula "2") (term "1,0,1"))
                        (rule "add_zero_right" (formula "2") (term "0,1"))
                        (rule "applyEq" (formula "11") (term "1,1") (ifseqformula "40"))
                        (rule "polySimp_addAssoc" (formula "11") (term "1"))
                        (rule "polySimp_addAssoc" (formula "11") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "11") (term "0,0,1"))
                        (rule "polySimp_pullOutFactor2b" (formula "11") (term "0,1"))
                        (rule "add_literals" (formula "11") (term "1,1,0,1"))
                        (rule "times_zero_1" (formula "11") (term "1,0,1"))
                        (rule "add_zero_right" (formula "11") (term "0,1"))
                        (rule "applyEq" (formula "3") (term "1,1") (ifseqformula "40"))
                        (rule "polySimp_addAssoc" (formula "3") (term "1"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "3") (term "0,0,1"))
                        (rule "polySimp_pullOutFactor2b" (formula "3") (term "0,1"))
                        (rule "add_literals" (formula "3") (term "1,1,0,1"))
                        (rule "times_zero_1" (formula "3") (term "1,0,1"))
                        (rule "add_zero_right" (formula "3") (term "0,1"))
                        (rule "applyEq" (formula "26") (term "1,1") (ifseqformula "40"))
                        (rule "polySimp_addAssoc" (formula "26") (term "1"))
                        (rule "polySimp_addAssoc" (formula "26") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "26") (term "0,0,1"))
                        (rule "polySimp_pullOutFactor2b" (formula "26") (term "0,1"))
                        (rule "add_literals" (formula "26") (term "1,1,0,1"))
                        (rule "times_zero_1" (formula "26") (term "1,0,1"))
                        (rule "add_zero_right" (formula "26") (term "0,1"))
                        (rule "applyEq" (formula "15") (term "1") (ifseqformula "40"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "9"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                        (rule "polySimp_elimOne" (formula "9") (term "0"))
                        (rule "replace_known_left" (formula "41") (term "0") (ifseqformula "9"))
                         (builtin "One Step Simplification" (formula "41"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                        (rule "polySimp_elimOne" (formula "10") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "20"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "0"))
                        (rule "polySimp_elimOne" (formula "20") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "16"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                        (rule "polySimp_elimOne" (formula "16") (term "0"))
                        (rule "inEqSimp_invertInEq0" (formula "36"))
                        (rule "polySimp_mulLiterals" (formula "36") (term "0"))
                        (rule "mul_literals" (formula "36") (term "1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "18"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "0"))
                        (rule "inEqSimp_invertInEq0" (formula "37"))
                        (rule "polySimp_mulLiterals" (formula "37") (term "0"))
                        (rule "times_zero_2" (formula "37") (term "1"))
                        (rule "inEqSimp_strengthen1" (formula "20") (ifseqformula "49"))
                        (rule "inEqSimp_contradEq7" (formula "49") (ifseqformula "20"))
                        (rule "polySimp_mulComm0" (formula "49") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "49") (term "0,0"))
                        (rule "add_literals" (formula "49") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "49") (term "1,0,0"))
                        (rule "add_zero_right" (formula "49") (term "0,0"))
                        (rule "leq_literals" (formula "49") (term "0"))
                         (builtin "One Step Simplification" (formula "49"))
                        (rule "false_right" (formula "49"))
                        (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "9"))
                        (rule "leq_literals" (formula "34") (term "0"))
                         (builtin "One Step Simplification" (formula "34"))
                        (rule "true_left" (formula "34"))
                        (rule "inEqSimp_subsumption6" (formula "35") (ifseqformula "15"))
                        (rule "greater_literals" (formula "35") (term "0,0"))
                         (builtin "One Step Simplification" (formula "35"))
                        (rule "mul_literals" (formula "35") (term "1,0"))
                        (rule "leq_literals" (formula "35") (term "0"))
                         (builtin "One Step Simplification" (formula "35"))
                        (rule "true_left" (formula "35"))
                        (rule "inEqSimp_subsumption6" (formula "35") (ifseqformula "9"))
                        (rule "mul_literals" (formula "35") (term "1,1,0"))
                        (rule "greater_literals" (formula "35") (term "0,0"))
                         (builtin "One Step Simplification" (formula "35"))
                        (rule "leq_literals" (formula "35") (term "0"))
                         (builtin "One Step Simplification" (formula "35"))
                        (rule "true_left" (formula "35"))
                        (rule "inEqSimp_exactShadow1" (formula "18") (ifseqformula "35"))
                        (rule "mul_literals" (formula "18") (term "1,0,1"))
                        (rule "greater_literals" (formula "18") (term "0"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "polySimp_mulComm0" (formula "18") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "18") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "18"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "0"))
                        (rule "polySimp_elimOne" (formula "18") (term "0"))
                        (rule "inEqSimp_subsumption0" (formula "18") (ifseqformula "20"))
                        (rule "leq_literals" (formula "18") (term "0"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "true_left" (formula "18"))
                        (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "35"))
                        (rule "polySimp_mulAssoc" (formula "16") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "0,0"))
                        (rule "polySimp_elimOne" (formula "16") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "16") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                        (rule "mul_literals" (formula "16") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "15"))
                        (rule "leq_literals" (formula "16") (term "0"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "true_left" (formula "16"))
                        (rule "inEqSimp_exactShadow3" (formula "20") (ifseqformula "35"))
                        (rule "polySimp_rightDist" (formula "20") (term "0,0"))
                        (rule "mul_literals" (formula "20") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "20") (term "0"))
                        (rule "add_literals" (formula "20") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "20"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "0"))
                        (rule "polySimp_elimOne" (formula "20") (term "0"))
                        (rule "inEqSimp_subsumption0" (formula "19") (ifseqformula "20"))
                        (rule "leq_literals" (formula "19") (term "0"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "true_left" (formula "19"))
                        (rule "inEqSimp_exactShadow3" (formula "20") (ifseqformula "34"))
                        (rule "polySimp_rightDist" (formula "20") (term "0,0"))
                        (rule "mul_literals" (formula "20") (term "0,0,0"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0"))
                        (rule "polySimp_addComm1" (formula "20") (term "0,0"))
                        (rule "add_literals" (formula "20") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "20") (term "0"))
                        (rule "add_literals" (formula "20") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "20") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "20"))
                        (rule "mul_literals" (formula "20") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "20") (ifseqformula "15"))
                        (rule "leq_literals" (formula "20") (term "0"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "true_left" (formula "20"))
                        (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "34"))
                        (rule "polySimp_mulAssoc" (formula "16") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "0,0"))
                        (rule "polySimp_elimOne" (formula "16") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0"))
                        (rule "polySimp_addComm0" (formula "16") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "16") (term "0"))
                        (rule "add_literals" (formula "16") (term "1,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                        (rule "mul_literals" (formula "16") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "16") (ifseqformula "15"))
                        (rule "greater_literals" (formula "16") (term "0,0"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "times_zero_1" (formula "16") (term "1,0"))
                        (rule "leq_literals" (formula "16") (term "0"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "true_left" (formula "16"))
                        (rule "inEqSimp_exactShadow1" (formula "18") (ifseqformula "34"))
                        (rule "greater_literals" (formula "18") (term "0"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "polySimp_mulComm0" (formula "18") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0"))
                        (rule "polySimp_addComm0" (formula "18") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "18") (term "0"))
                        (rule "add_literals" (formula "18") (term "1,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "18"))
                        (rule "mul_literals" (formula "18") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "18") (ifseqformula "15"))
                        (rule "greater_literals" (formula "18") (term "0,0"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "times_zero_1" (formula "18") (term "1,0"))
                        (rule "leq_literals" (formula "18") (term "0"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "true_left" (formula "18"))
                        (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "34"))
                        (rule "mul_literals" (formula "9") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0"))
                        (rule "add_literals" (formula "9") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "9"))
                        (rule "mul_literals" (formula "9") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "9") (ifseqformula "16"))
                        (rule "greater_literals" (formula "9") (term "0,0"))
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "times_zero_1" (formula "9") (term "1,0"))
                        (rule "leq_literals" (formula "9") (term "0"))
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "true_left" (formula "9"))
                        (rule "cut_direct" (formula "21") (term "0"))
                        (branch "CUT: classify_sk_0 >= 1 TRUE"
                            (builtin "One Step Simplification" (formula "22"))
                           (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "21"))
                           (rule "leq_literals" (formula "15") (term "0"))
                            (builtin "One Step Simplification" (formula "15"))
                           (rule "true_left" (formula "15"))
                           (rule "arrayLengthIsAShort" (formula "26") (term "0"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "true_left" (formula "26"))
                           (rule "arrayLengthIsAShort" (formula "28") (term "0"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "arrayLengthNotNegative" (formula "26") (term "0"))
                           (rule "all_pull_out3" (formula "39") (term "0"))
                           (rule "onlyCreatedObjectsAreReferencedFinal" (formula "11") (term "0,0") (ifseqformula "4") (ifseqformula "6"))
                           (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "44")))
                           (rule "true_left" (formula "11"))
                           (rule "onlyCreatedObjectsAreReferencedFinal" (formula "34") (term "0,0,1,1,0,0") (ifseqformula "4") (ifseqformula "6"))
                           (rule "replace_known_right" (formula "34") (term "1") (ifseqformula "41"))
                            (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "43")))
                           (rule "closeFalse" (formula "34"))
                        )
                        (branch "CUT: classify_sk_0 >= 1 FALSE"
                            (builtin "One Step Simplification" (formula "21"))
                           (rule "true_left" (formula "21"))
                           (rule "inEqSimp_geqRight" (formula "38"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_subsumption0" (formula "20") (ifseqformula "1"))
                           (rule "leq_literals" (formula "20") (term "0"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "inEqSimp_antiSymm" (formula "16") (ifseqformula "1"))
                           (rule "applyEqRigid" (formula "17") (term "0") (ifseqformula "16"))
                           (rule "qeq_literals" (formula "17"))
                           (rule "true_left" (formula "17"))
                           (rule "applyEqRigid" (formula "33") (term "0,1,1") (ifseqformula "16"))
                           (rule "times_zero_2" (formula "33") (term "1,1"))
                           (rule "add_zero_right" (formula "33") (term "1"))
                           (rule "applyEqRigid" (formula "19") (term "1") (ifseqformula "16"))
                           (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "16"))
                           (rule "leq_literals" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "applyEqRigid" (formula "19") (term "1,1") (ifseqformula "15"))
                           (rule "add_zero_right" (formula "19") (term "1"))
                           (rule "applyEqRigid" (formula "17") (term "1,1") (ifseqformula "15"))
                           (rule "add_zero_right" (formula "17") (term "1"))
                           (rule "applyEq" (formula "16") (term "0,1") (ifseqformula "15"))
                           (rule "times_zero_2" (formula "16") (term "1"))
                           (rule "applyEq" (formula "19") (term "0,2,0") (ifseqformula "15"))
                           (rule "applyEq" (formula "32") (term "1,0,1") (ifseqformula "15"))
                           (rule "add_zero_right" (formula "32") (term "0,1"))
                           (rule "applyEq" (formula "14") (term "1,0,1") (ifseqformula "15"))
                           (rule "add_zero_right" (formula "14") (term "0,1"))
                           (rule "inEqSimp_subsumption6" (formula "18") (ifseqformula "9"))
                           (rule "greater_literals" (formula "18") (term "0,0"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "mul_literals" (formula "18") (term "1,0"))
                           (rule "leq_literals" (formula "18") (term "0"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "inEqSimp_subsumption6" (formula "17") (ifseqformula "9"))
                           (rule "mul_literals" (formula "17") (term "1,1,0"))
                           (rule "greater_literals" (formula "17") (term "0,0"))
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "leq_literals" (formula "17") (term "0"))
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "true_left" (formula "17"))
                           (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "9"))
                           (rule "leq_literals" (formula "16") (term "0"))
                            (builtin "One Step Simplification" (formula "16"))
                           (rule "true_left" (formula "16"))
                           (rule "arrayLengthIsAShort" (formula "20") (term "0"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "arrayLengthIsAShort" (formula "22") (term "0"))
                            (builtin "One Step Simplification" (formula "22"))
                           (rule "true_left" (formula "22"))
                           (rule "arrayLengthNotNegative" (formula "20") (term "0"))
                           (rule "all_pull_out3" (formula "32") (term "0"))
                           (rule "onlyCreatedObjectsAreReferencedFinal" (formula "12") (term "1,0,1,0,1,0") (ifseqformula "4") (ifseqformula "6"))
                           (rule "replace_known_right" (formula "12") (term "1") (ifseqformula "34"))
                            (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "36")))
                           (rule "closeFalse" (formula "12"))
                        )
                     )
                  )
                  (branch "CUT: self.tree.<created> = TRUE FALSE"
                      (builtin "One Step Simplification" (formula "48"))
                     (rule "false_right" (formula "48"))
                     (rule "cut_direct" (formula "41") (term "0"))
                     (branch "CUT: result_241 >= 2 + classify_sk_0 + classify_sk_1 TRUE"
                         (builtin "One Step Simplification" (formula "42"))
                        (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "41"))
                        (rule "inEqSimp_homoInEq0" (formula "39") (term "0"))
                        (rule "polySimp_mulComm0" (formula "39") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "39") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "39") (term "0,1,0,0"))
                        (rule "mul_literals" (formula "39") (term "0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "39") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "39") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0"))
                        (rule "add_literals" (formula "39") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "39") (term "1,0,0"))
                        (rule "add_zero_right" (formula "39") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "39") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "39") (term "0,0,0"))
                        (rule "add_literals" (formula "39") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0"))
                        (rule "add_literals" (formula "39") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "39") (term "1,0,0"))
                        (rule "add_zero_right" (formula "39") (term "0,0"))
                        (rule "qeq_literals" (formula "39") (term "0"))
                         (builtin "One Step Simplification" (formula "39"))
                        (rule "true_left" (formula "39"))
                        (rule "inEqSimp_exactShadow3" (formula "40") (ifseqformula "9"))
                        (rule "polySimp_rightDist" (formula "40") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "40") (term "0"))
                        (rule "polySimp_rightDist" (formula "40") (term "0,0,0"))
                        (rule "mul_literals" (formula "40") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "40") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "40") (term "0,0,0"))
                        (rule "add_literals" (formula "40") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "40") (term "0,0"))
                        (rule "add_literals" (formula "40") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "40") (term "1,0,0"))
                        (rule "add_literals" (formula "40") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "40"))
                        (rule "polySimp_mulLiterals" (formula "40") (term "0"))
                        (rule "polySimp_elimOne" (formula "40") (term "0"))
                        (rule "inEqSimp_subsumption0" (formula "38") (ifseqformula "40"))
                        (rule "leq_literals" (formula "38") (term "0"))
                         (builtin "One Step Simplification" (formula "38"))
                        (rule "true_left" (formula "38"))
                        (rule "inEqSimp_exactShadow1" (formula "17") (ifseqformula "39"))
                        (rule "greater_literals" (formula "17") (term "0"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "mul_literals" (formula "17") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "17") (term "0,0"))
                        (rule "mul_literals" (formula "17") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "17") (term "0"))
                        (rule "add_literals" (formula "17") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "17"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "0"))
                        (rule "polySimp_elimOne" (formula "17") (term "0"))
                        (rule "inEqSimp_subsumption0" (formula "17") (ifseqformula "20"))
                        (rule "leq_literals" (formula "17") (term "0"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "true_left" (formula "17"))
                        (rule "cut_direct" (formula "38") (term "0"))
                        (branch "CUT: classify_sk_1 >= 1 TRUE"
                            (builtin "One Step Simplification" (formula "39"))
                           (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "38"))
                           (rule "leq_literals" (formula "34") (term "0"))
                            (builtin "One Step Simplification" (formula "34"))
                           (rule "true_left" (formula "34"))
                           (rule "inEqSimp_exactShadow3" (formula "37") (ifseqformula "34"))
                           (rule "mul_literals" (formula "37") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "37") (term "0"))
                           (rule "add_literals" (formula "37") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "37"))
                           (rule "mul_literals" (formula "37") (term "1"))
                           (rule "inEqSimp_subsumption6" (formula "37") (ifseqformula "15"))
                           (rule "greater_literals" (formula "37") (term "0,0"))
                            (builtin "One Step Simplification" (formula "37"))
                           (rule "times_zero_1" (formula "37") (term "1,0"))
                           (rule "leq_literals" (formula "37") (term "0"))
                            (builtin "One Step Simplification" (formula "37"))
                           (rule "true_left" (formula "37"))
                           (rule "arrayLengthIsAShort" (formula "26") (term "0"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "true_left" (formula "26"))
                           (rule "arrayLengthNotNegative" (formula "26") (term "0"))
                           (rule "arrayLengthIsAShort" (formula "29") (term "0"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "true_left" (formula "29"))
                           (rule "cut_direct" (formula "21") (term "0"))
                           (branch "CUT: classify_sk_0 >= 1 TRUE"
                               (builtin "One Step Simplification" (formula "22"))
                              (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "21"))
                              (rule "leq_literals" (formula "15") (term "0"))
                               (builtin "One Step Simplification" (formula "15"))
                              (rule "true_left" (formula "15"))
                              (rule "all_pull_out3" (formula "12") (term "0"))
                              (rule "shift_paren_or" (formula "12") (term "0,0"))
                              (rule "shift_paren_or" (formula "12") (term "0,0,0"))
                              (rule "all_pull_out3" (formula "31") (term "0"))
                              (rule "shift_paren_or" (formula "31") (term "0,0"))
                              (rule "shift_paren_or" (formula "31") (term "0,0,0"))
                              (rule "all_pull_out3" (formula "43") (term "0"))
                              (rule "shift_paren_or" (formula "43") (term "0,0"))
                              (rule "shift_paren_or" (formula "43") (term "0,0,0"))
                              (rule "onlyCreatedObjectsAreReferencedFinal" (formula "24") (term "0,0") (ifseqformula "3") (ifseqformula "5"))
                              (rule "replace_known_right" (formula "24") (term "1") (ifseqformula "49"))
                               (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "48")))
                              (rule "closeFalse" (formula "24"))
                           )
                           (branch "CUT: classify_sk_0 >= 1 FALSE"
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "true_left" (formula "21"))
                              (rule "inEqSimp_geqRight" (formula "43"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_subsumption0" (formula "20") (ifseqformula "1"))
                              (rule "leq_literals" (formula "20") (term "0"))
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "true_left" (formula "20"))
                              (rule "inEqSimp_antiSymm" (formula "16") (ifseqformula "1"))
                              (rule "applyEq" (formula "22") (term "0,2,0") (ifseqformula "16"))
                              (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "16"))
                              (rule "leq_literals" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "applyEqRigid" (formula "34") (term "0,1,1") (ifseqformula "15"))
                              (rule "times_zero_2" (formula "34") (term "1,1"))
                              (rule "add_literals" (formula "34") (term "1"))
                              (rule "applyEq" (formula "20") (term "0,1,1") (ifseqformula "15"))
                              (rule "times_zero_2" (formula "20") (term "1,1"))
                              (rule "add_zero_right" (formula "20") (term "1"))
                              (rule "applyEqRigid" (formula "8") (term "1,1") (ifseqformula "15"))
                              (rule "add_literals" (formula "8") (term "1"))
                              (rule "applyEq" (formula "18") (term "1,1") (ifseqformula "15"))
                              (rule "add_zero_right" (formula "18") (term "1"))
                              (rule "applyEqRigid" (formula "9") (term "1,1") (ifseqformula "15"))
                              (rule "add_zero_right" (formula "9") (term "1"))
                              (rule "applyEq" (formula "16") (term "0") (ifseqformula "15"))
                              (rule "qeq_literals" (formula "16"))
                              (rule "true_left" (formula "16"))
                              (rule "applyEq" (formula "18") (term "0,1,0,1") (ifseqformula "15"))
                              (rule "times_zero_2" (formula "18") (term "1,0,1"))
                              (rule "add_zero_right" (formula "18") (term "0,1"))
                              (rule "applyEqRigid" (formula "13") (term "0,1,0,0,2,0") (ifseqformula "15"))
                              (rule "times_zero_2" (formula "13") (term "1,0,0,2,0"))
                              (rule "add_zero_right" (formula "13") (term "0,0,2,0"))
                              (rule "eqSymm" (formula "13"))
                              (rule "applyEq" (formula "12") (term "0,0,1,0,0,0,1,0") (ifseqformula "15"))
                              (rule "mul_literals" (formula "12") (term "0,1,0,0,0,1,0"))
                              (rule "add_zero_left" (formula "12") (term "1,0,0,0,1,0"))
                              (rule "applyEq" (formula "40") (term "0,1,0,1,0,0,0,1,0") (ifseqformula "15"))
                              (rule "times_zero_2" (formula "40") (term "1,0,1,0,0,0,1,0"))
                              (rule "add_literals" (formula "40") (term "0,1,0,0,0,1,0"))
                              (rule "applyEq" (formula "33") (term "0,1,0,1") (ifseqformula "15"))
                              (rule "times_zero_2" (formula "33") (term "1,0,1"))
                              (rule "add_zero_right" (formula "33") (term "0,1"))
                              (rule "applyEq" (formula "24") (term "0,0,1") (ifseqformula "15"))
                              (rule "mul_literals" (formula "24") (term "0,1"))
                              (rule "add_zero_left" (formula "24") (term "1"))
                              (rule "applyEq" (formula "38") (term "1,0,1") (ifseqformula "15"))
                              (rule "add_zero_right" (formula "38") (term "0,1"))
                              (rule "applyEq" (formula "48") (term "1") (ifseqformula "15"))
                              (rule "applyEqRigid" (formula "34") (term "1,0,1") (ifseqformula "15"))
                              (rule "add_zero_right" (formula "34") (term "0,1"))
                              (rule "applyEq" (formula "28") (term "0,1,0,1,1,0,0") (ifseqformula "15"))
                              (rule "times_zero_2" (formula "28") (term "1,0,1,1,0,0"))
                              (rule "add_literals" (formula "28") (term "0,1,1,0,0"))
                              (rule "applyEq" (formula "28") (term "0,1,0,1,0,0,0,1,0") (ifseqformula "15"))
                              (rule "times_zero_2" (formula "28") (term "1,0,1,0,0,0,1,0"))
                              (rule "add_literals" (formula "28") (term "0,1,0,0,0,1,0"))
                              (rule "applyEq" (formula "40") (term "0,1,0,1,1,0,0") (ifseqformula "15"))
                              (rule "times_zero_2" (formula "40") (term "1,0,1,1,0,0"))
                              (rule "add_literals" (formula "40") (term "0,1,1,0,0"))
                              (rule "applyEq" (formula "12") (term "0,0,1,1,0,0") (ifseqformula "15"))
                              (rule "times_zero_2" (formula "12") (term "0,1,1,0,0"))
                              (rule "add_zero_left" (formula "12") (term "1,1,0,0"))
                              (rule "applyEqRigid" (formula "26") (term "0,0,1") (ifseqformula "15"))
                              (rule "times_zero_2" (formula "26") (term "0,1"))
                              (rule "add_zero_left" (formula "26") (term "1"))
                              (rule "applyEq" (formula "27") (term "0,1,0,1,1,0,0") (ifseqformula "15"))
                              (rule "times_zero_2" (formula "27") (term "1,0,1,1,0,0"))
                              (rule "add_zero_right" (formula "27") (term "0,1,1,0,0"))
                              (rule "applyEq" (formula "22") (term "0,0,1") (ifseqformula "15"))
                              (rule "mul_literals" (formula "22") (term "0,1"))
                              (rule "add_zero_left" (formula "22") (term "1"))
                              (rule "applyEqRigid" (formula "10") (term "0,0,1") (ifseqformula "15"))
                              (rule "times_zero_2" (formula "10") (term "0,1"))
                              (rule "add_zero_left" (formula "10") (term "1"))
                              (rule "applyEqRigid" (formula "2") (term "0,0,1") (ifseqformula "15"))
                              (rule "times_zero_2" (formula "2") (term "0,1"))
                              (rule "add_zero_left" (formula "2") (term "1"))
                              (rule "applyEqRigid" (formula "1") (term "0,0,0,1") (ifseqformula "15"))
                              (rule "mul_literals" (formula "1") (term "0,0,1"))
                              (rule "add_zero_left" (formula "1") (term "0,1"))
                              (rule "applyEqRigid" (formula "31") (term "0,0,0,1") (ifseqformula "15"))
                              (rule "mul_literals" (formula "31") (term "0,0,1"))
                              (rule "add_zero_left" (formula "31") (term "0,1"))
                              (rule "applyEq" (formula "13") (term "0,1,0,0,2,0") (ifseqformula "15"))
                              (rule "mul_literals" (formula "13") (term "1,0,0,2,0"))
                              (rule "add_literals" (formula "13") (term "0,0,2,0"))
                              (rule "eqSymm" (formula "13"))
                              (rule "inEqSimp_contradEq7" (formula "48") (ifseqformula "35"))
                              (rule "times_zero_1" (formula "48") (term "1,0,0"))
                              (rule "add_zero_right" (formula "48") (term "0,0"))
                              (rule "leq_literals" (formula "48") (term "0"))
                               (builtin "One Step Simplification" (formula "48"))
                              (rule "false_right" (formula "48"))
                              (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "8"))
                              (rule "leq_literals" (formula "16") (term "0"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "true_left" (formula "16"))
                              (rule "inEqSimp_subsumption6" (formula "16") (ifseqformula "34"))
                              (rule "greater_literals" (formula "16") (term "0,0"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "mul_literals" (formula "16") (term "1,0"))
                              (rule "leq_literals" (formula "16") (term "0"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "true_left" (formula "16"))
                              (rule "inEqSimp_subsumption0" (formula "30") (ifseqformula "35"))
                              (rule "leq_literals" (formula "30") (term "0"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "true_left" (formula "30"))
                              (rule "inEqSimp_subsumption1" (formula "30") (ifseqformula "35"))
                              (rule "inEqSimp_homoInEq0" (formula "30") (term "0"))
                              (rule "polySimp_mulComm0" (formula "30") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "30") (term "1,0,0"))
                              (rule "mul_literals" (formula "30") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "30") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "30") (term "0,0,0"))
                              (rule "add_literals" (formula "30") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0"))
                              (rule "add_literals" (formula "30") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "30") (term "1,0,0"))
                              (rule "add_zero_right" (formula "30") (term "0,0"))
                              (rule "qeq_literals" (formula "30") (term "0"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "true_left" (formula "30"))
                              (rule "inEqSimp_exactShadow3" (formula "34") (ifseqformula "9"))
                              (rule "polySimp_rightDist" (formula "34") (term "0,0"))
                              (rule "mul_literals" (formula "34") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "34") (term "0"))
                              (rule "add_literals" (formula "34") (term "0,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "34"))
                              (rule "polySimp_mulLiterals" (formula "34") (term "0"))
                              (rule "polySimp_elimOne" (formula "34") (term "0"))
                              (rule "inEqSimp_exactShadow3" (formula "30") (ifseqformula "9"))
                              (rule "polySimp_rightDist" (formula "30") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "1,0,0"))
                              (rule "mul_literals" (formula "30") (term "0,0,0"))
                              (rule "polySimp_elimOne" (formula "30") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "30") (term "0"))
                              (rule "add_literals" (formula "30") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "30"))
                              (rule "mul_literals" (formula "30") (term "1"))
                              (rule "inEqSimp_subsumption1" (formula "30") (ifseqformula "32"))
                              (rule "leq_literals" (formula "30") (term "0"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "true_left" (formula "30"))
                              (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "9"))
                              (rule "polySimp_rightDist" (formula "16") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0"))
                              (rule "mul_literals" (formula "16") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "16") (term "0"))
                              (rule "add_literals" (formula "16") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                              (rule "mul_literals" (formula "16") (term "1"))
                              (rule "inEqSimp_subsumption6" (formula "16") (ifseqformula "32"))
                              (rule "mul_literals" (formula "16") (term "1,1,0"))
                              (rule "greater_literals" (formula "16") (term "0,0"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "leq_literals" (formula "16") (term "0"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "true_left" (formula "16"))
                              (rule "onlyCreatedObjectsAreReferencedFinal" (formula "11") (term "1") (ifseqformula "3") (ifseqformula "5"))
                              (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "40"))
                               (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "38")))
                              (rule "closeFalse" (formula "11"))
                           )
                        )
                        (branch "CUT: classify_sk_1 >= 1 FALSE"
                            (builtin "One Step Simplification" (formula "38"))
                           (rule "true_left" (formula "38"))
                           (rule "inEqSimp_geqRight" (formula "42"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_subsumption0" (formula "39") (ifseqformula "1"))
                           (rule "leq_literals" (formula "39") (term "0"))
                            (builtin "One Step Simplification" (formula "39"))
                           (rule "true_left" (formula "39"))
                           (rule "inEqSimp_antiSymm" (formula "35") (ifseqformula "1"))
                           (rule "applyEq" (formula "50") (term "0") (ifseqformula "35"))
                           (rule "eqSymm" (formula "50"))
                           (rule "applyEqRigid" (formula "41") (term "0,2,0") (ifseqformula "35"))
                           (rule "applyEqRigid" (formula "37") (term "0") (ifseqformula "35"))
                           (rule "inEqSimp_homoInEq0" (formula "37"))
                           (rule "times_zero_2" (formula "37") (term "1,0"))
                           (rule "add_zero_right" (formula "37") (term "0"))
                           (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "35"))
                           (rule "leq_literals" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "applyEqRigid" (formula "38") (term "0,1,1") (ifseqformula "34"))
                           (rule "times_zero_2" (formula "38") (term "1,1"))
                           (rule "add_zero_right" (formula "38") (term "1"))
                           (rule "applyEq" (formula "39") (term "1,1") (ifseqformula "34"))
                           (rule "add_zero_right" (formula "39") (term "1"))
                           (rule "applyEq" (formula "18") (term "0,1,1") (ifseqformula "34"))
                           (rule "times_zero_2" (formula "18") (term "1,1"))
                           (rule "add_zero_right" (formula "18") (term "1"))
                           (rule "applyEq" (formula "36") (term "1,1") (ifseqformula "33"))
                           (rule "add_zero_right" (formula "36") (term "1"))
                           (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "33"))
                           (rule "mul_literals" (formula "17") (term "0"))
                           (rule "inEqSimp_homoInEq1" (formula "17"))
                           (rule "times_zero_2" (formula "17") (term "1,0"))
                           (rule "add_zero_right" (formula "17") (term "0"))
                           (rule "applyEq" (formula "34") (term "0") (ifseqformula "33"))
                           (rule "qeq_literals" (formula "34"))
                           (rule "true_left" (formula "34"))
                           (rule "applyEq" (formula "1") (term "1,0,1") (ifseqformula "33"))
                           (rule "add_zero_right" (formula "1") (term "0,1"))
                           (rule "applyEqRigid" (formula "32") (term "1,0,1") (ifseqformula "33"))
                           (rule "add_zero_right" (formula "32") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "34"))
                           (rule "mul_literals" (formula "34") (term "1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "17"))
                           (rule "mul_literals" (formula "17") (term "1"))
                           (rule "inEqSimp_strengthen1" (formula "15") (ifseqformula "45"))
                           (rule "add_literals" (formula "15") (term "1"))
                           (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "15"))
                            (builtin "One Step Simplification" (formula "19"))
                           (rule "inEqSimp_contradEq7" (formula "45") (ifseqformula "15"))
                           (rule "mul_literals" (formula "45") (term "1,0,0"))
                           (rule "add_zero_right" (formula "45") (term "0,0"))
                           (rule "leq_literals" (formula "45") (term "0"))
                            (builtin "One Step Simplification" (formula "45"))
                           (rule "false_right" (formula "45"))
                           (rule "inEqSimp_subsumption1" (formula "35") (ifseqformula "8"))
                           (rule "inEqSimp_homoInEq0" (formula "35") (term "0"))
                           (rule "polySimp_mulComm0" (formula "35") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "35") (term "1,0,0"))
                           (rule "mul_literals" (formula "35") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "35") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "35") (term "0,0,0"))
                           (rule "add_literals" (formula "35") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0"))
                           (rule "add_literals" (formula "35") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "35") (term "1,0,0"))
                           (rule "add_zero_right" (formula "35") (term "0,0"))
                           (rule "qeq_literals" (formula "35") (term "0"))
                            (builtin "One Step Simplification" (formula "35"))
                           (rule "true_left" (formula "35"))
                           (rule "inEqSimp_subsumption6" (formula "33") (ifseqformula "15"))
                           (rule "greater_literals" (formula "33") (term "0,0"))
                            (builtin "One Step Simplification" (formula "33"))
                           (rule "mul_literals" (formula "33") (term "1,0"))
                           (rule "leq_literals" (formula "33") (term "0"))
                            (builtin "One Step Simplification" (formula "33"))
                           (rule "true_left" (formula "33"))
                           (rule "inEqSimp_exactShadow3" (formula "33") (ifseqformula "9"))
                           (rule "polySimp_rightDist" (formula "33") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "33") (term "1,0,0"))
                           (rule "mul_literals" (formula "33") (term "0,0,0"))
                           (rule "polySimp_elimOne" (formula "33") (term "1,0,0"))
                           (rule "polySimp_addAssoc" (formula "33") (term "0"))
                           (rule "polySimp_addComm1" (formula "33") (term "0,0"))
                           (rule "add_literals" (formula "33") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor3b" (formula "33") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "33"))
                           (rule "mul_literals" (formula "33") (term "1"))
                           (rule "inEqSimp_subsumption6" (formula "33") (ifseqformula "15"))
                           (rule "greater_literals" (formula "33") (term "0,0"))
                            (builtin "One Step Simplification" (formula "33"))
                           (rule "mul_literals" (formula "33") (term "1,0"))
                           (rule "leq_literals" (formula "33") (term "0"))
                            (builtin "One Step Simplification" (formula "33"))
                           (rule "true_left" (formula "33"))
                           (rule "arrayLengthIsAShort" (formula "24") (term "0"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "true_left" (formula "24"))
                           (rule "arrayLengthIsAShort" (formula "26") (term "0"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "true_left" (formula "26"))
                           (rule "arrayLengthNotNegative" (formula "24") (term "0"))
                           (rule "all_pull_out3" (formula "12") (term "0"))
                           (rule "all_pull_out3" (formula "29") (term "0"))
                           (rule "all_pull_out3" (formula "36") (term "0"))
                           (rule "shift_paren_or" (formula "12") (term "0,0"))
                           (rule "shift_paren_or" (formula "29") (term "0,0"))
                           (rule "shift_paren_or" (formula "36") (term "0,0"))
                           (rule "shift_paren_or" (formula "12") (term "0,0,0"))
                           (rule "shift_paren_or" (formula "29") (term "0,0,0"))
                           (rule "shift_paren_or" (formula "36") (term "0,0,0"))
                           (rule "onlyCreatedObjectsAreReferencedFinal" (formula "11") (term "1") (ifseqformula "3") (ifseqformula "5"))
                           (rule "replace_known_right" (formula "11") (term "1") (ifseqformula "38"))
                            (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "40")))
                           (rule "closeFalse" (formula "11"))
                        )
                     )
                     (branch "CUT: result_241 >= 2 + classify_sk_0 + classify_sk_1 FALSE"
                         (builtin "One Step Simplification" (formula "41"))
                        (rule "true_left" (formula "41"))
                        (rule "inEqSimp_geqRight" (formula "42"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1"))
                        (rule "mul_literals" (formula "1") (term "0,0,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,0,1"))
                        (rule "inEqSimp_antiSymm" (formula "40") (ifseqformula "1"))
                        (rule "applyEq" (formula "43") (term "1,1,0,0,0,1,0") (ifseqformula "40"))
                        (rule "polySimp_addAssoc" (formula "43") (term "1,0,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "43") (term "0,1,0,0,0,1,0"))
                        (rule "polySimp_addComm1" (formula "43") (term "0,0,1,0,0,0,1,0"))
                        (rule "add_literals" (formula "43") (term "0,0,0,1,0,0,0,1,0"))
                        (rule "add_zero_left" (formula "43") (term "0,0,1,0,0,0,1,0"))
                        (rule "polySimp_pullOutFactor2" (formula "43") (term "0,1,0,0,0,1,0"))
                        (rule "add_literals" (formula "43") (term "1,0,1,0,0,0,1,0"))
                        (rule "times_zero_1" (formula "43") (term "0,1,0,0,0,1,0"))
                        (rule "add_zero_left" (formula "43") (term "1,0,0,0,1,0"))
                        (rule "applyEq" (formula "19") (term "0") (ifseqformula "40"))
                        (rule "inEqSimp_homoInEq1" (formula "19"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "0,1,0"))
                        (rule "mul_literals" (formula "19") (term "0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0"))
                        (rule "polySimp_addComm1" (formula "19") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "19") (term "0"))
                        (rule "add_literals" (formula "19") (term "1,1,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "19") (term "0,0,0"))
                        (rule "add_literals" (formula "19") (term "0,0,0,0"))
                        (rule "add_zero_left" (formula "19") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0" (formula "19") (term "0,0"))
                        (rule "add_literals" (formula "19") (term "1,0,0"))
                        (rule "polySimp_elimOne" (formula "19") (term "0,0"))
                        (rule "applyEq" (formula "17") (term "0") (ifseqformula "40"))
                        (rule "inEqSimp_homoInEq1" (formula "17"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "17") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "17") (term "0,1,0"))
                        (rule "mul_literals" (formula "17") (term "0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "17") (term "0"))
                        (rule "polySimp_addAssoc" (formula "17") (term "0,0"))
                        (rule "add_literals" (formula "17") (term "0,0,0"))
                        (rule "add_zero_left" (formula "17") (term "0,0"))
                        (rule "applyEq" (formula "1") (term "0") (ifseqformula "40"))
                        (rule "inEqSimp_homoInEq0" (formula "1"))
                        (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "1,0"))
                        (rule "times_zero_1" (formula "1") (term "0"))
                        (rule "qeq_literals" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "applyEq" (formula "30") (term "1,1,0,0,0,1,0") (ifseqformula "39"))
                        (rule "polySimp_addAssoc" (formula "30") (term "1,0,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "30") (term "0,1,0,0,0,1,0"))
                        (rule "polySimp_addComm1" (formula "30") (term "0,0,1,0,0,0,1,0"))
                        (rule "add_literals" (formula "30") (term "0,0,0,1,0,0,0,1,0"))
                        (rule "add_zero_left" (formula "30") (term "0,0,1,0,0,0,1,0"))
                        (rule "polySimp_pullOutFactor2" (formula "30") (term "0,1,0,0,0,1,0"))
                        (rule "add_literals" (formula "30") (term "1,0,1,0,0,0,1,0"))
                        (rule "times_zero_1" (formula "30") (term "0,1,0,0,0,1,0"))
                        (rule "add_zero_left" (formula "30") (term "1,0,0,0,1,0"))
                        (rule "applyEq" (formula "8") (term "0") (ifseqformula "39"))
                        (rule "inEqSimp_homoInEq1" (formula "8"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "8") (term "0,1,0"))
                        (rule "mul_literals" (formula "8") (term "0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0"))
                        (rule "add_zero_right" (formula "8") (term "0,0"))
                        (rule "applyEq" (formula "12") (term "1,1,0,0,0,1,0") (ifseqformula "39"))
                        (rule "polySimp_addAssoc" (formula "12") (term "1,0,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "12") (term "0,1,0,0,0,1,0"))
                        (rule "polySimp_addComm0" (formula "12") (term "0,0,1,0,0,0,1,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "12") (term "0,1,0,0,0,1,0"))
                        (rule "add_literals" (formula "12") (term "1,1,0,1,0,0,0,1,0"))
                        (rule "times_zero_1" (formula "12") (term "1,0,1,0,0,0,1,0"))
                        (rule "add_literals" (formula "12") (term "0,1,0,0,0,1,0"))
                        (rule "applyEq" (formula "30") (term "1,1,1,0,0") (ifseqformula "39"))
                        (rule "polySimp_addAssoc" (formula "30") (term "1,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "30") (term "0,1,1,0,0"))
                        (rule "polySimp_addComm1" (formula "30") (term "0,0,1,1,0,0"))
                        (rule "add_literals" (formula "30") (term "0,0,0,1,1,0,0"))
                        (rule "add_zero_left" (formula "30") (term "0,0,1,1,0,0"))
                        (rule "polySimp_pullOutFactor2" (formula "30") (term "0,1,1,0,0"))
                        (rule "add_literals" (formula "30") (term "1,0,1,1,0,0"))
                        (rule "times_zero_1" (formula "30") (term "0,1,1,0,0"))
                        (rule "add_zero_left" (formula "30") (term "1,1,0,0"))
                        (rule "applyEq" (formula "40") (term "0") (ifseqformula "39"))
                        (rule "inEqSimp_homoInEq1" (formula "40"))
                        (rule "polySimp_pullOutFactor1" (formula "40") (term "0"))
                        (rule "add_literals" (formula "40") (term "1,0"))
                        (rule "times_zero_1" (formula "40") (term "0"))
                        (rule "leq_literals" (formula "40"))
                        (rule "true_left" (formula "40"))
                        (rule "applyEq" (formula "26") (term "1,1") (ifseqformula "39"))
                        (rule "polySimp_addAssoc" (formula "26") (term "1"))
                        (rule "polySimp_addAssoc" (formula "26") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "26") (term "0,0,1"))
                        (rule "polySimp_pullOutFactor2b" (formula "26") (term "0,1"))
                        (rule "add_literals" (formula "26") (term "1,1,0,1"))
                        (rule "times_zero_1" (formula "26") (term "1,0,1"))
                        (rule "add_literals" (formula "26") (term "0,1"))
                        (rule "applyEq" (formula "13") (term "1,0,2,0") (ifseqformula "39"))
                        (rule "eqSymm" (formula "13"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,2,1"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,0,2,1"))
                        (rule "polySimp_addComm1" (formula "13") (term "0,0,0,2,1"))
                        (rule "add_literals" (formula "13") (term "0,0,0,0,2,1"))
                        (rule "polySimp_pullOutFactor2b" (formula "13") (term "0,0,2,1"))
                        (rule "add_literals" (formula "13") (term "1,1,0,0,2,1"))
                        (rule "times_zero_1" (formula "13") (term "1,0,0,2,1"))
                        (rule "add_literals" (formula "13") (term "0,0,2,1"))
                        (rule "applyEq" (formula "12") (term "1,1,1,0,0") (ifseqformula "39"))
                        (rule "polySimp_addAssoc" (formula "12") (term "1,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "12") (term "0,1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "12") (term "0,0,1,1,0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "12") (term "0,1,1,0,0"))
                        (rule "add_literals" (formula "12") (term "1,1,0,1,1,0,0"))
                        (rule "times_zero_1" (formula "12") (term "1,0,1,1,0,0"))
                        (rule "add_literals" (formula "12") (term "0,1,1,0,0"))
                        (rule "applyEq" (formula "9") (term "0") (ifseqformula "39"))
                        (rule "inEqSimp_homoInEq0" (formula "9"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "0,1,0"))
                        (rule "mul_literals" (formula "9") (term "0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "9") (term "0,0,0"))
                        (rule "add_literals" (formula "9") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0"))
                        (rule "add_literals" (formula "9") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "9") (term "1,0,0"))
                        (rule "add_literals" (formula "9") (term "0,0"))
                        (rule "applyEq" (formula "20") (term "0") (ifseqformula "39"))
                        (rule "inEqSimp_homoInEq1" (formula "20"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "0,1,0"))
                        (rule "mul_literals" (formula "20") (term "0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "20") (term "0,0,0"))
                        (rule "add_literals" (formula "20") (term "0,0,0,0"))
                        (rule "add_zero_left" (formula "20") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0" (formula "20") (term "0,0"))
                        (rule "add_literals" (formula "20") (term "1,0,0"))
                        (rule "polySimp_elimOne" (formula "20") (term "0,0"))
                        (rule "applyEq" (formula "36") (term "0") (ifseqformula "39"))
                        (rule "inEqSimp_homoInEq1" (formula "36"))
                        (rule "polySimp_mulComm0" (formula "36") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "36") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "36") (term "0,1,0"))
                        (rule "mul_literals" (formula "36") (term "0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "36") (term "0"))
                        (rule "polySimp_addComm1" (formula "36") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "36") (term "0"))
                        (rule "add_literals" (formula "36") (term "1,1,0"))
                        (rule "times_zero_1" (formula "36") (term "1,0"))
                        (rule "add_zero_right" (formula "36") (term "0"))
                        (rule "polySimp_addAssoc" (formula "36") (term "0"))
                        (rule "polySimp_addComm1" (formula "36") (term "0,0"))
                        (rule "add_literals" (formula "36") (term "0,0,0"))
                        (rule "add_zero_left" (formula "36") (term "0,0"))
                        (rule "polySimp_pullOutFactor0" (formula "36") (term "0"))
                        (rule "add_literals" (formula "36") (term "1,0"))
                        (rule "applyEq" (formula "28") (term "1,1") (ifseqformula "39"))
                        (rule "polySimp_addAssoc" (formula "28") (term "1"))
                        (rule "polySimp_addAssoc" (formula "28") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "28") (term "0,0,1"))
                        (rule "polySimp_pullOutFactor2b" (formula "28") (term "0,1"))
                        (rule "add_literals" (formula "28") (term "1,1,0,1"))
                        (rule "times_zero_1" (formula "28") (term "1,0,1"))
                        (rule "add_literals" (formula "28") (term "0,1"))
                        (rule "applyEq" (formula "37") (term "0") (ifseqformula "39"))
                        (rule "inEqSimp_homoInEq1" (formula "37"))
                        (rule "polySimp_mulComm0" (formula "37") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "37") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "37") (term "0,1,0"))
                        (rule "mul_literals" (formula "37") (term "0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "37") (term "0"))
                        (rule "polySimp_addComm1" (formula "37") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "37") (term "0"))
                        (rule "add_literals" (formula "37") (term "1,1,0"))
                        (rule "polySimp_addAssoc" (formula "37") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "37") (term "0,0,0"))
                        (rule "add_literals" (formula "37") (term "0,0,0,0"))
                        (rule "add_zero_left" (formula "37") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor1" (formula "37") (term "0,0"))
                        (rule "add_literals" (formula "37") (term "1,0,0"))
                        (rule "times_zero_1" (formula "37") (term "0,0"))
                        (rule "add_zero_left" (formula "37") (term "0"))
                        (rule "applyEq" (formula "29") (term "1,1,1,0,0") (ifseqformula "39"))
                        (rule "polySimp_addAssoc" (formula "29") (term "1,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "29") (term "0,1,1,0,0"))
                        (rule "polySimp_addComm1" (formula "29") (term "0,0,1,1,0,0"))
                        (rule "add_literals" (formula "29") (term "0,0,0,1,1,0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "29") (term "0,1,1,0,0"))
                        (rule "add_literals" (formula "29") (term "1,1,0,1,1,0,0"))
                        (rule "times_zero_1" (formula "29") (term "1,0,1,1,0,0"))
                        (rule "add_zero_right" (formula "29") (term "0,1,1,0,0"))
                        (rule "applyEq" (formula "41") (term "1,1,1,0,0") (ifseqformula "39"))
                        (rule "polySimp_addAssoc" (formula "41") (term "1,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "41") (term "0,1,1,0,0"))
                        (rule "polySimp_addComm1" (formula "41") (term "0,0,1,1,0,0"))
                        (rule "add_literals" (formula "41") (term "0,0,0,1,1,0,0"))
                        (rule "add_zero_left" (formula "41") (term "0,0,1,1,0,0"))
                        (rule "polySimp_pullOutFactor2" (formula "41") (term "0,1,1,0,0"))
                        (rule "add_literals" (formula "41") (term "1,0,1,1,0,0"))
                        (rule "times_zero_1" (formula "41") (term "0,1,1,0,0"))
                        (rule "add_zero_left" (formula "41") (term "1,1,0,0"))
                        (rule "applyEq" (formula "13") (term "1,0,2,0") (ifseqformula "39"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,2,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,0,2,0"))
                        (rule "polySimp_addComm1" (formula "13") (term "0,0,0,2,0"))
                        (rule "add_literals" (formula "13") (term "0,0,0,0,2,0"))
                        (rule "add_zero_left" (formula "13") (term "0,0,0,2,0"))
                        (rule "polySimp_pullOutFactor2" (formula "13") (term "0,0,2,0"))
                        (rule "add_literals" (formula "13") (term "1,0,0,2,0"))
                        (rule "times_zero_1" (formula "13") (term "0,0,2,0"))
                        (rule "add_zero_left" (formula "13") (term "0,2,0"))
                        (rule "eqSymm" (formula "13"))
                        (rule "applyEq" (formula "1") (term "1,1") (ifseqformula "39"))
                        (rule "polySimp_addAssoc" (formula "1") (term "1"))
                        (rule "polySimp_addComm1" (formula "1") (term "0,1"))
                        (rule "polySimp_pullOutFactor3b" (formula "1") (term "1"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "1") (term "0,0,1"))
                        (rule "polySimp_pullOutFactor2b" (formula "1") (term "0,1"))
                        (rule "add_literals" (formula "1") (term "1,1,0,1"))
                        (rule "times_zero_1" (formula "1") (term "1,0,1"))
                        (rule "add_zero_right" (formula "1") (term "0,1"))
                        (rule "applyEq" (formula "10") (term "1,1") (ifseqformula "39"))
                        (rule "polySimp_addAssoc" (formula "10") (term "1"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "10") (term "0,0,1"))
                        (rule "polySimp_pullOutFactor2b" (formula "10") (term "0,1"))
                        (rule "add_literals" (formula "10") (term "1,1,0,1"))
                        (rule "times_zero_1" (formula "10") (term "1,0,1"))
                        (rule "add_zero_right" (formula "10") (term "0,1"))
                        (rule "applyEq" (formula "25") (term "1,1") (ifseqformula "39"))
                        (rule "polySimp_addAssoc" (formula "25") (term "1"))
                        (rule "polySimp_addAssoc" (formula "25") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "25") (term "0,0,1"))
                        (rule "polySimp_pullOutFactor2b" (formula "25") (term "0,1"))
                        (rule "add_literals" (formula "25") (term "1,1,0,1"))
                        (rule "times_zero_1" (formula "25") (term "1,0,1"))
                        (rule "add_zero_right" (formula "25") (term "0,1"))
                        (rule "applyEq" (formula "14") (term "1") (ifseqformula "39"))
                        (rule "applyEq" (formula "2") (term "1,1") (ifseqformula "39"))
                        (rule "polySimp_addAssoc" (formula "2") (term "1"))
                        (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "2") (term "0,0,1"))
                        (rule "polySimp_pullOutFactor2b" (formula "2") (term "0,1"))
                        (rule "add_literals" (formula "2") (term "1,1,0,1"))
                        (rule "times_zero_1" (formula "2") (term "1,0,1"))
                        (rule "add_zero_right" (formula "2") (term "0,1"))
                        (rule "applyEq" (formula "33") (term "1,1") (ifseqformula "39"))
                        (rule "polySimp_addAssoc" (formula "33") (term "1"))
                        (rule "polySimp_addComm1" (formula "33") (term "0,1"))
                        (rule "polySimp_pullOutFactor3b" (formula "33") (term "1"))
                        (rule "polySimp_addAssoc" (formula "33") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "33") (term "0,0,1"))
                        (rule "polySimp_pullOutFactor2b" (formula "33") (term "0,1"))
                        (rule "add_literals" (formula "33") (term "1,1,0,1"))
                        (rule "times_zero_1" (formula "33") (term "1,0,1"))
                        (rule "add_literals" (formula "33") (term "0,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "18"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "16"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                        (rule "polySimp_elimOne" (formula "16") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "8"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                        (rule "polySimp_elimOne" (formula "8") (term "0"))
                        (rule "replace_known_left" (formula "40") (term "0") (ifseqformula "8"))
                         (builtin "One Step Simplification" (formula "40"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                        (rule "polySimp_elimOne" (formula "9") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "19"))
                        (rule "polySimp_mulLiterals" (formula "19") (term "0"))
                        (rule "polySimp_elimOne" (formula "19") (term "0"))
                        (rule "inEqSimp_invertInEq0" (formula "35"))
                        (rule "mul_literals" (formula "35") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "35") (term "0"))
                        (rule "inEqSimp_invertInEq0" (formula "36"))
                        (rule "times_zero_2" (formula "36") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "36") (term "0"))
                        (rule "inEqSimp_strengthen1" (formula "19") (ifseqformula "48"))
                        (rule "inEqSimp_contradEq7" (formula "48") (ifseqformula "19"))
                        (rule "polySimp_mulComm0" (formula "48") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "48") (term "0,0"))
                        (rule "add_literals" (formula "48") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "48") (term "1,0,0"))
                        (rule "add_zero_right" (formula "48") (term "0,0"))
                        (rule "leq_literals" (formula "48") (term "0"))
                         (builtin "One Step Simplification" (formula "48"))
                        (rule "false_right" (formula "48"))
                        (rule "inEqSimp_subsumption1" (formula "33") (ifseqformula "8"))
                        (rule "leq_literals" (formula "33") (term "0"))
                         (builtin "One Step Simplification" (formula "33"))
                        (rule "true_left" (formula "33"))
                        (rule "inEqSimp_subsumption6" (formula "35") (ifseqformula "8"))
                        (rule "greater_literals" (formula "35") (term "0,0"))
                         (builtin "One Step Simplification" (formula "35"))
                        (rule "mul_literals" (formula "35") (term "1,0"))
                        (rule "leq_literals" (formula "35") (term "0"))
                         (builtin "One Step Simplification" (formula "35"))
                        (rule "true_left" (formula "35"))
                        (rule "inEqSimp_subsumption6" (formula "34") (ifseqformula "14"))
                        (rule "times_zero_1" (formula "34") (term "1,1,0"))
                        (rule "greater_literals" (formula "34") (term "0,0"))
                         (builtin "One Step Simplification" (formula "34"))
                        (rule "leq_literals" (formula "34") (term "0"))
                         (builtin "One Step Simplification" (formula "34"))
                        (rule "true_left" (formula "34"))
                        (rule "inEqSimp_exactShadow1" (formula "17") (ifseqformula "34"))
                        (rule "mul_literals" (formula "17") (term "1,0,1"))
                        (rule "greater_literals" (formula "17") (term "0"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "polySimp_mulComm0" (formula "17") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "17") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "17"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "0"))
                        (rule "polySimp_elimOne" (formula "17") (term "0"))
                        (rule "inEqSimp_subsumption0" (formula "17") (ifseqformula "19"))
                        (rule "leq_literals" (formula "17") (term "0"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "true_left" (formula "17"))
                        (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "33"))
                        (rule "polySimp_rightDist" (formula "19") (term "0,0"))
                        (rule "mul_literals" (formula "19") (term "0,0,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0"))
                        (rule "polySimp_addComm1" (formula "19") (term "0,0"))
                        (rule "add_literals" (formula "19") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "19") (term "0"))
                        (rule "add_literals" (formula "19") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "19") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "19"))
                        (rule "mul_literals" (formula "19") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "19") (ifseqformula "14"))
                        (rule "leq_literals" (formula "19") (term "0"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "true_left" (formula "19"))
                        (rule "inEqSimp_exactShadow1" (formula "17") (ifseqformula "33"))
                        (rule "greater_literals" (formula "17") (term "0"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "polySimp_mulComm0" (formula "17") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "17") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0"))
                        (rule "mul_literals" (formula "17") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "17") (term "0"))
                        (rule "polySimp_addComm0" (formula "17") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "17") (term "0"))
                        (rule "add_literals" (formula "17") (term "1,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "17"))
                        (rule "mul_literals" (formula "17") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "17") (ifseqformula "14"))
                        (rule "greater_literals" (formula "17") (term "0,0"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "times_zero_1" (formula "17") (term "1,0"))
                        (rule "leq_literals" (formula "17") (term "0"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "true_left" (formula "17"))
                        (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "34"))
                        (rule "polySimp_rightDist" (formula "19") (term "0,0"))
                        (rule "mul_literals" (formula "19") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "19") (term "0"))
                        (rule "add_literals" (formula "19") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "19"))
                        (rule "polySimp_mulLiterals" (formula "19") (term "0"))
                        (rule "polySimp_elimOne" (formula "19") (term "0"))
                        (rule "inEqSimp_subsumption0" (formula "18") (ifseqformula "19"))
                        (rule "leq_literals" (formula "18") (term "0"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "true_left" (formula "18"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "33"))
                        (rule "mul_literals" (formula "8") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0"))
                        (rule "add_literals" (formula "8") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                        (rule "mul_literals" (formula "8") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "8") (ifseqformula "15"))
                        (rule "times_zero_1" (formula "8") (term "1,1,0"))
                        (rule "greater_literals" (formula "8") (term "0,0"))
                         (builtin "One Step Simplification" (formula "8"))
                        (rule "leq_literals" (formula "8") (term "0"))
                         (builtin "One Step Simplification" (formula "8"))
                        (rule "true_left" (formula "8"))
                        (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "33"))
                        (rule "polySimp_mulAssoc" (formula "15") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "0,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0"))
                        (rule "polySimp_addComm0" (formula "15") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "15") (term "0"))
                        (rule "add_literals" (formula "15") (term "1,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                        (rule "mul_literals" (formula "15") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "15") (ifseqformula "14"))
                        (rule "greater_literals" (formula "15") (term "0,0"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "times_zero_1" (formula "15") (term "1,0"))
                        (rule "leq_literals" (formula "15") (term "0"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "true_left" (formula "15"))
                        (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "34"))
                        (rule "polySimp_mulAssoc" (formula "15") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "0,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "15") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                        (rule "mul_literals" (formula "15") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "14"))
                        (rule "leq_literals" (formula "15") (term "0"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "true_left" (formula "15"))
                        (rule "arrayLengthIsAShort" (formula "25") (term "0"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "true_left" (formula "25"))
                        (rule "arrayLengthNotNegative" (formula "25") (term "0"))
                        (rule "arrayLengthIsAShort" (formula "28") (term "0"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "true_left" (formula "28"))
                        (rule "cut_direct" (formula "20") (term "0"))
                        (branch "CUT: classify_sk_0 >= 1 TRUE"
                            (builtin "One Step Simplification" (formula "21"))
                           (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "20"))
                           (rule "leq_literals" (formula "14") (term "0"))
                            (builtin "One Step Simplification" (formula "14"))
                           (rule "true_left" (formula "14"))
                           (rule "all_pull_out3" (formula "30") (term "0"))
                           (rule "onlyCreatedObjectsAreReferencedFinal" (formula "10") (term "1") (ifseqformula "3") (ifseqformula "5"))
                           (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "42"))
                            (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "40")))
                           (rule "closeFalse" (formula "10"))
                        )
                        (branch "CUT: classify_sk_0 >= 1 FALSE"
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "inEqSimp_geqRight" (formula "38"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_subsumption0" (formula "19") (ifseqformula "1"))
                           (rule "leq_literals" (formula "19") (term "0"))
                            (builtin "One Step Simplification" (formula "19"))
                           (rule "true_left" (formula "19"))
                           (rule "inEqSimp_antiSymm" (formula "15") (ifseqformula "1"))
                           (rule "applyEq" (formula "16") (term "0") (ifseqformula "15"))
                           (rule "qeq_literals" (formula "16"))
                           (rule "true_left" (formula "16"))
                           (rule "applyEqRigid" (formula "33") (term "0,1,1") (ifseqformula "15"))
                           (rule "times_zero_2" (formula "33") (term "1,1"))
                           (rule "add_zero_right" (formula "33") (term "1"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "15"))
                           (rule "leq_literals" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "applyEqRigid" (formula "19") (term "0,2,0") (ifseqformula "14"))
                           (rule "applyEq" (formula "16") (term "1,1") (ifseqformula "14"))
                           (rule "add_zero_right" (formula "16") (term "1"))
                           (rule "applyEqRigid" (formula "17") (term "1") (ifseqformula "14"))
                           (rule "applyEqRigid" (formula "15") (term "0,1") (ifseqformula "14"))
                           (rule "times_zero_2" (formula "15") (term "1"))
                           (rule "applyEqRigid" (formula "18") (term "1,1") (ifseqformula "14"))
                           (rule "add_literals" (formula "18") (term "1"))
                           (rule "applyEqRigid" (formula "13") (term "1,0,1") (ifseqformula "14"))
                           (rule "add_zero_right" (formula "13") (term "0,1"))
                           (rule "applyEqRigid" (formula "32") (term "1,0,1") (ifseqformula "14"))
                           (rule "add_literals" (formula "32") (term "0,1"))
                           (rule "inEqSimp_subsumption6" (formula "16") (ifseqformula "8"))
                           (rule "greater_literals" (formula "16") (term "0,0"))
                            (builtin "One Step Simplification" (formula "16"))
                           (rule "mul_literals" (formula "16") (term "1,0"))
                           (rule "leq_literals" (formula "16") (term "0"))
                            (builtin "One Step Simplification" (formula "16"))
                           (rule "true_left" (formula "16"))
                           (rule "inEqSimp_subsumption6" (formula "16") (ifseqformula "8"))
                           (rule "mul_literals" (formula "16") (term "1,1,0"))
                           (rule "greater_literals" (formula "16") (term "0,0"))
                            (builtin "One Step Simplification" (formula "16"))
                           (rule "leq_literals" (formula "16") (term "0"))
                            (builtin "One Step Simplification" (formula "16"))
                           (rule "true_left" (formula "16"))
                           (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "8"))
                           (rule "leq_literals" (formula "15") (term "0"))
                            (builtin "One Step Simplification" (formula "15"))
                           (rule "true_left" (formula "15"))
                           (rule "all_pull_out3" (formula "24") (term "0"))
                           (rule "onlyCreatedObjectsAreReferencedFinal" (formula "10") (term "0,0") (ifseqformula "3") (ifseqformula "5"))
                           (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "37"))
                            (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "36")))
                           (rule "closeFalse" (formula "10"))
                        )
                     )
                  )
               )
               (branch "CUT: self.sorted_splitters[classify_sk_0] >= value FALSE"
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "notLeft" (formula "22"))
                  (rule "inEqSimp_geqRight" (formula "43"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "inEqSimp_geqRight" (formula "43"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                  (rule "mul_literals" (formula "2") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "mul_literals" (formula "1") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                  (rule "inEqSimp_antiSymm" (formula "22") (ifseqformula "1"))
                  (rule "applyEq" (formula "38") (term "0") (ifseqformula "22"))
                  (rule "inEqSimp_homoInEq1" (formula "38"))
                  (rule "polySimp_mulComm0" (formula "38") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "38") (term "1,0"))
                  (rule "mul_literals" (formula "38") (term "0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0"))
                  (rule "polySimp_addComm1" (formula "38") (term "0"))
                  (rule "polySimp_addAssoc" (formula "38") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "38") (term "0,0,0"))
                  (rule "add_literals" (formula "38") (term "0,0,0,0"))
                  (rule "add_zero_left" (formula "38") (term "0,0,0"))
                  (rule "polySimp_pullOutFactor0" (formula "38") (term "0,0"))
                  (rule "add_literals" (formula "38") (term "1,0,0"))
                  (rule "applyEq" (formula "18") (term "0") (ifseqformula "22"))
                  (rule "inEqSimp_homoInEq1" (formula "18"))
                  (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0"))
                  (rule "mul_literals" (formula "18") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "18") (term "0"))
                  (rule "add_literals" (formula "18") (term "0,0"))
                  (rule "add_zero_left" (formula "18") (term "0"))
                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "22"))
                  (rule "inEqSimp_homoInEq0" (formula "1"))
                  (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "1,0"))
                  (rule "times_zero_1" (formula "1") (term "0"))
                  (rule "qeq_literals" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "applyEq" (formula "30") (term "1,1,1,0,0") (ifseqformula "21"))
                  (rule "polySimp_addAssoc" (formula "30") (term "1,1,0,0"))
                  (rule "polySimp_addComm1" (formula "30") (term "0,1,1,0,0"))
                  (rule "add_literals" (formula "30") (term "0,0,1,1,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "30") (term "1,1,0,0"))
                  (rule "add_literals" (formula "30") (term "1,1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0"))
                  (rule "applyEq" (formula "9") (term "0") (ifseqformula "21"))
                  (rule "inEqSimp_homoInEq1" (formula "9"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "9") (term "1,0"))
                  (rule "mul_literals" (formula "9") (term "0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0"))
                  (rule "polySimp_addAssoc" (formula "9") (term "0"))
                  (rule "polySimp_addComm1" (formula "9") (term "0,0"))
                  (rule "add_literals" (formula "9") (term "0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
                  (rule "add_literals" (formula "9") (term "1,1,0"))
                  (rule "applyEq" (formula "27") (term "1,1") (ifseqformula "21"))
                  (rule "polySimp_addAssoc" (formula "27") (term "1"))
                  (rule "polySimp_addComm0" (formula "27") (term "0,1"))
                  (rule "polySimp_pullOutFactor0b" (formula "27") (term "1"))
                  (rule "add_literals" (formula "27") (term "1,1,1"))
                  (rule "polySimp_elimOne" (formula "27") (term "1,1"))
                  (rule "applyEq" (formula "31") (term "1,1,1,0,0") (ifseqformula "21"))
                  (rule "polySimp_addAssoc" (formula "31") (term "1,1,0,0"))
                  (rule "polySimp_addComm1" (formula "31") (term "0,1,1,0,0"))
                  (rule "add_literals" (formula "31") (term "0,0,1,1,0,0"))
                  (rule "add_zero_left" (formula "31") (term "0,1,1,0,0"))
                  (rule "polySimp_pullOutFactor0" (formula "31") (term "1,1,0,0"))
                  (rule "add_literals" (formula "31") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0"))
                  (rule "applyEq" (formula "43") (term "1,1,0,0,0,1,0") (ifseqformula "21"))
                  (rule "polySimp_addAssoc" (formula "43") (term "1,0,0,0,1,0"))
                  (rule "polySimp_addComm1" (formula "43") (term "0,1,0,0,0,1,0"))
                  (rule "add_literals" (formula "43") (term "0,0,1,0,0,0,1,0"))
                  (rule "add_zero_left" (formula "43") (term "0,1,0,0,0,1,0"))
                  (rule "polySimp_pullOutFactor0" (formula "43") (term "1,0,0,0,1,0"))
                  (rule "add_literals" (formula "43") (term "1,1,0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "43") (term "1,0,0,0,1,0"))
                  (rule "applyEq" (formula "40") (term "0") (ifseqformula "21"))
                  (rule "inEqSimp_homoInEq1" (formula "40"))
                  (rule "polySimp_mulComm0" (formula "40") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "40") (term "1,0"))
                  (rule "mul_literals" (formula "40") (term "0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0"))
                  (rule "polySimp_addComm1" (formula "40") (term "0"))
                  (rule "polySimp_addAssoc" (formula "40") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "40") (term "0,0,0"))
                  (rule "add_literals" (formula "40") (term "0,0,0,0"))
                  (rule "add_zero_left" (formula "40") (term "0,0,0"))
                  (rule "polySimp_pullOutFactor1" (formula "40") (term "0,0"))
                  (rule "add_literals" (formula "40") (term "1,0,0"))
                  (rule "applyEq" (formula "14") (term "1,0,2,0") (ifseqformula "21"))
                  (rule "eqSymm" (formula "14"))
                  (rule "polySimp_addAssoc" (formula "14") (term "0,2,1"))
                  (rule "polySimp_addComm1" (formula "14") (term "0,0,2,1"))
                  (rule "add_literals" (formula "14") (term "0,0,0,2,1"))
                  (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,2,1"))
                  (rule "add_literals" (formula "14") (term "1,1,0,2,1"))
                  (rule "polySimp_elimOne" (formula "14") (term "1,0,2,1"))
                  (rule "applyEq" (formula "10") (term "0") (ifseqformula "21"))
                  (rule "inEqSimp_homoInEq0" (formula "10"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "10") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0"))
                  (rule "mul_literals" (formula "10") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "10") (term "0"))
                  (rule "polySimp_addComm1" (formula "10") (term "0,0"))
                  (rule "add_literals" (formula "10") (term "0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                  (rule "add_literals" (formula "10") (term "1,1,0"))
                  (rule "applyEq" (formula "29") (term "1,1") (ifseqformula "21"))
                  (rule "polySimp_addAssoc" (formula "29") (term "1"))
                  (rule "polySimp_addComm0" (formula "29") (term "0,1"))
                  (rule "polySimp_pullOutFactor0b" (formula "29") (term "1"))
                  (rule "add_literals" (formula "29") (term "1,1,1"))
                  (rule "polySimp_elimOne" (formula "29") (term "1,1"))
                  (rule "applyEq" (formula "43") (term "1,1,1,0,0") (ifseqformula "21"))
                  (rule "polySimp_addAssoc" (formula "43") (term "1,1,0,0"))
                  (rule "polySimp_addComm1" (formula "43") (term "0,1,1,0,0"))
                  (rule "add_literals" (formula "43") (term "0,0,1,1,0,0"))
                  (rule "add_zero_left" (formula "43") (term "0,1,1,0,0"))
                  (rule "polySimp_pullOutFactor0" (formula "43") (term "1,1,0,0"))
                  (rule "add_literals" (formula "43") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "43") (term "1,1,0,0"))
                  (rule "applyEq" (formula "19") (term "0") (ifseqformula "21"))
                  (rule "inEqSimp_homoInEq1" (formula "19"))
                  (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "19") (term "1,0"))
                  (rule "mul_literals" (formula "19") (term "0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0"))
                  (rule "polySimp_addComm1" (formula "19") (term "0"))
                  (rule "polySimp_addAssoc" (formula "19") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "19") (term "0,0,0"))
                  (rule "add_literals" (formula "19") (term "0,0,0,0"))
                  (rule "add_zero_left" (formula "19") (term "0,0,0"))
                  (rule "polySimp_pullOutFactor0" (formula "19") (term "0,0"))
                  (rule "add_literals" (formula "19") (term "1,0,0"))
                  (rule "times_zero_1" (formula "19") (term "0,0"))
                  (rule "add_zero_left" (formula "19") (term "0"))
                  (rule "applyEq" (formula "38") (term "0") (ifseqformula "21"))
                  (rule "inEqSimp_homoInEq1" (formula "38"))
                  (rule "polySimp_mulComm0" (formula "38") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "38") (term "1,0"))
                  (rule "mul_literals" (formula "38") (term "0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0"))
                  (rule "polySimp_addComm1" (formula "38") (term "0"))
                  (rule "polySimp_addAssoc" (formula "38") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "38") (term "0,0,0"))
                  (rule "add_literals" (formula "38") (term "0,0,0,0"))
                  (rule "add_zero_left" (formula "38") (term "0,0,0"))
                  (rule "polySimp_pullOutFactor1" (formula "38") (term "0,0"))
                  (rule "add_literals" (formula "38") (term "1,0,0"))
                  (rule "applyEq" (formula "22") (term "0") (ifseqformula "21"))
                  (rule "inEqSimp_homoInEq1" (formula "22"))
                  (rule "polySimp_pullOutFactor1" (formula "22") (term "0"))
                  (rule "add_literals" (formula "22") (term "1,0"))
                  (rule "times_zero_1" (formula "22") (term "0"))
                  (rule "leq_literals" (formula "22"))
                  (rule "true_left" (formula "22"))
                  (rule "applyEq" (formula "30") (term "1,1,0,0,0,1,0") (ifseqformula "21"))
                  (rule "polySimp_addAssoc" (formula "30") (term "1,0,0,0,1,0"))
                  (rule "polySimp_addComm1" (formula "30") (term "0,1,0,0,0,1,0"))
                  (rule "add_literals" (formula "30") (term "0,0,1,0,0,0,1,0"))
                  (rule "add_zero_left" (formula "30") (term "0,1,0,0,0,1,0"))
                  (rule "polySimp_pullOutFactor0" (formula "30") (term "1,0,0,0,1,0"))
                  (rule "add_literals" (formula "30") (term "1,1,0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "30") (term "1,0,0,0,1,0"))
                  (rule "applyEq" (formula "13") (term "1,1,0,0,0,1,0") (ifseqformula "21"))
                  (rule "polySimp_addAssoc" (formula "13") (term "1,0,0,0,1,0"))
                  (rule "polySimp_addComm0" (formula "13") (term "0,1,0,0,0,1,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "13") (term "1,0,0,0,1,0"))
                  (rule "add_literals" (formula "13") (term "1,1,1,0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,1,0"))
                  (rule "applyEq" (formula "41") (term "0,0") (ifseqformula "21"))
                  (rule "inEqSimp_homoInEq1" (formula "41") (term "0"))
                  (rule "polySimp_mulComm0" (formula "41") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "41") (term "1,0,0"))
                  (rule "mul_literals" (formula "41") (term "0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,0"))
                  (rule "polySimp_addComm1" (formula "41") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "41") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "41") (term "0,0,0,0"))
                  (rule "add_literals" (formula "41") (term "0,0,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "41") (term "0,0,0"))
                  (rule "add_literals" (formula "41") (term "1,1,0,0,0"))
                  (rule "applyEq" (formula "13") (term "1,1,1,0,0") (ifseqformula "21"))
                  (rule "polySimp_addAssoc" (formula "13") (term "1,1,0,0"))
                  (rule "polySimp_addComm0" (formula "13") (term "0,1,1,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "13") (term "1,1,0,0"))
                  (rule "add_literals" (formula "13") (term "1,1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
                  (rule "applyEq" (formula "14") (term "1,0,2,0") (ifseqformula "21"))
                  (rule "polySimp_addAssoc" (formula "14") (term "0,2,0"))
                  (rule "polySimp_addComm1" (formula "14") (term "0,0,2,0"))
                  (rule "add_literals" (formula "14") (term "0,0,0,2,0"))
                  (rule "add_zero_left" (formula "14") (term "0,0,2,0"))
                  (rule "polySimp_pullOutFactor0" (formula "14") (term "0,2,0"))
                  (rule "add_literals" (formula "14") (term "1,0,2,0"))
                  (rule "polySimp_elimOne" (formula "14") (term "0,2,0"))
                  (rule "eqSymm" (formula "14"))
                  (rule "applyEq" (formula "11") (term "1,1") (ifseqformula "21"))
                  (rule "polySimp_addAssoc" (formula "11") (term "1"))
                  (rule "polySimp_addComm0" (formula "11") (term "0,1"))
                  (rule "polySimp_pullOutFactor0b" (formula "11") (term "1"))
                  (rule "add_literals" (formula "11") (term "1,1,1"))
                  (rule "polySimp_elimOne" (formula "11") (term "1,1"))
                  (rule "applyEq" (formula "2") (term "1,1") (ifseqformula "21"))
                  (rule "polySimp_addComm1" (formula "2") (term "1"))
                  (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
                  (rule "polySimp_addComm0" (formula "2") (term "0,0,1"))
                  (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,1"))
                  (rule "add_literals" (formula "2") (term "1,1,0,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,0,1"))
                  (rule "applyEq" (formula "33") (term "1,1") (ifseqformula "21"))
                  (rule "polySimp_addComm1" (formula "33") (term "1"))
                  (rule "polySimp_addAssoc" (formula "33") (term "0,1"))
                  (rule "polySimp_addComm0" (formula "33") (term "0,0,1"))
                  (rule "polySimp_pullOutFactor0b" (formula "33") (term "0,1"))
                  (rule "add_literals" (formula "33") (term "1,1,0,1"))
                  (rule "polySimp_elimOne" (formula "33") (term "1,0,1"))
                  (rule "applyEq" (formula "15") (term "1") (ifseqformula "21"))
                  (rule "applyEq" (formula "25") (term "1,1") (ifseqformula "21"))
                  (rule "polySimp_addAssoc" (formula "25") (term "1"))
                  (rule "polySimp_addComm0" (formula "25") (term "0,1"))
                  (rule "polySimp_pullOutFactor0b" (formula "25") (term "1"))
                  (rule "add_literals" (formula "25") (term "1,1,1"))
                  (rule "polySimp_elimOne" (formula "25") (term "1,1"))
                  (rule "applyEq" (formula "3") (term "1,1") (ifseqformula "21"))
                  (rule "polySimp_addAssoc" (formula "3") (term "1"))
                  (rule "polySimp_addComm0" (formula "3") (term "0,1"))
                  (rule "polySimp_pullOutFactor0b" (formula "3") (term "1"))
                  (rule "add_literals" (formula "3") (term "1,1,1"))
                  (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                  (rule "applyEq" (formula "22") (term "0,1") (ifseqformula "14"))
                  (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "true_left" (formula "22"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "35"))
                  (rule "polySimp_mulLiterals" (formula "35") (term "1"))
                  (rule "inEqSimp_invertInEq0" (formula "17"))
                  (rule "mul_literals" (formula "17") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "9"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                  (rule "polySimp_elimOne" (formula "9") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "38"))
                  (rule "polySimp_mulLiterals" (formula "38") (term "1"))
                  (rule "polySimp_elimOne" (formula "38") (term "1"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                  (rule "polySimp_elimOne" (formula "10") (term "0"))
                  (rule "inEqSimp_invertInEq0" (formula "18"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "0"))
                  (rule "times_zero_2" (formula "18") (term "1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "35"))
                  (rule "polySimp_mulLiterals" (formula "35") (term "0"))
                  (rule "polySimp_elimOne" (formula "35") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "0"))
                  (rule "polySimp_mulComm0" (formula "39") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "39") (term "1,0"))
                  (rule "mul_literals" (formula "39") (term "0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0"))
                  (rule "polySimp_elimOne" (formula "39") (term "1,1,0"))
                  (rule "inEqSimp_strengthen0" (formula "37") (ifseqformula "48"))
                  (rule "replace_known_left" (formula "39") (term "0") (ifseqformula "37"))
                   (builtin "One Step Simplification" (formula "39"))
                  (rule "inEqSimp_contradEq3" (formula "48") (ifseqformula "37"))
                  (rule "polySimp_mulComm0" (formula "48") (term "1,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "48") (term "0,0"))
                  (rule "add_literals" (formula "48") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "48") (term "1,0,0"))
                  (rule "add_zero_right" (formula "48") (term "0,0"))
                  (rule "qeq_literals" (formula "48") (term "0"))
                   (builtin "One Step Simplification" (formula "48"))
                  (rule "false_right" (formula "48"))
                  (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "9"))
                  (rule "leq_literals" (formula "15") (term "0"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "true_left" (formula "15"))
                  (rule "inEqSimp_subsumption6" (formula "15") (ifseqformula "9"))
                  (rule "greater_literals" (formula "15") (term "0,0"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "mul_literals" (formula "15") (term "1,0"))
                  (rule "leq_literals" (formula "15") (term "0"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "true_left" (formula "15"))
                  (rule "inEqSimp_subsumption6" (formula "16") (ifseqformula "30"))
                  (rule "times_zero_1" (formula "16") (term "1,1,0"))
                  (rule "greater_literals" (formula "16") (term "0,0"))
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "leq_literals" (formula "16") (term "0"))
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "true_left" (formula "16"))
                  (rule "inEqSimp_exactShadow3" (formula "32") (ifseqformula "30"))
                  (rule "polySimp_mulAssoc" (formula "32") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "32") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "32") (term "0,0"))
                  (rule "polySimp_elimOne" (formula "32") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "32") (term "0"))
                  (rule "polySimp_addComm0" (formula "32") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "32") (term "0"))
                  (rule "add_literals" (formula "32") (term "1,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "32"))
                  (rule "mul_literals" (formula "32") (term "1"))
                  (rule "inEqSimp_subsumption6" (formula "32") (ifseqformula "9"))
                  (rule "greater_literals" (formula "32") (term "0,0"))
                   (builtin "One Step Simplification" (formula "32"))
                  (rule "mul_literals" (formula "32") (term "1,0"))
                  (rule "leq_literals" (formula "32") (term "0"))
                   (builtin "One Step Simplification" (formula "32"))
                  (rule "true_left" (formula "32"))
                  (rule "inEqSimp_exactShadow3" (formula "32") (ifseqformula "34"))
                  (rule "polySimp_mulAssoc" (formula "32") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "32") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "32") (term "0,0"))
                  (rule "polySimp_elimOne" (formula "32") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "32") (term "0"))
                  (rule "polySimp_addComm0" (formula "32") (term "0,0"))
                  (rule "polySimp_pullOutFactor3b" (formula "32") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "32"))
                  (rule "mul_literals" (formula "32") (term "1"))
                  (rule "inEqSimp_subsumption6" (formula "32") (ifseqformula "9"))
                  (rule "mul_literals" (formula "32") (term "1,1,0"))
                  (rule "greater_literals" (formula "32") (term "0,0"))
                   (builtin "One Step Simplification" (formula "32"))
                  (rule "leq_literals" (formula "32") (term "0"))
                   (builtin "One Step Simplification" (formula "32"))
                  (rule "true_left" (formula "32"))
                  (rule "inEqSimp_exactShadow3" (formula "32") (ifseqformula "33"))
                  (rule "polySimp_mulAssoc" (formula "32") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "32") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "32") (term "0,0"))
                  (rule "polySimp_elimOne" (formula "32") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "32") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "32"))
                  (rule "mul_literals" (formula "32") (term "1"))
                  (rule "inEqSimp_subsumption1" (formula "32") (ifseqformula "9"))
                  (rule "leq_literals" (formula "32") (term "0"))
                   (builtin "One Step Simplification" (formula "32"))
                  (rule "true_left" (formula "32"))
                  (rule "inEqSimp_exactShadow3" (formula "29") (ifseqformula "31"))
                  (rule "times_zero_1" (formula "29") (term "0,0"))
                  (rule "add_zero_left" (formula "29") (term "0"))
                  (rule "inEqSimp_subsumption6" (formula "29") (ifseqformula "9"))
                  (rule "mul_literals" (formula "29") (term "1,1,0"))
                  (rule "greater_literals" (formula "29") (term "0,0"))
                   (builtin "One Step Simplification" (formula "29"))
                  (rule "leq_literals" (formula "29") (term "0"))
                   (builtin "One Step Simplification" (formula "29"))
                  (rule "true_left" (formula "29"))
                  (rule "inEqSimp_exactShadow1" (formula "15") (ifseqformula "34"))
                  (rule "greater_literals" (formula "15") (term "0"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                  (rule "mul_literals" (formula "15") (term "0,1,0"))
                  (rule "polySimp_rightDist" (formula "15") (term "0,0"))
                  (rule "mul_literals" (formula "15") (term "0,0,0"))
                  (rule "polySimp_addAssoc" (formula "15") (term "0"))
                  (rule "polySimp_addComm1" (formula "15") (term "0,0"))
                  (rule "add_literals" (formula "15") (term "0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "15") (term "0"))
                  (rule "add_literals" (formula "15") (term "1,1,0"))
                  (rule "polySimp_elimOne" (formula "15") (term "1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                  (rule "mul_literals" (formula "15") (term "1"))
                  (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "9"))
                  (rule "leq_literals" (formula "15") (term "0"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "true_left" (formula "15"))
                  (rule "inEqSimp_exactShadow3" (formula "29") (ifseqformula "34"))
                  (rule "times_zero_1" (formula "29") (term "0,0"))
                  (rule "add_zero_left" (formula "29") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "29"))
                  (rule "mul_literals" (formula "29") (term "1"))
                  (rule "inEqSimp_exactShadow3" (formula "32") (ifseqformula "31"))
                  (rule "polySimp_mulAssoc" (formula "32") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "32") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "32") (term "0,0"))
                  (rule "polySimp_pullOutFactor0" (formula "32") (term "0"))
                  (rule "add_literals" (formula "32") (term "1,0"))
                  (rule "inEqSimp_subsumption6" (formula "32") (ifseqformula "9"))
                  (rule "mul_literals" (formula "32") (term "1,1,0"))
                  (rule "greater_literals" (formula "32") (term "0,0"))
                   (builtin "One Step Simplification" (formula "32"))
                  (rule "leq_literals" (formula "32") (term "0"))
                   (builtin "One Step Simplification" (formula "32"))
                  (rule "true_left" (formula "32"))
                  (rule "inEqSimp_exactShadow1" (formula "15") (ifseqformula "31"))
                  (rule "greater_literals" (formula "15") (term "0"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "15") (term "0,0"))
                  (rule "mul_literals" (formula "15") (term "0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "15") (term "0"))
                  (rule "add_literals" (formula "15") (term "1,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                  (rule "mul_literals" (formula "15") (term "1"))
                  (rule "inEqSimp_subsumption6" (formula "15") (ifseqformula "9"))
                  (rule "greater_literals" (formula "15") (term "0,0"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "mul_literals" (formula "15") (term "1,0"))
                  (rule "leq_literals" (formula "15") (term "0"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "true_left" (formula "15"))
                  (rule "cut_direct" (formula "42") (term "1"))
                  (branch "CUT: self.tree.<created> = TRUE TRUE"
                      (builtin "One Step Simplification" (formula "43"))
                     (rule "cut_direct" (formula "36") (term "0"))
                     (branch "CUT: classify_sk_1 >= 1 TRUE"
                         (builtin "One Step Simplification" (formula "37"))
                        (rule "inEqSimp_subsumption1" (formula "30") (ifseqformula "36"))
                        (rule "leq_literals" (formula "30") (term "0"))
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "true_left" (formula "30"))
                        (rule "inEqSimp_exactShadow3" (formula "35") (ifseqformula "30"))
                        (rule "mul_literals" (formula "35") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "35") (term "0"))
                        (rule "add_literals" (formula "35") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "35"))
                        (rule "mul_literals" (formula "35") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "35") (ifseqformula "10"))
                        (rule "greater_literals" (formula "35") (term "0,0"))
                         (builtin "One Step Simplification" (formula "35"))
                        (rule "mul_literals" (formula "35") (term "1,0"))
                        (rule "leq_literals" (formula "35") (term "0"))
                         (builtin "One Step Simplification" (formula "35"))
                        (rule "true_left" (formula "35"))
                        (rule "inEqSimp_exactShadow3" (formula "35") (ifseqformula "31"))
                        (rule "mul_literals" (formula "35") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "35"))
                        (rule "mul_literals" (formula "35") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "35") (ifseqformula "10"))
                        (rule "greater_literals" (formula "35") (term "0,0"))
                         (builtin "One Step Simplification" (formula "35"))
                        (rule "mul_literals" (formula "35") (term "1,0"))
                        (rule "leq_literals" (formula "35") (term "0"))
                         (builtin "One Step Simplification" (formula "35"))
                        (rule "true_left" (formula "35"))
                        (rule "inEqSimp_exactShadow3" (formula "35") (ifseqformula "34"))
                        (rule "mul_literals" (formula "35") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "35") (term "0"))
                        (rule "add_literals" (formula "35") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "35"))
                        (rule "mul_literals" (formula "35") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "35"))
                        (rule "leq_literals" (formula "10") (term "0"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "true_left" (formula "10"))
                        (rule "arrayLengthIsAShort" (formula "21") (term "0"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "true_left" (formula "21"))
                        (rule "arrayLengthIsAShort" (formula "23") (term "0"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "true_left" (formula "23"))
                        (rule "arrayLengthNotNegative" (formula "21") (term "0"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "19") (term "0,0") (ifseqformula "5") (ifseqformula "7"))
                        (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "44"))
                         (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "1")))
                        (rule "true_left" (formula "19"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "11") (term "1") (ifseqformula "5") (ifseqformula "7"))
                        (rule "replace_known_right" (formula "11") (term "1") (ifseqformula "41"))
                         (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "43")))
                        (rule "closeFalse" (formula "11"))
                     )
                     (branch "CUT: classify_sk_1 >= 1 FALSE"
                         (builtin "One Step Simplification" (formula "36"))
                        (rule "true_left" (formula "36"))
                        (rule "inEqSimp_geqRight" (formula "38"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_subsumption0" (formula "35") (ifseqformula "1"))
                        (rule "leq_literals" (formula "35") (term "0"))
                         (builtin "One Step Simplification" (formula "35"))
                        (rule "true_left" (formula "35"))
                        (rule "inEqSimp_antiSymm" (formula "31") (ifseqformula "1"))
                        (rule "applyEq" (formula "1") (term "0") (ifseqformula "31"))
                        (rule "leq_literals" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "applyEq" (formula "36") (term "0,2,0") (ifseqformula "30"))
                        (rule "applyEqRigid" (formula "35") (term "0") (ifseqformula "30"))
                        (rule "inEqSimp_homoInEq0" (formula "35"))
                        (rule "mul_literals" (formula "35") (term "1,0"))
                        (rule "add_zero_right" (formula "35") (term "0"))
                        (rule "applyEq" (formula "34") (term "0") (ifseqformula "30"))
                        (rule "inEqSimp_commuteGeq" (formula "34"))
                        (rule "applyEq" (formula "33") (term "0") (ifseqformula "30"))
                        (rule "inEqSimp_commuteLeq" (formula "33"))
                        (rule "applyEqRigid" (formula "31") (term "0") (ifseqformula "30"))
                        (rule "qeq_literals" (formula "31"))
                        (rule "true_left" (formula "31"))
                        (rule "applyEq" (formula "31") (term "0") (ifseqformula "30"))
                        (rule "inEqSimp_homoInEq0" (formula "31"))
                        (rule "times_zero_2" (formula "31") (term "1,0"))
                        (rule "add_zero_right" (formula "31") (term "0"))
                        (rule "applyEqRigid" (formula "16") (term "0,0") (ifseqformula "30"))
                        (rule "times_zero_2" (formula "16") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "16"))
                        (rule "times_zero_2" (formula "16") (term "1,0"))
                        (rule "add_zero_right" (formula "16") (term "0"))
                        (rule "applyEqRigid" (formula "3") (term "1,1") (ifseqformula "30"))
                        (rule "add_zero_right" (formula "3") (term "1"))
                        (rule "applyEq" (formula "29") (term "1,1") (ifseqformula "30"))
                        (rule "add_zero_right" (formula "29") (term "1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "34"))
                        (rule "mul_literals" (formula "34") (term "1"))
                        (rule "inEqSimp_invertInEq0" (formula "33"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "0"))
                        (rule "times_zero_2" (formula "33") (term "1"))
                        (rule "polySimp_elimOne" (formula "33") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "31"))
                        (rule "mul_literals" (formula "31") (term "1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "16"))
                        (rule "mul_literals" (formula "16") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "31") (ifseqformula "32"))
                        (rule "times_zero_1" (formula "31") (term "1,1,0"))
                        (rule "greater_literals" (formula "31") (term "0,0"))
                         (builtin "One Step Simplification" (formula "31"))
                        (rule "leq_literals" (formula "31") (term "0"))
                         (builtin "One Step Simplification" (formula "31"))
                        (rule "true_left" (formula "31"))
                        (rule "inEqSimp_subsumption6" (formula "30") (ifseqformula "10"))
                        (rule "mul_literals" (formula "30") (term "1,1,0"))
                        (rule "greater_literals" (formula "30") (term "0,0"))
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "leq_literals" (formula "30") (term "0"))
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "true_left" (formula "30"))
                        (rule "inEqSimp_subsumption1" (formula "30") (ifseqformula "10"))
                        (rule "leq_literals" (formula "30") (term "0"))
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "true_left" (formula "30"))
                        (rule "arrayLengthIsAShort" (formula "21") (term "0"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "true_left" (formula "21"))
                        (rule "arrayLengthIsAShort" (formula "23") (term "0"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "true_left" (formula "23"))
                        (rule "arrayLengthNotNegative" (formula "21") (term "0"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "29") (term "0,0,1,1,0,0") (ifseqformula "5") (ifseqformula "7"))
                        (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "36"))
                         (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "34")))
                        (rule "closeFalse" (formula "29"))
                     )
                  )
                  (branch "CUT: self.tree.<created> = TRUE FALSE"
                      (builtin "One Step Simplification" (formula "43"))
                     (rule "false_right" (formula "43"))
                     (rule "cut_direct" (formula "35") (term "0"))
                     (branch "CUT: classify_sk_1 >= 1 TRUE"
                         (builtin "One Step Simplification" (formula "36"))
                        (rule "inEqSimp_subsumption1" (formula "29") (ifseqformula "35"))
                        (rule "leq_literals" (formula "29") (term "0"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "true_left" (formula "29"))
                        (rule "inEqSimp_exactShadow3" (formula "34") (ifseqformula "30"))
                        (rule "mul_literals" (formula "34") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "34"))
                        (rule "mul_literals" (formula "34") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "34") (ifseqformula "9"))
                        (rule "greater_literals" (formula "34") (term "0,0"))
                         (builtin "One Step Simplification" (formula "34"))
                        (rule "mul_literals" (formula "34") (term "1,0"))
                        (rule "leq_literals" (formula "34") (term "0"))
                         (builtin "One Step Simplification" (formula "34"))
                        (rule "true_left" (formula "34"))
                        (rule "inEqSimp_exactShadow3" (formula "34") (ifseqformula "29"))
                        (rule "mul_literals" (formula "34") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "34") (term "0"))
                        (rule "add_literals" (formula "34") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "34"))
                        (rule "mul_literals" (formula "34") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "34") (ifseqformula "9"))
                        (rule "mul_literals" (formula "34") (term "1,1,0"))
                        (rule "greater_literals" (formula "34") (term "0,0"))
                         (builtin "One Step Simplification" (formula "34"))
                        (rule "leq_literals" (formula "34") (term "0"))
                         (builtin "One Step Simplification" (formula "34"))
                        (rule "true_left" (formula "34"))
                        (rule "inEqSimp_exactShadow3" (formula "34") (ifseqformula "33"))
                        (rule "mul_literals" (formula "34") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "34") (term "0"))
                        (rule "add_literals" (formula "34") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "34"))
                        (rule "mul_literals" (formula "34") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "34"))
                        (rule "leq_literals" (formula "9") (term "0"))
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "true_left" (formula "9"))
                        (rule "arrayLengthIsAShort" (formula "20") (term "0"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "true_left" (formula "20"))
                        (rule "arrayLengthNotNegative" (formula "20") (term "0"))
                        (rule "arrayLengthIsAShort" (formula "23") (term "0"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "true_left" (formula "23"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "18") (term "0,0") (ifseqformula "4") (ifseqformula "6"))
                        (rule "replace_known_right" (formula "18") (term "1") (ifseqformula "44"))
                         (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "43")))
                        (rule "closeFalse" (formula "18"))
                     )
                     (branch "CUT: classify_sk_1 >= 1 FALSE"
                         (builtin "One Step Simplification" (formula "35"))
                        (rule "true_left" (formula "35"))
                        (rule "inEqSimp_geqRight" (formula "37"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_subsumption0" (formula "34") (ifseqformula "1"))
                        (rule "leq_literals" (formula "34") (term "0"))
                         (builtin "One Step Simplification" (formula "34"))
                        (rule "true_left" (formula "34"))
                        (rule "inEqSimp_antiSymm" (formula "30") (ifseqformula "1"))
                        (rule "applyEqRigid" (formula "36") (term "0,2,0") (ifseqformula "30"))
                        (rule "applyEq" (formula "31") (term "0") (ifseqformula "30"))
                        (rule "qeq_literals" (formula "31"))
                        (rule "true_left" (formula "31"))
                        (rule "applyEqRigid" (formula "34") (term "0") (ifseqformula "30"))
                        (rule "inEqSimp_homoInEq0" (formula "34"))
                        (rule "times_zero_2" (formula "34") (term "1,0"))
                        (rule "add_zero_right" (formula "34") (term "0"))
                        (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "30"))
                        (rule "leq_literals" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "applyEqRigid" (formula "30") (term "0") (ifseqformula "29"))
                        (rule "inEqSimp_homoInEq0" (formula "30"))
                        (rule "times_zero_2" (formula "30") (term "1,0"))
                        (rule "add_zero_right" (formula "30") (term "0"))
                        (rule "applyEqRigid" (formula "31") (term "0") (ifseqformula "29"))
                        (rule "inEqSimp_commuteLeq" (formula "31"))
                        (rule "applyEqRigid" (formula "32") (term "0") (ifseqformula "29"))
                        (rule "inEqSimp_commuteGeq" (formula "32"))
                        (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "29"))
                        (rule "mul_literals" (formula "15") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "15"))
                        (rule "times_zero_2" (formula "15") (term "1,0"))
                        (rule "add_zero_right" (formula "15") (term "0"))
                        (rule "applyEqRigid" (formula "2") (term "1,1") (ifseqformula "29"))
                        (rule "add_zero_right" (formula "2") (term "1"))
                        (rule "applyEqRigid" (formula "28") (term "1,1") (ifseqformula "29"))
                        (rule "add_zero_right" (formula "28") (term "1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "33"))
                        (rule "mul_literals" (formula "33") (term "1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "30"))
                        (rule "mul_literals" (formula "30") (term "1"))
                        (rule "inEqSimp_invertInEq0" (formula "32"))
                        (rule "times_zero_2" (formula "32") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "0"))
                        (rule "polySimp_elimOne" (formula "32") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "15"))
                        (rule "mul_literals" (formula "15") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "29") (ifseqformula "9"))
                        (rule "mul_literals" (formula "29") (term "1,1,0"))
                        (rule "greater_literals" (formula "29") (term "0,0"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "leq_literals" (formula "29") (term "0"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "true_left" (formula "29"))
                        (rule "inEqSimp_subsumption6" (formula "29") (ifseqformula "30"))
                        (rule "times_zero_1" (formula "29") (term "1,1,0"))
                        (rule "greater_literals" (formula "29") (term "0,0"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "leq_literals" (formula "29") (term "0"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "true_left" (formula "29"))
                        (rule "inEqSimp_subsumption1" (formula "29") (ifseqformula "9"))
                        (rule "leq_literals" (formula "29") (term "0"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "true_left" (formula "29"))
                        (rule "arrayLengthIsAShort" (formula "20") (term "0"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "true_left" (formula "20"))
                        (rule "arrayLengthNotNegative" (formula "20") (term "0"))
                        (rule "arrayLengthIsAShort" (formula "23") (term "0"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "true_left" (formula "23"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "18") (term "0,0") (ifseqformula "4") (ifseqformula "6"))
                        (rule "replace_known_right" (formula "18") (term "1") (ifseqformula "37"))
                         (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "36")))
                        (rule "closeFalse" (formula "18"))
                     )
                  )
               )
            )
         )
      )
      (branch "Exceptional Post (classify)"
          (builtin "One Step Simplification" (formula "14"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "translateJavaSubInt" (formula "14") (term "3,0,0,1,0,1"))
         (rule "translateJavaMulInt" (formula "14") (term "1,1,0,0,1"))
         (rule "andLeft" (formula "14"))
         (rule "andLeft" (formula "14"))
         (rule "andLeft" (formula "16"))
         (rule "notLeft" (formula "14"))
         (rule "close" (formula "17") (ifseqformula "16"))
      )
      (branch "Pre (classify)"
          (builtin "One Step Simplification" (formula "14") (userinteraction))
          (builtin "Use Dependency Contract" (formula "14") (term "0") (ifInst ""  (formula "12")) (contract "de.wiesler.Tree[java.lang.Object::<inv>()].JML accessible clause.0") (userinteraction))
         (rule "impLeft" (formula "14") (userinteraction))
         (branch "Case 1"
            (rule "wellFormedAnon" (formula "15") (term "0,1"))
            (rule "wellFormedAnon" (formula "14") (term "1,1,0,0"))
            (rule "replace_known_left" (formula "15") (term "0,0,1") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "3")))
            (rule "replace_known_left" (formula "14") (term "0,1,0,0") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "2")) (ifInst ""  (formula "3")) (ifInst ""  (formula "12")))
            (rule "polySimp_homoEq" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0"))
            (rule "disjointDefinition" (formula "14") (term "1"))
            (rule "inEqSimp_ltToLeq" (formula "10"))
            (rule "polySimp_mulAssoc" (formula "10") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "10") (term "0"))
            (rule "polySimp_sepPosMonomial" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1"))
            (rule "polySimp_rightDist" (formula "1") (term "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "10"))
            (rule "polySimp_mulLiterals" (formula "10") (term "0"))
            (rule "distributeIntersection" (formula "14") (term "0,1"))
            (rule "unionEqualsEmpty" (formula "14") (term "1"))
            (rule "inEqSimp_exactShadow1" (formula "10") (ifseqformula "9"))
            (rule "greater_literals" (formula "10") (term "0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
            (rule "polySimp_rightDist" (formula "10") (term "0,0"))
            (rule "mul_literals" (formula "10") (term "0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "10") (term "0"))
            (rule "add_literals" (formula "10") (term "1,1,0"))
            (rule "polySimp_elimOne" (formula "10") (term "1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "10"))
            (rule "mul_literals" (formula "10") (term "1"))
            (rule "commuteIntersection" (formula "15") (term "0,0,1"))
            (rule "commuteIntersection" (formula "15") (term "0,1,1"))
            (rule "Contract_axiom_for_isClassifiedAs_in_Tree" (formula "12") (term "0"))
            (rule "replace_known_left" (formula "12") (term "1,0,0,0,0") (ifseqformula "14"))
             (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "2")) (ifInst ""  (formula "14")))
            (rule "true_left" (formula "12"))
            (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "13"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "translateJavaSubInt" (formula "13") (term "3,0,1"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "15"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "15"))
            (rule "notLeft" (formula "13"))
            (rule "notLeft" (formula "13"))
            (rule "polySimp_elimSub" (formula "19") (term "3,0"))
            (rule "mul_literals" (formula "19") (term "1,3,0"))
            (rule "polySimp_addComm0" (formula "19") (term "3,0"))
            (rule "inEqSimp_commuteLeq" (formula "18"))
            (rule "inEqSimp_commuteLeq" (formula "17"))
            (rule "inEqSimp_commuteLeq" (formula "16"))
            (rule "inEqSimp_commuteLeq" (formula "13"))
            (rule "applyEq" (formula "19") (term "1,3,0") (ifseqformula "15"))
            (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "15"))
            (rule "applyEq" (formula "18") (term "1") (ifseqformula "15"))
            (rule "applyEq" (formula "16") (term "0") (ifseqformula "15"))
            (rule "applyEq" (formula "17") (term "1") (ifseqformula "15"))
            (rule "applyEq" (formula "12") (term "0,1,3,0") (ifseqformula "15"))
            (rule "applyEq" (formula "9") (term "0") (ifseqformula "15"))
            (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "9"))
            (rule "mul_literals" (formula "16") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "16"))
            (rule "mul_literals" (formula "16") (term "1"))
            (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "16"))
            (rule "leq_literals" (formula "10") (term "0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "true_left" (formula "10"))
            (rule "inEqSimp_exactShadow1" (formula "10") (ifseqformula "9"))
            (rule "greater_literals" (formula "10") (term "0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
            (rule "polySimp_rightDist" (formula "10") (term "0,0"))
            (rule "mul_literals" (formula "10") (term "0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "10") (term "0"))
            (rule "add_literals" (formula "10") (term "1,1,0"))
            (rule "polySimp_elimOne" (formula "10") (term "1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "10"))
            (rule "mul_literals" (formula "10") (term "1"))
            (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "16"))
            (rule "leq_literals" (formula "10") (term "0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "true_left" (formula "10"))
            (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "7"))
             (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "25")))
            (rule "translateJavaSubInt" (formula "7") (term "0,2,0,1,0"))
            (rule "translateJavaSubInt" (formula "7") (term "0,2,1,1,0"))
            (rule "andLeft" (formula "7"))
            (rule "andLeft" (formula "7"))
            (rule "andLeft" (formula "7"))
            (rule "andLeft" (formula "7"))
            (rule "andLeft" (formula "7"))
            (rule "andLeft" (formula "7"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "7"))
            (rule "notLeft" (formula "8"))
            (rule "notLeft" (formula "7"))
            (rule "eqSymm" (formula "12"))
            (rule "eqSymm" (formula "9"))
            (rule "replace_known_right" (formula "31") (term "0,0,0") (ifseqformula "27"))
             (builtin "One Step Simplification" (formula "31"))
            (rule "polySimp_elimSub" (formula "12") (term "0,2,1"))
            (rule "mul_literals" (formula "12") (term "1,0,2,1"))
            (rule "polySimp_elimSub" (formula "12") (term "0,2,0"))
            (rule "mul_literals" (formula "12") (term "1,0,2,0"))
            (rule "polySimp_addComm0" (formula "12") (term "0,2,1"))
            (rule "polySimp_addComm0" (formula "12") (term "0,2,0"))
            (rule "inEqSimp_commuteLeq" (formula "7"))
            (rule "applyEq" (formula "11") (term "3,0") (ifseqformula "20"))
            (rule "applyEq" (formula "12") (term "1,0,2,0") (ifseqformula "9"))
            (rule "eqSymm" (formula "12"))
            (rule "applyEq" (formula "8") (term "0") (ifseqformula "1"))
            (rule "inEqSimp_homoInEq0" (formula "8"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
            (rule "polySimp_rightDist" (formula "8") (term "1,0"))
            (rule "polySimp_mulAssoc" (formula "8") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "0,1,0"))
            (rule "polySimp_elimOne" (formula "8") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "8") (term "0"))
            (rule "applyEq" (formula "9") (term "0") (ifseqformula "20"))
            (rule "applyEq" (formula "24") (term "0,0") (ifseqformula "10"))
            (rule "inEqSimp_commuteGeq" (formula "24"))
            (rule "applyEq" (formula "7") (term "0") (ifseqformula "1"))
            (rule "inEqSimp_homoInEq1" (formula "7"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
            (rule "polySimp_rightDist" (formula "7") (term "1,0"))
            (rule "polySimp_mulAssoc" (formula "7") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "7") (term "0,1,0"))
            (rule "polySimp_elimOne" (formula "7") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "7") (term "0"))
            (rule "applyEq" (formula "31") (term "0,0,0,1,1") (ifseqformula "10"))
            (rule "applyEq" (formula "25") (term "1,0") (ifseqformula "10"))
            (rule "applyEq" (formula "30") (term "0") (ifseqformula "10"))
            (rule "applyEq" (formula "9") (term "1") (ifseqformula "1"))
            (rule "applyEq" (formula "12") (term "1,0,2,0") (ifseqformula "20"))
            (rule "applyEq" (formula "15") (term "0") (ifseqformula "9"))
            (rule "inEqSimp_homoInEq0" (formula "15"))
            (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
            (rule "polySimp_rightDist" (formula "15") (term "1,0"))
            (rule "polySimp_mulAssoc" (formula "15") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "15") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0"))
            (rule "polySimp_elimOne" (formula "15") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "15") (term "0"))
            (rule "polySimp_addComm0" (formula "15") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "15") (term "0"))
            (rule "add_literals" (formula "15") (term "1,1,0"))
            (rule "times_zero_1" (formula "15") (term "1,0"))
            (rule "add_zero_right" (formula "15") (term "0"))
            (rule "applyEq" (formula "17") (term "0,1,3,0") (ifseqformula "9"))
            (rule "polySimp_mulComm0" (formula "17") (term "1,3,0"))
            (rule "polySimp_rightDist" (formula "17") (term "1,3,0"))
            (rule "polySimp_mulAssoc" (formula "17") (term "0,1,3,0"))
            (rule "polySimp_mulComm0" (formula "17") (term "0,0,1,3,0"))
            (rule "polySimp_mulLiterals" (formula "17") (term "0,1,3,0"))
            (rule "polySimp_elimOne" (formula "17") (term "0,1,3,0"))
            (rule "polySimp_addAssoc" (formula "17") (term "3,0"))
            (rule "polySimp_addComm0" (formula "17") (term "0,3,0"))
            (rule "polySimp_pullOutFactor1b" (formula "17") (term "3,0"))
            (rule "add_literals" (formula "17") (term "1,1,3,0"))
            (rule "times_zero_1" (formula "17") (term "1,3,0"))
            (rule "add_zero_right" (formula "17") (term "3,0"))
            (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "9"))
            (rule "polySimp_mulComm0" (formula "16") (term "0"))
            (rule "polySimp_rightDist" (formula "16") (term "0"))
            (rule "polySimp_mulComm0" (formula "16") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "16") (term "0,0"))
            (rule "inEqSimp_homoInEq1" (formula "16"))
            (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
            (rule "polySimp_rightDist" (formula "16") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0"))
            (rule "polySimp_mulComm0" (formula "16") (term "0,1,0"))
            (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "16") (term "0"))
            (rule "polySimp_addComm1" (formula "16") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "16") (term "0"))
            (rule "add_literals" (formula "16") (term "1,1,0"))
            (rule "applyEq" (formula "22") (term "0") (ifseqformula "9"))
            (rule "inEqSimp_homoInEq1" (formula "22"))
            (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
            (rule "polySimp_rightDist" (formula "22") (term "1,0"))
            (rule "polySimp_mulAssoc" (formula "22") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "22") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "22") (term "0,1,0"))
            (rule "polySimp_elimOne" (formula "22") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "22") (term "0"))
            (rule "applyEq" (formula "24") (term "1,3,0") (ifseqformula "9"))
            (rule "polySimp_addAssoc" (formula "24") (term "3,0"))
            (rule "applyEq" (formula "11") (term "3,0") (ifseqformula "9"))
            (rule "applyEq" (formula "23") (term "0") (ifseqformula "9"))
            (rule "inEqSimp_commuteLeq" (formula "23"))
            (rule "applyEq" (formula "22") (term "1") (ifseqformula "9"))
            (rule "applyEq" (formula "12") (term "1,0,2,0") (ifseqformula "9"))
            (rule "eqSymm" (formula "12"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,2,1"))
            (rule "applyEq" (formula "12") (term "1,0,2,0") (ifseqformula "1"))
            (rule "eqSymm" (formula "12"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,2,1"))
            (rule "eqSymm" (formula "12"))
            (rule "applyEq" (formula "20") (term "1") (ifseqformula "9"))
            (rule "inEqSimp_sepNegMonomial1" (formula "8"))
            (rule "polySimp_mulLiterals" (formula "8") (term "0"))
            (rule "polySimp_elimOne" (formula "8") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "7"))
            (rule "polySimp_mulLiterals" (formula "7") (term "0"))
            (rule "polySimp_elimOne" (formula "7") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "16"))
            (rule "polySimp_mulLiterals" (formula "16") (term "0"))
            (rule "polySimp_elimOne" (formula "16") (term "0"))
            (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "8"))
            (rule "polySimp_rightDist" (formula "16") (term "0,0"))
            (rule "mul_literals" (formula "16") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0"))
            (rule "polySimp_addAssoc" (formula "16") (term "0"))
            (rule "polySimp_addComm1" (formula "16") (term "0,0"))
            (rule "add_literals" (formula "16") (term "0,0,0"))
            (rule "polySimp_pullOutFactor2b" (formula "16") (term "0"))
            (rule "add_literals" (formula "16") (term "1,1,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "16"))
            (rule "polySimp_mulLiterals" (formula "16") (term "0"))
            (rule "polySimp_elimOne" (formula "16") (term "0"))
            (rule "inEqSimp_exactShadow3" (formula "22") (ifseqformula "8"))
            (rule "mul_literals" (formula "22") (term "0,0"))
            (rule "polySimp_addAssoc" (formula "22") (term "0"))
            (rule "add_literals" (formula "22") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "22"))
            (rule "mul_literals" (formula "22") (term "1"))
            (rule "inEqSimp_subsumption1" (formula "22") (ifseqformula "15"))
            (rule "leq_literals" (formula "22") (term "0"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "true_left" (formula "22"))
            (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "31") (term "0"))
             (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "29")) (ifInst ""  (formula "20")))
            (rule "translateJavaSubInt" (formula "31") (term "3,0,1,0"))
            (rule "polySimp_elimSub" (formula "31") (term "3,0,1,0"))
            (rule "mul_literals" (formula "31") (term "1,3,0,1,0"))
            (rule "polySimp_addComm0" (formula "31") (term "3,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "31") (term "0,1,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "31") (term "1,1,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "31") (term "1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "31") (term "1,0,0,0,0,0"))
            (rule "replace_known_left" (formula "31") (term "1,0,0,0,0,0") (ifseqformula "19"))
             (builtin "One Step Simplification" (formula "31"))
            (rule "applyEq" (formula "31") (term "1,3,0,1,0") (ifseqformula "21"))
            (rule "polySimp_addAssoc" (formula "31") (term "3,0,1,0"))
            (rule "applyEq" (formula "31") (term "1,1,0,0") (ifseqformula "21"))
            (rule "applyEq" (formula "31") (term "0,0,1,0,0,0") (ifseqformula "21"))
            (rule "inEqSimp_homoInEq1" (formula "31") (term "0,1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0,0"))
            (rule "polySimp_mulAssoc" (formula "31") (term "0,1,0,0,1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "31") (term "0,0,1,0,0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "31") (term "0,1,0,0,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "31") (term "0,1,0,0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0,0"))
            (rule "applyEq" (formula "31") (term "0,0,1,0,0") (ifseqformula "10"))
            (rule "replace_known_left" (formula "31") (term "1,0,0") (ifseqformula "24"))
             (builtin "One Step Simplification" (formula "31"))
            (rule "applyEq" (formula "31") (term "1,0,1,0") (ifseqformula "10"))
            (rule "applyEq" (formula "31") (term "1,1,1,0,0") (ifseqformula "21"))
            (rule "replace_known_left" (formula "31") (term "1,1,0,0") (ifseqformula "23"))
             (builtin "One Step Simplification" (formula "31"))
            (rule "applyEq" (formula "31") (term "0,1,0,0,0") (ifseqformula "21"))
            (rule "eqSymm" (formula "31") (term "1,0,0,0"))
            (rule "replace_known_left" (formula "31") (term "1,0,0,0") (ifseqformula "9"))
             (builtin "One Step Simplification" (formula "31"))
            (rule "applyEq" (formula "31") (term "0,0,0,0,0") (ifseqformula "10"))
            (rule "replace_known_right" (formula "31") (term "0,0,0,0") (ifseqformula "28"))
             (builtin "One Step Simplification" (formula "31"))
            (rule "inEqSimp_sepNegMonomial0" (formula "31") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "31") (term "0,0,0"))
            (rule "polySimp_elimOne" (formula "31") (term "0,0,0"))
            (rule "replace_known_left" (formula "31") (term "0,0") (ifseqformula "7"))
             (builtin "One Step Simplification" (formula "31"))
            (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "13"))
             (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "29")) (ifInst ""  (formula "20")))
            (rule "translateJavaSubInt" (formula "13") (term "3,0,1"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "14"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "13"))
            (rule "notLeft" (formula "13"))
            (rule "polySimp_elimSub" (formula "18") (term "3,0"))
            (rule "mul_literals" (formula "18") (term "1,3,0"))
            (rule "polySimp_addComm0" (formula "18") (term "3,0"))
            (rule "inEqSimp_commuteLeq" (formula "17"))
            (rule "inEqSimp_commuteLeq" (formula "15"))
            (rule "inEqSimp_commuteLeq" (formula "16"))
            (rule "inEqSimp_commuteLeq" (formula "13"))
            (rule "applyEq" (formula "15") (term "1") (ifseqformula "13"))
            (rule "applyEq" (formula "17") (term "1,3,0") (ifseqformula "25"))
            (rule "polySimp_addAssoc" (formula "17") (term "3,0"))
            (rule "applyEq" (formula "16") (term "1") (ifseqformula "25"))
            (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "10"))
            (rule "applyEq" (formula "16") (term "1,0") (ifseqformula "10"))
            (rule "applyEq" (formula "14") (term "0") (ifseqformula "13"))
            (rule "applyEq" (formula "29") (term "0") (ifseqformula "10"))
            (rule "applyEq" (formula "23") (term "0") (ifseqformula "13"))
            (rule "applyEq" (formula "15") (term "1") (ifseqformula "9"))
            (rule "applyEq" (formula "13") (term "1") (ifseqformula "9"))
            (rule "applyEq" (formula "14") (term "0") (ifseqformula "9"))
            (rule "inEqSimp_homoInEq1" (formula "14"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0"))
            (rule "polySimp_rightDist" (formula "14") (term "1,0"))
            (rule "polySimp_mulAssoc" (formula "14") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "14") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0"))
            (rule "polySimp_elimOne" (formula "14") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "14") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "14"))
            (rule "polySimp_mulLiterals" (formula "14") (term "0"))
            (rule "polySimp_elimOne" (formula "14") (term "0"))
            (rule "Definition_axiom_for_isClassifiedAs_in_de_wiesler_Tree" (formula "18") (term "0"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "translateJavaSubInt" (formula "18") (term "1,0,1"))
            (rule "translateJavaSubInt" (formula "18") (term "0,2,0,1,0"))
            (rule "andLeft" (formula "18"))
            (rule "polySimp_elimSub" (formula "18") (term "0,2,0,1"))
            (rule "mul_literals" (formula "18") (term "1,0,2,0,1"))
            (rule "polySimp_elimSub" (formula "19") (term "1,0"))
            (rule "mul_literals" (formula "19") (term "1,1,0"))
            (rule "polySimp_addComm0" (formula "18") (term "0,2,0,1"))
            (rule "polySimp_addComm0" (formula "19") (term "1,0"))
            (rule "inEqSimp_ltToLeq" (formula "18") (term "0"))
            (rule "add_zero_right" (formula "18") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "18") (term "1"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "19") (term "0"))
            (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0"))
            (rule "mul_literals" (formula "19") (term "0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "19") (term "0,0,0"))
            (rule "add_literals" (formula "19") (term "0,0,0,0"))
            (rule "polySimp_addComm1" (formula "19") (term "0,0"))
            (rule "inEqSimp_commuteLeq" (formula "19") (term "1"))
            (rule "applyEq" (formula "18") (term "1,1,0,1") (ifseqformula "10"))
            (rule "applyEq" (formula "19") (term "0,1,0,0") (ifseqformula "13"))
            (rule "polySimp_mulComm0" (formula "19") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "19") (term "1,0,0"))
            (rule "polySimp_mulAssoc" (formula "19") (term "0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "19") (term "0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "19") (term "0,1,0,0"))
            (rule "polySimp_elimOne" (formula "19") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "19") (term "0,0"))
            (rule "polySimp_pullOutFactor3b" (formula "19") (term "0,0,0"))
            (rule "applyEq" (formula "19") (term "1,0,1") (ifseqformula "10"))
            (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0"))
            (rule "polySimp_mulLiterals" (formula "18") (term "0,0"))
            (rule "polySimp_elimOne" (formula "18") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,1"))
            (rule "polySimp_rightDist" (formula "18") (term "1,1"))
            (rule "mul_literals" (formula "18") (term "0,1,1"))
            (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1"))
            (rule "polySimp_elimOne" (formula "18") (term "1,1,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0"))
            (rule "polySimp_mulLiterals" (formula "19") (term "0,0"))
            (rule "polySimp_elimOne" (formula "19") (term "0,0"))
            (rule "commute_and" (formula "30"))
            (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "25") (term "0"))
            (rule "replace_known_left" (formula "25") (term "1,0") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "29")) (ifInst ""  (formula "26")))
            (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "26") (term "0") (inst "j=j") (inst "i=i"))
             (builtin "One Step Simplification" (formula "26"))
            (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "26") (term "0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "26") (term "1,0,1,0,0,1,0,0,1,0"))
            (rule "mul_literals" (formula "26") (term "0,0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "26") (term "1,0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "26") (term "0,0,0,1,0,0,1,0"))
            (rule "add_literals" (formula "26") (term "0,0,0,0,1,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "26") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "26") (term "1,0,1,0,0,1,0,0"))
            (rule "mul_literals" (formula "26") (term "0,0,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "26") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "26") (term "0,0,0,1,0,0"))
            (rule "add_literals" (formula "26") (term "0,0,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "26") (term "1,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "26") (term "0,1,1,0,0,1,0"))
            (rule "mul_literals" (formula "26") (term "0,0,1,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
            (rule "polySimp_rightDist" (formula "26") (term "0,1,1,0,0"))
            (rule "mul_literals" (formula "26") (term "0,0,1,1,0,0"))
            (rule "nnf_imp2or" (formula "26") (term "0"))
            (rule "nnf_notAnd" (formula "26") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
            (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
            (rule "mul_literals" (formula "26") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "26") (term "0,1,0,0,1,0,0"))
            (rule "mul_literals" (formula "26") (term "0,0,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "26") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "26") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "26") (term "0,0,0,1,0,0"))
            (rule "add_literals" (formula "26") (term "0,0,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
            (rule "polySimp_rightDist" (formula "26") (term "0,1,1,0,0"))
            (rule "mul_literals" (formula "26") (term "0,0,1,1,0,0"))
            (rule "nnf_imp2or" (formula "26") (term "0,1,0"))
            (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "11") (term "0") (inst "j=j") (inst "i=i"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,1,0"))
            (rule "polySimp_mulAssoc" (formula "11") (term "0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "0,0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "11") (term "0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
            (rule "polySimp_mulAssoc" (formula "11") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "0,0,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "11") (term "0,1,1,0,0,1,0"))
            (rule "mul_literals" (formula "11") (term "0,0,1,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "0,1,1,0,0"))
            (rule "mul_literals" (formula "11") (term "0,0,1,1,0,0"))
            (rule "nnf_notAnd" (formula "26") (term "0,0,1,0"))
            (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "26") (term "0,1,0,0,1,0,0,1,0"))
            (rule "mul_literals" (formula "26") (term "0,0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "26") (term "1,0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "26") (term "1,0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "26") (term "0,0,0,1,0,0,1,0"))
            (rule "add_literals" (formula "26") (term "0,0,0,0,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "26") (term "0,1,1,0,0,1,0"))
            (rule "mul_literals" (formula "26") (term "0,0,1,1,0,0,1,0"))
            (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0,1,0"))
            (rule "mul_literals" (formula "26") (term "0,1,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0,1,0"))
            (rule "nnf_imp2or" (formula "11") (term "0"))
            (rule "nnf_notAnd" (formula "11") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
            (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
            (rule "mul_literals" (formula "11") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0,0,1,0,0"))
            (rule "mul_literals" (formula "11") (term "0,0,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,1,0,0"))
            (rule "add_literals" (formula "11") (term "0,0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "11") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "0,1,1,0,0"))
            (rule "nnf_imp2or" (formula "11") (term "0,1,0"))
            (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "32") (term "0,0"))
            (rule "wellFormedAnon" (formula "1") (term "1,0"))
            (rule "replace_known_left" (formula "1") (term "0,1,0") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")) (ifInst ""  (formula "4")))
            (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "33") (term "0,0") (inst "j=j") (inst "i=i"))
             (builtin "One Step Simplification" (formula "33"))
            (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "33") (term "0,1,0,0,1,0,0,1,0,0"))
            (rule "mul_literals" (formula "33") (term "0,0,1,0,0,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "33") (term "1,0,1,0,0,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "33") (term "1,0,1,0,0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "33") (term "0,0,0,1,0,0,1,0,0"))
            (rule "add_literals" (formula "33") (term "0,0,0,0,1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "33") (term "0,1,0,0,1,0,0,0"))
            (rule "mul_literals" (formula "33") (term "0,0,1,0,0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "33") (term "1,0,1,0,0,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "33") (term "1,0,1,0,0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "33") (term "0,0,0,1,0,0,0"))
            (rule "add_literals" (formula "33") (term "0,0,0,0,1,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "33") (term "1,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "33") (term "0,1,1,0,0,1,0,0"))
            (rule "mul_literals" (formula "33") (term "0,0,1,1,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "33") (term "0,1,1,0,0,0"))
            (rule "mul_literals" (formula "33") (term "0,0,1,1,0,0,0"))
            (rule "nnf_notAnd" (formula "12") (term "0,0,1,0"))
            (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0,0,1,0,0,1,0"))
            (rule "mul_literals" (formula "12") (term "0,0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,1,0,0,1,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,0,1,0,0,1,0"))
            (rule "add_zero_left" (formula "12") (term "0,0,0,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "0,1,1,0,0,1,0"))
            (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,1,0"))
            (rule "mul_literals" (formula "12") (term "0,1,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,1,0"))
            (rule "nnf_imp2or" (formula "33") (term "0,0"))
            (rule "nnf_notAnd" (formula "33") (term "0,0,0"))
            (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0,0"))
            (rule "times_zero_1" (formula "33") (term "1,0,0,0,0,0,0"))
            (rule "add_zero_right" (formula "33") (term "0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0,0"))
            (rule "mul_literals" (formula "33") (term "1,0,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "33") (term "0,1,0,0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "33") (term "1,0,1,0,0,1,0,0,0"))
            (rule "mul_literals" (formula "33") (term "0,0,1,0,0,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "33") (term "1,0,1,0,0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "33") (term "0,0,0,1,0,0,0"))
            (rule "add_literals" (formula "33") (term "0,0,0,0,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "33") (term "0,1,1,0,0,0"))
            (rule "mul_literals" (formula "33") (term "0,0,1,1,0,0,0"))
            (rule "nnf_imp2or" (formula "33") (term "0,1,0,0"))
            (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "26") (term "0"))
            (rule "replace_known_left" (formula "26") (term "1,0") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "31")) (ifInst ""  (formula "27")))
            (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "27") (term "0") (inst "i=i"))
             (builtin "One Step Simplification" (formula "27"))
            (rule "translateJavaAddInt" (formula "27") (term "0,2,1,1,0"))
            (rule "translateJavaSubInt" (formula "27") (term "1,1,0,0"))
            (rule "polySimp_elimSub" (formula "27") (term "1,1,0,0"))
            (rule "mul_literals" (formula "27") (term "1,1,1,0,0"))
            (rule "polySimp_addComm0" (formula "27") (term "0,2,1,1,0"))
            (rule "polySimp_addComm1" (formula "27") (term "1,1,0,0"))
            (rule "polySimp_addComm1" (formula "27") (term "0,1,1,0,0"))
            (rule "add_literals" (formula "27") (term "0,0,1,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "27") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1,0,0,1,0,0"))
            (rule "mul_literals" (formula "27") (term "0,0,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "27") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "27") (term "0,0,0,1,0,0"))
            (rule "add_literals" (formula "27") (term "0,0,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "27") (term "1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0"))
            (rule "polySimp_rightDist" (formula "27") (term "0,1,1,0,0"))
            (rule "mul_literals" (formula "27") (term "0,0,1,1,0,0"))
            (rule "nnf_imp2or" (formula "27") (term "0"))
            (rule "nnf_notAnd" (formula "34") (term "0,0,1,0,0"))
            (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "34") (term "0,1,0,0,1,0,0,1,0,0"))
            (rule "mul_literals" (formula "34") (term "0,0,1,0,0,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "34") (term "1,0,1,0,0,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "34") (term "1,0,1,0,0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "34") (term "0,0,0,1,0,0,1,0,0"))
            (rule "add_literals" (formula "34") (term "0,0,0,0,1,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "34") (term "0,1,1,0,0,1,0,0"))
            (rule "mul_literals" (formula "34") (term "0,0,1,1,0,0,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "34") (term "1,0,0,0,1,0,0"))
            (rule "mul_literals" (formula "34") (term "0,1,0,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,0,1,0,0"))
            (rule "nnf_notAnd" (formula "27") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
            (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "27") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
            (rule "mul_literals" (formula "27") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "27") (term "0,1,0,0,1,0,0"))
            (rule "mul_literals" (formula "27") (term "0,0,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "27") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "27") (term "0,0,0,1,0,0"))
            (rule "add_literals" (formula "27") (term "0,0,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0"))
            (rule "polySimp_rightDist" (formula "27") (term "0,1,1,0,0"))
            (rule "mul_literals" (formula "27") (term "0,0,1,1,0,0"))
            (rule "arrayLengthIsAShort" (formula "24") (term "0"))
             (builtin "One Step Simplification" (formula "24"))
            (rule "true_left" (formula "24"))
            (rule "arrayLengthNotNegative" (formula "24") (term "0"))
            (rule "commute_and" (formula "34") (term "0"))
            (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "1") (term "0,1"))
            (rule "wellFormedAnon" (formula "1") (term "1,0"))
            (rule "replace_known_left" (formula "1") (term "0,1,0") (ifseqformula "4"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "33")) (ifInst ""  (formula "5")))
            (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "2") (term "0,0") (inst "j=j") (inst "i=i"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "2") (term "0,1,0,0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0,0,1,0,0,0"))
            (rule "mul_literals" (formula "2") (term "0,0,1,0,0,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "2") (term "1,0,1,0,0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "2") (term "0,1,0,0,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0,0,1,0,0,1,0,0"))
            (rule "mul_literals" (formula "2") (term "0,0,1,0,0,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "2") (term "1,0,1,0,0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0,1,0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "2") (term "0,1,1,0,0,0"))
            (rule "mul_literals" (formula "2") (term "0,0,1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "2") (term "0,1,1,0,0,1,0,0"))
            (rule "mul_literals" (formula "2") (term "0,0,1,1,0,0,1,0,0"))
            (rule "nnf_imp2or" (formula "2") (term "0,0"))
            (rule "nnf_notAnd" (formula "2") (term "0,0,0"))
            (rule "inEqSimp_notGeq" (formula "2") (term "0,0,0,0"))
            (rule "mul_literals" (formula "2") (term "1,0,0,0,0,0,0"))
            (rule "add_zero_right" (formula "2") (term "0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0,0"))
            (rule "mul_literals" (formula "2") (term "1,0,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "2") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "2") (term "0,1,0,0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0,0,1,0,0,0"))
            (rule "mul_literals" (formula "2") (term "0,0,1,0,0,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "2") (term "1,0,1,0,0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "2") (term "0,1,1,0,0,0"))
            (rule "mul_literals" (formula "2") (term "0,0,1,1,0,0,0"))
            (rule "nnf_imp2or" (formula "2") (term "0,1,0,0"))
            (rule "arrayLengthIsAShort" (formula "27") (term "0"))
             (builtin "One Step Simplification" (formula "27"))
            (rule "true_left" (formula "27"))
            (rule "arrayLengthNotNegative" (formula "27") (term "0"))
            (rule "nnf_notAnd" (formula "2") (term "0,0,1,0,0"))
            (rule "inEqSimp_notLeq" (formula "2") (term "1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "2") (term "0,1,0,0,1,0,0,1,0,0"))
            (rule "mul_literals" (formula "2") (term "0,0,1,0,0,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0,0,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "2") (term "1,0,1,0,0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0,1,0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "2") (term "0,1,1,0,0,1,0,0"))
            (rule "mul_literals" (formula "2") (term "0,0,1,1,0,0,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "2") (term "0,0,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0,0"))
            (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0,0,1,0,0"))
            (rule "commute_or" (formula "31") (term "0,0,1,0"))
            (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "29") (term "0") (inst "j=j") (inst "i=i"))
             (builtin "One Step Simplification" (formula "29"))
            (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "29") (term "0,1,0,0,1,0,0"))
            (rule "mul_literals" (formula "29") (term "0,0,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "29") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "29") (term "0,0,0,1,0,0"))
            (rule "add_literals" (formula "29") (term "0,0,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "29") (term "0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1,0,0,1,0,0,1,0"))
            (rule "mul_literals" (formula "29") (term "0,0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "29") (term "1,0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "29") (term "0,0,0,1,0,0,1,0"))
            (rule "add_literals" (formula "29") (term "0,0,0,0,1,0,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "29") (term "1,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0"))
            (rule "polySimp_rightDist" (formula "29") (term "0,1,1,0,0"))
            (rule "mul_literals" (formula "29") (term "0,0,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "29") (term "0,1,1,0,0,1,0"))
            (rule "mul_literals" (formula "29") (term "0,0,1,1,0,0,1,0"))
            (rule "nnf_imp2or" (formula "29") (term "0"))
            (rule "nnf_notAnd" (formula "29") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "29") (term "0,1,0,0,1,0,0"))
            (rule "mul_literals" (formula "29") (term "0,0,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "29") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "29") (term "0,0,0,1,0,0"))
            (rule "add_literals" (formula "29") (term "0,0,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0"))
            (rule "polySimp_rightDist" (formula "29") (term "0,1,1,0,0"))
            (rule "mul_literals" (formula "29") (term "0,0,1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0"))
            (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "29") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0"))
            (rule "mul_literals" (formula "29") (term "1,0,0,0"))
            (rule "nnf_imp2or" (formula "29") (term "0,1,0"))
            (rule "nnf_notAnd" (formula "29") (term "0,0,1,0"))
            (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "29") (term "1,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0,1,0"))
            (rule "mul_literals" (formula "29") (term "0,1,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0,1,0"))
            (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "29") (term "0,1,0,0,1,0,0,1,0"))
            (rule "mul_literals" (formula "29") (term "0,0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "29") (term "1,0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "29") (term "0,0,0,1,0,0,1,0"))
            (rule "add_literals" (formula "29") (term "0,0,0,0,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "29") (term "0,1,1,0,0,1,0"))
            (rule "mul_literals" (formula "29") (term "0,0,1,1,0,0,1,0"))
            (rule "commute_or" (formula "13") (term "0,0,1,0"))
            (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "1") (term "0,0"))
            (rule "wellFormedAnon" (formula "1") (term "1,0"))
            (rule "replace_known_left" (formula "1") (term "1") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "35")) (ifInst ""  (formula "5")) (ifInst ""  (formula "6")))
            (rule "true_left" (formula "1"))
            (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "1") (term "0,0") (inst "i=i"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "translateJavaAddInt" (formula "1") (term "0,2,1,1,0,0"))
            (rule "translateJavaSubInt" (formula "1") (term "1,1,0,0,0"))
            (rule "polySimp_elimSub" (formula "1") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "1") (term "1,1,1,0,0,0"))
            (rule "polySimp_addComm0" (formula "1") (term "0,2,1,1,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "1,1,0,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0,1,1,0,0,0"))
            (rule "add_literals" (formula "1") (term "0,0,1,1,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0,1,0,0,0"))
            (rule "mul_literals" (formula "1") (term "0,0,1,0,0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "1") (term "1,0,1,0,0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0,0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0,0,1,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "0,1,1,0,0,0"))
            (rule "mul_literals" (formula "1") (term "0,0,1,1,0,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "0,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,0,0"))
            (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0,1,0,0,0"))
            (rule "mul_literals" (formula "1") (term "0,0,1,0,0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "1") (term "1,0,1,0,0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0,0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0,0,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "0,1,1,0,0,0"))
            (rule "mul_literals" (formula "1") (term "0,0,1,1,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0"))
            (rule "mul_literals" (formula "1") (term "1,0,0,0,0"))
            (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "2") (term "0,1"))
            (rule "wellFormedAnon" (formula "2") (term "1,0"))
            (rule "replace_known_left" (formula "2") (term "1,1,0") (ifseqformula "6"))
             (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "35")) (ifInst ""  (formula "5")))
            (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "3") (term "0,1") (inst "i=i"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "translateJavaAddInt" (formula "3") (term "0,2,1,1,0,1"))
            (rule "translateJavaSubInt" (formula "3") (term "1,1,0,0,1"))
            (rule "polySimp_elimSub" (formula "3") (term "1,1,0,0,1"))
            (rule "mul_literals" (formula "3") (term "1,1,1,0,0,1"))
            (rule "polySimp_addComm0" (formula "3") (term "0,2,1,1,0,1"))
            (rule "polySimp_addComm1" (formula "3") (term "1,1,0,0,1"))
            (rule "polySimp_addComm1" (formula "3") (term "0,1,1,0,0,1"))
            (rule "add_literals" (formula "3") (term "0,0,1,1,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0,1"))
            (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0,1"))
            (rule "polySimp_rightDist" (formula "3") (term "0,1,0,0,1,0,0,1"))
            (rule "mul_literals" (formula "3") (term "0,0,1,0,0,1,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0,0,1,0,0,1"))
            (rule "polySimp_elimOne" (formula "3") (term "1,0,1,0,0,1,0,0,1"))
            (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0,1"))
            (rule "polySimp_addAssoc" (formula "3") (term "0,0,0,1,0,0,1"))
            (rule "add_literals" (formula "3") (term "0,0,0,0,1,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0,1"))
            (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0,1"))
            (rule "polySimp_rightDist" (formula "3") (term "1,1,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0,1"))
            (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0,1"))
            (rule "polySimp_rightDist" (formula "3") (term "0,1,1,0,0,1"))
            (rule "mul_literals" (formula "3") (term "0,0,1,1,0,0,1"))
            (rule "cut_direct" (formula "22") (term "1"))
            (branch "CUT: self.sorted_splitters[classify_sk_0] >= value TRUE"
                (builtin "One Step Simplification" (formula "23"))
               (rule "true_left" (formula "23"))
               (rule "cut_direct" (formula "37") (term "1"))
               (branch "CUT: self.tree.<created> = TRUE TRUE"
                   (builtin "One Step Simplification" (formula "38"))
                  (rule "replace_known_left" (formula "39") (term "0,1") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "39"))
                  (rule "allRight" (formula "39") (inst "sk=i_0"))
                  (rule "orRight" (formula "39"))
                  (rule "orRight" (formula "39"))
                  (rule "allRight" (formula "41") (inst "sk=j_0"))
                  (rule "orRight" (formula "41"))
                  (rule "orRight" (formula "41"))
                  (rule "inEqSimp_geqRight" (formula "40"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,0"))
                  (rule "inEqSimp_leqRight" (formula "40"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_geqRight" (formula "43"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "inEqSimp_leqRight" (formula "42"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0"))
                  (rule "inEqSimp_geqRight" (formula "43"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                  (rule "polySimp_elimOne" (formula "5") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1"))
                  (rule "polySimp_rightDist" (formula "3") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                  (rule "mul_literals" (formula "3") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_0"))
                  (rule "simplifySelectOfAnon" (formula "3"))
                   (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "42")))
                  (rule "inEqSimp_homoInEq0" (formula "4"))
                  (rule "polySimp_addComm1" (formula "4") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1"))
                  (rule "polySimp_rightDist" (formula "4") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                  (rule "mul_literals" (formula "4") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                  (rule "elementOfSetMinus" (formula "3") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "elementOfUnion" (formula "3") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "ifthenelse_negated" (formula "3") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "18"))
                  (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "6") (term "0"))
                  (rule "polySimp_rightDist" (formula "6") (term "0,0,0"))
                  (rule "mul_literals" (formula "6") (term "0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "6") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "6") (term "0,0,0"))
                  (rule "add_literals" (formula "6") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor2b" (formula "6") (term "0,0"))
                  (rule "add_literals" (formula "6") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "6") (term "1,0,0"))
                  (rule "add_zero_right" (formula "6") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                  (rule "polySimp_elimOne" (formula "6") (term "0"))
                  (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=arr_1"))
                  (rule "simplifySelectOfAnon" (formula "4"))
                   (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "44")))
                  (rule "elementOfSetMinus" (formula "4") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "elementOfUnion" (formula "4") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "ifthenelse_negated" (formula "4") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "20"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor2b" (formula "1") (term "0,0"))
                  (rule "add_literals" (formula "1") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "1"))
                  (rule "polySimp_mulComm0" (formula "3") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "3") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                  (rule "polySimp_elimOne" (formula "3") (term "0"))
                  (rule "cut_direct" (formula "31") (term "0"))
                  (branch "CUT: classify_sk_0 >= 1 TRUE"
                      (builtin "One Step Simplification" (formula "32"))
                     (rule "inEqSimp_subsumption1" (formula "28") (ifseqformula "31"))
                     (rule "leq_literals" (formula "28") (term "0"))
                      (builtin "One Step Simplification" (formula "28"))
                     (rule "true_left" (formula "28"))
                     (rule "nnf_imp2or" (formula "13") (term "0,1"))
                     (rule "nnf_notAnd" (formula "13") (term "0,0,1"))
                     (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "13") (term "0,1,0,0,1,0,0,1"))
                     (rule "mul_literals" (formula "13") (term "0,0,1,0,0,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,0,0,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "13") (term "1,0,1,0,0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,1,0,0,1"))
                     (rule "add_literals" (formula "13") (term "0,0,0,0,1,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "13") (term "0,1,1,0,0,1"))
                     (rule "mul_literals" (formula "13") (term "0,0,1,1,0,0,1"))
                     (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,1"))
                     (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0,1"))
                     (rule "add_zero_right" (formula "13") (term "0,0,0,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,1"))
                     (rule "mul_literals" (formula "13") (term "1,0,0,0,1"))
                     (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "11") (term "0,1"))
                     (rule "wellFormedAnon" (formula "11") (term "1,0"))
                     (rule "replace_known_right" (formula "11") (term "0,0,0") (ifseqformula "46"))
                      (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "16")) (ifInst ""  (formula "17")))
                     (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "12") (term "0,1") (inst "j=j") (inst "i=i"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "12") (term "0,1,0,0,1,0,0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0,0,1,0,0,1,0,1"))
                     (rule "mul_literals" (formula "12") (term "0,0,1,0,0,1,0,0,1,0,1"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,0,1,0,0,1,0,0,1,0,1"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,1,0,1"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,1,0,0,1,0,1"))
                     (rule "add_literals" (formula "12") (term "0,0,0,0,1,0,0,1,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "12") (term "0,1,0,0,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0,0,1,0,0,1"))
                     (rule "mul_literals" (formula "12") (term "0,0,1,0,0,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,0,1,0,0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,1,0,0,1"))
                     (rule "add_literals" (formula "12") (term "0,0,0,0,1,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,1,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,1,0,1"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "12") (term "0,1,1,0,0,1,0,1"))
                     (rule "mul_literals" (formula "12") (term "0,0,1,1,0,0,1,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "12") (term "0,1,1,0,0,1"))
                     (rule "mul_literals" (formula "12") (term "0,0,1,1,0,0,1"))
                     (rule "nnf_imp2or" (formula "12") (term "0,1"))
                     (rule "nnf_notAnd" (formula "12") (term "0,0,1"))
                     (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,1"))
                     (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,1"))
                     (rule "add_literals" (formula "12") (term "0,0,0,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,1"))
                     (rule "mul_literals" (formula "12") (term "1,0,0,0,1"))
                     (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "12") (term "0,1,0,0,1,0,0,1"))
                     (rule "mul_literals" (formula "12") (term "0,0,1,0,0,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0,0,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,0,1,0,0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,1,0,0,1"))
                     (rule "add_literals" (formula "12") (term "0,0,0,0,1,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "12") (term "0,1,1,0,0,1"))
                     (rule "mul_literals" (formula "12") (term "0,0,1,1,0,0,1"))
                     (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "13") (term "0,0"))
                     (rule "wellFormedAnon" (formula "13") (term "1,0"))
                     (rule "replace_known_left" (formula "13") (term "1,1,0") (ifseqformula "18"))
                      (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "47")) (ifInst ""  (formula "17")) (ifInst ""  (formula "14")))
                     (rule "true_left" (formula "13"))
                     (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "13") (term "0,1"))
                     (rule "wellFormedAnon" (formula "13") (term "1,0"))
                     (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "11"))
                      (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "47")) (ifInst ""  (formula "17")) (ifInst ""  (formula "18")))
                     (rule "true_left" (formula "13"))
                     (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "13") (term "0,1") (inst "j=j") (inst "i=i"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "13") (term "0,1,0,0,1,0,0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,0,0,1,0,0,1,0,1"))
                     (rule "mul_literals" (formula "13") (term "0,0,1,0,0,1,0,0,1,0,1"))
                     (rule "polySimp_elimOne" (formula "13") (term "1,0,1,0,0,1,0,0,1,0,1"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,1,0,1"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,1,0,0,1,0,1"))
                     (rule "add_literals" (formula "13") (term "0,0,0,0,1,0,0,1,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "13") (term "0,1,0,0,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,0,0,1,0,0,1"))
                     (rule "mul_literals" (formula "13") (term "0,0,1,0,0,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "13") (term "1,0,1,0,0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,1,0,0,1"))
                     (rule "add_literals" (formula "13") (term "0,0,0,0,1,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,1,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,1,0,1"))
                     (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "13") (term "0,1,1,0,0,1,0,1"))
                     (rule "mul_literals" (formula "13") (term "0,0,1,1,0,0,1,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "13") (term "0,1,1,0,0,1"))
                     (rule "mul_literals" (formula "13") (term "0,0,1,1,0,0,1"))
                     (rule "onlyCreatedObjectsAreReferencedFinal" (formula "28") (term "1,0") (ifseqformula "16") (ifseqformula "18"))
                     (rule "replace_known_left" (formula "28") (term "1") (ifseqformula "10"))
                      (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "46")))
                     (rule "true_left" (formula "28"))
                     (rule "nnf_imp2or" (formula "12") (term "0,1,0,1"))
                     (rule "commute_or" (formula "41") (term "0,0,1,0"))
                     (rule "nnf_imp2or" (formula "13") (term "0,1"))
                     (rule "nnf_notAnd" (formula "13") (term "0,0,1"))
                     (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "13") (term "0,1,0,0,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,0,0,1,0,0,1"))
                     (rule "mul_literals" (formula "13") (term "0,0,1,0,0,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "13") (term "1,0,1,0,0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,1,0,0,1"))
                     (rule "add_literals" (formula "13") (term "0,0,0,0,1,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "13") (term "0,1,1,0,0,1"))
                     (rule "mul_literals" (formula "13") (term "0,0,1,1,0,0,1"))
                     (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,1"))
                     (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0,1"))
                     (rule "add_literals" (formula "13") (term "0,0,0,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,1"))
                     (rule "mul_literals" (formula "13") (term "1,0,0,0,1"))
                     (rule "all_pull_out3" (formula "42") (term "0"))
                     (rule "nnf_imp2or" (formula "13") (term "0,1,0,1"))
                     (rule "nnf_notAnd" (formula "12") (term "0,0,1,0,1"))
                     (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "12") (term "0,1,0,0,1,0,0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0,0,1,0,0,1,0,1"))
                     (rule "mul_literals" (formula "12") (term "0,0,1,0,0,1,0,0,1,0,1"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,0,1,0,0,1,0,0,1,0,1"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,1,0,1"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,1,0,0,1,0,1"))
                     (rule "add_literals" (formula "12") (term "0,0,0,0,1,0,0,1,0,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,1,0,1"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "12") (term "0,1,1,0,0,1,0,1"))
                     (rule "mul_literals" (formula "12") (term "0,0,1,1,0,0,1,0,1"))
                     (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,1,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,1,0,1"))
                     (rule "mul_literals" (formula "12") (term "0,1,0,0,0,1,0,1"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,1,0,1"))
                     (rule "commute_or" (formula "14") (term "0,0,1,0,0"))
                     (rule "onlyCreatedObjectsAreReferencedFinal" (formula "24") (term "1") (ifseqformula "16") (ifseqformula "18"))
                     (rule "replace_known_right" (formula "24") (term "0") (ifseqformula "46"))
                      (builtin "One Step Simplification" (formula "24"))
                     (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "24"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "applyEqReverse" (formula "6") (term "1,1") (ifseqformula "4"))
                     (rule "hideAuxiliaryEq" (formula "4"))
                     (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "23"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "applyEqReverse" (formula "5") (term "0") (ifseqformula "4"))
                     (rule "hideAuxiliaryEq" (formula "4"))
                     (rule "inEqSimp_homoInEq1" (formula "4"))
                     (rule "polySimp_addComm1" (formula "4") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1"))
                     (rule "polySimp_rightDist" (formula "4") (term "1"))
                     (rule "mul_literals" (formula "4") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                     (rule "nnf_notAnd" (formula "11") (term "0,0,1,0,1"))
                     (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,1,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,1,0,1"))
                     (rule "mul_literals" (formula "11") (term "0,1,0,0,0,1,0,1"))
                     (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,1,0,1"))
                     (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "11") (term "0,1,0,0,1,0,0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0,0,1,0,0,1,0,1"))
                     (rule "mul_literals" (formula "11") (term "0,0,1,0,0,1,0,0,1,0,1"))
                     (rule "polySimp_elimOne" (formula "11") (term "1,0,1,0,0,1,0,0,1,0,1"))
                     (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,1,0,1"))
                     (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,1,0,0,1,0,1"))
                     (rule "add_literals" (formula "11") (term "0,0,0,0,1,0,0,1,0,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,1,0,1"))
                     (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "11") (term "0,1,1,0,0,1,0,1"))
                     (rule "mul_literals" (formula "11") (term "0,0,1,1,0,0,1,0,1"))
                     (rule "all_pull_out3" (formula "24") (term "0"))
                     (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "9") (term "0,1") (inst "i=i"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "translateJavaSubInt" (formula "9") (term "1,1,0,0,1"))
                     (rule "translateJavaAddInt" (formula "9") (term "0,2,1,1,0,1"))
                     (rule "polySimp_elimSub" (formula "9") (term "1,1,0,0,1"))
                     (rule "mul_literals" (formula "9") (term "1,1,1,0,0,1"))
                     (rule "polySimp_addComm0" (formula "9") (term "0,2,1,1,0,1"))
                     (rule "polySimp_addComm1" (formula "9") (term "1,1,0,0,1"))
                     (rule "polySimp_addComm1" (formula "9") (term "0,1,1,0,0,1"))
                     (rule "add_literals" (formula "9") (term "0,0,1,1,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "9") (term "0,1,0,0,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "1,0,1,0,0,1,0,0,1"))
                     (rule "mul_literals" (formula "9") (term "0,0,1,0,0,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "9") (term "1,0,1,0,0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,1,0,0,1"))
                     (rule "add_literals" (formula "9") (term "0,0,0,0,1,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "9") (term "0,1,1,0,0,1"))
                     (rule "mul_literals" (formula "9") (term "0,0,1,1,0,0,1"))
                     (rule "nnf_imp2or" (formula "9") (term "0,1"))
                     (rule "nnf_notAnd" (formula "9") (term "0,0,1"))
                     (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,1"))
                     (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0,1"))
                     (rule "add_zero_right" (formula "9") (term "0,0,0,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,1"))
                     (rule "mul_literals" (formula "9") (term "1,0,0,0,1"))
                     (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "9") (term "0,1,0,0,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "1,0,1,0,0,1,0,0,1"))
                     (rule "mul_literals" (formula "9") (term "0,0,1,0,0,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "9") (term "1,0,1,0,0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,1,0,0,1"))
                     (rule "add_literals" (formula "9") (term "0,0,0,0,1,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "9") (term "0,1,1,0,0,1"))
                     (rule "mul_literals" (formula "9") (term "0,0,1,1,0,0,1"))
                     (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "11") (term "0,0") (inst "i=i"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "translateJavaSubInt" (formula "11") (term "1,1,0,0,0"))
                     (rule "translateJavaAddInt" (formula "11") (term "0,2,1,1,0,0"))
                     (rule "polySimp_elimSub" (formula "11") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "11") (term "1,1,1,0,0,0"))
                     (rule "polySimp_addComm0" (formula "11") (term "0,2,1,1,0,0"))
                     (rule "polySimp_addComm1" (formula "11") (term "1,1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "11") (term "0,1,1,0,0,0"))
                     (rule "add_literals" (formula "11") (term "0,0,1,1,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "0,1,0,0,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0,0,1,0,0,0"))
                     (rule "mul_literals" (formula "11") (term "0,0,1,0,0,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "11") (term "1,0,1,0,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,1,0,0,0"))
                     (rule "add_literals" (formula "11") (term "0,0,0,0,1,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "0,1,1,0,0,0"))
                     (rule "mul_literals" (formula "11") (term "0,0,1,1,0,0,0"))
                     (rule "nnf_imp2or" (formula "11") (term "0,0"))
                     (rule "nnf_notAnd" (formula "11") (term "0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,0"))
                     (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "11") (term "0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0"))
                     (rule "mul_literals" (formula "11") (term "1,0,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "0,1,0,0,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0,0,1,0,0,0"))
                     (rule "mul_literals" (formula "11") (term "0,0,1,0,0,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "11") (term "1,0,1,0,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,1,0,0,0"))
                     (rule "add_literals" (formula "11") (term "0,0,0,0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "0,1,1,0,0,0"))
                     (rule "mul_literals" (formula "11") (term "0,0,1,1,0,0,0"))
                     (rule "shift_paren_or" (formula "40") (term "0,0"))
                     (rule "cut_direct" (formula "45") (term "0"))
                     (branch "CUT: self.sorted_splitters.* cap allLocs setMinus self.sorted_splitters.* cup self.tree.tree.* = {} TRUE"
                         (builtin "One Step Simplification" (formula "46"))
                        (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "10") (term "0,0") (inst "j=j") (inst "i=i"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "0,1,0,0,1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0,0,1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,0,1,0,0,1,0,0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "1,0,1,0,0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,1,0,0,1,0,0"))
                        (rule "add_literals" (formula "10") (term "0,0,0,0,1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "0,1,0,0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,0,1,0,0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "1,0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,1,0,0,0"))
                        (rule "add_literals" (formula "10") (term "0,0,0,0,1,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "0,1,1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,0,1,1,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "0,1,1,0,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,0,1,1,0,0,0"))
                        (rule "nnf_imp2or" (formula "10") (term "0,0"))
                        (rule "nnf_notAnd" (formula "10") (term "0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "0,1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,0,1,0,0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0,0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "1,0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,1,0,0,0"))
                        (rule "add_literals" (formula "10") (term "0,0,0,0,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "0,1,1,0,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,0,1,1,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,0"))
                        (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "10") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,0"))
                        (rule "mul_literals" (formula "10") (term "1,0,0,0,0"))
                        (rule "nnf_imp2or" (formula "10") (term "0,1,0,0"))
                        (rule "nnf_notAnd" (formula "10") (term "0,0,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,1,0,0"))
                        (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "0,1,0,0,1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,0,1,0,0,1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0,0,1,0,0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "1,0,1,0,0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,1,0,0,1,0,0"))
                        (rule "add_literals" (formula "10") (term "0,0,0,0,1,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "0,1,1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,0,1,1,0,0,1,0,0"))
                        (rule "impLeft" (formula "11"))
                        (branch
                           (rule "allRight" (formula "42") (inst "sk=i_1"))
                           (rule "orRight" (formula "42"))
                           (rule "orRight" (formula "42"))
                           (rule "inEqSimp_geqRight" (formula "44"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "inEqSimp_geqRight" (formula "44"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,0"))
                           (rule "inEqSimp_leqRight" (formula "44"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "mul_literals" (formula "3") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_2"))
                           (rule "simplifySelectOfAnon" (formula "3"))
                            (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "47")) (ifInst ""  (formula "25")))
                           (rule "disjointAllFields" (formula "3") (term "0,0") (ifseqformula "5"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "inEqSimp_homoInEq0" (formula "3"))
                           (rule "polySimp_addComm1" (formula "3") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "mul_literals" (formula "3") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                           (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_3"))
                           (rule "simplifySelectOfAnon" (formula "3"))
                            (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "47")) (ifInst ""  (formula "25")))
                           (rule "disjointAllFields" (formula "3") (term "0,0") (ifseqformula "5"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "inEqSimp_homoInEq1" (formula "3"))
                           (rule "polySimp_addComm1" (formula "3") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                           (rule "mul_literals" (formula "3") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                           (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "22"))
                           (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "polySimp_rightDist" (formula "2") (term "0,0,0"))
                           (rule "mul_literals" (formula "2") (term "0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0,0,0"))
                           (rule "add_literals" (formula "2") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "2") (term "0,0"))
                           (rule "add_literals" (formula "2") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "2") (term "1,0,0"))
                           (rule "add_zero_right" (formula "2") (term "0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "impLeft" (formula "15"))
                           (branch
                              (rule "allRight" (formula "45") (inst "sk=i_2"))
                              (rule "orRight" (formula "45"))
                              (rule "orRight" (formula "45"))
                              (rule "allRight" (formula "47") (inst "sk=j_1"))
                              (rule "orRight" (formula "47"))
                              (rule "orRight" (formula "47"))
                              (rule "inEqSimp_geqRight" (formula "46"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0,0"))
                              (rule "inEqSimp_leqRight" (formula "46"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_geqRight" (formula "49"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "inEqSimp_leqRight" (formula "49"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0"))
                              (rule "inEqSimp_geqRight" (formula "49"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                              (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                              (rule "polySimp_elimOne" (formula "5") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1"))
                              (rule "polySimp_rightDist" (formula "3") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                              (rule "mul_literals" (formula "3") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "1"))
                              (rule "polySimp_elimOne" (formula "2") (term "1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_4"))
                              (rule "simplifySelectOfAnon" (formula "3"))
                               (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "52")) (ifInst ""  (formula "30")))
                              (rule "disjointAllFields" (formula "3") (term "0,0") (ifseqformula "11"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "inEqSimp_homoInEq0" (formula "3"))
                              (rule "polySimp_addComm1" (formula "3") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1"))
                              (rule "polySimp_rightDist" (formula "3") (term "1"))
                              (rule "mul_literals" (formula "3") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                              (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "27"))
                              (rule "polySimp_rightDist" (formula "5") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "5") (term "0"))
                              (rule "polySimp_rightDist" (formula "5") (term "0,0,0"))
                              (rule "mul_literals" (formula "5") (term "0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "5") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "5") (term "0,0,0"))
                              (rule "add_literals" (formula "5") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor2b" (formula "5") (term "0,0"))
                              (rule "add_literals" (formula "5") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "5") (term "1,0,0"))
                              (rule "add_zero_right" (formula "5") (term "0,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "5"))
                              (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                              (rule "polySimp_elimOne" (formula "5") (term "0"))
                              (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_5"))
                              (rule "simplifySelectOfAnon" (formula "3"))
                               (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "53")) (ifInst ""  (formula "31")))
                              (rule "disjointAllFields" (formula "3") (term "0,0") (ifseqformula "12"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "inEqSimp_homoInEq1" (formula "3"))
                              (rule "polySimp_addComm1" (formula "3") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1"))
                              (rule "polySimp_rightDist" (formula "3") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                              (rule "mul_literals" (formula "3") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                              (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "28"))
                              (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "polySimp_rightDist" (formula "1") (term "0,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor2b" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "1"))
                              (rule "polySimp_mulComm0" (formula "3") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "3") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                              (rule "polySimp_elimOne" (formula "3") (term "0"))
                              (rule "shift_paren_or" (formula "33") (term "0,0"))
                              (rule "allLeft" (formula "49") (inst "t=i_1"))
                              (rule "inEqSimp_homoInEq1" (formula "49") (term "1,0"))
                              (rule "polySimp_addComm1" (formula "49") (term "0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "49") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "49") (term "1,1,0"))
                              (rule "polySimp_rightDist" (formula "49") (term "1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "49") (term "1,1,1,0"))
                              (rule "polySimp_elimOne" (formula "49") (term "1,1,1,0"))
                              (rule "polySimp_rightDist" (formula "49") (term "0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "49") (term "1,0,1,1,0"))
                              (rule "mul_literals" (formula "49") (term "0,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "49") (term "1,0,1,1,0"))
                              (rule "inEqSimp_contradInEq1" (formula "49") (term "0,0") (ifseqformula "8"))
                              (rule "qeq_literals" (formula "49") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "49"))
                              (rule "inEqSimp_contradInEq0" (formula "49") (term "1") (ifseqformula "11"))
                              (rule "inEqSimp_homoInEq1" (formula "49") (term "0,1"))
                              (rule "polySimp_mulComm0" (formula "49") (term "1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "49") (term "1,0,0,1"))
                              (rule "mul_literals" (formula "49") (term "0,1,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "49") (term "0,0,1"))
                              (rule "polySimp_addComm0" (formula "49") (term "0,0,0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "49") (term "0,0,1"))
                              (rule "add_literals" (formula "49") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "49") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "49") (term "0,0,1"))
                              (rule "leq_literals" (formula "49") (term "0,1"))
                               (builtin "One Step Simplification" (formula "49"))
                              (rule "inEqSimp_contradInEq1" (formula "49") (ifseqformula "10"))
                              (rule "andLeft" (formula "49"))
                              (rule "inEqSimp_homoInEq1" (formula "49"))
                              (rule "polySimp_mulComm0" (formula "49") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "49") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "49") (term "0,1,0"))
                              (rule "mul_literals" (formula "49") (term "0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "49") (term "0"))
                              (rule "polySimp_addComm1" (formula "49") (term "0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "49") (term "0"))
                              (rule "add_literals" (formula "49") (term "1,1,0"))
                              (rule "times_zero_1" (formula "49") (term "1,0"))
                              (rule "add_zero_right" (formula "49") (term "0"))
                              (rule "polySimp_addAssoc" (formula "49") (term "0"))
                              (rule "polySimp_addComm1" (formula "49") (term "0,0"))
                              (rule "add_literals" (formula "49") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "49") (term "0"))
                              (rule "add_literals" (formula "49") (term "1,1,0"))
                              (rule "times_zero_1" (formula "49") (term "1,0"))
                              (rule "add_zero_right" (formula "49") (term "0"))
                              (rule "leq_literals" (formula "49"))
                              (rule "closeFalse" (formula "49"))
                           )
                           (branch
                              (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "15"))
                               (builtin "One Step Simplification" (formula "14"))
                              (rule "true_left" (formula "14"))
                              (rule "shift_paren_or" (formula "26") (term "0,0"))
                              (rule "allLeft" (formula "42") (inst "t=i_1"))
                              (rule "inEqSimp_homoInEq1" (formula "42") (term "1,0"))
                              (rule "polySimp_addComm1" (formula "42") (term "0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "42") (term "1,1,0"))
                              (rule "polySimp_rightDist" (formula "42") (term "1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "42") (term "1,1,1,0"))
                              (rule "polySimp_elimOne" (formula "42") (term "1,1,1,0"))
                              (rule "polySimp_rightDist" (formula "42") (term "0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "42") (term "1,0,1,1,0"))
                              (rule "mul_literals" (formula "42") (term "0,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "42") (term "1,0,1,1,0"))
                              (rule "inEqSimp_contradInEq1" (formula "42") (term "0,0") (ifseqformula "1"))
                              (rule "qeq_literals" (formula "42") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "42"))
                              (rule "inEqSimp_contradInEq1" (formula "42") (term "0") (ifseqformula "3"))
                              (rule "inEqSimp_homoInEq1" (formula "42") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "42") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "42") (term "0,1,0,0,0"))
                              (rule "mul_literals" (formula "42") (term "0,0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "42") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "42") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "42") (term "0,0,0"))
                              (rule "add_literals" (formula "42") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "42") (term "1,0,0,0"))
                              (rule "add_zero_right" (formula "42") (term "0,0,0"))
                              (rule "polySimp_addAssoc" (formula "42") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "42") (term "0,0,0,0"))
                              (rule "add_literals" (formula "42") (term "0,0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "42") (term "0,0,0"))
                              (rule "add_literals" (formula "42") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "42") (term "1,0,0,0"))
                              (rule "add_zero_right" (formula "42") (term "0,0,0"))
                              (rule "leq_literals" (formula "42") (term "0,0"))
                               (builtin "One Step Simplification" (formula "42"))
                              (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "42"))
                              (rule "andLeft" (formula "4"))
                              (rule "inEqSimp_homoInEq1" (formula "4"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                              (rule "mul_literals" (formula "4") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "4") (term "0"))
                              (rule "polySimp_addComm0" (formula "4") (term "0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
                              (rule "add_literals" (formula "4") (term "1,1,0"))
                              (rule "times_zero_1" (formula "4") (term "1,0"))
                              (rule "add_zero_right" (formula "4") (term "0"))
                              (rule "leq_literals" (formula "4"))
                              (rule "closeFalse" (formula "4"))
                           )
                        )
                        (branch
                           (rule "replace_known_left" (formula "10") (term "0") (ifseqformula "11"))
                            (builtin "One Step Simplification" (formula "10"))
                           (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "10"))
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "true_left" (formula "12"))
                           (rule "shift_paren_or" (formula "23") (term "0,0"))
                           (rule "shift_paren_or" (formula "40") (term "0,0,0"))
                           (rule "onlyCreatedObjectsAreReferencedFinal" (formula "44") (term "0") (ifseqformula "13") (ifseqformula "9"))
                           (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "45"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "equalityToElementOfRight" (formula "46") (inst "fv=fv") (inst "ov=ov"))
                            (builtin "One Step Simplification" (formula "46"))
                           (rule "allRight" (formula "46") (inst "sk=ov_0"))
                           (rule "allRight" (formula "46") (inst "sk=fv_0"))
                           (rule "notRight" (formula "46"))
                           (rule "elementOfIntersect" (formula "1"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                           (rule "elementOfSetMinus" (formula "2"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "notLeft" (formula "2"))
                           (rule "elementOfUnion" (formula "44"))
                            (builtin "One Step Simplification" (formula "44"))
                           (rule "closeTrue" (formula "44"))
                        )
                     )
                     (branch "CUT: self.sorted_splitters.* cap allLocs setMinus self.sorted_splitters.* cup self.tree.tree.* = {} FALSE"
                         (builtin "One Step Simplification" (formula "46"))
                        (rule "false_right" (formula "46"))
                        (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "9") (term "0,0") (inst "j=j") (inst "i=i"))
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "0,1,0,0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,0,1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,0,1,0,0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,1,0,0,0"))
                        (rule "add_literals" (formula "9") (term "0,0,0,0,1,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "0,1,0,0,1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,0,1,0,0,1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,0,1,0,0,1,0,0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,0,1,0,0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,1,0,0,1,0,0"))
                        (rule "add_literals" (formula "9") (term "0,0,0,0,1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "0,1,1,0,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,0,1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "0,1,1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,0,1,1,0,0,1,0,0"))
                        (rule "nnf_imp2or" (formula "9") (term "0,0"))
                        (rule "nnf_notAnd" (formula "9") (term "0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "0,1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,0,1,0,0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,0,1,0,0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,1,0,0,0"))
                        (rule "add_literals" (formula "9") (term "0,0,0,0,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "0,1,1,0,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,0,1,1,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,0"))
                        (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "9") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,0"))
                        (rule "mul_literals" (formula "9") (term "1,0,0,0,0"))
                        (rule "nnf_imp2or" (formula "9") (term "0,1,0,0"))
                        (rule "nnf_notAnd" (formula "9") (term "0,0,1,0,0"))
                        (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "0,1,0,0,1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,0,1,0,0,1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,0,1,0,0,1,0,0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,0,1,0,0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,1,0,0,1,0,0"))
                        (rule "add_literals" (formula "9") (term "0,0,0,0,1,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "0,1,1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,0,1,1,0,0,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0,1,0,0"))
                        (rule "impLeft" (formula "10"))
                        (branch
                           (rule "allRight" (formula "41") (inst "sk=i_1"))
                           (rule "orRight" (formula "41"))
                           (rule "orRight" (formula "41"))
                           (rule "inEqSimp_geqRight" (formula "43"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "inEqSimp_leqRight" (formula "42"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_geqRight" (formula "43"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                           (rule "mul_literals" (formula "3") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_2"))
                           (rule "simplifySelectOfAnon" (formula "3"))
                            (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "46")) (ifInst ""  (formula "24")))
                           (rule "inEqSimp_homoInEq0" (formula "4"))
                           (rule "polySimp_addComm1" (formula "4") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1"))
                           (rule "polySimp_rightDist" (formula "4") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                           (rule "mul_literals" (formula "4") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                           (rule "elementOfSetMinus" (formula "3") (term "0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "ifthenelse_negated" (formula "3") (term "0"))
                           (rule "elementOfUnion" (formula "3") (term "0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "applyEqReverse" (formula "4") (term "1,1") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_3"))
                           (rule "simplifySelectOfAnon" (formula "3"))
                            (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "46")) (ifInst ""  (formula "24")))
                           (rule "inEqSimp_homoInEq1" (formula "4"))
                           (rule "polySimp_addComm1" (formula "4") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1"))
                           (rule "polySimp_rightDist" (formula "4") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                           (rule "mul_literals" (formula "4") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                           (rule "elementOfSetMinus" (formula "3") (term "0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "ifthenelse_negated" (formula "3") (term "0"))
                           (rule "elementOfUnion" (formula "3") (term "0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "applyEqReverse" (formula "4") (term "1,1") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "21"))
                           (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "polySimp_rightDist" (formula "1") (term "0,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "impLeft" (formula "14"))
                           (branch
                              (rule "allRight" (formula "44") (inst "sk=i_2"))
                              (rule "orRight" (formula "44"))
                              (rule "orRight" (formula "44"))
                              (rule "allRight" (formula "46") (inst "sk=j_1"))
                              (rule "orRight" (formula "46"))
                              (rule "orRight" (formula "46"))
                              (rule "inEqSimp_geqRight" (formula "45"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0,0"))
                              (rule "inEqSimp_leqRight" (formula "45"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_geqRight" (formula "48"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "inEqSimp_geqRight" (formula "47"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,0,1,0,0"))
                              (rule "inEqSimp_leqRight" (formula "48"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "2") (term "0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0"))
                              (rule "polySimp_addAssoc" (formula "2") (term "0,0,0"))
                              (rule "add_literals" (formula "2") (term "0,0,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                              (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                              (rule "polySimp_elimOne" (formula "5") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1"))
                              (rule "polySimp_rightDist" (formula "3") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                              (rule "mul_literals" (formula "3") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                              (rule "polySimp_elimOne" (formula "1") (term "1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_4"))
                              (rule "simplifySelectOfAnon" (formula "3"))
                               (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "51")) (ifInst ""  (formula "29")))
                              (rule "inEqSimp_homoInEq0" (formula "4"))
                              (rule "polySimp_addComm1" (formula "4") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1"))
                              (rule "polySimp_rightDist" (formula "4") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                              (rule "mul_literals" (formula "4") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                              (rule "elementOfSetMinus" (formula "3") (term "0,0"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "ifthenelse_negated" (formula "3") (term "0"))
                              (rule "elementOfUnion" (formula "3") (term "0,0"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "applyEqReverse" (formula "4") (term "1,1") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "26"))
                              (rule "polySimp_rightDist" (formula "5") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "5") (term "0"))
                              (rule "polySimp_rightDist" (formula "5") (term "0,0,0"))
                              (rule "mul_literals" (formula "5") (term "0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "5") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "5") (term "0,0,0"))
                              (rule "add_literals" (formula "5") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor2b" (formula "5") (term "0,0"))
                              (rule "add_literals" (formula "5") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "5") (term "1,0,0"))
                              (rule "add_zero_right" (formula "5") (term "0,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "5"))
                              (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                              (rule "polySimp_elimOne" (formula "5") (term "0"))
                              (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_5"))
                              (rule "simplifySelectOfAnon" (formula "3"))
                               (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "52")) (ifInst ""  (formula "30")))
                              (rule "inEqSimp_homoInEq1" (formula "4"))
                              (rule "polySimp_addComm1" (formula "4") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1"))
                              (rule "polySimp_rightDist" (formula "4") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                              (rule "mul_literals" (formula "4") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                              (rule "elementOfSetMinus" (formula "3") (term "0,0"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "ifthenelse_negated" (formula "3") (term "0"))
                              (rule "elementOfUnion" (formula "3") (term "0,0"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "applyEqReverse" (formula "4") (term "1,1") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "27"))
                              (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "2") (term "0"))
                              (rule "polySimp_rightDist" (formula "2") (term "0,0,0"))
                              (rule "mul_literals" (formula "2") (term "0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "2") (term "0,0,0"))
                              (rule "add_literals" (formula "2") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor2b" (formula "2") (term "0,0"))
                              (rule "add_literals" (formula "2") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "2") (term "1,0,0"))
                              (rule "add_zero_right" (formula "2") (term "0,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
                              (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "1") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "shift_paren_or" (formula "32") (term "0,0"))
                              (rule "allLeft" (formula "48") (inst "t=i_1"))
                              (rule "inEqSimp_homoInEq1" (formula "48") (term "1,0"))
                              (rule "polySimp_addComm1" (formula "48") (term "0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "48") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "48") (term "1,1,0"))
                              (rule "polySimp_rightDist" (formula "48") (term "1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "48") (term "1,1,1,0"))
                              (rule "polySimp_elimOne" (formula "48") (term "1,1,1,0"))
                              (rule "polySimp_rightDist" (formula "48") (term "0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "48") (term "1,0,1,1,0"))
                              (rule "mul_literals" (formula "48") (term "0,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "48") (term "1,0,1,1,0"))
                              (rule "inEqSimp_contradInEq0" (formula "48") (term "1") (ifseqformula "11"))
                              (rule "inEqSimp_homoInEq1" (formula "48") (term "0,1"))
                              (rule "polySimp_mulComm0" (formula "48") (term "1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "48") (term "1,0,0,1"))
                              (rule "mul_literals" (formula "48") (term "0,1,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "48") (term "0,0,1"))
                              (rule "polySimp_addComm0" (formula "48") (term "0,0,0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "48") (term "0,0,1"))
                              (rule "add_literals" (formula "48") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "48") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "48") (term "0,0,1"))
                              (rule "leq_literals" (formula "48") (term "0,1"))
                               (builtin "One Step Simplification" (formula "48"))
                              (rule "inEqSimp_contradInEq1" (formula "48") (term "1") (ifseqformula "9"))
                              (rule "inEqSimp_homoInEq1" (formula "48") (term "0,1"))
                              (rule "polySimp_mulComm0" (formula "48") (term "1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "48") (term "1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "48") (term "0,1,0,0,1"))
                              (rule "mul_literals" (formula "48") (term "0,0,1,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "48") (term "0,0,1"))
                              (rule "polySimp_addComm1" (formula "48") (term "0,0,0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "48") (term "0,0,1"))
                              (rule "add_literals" (formula "48") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "48") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "48") (term "0,0,1"))
                              (rule "polySimp_addAssoc" (formula "48") (term "0,0,1"))
                              (rule "polySimp_addComm1" (formula "48") (term "0,0,0,1"))
                              (rule "add_literals" (formula "48") (term "0,0,0,0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "48") (term "0,0,1"))
                              (rule "add_literals" (formula "48") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "48") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "48") (term "0,0,1"))
                              (rule "leq_literals" (formula "48") (term "0,1"))
                               (builtin "One Step Simplification" (formula "48"))
                              (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "48"))
                              (rule "qeq_literals" (formula "10") (term "0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "closeFalse" (formula "10"))
                           )
                           (branch
                              (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "14"))
                               (builtin "One Step Simplification" (formula "13"))
                              (rule "true_left" (formula "13"))
                              (rule "shift_paren_or" (formula "25") (term "0,0"))
                              (rule "allLeft" (formula "41") (inst "t=i_1"))
                              (rule "inEqSimp_homoInEq1" (formula "41") (term "1,0"))
                              (rule "polySimp_addComm1" (formula "41") (term "0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "41") (term "1,1,0"))
                              (rule "polySimp_rightDist" (formula "41") (term "1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1,0"))
                              (rule "polySimp_elimOne" (formula "41") (term "1,1,1,0"))
                              (rule "polySimp_rightDist" (formula "41") (term "0,1,1,0"))
                              (rule "mul_literals" (formula "41") (term "0,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "41") (term "1,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "41") (term "1,0,1,1,0"))
                              (rule "inEqSimp_contradInEq1" (formula "41") (term "0,0") (ifseqformula "3"))
                              (rule "qeq_literals" (formula "41") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "41"))
                              (rule "inEqSimp_contradInEq1" (formula "41") (term "0") (ifseqformula "2"))
                              (rule "inEqSimp_homoInEq1" (formula "41") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "41") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "41") (term "0,1,0,0,0"))
                              (rule "mul_literals" (formula "41") (term "0,0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "41") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "41") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "41") (term "0,0,0"))
                              (rule "add_literals" (formula "41") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "41") (term "1,0,0,0"))
                              (rule "add_zero_right" (formula "41") (term "0,0,0"))
                              (rule "polySimp_addAssoc" (formula "41") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "41") (term "0,0,0,0"))
                              (rule "add_literals" (formula "41") (term "0,0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "41") (term "0,0,0"))
                              (rule "add_literals" (formula "41") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "41") (term "1,0,0,0"))
                              (rule "add_zero_right" (formula "41") (term "0,0,0"))
                              (rule "leq_literals" (formula "41") (term "0,0"))
                               (builtin "One Step Simplification" (formula "41"))
                              (rule "inEqSimp_contradInEq0" (formula "41") (ifseqformula "4"))
                              (rule "andLeft" (formula "41"))
                              (rule "inEqSimp_homoInEq1" (formula "41"))
                              (rule "polySimp_mulComm0" (formula "41") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "41") (term "1,0"))
                              (rule "mul_literals" (formula "41") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "41") (term "0"))
                              (rule "polySimp_addComm0" (formula "41") (term "0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "41") (term "0"))
                              (rule "add_literals" (formula "41") (term "1,1,0"))
                              (rule "times_zero_1" (formula "41") (term "1,0"))
                              (rule "add_zero_right" (formula "41") (term "0"))
                              (rule "leq_literals" (formula "41"))
                              (rule "closeFalse" (formula "41"))
                           )
                        )
                        (branch
                           (rule "replace_known_left" (formula "9") (term "0") (ifseqformula "10"))
                            (builtin "One Step Simplification" (formula "9"))
                           (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "9"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "true_left" (formula "11"))
                           (rule "shift_paren_or" (formula "22") (term "0,0"))
                           (rule "shift_paren_or" (formula "39") (term "0,0,0"))
                           (rule "equalityToElementOfRight" (formula "44") (inst "fv=fv") (inst "ov=ov"))
                            (builtin "One Step Simplification" (formula "44"))
                           (rule "allRight" (formula "44") (inst "sk=ov_0"))
                           (rule "allRight" (formula "44") (inst "sk=fv_0"))
                           (rule "notRight" (formula "44"))
                           (rule "elementOfIntersect" (formula "1"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                           (rule "elementOfSetMinus" (formula "2"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "notLeft" (formula "2"))
                           (rule "elementOfUnion" (formula "42"))
                            (builtin "One Step Simplification" (formula "42"))
                           (rule "closeTrue" (formula "42"))
                        )
                     )
                  )
                  (branch "CUT: classify_sk_0 >= 1 FALSE"
                      (builtin "One Step Simplification" (formula "31"))
                     (rule "true_left" (formula "31"))
                     (rule "inEqSimp_geqRight" (formula "43"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_subsumption0" (formula "30") (ifseqformula "1"))
                     (rule "leq_literals" (formula "30") (term "0"))
                      (builtin "One Step Simplification" (formula "30"))
                     (rule "true_left" (formula "30"))
                     (rule "inEqSimp_antiSymm" (formula "29") (ifseqformula "1"))
                     (rule "applyEq" (formula "22") (term "1,1") (ifseqformula "29"))
                     (rule "add_zero_right" (formula "22") (term "1"))
                     (rule "applyEqRigid" (formula "30") (term "0") (ifseqformula "29"))
                     (rule "qeq_literals" (formula "30"))
                     (rule "true_left" (formula "30"))
                     (rule "applyEqRigid" (formula "31") (term "0,2,0") (ifseqformula "29"))
                     (rule "applyEq" (formula "1") (term "0") (ifseqformula "29"))
                     (rule "leq_literals" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "applyEq" (formula "29") (term "0,1,1") (ifseqformula "28"))
                     (rule "times_zero_2" (formula "29") (term "1,1"))
                     (rule "add_literals" (formula "29") (term "1"))
                     (rule "applyEqRigid" (formula "20") (term "1,1") (ifseqformula "28"))
                     (rule "add_literals" (formula "20") (term "1"))
                     (rule "applyEqRigid" (formula "37") (term "0,1,0,1,1,0,0") (ifseqformula "27"))
                     (rule "mul_literals" (formula "37") (term "1,0,1,1,0,0"))
                     (rule "add_zero_right" (formula "37") (term "0,1,1,0,0"))
                     (rule "applyEq" (formula "39") (term "0,1,0,1,0,0,0,1,0") (ifseqformula "27"))
                     (rule "times_zero_2" (formula "39") (term "1,0,1,0,0,0,1,0"))
                     (rule "add_zero_right" (formula "39") (term "0,1,0,0,0,1,0"))
                     (rule "applyEq" (formula "23") (term "0,0,1,1,0,0") (ifseqformula "27"))
                     (rule "times_zero_2" (formula "23") (term "0,1,1,0,0"))
                     (rule "add_zero_left" (formula "23") (term "1,1,0,0"))
                     (rule "applyEqRigid" (formula "37") (term "0,1,0,1,1,0,0,1,0") (ifseqformula "27"))
                     (rule "mul_literals" (formula "37") (term "1,0,1,1,0,0,1,0"))
                     (rule "add_zero_right" (formula "37") (term "0,1,1,0,0,1,0"))
                     (rule "applyEq" (formula "23") (term "0,0,1,0,0,0,1,0") (ifseqformula "27"))
                     (rule "times_zero_2" (formula "23") (term "0,1,0,0,0,1,0"))
                     (rule "add_zero_left" (formula "23") (term "1,0,0,0,1,0"))
                     (rule "applyEqRigid" (formula "12") (term "0,1,0,3,0,0") (ifseqformula "27"))
                     (rule "times_zero_2" (formula "12") (term "1,0,3,0,0"))
                     (rule "add_literals" (formula "12") (term "0,3,0,0"))
                     (rule "applyEq" (formula "11") (term "0,1,0,3,0,1") (ifseqformula "27"))
                     (rule "times_zero_2" (formula "11") (term "1,0,3,0,1"))
                     (rule "add_literals" (formula "11") (term "0,3,0,1"))
                     (rule "applyEq" (formula "24") (term "0,1,0,0,2,0") (ifseqformula "27"))
                     (rule "mul_literals" (formula "24") (term "1,0,0,2,0"))
                     (rule "add_literals" (formula "24") (term "0,0,2,0"))
                     (rule "eqSymm" (formula "24"))
                     (rule "applyEqRigid" (formula "13") (term "0,1,0,1,1,0,0,1,0,0") (ifseqformula "27"))
                     (rule "mul_literals" (formula "13") (term "1,0,1,1,0,0,1,0,0"))
                     (rule "add_literals" (formula "13") (term "0,1,1,0,0,1,0,0"))
                     (rule "applyEqRigid" (formula "38") (term "0,1,0,1,1,0,0") (ifseqformula "27"))
                     (rule "times_zero_2" (formula "38") (term "1,0,1,1,0,0"))
                     (rule "add_literals" (formula "38") (term "0,1,1,0,0"))
                     (rule "applyEqRigid" (formula "11") (term "0,1,0,1,1,0,0,0") (ifseqformula "27"))
                     (rule "mul_literals" (formula "11") (term "1,0,1,1,0,0,0"))
                     (rule "add_zero_right" (formula "11") (term "0,1,1,0,0,0"))
                     (rule "applyEq" (formula "9") (term "1,0,1") (ifseqformula "27"))
                     (rule "add_zero_right" (formula "9") (term "0,1"))
                     (rule "applyEqRigid" (formula "39") (term "0,1,0,1,1,0,0") (ifseqformula "27"))
                     (rule "mul_literals" (formula "39") (term "1,0,1,1,0,0"))
                     (rule "add_zero_right" (formula "39") (term "0,1,1,0,0"))
                     (rule "applyEq" (formula "34") (term "0,0,1") (ifseqformula "27"))
                     (rule "times_zero_2" (formula "34") (term "0,1"))
                     (rule "add_zero_left" (formula "34") (term "1"))
                     (rule "applyEqRigid" (formula "13") (term "0,1,0,1,1,0,0,0") (ifseqformula "27"))
                     (rule "mul_literals" (formula "13") (term "1,0,1,1,0,0,0"))
                     (rule "add_zero_right" (formula "13") (term "0,1,1,0,0,0"))
                     (rule "applyEqRigid" (formula "12") (term "0,1,0,3,0,1") (ifseqformula "27"))
                     (rule "times_zero_2" (formula "12") (term "1,0,3,0,1"))
                     (rule "add_zero_right" (formula "12") (term "0,3,0,1"))
                     (rule "applyEqRigid" (formula "13") (term "0,1,0,1,1,0,0,1") (ifseqformula "27"))
                     (rule "times_zero_2" (formula "13") (term "1,0,1,1,0,0,1"))
                     (rule "add_zero_right" (formula "13") (term "0,1,1,0,0,1"))
                     (rule "applyEq" (formula "2") (term "1,0,1") (ifseqformula "27"))
                     (rule "add_zero_right" (formula "2") (term "0,1"))
                     (rule "applyEq" (formula "36") (term "0,0,1") (ifseqformula "27"))
                     (rule "times_zero_2" (formula "36") (term "0,1"))
                     (rule "add_zero_left" (formula "36") (term "1"))
                     (rule "applyEqRigid" (formula "47") (term "1") (ifseqformula "27"))
                     (rule "applyEqRigid" (formula "25") (term "0,0,1") (ifseqformula "27"))
                     (rule "times_zero_2" (formula "25") (term "0,1"))
                     (rule "add_zero_left" (formula "25") (term "1"))
                     (rule "applyEqRigid" (formula "21") (term "0,0,1") (ifseqformula "27"))
                     (rule "mul_literals" (formula "21") (term "0,1"))
                     (rule "add_zero_left" (formula "21") (term "1"))
                     (rule "applyEqRigid" (formula "14") (term "0,0,1") (ifseqformula "27"))
                     (rule "mul_literals" (formula "14") (term "0,1"))
                     (rule "add_zero_left" (formula "14") (term "1"))
                     (rule "applyEq" (formula "24") (term "0,1,0,0,2,0") (ifseqformula "27"))
                     (rule "mul_literals" (formula "24") (term "1,0,0,2,0"))
                     (rule "add_literals" (formula "24") (term "0,0,2,0"))
                     (rule "eqSymm" (formula "24"))
                     (rule "inEqSimp_subsumption1" (formula "28") (ifseqformula "32"))
                     (rule "leq_literals" (formula "28") (term "0"))
                      (builtin "One Step Simplification" (formula "28"))
                     (rule "true_left" (formula "28"))
                     (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "20"))
                     (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                     (rule "mul_literals" (formula "2") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "2") (term "0"))
                     (rule "add_literals" (formula "2") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                     (rule "polySimp_elimOne" (formula "2") (term "0"))
                     (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "20"))
                     (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                     (rule "mul_literals" (formula "9") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "9") (term "0"))
                     (rule "add_literals" (formula "9") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                     (rule "polySimp_elimOne" (formula "9") (term "0"))
                     (rule "nnf_imp2or" (formula "13") (term "0,1"))
                     (rule "onlyCreatedObjectsAreReferencedFinal" (formula "26") (term "1,0") (ifseqformula "15") (ifseqformula "17"))
                     (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "10"))
                      (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "41")))
                     (rule "true_left" (formula "26"))
                     (rule "nnf_notAnd" (formula "13") (term "0,0,1"))
                     (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,1"))
                     (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,1"))
                     (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,1"))
                     (rule "mul_literals" (formula "13") (term "0,1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,1"))
                     (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,1"))
                     (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0,1"))
                     (rule "add_zero_right" (formula "13") (term "0,0,0,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,1"))
                     (rule "mul_literals" (formula "13") (term "1,0,0,0,1"))
                     (rule "onlyCreatedObjectsAreReferencedFinal" (formula "22") (term "1") (ifseqformula "15") (ifseqformula "17"))
                     (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "42"))
                      (builtin "One Step Simplification" (formula "22"))
                     (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "22"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "applyEqReverse" (formula "6") (term "0") (ifseqformula "5"))
                     (rule "hideAuxiliaryEq" (formula "5"))
                     (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "21"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "applyEqReverse" (formula "5") (term "1,1") (ifseqformula "4"))
                     (rule "hideAuxiliaryEq" (formula "4"))
                     (rule "inEqSimp_homoInEq1" (formula "4"))
                     (rule "polySimp_addComm1" (formula "4") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1"))
                     (rule "polySimp_rightDist" (formula "4") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                     (rule "mul_literals" (formula "4") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                     (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "10") (term "0,0"))
                     (rule "wellFormedAnon" (formula "10") (term "1,0"))
                     (rule "replace_known_right" (formula "10") (term "0,0,0") (ifseqformula "41"))
                      (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "14")) (ifInst ""  (formula "15")) (ifInst ""  (formula "11")))
                     (rule "true_left" (formula "10"))
                     (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "10") (term "0,0") (inst "i=i"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "translateJavaAddInt" (formula "10") (term "0,2,1,1,0,0"))
                     (rule "translateJavaSubInt" (formula "10") (term "1,1,0,0,0"))
                     (rule "polySimp_elimSub" (formula "10") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "10") (term "1,1,1,0,0,0"))
                     (rule "polySimp_addComm0" (formula "10") (term "0,2,1,1,0,0"))
                     (rule "polySimp_addComm1" (formula "10") (term "1,1,0,0,0"))
                     (rule "add_literals" (formula "10") (term "0,1,1,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,0"))
                     (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,0"))
                     (rule "add_literals" (formula "10") (term "0,0,0,1,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,0"))
                     (rule "mul_literals" (formula "10") (term "0,1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,0"))
                     (rule "nnf_imp2or" (formula "10") (term "0,0"))
                     (rule "nnf_notAnd" (formula "10") (term "0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,0"))
                     (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,0"))
                     (rule "add_literals" (formula "10") (term "0,0,0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,0"))
                     (rule "mul_literals" (formula "10") (term "0,1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,0"))
                     (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "10") (term "0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,0"))
                     (rule "mul_literals" (formula "10") (term "1,0,0,0,0"))
                     (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "9") (term "0,1") (inst "j=j") (inst "i=i"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,1"))
                     (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,1"))
                     (rule "add_literals" (formula "9") (term "0,0,0,1,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,1,0,1"))
                     (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0,1,0,1"))
                     (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,1,0,1"))
                     (rule "add_literals" (formula "9") (term "0,0,0,1,0,0,1,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,1,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,1"))
                     (rule "mul_literals" (formula "9") (term "0,1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,1,0,1"))
                     (rule "mul_literals" (formula "9") (term "0,1,1,0,0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,1,0,1"))
                     (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,1,0,1"))
                     (rule "nnf_imp2or" (formula "9") (term "0,1"))
                     (rule "nnf_notAnd" (formula "9") (term "0,0,1"))
                     (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,1"))
                     (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,1"))
                     (rule "add_literals" (formula "9") (term "0,0,0,1,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,1"))
                     (rule "mul_literals" (formula "9") (term "0,1,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,1"))
                     (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,1"))
                     (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0,1"))
                     (rule "add_zero_right" (formula "9") (term "0,0,0,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,1"))
                     (rule "mul_literals" (formula "9") (term "1,0,0,0,1"))
                     (rule "nnf_imp2or" (formula "9") (term "0,1,0,1"))
                     (rule "nnf_notAnd" (formula "9") (term "0,0,1,0,1"))
                     (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,1,0,1"))
                     (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0,1,0,1"))
                     (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,1,0,1"))
                     (rule "add_literals" (formula "9") (term "0,0,0,1,0,0,1,0,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,1,0,1"))
                     (rule "mul_literals" (formula "9") (term "0,1,1,0,0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,1,0,1"))
                     (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,1,0,1"))
                     (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0,1,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,1,0,1"))
                     (rule "mul_literals" (formula "9") (term "0,1,0,0,0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0,1,0,1"))
                     (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0,1,0,1"))
                     (rule "commute_or" (formula "34") (term "0,0,1,0"))
                     (rule "commute_or" (formula "10") (term "0,0,1,0,0"))
                     (rule "cut_direct" (formula "40") (term "0"))
                     (branch "CUT: self.sorted_splitters.* cap allLocs setMinus self.sorted_splitters.* cup self.tree.tree.* = {} TRUE"
                         (builtin "One Step Simplification" (formula "41"))
                        (rule "all_pull_out3" (formula "22") (term "0"))
                        (rule "all_pull_out3" (formula "36") (term "0"))
                        (rule "shift_paren_or" (formula "22") (term "0,0"))
                        (rule "shift_paren_or" (formula "36") (term "0,0"))
                        (rule "impLeft" (formula "10"))
                        (branch
                           (rule "allRight" (formula "37") (inst "sk=i_1"))
                           (rule "orRight" (formula "37"))
                           (rule "orRight" (formula "37"))
                           (rule "inEqSimp_geqRight" (formula "39"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "inEqSimp_geqRight" (formula "39"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_leqRight" (formula "39"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                           (rule "mul_literals" (formula "3") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_2"))
                           (rule "simplifySelectOfAnon" (formula "3"))
                            (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "42")) (ifInst ""  (formula "23")))
                           (rule "disjointAllFields" (formula "3") (term "0,0") (ifseqformula "5"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "inEqSimp_homoInEq0" (formula "3"))
                           (rule "polySimp_addComm1" (formula "3") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "mul_literals" (formula "3") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                           (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_3"))
                           (rule "simplifySelectOfAnon" (formula "3"))
                            (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "42")) (ifInst ""  (formula "23")))
                           (rule "disjointAllFields" (formula "3") (term "0,0") (ifseqformula "5"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "inEqSimp_homoInEq1" (formula "3"))
                           (rule "polySimp_addComm1" (formula "3") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                           (rule "mul_literals" (formula "3") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                           (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "20"))
                           (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                           (rule "mul_literals" (formula "2") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "add_literals" (formula "2") (term "0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "impLeft" (formula "14"))
                           (branch
                              (rule "allRight" (formula "40") (inst "sk=i_2"))
                              (rule "orRight" (formula "40"))
                              (rule "orRight" (formula "40"))
                              (rule "allRight" (formula "42") (inst "sk=j_1"))
                              (rule "orRight" (formula "42"))
                              (rule "orRight" (formula "42"))
                              (rule "inEqSimp_leqRight" (formula "40"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_geqRight" (formula "41"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "inEqSimp_geqRight" (formula "44"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "inEqSimp_leqRight" (formula "44"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0"))
                              (rule "inEqSimp_geqRight" (formula "44"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                              (rule "polySimp_elimOne" (formula "4") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1"))
                              (rule "polySimp_rightDist" (formula "3") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                              (rule "mul_literals" (formula "3") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "1"))
                              (rule "polySimp_elimOne" (formula "2") (term "1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_4"))
                              (rule "simplifySelectOfAnon" (formula "3"))
                               (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "47")) (ifInst ""  (formula "28")))
                              (rule "disjointAllFields" (formula "3") (term "0,0") (ifseqformula "11"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "inEqSimp_homoInEq0" (formula "3"))
                              (rule "polySimp_addComm1" (formula "3") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1"))
                              (rule "polySimp_rightDist" (formula "3") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                              (rule "mul_literals" (formula "3") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                              (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "25"))
                              (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                              (rule "mul_literals" (formula "4") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "4") (term "0"))
                              (rule "add_literals" (formula "4") (term "0,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                              (rule "polySimp_elimOne" (formula "4") (term "0"))
                              (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_5"))
                              (rule "simplifySelectOfAnon" (formula "3"))
                               (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "48")) (ifInst ""  (formula "29")))
                              (rule "disjointAllFields" (formula "3") (term "0,0") (ifseqformula "12"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "inEqSimp_homoInEq1" (formula "3"))
                              (rule "polySimp_addComm1" (formula "3") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1"))
                              (rule "polySimp_rightDist" (formula "3") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                              (rule "mul_literals" (formula "3") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                              (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "26"))
                              (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                              (rule "mul_literals" (formula "1") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "1"))
                              (rule "polySimp_mulComm0" (formula "3") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "3") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                              (rule "polySimp_elimOne" (formula "3") (term "0"))
                              (rule "shift_paren_or" (formula "31") (term "0,0,0"))
                              (rule "shift_paren_or" (formula "45") (term "0,0,0"))
                              (rule "equalityToElementOfRight" (formula "50") (inst "fv=fv") (inst "ov=ov"))
                               (builtin "One Step Simplification" (formula "50"))
                              (rule "allRight" (formula "50") (inst "sk=ov_0"))
                              (rule "allRight" (formula "50") (inst "sk=fv_0"))
                              (rule "notRight" (formula "50"))
                              (rule "elementOfIntersect" (formula "1"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                              (rule "elementOfSetMinus" (formula "2"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "notLeft" (formula "2"))
                              (rule "elementOfUnion" (formula "48"))
                               (builtin "One Step Simplification" (formula "48"))
                              (rule "closeTrue" (formula "48"))
                           )
                           (branch
                              (rule "shift_paren_or" (formula "25") (term "0,0,0"))
                              (rule "shift_paren_or" (formula "39") (term "0,0,0"))
                              (rule "equalityToElementOfRight" (formula "44") (inst "fv=fv") (inst "ov=ov"))
                               (builtin "One Step Simplification" (formula "44"))
                              (rule "allRight" (formula "44") (inst "sk=ov_0"))
                              (rule "allRight" (formula "44") (inst "sk=fv_0"))
                              (rule "notRight" (formula "44"))
                              (rule "elementOfIntersect" (formula "1"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                              (rule "elementOfSetMinus" (formula "2"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "notLeft" (formula "2"))
                              (rule "elementOfUnion" (formula "42"))
                               (builtin "One Step Simplification" (formula "42"))
                              (rule "closeTrue" (formula "42"))
                           )
                        )
                        (branch
                           (rule "impLeft" (formula "11"))
                           (branch
                              (rule "allRight" (formula "37") (inst "sk=i_1"))
                              (rule "orRight" (formula "37"))
                              (rule "orRight" (formula "37"))
                              (rule "allRight" (formula "39") (inst "sk=j_1"))
                              (rule "orRight" (formula "39"))
                              (rule "orRight" (formula "39"))
                              (rule "inEqSimp_geqRight" (formula "38"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "inEqSimp_leqRight" (formula "38"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_geqRight" (formula "41"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "inEqSimp_geqRight" (formula "40"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "inEqSimp_leqRight" (formula "41"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                              (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                              (rule "polySimp_elimOne" (formula "5") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1"))
                              (rule "polySimp_rightDist" (formula "3") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                              (rule "mul_literals" (formula "3") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                              (rule "polySimp_elimOne" (formula "1") (term "1"))
                              (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_2"))
                              (rule "simplifySelectOfAnon" (formula "3"))
                               (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "44")) (ifInst ""  (formula "25")))
                              (rule "disjointAllFields" (formula "3") (term "0,0") (ifseqformula "7"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "inEqSimp_homoInEq0" (formula "3"))
                              (rule "polySimp_addComm1" (formula "3") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1"))
                              (rule "polySimp_rightDist" (formula "3") (term "1"))
                              (rule "mul_literals" (formula "3") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                              (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "22"))
                              (rule "polySimp_rightDist" (formula "5") (term "0,0"))
                              (rule "mul_literals" (formula "5") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "5") (term "0"))
                              (rule "add_literals" (formula "5") (term "0,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "5"))
                              (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                              (rule "polySimp_elimOne" (formula "5") (term "0"))
                              (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_3"))
                              (rule "simplifySelectOfAnon" (formula "3"))
                               (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "45")) (ifInst ""  (formula "26")))
                              (rule "disjointAllFields" (formula "3") (term "0,0") (ifseqformula "8"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "inEqSimp_homoInEq1" (formula "3"))
                              (rule "polySimp_addComm1" (formula "3") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1"))
                              (rule "polySimp_rightDist" (formula "3") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                              (rule "mul_literals" (formula "3") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                              (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "23"))
                              (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                              (rule "mul_literals" (formula "2") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "2") (term "0"))
                              (rule "add_literals" (formula "2") (term "0,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
                              (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "1") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "shift_paren_or" (formula "28") (term "0,0,0"))
                              (rule "shift_paren_or" (formula "42") (term "0,0,0"))
                              (rule "commute_or" (formula "17") (term "0,0,1,0"))
                              (rule "equalityToElementOfRight" (formula "47") (inst "fv=fv") (inst "ov=ov"))
                               (builtin "One Step Simplification" (formula "47"))
                              (rule "allRight" (formula "47") (inst "sk=ov_0"))
                              (rule "allRight" (formula "47") (inst "sk=fv_0"))
                              (rule "notRight" (formula "47"))
                              (rule "elementOfIntersect" (formula "1"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                              (rule "elementOfSetMinus" (formula "2"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "notLeft" (formula "2"))
                              (rule "elementOfUnion" (formula "45"))
                               (builtin "One Step Simplification" (formula "45"))
                              (rule "closeTrue" (formula "45"))
                           )
                           (branch
                              (rule "shift_paren_or" (formula "22") (term "0,0,0"))
                              (rule "shift_paren_or" (formula "36") (term "0,0,0"))
                              (rule "commute_or" (formula "10") (term "0,0,1,0"))
                              (rule "equalityToElementOfRight" (formula "41") (inst "fv=fv") (inst "ov=ov"))
                               (builtin "One Step Simplification" (formula "41"))
                              (rule "allRight" (formula "41") (inst "sk=ov_0"))
                              (rule "allRight" (formula "41") (inst "sk=fv_0"))
                              (rule "notRight" (formula "41"))
                              (rule "elementOfIntersect" (formula "1"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                              (rule "elementOfSetMinus" (formula "2"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "notLeft" (formula "2"))
                              (rule "elementOfUnion" (formula "39"))
                               (builtin "One Step Simplification" (formula "39"))
                              (rule "closeTrue" (formula "39"))
                           )
                        )
                     )
                     (branch "CUT: self.sorted_splitters.* cap allLocs setMinus self.sorted_splitters.* cup self.tree.tree.* = {} FALSE"
                         (builtin "One Step Simplification" (formula "41"))
                        (rule "false_right" (formula "41"))
                        (rule "all_pull_out3" (formula "21") (term "0"))
                        (rule "all_pull_out3" (formula "35") (term "0"))
                        (rule "shift_paren_or" (formula "21") (term "0,0"))
                        (rule "shift_paren_or" (formula "35") (term "0,0"))
                        (rule "impLeft" (formula "9"))
                        (branch
                           (rule "allRight" (formula "36") (inst "sk=i_1"))
                           (rule "orRight" (formula "36"))
                           (rule "orRight" (formula "36"))
                           (rule "inEqSimp_geqRight" (formula "38"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "inEqSimp_geqRight" (formula "38"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_leqRight" (formula "38"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "mul_literals" (formula "3") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_2"))
                           (rule "simplifySelectOfAnon" (formula "3"))
                            (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "41")) (ifInst ""  (formula "22")))
                           (rule "inEqSimp_homoInEq0" (formula "4"))
                           (rule "polySimp_addComm1" (formula "4") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1"))
                           (rule "polySimp_rightDist" (formula "4") (term "1"))
                           (rule "mul_literals" (formula "4") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                           (rule "elementOfSetMinus" (formula "3") (term "0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "ifthenelse_negated" (formula "3") (term "0"))
                           (rule "elementOfUnion" (formula "3") (term "0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "applyEqReverse" (formula "4") (term "1,1") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_3"))
                           (rule "simplifySelectOfAnon" (formula "3"))
                            (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "41")) (ifInst ""  (formula "22")))
                           (rule "inEqSimp_homoInEq1" (formula "4"))
                           (rule "polySimp_addComm1" (formula "4") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1"))
                           (rule "polySimp_rightDist" (formula "4") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                           (rule "mul_literals" (formula "4") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                           (rule "elementOfSetMinus" (formula "3") (term "0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "ifthenelse_negated" (formula "3") (term "0"))
                           (rule "elementOfUnion" (formula "3") (term "0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "applyEqReverse" (formula "4") (term "1,1") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "19"))
                           (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                           (rule "mul_literals" (formula "2") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "add_literals" (formula "2") (term "0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "impLeft" (formula "13"))
                           (branch
                              (rule "allRight" (formula "39") (inst "sk=i_2"))
                              (rule "orRight" (formula "39"))
                              (rule "orRight" (formula "39"))
                              (rule "allRight" (formula "41") (inst "sk=j_1"))
                              (rule "orRight" (formula "41"))
                              (rule "orRight" (formula "41"))
                              (rule "inEqSimp_geqRight" (formula "40"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "inEqSimp_leqRight" (formula "40"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_geqRight" (formula "43"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "inEqSimp_leqRight" (formula "43"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0"))
                              (rule "inEqSimp_geqRight" (formula "43"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                              (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                              (rule "polySimp_elimOne" (formula "5") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1"))
                              (rule "polySimp_rightDist" (formula "3") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                              (rule "mul_literals" (formula "3") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "1"))
                              (rule "polySimp_elimOne" (formula "2") (term "1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_4"))
                              (rule "simplifySelectOfAnon" (formula "3"))
                               (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "46")) (ifInst ""  (formula "27")))
                              (rule "inEqSimp_homoInEq0" (formula "4"))
                              (rule "polySimp_addComm1" (formula "4") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1"))
                              (rule "polySimp_rightDist" (formula "4") (term "1"))
                              (rule "mul_literals" (formula "4") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                              (rule "elementOfSetMinus" (formula "3") (term "0,0"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "ifthenelse_negated" (formula "3") (term "0"))
                              (rule "elementOfUnion" (formula "3") (term "0,0"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "applyEqReverse" (formula "4") (term "1,1") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "24"))
                              (rule "polySimp_rightDist" (formula "5") (term "0,0"))
                              (rule "mul_literals" (formula "5") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "5") (term "0"))
                              (rule "add_literals" (formula "5") (term "0,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "5"))
                              (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                              (rule "polySimp_elimOne" (formula "5") (term "0"))
                              (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_5"))
                              (rule "simplifySelectOfAnon" (formula "3"))
                               (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "47")) (ifInst ""  (formula "28")))
                              (rule "inEqSimp_homoInEq1" (formula "4"))
                              (rule "polySimp_addComm1" (formula "4") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1"))
                              (rule "polySimp_rightDist" (formula "4") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                              (rule "mul_literals" (formula "4") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                              (rule "elementOfSetMinus" (formula "3") (term "0,0"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "ifthenelse_negated" (formula "3") (term "0"))
                              (rule "elementOfUnion" (formula "3") (term "0,0"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "applyEqReverse" (formula "4") (term "1,1") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "25"))
                              (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                              (rule "mul_literals" (formula "1") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "1"))
                              (rule "polySimp_mulComm0" (formula "3") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "3") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                              (rule "polySimp_elimOne" (formula "3") (term "0"))
                              (rule "shift_paren_or" (formula "30") (term "0,0,0"))
                              (rule "shift_paren_or" (formula "44") (term "0,0,0"))
                              (rule "equalityToElementOfRight" (formula "49") (inst "fv=fv") (inst "ov=ov"))
                               (builtin "One Step Simplification" (formula "49"))
                              (rule "allRight" (formula "49") (inst "sk=ov_0"))
                              (rule "allRight" (formula "49") (inst "sk=fv_0"))
                              (rule "notRight" (formula "49"))
                              (rule "elementOfIntersect" (formula "1"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                              (rule "elementOfSetMinus" (formula "2"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "notLeft" (formula "2"))
                              (rule "elementOfUnion" (formula "47"))
                               (builtin "One Step Simplification" (formula "47"))
                              (rule "closeTrue" (formula "47"))
                           )
                           (branch
                              (rule "shift_paren_or" (formula "24") (term "0,0,0"))
                              (rule "shift_paren_or" (formula "38") (term "0,0,0"))
                              (rule "equalityToElementOfRight" (formula "43") (inst "fv=fv") (inst "ov=ov"))
                               (builtin "One Step Simplification" (formula "43"))
                              (rule "allRight" (formula "43") (inst "sk=ov_0"))
                              (rule "allRight" (formula "43") (inst "sk=fv_0"))
                              (rule "notRight" (formula "43"))
                              (rule "elementOfIntersect" (formula "1"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                              (rule "elementOfSetMinus" (formula "2"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "notLeft" (formula "2"))
                              (rule "elementOfUnion" (formula "41"))
                               (builtin "One Step Simplification" (formula "41"))
                              (rule "closeTrue" (formula "41"))
                           )
                        )
                        (branch
                           (rule "impLeft" (formula "10"))
                           (branch
                              (rule "allRight" (formula "36") (inst "sk=i_1"))
                              (rule "orRight" (formula "36"))
                              (rule "orRight" (formula "36"))
                              (rule "allRight" (formula "38") (inst "sk=j_1"))
                              (rule "orRight" (formula "38"))
                              (rule "orRight" (formula "38"))
                              (rule "inEqSimp_leqRight" (formula "36"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_geqRight" (formula "37"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "inEqSimp_geqRight" (formula "40"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "inEqSimp_leqRight" (formula "40"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                              (rule "polySimp_elimOne" (formula "4") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1"))
                              (rule "polySimp_rightDist" (formula "3") (term "1"))
                              (rule "mul_literals" (formula "3") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                              (rule "polySimp_elimOne" (formula "1") (term "1"))
                              (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_2"))
                              (rule "simplifySelectOfAnon" (formula "3"))
                               (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "43")) (ifInst ""  (formula "24")))
                              (rule "inEqSimp_homoInEq0" (formula "4"))
                              (rule "polySimp_addComm1" (formula "4") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1"))
                              (rule "polySimp_rightDist" (formula "4") (term "1"))
                              (rule "mul_literals" (formula "4") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                              (rule "elementOfSetMinus" (formula "3") (term "0,0"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "ifthenelse_negated" (formula "3") (term "0"))
                              (rule "elementOfUnion" (formula "3") (term "0,0"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "applyEqReverse" (formula "4") (term "1,1") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "21"))
                              (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                              (rule "mul_literals" (formula "4") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "4") (term "0"))
                              (rule "add_literals" (formula "4") (term "0,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                              (rule "polySimp_elimOne" (formula "4") (term "0"))
                              (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_3"))
                              (rule "simplifySelectOfAnon" (formula "3"))
                               (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "44")) (ifInst ""  (formula "25")))
                              (rule "inEqSimp_homoInEq1" (formula "4"))
                              (rule "polySimp_addComm1" (formula "4") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1"))
                              (rule "polySimp_rightDist" (formula "4") (term "1"))
                              (rule "mul_literals" (formula "4") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                              (rule "elementOfSetMinus" (formula "3") (term "0,0"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "ifthenelse_negated" (formula "3") (term "0"))
                              (rule "elementOfUnion" (formula "3") (term "0,0"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "applyEqReverse" (formula "4") (term "1,1") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "22"))
                              (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                              (rule "mul_literals" (formula "2") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "2") (term "0"))
                              (rule "add_literals" (formula "2") (term "0,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
                              (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "1") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "shift_paren_or" (formula "27") (term "0,0,0"))
                              (rule "shift_paren_or" (formula "41") (term "0,0,0"))
                              (rule "commute_or" (formula "16") (term "0,0,1,0"))
                              (rule "equalityToElementOfRight" (formula "46") (inst "fv=fv") (inst "ov=ov"))
                               (builtin "One Step Simplification" (formula "46"))
                              (rule "allRight" (formula "46") (inst "sk=ov_0"))
                              (rule "allRight" (formula "46") (inst "sk=fv_0"))
                              (rule "notRight" (formula "46"))
                              (rule "elementOfIntersect" (formula "1"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                              (rule "elementOfSetMinus" (formula "2"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "notLeft" (formula "2"))
                              (rule "elementOfUnion" (formula "44"))
                               (builtin "One Step Simplification" (formula "44"))
                              (rule "closeTrue" (formula "44"))
                           )
                           (branch
                              (rule "shift_paren_or" (formula "21") (term "0,0,0"))
                              (rule "shift_paren_or" (formula "35") (term "0,0,0"))
                              (rule "commute_or" (formula "9") (term "0,0,1,0"))
                              (rule "equalityToElementOfRight" (formula "40") (inst "fv=fv") (inst "ov=ov"))
                               (builtin "One Step Simplification" (formula "40"))
                              (rule "allRight" (formula "40") (inst "sk=ov_0"))
                              (rule "allRight" (formula "40") (inst "sk=fv_0"))
                              (rule "notRight" (formula "40"))
                              (rule "elementOfIntersect" (formula "1"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                              (rule "elementOfSetMinus" (formula "2"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "notLeft" (formula "2"))
                              (rule "elementOfUnion" (formula "38"))
                               (builtin "One Step Simplification" (formula "38"))
                              (rule "closeTrue" (formula "38"))
                           )
                        )
                     )
                  )
               )
               (branch "CUT: self.tree.<created> = TRUE FALSE"
                   (builtin "One Step Simplification" (formula "38"))
                  (rule "false_right" (formula "38"))
                  (rule "replace_known_right" (formula "38") (term "0,1") (ifseqformula "37"))
                   (builtin "One Step Simplification" (formula "38"))
                  (rule "cut_direct" (formula "21") (term "0"))
                  (branch "CUT: classify_sk_0 >= 1 TRUE"
                      (builtin "One Step Simplification" (formula "22"))
                     (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "21"))
                     (rule "leq_literals" (formula "18") (term "0"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "true_left" (formula "18"))
                     (rule "nnf_imp2or" (formula "3") (term "0,1"))
                     (rule "nnf_notAnd" (formula "3") (term "0,0,1"))
                     (rule "inEqSimp_notLeq" (formula "3") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "3") (term "0,1,0,0,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0,0,1,0,0,1"))
                     (rule "mul_literals" (formula "3") (term "0,0,1,0,0,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "3") (term "1,0,1,0,0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0,0,0,1,0,0,1"))
                     (rule "add_literals" (formula "3") (term "0,0,0,0,1,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "3") (term "1,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "3") (term "0,1,1,0,0,1"))
                     (rule "mul_literals" (formula "3") (term "0,0,1,1,0,0,1"))
                     (rule "inEqSimp_notGeq" (formula "3") (term "0,0,0,1"))
                     (rule "times_zero_1" (formula "3") (term "1,0,0,0,0,0,1"))
                     (rule "add_zero_right" (formula "3") (term "0,0,0,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "0,0,0,1"))
                     (rule "mul_literals" (formula "3") (term "1,0,0,0,1"))
                     (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "1") (term "0,1"))
                     (rule "wellFormedAnon" (formula "1") (term "1,0"))
                     (rule "replace_known_left" (formula "1") (term "0,1,0") (ifseqformula "6"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "36")) (ifInst ""  (formula "7")))
                     (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "2") (term "0,1") (inst "j=j") (inst "i=i"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "2") (term "0,1,0,0,1,0,0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0,0,1,0,0,1,0,1"))
                     (rule "mul_literals" (formula "2") (term "0,0,1,0,0,1,0,0,1,0,1"))
                     (rule "polySimp_elimOne" (formula "2") (term "1,0,1,0,0,1,0,0,1,0,1"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,1,0,1"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0,1,0,1"))
                     (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0,1,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "2") (term "0,1,0,0,1,0,0,1"))
                     (rule "mul_literals" (formula "2") (term "0,0,1,0,0,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0,0,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "2") (term "1,0,1,0,0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0,1"))
                     (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,1,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,1,0,1"))
                     (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "2") (term "0,1,1,0,0,1,0,1"))
                     (rule "mul_literals" (formula "2") (term "0,0,1,1,0,0,1,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "2") (term "0,1,1,0,0,1"))
                     (rule "mul_literals" (formula "2") (term "0,0,1,1,0,0,1"))
                     (rule "nnf_imp2or" (formula "2") (term "0,1"))
                     (rule "nnf_notAnd" (formula "2") (term "0,0,1"))
                     (rule "inEqSimp_notLeq" (formula "2") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "2") (term "0,1,0,0,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0,0,1,0,0,1"))
                     (rule "mul_literals" (formula "2") (term "0,0,1,0,0,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "2") (term "1,0,1,0,0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0,1"))
                     (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "2") (term "0,1,1,0,0,1"))
                     (rule "mul_literals" (formula "2") (term "0,0,1,1,0,0,1"))
                     (rule "inEqSimp_notGeq" (formula "2") (term "0,0,0,1"))
                     (rule "mul_literals" (formula "2") (term "1,0,0,0,0,0,1"))
                     (rule "add_zero_right" (formula "2") (term "0,0,0,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0,1"))
                     (rule "mul_literals" (formula "2") (term "1,0,0,0,1"))
                     (rule "nnf_imp2or" (formula "2") (term "0,1,0,1"))
                     (rule "nnf_notAnd" (formula "2") (term "0,0,1,0,1"))
                     (rule "inEqSimp_notLeq" (formula "2") (term "1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "2") (term "0,1,0,0,1,0,0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0,0,1,0,0,1,0,1"))
                     (rule "mul_literals" (formula "2") (term "0,0,1,0,0,1,0,0,1,0,1"))
                     (rule "polySimp_elimOne" (formula "2") (term "1,0,1,0,0,1,0,0,1,0,1"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,1,0,1"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0,1,0,1"))
                     (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0,1,0,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,1,0,1"))
                     (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "2") (term "0,1,1,0,0,1,0,1"))
                     (rule "mul_literals" (formula "2") (term "0,0,1,1,0,0,1,0,1"))
                     (rule "inEqSimp_notGeq" (formula "2") (term "0,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0,0,1,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0,0,1,0,1"))
                     (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0,1"))
                     (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0,0,1,0,1"))
                     (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "3") (term "0,1"))
                     (rule "wellFormedAnon" (formula "3") (term "1,0"))
                     (rule "replace_known_left" (formula "3") (term "1") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "37")) (ifInst ""  (formula "7")) (ifInst ""  (formula "8")))
                     (rule "true_left" (formula "3"))
                     (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "3") (term "0,0") (inst "i=i"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "translateJavaAddInt" (formula "3") (term "0,2,1,1,0,0"))
                     (rule "translateJavaSubInt" (formula "3") (term "1,1,0,0,0"))
                     (rule "polySimp_elimSub" (formula "3") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "3") (term "1,1,1,0,0,0"))
                     (rule "polySimp_addComm0" (formula "3") (term "0,2,1,1,0,0"))
                     (rule "polySimp_addComm1" (formula "3") (term "1,1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "3") (term "0,1,1,0,0,0"))
                     (rule "add_literals" (formula "3") (term "0,0,1,1,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "3") (term "0,1,0,0,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0,0,1,0,0,0"))
                     (rule "mul_literals" (formula "3") (term "0,0,1,0,0,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "3") (term "1,0,1,0,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0,0,0,1,0,0,0"))
                     (rule "add_literals" (formula "3") (term "0,0,0,0,1,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "3") (term "1,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "3") (term "0,1,1,0,0,0"))
                     (rule "mul_literals" (formula "3") (term "0,0,1,1,0,0,0"))
                     (rule "nnf_imp2or" (formula "3") (term "0,0"))
                     (rule "nnf_notAnd" (formula "3") (term "0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "3") (term "0,0,0,0"))
                     (rule "times_zero_1" (formula "3") (term "1,0,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "3") (term "0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "0,0,0,0"))
                     (rule "mul_literals" (formula "3") (term "1,0,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "3") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "3") (term "0,1,0,0,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0,0,1,0,0,0"))
                     (rule "mul_literals" (formula "3") (term "0,0,1,0,0,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "3") (term "1,0,1,0,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0,0,0,1,0,0,0"))
                     (rule "add_literals" (formula "3") (term "0,0,0,0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "3") (term "1,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "3") (term "0,1,1,0,0,0"))
                     (rule "mul_literals" (formula "3") (term "0,0,1,1,0,0,0"))
                     (rule "onlyCreatedObjectsAreReferencedFinal" (formula "18") (term "1,0") (ifseqformula "6") (ifseqformula "8"))
                     (rule "replace_known_right" (formula "18") (term "1") (ifseqformula "39"))
                      (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "36")))
                     (rule "closeFalse" (formula "18"))
                  )
                  (branch "CUT: classify_sk_0 >= 1 FALSE"
                      (builtin "One Step Simplification" (formula "21"))
                     (rule "true_left" (formula "21"))
                     (rule "inEqSimp_geqRight" (formula "33"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_subsumption0" (formula "20") (ifseqformula "1"))
                     (rule "leq_literals" (formula "20") (term "0"))
                      (builtin "One Step Simplification" (formula "20"))
                     (rule "true_left" (formula "20"))
                     (rule "inEqSimp_antiSymm" (formula "19") (ifseqformula "1"))
                     (rule "applyEqRigid" (formula "21") (term "0,1,1") (ifseqformula "19"))
                     (rule "mul_literals" (formula "21") (term "1,1"))
                     (rule "add_zero_right" (formula "21") (term "1"))
                     (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "19"))
                     (rule "leq_literals" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "applyEq" (formula "11") (term "1,1") (ifseqformula "18"))
                     (rule "add_literals" (formula "11") (term "1"))
                     (rule "applyEq" (formula "21") (term "0,2,0") (ifseqformula "18"))
                     (rule "applyEq" (formula "10") (term "1,1") (ifseqformula "18"))
                     (rule "add_zero_right" (formula "10") (term "1"))
                     (rule "applyEq" (formula "18") (term "0") (ifseqformula "17"))
                     (rule "qeq_literals" (formula "18"))
                     (rule "true_left" (formula "18"))
                     (rule "applyEq" (formula "38") (term "1") (ifseqformula "17"))
                     (rule "applyEqRigid" (formula "3") (term "0,1,0,1,1,0,0,0") (ifseqformula "17"))
                     (rule "times_zero_2" (formula "3") (term "1,0,1,1,0,0,0"))
                     (rule "add_zero_right" (formula "3") (term "0,1,1,0,0,0"))
                     (rule "applyEq" (formula "13") (term "0,0,1,1,0,0") (ifseqformula "17"))
                     (rule "times_zero_2" (formula "13") (term "0,1,1,0,0"))
                     (rule "add_zero_left" (formula "13") (term "1,1,0,0"))
                     (rule "applyEqRigid" (formula "1") (term "0,1,0,1,1,0,0,0") (ifseqformula "17"))
                     (rule "times_zero_2" (formula "1") (term "1,0,1,1,0,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,1,1,0,0,0"))
                     (rule "applyEq" (formula "14") (term "0,1,0,0,2,0") (ifseqformula "17"))
                     (rule "mul_literals" (formula "14") (term "1,0,0,2,0"))
                     (rule "add_zero_right" (formula "14") (term "0,0,2,0"))
                     (rule "eqSymm" (formula "14"))
                     (rule "applyEq" (formula "26") (term "0,0,1") (ifseqformula "17"))
                     (rule "times_zero_2" (formula "26") (term "0,1"))
                     (rule "add_zero_left" (formula "26") (term "1"))
                     (rule "applyEq" (formula "3") (term "0,1,0,1,1,0,0,1") (ifseqformula "17"))
                     (rule "times_zero_2" (formula "3") (term "1,0,1,1,0,0,1"))
                     (rule "add_zero_right" (formula "3") (term "0,1,1,0,0,1"))
                     (rule "applyEq" (formula "35") (term "0,1,0,1,1,0,0,1,0,0") (ifseqformula "17"))
                     (rule "times_zero_2" (formula "35") (term "1,0,1,1,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "35") (term "0,1,1,0,0,1,0,0"))
                     (rule "applyEqRigid" (formula "27") (term "0,1,0,1,1,0,0") (ifseqformula "17"))
                     (rule "times_zero_2" (formula "27") (term "1,0,1,1,0,0"))
                     (rule "add_zero_right" (formula "27") (term "0,1,1,0,0"))
                     (rule "applyEqRigid" (formula "13") (term "0,0,1,0,0,0,1,0") (ifseqformula "17"))
                     (rule "times_zero_2" (formula "13") (term "0,1,0,0,0,1,0"))
                     (rule "add_zero_left" (formula "13") (term "1,0,0,0,1,0"))
                     (rule "applyEqRigid" (formula "3") (term "0,1,0,1,1,0,0,1,0,0") (ifseqformula "17"))
                     (rule "times_zero_2" (formula "3") (term "1,0,1,1,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "3") (term "0,1,1,0,0,1,0,0"))
                     (rule "applyEq" (formula "1") (term "0,1,0,3,0,1") (ifseqformula "17"))
                     (rule "times_zero_2" (formula "1") (term "1,0,3,0,1"))
                     (rule "add_zero_right" (formula "1") (term "0,3,0,1"))
                     (rule "applyEq" (formula "24") (term "0,0,1") (ifseqformula "17"))
                     (rule "times_zero_2" (formula "24") (term "0,1"))
                     (rule "add_zero_left" (formula "24") (term "1"))
                     (rule "applyEq" (formula "29") (term "0,1,0,1,1,0,0") (ifseqformula "17"))
                     (rule "times_zero_2" (formula "29") (term "1,0,1,1,0,0"))
                     (rule "add_zero_right" (formula "29") (term "0,1,1,0,0"))
                     (rule "applyEqRigid" (formula "28") (term "0,1,0,1,1,0,0") (ifseqformula "17"))
                     (rule "times_zero_2" (formula "28") (term "1,0,1,1,0,0"))
                     (rule "add_zero_right" (formula "28") (term "0,1,1,0,0"))
                     (rule "applyEqRigid" (formula "2") (term "0,1,0,3,0,1") (ifseqformula "17"))
                     (rule "times_zero_2" (formula "2") (term "1,0,3,0,1"))
                     (rule "add_zero_right" (formula "2") (term "0,3,0,1"))
                     (rule "applyEqRigid" (formula "27") (term "0,1,0,1,1,0,0,1,0") (ifseqformula "17"))
                     (rule "times_zero_2" (formula "27") (term "1,0,1,1,0,0,1,0"))
                     (rule "add_zero_right" (formula "27") (term "0,1,1,0,0,1,0"))
                     (rule "applyEq" (formula "29") (term "0,1,0,1,0,0,0,1,0") (ifseqformula "17"))
                     (rule "times_zero_2" (formula "29") (term "1,0,1,0,0,0,1,0"))
                     (rule "add_zero_right" (formula "29") (term "0,1,0,0,0,1,0"))
                     (rule "applyEqRigid" (formula "2") (term "0,1,0,3,0,0") (ifseqformula "17"))
                     (rule "mul_literals" (formula "2") (term "1,0,3,0,0"))
                     (rule "add_zero_right" (formula "2") (term "0,3,0,0"))
                     (rule "applyEqRigid" (formula "35") (term "0,1,0,1,1,0,0,0") (ifseqformula "17"))
                     (rule "times_zero_2" (formula "35") (term "1,0,1,1,0,0,0"))
                     (rule "add_zero_right" (formula "35") (term "0,1,1,0,0,0"))
                     (rule "applyEq" (formula "15") (term "0,0,1") (ifseqformula "17"))
                     (rule "mul_literals" (formula "15") (term "0,1"))
                     (rule "add_zero_left" (formula "15") (term "1"))
                     (rule "applyEqRigid" (formula "11") (term "0,0,1") (ifseqformula "17"))
                     (rule "times_zero_2" (formula "11") (term "0,1"))
                     (rule "add_zero_left" (formula "11") (term "1"))
                     (rule "applyEq" (formula "4") (term "0,0,1") (ifseqformula "17"))
                     (rule "times_zero_2" (formula "4") (term "0,1"))
                     (rule "add_zero_left" (formula "4") (term "1"))
                     (rule "applyEq" (formula "14") (term "0,1,0,0,2,0") (ifseqformula "17"))
                     (rule "times_zero_2" (formula "14") (term "1,0,0,2,0"))
                     (rule "add_zero_right" (formula "14") (term "0,0,2,0"))
                     (rule "eqSymm" (formula "14"))
                     (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "22"))
                     (rule "leq_literals" (formula "18") (term "0"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "true_left" (formula "18"))
                     (rule "nnf_imp2or" (formula "3") (term "0,1"))
                     (rule "nnf_notAnd" (formula "3") (term "0,0,1"))
                     (rule "inEqSimp_notLeq" (formula "3") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0,1"))
                     (rule "mul_literals" (formula "3") (term "0,1,0,0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0,1"))
                     (rule "add_literals" (formula "3") (term "0,0,0,1,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "3") (term "1,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0,1"))
                     (rule "mul_literals" (formula "3") (term "0,1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0,1"))
                     (rule "inEqSimp_notGeq" (formula "3") (term "0,0,0,1"))
                     (rule "times_zero_1" (formula "3") (term "1,0,0,0,0,0,1"))
                     (rule "add_zero_right" (formula "3") (term "0,0,0,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "0,0,0,1"))
                     (rule "mul_literals" (formula "3") (term "1,0,0,0,1"))
                     (rule "onlyCreatedObjectsAreReferencedFinal" (formula "16") (term "1,0") (ifseqformula "5") (ifseqformula "7"))
                     (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "31"))
                      (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "34")))
                     (rule "closeFalse" (formula "16"))
                  )
               )
            )
            (branch "CUT: self.sorted_splitters[classify_sk_0] >= value FALSE"
                (builtin "One Step Simplification" (formula "22"))
               (rule "notLeft" (formula "22"))
               (rule "inEqSimp_geqRight" (formula "34"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "inEqSimp_geqRight" (formula "34"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "2"))
               (rule "polySimp_mulComm0" (formula "2") (term "1"))
               (rule "polySimp_rightDist" (formula "2") (term "1"))
               (rule "mul_literals" (formula "2") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
               (rule "polySimp_elimOne" (formula "2") (term "1,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
               (rule "mul_literals" (formula "1") (term "0,1"))
               (rule "inEqSimp_antiSymm" (formula "22") (ifseqformula "1"))
               (rule "applyEq" (formula "40") (term "1,1,1,0,0,1,0,0") (ifseqformula "22"))
               (rule "polySimp_addAssoc" (formula "40") (term "1,1,0,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "40") (term "0,1,1,0,0,1,0,0"))
               (rule "add_literals" (formula "40") (term "0,0,1,1,0,0,1,0,0"))
               (rule "add_zero_left" (formula "40") (term "0,1,1,0,0,1,0,0"))
               (rule "polySimp_pullOutFactor0" (formula "40") (term "1,1,0,0,1,0,0"))
               (rule "add_literals" (formula "40") (term "1,1,1,0,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "40") (term "1,1,0,0,1,0,0"))
               (rule "applyEq" (formula "32") (term "1,1,1,0,0") (ifseqformula "22"))
               (rule "polySimp_addAssoc" (formula "32") (term "1,1,0,0"))
               (rule "polySimp_addComm1" (formula "32") (term "0,1,1,0,0"))
               (rule "add_literals" (formula "32") (term "0,0,1,1,0,0"))
               (rule "add_zero_left" (formula "32") (term "0,1,1,0,0"))
               (rule "polySimp_pullOutFactor0" (formula "32") (term "1,1,0,0"))
               (rule "add_literals" (formula "32") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0"))
               (rule "applyEq" (formula "4") (term "1,3,0,0") (ifseqformula "22"))
               (rule "polySimp_addAssoc" (formula "4") (term "3,0,0"))
               (rule "polySimp_addComm1" (formula "4") (term "0,3,0,0"))
               (rule "add_literals" (formula "4") (term "0,0,3,0,0"))
               (rule "add_zero_left" (formula "4") (term "0,3,0,0"))
               (rule "polySimp_pullOutFactor0" (formula "4") (term "3,0,0"))
               (rule "add_literals" (formula "4") (term "1,3,0,0"))
               (rule "polySimp_elimOne" (formula "4") (term "3,0,0"))
               (rule "applyEq" (formula "3") (term "1,1,1,0,0,0") (ifseqformula "22"))
               (rule "polySimp_addAssoc" (formula "3") (term "1,1,0,0,0"))
               (rule "polySimp_addComm1" (formula "3") (term "0,1,1,0,0,0"))
               (rule "add_literals" (formula "3") (term "0,0,1,1,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "3") (term "1,1,0,0,0"))
               (rule "add_literals" (formula "3") (term "1,1,1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0,0"))
               (rule "applyEq" (formula "31") (term "1,1") (ifseqformula "22"))
               (rule "polySimp_addAssoc" (formula "31") (term "1"))
               (rule "polySimp_addComm0" (formula "31") (term "0,1"))
               (rule "polySimp_pullOutFactor0b" (formula "31") (term "1"))
               (rule "add_literals" (formula "31") (term "1,1,1"))
               (rule "polySimp_elimOne" (formula "31") (term "1,1"))
               (rule "applyEq" (formula "40") (term "1,1,1,0,0,0") (ifseqformula "22"))
               (rule "polySimp_addAssoc" (formula "40") (term "1,1,0,0,0"))
               (rule "polySimp_addComm1" (formula "40") (term "0,1,1,0,0,0"))
               (rule "add_literals" (formula "40") (term "0,0,1,1,0,0,0"))
               (rule "add_zero_left" (formula "40") (term "0,1,1,0,0,0"))
               (rule "polySimp_pullOutFactor0" (formula "40") (term "1,1,0,0,0"))
               (rule "add_literals" (formula "40") (term "1,1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "40") (term "1,1,0,0,0"))
               (rule "applyEq" (formula "5") (term "1,1,1,0,0,1") (ifseqformula "22"))
               (rule "polySimp_addAssoc" (formula "5") (term "1,1,0,0,1"))
               (rule "polySimp_addComm1" (formula "5") (term "0,1,1,0,0,1"))
               (rule "add_literals" (formula "5") (term "0,0,1,1,0,0,1"))
               (rule "polySimp_pullOutFactor0b" (formula "5") (term "1,1,0,0,1"))
               (rule "add_literals" (formula "5") (term "1,1,1,1,0,0,1"))
               (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0,1"))
               (rule "applyEq" (formula "16") (term "1,1,1,0,0") (ifseqformula "22"))
               (rule "polySimp_addAssoc" (formula "16") (term "1,1,0,0"))
               (rule "polySimp_addComm0" (formula "16") (term "0,1,1,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "16") (term "1,1,0,0"))
               (rule "add_literals" (formula "16") (term "1,1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
               (rule "applyEq" (formula "17") (term "1,0,2,0") (ifseqformula "22"))
               (rule "eqSymm" (formula "17"))
               (rule "polySimp_addAssoc" (formula "17") (term "0,2,1"))
               (rule "polySimp_addComm1" (formula "17") (term "0,0,2,1"))
               (rule "add_literals" (formula "17") (term "0,0,0,2,1"))
               (rule "polySimp_pullOutFactor0b" (formula "17") (term "0,2,1"))
               (rule "add_literals" (formula "17") (term "1,1,0,2,1"))
               (rule "polySimp_elimOne" (formula "17") (term "1,0,2,1"))
               (rule "applyEq" (formula "1") (term "0") (ifseqformula "22"))
               (rule "inEqSimp_homoInEq0" (formula "1"))
               (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "1,0"))
               (rule "times_zero_1" (formula "1") (term "0"))
               (rule "qeq_literals" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "applyEq" (formula "22") (term "0") (ifseqformula "21"))
               (rule "inEqSimp_homoInEq1" (formula "22"))
               (rule "polySimp_pullOutFactor1" (formula "22") (term "0"))
               (rule "add_literals" (formula "22") (term "1,0"))
               (rule "times_zero_1" (formula "22") (term "0"))
               (rule "leq_literals" (formula "22"))
               (rule "true_left" (formula "22"))
               (rule "applyEq" (formula "3") (term "1,3,0,1") (ifseqformula "21"))
               (rule "polySimp_addAssoc" (formula "3") (term "3,0,1"))
               (rule "polySimp_addComm1" (formula "3") (term "0,3,0,1"))
               (rule "add_literals" (formula "3") (term "0,0,3,0,1"))
               (rule "add_zero_left" (formula "3") (term "0,3,0,1"))
               (rule "polySimp_pullOutFactor0" (formula "3") (term "3,0,1"))
               (rule "add_literals" (formula "3") (term "1,3,0,1"))
               (rule "polySimp_elimOne" (formula "3") (term "3,0,1"))
               (rule "applyEq" (formula "25") (term "0") (ifseqformula "21"))
               (rule "inEqSimp_homoInEq1" (formula "25"))
               (rule "polySimp_mulComm0" (formula "25") (term "1,0"))
               (rule "polySimp_rightDist" (formula "25") (term "1,0"))
               (rule "mul_literals" (formula "25") (term "0,1,0"))
               (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0"))
               (rule "polySimp_addAssoc" (formula "25") (term "0"))
               (rule "add_literals" (formula "25") (term "0,0"))
               (rule "applyEq" (formula "15") (term "1,1,0,0,0,1,0") (ifseqformula "21"))
               (rule "polySimp_addAssoc" (formula "15") (term "1,0,0,0,1,0"))
               (rule "polySimp_addComm0" (formula "15") (term "0,1,0,0,0,1,0"))
               (rule "polySimp_pullOutFactor0b" (formula "15") (term "1,0,0,0,1,0"))
               (rule "add_literals" (formula "15") (term "1,1,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,1,0"))
               (rule "applyEq" (formula "32") (term "1,1,0,0,0,1,0") (ifseqformula "21"))
               (rule "polySimp_addAssoc" (formula "32") (term "1,0,0,0,1,0"))
               (rule "polySimp_addComm1" (formula "32") (term "0,1,0,0,0,1,0"))
               (rule "add_literals" (formula "32") (term "0,0,1,0,0,0,1,0"))
               (rule "add_zero_left" (formula "32") (term "0,1,0,0,0,1,0"))
               (rule "polySimp_pullOutFactor0" (formula "32") (term "1,0,0,0,1,0"))
               (rule "add_literals" (formula "32") (term "1,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "32") (term "1,0,0,0,1,0"))
               (rule "applyEq" (formula "32") (term "1,1,1,0,0") (ifseqformula "21"))
               (rule "polySimp_addAssoc" (formula "32") (term "1,1,0,0"))
               (rule "polySimp_addComm1" (formula "32") (term "0,1,1,0,0"))
               (rule "add_literals" (formula "32") (term "0,0,1,1,0,0"))
               (rule "add_zero_left" (formula "32") (term "0,1,1,0,0"))
               (rule "polySimp_pullOutFactor0" (formula "32") (term "1,1,0,0"))
               (rule "add_literals" (formula "32") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0"))
               (rule "applyEq" (formula "11") (term "0") (ifseqformula "21"))
               (rule "inEqSimp_homoInEq1" (formula "11"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,0"))
               (rule "mul_literals" (formula "11") (term "0,1,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0"))
               (rule "polySimp_addAssoc" (formula "11") (term "0"))
               (rule "polySimp_addComm1" (formula "11") (term "0,0"))
               (rule "add_literals" (formula "11") (term "0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "11") (term "0"))
               (rule "add_literals" (formula "11") (term "1,1,0"))
               (rule "applyEq" (formula "31") (term "1,1,1,0,0") (ifseqformula "21"))
               (rule "polySimp_addAssoc" (formula "31") (term "1,1,0,0"))
               (rule "polySimp_addComm1" (formula "31") (term "0,1,1,0,0"))
               (rule "add_literals" (formula "31") (term "0,0,1,1,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "31") (term "1,1,0,0"))
               (rule "add_literals" (formula "31") (term "1,1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0"))
               (rule "applyEq" (formula "30") (term "1,1,1,0,0,1,0") (ifseqformula "21"))
               (rule "polySimp_addAssoc" (formula "30") (term "1,1,0,0,1,0"))
               (rule "polySimp_addComm1" (formula "30") (term "0,1,1,0,0,1,0"))
               (rule "add_literals" (formula "30") (term "0,0,1,1,0,0,1,0"))
               (rule "add_zero_left" (formula "30") (term "0,1,1,0,0,1,0"))
               (rule "polySimp_pullOutFactor0" (formula "30") (term "1,1,0,0,1,0"))
               (rule "add_literals" (formula "30") (term "1,1,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0,1,0"))
               (rule "applyEq" (formula "12") (term "0") (ifseqformula "21"))
               (rule "inEqSimp_homoInEq0" (formula "12"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,0"))
               (rule "mul_literals" (formula "12") (term "0,1,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0"))
               (rule "polySimp_addAssoc" (formula "12") (term "0"))
               (rule "polySimp_addComm1" (formula "12") (term "0,0"))
               (rule "add_literals" (formula "12") (term "0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "12") (term "0"))
               (rule "add_literals" (formula "12") (term "1,1,0"))
               (rule "applyEq" (formula "4") (term "1,1,1,0,0,1,0,0") (ifseqformula "21"))
               (rule "polySimp_addAssoc" (formula "4") (term "1,1,0,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "4") (term "0,1,1,0,0,1,0,0"))
               (rule "add_literals" (formula "4") (term "0,0,1,1,0,0,1,0,0"))
               (rule "add_zero_left" (formula "4") (term "0,1,1,0,0,1,0,0"))
               (rule "polySimp_pullOutFactor0" (formula "4") (term "1,1,0,0,1,0,0"))
               (rule "add_literals" (formula "4") (term "1,1,1,0,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0,1,0,0"))
               (rule "applyEq" (formula "2") (term "1,3,0,1") (ifseqformula "21"))
               (rule "polySimp_addAssoc" (formula "2") (term "3,0,1"))
               (rule "polySimp_addComm1" (formula "2") (term "0,3,0,1"))
               (rule "add_literals" (formula "2") (term "0,0,3,0,1"))
               (rule "add_zero_left" (formula "2") (term "0,3,0,1"))
               (rule "polySimp_pullOutFactor0" (formula "2") (term "3,0,1"))
               (rule "add_literals" (formula "2") (term "1,3,0,1"))
               (rule "polySimp_elimOne" (formula "2") (term "3,0,1"))
               (rule "applyEq" (formula "4") (term "1,1,1,0,0,0") (ifseqformula "21"))
               (rule "polySimp_addAssoc" (formula "4") (term "1,1,0,0,0"))
               (rule "polySimp_addComm1" (formula "4") (term "0,1,1,0,0,0"))
               (rule "add_literals" (formula "4") (term "0,0,1,1,0,0,0"))
               (rule "add_zero_left" (formula "4") (term "0,1,1,0,0,0"))
               (rule "polySimp_pullOutFactor0" (formula "4") (term "1,1,0,0,0"))
               (rule "add_literals" (formula "4") (term "1,1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0,0"))
               (rule "applyEq" (formula "27") (term "1,1") (ifseqformula "21"))
               (rule "polySimp_addAssoc" (formula "27") (term "1"))
               (rule "polySimp_addComm0" (formula "27") (term "0,1"))
               (rule "polySimp_pullOutFactor0b" (formula "27") (term "1"))
               (rule "add_literals" (formula "27") (term "1,1,1"))
               (rule "polySimp_elimOne" (formula "27") (term "1,1"))
               (rule "applyEq" (formula "16") (term "1,0,2,0") (ifseqformula "21"))
               (rule "polySimp_addAssoc" (formula "16") (term "0,2,0"))
               (rule "polySimp_addComm1" (formula "16") (term "0,0,2,0"))
               (rule "add_literals" (formula "16") (term "0,0,0,2,0"))
               (rule "add_zero_left" (formula "16") (term "0,0,2,0"))
               (rule "polySimp_pullOutFactor0" (formula "16") (term "0,2,0"))
               (rule "add_literals" (formula "16") (term "1,0,2,0"))
               (rule "polySimp_elimOne" (formula "16") (term "0,2,0"))
               (rule "eqSymm" (formula "16"))
               (rule "applyEq" (formula "13") (term "1,1") (ifseqformula "21"))
               (rule "polySimp_addAssoc" (formula "13") (term "1"))
               (rule "polySimp_addComm0" (formula "13") (term "0,1"))
               (rule "polySimp_pullOutFactor0b" (formula "13") (term "1"))
               (rule "add_literals" (formula "13") (term "1,1,1"))
               (rule "polySimp_elimOne" (formula "13") (term "1,1"))
               (rule "applyEq" (formula "5") (term "1,1") (ifseqformula "21"))
               (rule "polySimp_addAssoc" (formula "5") (term "1"))
               (rule "polySimp_addComm0" (formula "5") (term "0,1"))
               (rule "polySimp_pullOutFactor0b" (formula "5") (term "1"))
               (rule "add_literals" (formula "5") (term "1,1,1"))
               (rule "polySimp_elimOne" (formula "5") (term "1,1"))
               (rule "applyEq" (formula "18") (term "1") (ifseqformula "21"))
               (rule "applyEq" (formula "17") (term "1,1") (ifseqformula "21"))
               (rule "polySimp_addAssoc" (formula "17") (term "1"))
               (rule "polySimp_addComm0" (formula "17") (term "0,1"))
               (rule "polySimp_pullOutFactor0b" (formula "17") (term "1"))
               (rule "add_literals" (formula "17") (term "1,1,1"))
               (rule "polySimp_elimOne" (formula "17") (term "1,1"))
               (rule "applyEq" (formula "22") (term "0,1") (ifseqformula "16"))
               (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "22"))
               (rule "true_left" (formula "22"))
               (rule "inEqSimp_sepNegMonomial0" (formula "24"))
               (rule "polySimp_mulLiterals" (formula "24") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "11"))
               (rule "polySimp_mulLiterals" (formula "11") (term "0"))
               (rule "polySimp_elimOne" (formula "11") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "12"))
               (rule "polySimp_mulLiterals" (formula "12") (term "0"))
               (rule "polySimp_elimOne" (formula "12") (term "0"))
               (rule "inEqSimp_subsumption6" (formula "23") (ifseqformula "11"))
               (rule "mul_literals" (formula "23") (term "1,1,0"))
               (rule "greater_literals" (formula "23") (term "0,0"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "leq_literals" (formula "23") (term "0"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "true_left" (formula "23"))
               (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "11"))
               (rule "leq_literals" (formula "18") (term "0"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "true_left" (formula "18"))
               (rule "cut_direct" (formula "33") (term "1"))
               (branch "CUT: self.tree.<created> = TRUE TRUE"
                   (builtin "One Step Simplification" (formula "34"))
                  (rule "replace_known_left" (formula "35") (term "0,1") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "35"))
                  (rule "allRight" (formula "35") (inst "sk=i_0"))
                  (rule "orRight" (formula "35"))
                  (rule "orRight" (formula "35"))
                  (rule "allRight" (formula "37") (inst "sk=j_0"))
                  (rule "orRight" (formula "37"))
                  (rule "orRight" (formula "37"))
                  (rule "inEqSimp_geqRight" (formula "36"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "inEqSimp_leqRight" (formula "36"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_geqRight" (formula "39"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "inEqSimp_geqRight" (formula "39"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "inEqSimp_leqRight" (formula "39"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1"))
                  (rule "polySimp_rightDist" (formula "5") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                  (rule "mul_literals" (formula "5") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1"))
                  (rule "polySimp_rightDist" (formula "3") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                  (rule "mul_literals" (formula "3") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1"))
                  (rule "mul_literals" (formula "2") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1"))
                  (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_0"))
                  (rule "simplifySelectOfAnon" (formula "3"))
                   (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "38")))
                  (rule "inEqSimp_homoInEq0" (formula "4"))
                  (rule "polySimp_addComm1" (formula "4") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1"))
                  (rule "polySimp_rightDist" (formula "4") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                  (rule "mul_literals" (formula "4") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                  (rule "elementOfSetMinus" (formula "3") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "elementOfUnion" (formula "3") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "ifthenelse_negated" (formula "3") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "6"))
                  (rule "times_zero_1" (formula "5") (term "0,0"))
                  (rule "add_zero_left" (formula "5") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                  (rule "mul_literals" (formula "5") (term "1"))
                  (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=arr_1"))
                  (rule "simplifySelectOfAnon" (formula "4"))
                   (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "39")))
                  (rule "elementOfSetMinus" (formula "4") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "elementOfUnion" (formula "4") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "ifthenelse_negated" (formula "4") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "nnf_imp2or" (formula "12") (term "0,1"))
                  (rule "onlyCreatedObjectsAreReferencedFinal" (formula "25") (term "1,0") (ifseqformula "14") (ifseqformula "16"))
                  (rule "replace_known_right" (formula "25") (term "0") (ifseqformula "39"))
                   (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "8")))
                  (rule "true_left" (formula "25"))
                  (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "11") (term "0,0") (inst "i=i"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "translateJavaSubInt" (formula "11") (term "1,1,0,0,0"))
                  (rule "translateJavaAddInt" (formula "11") (term "0,2,1,1,0,0"))
                  (rule "polySimp_elimSub" (formula "11") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "11") (term "1,1,1,0,0,0"))
                  (rule "polySimp_addComm0" (formula "11") (term "0,2,1,1,0,0"))
                  (rule "polySimp_addComm0" (formula "11") (term "1,1,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,0"))
                  (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,0"))
                  (rule "mul_literals" (formula "11") (term "0,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,0"))
                  (rule "onlyCreatedObjectsAreReferencedFinal" (formula "21") (term "1") (ifseqformula "14") (ifseqformula "16"))
                  (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "40"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "21"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "applyEqReverse" (formula "5") (term "1,1") (ifseqformula "3"))
                  (rule "hideAuxiliaryEq" (formula "3"))
                  (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "20"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                  (rule "hideAuxiliaryEq" (formula "3"))
                  (rule "inEqSimp_homoInEq1" (formula "3"))
                  (rule "polySimp_addComm1" (formula "3") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1"))
                  (rule "polySimp_rightDist" (formula "3") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                  (rule "mul_literals" (formula "3") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                  (rule "nnf_notAnd" (formula "10") (term "0,0,1"))
                  (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,1"))
                  (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0,1"))
                  (rule "add_zero_right" (formula "10") (term "0,0,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,1"))
                  (rule "mul_literals" (formula "10") (term "1,0,0,0,1"))
                  (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,1"))
                  (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,1"))
                  (rule "add_literals" (formula "10") (term "0,0,0,1,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,1"))
                  (rule "mul_literals" (formula "10") (term "0,1,1,0,0,1"))
                  (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,1"))
                  (rule "nnf_imp2or" (formula "9") (term "0,0"))
                  (rule "nnf_notAnd" (formula "9") (term "0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,0"))
                  (rule "add_literals" (formula "9") (term "0,0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,0"))
                  (rule "mul_literals" (formula "9") (term "0,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,0"))
                  (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "9") (term "0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,0"))
                  (rule "mul_literals" (formula "9") (term "1,0,0,0,0"))
                  (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "8") (term "0,1"))
                  (rule "wellFormedAnon" (formula "8") (term "1,0"))
                  (rule "replace_known_left" (formula "8") (term "1,1,0") (ifseqformula "13"))
                   (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "38")) (ifInst ""  (formula "12")))
                  (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "9") (term "0,1") (inst "j=j") (inst "i=i"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,1,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,1,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,1,0,1"))
                  (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,1,0,1"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,1,0,1"))
                  (rule "mul_literals" (formula "9") (term "0,1,1,0,0,1,0,1"))
                  (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,1,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,1"))
                  (rule "mul_literals" (formula "9") (term "0,1,1,0,0,1"))
                  (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,1"))
                  (rule "nnf_imp2or" (formula "9") (term "0,1"))
                  (rule "nnf_notAnd" (formula "9") (term "0,0,1"))
                  (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,1"))
                  (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,1"))
                  (rule "add_literals" (formula "9") (term "0,0,0,1,0,0,1"))
                  (rule "add_zero_left" (formula "9") (term "0,0,1,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,1"))
                  (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,1"))
                  (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,1"))
                  (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0,1"))
                  (rule "add_zero_right" (formula "9") (term "0,0,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,1"))
                  (rule "mul_literals" (formula "9") (term "1,0,0,0,1"))
                  (rule "nnf_imp2or" (formula "9") (term "0,1,0,1"))
                  (rule "commute_or" (formula "33") (term "0,0,1,0"))
                  (rule "nnf_notAnd" (formula "9") (term "0,0,1,0,1"))
                  (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0,1,0,1"))
                  (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,1,0,1"))
                  (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,1,0,1"))
                  (rule "add_literals" (formula "9") (term "0,0,0,1,0,0,1,0,1"))
                  (rule "add_zero_left" (formula "9") (term "0,0,1,0,0,1,0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0,1,0,1"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,1,0,1"))
                  (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,1,0,1"))
                  (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0,1,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,1,0,1"))
                  (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,1,0,1"))
                  (rule "mul_literals" (formula "9") (term "0,1,0,0,0,1,0,1"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0,1,0,1"))
                  (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0,1,0,1"))
                  (rule "commute_or" (formula "10") (term "0,0,1,0,0"))
                  (rule "all_pull_out3" (formula "21") (term "0"))
                  (rule "all_pull_out3" (formula "34") (term "0"))
                  (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "8") (term "0,1") (inst "i=i"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "translateJavaAddInt" (formula "8") (term "0,2,1,1,0,1"))
                  (rule "translateJavaSubInt" (formula "8") (term "1,1,0,0,1"))
                  (rule "polySimp_elimSub" (formula "8") (term "1,1,0,0,1"))
                  (rule "mul_literals" (formula "8") (term "1,1,1,0,0,1"))
                  (rule "polySimp_addComm0" (formula "8") (term "0,2,1,1,0,1"))
                  (rule "polySimp_addComm0" (formula "8") (term "1,1,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0,1"))
                  (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0,1"))
                  (rule "add_literals" (formula "8") (term "0,0,0,1,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "8") (term "1,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,1"))
                  (rule "mul_literals" (formula "8") (term "0,1,1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0,1"))
                  (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0,1"))
                  (rule "nnf_imp2or" (formula "8") (term "0,1"))
                  (rule "nnf_notAnd" (formula "8") (term "0,0,1"))
                  (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0,1"))
                  (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0,1"))
                  (rule "add_zero_right" (formula "8") (term "0,0,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,1"))
                  (rule "mul_literals" (formula "8") (term "1,0,0,0,1"))
                  (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0,1"))
                  (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0,1"))
                  (rule "add_literals" (formula "8") (term "0,0,0,1,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0,1"))
                  (rule "mul_literals" (formula "8") (term "0,1,1,0,0,1"))
                  (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0,1"))
                  (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "8") (term "0,0"))
                  (rule "wellFormedAnon" (formula "8") (term "1,0"))
                  (rule "replace_known_right" (formula "8") (term "0,0,0") (ifseqformula "38"))
                   (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "13")) (ifInst ""  (formula "14")))
                  (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "9") (term "0,0") (inst "j=j") (inst "i=i"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "9") (term "0,1,1,0,0,1,0,0"))
                  (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "9") (term "0,1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "9") (term "0,0"))
                  (rule "nnf_notAnd" (formula "9") (term "0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,0"))
                  (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "9") (term "0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,0"))
                  (rule "mul_literals" (formula "9") (term "1,0,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,0"))
                  (rule "add_literals" (formula "9") (term "0,0,0,1,0,0,0"))
                  (rule "add_zero_left" (formula "9") (term "0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "9") (term "0,1,0,0"))
                  (rule "nnf_notAnd" (formula "9") (term "0,0,1,0,0"))
                  (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,1,0,0"))
                  (rule "add_literals" (formula "9") (term "0,0,0,1,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "9") (term "0,0,1,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,1,0,0"))
                  (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "9") (term "0,1,0,0,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0,1,0,0"))
                  (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0,1,0,0"))
                  (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "8") (term "0,0") (inst "j=j") (inst "i=i"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "8") (term "1,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "8") (term "0,1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "8") (term "0,1,1,0,0,1,0,0"))
                  (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "8") (term "0,0"))
                  (rule "nnf_notAnd" (formula "8") (term "0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0,0"))
                  (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "8") (term "0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,0"))
                  (rule "mul_literals" (formula "8") (term "1,0,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0,0"))
                  (rule "add_literals" (formula "8") (term "0,0,0,1,0,0,0"))
                  (rule "add_zero_left" (formula "8") (term "0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "8") (term "0,1,0,0"))
                  (rule "nnf_notAnd" (formula "8") (term "0,0,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "8") (term "0,1,0,0,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0,1,0,0"))
                  (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0,1,0,0"))
                  (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0,1,0,0"))
                  (rule "add_literals" (formula "8") (term "0,0,0,1,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "8") (term "0,0,1,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,1,0,0"))
                  (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,1,0,0"))
                  (rule "shift_paren_or" (formula "22") (term "0,0"))
                  (rule "shift_paren_or" (formula "35") (term "0,0"))
                  (rule "impLeft" (formula "10"))
                  (branch
                     (rule "allRight" (formula "36") (inst "sk=i_1"))
                     (rule "orRight" (formula "36"))
                     (rule "orRight" (formula "36"))
                     (rule "inEqSimp_geqRight" (formula "38"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "inEqSimp_geqRight" (formula "38"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "inEqSimp_leqRight" (formula "38"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1"))
                     (rule "polySimp_rightDist" (formula "3") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                     (rule "mul_literals" (formula "3") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1"))
                     (rule "polySimp_rightDist" (formula "2") (term "1"))
                     (rule "mul_literals" (formula "2") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                     (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_2"))
                     (rule "simplifySelectOfAnon" (formula "3"))
                      (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "41")) (ifInst ""  (formula "23")))
                     (rule "inEqSimp_homoInEq0" (formula "4"))
                     (rule "polySimp_addComm1" (formula "4") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1"))
                     (rule "polySimp_rightDist" (formula "4") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                     (rule "mul_literals" (formula "4") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                     (rule "elementOfSetMinus" (formula "3") (term "0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "ifthenelse_negated" (formula "3") (term "0"))
                     (rule "elementOfUnion" (formula "3") (term "0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "applyEqReverse" (formula "4") (term "1,1") (ifseqformula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
                     (rule "mul_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "inEqSimp_subsumption1" (formula "21") (ifseqformula "1"))
                     (rule "leq_literals" (formula "21") (term "0"))
                      (builtin "One Step Simplification" (formula "21"))
                     (rule "true_left" (formula "21"))
                     (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=arr_3"))
                     (rule "simplifySelectOfAnon" (formula "4"))
                      (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "41")) (ifInst ""  (formula "23")))
                     (rule "inEqSimp_homoInEq1" (formula "5"))
                     (rule "polySimp_addComm1" (formula "5") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                     (rule "polySimp_mulComm0" (formula "5") (term "1"))
                     (rule "polySimp_rightDist" (formula "5") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                     (rule "mul_literals" (formula "5") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                     (rule "elementOfSetMinus" (formula "4") (term "0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "ifthenelse_negated" (formula "4") (term "0"))
                     (rule "elementOfUnion" (formula "4") (term "0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "applyEqReverse" (formula "5") (term "1,1") (ifseqformula "4"))
                     (rule "hideAuxiliaryEq" (formula "4"))
                     (rule "impLeft" (formula "14"))
                     (branch
                        (rule "allRight" (formula "38") (inst "sk=i_2"))
                        (rule "orRight" (formula "38"))
                        (rule "orRight" (formula "38"))
                        (rule "allRight" (formula "40") (inst "sk=j_1"))
                        (rule "orRight" (formula "40"))
                        (rule "orRight" (formula "40"))
                        (rule "inEqSimp_geqRight" (formula "39"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "inEqSimp_leqRight" (formula "39"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_geqRight" (formula "42"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "inEqSimp_leqRight" (formula "42"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0"))
                        (rule "inEqSimp_geqRight" (formula "42"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1"))
                        (rule "polySimp_rightDist" (formula "5") (term "1"))
                        (rule "mul_literals" (formula "5") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1"))
                        (rule "polySimp_elimOne" (formula "2") (term "1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1"))
                        (rule "mul_literals" (formula "1") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                        (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_4"))
                        (rule "simplifySelectOfAnon" (formula "3"))
                         (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "45")) (ifInst ""  (formula "27")))
                        (rule "inEqSimp_homoInEq0" (formula "4"))
                        (rule "polySimp_addComm1" (formula "4") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1"))
                        (rule "polySimp_rightDist" (formula "4") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                        (rule "mul_literals" (formula "4") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                        (rule "elementOfSetMinus" (formula "3") (term "0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "ifthenelse_negated" (formula "3") (term "0"))
                        (rule "elementOfUnion" (formula "3") (term "0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "applyEqReverse" (formula "4") (term "1,1") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "5"))
                        (rule "mul_literals" (formula "4") (term "0,0"))
                        (rule "add_zero_left" (formula "4") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                        (rule "mul_literals" (formula "4") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "7"))
                        (rule "leq_literals" (formula "4") (term "0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_5"))
                        (rule "simplifySelectOfAnon" (formula "3"))
                         (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "45")) (ifInst ""  (formula "27")))
                        (rule "inEqSimp_homoInEq1" (formula "4"))
                        (rule "polySimp_addComm1" (formula "4") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1"))
                        (rule "polySimp_rightDist" (formula "4") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                        (rule "mul_literals" (formula "4") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                        (rule "elementOfSetMinus" (formula "3") (term "0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "ifthenelse_negated" (formula "3") (term "0"))
                        (rule "elementOfUnion" (formula "3") (term "0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "applyEqReverse" (formula "4") (term "1,1") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                        (rule "polySimp_mulComm0" (formula "2") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "2") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "17") (term "0,1") (inst "i=i"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "translateJavaAddInt" (formula "17") (term "0,2,1,1,0,1"))
                        (rule "translateJavaSubInt" (formula "17") (term "1,1,0,0,1"))
                        (rule "polySimp_elimSub" (formula "17") (term "1,1,0,0,1"))
                        (rule "mul_literals" (formula "17") (term "1,1,1,0,0,1"))
                        (rule "polySimp_addComm0" (formula "17") (term "0,2,1,1,0,1"))
                        (rule "polySimp_addComm0" (formula "17") (term "1,1,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0,1"))
                        (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,1"))
                        (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "17") (term "1,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,1"))
                        (rule "mul_literals" (formula "17") (term "0,1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0,1"))
                        (rule "nnf_imp2or" (formula "17") (term "0,1"))
                        (rule "nnf_notAnd" (formula "17") (term "0,0,1"))
                        (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0,1"))
                        (rule "mul_literals" (formula "17") (term "1,0,0,0,0,0,1"))
                        (rule "add_zero_right" (formula "17") (term "0,0,0,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,1"))
                        (rule "mul_literals" (formula "17") (term "1,0,0,0,1"))
                        (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0,1"))
                        (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,1"))
                        (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,1"))
                        (rule "mul_literals" (formula "17") (term "0,1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0,1"))
                        (rule "cut_direct" (formula "45") (term "0"))
                        (branch "CUT: self.sorted_splitters.* cap allLocs setMinus self.sorted_splitters.* cup self.tree.tree.* = {} TRUE"
                            (builtin "One Step Simplification" (formula "46"))
                           (rule "impLeft" (formula "18"))
                           (branch
                              (rule "allRight" (formula "42") (inst "sk=i_3"))
                              (rule "orRight" (formula "42"))
                              (rule "orRight" (formula "42"))
                              (rule "allRight" (formula "44") (inst "sk=j_2"))
                              (rule "orRight" (formula "44"))
                              (rule "orRight" (formula "44"))
                              (rule "inEqSimp_leqRight" (formula "42"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_geqRight" (formula "43"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "inEqSimp_geqRight" (formula "46"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "inEqSimp_leqRight" (formula "45"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0"))
                              (rule "inEqSimp_geqRight" (formula "46"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1"))
                              (rule "polySimp_rightDist" (formula "4") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                              (rule "mul_literals" (formula "4") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1"))
                              (rule "polySimp_rightDist" (formula "3") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                              (rule "mul_literals" (formula "3") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "1"))
                              (rule "polySimp_elimOne" (formula "2") (term "1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1"))
                              (rule "polySimp_rightDist" (formula "1") (term "1"))
                              (rule "mul_literals" (formula "1") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                              (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_6"))
                              (rule "simplifySelectOfAnon" (formula "3"))
                               (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "49")) (ifInst ""  (formula "31")))
                              (rule "disjointAllFields" (formula "3") (term "0,0") (ifseqformula "7"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "inEqSimp_homoInEq0" (formula "3"))
                              (rule "polySimp_addComm1" (formula "3") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1"))
                              (rule "polySimp_rightDist" (formula "3") (term "1"))
                              (rule "mul_literals" (formula "3") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                              (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "4"))
                              (rule "times_zero_1" (formula "5") (term "0,0"))
                              (rule "add_zero_left" (formula "5") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                              (rule "mul_literals" (formula "5") (term "1"))
                              (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "13"))
                              (rule "leq_literals" (formula "5") (term "0"))
                               (builtin "One Step Simplification" (formula "5"))
                              (rule "true_left" (formula "5"))
                              (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_7"))
                              (rule "simplifySelectOfAnon" (formula "3"))
                               (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "49")) (ifInst ""  (formula "31")))
                              (rule "disjointAllFields" (formula "3") (term "0,0") (ifseqformula "7"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "inEqSimp_homoInEq1" (formula "3"))
                              (rule "polySimp_addComm1" (formula "3") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1"))
                              (rule "polySimp_rightDist" (formula "3") (term "1"))
                              (rule "mul_literals" (formula "3") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                              (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                              (rule "polySimp_mulComm0" (formula "2") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "2") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "onlyCreatedObjectsAreReferencedFinal" (formula "49") (term "0") (ifseqformula "24") (ifseqformula "21"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "50"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferencedFinal" (formula "32") (term "0") (ifseqformula "25") (ifseqformula "22"))
                              (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "33"))
                              (rule "replace_known_right" (formula "32") (term "0") (ifseqformula "50"))
                               (builtin "One Step Simplification" (formula "32"))
                              (rule "applyEq" (formula "32") (term "1,0") (ifseqformula "33"))
                              (rule "shift_paren_or" (formula "33") (term "0,0,0"))
                              (rule "shift_paren_or" (formula "46") (term "0,0,0"))
                              (rule "allLeft" (formula "45") (inst "t=i_1"))
                              (rule "inEqSimp_contradInEq1" (formula "45") (term "0,0") (ifseqformula "14"))
                              (rule "qeq_literals" (formula "45") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "45"))
                              (rule "inEqSimp_contradInEq0" (formula "45") (term "0") (ifseqformula "15"))
                              (rule "inEqSimp_homoInEq1" (formula "45") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "45") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "45") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "45") (term "0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "45") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "45") (term "0,0,0,0"))
                              (rule "add_literals" (formula "45") (term "0,0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "45") (term "0,0,0"))
                              (rule "add_literals" (formula "45") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "45") (term "1,0,0,0"))
                              (rule "add_literals" (formula "45") (term "0,0,0"))
                              (rule "leq_literals" (formula "45") (term "0,0"))
                               (builtin "One Step Simplification" (formula "45"))
                              (rule "inEqSimp_contradInEq0" (formula "45") (ifseqformula "16"))
                              (rule "andLeft" (formula "45"))
                              (rule "inEqSimp_homoInEq1" (formula "45"))
                              (rule "polySimp_mulComm0" (formula "45") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "45") (term "1,0"))
                              (rule "mul_literals" (formula "45") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "45") (term "0"))
                              (rule "polySimp_addComm0" (formula "45") (term "0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "45") (term "0"))
                              (rule "add_literals" (formula "45") (term "1,1,0"))
                              (rule "times_zero_1" (formula "45") (term "1,0"))
                              (rule "add_zero_right" (formula "45") (term "0"))
                              (rule "leq_literals" (formula "45"))
                              (rule "closeFalse" (formula "45"))
                           )
                           (branch
                              (rule "onlyCreatedObjectsAreReferencedFinal" (formula "45") (term "0") (ifseqformula "20") (ifseqformula "16"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "46"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferencedFinal" (formula "28") (term "0") (ifseqformula "21") (ifseqformula "17"))
                              (rule "applyEq" (formula "28") (term "1,0,1") (ifseqformula "29"))
                              (rule "replace_known_left" (formula "28") (term "1") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "true_left" (formula "28"))
                              (rule "shift_paren_or" (formula "29") (term "0,0,0"))
                              (rule "shift_paren_or" (formula "42") (term "0,0,0"))
                              (rule "allLeft" (formula "41") (inst "t=i_1"))
                              (rule "inEqSimp_contradInEq1" (formula "41") (term "0,0") (ifseqformula "9"))
                              (rule "qeq_literals" (formula "41") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "41"))
                              (rule "inEqSimp_contradInEq0" (formula "41") (term "0") (ifseqformula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "41") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "41") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "41") (term "0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "41") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "41") (term "0,0,0,0"))
                              (rule "add_literals" (formula "41") (term "0,0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "41") (term "0,0,0"))
                              (rule "add_literals" (formula "41") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "41") (term "1,0,0,0"))
                              (rule "add_zero_right" (formula "41") (term "0,0,0"))
                              (rule "leq_literals" (formula "41") (term "0,0"))
                               (builtin "One Step Simplification" (formula "41"))
                              (rule "inEqSimp_contradInEq0" (formula "41") (ifseqformula "11"))
                              (rule "andLeft" (formula "41"))
                              (rule "inEqSimp_homoInEq1" (formula "41"))
                              (rule "polySimp_mulComm0" (formula "41") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "41") (term "1,0"))
                              (rule "mul_literals" (formula "41") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "41") (term "0"))
                              (rule "polySimp_addComm0" (formula "41") (term "0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "41") (term "0"))
                              (rule "add_literals" (formula "41") (term "1,1,0"))
                              (rule "times_zero_1" (formula "41") (term "1,0"))
                              (rule "add_literals" (formula "41") (term "0"))
                              (rule "leq_literals" (formula "41"))
                              (rule "closeFalse" (formula "41"))
                           )
                        )
                        (branch "CUT: self.sorted_splitters.* cap allLocs setMinus self.sorted_splitters.* cup self.tree.tree.* = {} FALSE"
                            (builtin "One Step Simplification" (formula "46"))
                           (rule "false_right" (formula "46"))
                           (rule "impLeft" (formula "17"))
                           (branch
                              (rule "allRight" (formula "41") (inst "sk=i_3"))
                              (rule "orRight" (formula "41"))
                              (rule "orRight" (formula "41"))
                              (rule "allRight" (formula "43") (inst "sk=j_2"))
                              (rule "orRight" (formula "43"))
                              (rule "orRight" (formula "43"))
                              (rule "inEqSimp_geqRight" (formula "42"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "inEqSimp_leqRight" (formula "42"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_geqRight" (formula "45"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "inEqSimp_leqRight" (formula "44"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0"))
                              (rule "inEqSimp_geqRight" (formula "45"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                              (rule "polySimp_mulComm0" (formula "5") (term "1"))
                              (rule "polySimp_rightDist" (formula "5") (term "1"))
                              (rule "mul_literals" (formula "5") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1"))
                              (rule "polySimp_rightDist" (formula "3") (term "1"))
                              (rule "mul_literals" (formula "3") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "1"))
                              (rule "polySimp_elimOne" (formula "2") (term "1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1"))
                              (rule "polySimp_rightDist" (formula "1") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                              (rule "mul_literals" (formula "1") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                              (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_6"))
                              (rule "simplifySelectOfAnon" (formula "3"))
                               (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "48")) (ifInst ""  (formula "30")))
                              (rule "inEqSimp_homoInEq0" (formula "4"))
                              (rule "polySimp_addComm1" (formula "4") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1"))
                              (rule "polySimp_rightDist" (formula "4") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                              (rule "mul_literals" (formula "4") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                              (rule "elementOfSetMinus" (formula "3") (term "0,0"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "ifthenelse_negated" (formula "3") (term "0"))
                              (rule "elementOfUnion" (formula "3") (term "0,0"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "applyEqReverse" (formula "4") (term "1,1") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "5"))
                              (rule "times_zero_1" (formula "4") (term "0,0"))
                              (rule "add_zero_left" (formula "4") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                              (rule "mul_literals" (formula "4") (term "1"))
                              (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "12"))
                              (rule "leq_literals" (formula "4") (term "0"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "true_left" (formula "4"))
                              (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_7"))
                              (rule "simplifySelectOfAnon" (formula "3"))
                               (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "48")) (ifInst ""  (formula "30")))
                              (rule "inEqSimp_homoInEq1" (formula "4"))
                              (rule "polySimp_addComm1" (formula "4") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1"))
                              (rule "polySimp_rightDist" (formula "4") (term "1"))
                              (rule "mul_literals" (formula "4") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                              (rule "elementOfSetMinus" (formula "3") (term "0,0"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "ifthenelse_negated" (formula "3") (term "0"))
                              (rule "elementOfUnion" (formula "3") (term "0,0"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "applyEqReverse" (formula "4") (term "1,1") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                              (rule "polySimp_mulComm0" (formula "2") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "2") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "onlyCreatedObjectsAreReferencedFinal" (formula "48") (term "0") (ifseqformula "23") (ifseqformula "20"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "49"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferencedFinal" (formula "31") (term "0") (ifseqformula "24") (ifseqformula "21"))
                              (rule "applyEq" (formula "31") (term "1,0,1") (ifseqformula "32"))
                              (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "30"))
                               (builtin "One Step Simplification" (formula "31"))
                              (rule "true_left" (formula "31"))
                              (rule "shift_paren_or" (formula "32") (term "0,0,0"))
                              (rule "shift_paren_or" (formula "45") (term "0,0,0"))
                              (rule "allLeft" (formula "44") (inst "t=i_1"))
                              (rule "inEqSimp_contradInEq0" (formula "44") (term "1,0") (ifseqformula "14"))
                              (rule "inEqSimp_homoInEq1" (formula "44") (term "0,1,0"))
                              (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "44") (term "1,0,0,1,0"))
                              (rule "mul_literals" (formula "44") (term "0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "44") (term "0,0,1,0"))
                              (rule "polySimp_addComm1" (formula "44") (term "0,0,0,1,0"))
                              (rule "add_literals" (formula "44") (term "0,0,0,0,1,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "44") (term "0,0,1,0"))
                              (rule "add_literals" (formula "44") (term "1,1,0,0,1,0"))
                              (rule "times_zero_1" (formula "44") (term "1,0,0,1,0"))
                              (rule "add_literals" (formula "44") (term "0,0,1,0"))
                              (rule "leq_literals" (formula "44") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "44"))
                              (rule "inEqSimp_contradInEq0" (formula "44") (term "1") (ifseqformula "15"))
                              (rule "inEqSimp_homoInEq1" (formula "44") (term "0,1"))
                              (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "44") (term "1,0,0,1"))
                              (rule "mul_literals" (formula "44") (term "0,1,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "44") (term "0,0,1"))
                              (rule "polySimp_addComm0" (formula "44") (term "0,0,0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "44") (term "0,0,1"))
                              (rule "add_literals" (formula "44") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "44") (term "1,0,0,1"))
                              (rule "add_literals" (formula "44") (term "0,0,1"))
                              (rule "leq_literals" (formula "44") (term "0,1"))
                               (builtin "One Step Simplification" (formula "44"))
                              (rule "inEqSimp_contradInEq0" (formula "13") (ifseqformula "44"))
                              (rule "qeq_literals" (formula "13") (term "0"))
                               (builtin "One Step Simplification" (formula "13"))
                              (rule "closeFalse" (formula "13"))
                           )
                           (branch
                              (rule "onlyCreatedObjectsAreReferencedFinal" (formula "44") (term "0") (ifseqformula "19") (ifseqformula "15"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "45"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferencedFinal" (formula "27") (term "0") (ifseqformula "20") (ifseqformula "16"))
                              (rule "applyEq" (formula "27") (term "1,0,1") (ifseqformula "28"))
                              (rule "replace_known_left" (formula "27") (term "1") (ifseqformula "26"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "true_left" (formula "27"))
                              (rule "shift_paren_or" (formula "28") (term "0,0,0"))
                              (rule "shift_paren_or" (formula "41") (term "0,0,0"))
                              (rule "allLeft" (formula "40") (inst "t=i_1"))
                              (rule "inEqSimp_contradInEq0" (formula "40") (term "1") (ifseqformula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "40") (term "0,1"))
                              (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "40") (term "1,0,0,1"))
                              (rule "mul_literals" (formula "40") (term "0,1,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "40") (term "0,0,1"))
                              (rule "polySimp_addComm0" (formula "40") (term "0,0,0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "40") (term "0,0,1"))
                              (rule "add_literals" (formula "40") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "40") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "40") (term "0,0,1"))
                              (rule "leq_literals" (formula "40") (term "0,1"))
                               (builtin "One Step Simplification" (formula "40"))
                              (rule "inEqSimp_contradInEq0" (formula "40") (term "1") (ifseqformula "9"))
                              (rule "inEqSimp_homoInEq1" (formula "40") (term "0,1"))
                              (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "40") (term "1,0,0,1"))
                              (rule "mul_literals" (formula "40") (term "0,1,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "40") (term "0,0,1"))
                              (rule "polySimp_addComm1" (formula "40") (term "0,0,0,1"))
                              (rule "add_literals" (formula "40") (term "0,0,0,0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "40") (term "0,0,1"))
                              (rule "add_literals" (formula "40") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "40") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "40") (term "0,0,1"))
                              (rule "leq_literals" (formula "40") (term "0,1"))
                               (builtin "One Step Simplification" (formula "40"))
                              (rule "inEqSimp_contradInEq1" (formula "40") (ifseqformula "8"))
                              (rule "qeq_literals" (formula "40") (term "0"))
                               (builtin "One Step Simplification" (formula "40"))
                              (rule "closeFalse" (formula "40"))
                           )
                        )
                     )
                     (branch
                        (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "14"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "true_left" (formula "13"))
                        (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "12") (term "0,1") (inst "i=i"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "translateJavaSubInt" (formula "12") (term "1,1,0,0,1"))
                        (rule "translateJavaAddInt" (formula "12") (term "0,2,1,1,0,1"))
                        (rule "polySimp_elimSub" (formula "12") (term "1,1,0,0,1"))
                        (rule "mul_literals" (formula "12") (term "1,1,1,0,0,1"))
                        (rule "polySimp_addComm0" (formula "12") (term "0,2,1,1,0,1"))
                        (rule "polySimp_addComm0" (formula "12") (term "1,1,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,1"))
                        (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,1"))
                        (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,1"))
                        (rule "mul_literals" (formula "12") (term "0,1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,1"))
                        (rule "nnf_imp2or" (formula "12") (term "0,1"))
                        (rule "nnf_notAnd" (formula "12") (term "0,0,1"))
                        (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,1"))
                        (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,1"))
                        (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,1"))
                        (rule "mul_literals" (formula "12") (term "0,1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,1"))
                        (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,1"))
                        (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0,1"))
                        (rule "add_zero_right" (formula "12") (term "0,0,0,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,1"))
                        (rule "mul_literals" (formula "12") (term "1,0,0,0,1"))
                        (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "13"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "true_left" (formula "12"))
                        (rule "cut_direct" (formula "40") (term "0"))
                        (branch "CUT: self.sorted_splitters.* cap allLocs setMinus self.sorted_splitters.* cup self.tree.tree.* = {} TRUE"
                            (builtin "One Step Simplification" (formula "41"))
                           (rule "onlyCreatedObjectsAreReferencedFinal" (formula "40") (term "0") (ifseqformula "15") (ifseqformula "11"))
                           (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "41"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "onlyCreatedObjectsAreReferencedFinal" (formula "23") (term "0") (ifseqformula "16") (ifseqformula "12"))
                           (rule "applyEq" (formula "23") (term "1,0,1") (ifseqformula "24"))
                           (rule "replace_known_left" (formula "23") (term "1") (ifseqformula "22"))
                            (builtin "One Step Simplification" (formula "23"))
                           (rule "true_left" (formula "23"))
                           (rule "shift_paren_or" (formula "24") (term "0,0,0"))
                           (rule "shift_paren_or" (formula "37") (term "0,0,0"))
                           (rule "allLeft" (formula "36") (inst "t=i_1"))
                           (rule "inEqSimp_contradInEq0" (formula "36") (term "1") (ifseqformula "6"))
                           (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                           (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1"))
                           (rule "mul_literals" (formula "36") (term "0,1,0,0,1"))
                           (rule "polySimp_addAssoc" (formula "36") (term "0,0,1"))
                           (rule "polySimp_addComm0" (formula "36") (term "0,0,0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                           (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "36") (term "0,0,1"))
                           (rule "leq_literals" (formula "36") (term "0,1"))
                            (builtin "One Step Simplification" (formula "36"))
                           (rule "inEqSimp_contradInEq1" (formula "36") (term "0") (ifseqformula "4"))
                           (rule "qeq_literals" (formula "36") (term "0,0"))
                            (builtin "One Step Simplification" (formula "36"))
                           (rule "inEqSimp_contradInEq0" (formula "36") (ifseqformula "5"))
                           (rule "andLeft" (formula "36"))
                           (rule "inEqSimp_homoInEq1" (formula "36"))
                           (rule "polySimp_mulComm0" (formula "36") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "36") (term "1,0"))
                           (rule "mul_literals" (formula "36") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "36") (term "0"))
                           (rule "polySimp_addComm1" (formula "36") (term "0,0"))
                           (rule "add_literals" (formula "36") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "36") (term "0"))
                           (rule "add_literals" (formula "36") (term "1,1,0"))
                           (rule "times_zero_1" (formula "36") (term "1,0"))
                           (rule "add_literals" (formula "36") (term "0"))
                           (rule "leq_literals" (formula "36"))
                           (rule "closeFalse" (formula "36"))
                        )
                        (branch "CUT: self.sorted_splitters.* cap allLocs setMinus self.sorted_splitters.* cup self.tree.tree.* = {} FALSE"
                            (builtin "One Step Simplification" (formula "41"))
                           (rule "false_right" (formula "41"))
                           (rule "onlyCreatedObjectsAreReferencedFinal" (formula "39") (term "0") (ifseqformula "14") (ifseqformula "10"))
                           (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "40"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "onlyCreatedObjectsAreReferencedFinal" (formula "22") (term "0") (ifseqformula "15") (ifseqformula "11"))
                           (rule "applyEq" (formula "22") (term "1,0,1") (ifseqformula "23"))
                           (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "21"))
                            (builtin "One Step Simplification" (formula "22"))
                           (rule "true_left" (formula "22"))
                           (rule "shift_paren_or" (formula "23") (term "0,0,0"))
                           (rule "shift_paren_or" (formula "36") (term "0,0,0"))
                           (rule "allLeft" (formula "35") (inst "t=i_1"))
                           (rule "inEqSimp_contradInEq1" (formula "35") (term "0,0") (ifseqformula "3"))
                           (rule "qeq_literals" (formula "35") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "35"))
                           (rule "inEqSimp_contradInEq0" (formula "35") (term "0") (ifseqformula "4"))
                           (rule "inEqSimp_homoInEq1" (formula "35") (term "0,0"))
                           (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "35") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "35") (term "0,1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "35") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "35") (term "0,0,0,0"))
                           (rule "add_literals" (formula "35") (term "0,0,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,0"))
                           (rule "add_literals" (formula "35") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "35") (term "1,0,0,0"))
                           (rule "add_zero_right" (formula "35") (term "0,0,0"))
                           (rule "leq_literals" (formula "35") (term "0,0"))
                            (builtin "One Step Simplification" (formula "35"))
                           (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "35"))
                           (rule "andLeft" (formula "5"))
                           (rule "inEqSimp_homoInEq1" (formula "5"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                           (rule "mul_literals" (formula "5") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "5") (term "0"))
                           (rule "polySimp_addComm0" (formula "5") (term "0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "5") (term "0"))
                           (rule "add_literals" (formula "5") (term "1,1,0"))
                           (rule "times_zero_1" (formula "5") (term "1,0"))
                           (rule "add_literals" (formula "5") (term "0"))
                           (rule "leq_literals" (formula "5"))
                           (rule "closeFalse" (formula "5"))
                        )
                     )
                  )
                  (branch
                     (rule "replace_known_left" (formula "9") (term "0") (ifseqformula "10"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "replace_known_left" (formula "8") (term "0") (ifseqformula "10"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "9"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "true_left" (formula "11"))
                     (rule "cut_direct" (formula "39") (term "0"))
                     (branch "CUT: self.sorted_splitters.* cap allLocs setMinus self.sorted_splitters.* cup self.tree.tree.* = {} TRUE"
                         (builtin "One Step Simplification" (formula "40"))
                        (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "9") (term "0"))
                        (rule "wellFormedAnon" (formula "9") (term "1,0"))
                        (rule "replace_known_left" (formula "9") (term "0,1") (ifseqformula "10"))
                         (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "39")) (ifInst ""  (formula "14")) (ifInst ""  (formula "15")))
                        (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "10") (term "0") (inst "i=i"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "translateJavaSubInt" (formula "10") (term "1,1,0,0"))
                        (rule "translateJavaAddInt" (formula "10") (term "0,2,1,1,0"))
                        (rule "polySimp_elimSub" (formula "10") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "10") (term "1,1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "10") (term "0,2,1,1,0"))
                        (rule "polySimp_addComm0" (formula "10") (term "1,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                        (rule "nnf_imp2or" (formula "10") (term "0"))
                        (rule "nnf_notAnd" (formula "10") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
                        (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "10") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                        (rule "mul_literals" (formula "10") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                        (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "9") (term "0") (inst "j=j") (inst "i=i"))
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,1,0"))
                        (rule "nnf_imp2or" (formula "9") (term "0"))
                        (rule "nnf_notAnd" (formula "9") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
                        (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                        (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
                        (rule "nnf_imp2or" (formula "9") (term "0,1,0"))
                        (rule "nnf_notAnd" (formula "9") (term "0,0,1,0"))
                        (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,1,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,1,0"))
                        (rule "add_literals" (formula "9") (term "0,0,0,1,0,0,1,0"))
                        (rule "add_zero_left" (formula "9") (term "0,0,1,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,1,0"))
                        (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0,1,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0,1,0"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "38") (term "0") (ifseqformula "12") (ifseqformula "7"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "39"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "21") (term "0") (ifseqformula "13") (ifseqformula "8"))
                        (rule "applyEq" (formula "21") (term "1,0,1") (ifseqformula "22"))
                        (rule "replace_known_left" (formula "21") (term "1") (ifseqformula "20"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "true_left" (formula "21"))
                        (rule "shift_paren_or" (formula "22") (term "0,0,0"))
                        (rule "shift_paren_or" (formula "35") (term "0,0,0"))
                        (rule "commute_or" (formula "11") (term "0,0,1,0"))
                        (rule "equalityToElementOfRight" (formula "40") (inst "fv=fv") (inst "ov=ov"))
                         (builtin "One Step Simplification" (formula "40"))
                        (rule "allRight" (formula "40") (inst "sk=ov_0"))
                        (rule "allRight" (formula "40") (inst "sk=fv_0"))
                        (rule "notRight" (formula "40"))
                        (rule "elementOfIntersect" (formula "1"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                        (rule "elementOfSetMinus" (formula "2"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "notLeft" (formula "2"))
                        (rule "elementOfUnion" (formula "38"))
                         (builtin "One Step Simplification" (formula "38"))
                        (rule "closeTrue" (formula "38"))
                     )
                     (branch "CUT: self.sorted_splitters.* cap allLocs setMinus self.sorted_splitters.* cup self.tree.tree.* = {} FALSE"
                         (builtin "One Step Simplification" (formula "40"))
                        (rule "false_right" (formula "40"))
                        (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "8") (term "0"))
                        (rule "wellFormedAnon" (formula "8") (term "1,0"))
                        (rule "replace_known_right" (formula "8") (term "0,0,0") (ifseqformula "38"))
                         (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "13")) (ifInst ""  (formula "14")) (ifInst ""  (formula "9")))
                        (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "9") (term "0") (inst "i=i"))
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "translateJavaAddInt" (formula "9") (term "0,2,1,1,0"))
                        (rule "translateJavaSubInt" (formula "9") (term "1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "9") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "9") (term "1,1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "9") (term "0,2,1,1,0"))
                        (rule "polySimp_addComm0" (formula "9") (term "1,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                        (rule "nnf_imp2or" (formula "9") (term "0"))
                        (rule "nnf_notAnd" (formula "9") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
                        (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                        (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                        (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "8") (term "0"))
                        (rule "wellFormedAnon" (formula "8") (term "1,0"))
                        (rule "replace_known_left" (formula "8") (term "0,1,0") (ifseqformula "13"))
                         (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "38")) (ifInst ""  (formula "14")) (ifInst ""  (formula "9")))
                        (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "9") (term "0") (inst "j=j") (inst "i=i"))
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,1,0"))
                        (rule "nnf_imp2or" (formula "9") (term "0"))
                        (rule "nnf_notAnd" (formula "9") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
                        (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                        (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                        (rule "nnf_imp2or" (formula "9") (term "0,1,0"))
                        (rule "nnf_notAnd" (formula "9") (term "0,0,1,0"))
                        (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,1,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,1,0"))
                        (rule "add_literals" (formula "9") (term "0,0,0,1,0,0,1,0"))
                        (rule "add_zero_left" (formula "9") (term "0,0,1,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,1,0"))
                        (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0,1,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0,1,0"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "38") (term "0") (ifseqformula "12") (ifseqformula "6"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "39"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "9") (term "0"))
                        (rule "wellFormedAnon" (formula "9") (term "1,0"))
                        (rule "replace_known_left" (formula "9") (term "1,1,0") (ifseqformula "15"))
                         (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "39")) (ifInst ""  (formula "14")) (ifInst ""  (formula "10")))
                        (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "10") (term "0") (inst "i=i"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "translateJavaSubInt" (formula "10") (term "1,1,0,0"))
                        (rule "translateJavaAddInt" (formula "10") (term "0,2,1,1,0"))
                        (rule "polySimp_elimSub" (formula "10") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "10") (term "1,1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "10") (term "0,2,1,1,0"))
                        (rule "polySimp_addComm0" (formula "10") (term "1,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                        (rule "nnf_imp2or" (formula "10") (term "0"))
                        (rule "nnf_notAnd" (formula "10") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
                        (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "10") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                        (rule "mul_literals" (formula "10") (term "1,0,0,0"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "21") (term "0") (ifseqformula "13") (ifseqformula "7"))
                        (rule "applyEq" (formula "21") (term "0,0") (ifseqformula "22"))
                        (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "39"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "applyEq" (formula "21") (term "1,0") (ifseqformula "22"))
                        (rule "shift_paren_or" (formula "22") (term "0,0,0"))
                        (rule "shift_paren_or" (formula "35") (term "0,0,0"))
                        (rule "commute_or" (formula "11") (term "0,0,1,0"))
                        (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "9") (term "0") (inst "j=j") (inst "i=i"))
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                        (rule "nnf_imp2or" (formula "9") (term "0"))
                        (rule "nnf_notAnd" (formula "9") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
                        (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                        (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                        (rule "nnf_imp2or" (formula "9") (term "0,1,0"))
                        (rule "nnf_notAnd" (formula "9") (term "0,0,1,0"))
                        (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,1,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,1,0"))
                        (rule "add_literals" (formula "9") (term "0,0,0,1,0,0,1,0"))
                        (rule "add_zero_left" (formula "9") (term "0,0,1,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,1,0"))
                        (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0,1,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0,1,0"))
                        (rule "equalityToElementOfRight" (formula "40") (inst "fv=fv") (inst "ov=ov"))
                         (builtin "One Step Simplification" (formula "40"))
                        (rule "allRight" (formula "40") (inst "sk=ov_0"))
                        (rule "allRight" (formula "40") (inst "sk=fv_0"))
                        (rule "notRight" (formula "40"))
                        (rule "elementOfIntersect" (formula "1"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                        (rule "elementOfSetMinus" (formula "2"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "notLeft" (formula "2"))
                        (rule "elementOfUnion" (formula "38"))
                         (builtin "One Step Simplification" (formula "38"))
                        (rule "closeTrue" (formula "38"))
                     )
                  )
               )
               (branch "CUT: self.tree.<created> = TRUE FALSE"
                   (builtin "One Step Simplification" (formula "34"))
                  (rule "false_right" (formula "34"))
                  (rule "replace_known_right" (formula "34") (term "0,1") (ifseqformula "33"))
                   (builtin "One Step Simplification" (formula "34"))
                  (rule "nnf_imp2or" (formula "4") (term "0,1"))
                  (rule "onlyCreatedObjectsAreReferencedFinal" (formula "17") (term "1,0") (ifseqformula "6") (ifseqformula "8"))
                  (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "31"))
                   (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "34")))
                  (rule "closeFalse" (formula "17"))
               )
            )
         )
         (branch "Case 2"
            (rule "wellFormedAnon" (formula "15") (term "0,1"))
            (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "12"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "replace_known_left" (formula "15") (term "0,0,1") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "14")) (ifInst ""  (formula "3")))
            (rule "orRight" (formula "15"))
            (rule "polySimp_homoEq" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "10"))
            (rule "polySimp_mulAssoc" (formula "10") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "10") (term "0"))
            (rule "polySimp_sepPosMonomial" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1"))
            (rule "polySimp_rightDist" (formula "1") (term "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "10"))
            (rule "polySimp_mulLiterals" (formula "10") (term "0"))
            (rule "inEqSimp_exactShadow1" (formula "10") (ifseqformula "9"))
            (rule "greater_literals" (formula "10") (term "0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
            (rule "polySimp_rightDist" (formula "10") (term "0,0"))
            (rule "mul_literals" (formula "10") (term "0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "10") (term "0"))
            (rule "add_literals" (formula "10") (term "1,1,0"))
            (rule "polySimp_elimOne" (formula "10") (term "1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "10"))
            (rule "mul_literals" (formula "10") (term "1"))
            (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "13"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "translateJavaSubInt" (formula "13") (term "3,0,1"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "14"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "15"))
            (rule "notLeft" (formula "14"))
            (rule "notLeft" (formula "13"))
            (rule "polySimp_elimSub" (formula "19") (term "3,0"))
            (rule "mul_literals" (formula "19") (term "1,3,0"))
            (rule "polySimp_addComm0" (formula "19") (term "3,0"))
            (rule "inEqSimp_commuteLeq" (formula "18"))
            (rule "inEqSimp_commuteLeq" (formula "16"))
            (rule "inEqSimp_commuteLeq" (formula "17"))
            (rule "inEqSimp_commuteLeq" (formula "13"))
            (rule "applyEq" (formula "17") (term "1") (ifseqformula "15"))
            (rule "applyEq" (formula "16") (term "0") (ifseqformula "15"))
            (rule "applyEq" (formula "18") (term "1") (ifseqformula "15"))
            (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "15"))
            (rule "applyEq" (formula "19") (term "1,3,0") (ifseqformula "15"))
            (rule "applyEq" (formula "9") (term "0") (ifseqformula "15"))
            (rule "applyEq" (formula "12") (term "0,1,3,0") (ifseqformula "15"))
            (rule "inEqSimp_exactShadow1" (formula "11") (ifseqformula "9"))
            (rule "greater_literals" (formula "11") (term "0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
            (rule "polySimp_rightDist" (formula "11") (term "0,0"))
            (rule "mul_literals" (formula "11") (term "0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "11") (term "0"))
            (rule "add_literals" (formula "11") (term "1,1,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "11"))
            (rule "mul_literals" (formula "11") (term "1"))
            (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "9"))
            (rule "mul_literals" (formula "16") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "16"))
            (rule "mul_literals" (formula "16") (term "1"))
            (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "16"))
            (rule "leq_literals" (formula "10") (term "0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "true_left" (formula "10"))
            (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "7"))
             (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "26")))
            (rule "translateJavaSubInt" (formula "7") (term "0,2,0,1,0"))
            (rule "translateJavaSubInt" (formula "7") (term "0,2,1,1,0"))
            (rule "andLeft" (formula "7"))
            (rule "andLeft" (formula "7"))
            (rule "andLeft" (formula "7"))
            (rule "andLeft" (formula "7"))
            (rule "andLeft" (formula "7"))
            (rule "andLeft" (formula "7"))
            (rule "andLeft" (formula "7"))
            (rule "andLeft" (formula "9"))
            (rule "notLeft" (formula "7"))
            (rule "notLeft" (formula "7"))
            (rule "eqSymm" (formula "12"))
            (rule "eqSymm" (formula "9"))
            (rule "polySimp_elimSub" (formula "12") (term "0,2,1"))
            (rule "mul_literals" (formula "12") (term "1,0,2,1"))
            (rule "polySimp_elimSub" (formula "12") (term "0,2,0"))
            (rule "mul_literals" (formula "12") (term "1,0,2,0"))
            (rule "polySimp_addComm0" (formula "12") (term "0,2,1"))
            (rule "polySimp_addComm0" (formula "12") (term "0,2,0"))
            (rule "inEqSimp_commuteLeq" (formula "7"))
            (rule "applyEq" (formula "9") (term "0") (ifseqformula "20"))
            (rule "applyEq" (formula "24") (term "0,0") (ifseqformula "10"))
            (rule "inEqSimp_commuteGeq" (formula "24"))
            (rule "applyEq" (formula "30") (term "0") (ifseqformula "10"))
            (rule "applyEq" (formula "25") (term "1,0") (ifseqformula "10"))
            (rule "applyEq" (formula "11") (term "3,0") (ifseqformula "20"))
            (rule "applyEq" (formula "12") (term "1,0,2,0") (ifseqformula "20"))
            (rule "eqSymm" (formula "12"))
            (rule "applyEq" (formula "8") (term "0") (ifseqformula "1"))
            (rule "inEqSimp_homoInEq0" (formula "8"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
            (rule "polySimp_rightDist" (formula "8") (term "1,0"))
            (rule "polySimp_mulAssoc" (formula "8") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "0,1,0"))
            (rule "polySimp_elimOne" (formula "8") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "8") (term "0"))
            (rule "applyEq" (formula "7") (term "0") (ifseqformula "1"))
            (rule "inEqSimp_homoInEq1" (formula "7"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
            (rule "polySimp_rightDist" (formula "7") (term "1,0"))
            (rule "polySimp_mulAssoc" (formula "7") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "7") (term "0,1,0"))
            (rule "polySimp_elimOne" (formula "7") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "7") (term "0"))
            (rule "applyEq" (formula "22") (term "0") (ifseqformula "9"))
            (rule "applyEq" (formula "25") (term "1,3,0") (ifseqformula "9"))
            (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "9"))
            (rule "applyEq" (formula "23") (term "1") (ifseqformula "9"))
            (rule "applyEq" (formula "17") (term "0,1,3,0") (ifseqformula "9"))
            (rule "applyEq" (formula "15") (term "0") (ifseqformula "9"))
            (rule "applyEq" (formula "9") (term "1") (ifseqformula "1"))
            (rule "applyEq" (formula "15") (term "0") (ifseqformula "1"))
            (rule "inEqSimp_homoInEq0" (formula "15"))
            (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
            (rule "polySimp_rightDist" (formula "15") (term "1,0"))
            (rule "polySimp_mulAssoc" (formula "15") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "15") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0"))
            (rule "polySimp_elimOne" (formula "15") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "15") (term "0"))
            (rule "polySimp_addComm0" (formula "15") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "15") (term "0"))
            (rule "add_literals" (formula "15") (term "1,1,0"))
            (rule "times_zero_1" (formula "15") (term "1,0"))
            (rule "add_zero_right" (formula "15") (term "0"))
            (rule "applyEq" (formula "24") (term "0") (ifseqformula "9"))
            (rule "inEqSimp_commuteLeq" (formula "24"))
            (rule "applyEq" (formula "12") (term "1,0,2,0") (ifseqformula "20"))
            (rule "eqSymm" (formula "12"))
            (rule "applyEq" (formula "11") (term "3,0") (ifseqformula "9"))
            (rule "applyEq" (formula "17") (term "0,1,3,0") (ifseqformula "1"))
            (rule "polySimp_mulComm0" (formula "17") (term "1,3,0"))
            (rule "polySimp_rightDist" (formula "17") (term "1,3,0"))
            (rule "polySimp_mulAssoc" (formula "17") (term "0,1,3,0"))
            (rule "polySimp_mulComm0" (formula "17") (term "0,0,1,3,0"))
            (rule "polySimp_mulLiterals" (formula "17") (term "0,1,3,0"))
            (rule "polySimp_elimOne" (formula "17") (term "0,1,3,0"))
            (rule "polySimp_addAssoc" (formula "17") (term "3,0"))
            (rule "polySimp_addComm0" (formula "17") (term "0,3,0"))
            (rule "polySimp_pullOutFactor1b" (formula "17") (term "3,0"))
            (rule "add_literals" (formula "17") (term "1,1,3,0"))
            (rule "times_zero_1" (formula "17") (term "1,3,0"))
            (rule "add_zero_right" (formula "17") (term "3,0"))
            (rule "applyEq" (formula "23") (term "1") (ifseqformula "1"))
            (rule "applyEq" (formula "25") (term "1,3,0") (ifseqformula "1"))
            (rule "polySimp_addAssoc" (formula "25") (term "3,0"))
            (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "1"))
            (rule "polySimp_mulComm0" (formula "16") (term "0"))
            (rule "polySimp_rightDist" (formula "16") (term "0"))
            (rule "polySimp_mulComm0" (formula "16") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "16") (term "0,0"))
            (rule "inEqSimp_homoInEq1" (formula "16"))
            (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
            (rule "polySimp_rightDist" (formula "16") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0"))
            (rule "polySimp_mulComm0" (formula "16") (term "0,1,0"))
            (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "16") (term "0"))
            (rule "polySimp_addComm1" (formula "16") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "16") (term "0"))
            (rule "add_literals" (formula "16") (term "1,1,0"))
            (rule "applyEq" (formula "12") (term "1,0,2,0") (ifseqformula "9"))
            (rule "eqSymm" (formula "12"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,2,1"))
            (rule "applyEq" (formula "12") (term "1,0,2,0") (ifseqformula "9"))
            (rule "eqSymm" (formula "12"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,2,1"))
            (rule "applyEq" (formula "20") (term "1") (ifseqformula "9"))
            (rule "inEqSimp_sepNegMonomial1" (formula "8"))
            (rule "polySimp_mulLiterals" (formula "8") (term "0"))
            (rule "polySimp_elimOne" (formula "8") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "7"))
            (rule "polySimp_mulLiterals" (formula "7") (term "0"))
            (rule "polySimp_elimOne" (formula "7") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "16"))
            (rule "polySimp_mulLiterals" (formula "16") (term "0"))
            (rule "polySimp_elimOne" (formula "16") (term "0"))
            (rule "inEqSimp_exactShadow3" (formula "21") (ifseqformula "8"))
            (rule "mul_literals" (formula "21") (term "0,0"))
            (rule "polySimp_addAssoc" (formula "21") (term "0"))
            (rule "add_literals" (formula "21") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "21"))
            (rule "mul_literals" (formula "21") (term "1"))
            (rule "inEqSimp_subsumption1" (formula "21") (ifseqformula "15"))
            (rule "leq_literals" (formula "21") (term "0"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "true_left" (formula "21"))
            (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "8"))
            (rule "polySimp_rightDist" (formula "16") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0"))
            (rule "mul_literals" (formula "16") (term "0,0,0"))
            (rule "polySimp_addAssoc" (formula "16") (term "0"))
            (rule "polySimp_addComm1" (formula "16") (term "0,0"))
            (rule "add_literals" (formula "16") (term "0,0,0"))
            (rule "polySimp_pullOutFactor2b" (formula "16") (term "0"))
            (rule "add_literals" (formula "16") (term "1,1,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "16"))
            (rule "polySimp_mulLiterals" (formula "16") (term "0"))
            (rule "polySimp_elimOne" (formula "16") (term "0"))
            (rule "applyEq" (formula "23") (term "0") (ifseqformula "1"))
            (rule "inEqSimp_homoInEq1" (formula "23"))
            (rule "polySimp_mulComm0" (formula "23") (term "1,0"))
            (rule "polySimp_rightDist" (formula "23") (term "1,0"))
            (rule "polySimp_mulAssoc" (formula "23") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "23") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "23") (term "0,1,0"))
            (rule "polySimp_elimOne" (formula "23") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "23") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "23"))
            (rule "polySimp_mulLiterals" (formula "23") (term "0"))
            (rule "polySimp_elimOne" (formula "23") (term "0"))
            (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "27"))
             (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "30")) (ifInst ""  (formula "20")))
            (rule "translateJavaSubInt" (formula "27") (term "3,0,1"))
            (rule "andLeft" (formula "27"))
            (rule "andLeft" (formula "27"))
            (rule "andLeft" (formula "27"))
            (rule "andLeft" (formula "27"))
            (rule "andLeft" (formula "29"))
            (rule "andLeft" (formula "27"))
            (rule "notLeft" (formula "27"))
            (rule "polySimp_elimSub" (formula "32") (term "3,0"))
            (rule "mul_literals" (formula "32") (term "1,3,0"))
            (rule "polySimp_addComm0" (formula "32") (term "3,0"))
            (rule "inEqSimp_commuteLeq" (formula "31"))
            (rule "inEqSimp_commuteLeq" (formula "29"))
            (rule "inEqSimp_commuteLeq" (formula "30"))
            (rule "inEqSimp_commuteLeq" (formula "27"))
            (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "10"))
            (rule "inEqSimp_commuteGeq" (formula "30"))
            (rule "applyEq" (formula "29") (term "1") (ifseqformula "27"))
            (rule "applyEq" (formula "21") (term "0") (ifseqformula "27"))
            (rule "applyEq" (formula "30") (term "1,3,0") (ifseqformula "26"))
            (rule "applyEq" (formula "27") (term "0") (ifseqformula "26"))
            (rule "applyEq" (formula "31") (term "0") (ifseqformula "10"))
            (rule "applyEq" (formula "30") (term "1,0") (ifseqformula "10"))
            (rule "applyEq" (formula "26") (term "1") (ifseqformula "9"))
            (rule "applyEq" (formula "27") (term "0") (ifseqformula "9"))
            (rule "inEqSimp_homoInEq1" (formula "27"))
            (rule "polySimp_mulComm0" (formula "27") (term "1,0"))
            (rule "polySimp_rightDist" (formula "27") (term "1,0"))
            (rule "polySimp_mulAssoc" (formula "27") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "27") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "27") (term "0,1,0"))
            (rule "polySimp_elimOne" (formula "27") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "27") (term "0"))
            (rule "applyEq" (formula "30") (term "1,3,0") (ifseqformula "9"))
            (rule "polySimp_addAssoc" (formula "30") (term "3,0"))
            (rule "applyEq" (formula "28") (term "1") (ifseqformula "9"))
            (rule "applyEq" (formula "28") (term "0") (ifseqformula "26"))
            (rule "inEqSimp_commuteLeq" (formula "28"))
            (rule "inEqSimp_sepNegMonomial0" (formula "27"))
            (rule "polySimp_mulLiterals" (formula "27") (term "0"))
            (rule "polySimp_elimOne" (formula "27") (term "0"))
            (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "13"))
             (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "30")) (ifInst ""  (formula "20")))
            (rule "translateJavaSubInt" (formula "13") (term "3,0,1"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "14"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "13"))
            (rule "notLeft" (formula "13"))
            (rule "polySimp_elimSub" (formula "18") (term "3,0"))
            (rule "mul_literals" (formula "18") (term "1,3,0"))
            (rule "polySimp_addComm0" (formula "18") (term "3,0"))
            (rule "inEqSimp_commuteLeq" (formula "17"))
            (rule "inEqSimp_commuteLeq" (formula "15"))
            (rule "inEqSimp_commuteLeq" (formula "16"))
            (rule "inEqSimp_commuteLeq" (formula "13"))
            (rule "applyEq" (formula "14") (term "0") (ifseqformula "13"))
            (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "10"))
            (rule "inEqSimp_commuteGeq" (formula "16"))
            (rule "applyEq" (formula "17") (term "1,3,0") (ifseqformula "30"))
            (rule "polySimp_addAssoc" (formula "17") (term "3,0"))
            (rule "applyEq" (formula "15") (term "1") (ifseqformula "13"))
            (rule "applyEq" (formula "17") (term "1,0") (ifseqformula "10"))
            (rule "applyEq" (formula "31") (term "0") (ifseqformula "10"))
            (rule "applyEq" (formula "29") (term "0") (ifseqformula "13"))
            (rule "applyEq" (formula "13") (term "1") (ifseqformula "9"))
            (rule "applyEq" (formula "14") (term "0") (ifseqformula "9"))
            (rule "inEqSimp_homoInEq1" (formula "14"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0"))
            (rule "polySimp_rightDist" (formula "14") (term "1,0"))
            (rule "polySimp_mulAssoc" (formula "14") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "14") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0"))
            (rule "polySimp_elimOne" (formula "14") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "14") (term "0"))
            (rule "applyEq" (formula "15") (term "1") (ifseqformula "9"))
            (rule "applyEq" (formula "15") (term "0") (ifseqformula "13"))
            (rule "inEqSimp_commuteLeq" (formula "15"))
            (rule "inEqSimp_sepNegMonomial0" (formula "14"))
            (rule "polySimp_mulLiterals" (formula "14") (term "0"))
            (rule "polySimp_elimOne" (formula "14") (term "0"))
            (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "11") (term "0"))
            (rule "replace_known_right" (formula "11") (term "0,0,0") (ifseqformula "28"))
             (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "2")) (ifInst ""  (formula "12")))
            (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "12") (term "0") (inst "j=j") (inst "i=i"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
            (rule "polySimp_mulAssoc" (formula "12") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "0,0,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,1,0"))
            (rule "polySimp_mulAssoc" (formula "12") (term "0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "0,0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "12") (term "0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "0,1,1,0,0"))
            (rule "mul_literals" (formula "12") (term "0,0,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "0,1,1,0,0,1,0"))
            (rule "mul_literals" (formula "12") (term "0,0,1,1,0,0,1,0"))
            (rule "nnf_imp2or" (formula "12") (term "0"))
            (rule "nnf_notAnd" (formula "12") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "0,1,0,0,1,0,0"))
            (rule "mul_literals" (formula "12") (term "0,0,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,1,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "12") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "0,1,1,0,0"))
            (rule "nnf_imp2or" (formula "12") (term "0,1,0"))
            (rule "Definition_axiom_for_isClassifiedAs_in_de_wiesler_Tree" (formula "19") (term "0"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "translateJavaSubInt" (formula "19") (term "0,2,0,1,0"))
            (rule "translateJavaSubInt" (formula "19") (term "1,0,1"))
            (rule "andLeft" (formula "19"))
            (rule "polySimp_elimSub" (formula "19") (term "0,2,0,1"))
            (rule "mul_literals" (formula "19") (term "1,0,2,0,1"))
            (rule "polySimp_elimSub" (formula "20") (term "1,0"))
            (rule "mul_literals" (formula "20") (term "1,1,0"))
            (rule "polySimp_addComm0" (formula "19") (term "0,2,0,1"))
            (rule "polySimp_addComm0" (formula "20") (term "1,0"))
            (rule "inEqSimp_ltToLeq" (formula "19") (term "0"))
            (rule "add_zero_right" (formula "19") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "19") (term "1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "19") (term "1"))
            (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "20") (term "0"))
            (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0"))
            (rule "mul_literals" (formula "20") (term "0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "20") (term "0,0,0"))
            (rule "add_literals" (formula "20") (term "0,0,0,0"))
            (rule "polySimp_addComm1" (formula "20") (term "0,0"))
            (rule "inEqSimp_commuteLeq" (formula "20") (term "1"))
            (rule "applyEq" (formula "20") (term "0,1,0,0") (ifseqformula "14"))
            (rule "polySimp_mulComm0" (formula "20") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "20") (term "1,0,0"))
            (rule "polySimp_mulAssoc" (formula "20") (term "0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "20") (term "0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "20") (term "0,1,0,0"))
            (rule "polySimp_elimOne" (formula "20") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "20") (term "0,0"))
            (rule "polySimp_pullOutFactor3b" (formula "20") (term "0,0,0"))
            (rule "applyEq" (formula "20") (term "1,0,1") (ifseqformula "10"))
            (rule "applyEq" (formula "19") (term "1,1,0,1") (ifseqformula "10"))
            (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0"))
            (rule "polySimp_mulLiterals" (formula "19") (term "0,0"))
            (rule "polySimp_elimOne" (formula "19") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "0"))
            (rule "polySimp_mulLiterals" (formula "20") (term "0,0"))
            (rule "polySimp_elimOne" (formula "20") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1"))
            (rule "polySimp_mulComm0" (formula "19") (term "1,1"))
            (rule "polySimp_rightDist" (formula "19") (term "1,1"))
            (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1"))
            (rule "mul_literals" (formula "19") (term "0,1,1"))
            (rule "polySimp_elimOne" (formula "19") (term "1,1,1"))
            (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "26") (term "0") (inst "j=j") (inst "i=i"))
             (builtin "One Step Simplification" (formula "26"))
            (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "26") (term "0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "26") (term "1,0,1,0,0,1,0,0,1,0"))
            (rule "mul_literals" (formula "26") (term "0,0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "26") (term "1,0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "26") (term "0,0,0,1,0,0,1,0"))
            (rule "add_literals" (formula "26") (term "0,0,0,0,1,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "26") (term "0,1,0,0,1,0,0"))
            (rule "mul_literals" (formula "26") (term "0,0,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "26") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "26") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "26") (term "0,0,0,1,0,0"))
            (rule "add_literals" (formula "26") (term "0,0,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "26") (term "1,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "26") (term "0,1,1,0,0,1,0"))
            (rule "mul_literals" (formula "26") (term "0,0,1,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
            (rule "polySimp_rightDist" (formula "26") (term "0,1,1,0,0"))
            (rule "mul_literals" (formula "26") (term "0,0,1,1,0,0"))
            (rule "nnf_notAnd" (formula "12") (term "0,0,1,0"))
            (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0,0,1,0,0,1,0"))
            (rule "mul_literals" (formula "12") (term "0,0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,1,0,0,1,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,0,1,0,0,1,0"))
            (rule "add_zero_left" (formula "12") (term "0,0,0,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "0,1,1,0,0,1,0"))
            (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,1,0"))
            (rule "mul_literals" (formula "12") (term "0,1,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,1,0"))
            (rule "nnf_imp2or" (formula "26") (term "0"))
            (rule "nnf_notAnd" (formula "26") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
            (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
            (rule "add_literals" (formula "26") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
            (rule "mul_literals" (formula "26") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "26") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "26") (term "1,0,1,0,0,1,0,0"))
            (rule "mul_literals" (formula "26") (term "0,0,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "26") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "26") (term "0,0,0,1,0,0"))
            (rule "add_literals" (formula "26") (term "0,0,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
            (rule "polySimp_rightDist" (formula "26") (term "0,1,1,0,0"))
            (rule "mul_literals" (formula "26") (term "0,0,1,1,0,0"))
            (rule "nnf_imp2or" (formula "26") (term "0,1,0"))
            (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "28") (term "0") (inst "j=j") (inst "i=i"))
             (builtin "One Step Simplification" (formula "28"))
            (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "28") (term "0,1,0,0,1,0,0"))
            (rule "mul_literals" (formula "28") (term "0,0,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "28") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "28") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "28") (term "0,0,0,1,0,0"))
            (rule "add_literals" (formula "28") (term "0,0,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "28") (term "0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "28") (term "1,0,1,0,0,1,0,0,1,0"))
            (rule "mul_literals" (formula "28") (term "0,0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "28") (term "1,0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "28") (term "0,0,0,1,0,0,1,0"))
            (rule "add_literals" (formula "28") (term "0,0,0,0,1,0,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "28") (term "1,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0"))
            (rule "polySimp_rightDist" (formula "28") (term "0,1,1,0,0"))
            (rule "mul_literals" (formula "28") (term "0,0,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "28") (term "0,1,1,0,0,1,0"))
            (rule "mul_literals" (formula "28") (term "0,0,1,1,0,0,1,0"))
            (rule "nnf_notAnd" (formula "26") (term "0,0,1,0"))
            (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "26") (term "0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "26") (term "1,0,1,0,0,1,0,0,1,0"))
            (rule "mul_literals" (formula "26") (term "0,0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "26") (term "1,0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "26") (term "0,0,0,1,0,0,1,0"))
            (rule "add_literals" (formula "26") (term "0,0,0,0,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "26") (term "0,1,1,0,0,1,0"))
            (rule "mul_literals" (formula "26") (term "0,0,1,1,0,0,1,0"))
            (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0,1,0"))
            (rule "mul_literals" (formula "26") (term "0,1,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0,1,0"))
            (rule "nnf_imp2or" (formula "28") (term "0"))
            (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "11") (term "0"))
            (rule "replace_known_right" (formula "11") (term "0,0,0") (ifseqformula "30"))
             (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "2")) (ifInst ""  (formula "12")))
            (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "12") (term "0") (inst "i=i"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "translateJavaAddInt" (formula "12") (term "0,2,1,1,0"))
            (rule "translateJavaSubInt" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_elimSub" (formula "12") (term "1,1,0,0"))
            (rule "mul_literals" (formula "12") (term "1,1,1,0,0"))
            (rule "polySimp_addComm0" (formula "12") (term "0,2,1,1,0"))
            (rule "polySimp_addComm1" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_addComm0" (formula "12") (term "0,1,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0,0,1,0,0"))
            (rule "mul_literals" (formula "12") (term "0,0,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,1,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "0,1,1,0,0"))
            (rule "mul_literals" (formula "12") (term "0,0,1,1,0,0"))
            (rule "nnf_notAnd" (formula "29") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0"))
            (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0"))
            (rule "add_literals" (formula "29") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0"))
            (rule "mul_literals" (formula "29") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "29") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1,0,0,1,0,0"))
            (rule "mul_literals" (formula "29") (term "0,0,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "29") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "29") (term "0,0,0,1,0,0"))
            (rule "add_literals" (formula "29") (term "0,0,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0"))
            (rule "polySimp_rightDist" (formula "29") (term "0,1,1,0,0"))
            (rule "mul_literals" (formula "29") (term "0,0,1,1,0,0"))
            (rule "nnf_imp2or" (formula "29") (term "0,1,0"))
            (rule "nnf_imp2or" (formula "12") (term "0"))
            (rule "nnf_notAnd" (formula "12") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
            (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0,0,1,0,0"))
            (rule "mul_literals" (formula "12") (term "0,0,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,1,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "0,1,1,0,0"))
            (rule "mul_literals" (formula "12") (term "0,0,1,1,0,0"))
            (rule "arrayLengthIsAShort" (formula "25") (term "0"))
             (builtin "One Step Simplification" (formula "25"))
            (rule "true_left" (formula "25"))
            (rule "arrayLengthNotNegative" (formula "25") (term "0"))
            (rule "nnf_notAnd" (formula "30") (term "0,0,1,0"))
            (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "30") (term "1,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,0,1,0"))
            (rule "mul_literals" (formula "30") (term "0,1,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0,0,1,0"))
            (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "30") (term "0,1,0,0,1,0,0,1,0"))
            (rule "mul_literals" (formula "30") (term "0,0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "30") (term "1,0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "30") (term "1,0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "30") (term "0,0,0,1,0,0,1,0"))
            (rule "add_literals" (formula "30") (term "0,0,0,0,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "30") (term "0,1,1,0,0,1,0"))
            (rule "mul_literals" (formula "30") (term "0,0,1,1,0,0,1,0"))
            (rule "arrayLengthIsAShort" (formula "27") (term "0"))
             (builtin "One Step Simplification" (formula "27"))
            (rule "true_left" (formula "27"))
            (rule "arrayLengthNotNegative" (formula "27") (term "0"))
            (rule "commute_or" (formula "13") (term "0,0,1,0"))
            (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "11") (term "0") (inst "j=j") (inst "i=i"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,1,0"))
            (rule "polySimp_mulAssoc" (formula "11") (term "0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "0,0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "11") (term "0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
            (rule "polySimp_mulAssoc" (formula "11") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "0,0,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "11") (term "0,1,1,0,0,1,0"))
            (rule "mul_literals" (formula "11") (term "0,0,1,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "0,1,1,0,0"))
            (rule "mul_literals" (formula "11") (term "0,0,1,1,0,0"))
            (rule "nnf_imp2or" (formula "11") (term "0"))
            (rule "nnf_notAnd" (formula "11") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
            (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
            (rule "add_literals" (formula "11") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
            (rule "mul_literals" (formula "11") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0,0,1,0,0"))
            (rule "mul_literals" (formula "11") (term "0,0,1,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,1,0,0"))
            (rule "add_literals" (formula "11") (term "0,0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "11") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "0,1,1,0,0"))
            (rule "nnf_imp2or" (formula "11") (term "0,1,0"))
            (rule "nnf_notAnd" (formula "11") (term "0,0,1,0"))
            (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "11") (term "0,1,0,0,1,0,0,1,0"))
            (rule "mul_literals" (formula "11") (term "0,0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,1,0,0,1,0"))
            (rule "add_literals" (formula "11") (term "0,0,0,0,1,0,0,1,0"))
            (rule "add_zero_left" (formula "11") (term "0,0,0,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "0,1,1,0,0,1,0"))
            (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,1,0"))
            (rule "mul_literals" (formula "11") (term "0,1,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,1,0"))
            (rule "commute_or" (formula "29") (term "0,0,1,0"))
            (rule "commute_or" (formula "31") (term "0,0,1,0"))
            (rule "cut_direct" (formula "21") (term "1"))
            (branch "CUT: self.sorted_splitters[classify_sk_0] >= value TRUE"
                (builtin "One Step Simplification" (formula "22"))
               (rule "true_left" (formula "22"))
               (rule "cut_direct" (formula "20") (term "0"))
               (branch "CUT: classify_sk_0 >= 1 TRUE"
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "20"))
                  (rule "leq_literals" (formula "17") (term "0"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "true_left" (formula "17"))
                  (rule "commute_or" (formula "11") (term "0,0,1,0"))
                  (rule "all_pull_out3" (formula "12") (term "0"))
                  (rule "shift_paren_or" (formula "12") (term "0,0"))
                  (rule "shift_paren_or" (formula "12") (term "0,0,0"))
                  (rule "onlyCreatedObjectsAreReferencedFinal" (formula "15") (term "1,0") (ifseqformula "2") (ifseqformula "4"))
                  (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "33"))
                   (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "35")))
                  (rule "closeFalse" (formula "15"))
               )
               (branch "CUT: classify_sk_0 >= 1 FALSE"
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "true_left" (formula "20"))
                  (rule "inEqSimp_geqRight" (formula "31"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_subsumption0" (formula "19") (ifseqformula "1"))
                  (rule "leq_literals" (formula "19") (term "0"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "true_left" (formula "19"))
                  (rule "inEqSimp_antiSymm" (formula "18") (ifseqformula "1"))
                  (rule "applyEqRigid" (formula "19") (term "0") (ifseqformula "18"))
                  (rule "qeq_literals" (formula "19"))
                  (rule "true_left" (formula "19"))
                  (rule "applyEqRigid" (formula "9") (term "1,1") (ifseqformula "18"))
                  (rule "add_zero_right" (formula "9") (term "1"))
                  (rule "applyEq" (formula "19") (term "0,1,1") (ifseqformula "18"))
                  (rule "times_zero_2" (formula "19") (term "1,1"))
                  (rule "add_zero_right" (formula "19") (term "1"))
                  (rule "applyEq" (formula "20") (term "0,2,0") (ifseqformula "18"))
                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "18"))
                  (rule "leq_literals" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "applyEqRigid" (formula "7") (term "1,1") (ifseqformula "17"))
                  (rule "add_zero_right" (formula "7") (term "1"))
                  (rule "applyEq" (formula "26") (term "0,1,0,1,0,0,0,1,0") (ifseqformula "16"))
                  (rule "times_zero_2" (formula "26") (term "1,0,1,0,0,0,1,0"))
                  (rule "add_literals" (formula "26") (term "0,1,0,0,0,1,0"))
                  (rule "applyEqRigid" (formula "26") (term "0,1,0,1,1,0,0") (ifseqformula "16"))
                  (rule "times_zero_2" (formula "26") (term "1,0,1,1,0,0"))
                  (rule "add_literals" (formula "26") (term "0,1,1,0,0"))
                  (rule "applyEqRigid" (formula "10") (term "0,0,1,1,0,0") (ifseqformula "16"))
                  (rule "times_zero_2" (formula "10") (term "0,1,1,0,0"))
                  (rule "add_zero_left" (formula "10") (term "1,1,0,0"))
                  (rule "applyEqRigid" (formula "11") (term "0,1,0,1,1,0,0") (ifseqformula "16"))
                  (rule "times_zero_2" (formula "11") (term "1,0,1,1,0,0"))
                  (rule "add_zero_right" (formula "11") (term "0,1,1,0,0"))
                  (rule "applyEqRigid" (formula "23") (term "0,0,1") (ifseqformula "16"))
                  (rule "times_zero_2" (formula "23") (term "0,1"))
                  (rule "add_zero_left" (formula "23") (term "1"))
                  (rule "applyEqRigid" (formula "10") (term "0,0,1,1,0,0,1,0") (ifseqformula "16"))
                  (rule "times_zero_2" (formula "10") (term "0,1,1,0,0,1,0"))
                  (rule "add_zero_left" (formula "10") (term "1,1,0,0,1,0"))
                  (rule "applyEq" (formula "28") (term "0,1,0,1,0,0,0,1,0") (ifseqformula "16"))
                  (rule "times_zero_2" (formula "28") (term "1,0,1,0,0,0,1,0"))
                  (rule "add_literals" (formula "28") (term "0,1,0,0,0,1,0"))
                  (rule "applyEq" (formula "28") (term "0,1,0,1,1,0,0") (ifseqformula "16"))
                  (rule "times_zero_2" (formula "28") (term "1,0,1,1,0,0"))
                  (rule "add_literals" (formula "28") (term "0,1,1,0,0"))
                  (rule "applyEq" (formula "36") (term "1") (ifseqformula "16"))
                  (rule "applyEq" (formula "12") (term "0,0,1,1,0,0") (ifseqformula "16"))
                  (rule "times_zero_2" (formula "12") (term "0,1,1,0,0"))
                  (rule "add_zero_left" (formula "12") (term "1,1,0,0"))
                  (rule "applyEq" (formula "13") (term "0,1,0,0,2,0") (ifseqformula "16"))
                  (rule "times_zero_2" (formula "13") (term "1,0,0,2,0"))
                  (rule "add_zero_right" (formula "13") (term "0,0,2,0"))
                  (rule "eqSymm" (formula "13"))
                  (rule "applyEq" (formula "25") (term "0,0,1") (ifseqformula "16"))
                  (rule "times_zero_2" (formula "25") (term "0,1"))
                  (rule "add_zero_left" (formula "25") (term "1"))
                  (rule "applyEqRigid" (formula "12") (term "0,0,1,0,0,0,1,0") (ifseqformula "16"))
                  (rule "times_zero_2" (formula "12") (term "0,1,0,0,0,1,0"))
                  (rule "add_zero_left" (formula "12") (term "1,0,0,0,1,0"))
                  (rule "applyEqRigid" (formula "1") (term "0,0,1") (ifseqformula "16"))
                  (rule "times_zero_2" (formula "1") (term "0,1"))
                  (rule "add_zero_left" (formula "1") (term "1"))
                  (rule "applyEqRigid" (formula "14") (term "0,0,1") (ifseqformula "16"))
                  (rule "times_zero_2" (formula "14") (term "0,1"))
                  (rule "add_zero_left" (formula "14") (term "1"))
                  (rule "applyEqRigid" (formula "8") (term "0,0,1") (ifseqformula "16"))
                  (rule "times_zero_2" (formula "8") (term "0,1"))
                  (rule "add_zero_left" (formula "8") (term "1"))
                  (rule "applyEqRigid" (formula "13") (term "0,1,0,0,2,0") (ifseqformula "16"))
                  (rule "times_zero_2" (formula "13") (term "1,0,0,2,0"))
                  (rule "add_literals" (formula "13") (term "0,0,2,0"))
                  (rule "eqSymm" (formula "13"))
                  (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "21"))
                  (rule "leq_literals" (formula "17") (term "0"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "true_left" (formula "17"))
                  (rule "commute_or" (formula "10") (term "0,0,1,0"))
                  (rule "onlyCreatedObjectsAreReferencedFinal" (formula "14") (term "1,0") (ifseqformula "2") (ifseqformula "4"))
                  (rule "replace_known_right" (formula "14") (term "1") (ifseqformula "31"))
                   (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "29")))
                  (rule "closeFalse" (formula "14"))
               )
            )
            (branch "CUT: self.sorted_splitters[classify_sk_0] >= value FALSE"
                (builtin "One Step Simplification" (formula "21"))
               (rule "notLeft" (formula "21"))
               (rule "inEqSimp_geqRight" (formula "32"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "inEqSimp_geqRight" (formula "32"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "2"))
               (rule "polySimp_mulComm0" (formula "2") (term "1"))
               (rule "polySimp_rightDist" (formula "2") (term "1"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
               (rule "mul_literals" (formula "2") (term "0,1"))
               (rule "polySimp_elimOne" (formula "2") (term "1,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
               (rule "mul_literals" (formula "1") (term "0,1"))
               (rule "inEqSimp_antiSymm" (formula "21") (ifseqformula "1"))
               (rule "applyEq" (formula "22") (term "0") (ifseqformula "21"))
               (rule "inEqSimp_homoInEq1" (formula "22"))
               (rule "polySimp_pullOutFactor1" (formula "22") (term "0"))
               (rule "add_literals" (formula "22") (term "1,0"))
               (rule "times_zero_1" (formula "22") (term "0"))
               (rule "leq_literals" (formula "22"))
               (rule "true_left" (formula "22"))
               (rule "applyEq" (formula "9") (term "0") (ifseqformula "21"))
               (rule "inEqSimp_homoInEq1" (formula "9"))
               (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
               (rule "polySimp_rightDist" (formula "9") (term "1,0"))
               (rule "mul_literals" (formula "9") (term "0,1,0"))
               (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0"))
               (rule "polySimp_addAssoc" (formula "9") (term "0"))
               (rule "polySimp_addComm1" (formula "9") (term "0,0"))
               (rule "add_literals" (formula "9") (term "0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
               (rule "add_literals" (formula "9") (term "1,1,0"))
               (rule "applyEq" (formula "15") (term "1,1,0,0,0,1,0") (ifseqformula "21"))
               (rule "polySimp_addAssoc" (formula "15") (term "1,0,0,0,1,0"))
               (rule "polySimp_addComm0" (formula "15") (term "0,1,0,0,0,1,0"))
               (rule "polySimp_pullOutFactor0b" (formula "15") (term "1,0,0,0,1,0"))
               (rule "add_literals" (formula "15") (term "1,1,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,1,0"))
               (rule "applyEq" (formula "16") (term "1,0,2,0") (ifseqformula "21"))
               (rule "eqSymm" (formula "16"))
               (rule "polySimp_addAssoc" (formula "16") (term "0,2,1"))
               (rule "polySimp_addComm1" (formula "16") (term "0,0,2,1"))
               (rule "add_literals" (formula "16") (term "0,0,0,2,1"))
               (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,2,1"))
               (rule "add_literals" (formula "16") (term "1,1,0,2,1"))
               (rule "polySimp_elimOne" (formula "16") (term "1,0,2,1"))
               (rule "applyEq" (formula "15") (term "1,1,1,0,0") (ifseqformula "21"))
               (rule "polySimp_addAssoc" (formula "15") (term "1,1,0,0"))
               (rule "polySimp_addComm0" (formula "15") (term "0,1,1,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "15") (term "1,1,0,0"))
               (rule "add_literals" (formula "15") (term "1,1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
               (rule "applyEq" (formula "13") (term "1,1,1,0,0") (ifseqformula "21"))
               (rule "polySimp_addAssoc" (formula "13") (term "1,1,0,0"))
               (rule "polySimp_addComm0" (formula "13") (term "0,1,1,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "13") (term "1,1,0,0"))
               (rule "add_literals" (formula "13") (term "1,1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
               (rule "applyEq" (formula "32") (term "1,1,1,0,0") (ifseqformula "21"))
               (rule "polySimp_addAssoc" (formula "32") (term "1,1,0,0"))
               (rule "polySimp_addComm1" (formula "32") (term "0,1,1,0,0"))
               (rule "add_literals" (formula "32") (term "0,0,1,1,0,0"))
               (rule "add_zero_left" (formula "32") (term "0,1,1,0,0"))
               (rule "polySimp_pullOutFactor0" (formula "32") (term "1,1,0,0"))
               (rule "add_literals" (formula "32") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0"))
               (rule "applyEq" (formula "14") (term "1,1,1,0,0") (ifseqformula "21"))
               (rule "polySimp_addAssoc" (formula "14") (term "1,1,0,0"))
               (rule "polySimp_addComm1" (formula "14") (term "0,1,1,0,0"))
               (rule "add_literals" (formula "14") (term "0,0,1,1,0,0"))
               (rule "add_zero_left" (formula "14") (term "0,1,1,0,0"))
               (rule "polySimp_pullOutFactor0" (formula "14") (term "1,1,0,0"))
               (rule "add_literals" (formula "14") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0"))
               (rule "applyEq" (formula "13") (term "1,1,1,0,0,1,0") (ifseqformula "21"))
               (rule "polySimp_addAssoc" (formula "13") (term "1,1,0,0,1,0"))
               (rule "polySimp_addComm0" (formula "13") (term "0,1,1,0,0,1,0"))
               (rule "polySimp_pullOutFactor0b" (formula "13") (term "1,1,0,0,1,0"))
               (rule "add_literals" (formula "13") (term "1,1,1,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,1,0"))
               (rule "applyEq" (formula "30") (term "1,1,1,0,0") (ifseqformula "21"))
               (rule "polySimp_addAssoc" (formula "30") (term "1,1,0,0"))
               (rule "polySimp_addComm1" (formula "30") (term "0,1,1,0,0"))
               (rule "add_literals" (formula "30") (term "0,0,1,1,0,0"))
               (rule "add_zero_left" (formula "30") (term "0,1,1,0,0"))
               (rule "polySimp_pullOutFactor0" (formula "30") (term "1,1,0,0"))
               (rule "add_literals" (formula "30") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0"))
               (rule "applyEq" (formula "29") (term "1,1") (ifseqformula "21"))
               (rule "polySimp_addAssoc" (formula "29") (term "1"))
               (rule "polySimp_addComm0" (formula "29") (term "0,1"))
               (rule "polySimp_pullOutFactor0b" (formula "29") (term "1"))
               (rule "add_literals" (formula "29") (term "1,1,1"))
               (rule "polySimp_elimOne" (formula "29") (term "1,1"))
               (rule "applyEq" (formula "25") (term "0") (ifseqformula "21"))
               (rule "inEqSimp_homoInEq1" (formula "25"))
               (rule "polySimp_mulComm0" (formula "25") (term "1,0"))
               (rule "polySimp_rightDist" (formula "25") (term "1,0"))
               (rule "mul_literals" (formula "25") (term "0,1,0"))
               (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0"))
               (rule "polySimp_addAssoc" (formula "25") (term "0"))
               (rule "add_literals" (formula "25") (term "0,0"))
               (rule "applyEq" (formula "1") (term "0") (ifseqformula "21"))
               (rule "inEqSimp_homoInEq0" (formula "1"))
               (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "1,0"))
               (rule "times_zero_1" (formula "1") (term "0"))
               (rule "qeq_literals" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "applyEq" (formula "29") (term "1,1,0,0,0,1,0") (ifseqformula "20"))
               (rule "polySimp_addAssoc" (formula "29") (term "1,0,0,0,1,0"))
               (rule "polySimp_addComm1" (formula "29") (term "0,1,0,0,0,1,0"))
               (rule "add_literals" (formula "29") (term "0,0,1,0,0,0,1,0"))
               (rule "add_zero_left" (formula "29") (term "0,1,0,0,0,1,0"))
               (rule "polySimp_pullOutFactor0" (formula "29") (term "1,0,0,0,1,0"))
               (rule "add_literals" (formula "29") (term "1,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "29") (term "1,0,0,0,1,0"))
               (rule "applyEq" (formula "26") (term "1,1") (ifseqformula "20"))
               (rule "polySimp_addAssoc" (formula "26") (term "1"))
               (rule "polySimp_addComm0" (formula "26") (term "0,1"))
               (rule "polySimp_pullOutFactor0b" (formula "26") (term "1"))
               (rule "add_literals" (formula "26") (term "1,1,1"))
               (rule "polySimp_elimOne" (formula "26") (term "1,1"))
               (rule "applyEq" (formula "31") (term "1,1,0,0,0,1,0") (ifseqformula "20"))
               (rule "polySimp_addAssoc" (formula "31") (term "1,0,0,0,1,0"))
               (rule "polySimp_addComm1" (formula "31") (term "0,1,0,0,0,1,0"))
               (rule "add_literals" (formula "31") (term "0,0,1,0,0,0,1,0"))
               (rule "add_zero_left" (formula "31") (term "0,1,0,0,0,1,0"))
               (rule "polySimp_pullOutFactor0" (formula "31") (term "1,0,0,0,1,0"))
               (rule "add_literals" (formula "31") (term "1,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "31") (term "1,0,0,0,1,0"))
               (rule "applyEq" (formula "9") (term "0") (ifseqformula "20"))
               (rule "inEqSimp_homoInEq0" (formula "9"))
               (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
               (rule "polySimp_rightDist" (formula "9") (term "1,0"))
               (rule "mul_literals" (formula "9") (term "0,1,0"))
               (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0"))
               (rule "polySimp_addAssoc" (formula "9") (term "0"))
               (rule "polySimp_addComm1" (formula "9") (term "0,0"))
               (rule "add_literals" (formula "9") (term "0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
               (rule "add_literals" (formula "9") (term "1,1,0"))
               (rule "applyEq" (formula "15") (term "1,0,2,0") (ifseqformula "20"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,2,0"))
               (rule "polySimp_addComm1" (formula "15") (term "0,0,2,0"))
               (rule "add_literals" (formula "15") (term "0,0,0,2,0"))
               (rule "add_zero_left" (formula "15") (term "0,0,2,0"))
               (rule "polySimp_pullOutFactor0" (formula "15") (term "0,2,0"))
               (rule "add_literals" (formula "15") (term "1,0,2,0"))
               (rule "polySimp_elimOne" (formula "15") (term "0,2,0"))
               (rule "eqSymm" (formula "15"))
               (rule "applyEq" (formula "16") (term "1,1") (ifseqformula "20"))
               (rule "polySimp_addAssoc" (formula "16") (term "1"))
               (rule "polySimp_addComm0" (formula "16") (term "0,1"))
               (rule "polySimp_pullOutFactor0b" (formula "16") (term "1"))
               (rule "add_literals" (formula "16") (term "1,1,1"))
               (rule "polySimp_elimOne" (formula "16") (term "1,1"))
               (rule "applyEq" (formula "10") (term "1,1") (ifseqformula "20"))
               (rule "polySimp_addAssoc" (formula "10") (term "1"))
               (rule "polySimp_addComm0" (formula "10") (term "0,1"))
               (rule "polySimp_pullOutFactor0b" (formula "10") (term "1"))
               (rule "add_literals" (formula "10") (term "1,1,1"))
               (rule "polySimp_elimOne" (formula "10") (term "1,1"))
               (rule "applyEq" (formula "17") (term "1") (ifseqformula "20"))
               (rule "applyEq" (formula "2") (term "1,1") (ifseqformula "20"))
               (rule "polySimp_addAssoc" (formula "2") (term "1"))
               (rule "polySimp_addComm0" (formula "2") (term "0,1"))
               (rule "polySimp_pullOutFactor0b" (formula "2") (term "1"))
               (rule "add_literals" (formula "2") (term "1,1,1"))
               (rule "polySimp_elimOne" (formula "2") (term "1,1"))
               (rule "applyEq" (formula "21") (term "0,1") (ifseqformula "15"))
               (rule "replace_known_left" (formula "21") (term "1") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "true_left" (formula "21"))
               (rule "inEqSimp_sepNegMonomial0" (formula "8"))
               (rule "polySimp_mulLiterals" (formula "8") (term "0"))
               (rule "polySimp_elimOne" (formula "8") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "23"))
               (rule "polySimp_mulLiterals" (formula "23") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "9"))
               (rule "polySimp_mulLiterals" (formula "9") (term "0"))
               (rule "polySimp_elimOne" (formula "9") (term "0"))
               (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "8"))
               (rule "leq_literals" (formula "17") (term "0"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "true_left" (formula "17"))
               (rule "inEqSimp_subsumption6" (formula "21") (ifseqformula "8"))
               (rule "mul_literals" (formula "21") (term "1,1,0"))
               (rule "greater_literals" (formula "21") (term "0,0"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "leq_literals" (formula "21") (term "0"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "true_left" (formula "21"))
               (rule "commute_or" (formula "11") (term "0,0,1,0"))
               (rule "onlyCreatedObjectsAreReferencedFinal" (formula "15") (term "1,0") (ifseqformula "3") (ifseqformula "5"))
               (rule "replace_known_right" (formula "15") (term "1") (ifseqformula "31"))
                (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "29")))
               (rule "closeFalse" (formula "15"))
            )
         )
      )
      (branch "Null reference (t_1 = null)"
          (builtin "One Step Simplification" (formula "14"))
         (rule "notRight" (formula "14"))
         (rule "polySimp_homoEq" (formula "2"))
         (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
         (rule "polySimp_rightDist" (formula "2") (term "1,0"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0"))
         (rule "polySimp_elimOne" (formula "2") (term "1,1,0"))
         (rule "polySimp_mulComm0" (formula "2") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "2") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "11"))
         (rule "polySimp_mulAssoc" (formula "11") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "11") (term "0"))
         (rule "applyEq" (formula "12") (term "1,0") (ifseqformula "1"))
         (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "1"))
         (rule "applyEq" (formula "12") (term "0,0,1,3,0") (ifseqformula "1"))
         (rule "applyEq" (formula "9") (term "1,0") (ifseqformula "1"))
         (rule "applyEq" (formula "11") (term "0,0,1,0") (ifseqformula "1"))
         (rule "applyEq" (formula "13") (term "1") (ifseqformula "1"))
         (rule "polySimp_sepPosMonomial" (formula "2"))
         (rule "polySimp_mulComm0" (formula "2") (term "1"))
         (rule "polySimp_rightDist" (formula "2") (term "1"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
         (rule "polySimp_elimOne" (formula "2") (term "1,1"))
         (rule "polySimp_mulComm0" (formula "2") (term "0,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "11"))
         (rule "polySimp_mulLiterals" (formula "11") (term "0"))
         (rule "inEqSimp_exactShadow1" (formula "11") (ifseqformula "10"))
         (rule "greater_literals" (formula "11") (term "0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
         (rule "polySimp_rightDist" (formula "11") (term "0,0"))
         (rule "mul_literals" (formula "11") (term "0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "11") (term "0"))
         (rule "add_literals" (formula "11") (term "1,1,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "11"))
         (rule "mul_literals" (formula "11") (term "1"))
         (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "8"))
          (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "1")) (ifInst ""  (formula "16")))
         (rule "closeFalse" (formula "8"))
      )
   )
)
(branch "Exceptional Post (classify)"
    (builtin "One Step Simplification" (formula "8"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "translateJavaSubInt" (formula "7") (term "3,0,0,1,0,1"))
   (rule "translateJavaMulInt" (formula "7") (term "1,1,0,0,1"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "9"))
   (rule "notLeft" (formula "7"))
   (rule "close" (formula "10") (ifseqformula "9"))
)
(branch "Pre (classify)"
    (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "1")))
   (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "6"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "translateJavaMulInt" (formula "6") (term "1,1,1,0,0,0,0"))
   (rule "translateJavaSubInt" (formula "6") (term "0,2,1,1,0"))
   (rule "translateJavaSubInt" (formula "6") (term "0,2,0,1,0"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "8"))
   (rule "notLeft" (formula "6"))
   (rule "notLeft" (formula "6"))
   (rule "eqSymm" (formula "11"))
   (rule "eqSymm" (formula "8"))
   (rule "replace_known_left" (formula "15") (term "0") (ifseqformula "12"))
    (builtin "One Step Simplification" (formula "15"))
   (rule "polySimp_elimSub" (formula "11") (term "0,2,1"))
   (rule "mul_literals" (formula "11") (term "1,0,2,1"))
   (rule "polySimp_elimSub" (formula "11") (term "0,2,0"))
   (rule "mul_literals" (formula "11") (term "1,0,2,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
   (rule "polySimp_addComm0" (formula "11") (term "0,2,1"))
   (rule "polySimp_addComm0" (formula "11") (term "0,2,0"))
   (rule "inEqSimp_commuteLeq" (formula "6"))
   (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "12"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "translateJavaSubInt" (formula "12") (term "3,0,1"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "13"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "14"))
   (rule "notLeft" (formula "13"))
   (rule "notLeft" (formula "12"))
   (rule "polySimp_elimSub" (formula "18") (term "3,0"))
   (rule "mul_literals" (formula "18") (term "1,3,0"))
   (rule "polySimp_addComm0" (formula "18") (term "3,0"))
   (rule "inEqSimp_commuteLeq" (formula "17"))
   (rule "inEqSimp_commuteLeq" (formula "15"))
   (rule "inEqSimp_commuteLeq" (formula "16"))
   (rule "inEqSimp_commuteLeq" (formula "12"))
   (rule "applyEq" (formula "8") (term "0,1,0") (ifseqformula "14"))
   (rule "applyEq" (formula "10") (term "3,0") (ifseqformula "14"))
   (rule "applyEq" (formula "18") (term "1,3,0") (ifseqformula "14"))
   (rule "applyEq" (formula "19") (term "0") (ifseqformula "9"))
   (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "9"))
   (rule "inEqSimp_commuteGeq" (formula "17"))
   (rule "applyEq" (formula "18") (term "1,0") (ifseqformula "9"))
   (rule "applyEq" (formula "15") (term "0") (ifseqformula "14"))
   (rule "applyEq" (formula "16") (term "1") (ifseqformula "14"))
   (rule "applyEq" (formula "11") (term "1,0,2,0") (ifseqformula "14"))
   (rule "eqSymm" (formula "11"))
   (rule "applyEq" (formula "8") (term "2,0") (ifseqformula "14"))
   (rule "applyEq" (formula "17") (term "0") (ifseqformula "14"))
   (rule "applyEq" (formula "11") (term "1,0,2,0") (ifseqformula "14"))
   (rule "eqSymm" (formula "11"))
   (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "17"))
   (rule "mul_literals" (formula "15") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "15"))
   (rule "mul_literals" (formula "15") (term "1"))
   (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "10") (term "0") (inst "j=j") (inst "i=i"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,1,0"))
   (rule "mul_literals" (formula "10") (term "0,1,1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,1,0"))
   (rule "nnf_imp2or" (formula "10") (term "0"))
   (rule "nnf_notAnd" (formula "10") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
   (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "10") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
   (rule "mul_literals" (formula "10") (term "1,0,0,0"))
   (rule "nnf_imp2or" (formula "10") (term "0,1,0"))
   (rule "nnf_notAnd" (formula "10") (term "0,0,1,0"))
   (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,1,0"))
   (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,1,0"))
   (rule "add_literals" (formula "10") (term "0,0,0,1,0,0,1,0"))
   (rule "add_zero_left" (formula "10") (term "0,0,1,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,1,0"))
   (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,1,0"))
   (rule "mul_literals" (formula "10") (term "0,1,0,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,1,0"))
   (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "19") (term "0"))
   (rule "replace_known_right" (formula "19") (term "0,0,0") (ifseqformula "22"))
    (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "1")) (ifInst ""  (formula "20")))
   (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "20") (term "0") (inst "j=j") (inst "i=i"))
    (builtin "One Step Simplification" (formula "20"))
   (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,1,0"))
   (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,1,0"))
   (rule "add_literals" (formula "20") (term "0,0,0,1,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "20") (term "1,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
   (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0,1,0"))
   (rule "mul_literals" (formula "20") (term "0,1,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0,1,0"))
   (rule "nnf_imp2or" (formula "20") (term "0"))
   (rule "nnf_notAnd" (formula "20") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
   (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
   (rule "mul_literals" (formula "20") (term "1,0,0,0"))
   (rule "nnf_imp2or" (formula "20") (term "0,1,0"))
   (rule "nnf_notAnd" (formula "20") (term "0,0,1,0"))
   (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0,1,0"))
   (rule "mul_literals" (formula "20") (term "0,1,0,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0,1,0"))
   (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,1,0"))
   (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,1,0"))
   (rule "add_literals" (formula "20") (term "0,0,0,1,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0,1,0"))
   (rule "mul_literals" (formula "20") (term "0,1,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0,1,0"))
   (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "19") (term "0"))
   (rule "replace_known_left" (formula "19") (term "0,1") (ifseqformula "20"))
    (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "23")) (ifInst ""  (formula "1")))
   (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "20") (term "0") (inst "i=i"))
    (builtin "One Step Simplification" (formula "20"))
   (rule "translateJavaSubInt" (formula "20") (term "1,1,0,0"))
   (rule "translateJavaAddInt" (formula "20") (term "0,2,1,1,0"))
   (rule "polySimp_elimSub" (formula "20") (term "1,1,0,0"))
   (rule "mul_literals" (formula "20") (term "1,1,1,0,0"))
   (rule "polySimp_addComm0" (formula "20") (term "0,2,1,1,0"))
   (rule "polySimp_addComm1" (formula "20") (term "1,1,0,0"))
   (rule "add_literals" (formula "20") (term "0,1,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "20") (term "1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
   (rule "nnf_imp2or" (formula "20") (term "0"))
   (rule "nnf_notAnd" (formula "20") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
   (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
   (rule "mul_literals" (formula "20") (term "1,0,0,0"))
   (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "19") (term "0"))
   (rule "replace_known_left" (formula "19") (term "1,0") (ifseqformula "1"))
    (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "24")) (ifInst ""  (formula "20")))
   (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "20") (term "0") (inst "j=j") (inst "i=i"))
    (builtin "One Step Simplification" (formula "20"))
   (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,1,0"))
   (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,1,0"))
   (rule "add_literals" (formula "20") (term "0,0,0,1,0,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "20") (term "1,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0,1,0"))
   (rule "mul_literals" (formula "20") (term "0,1,1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
   (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
   (rule "nnf_imp2or" (formula "20") (term "0"))
   (rule "nnf_notAnd" (formula "20") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
   (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
   (rule "mul_literals" (formula "20") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
   (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
   (rule "nnf_imp2or" (formula "20") (term "0,1,0"))
   (rule "nnf_notAnd" (formula "20") (term "0,0,1,0"))
   (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0,1,0"))
   (rule "mul_literals" (formula "20") (term "0,1,0,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0,1,0"))
   (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,1,0"))
   (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,1,0"))
   (rule "add_literals" (formula "20") (term "0,0,0,1,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0,1,0"))
   (rule "mul_literals" (formula "20") (term "0,1,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0,1,0"))
   (rule "commute_or" (formula "10") (term "0,0,1,0"))
   (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "19") (term "0") (inst "i=i"))
    (builtin "One Step Simplification" (formula "19"))
   (rule "translateJavaSubInt" (formula "19") (term "1,1,0,0"))
   (rule "translateJavaAddInt" (formula "19") (term "0,2,1,1,0"))
   (rule "polySimp_elimSub" (formula "19") (term "1,1,0,0"))
   (rule "mul_literals" (formula "19") (term "1,1,1,0,0"))
   (rule "polySimp_addComm0" (formula "19") (term "0,2,1,1,0"))
   (rule "polySimp_addComm1" (formula "19") (term "1,1,0,0"))
   (rule "add_literals" (formula "19") (term "0,1,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "19") (term "1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
   (rule "nnf_imp2or" (formula "19") (term "0"))
   (rule "nnf_notAnd" (formula "19") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
   (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "19") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
   (rule "mul_literals" (formula "19") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
   (rule "commute_or" (formula "20") (term "0,0,1,0"))
   (rule "ifthenelse_split" (formula "8") (term "0"))
   (branch "self.equal_buckets = TRUE TRUE"
      (rule "newSym_eq" (formula "9") (inst "newSymDef=mul(int::final(self,
               de.wiesler.Classifier::$num_buckets),
    Z(0(#)))") (inst "l=l_0"))
      (rule "times_zero_1" (formula "9") (term "1,1"))
      (rule "add_zero_right" (formula "9") (term "1"))
      (rule "applyEq" (formula "12") (term "1,0,0,0,1,0") (ifseqformula "9"))
      (rule "applyEq" (formula "22") (term "1,1,0,0,0,1,0") (ifseqformula "9"))
      (rule "applyEq" (formula "12") (term "1,1,0,0") (ifseqformula "9"))
      (rule "applyEq" (formula "21") (term "1,1,1,0,0") (ifseqformula "9"))
      (rule "applyEq" (formula "18") (term "0") (ifseqformula "9"))
      (rule "applyEq" (formula "22") (term "1,1,1,0,0") (ifseqformula "9"))
      (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "9"))
      (rule "eqSymm" (formula "10"))
      (rule "applyEq" (formula "19") (term "1") (ifseqformula "9"))
      (rule "applyEq" (formula "20") (term "0") (ifseqformula "9"))
      (rule "inEqSimp_commuteLeq" (formula "20"))
      (rule "applyEq" (formula "13") (term "1,0,2,0") (ifseqformula "9"))
      (rule "eqSymm" (formula "13"))
      (rule "applyEq" (formula "7") (term "0") (ifseqformula "10"))
      (rule "applyEq" (formula "6") (term "0") (ifseqformula "10"))
      (rule "applyEq" (formula "13") (term "1,0,2,0") (ifseqformula "9"))
      (rule "eqSymm" (formula "13"))
      (rule "applyEq" (formula "16") (term "1") (ifseqformula "9"))
      (rule "inEqSimp_subsumption6" (formula "6") (ifseqformula "18"))
      (rule "mul_literals" (formula "6") (term "1,1,0"))
      (rule "greater_literals" (formula "6") (term "0,0"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "leq_literals" (formula "6") (term "0"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "true_left" (formula "6"))
      (rule "elimGcdLeq_antec" (formula "6") (inst "elimGcd=Z(2(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcdRightDiv=Z(4(6(#)))"))
      (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0,0,0,1,0"))
      (rule "leq_literals" (formula "6") (term "0,0"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0"))
      (rule "neg_literal" (formula "6") (term "0,0,0,0,0,0"))
      (rule "mul_literals" (formula "6") (term "1,0,0,0,0,0"))
      (rule "polySimp_addLiterals" (formula "6") (term "0,0,0,0"))
      (rule "add_literals" (formula "6") (term "0,0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "6") (term "0,0"))
      (rule "add_literals" (formula "6") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "6") (term "1,0,0"))
      (rule "add_zero_right" (formula "6") (term "0,0"))
      (rule "qeq_literals" (formula "6") (term "0"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "true_left" (formula "6"))
      (rule "all_pull_out3" (formula "20") (term "0"))
      (rule "shift_paren_or" (formula "20") (term "0,0"))
      (rule "shift_paren_or" (formula "20") (term "0,0,0"))
      (rule "all_pull_out3" (formula "10") (term "0"))
      (rule "shift_paren_or" (formula "10") (term "0,0"))
      (rule "shift_paren_or" (formula "10") (term "0,0,0"))
      (rule "allLeft" (formula "10") (inst "t=add(Z(neglit(2(#))), l_0)"))
      (rule "polySimp_addAssoc" (formula "10") (term "1,1,0,0"))
      (rule "add_literals" (formula "10") (term "0,1,1,0,0"))
      (rule "inEqSimp_homoInEq1" (formula "10") (term "1,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,1,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,0,1,0,0,0,0"))
      (rule "mul_literals" (formula "10") (term "0,1,0,1,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "10") (term "0,1,0,0,0,0"))
      (rule "polySimp_addComm0" (formula "10") (term "0,0,1,0,0,0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,1,0,0,0,0"))
      (rule "add_literals" (formula "10") (term "1,1,0,1,0,0,0,0"))
      (rule "times_zero_1" (formula "10") (term "1,0,1,0,0,0,0"))
      (rule "add_zero_right" (formula "10") (term "0,1,0,0,0,0"))
      (rule "leq_literals" (formula "10") (term "1,0,0,0,0"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "inEqSimp_homoInEq0" (formula "10") (term "0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0"))
      (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0,0"))
      (rule "add_literals" (formula "10") (term "0,0,0,0,0,0"))
      (rule "applyEq" (formula "10") (term "1,1,0") (ifseqformula "12"))
      (rule "inEqSimp_sepNegMonomial1" (formula "10") (term "0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "10") (term "0,0,0,0,0"))
      (rule "inEqSimp_contradInEq1" (formula "10") (term "0,0,0,0") (ifseqformula "17"))
      (rule "qeq_literals" (formula "10") (term "0,0,0,0,0"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "commute_or" (formula "10") (term "0,0"))
      (rule "allLeft" (formula "10") (inst "t=add(Z(neglit(2(#))), l_0)"))
      (rule "inEqSimp_homoInEq1" (formula "10") (term "1,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,1,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,0,1,0"))
      (rule "mul_literals" (formula "10") (term "0,1,0,1,0"))
      (rule "polySimp_addAssoc" (formula "10") (term "0,1,0"))
      (rule "polySimp_addComm0" (formula "10") (term "0,0,1,0"))
      (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,1,0"))
      (rule "add_literals" (formula "10") (term "1,1,0,1,0"))
      (rule "times_zero_1" (formula "10") (term "1,0,1,0"))
      (rule "add_zero_right" (formula "10") (term "0,1,0"))
      (rule "leq_literals" (formula "10") (term "1,0"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "inEqSimp_homoInEq0" (formula "10") (term "0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
      (rule "mul_literals" (formula "10") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
      (rule "polySimp_addComm1" (formula "10") (term "0,0,0"))
      (rule "add_literals" (formula "10") (term "0,0,0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0"))
      (rule "add_literals" (formula "10") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "10") (term "1,0,0"))
      (rule "add_zero_right" (formula "10") (term "0,0"))
      (rule "qeq_literals" (formula "10") (term "0"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "applyEq" (formula "10") (term "0") (ifseqformula "13"))
      (rule "inEqSimp_homoInEq1" (formula "10"))
      (rule "polySimp_pullOutFactor1" (formula "10") (term "0"))
      (rule "add_literals" (formula "10") (term "1,0"))
      (rule "times_zero_1" (formula "10") (term "0"))
      (rule "leq_literals" (formula "10"))
      (rule "true_left" (formula "10"))
      (rule "arrayLengthNotNegative" (formula "19") (term "0"))
      (rule "inEqSimp_subsumption1" (formula "19") (ifseqformula "16"))
      (rule "leq_literals" (formula "19") (term "0"))
       (builtin "One Step Simplification" (formula "19"))
      (rule "true_left" (formula "19"))
      (rule "arrayLengthIsAShort" (formula "19") (term "0"))
       (builtin "One Step Simplification" (formula "19"))
      (rule "true_left" (formula "19"))
      (rule "arrayLengthIsAShort" (formula "18") (term "0"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "true_left" (formula "18"))
      (rule "arrayLengthNotNegative" (formula "18") (term "0"))
      (rule "onlyCreatedObjectsAreReferencedFinal" (formula "26") (term "1,0") (ifseqformula "1") (ifseqformula "3"))
      (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "27"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "26")))
      (rule "closeFalse" (formula "1"))
   )
   (branch "self.equal_buckets = TRUE FALSE"
      (rule "applyEq" (formula "10") (term "1,0,0,0,1,0") (ifseqformula "8"))
      (rule "applyEq" (formula "19") (term "1,1,1,0,0") (ifseqformula "8"))
      (rule "applyEq" (formula "20") (term "1,1,1,0,0") (ifseqformula "8"))
      (rule "applyEq" (formula "16") (term "0") (ifseqformula "8"))
      (rule "applyEq" (formula "11") (term "1,0,2,0") (ifseqformula "8"))
      (rule "eqSymm" (formula "11"))
      (rule "applyEq" (formula "16") (term "1") (ifseqformula "8"))
      (rule "applyEq" (formula "10") (term "1,1,0,0") (ifseqformula "8"))
      (rule "applyEq" (formula "17") (term "0") (ifseqformula "8"))
      (rule "inEqSimp_commuteLeq" (formula "17"))
      (rule "applyEq" (formula "19") (term "1,1,0,0,0,1,0") (ifseqformula "8"))
      (rule "applyEq" (formula "11") (term "1,0,2,0") (ifseqformula "8"))
      (rule "eqSymm" (formula "11"))
      (rule "applyEq" (formula "14") (term "1") (ifseqformula "8"))
      (rule "arrayLengthIsAShort" (formula "16") (term "0"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "true_left" (formula "16"))
      (rule "arrayLengthNotNegative" (formula "16") (term "0"))
      (rule "arrayLengthIsAShort" (formula "15") (term "0"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "true_left" (formula "15"))
      (rule "arrayLengthNotNegative" (formula "15") (term "0"))
      (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "16"))
      (rule "leq_literals" (formula "15") (term "0"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "true_left" (formula "15"))
      (rule "all_pull_out3" (formula "10") (term "0"))
      (rule "shift_paren_or" (formula "10") (term "0,0"))
      (rule "shift_paren_or" (formula "10") (term "0,0,0"))
      (rule "all_pull_out3" (formula "20") (term "0"))
      (rule "shift_paren_or" (formula "20") (term "0,0"))
      (rule "shift_paren_or" (formula "20") (term "0,0,0"))
      (rule "allLeft" (formula "10") (inst "t=add(Z(neglit(2(#))),
    int::final(self,
               de.wiesler.Classifier::$num_buckets))"))
      (rule "polySimp_addAssoc" (formula "10") (term "1,1,0,0"))
      (rule "add_literals" (formula "10") (term "0,1,1,0,0"))
      (rule "inEqSimp_homoInEq0" (formula "10") (term "0,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0,0"))
      (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0,0,0"))
      (rule "add_literals" (formula "10") (term "0,0,0,0,0,0,0"))
      (rule "inEqSimp_homoInEq1" (formula "10") (term "1,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,1,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,0,1,0,0,0,0"))
      (rule "mul_literals" (formula "10") (term "0,1,0,1,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "10") (term "0,1,0,0,0,0"))
      (rule "polySimp_addComm0" (formula "10") (term "0,0,1,0,0,0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,1,0,0,0,0"))
      (rule "add_literals" (formula "10") (term "1,1,0,1,0,0,0,0"))
      (rule "times_zero_1" (formula "10") (term "1,0,1,0,0,0,0"))
      (rule "add_zero_right" (formula "10") (term "0,1,0,0,0,0"))
      (rule "leq_literals" (formula "10") (term "1,0,0,0,0"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "applyEq" (formula "10") (term "1,1,0") (ifseqformula "12"))
      (rule "inEqSimp_sepNegMonomial1" (formula "10") (term "0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "10") (term "0,0,0,0,0"))
      (rule "inEqSimp_contradInEq1" (formula "10") (term "0,0,0,0") (ifseqformula "6"))
      (rule "qeq_literals" (formula "10") (term "0,0,0,0,0"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "commute_or" (formula "10") (term "0,0"))
      (rule "allLeft" (formula "10") (inst "t=add(Z(neglit(2(#))),
    int::final(self,
               de.wiesler.Classifier::$num_buckets))"))
      (rule "inEqSimp_homoInEq0" (formula "10") (term "0,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
      (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "10") (term "0,0,0"))
      (rule "polySimp_addComm1" (formula "10") (term "0,0,0,0"))
      (rule "add_literals" (formula "10") (term "0,0,0,0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,0"))
      (rule "add_literals" (formula "10") (term "1,1,0,0,0"))
      (rule "times_zero_1" (formula "10") (term "1,0,0,0"))
      (rule "add_zero_right" (formula "10") (term "0,0,0"))
      (rule "qeq_literals" (formula "10") (term "0,0"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "inEqSimp_homoInEq1" (formula "10") (term "0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
      (rule "mul_literals" (formula "10") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
      (rule "polySimp_addComm0" (formula "10") (term "0,0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0"))
      (rule "add_literals" (formula "10") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "10") (term "1,0,0"))
      (rule "add_zero_right" (formula "10") (term "0,0"))
      (rule "leq_literals" (formula "10") (term "0"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "applyEq" (formula "10") (term "0") (ifseqformula "13"))
      (rule "inEqSimp_homoInEq1" (formula "10"))
      (rule "polySimp_pullOutFactor1" (formula "10") (term "0"))
      (rule "add_literals" (formula "10") (term "1,0"))
      (rule "times_zero_1" (formula "10") (term "0"))
      (rule "leq_literals" (formula "10"))
      (rule "true_left" (formula "10"))
      (rule "onlyCreatedObjectsAreReferencedFinal" (formula "26") (term "1,0") (ifseqformula "1") (ifseqformula "3"))
      (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "26"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "27")))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "Null reference (t = null)"
    (builtin "One Step Simplification" (formula "7"))
   (rule "notRight" (formula "7"))
   (rule "applyEq" (formula "9") (term "0,0,1,1,1,0,0") (ifseqformula "1"))
   (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "7"))
    (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "1")))
   (rule "closeFalse" (formula "7"))
)
)
}
