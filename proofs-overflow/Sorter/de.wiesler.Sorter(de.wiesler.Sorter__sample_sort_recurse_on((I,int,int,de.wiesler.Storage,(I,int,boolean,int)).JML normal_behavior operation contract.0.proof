\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Apr 17 12:55:45 CEST 2023
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsCheckingOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L , finalFields-finalFields\\:immutable
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../src";

\proofObligation "#Proof Obligation Settings
#Mon Apr 17 12:55:45 CEST 2023
contract=de.wiesler.Sorter[de.wiesler.Sorter\\:\\:sample_sort_recurse_on([I,int,int,de.wiesler.Storage,[I,int,boolean,int)].JML normal_behavior operation contract.0
name=de.wiesler.Sorter[de.wiesler.Sorter\\:\\:sample_sort_recurse_on([I,int,int,de.wiesler.Storage,[I,int,boolean,int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))
(keyLog "1" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))

(autoModeTime "60802")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "heapAtPre,o,f"))
(rule "expand_inInt" (formula "1") (term "1,0,1,0,0,0"))
(rule "expand_inInt" (formula "1") (term "1,0,0,0,0,1,0,0,0"))
(rule "expand_inInt" (formula "1") (term "1,1,0,0,0"))
(rule "expand_inInt" (formula "1") (term "1,0,0,0,0,0,1,0,0,0"))
(rule "replace_int_MIN" (formula "1") (term "0,1,1,0,1,0,0,0"))
(rule "replace_int_MAX" (formula "1") (term "1,0,1,0,1,0,0,0"))
(rule "replace_int_MIN" (formula "1") (term "0,1,1,0,0,0,0,1,0,0,0"))
(rule "replace_int_MAX" (formula "1") (term "1,0,1,0,0,0,0,1,0,0,0"))
(rule "replace_int_MAX" (formula "1") (term "1,0,1,1,0,0,0"))
(rule "replace_int_MIN" (formula "1") (term "0,1,1,1,0,0,0"))
(rule "replace_int_MIN" (formula "1") (term "0,1,1,0,0,0,0,0,1,0,0,0"))
(rule "replace_int_MAX" (formula "1") (term "1,0,1,0,0,0,0,0,1,0,0,0"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "9"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "4"))
(rule "notLeft" (formula "8"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "4"))
(rule "notLeft" (formula "11"))
(rule "notLeft" (formula "10"))
(rule "andLeft" (formula "14"))
(rule "andLeft" (formula "16"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "18"))
(rule "andLeft" (formula "17"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "21"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "24"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "26"))
(rule "andLeft" (formula "27"))
(rule "andLeft" (formula "28"))
(rule "andLeft" (formula "28"))
(rule "andLeft" (formula "28"))
(rule "translateJavaSubInt" (formula "13") (term "0,0"))
(rule "translateJavaSubInt" (formula "18") (term "0"))
(rule "translateJavaSubInt" (formula "22") (term "1"))
(rule "translateJavaAddInt" (formula "26") (term "6,0,1,1"))
(rule "translateJavaSubInt" (formula "26") (term "7,0,1,1"))
(rule "translateJavaMod" (formula "26") (term "0,0,0,1"))
(rule "eqSymm" (formula "26") (term "1,0,1"))
(rule "translateJavaSubInt" (formula "27") (term "3,0"))
(rule "translateJavaSubInt" (formula "26") (term "0,1,0,1"))
(rule "replace_known_right" (formula "7") (term "0") (ifseqformula "32"))
 (builtin "One Step Simplification" (formula "7"))
(rule "replace_known_right" (formula "8") (term "0") (ifseqformula "33"))
 (builtin "One Step Simplification" (formula "8"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "34"))
 (builtin "One Step Simplification" (formula "2"))
(rule "polySimp_elimSub" (formula "13") (term "0,0"))
(rule "polySimp_elimSub" (formula "18") (term "0"))
(rule "polySimp_elimSub" (formula "22") (term "1"))
(rule "polySimp_elimSub" (formula "26") (term "7,0,1,1"))
(rule "mul_literals" (formula "26") (term "1,7,0,1,1"))
(rule "polySimp_elimSub" (formula "27") (term "3,0"))
(rule "polySimp_elimSub" (formula "26") (term "0,1,0,1"))
(rule "mul_literals" (formula "26") (term "1,0,1,0,1"))
(rule "polySimp_addComm0" (formula "26") (term "6,0,1,1"))
(rule "polySimp_addComm0" (formula "13") (term "0,0"))
(rule "polySimp_addComm0" (formula "18") (term "0"))
(rule "polySimp_addComm0" (formula "22") (term "1"))
(rule "polySimp_addComm0" (formula "26") (term "7,0,1,1"))
(rule "polySimp_addComm0" (formula "27") (term "3,0"))
(rule "polySimp_addComm0" (formula "26") (term "0,1,0,1"))
(rule "disjointDefinition" (formula "30"))
 (builtin "One Step Simplification" (formula "30"))
(rule "notLeft" (formula "30"))
(rule "disjointDefinition" (formula "28"))
(rule "disjointDefinition" (formula "29"))
(rule "inEqSimp_commuteLeq" (formula "17"))
(rule "inEqSimp_commuteLeq" (formula "12"))
(rule "inEqSimp_commuteLeq" (formula "15"))
(rule "inEqSimp_commuteLeq" (formula "16"))
(rule "inEqSimp_commuteLeq" (formula "10"))
(rule "inEqSimp_commuteLeq" (formula "19"))
(rule "inEqSimp_commuteLeq" (formula "6"))
(rule "inEqSimp_commuteLeq" (formula "4"))
(rule "assignment" (formula "35") (term "1"))
 (builtin "One Step Simplification" (formula "35"))
(rule "commuteIntersection" (formula "28") (term "0"))
(rule "commuteIntersection" (formula "29") (term "0"))
(rule "commute_or" (formula "26") (term "0,1"))
(rule "commute_and" (formula "26") (term "1"))
(rule "methodBodyExpand" (formula "35") (term "1") (newnames "heapBefore_sample_sort_recurse_on,savedHeapBefore_sample_sort_recurse_on,_storageBefore_sample_sort_recurse_on,_valuesBefore_sample_sort_recurse_on,inner_beginBefore_sample_sort_recurse_on,inner_endBefore_sample_sort_recurse_on"))
 (builtin "One Step Simplification" (formula "35"))
(rule "variableDeclarationAssign" (formula "35") (term "1"))
(rule "variableDeclaration" (formula "35") (term "1") (newnames "inner_begin"))
(rule "compound_addition_2" (formula "35") (term "1") (inst "#v0=x") (inst "#v1=x_1"))
(rule "variableDeclarationAssign" (formula "35") (term "1"))
(rule "variableDeclaration" (formula "35") (term "1") (newnames "x"))
(rule "assignment" (formula "35") (term "1"))
 (builtin "One Step Simplification" (formula "35"))
(rule "variableDeclarationAssign" (formula "35") (term "1"))
(rule "variableDeclaration" (formula "35") (term "1") (newnames "x_1"))
(rule "assignment_array2" (formula "35"))
(branch "Normal Execution (_bucket_starts != null)"
    (builtin "One Step Simplification" (formula "35"))
   (rule "assignmentAdditionInt" (formula "35") (term "1"))
   (branch "Overflow check"
       (builtin "One Step Simplification" (formula "35"))
      (rule "expand_inInt" (formula "35"))
      (rule "replace_int_MIN" (formula "35") (term "0,1"))
      (rule "replace_int_MAX" (formula "35") (term "1,0"))
      (rule "polySimp_homoEq" (formula "26") (term "0,1,1"))
      (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,1"))
      (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,1"))
      (rule "mul_literals" (formula "26") (term "0,1,0,0,1,1"))
      (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,1"))
      (rule "polySimp_addComm0" (formula "26") (term "0,0,0,1,1"))
      (rule "inEqSimp_ltToLeq" (formula "20"))
      (rule "polySimp_mulComm0" (formula "20") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "20") (term "0"))
      (rule "inEqSimp_homoInEq0" (formula "18"))
      (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
      (rule "polySimp_rightDist" (formula "18") (term "1,0"))
      (rule "polySimp_mulAssoc" (formula "18") (term "0,1,0"))
      (rule "polySimp_mulComm0" (formula "18") (term "0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "18") (term "0,1,0"))
      (rule "polySimp_elimOne" (formula "18") (term "0,1,0"))
      (rule "polySimp_addAssoc" (formula "18") (term "0"))
      (rule "inEqSimp_homoInEq0" (formula "35") (term "1"))
      (rule "mul_literals" (formula "35") (term "1,0,1"))
      (rule "polySimp_addComm1" (formula "35") (term "0,1"))
      (rule "polySimp_addComm0" (formula "35") (term "0,0,1"))
      (rule "inEqSimp_homoInEq0" (formula "35") (term "0"))
      (rule "polySimp_mulComm0" (formula "35") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "35") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "35") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "35") (term "0,0"))
      (rule "jmod_axiom" (formula "26") (term "0,1,1,1"))
      (rule "polySimp_mulLiterals" (formula "26") (term "1,0,1,1,1"))
      (rule "polySimp_sepNegMonomial" (formula "26") (term "0,1,1"))
      (rule "polySimp_mulLiterals" (formula "26") (term "0,0,1,1"))
      (rule "polySimp_elimOne" (formula "26") (term "0,0,1,1"))
      (rule "polySimp_sepNegMonomial" (formula "26") (term "1,1,1"))
      (rule "polySimp_mulLiterals" (formula "26") (term "0,1,1,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "20"))
      (rule "polySimp_mulLiterals" (formula "20") (term "0"))
      (rule "polySimp_elimOne" (formula "20") (term "0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "18"))
      (rule "polySimp_mulLiterals" (formula "18") (term "0"))
      (rule "polySimp_elimOne" (formula "18") (term "0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1"))
      (rule "polySimp_mulComm0" (formula "35") (term "1,1"))
      (rule "polySimp_rightDist" (formula "35") (term "1,1"))
      (rule "mul_literals" (formula "35") (term "0,1,1"))
      (rule "inEqSimp_sepNegMonomial1" (formula "35") (term "0"))
      (rule "polySimp_mulLiterals" (formula "35") (term "0,0"))
      (rule "polySimp_elimOne" (formula "35") (term "0,0"))
      (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "19"))
      (rule "leq_literals" (formula "12") (term "0"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "true_left" (formula "12"))
      (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "14"))
      (rule "leq_literals" (formula "4") (term "0"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "true_left" (formula "4"))
      (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "4"))
      (rule "polySimp_mulComm0" (formula "14") (term "0,0"))
      (rule "polySimp_addComm0" (formula "14") (term "0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "14"))
      (rule "polySimp_mulLiterals" (formula "14") (term "0"))
      (rule "polySimp_elimOne" (formula "14") (term "0"))
      (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "16"))
      (rule "mul_literals" (formula "5") (term "0,0"))
      (rule "polySimp_addAssoc" (formula "5") (term "0"))
      (rule "add_literals" (formula "5") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "5"))
      (rule "mul_literals" (formula "5") (term "1"))
      (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "14"))
      (rule "leq_literals" (formula "5") (term "0"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "true_left" (formula "5"))
      (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "8"))
      (rule "polySimp_rightDist" (formula "18") (term "0,0"))
      (rule "mul_literals" (formula "18") (term "0,0,0"))
      (rule "polySimp_addComm1" (formula "18") (term "0"))
      (rule "add_literals" (formula "18") (term "0,0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "18"))
      (rule "polySimp_mulLiterals" (formula "18") (term "0"))
      (rule "polySimp_elimOne" (formula "18") (term "0"))
      (rule "inEqSimp_subsumption0" (formula "10") (ifseqformula "18"))
      (rule "leq_literals" (formula "10") (term "0"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "true_left" (formula "10"))
      (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "11"))
      (rule "andLeft" (formula "11"))
      (rule "andLeft" (formula "11"))
      (rule "notLeft" (formula "13"))
      (rule "andLeft" (formula "11"))
      (rule "notLeft" (formula "13"))
      (rule "andLeft" (formula "11"))
      (rule "notLeft" (formula "13"))
      (rule "andLeft" (formula "11"))
      (rule "notLeft" (formula "13"))
      (rule "notLeft" (formula "12"))
      (rule "andLeft" (formula "11"))
      (rule "andLeft" (formula "11"))
      (rule "notLeft" (formula "13"))
      (rule "notLeft" (formula "11"))
      (rule "notLeft" (formula "11"))
      (rule "Free_class_invariant_axiom_for_de_wiesler_Storage" (formula "27"))
       (builtin "One Step Simplification" (formula "27"))
      (rule "andLeft" (formula "27"))
      (rule "andLeft" (formula "27"))
      (rule "andLeft" (formula "29"))
      (rule "andLeft" (formula "27"))
      (rule "andLeft" (formula "30"))
      (rule "andLeft" (formula "27"))
      (rule "andLeft" (formula "31"))
      (rule "andLeft" (formula "27"))
      (rule "andLeft" (formula "32"))
      (rule "andLeft" (formula "27"))
      (rule "andLeft" (formula "33"))
      (rule "andLeft" (formula "27"))
      (rule "andLeft" (formula "34"))
      (rule "andLeft" (formula "27"))
      (rule "andLeft" (formula "35"))
      (rule "andLeft" (formula "27"))
      (rule "andLeft" (formula "36"))
      (rule "andLeft" (formula "36"))
      (rule "andLeft" (formula "36"))
      (rule "andLeft" (formula "36"))
      (rule "andLeft" (formula "36"))
      (rule "andLeft" (formula "36"))
      (rule "andLeft" (formula "36"))
      (rule "andLeft" (formula "36"))
      (rule "andLeft" (formula "36"))
      (rule "andLeft" (formula "36"))
      (rule "andLeft" (formula "36"))
      (rule "andLeft" (formula "36"))
      (rule "andLeft" (formula "36"))
      (rule "andLeft" (formula "36"))
      (rule "andLeft" (formula "36"))
      (rule "andLeft" (formula "36"))
      (rule "andLeft" (formula "36"))
      (rule "andLeft" (formula "36"))
      (rule "andLeft" (formula "36"))
      (rule "andLeft" (formula "36"))
      (rule "translateJavaMulInt" (formula "30") (term "1"))
      (rule "mul_literals" (formula "30") (term "1"))
      (rule "translateJavaMulInt" (formula "29") (term "1"))
      (rule "mul_literals" (formula "29") (term "1"))
      (rule "disjointDefinition" (formula "63"))
       (builtin "One Step Simplification" (formula "63"))
      (rule "notLeft" (formula "63"))
      (rule "disjointDefinition" (formula "62"))
       (builtin "One Step Simplification" (formula "62"))
      (rule "notLeft" (formula "62"))
      (rule "disjointDefinition" (formula "61"))
       (builtin "One Step Simplification" (formula "61"))
      (rule "notLeft" (formula "61"))
      (rule "eqSymm" (formula "61"))
      (rule "disjointDefinition" (formula "60"))
       (builtin "One Step Simplification" (formula "60"))
      (rule "notLeft" (formula "60"))
      (rule "eqSymm" (formula "60"))
      (rule "disjointDefinition" (formula "59"))
       (builtin "One Step Simplification" (formula "59"))
      (rule "notLeft" (formula "59"))
      (rule "eqSymm" (formula "59"))
      (rule "disjointDefinition" (formula "58"))
       (builtin "One Step Simplification" (formula "58"))
      (rule "notLeft" (formula "58"))
      (rule "eqSymm" (formula "58"))
      (rule "disjointDefinition" (formula "57"))
       (builtin "One Step Simplification" (formula "57"))
      (rule "notLeft" (formula "57"))
      (rule "eqSymm" (formula "57"))
      (rule "disjointDefinition" (formula "56"))
       (builtin "One Step Simplification" (formula "56"))
      (rule "notLeft" (formula "56"))
      (rule "eqSymm" (formula "56"))
      (rule "disjointDefinition" (formula "55"))
       (builtin "One Step Simplification" (formula "55"))
      (rule "notLeft" (formula "55"))
      (rule "eqSymm" (formula "55"))
      (rule "disjointDefinition" (formula "54"))
       (builtin "One Step Simplification" (formula "54"))
      (rule "notLeft" (formula "54"))
      (rule "eqSymm" (formula "54"))
      (rule "disjointDefinition" (formula "53"))
       (builtin "One Step Simplification" (formula "53"))
      (rule "notLeft" (formula "53"))
      (rule "eqSymm" (formula "53"))
      (rule "disjointDefinition" (formula "52"))
       (builtin "One Step Simplification" (formula "52"))
      (rule "notLeft" (formula "52"))
      (rule "eqSymm" (formula "52"))
      (rule "disjointDefinition" (formula "51"))
       (builtin "One Step Simplification" (formula "51"))
      (rule "notLeft" (formula "51"))
      (rule "eqSymm" (formula "51"))
      (rule "disjointDefinition" (formula "50"))
       (builtin "One Step Simplification" (formula "50"))
      (rule "notLeft" (formula "50"))
      (rule "eqSymm" (formula "50"))
      (rule "disjointDefinition" (formula "49"))
       (builtin "One Step Simplification" (formula "49"))
      (rule "notLeft" (formula "49"))
      (rule "eqSymm" (formula "49"))
      (rule "disjointDefinition" (formula "48"))
       (builtin "One Step Simplification" (formula "48"))
      (rule "notLeft" (formula "48"))
      (rule "disjointDefinition" (formula "47"))
       (builtin "One Step Simplification" (formula "47"))
      (rule "notLeft" (formula "47"))
      (rule "eqSymm" (formula "47"))
      (rule "disjointDefinition" (formula "46"))
       (builtin "One Step Simplification" (formula "46"))
      (rule "notLeft" (formula "46"))
      (rule "eqSymm" (formula "46"))
      (rule "disjointDefinition" (formula "45"))
       (builtin "One Step Simplification" (formula "45"))
      (rule "notLeft" (formula "45"))
      (rule "disjointDefinition" (formula "44"))
       (builtin "One Step Simplification" (formula "44"))
      (rule "notLeft" (formula "44"))
      (rule "disjointDefinition" (formula "43"))
       (builtin "One Step Simplification" (formula "43"))
      (rule "notLeft" (formula "43"))
      (rule "disjointDefinition" (formula "42"))
       (builtin "One Step Simplification" (formula "42"))
      (rule "notLeft" (formula "42"))
      (rule "disjointDefinition" (formula "41"))
       (builtin "One Step Simplification" (formula "41"))
      (rule "notLeft" (formula "41"))
      (rule "disjointDefinition" (formula "40"))
       (builtin "One Step Simplification" (formula "40"))
      (rule "notLeft" (formula "40"))
      (rule "disjointDefinition" (formula "39"))
       (builtin "One Step Simplification" (formula "39"))
      (rule "notLeft" (formula "39"))
      (rule "disjointDefinition" (formula "38"))
       (builtin "One Step Simplification" (formula "38"))
      (rule "notLeft" (formula "38"))
      (rule "disjointDefinition" (formula "36"))
       (builtin "One Step Simplification" (formula "36"))
      (rule "notLeft" (formula "36"))
      (rule "disjointDefinition" (formula "36"))
       (builtin "One Step Simplification" (formula "36"))
      (rule "notLeft" (formula "36"))
      (rule "applyEq" (formula "26") (term "1,0") (ifseqformula "35"))
      (rule "applyEq" (formula "25") (term "1,0") (ifseqformula "35"))
      (rule "distributeIntersection" (formula "26") (term "0"))
      (rule "distributeIntersection" (formula "25") (term "0"))
      (rule "unionEqualsEmpty" (formula "26"))
      (rule "andLeft" (formula "26"))
      (rule "distributeIntersection" (formula "25") (term "0,0"))
      (rule "distributeIntersection" (formula "25") (term "1,0"))
      (rule "distributeIntersection" (formula "27") (term "0"))
      (rule "distributeIntersection" (formula "26") (term "0"))
      (rule "distributeIntersection" (formula "25") (term "1,0,0"))
      (rule "distributeIntersection" (formula "25") (term "0,0,0"))
      (rule "distributeIntersection" (formula "25") (term "0,1,0"))
      (rule "distributeIntersection" (formula "25") (term "1,1,0"))
      (rule "distributeIntersection" (formula "27") (term "1,0"))
      (rule "distributeIntersection" (formula "27") (term "0,0"))
      (rule "distributeIntersection" (formula "26") (term "0,0"))
      (rule "distributeIntersection" (formula "26") (term "1,0"))
      (rule "unionEqualsEmpty" (formula "25"))
      (rule "andLeft" (formula "25"))
      (rule "unionEqualsEmpty" (formula "28"))
      (rule "andLeft" (formula "28"))
      (rule "unionEqualsEmpty" (formula "27"))
      (rule "andLeft" (formula "27"))
      (rule "unionEqualsEmpty" (formula "25"))
      (rule "andLeft" (formula "25"))
      (rule "unionEqualsEmpty" (formula "27"))
      (rule "andLeft" (formula "27"))
      (rule "unionEqualsEmpty" (formula "31"))
       (builtin "One Step Simplification" (formula "31"))
      (rule "andLeft" (formula "31"))
      (rule "notLeft" (formula "32"))
      (rule "notLeft" (formula "31"))
      (rule "eqSymm" (formula "42"))
      (rule "eqSymm" (formula "41"))
      (rule "unionEqualsEmpty" (formula "31"))
       (builtin "One Step Simplification" (formula "31"))
      (rule "andLeft" (formula "31"))
      (rule "notLeft" (formula "31"))
      (rule "notLeft" (formula "31"))
      (rule "eqSymm" (formula "41"))
      (rule "eqSymm" (formula "40"))
      (rule "unionEqualsEmpty" (formula "30"))
       (builtin "One Step Simplification" (formula "30"))
      (rule "andLeft" (formula "30"))
      (rule "notLeft" (formula "31"))
      (rule "notLeft" (formula "30"))
      (rule "eqSymm" (formula "40"))
      (rule "eqSymm" (formula "39"))
      (rule "unionEqualsEmpty" (formula "29"))
       (builtin "One Step Simplification" (formula "29"))
      (rule "andLeft" (formula "29"))
      (rule "notLeft" (formula "29"))
      (rule "notLeft" (formula "29"))
      (rule "eqSymm" (formula "39"))
      (rule "eqSymm" (formula "38"))
      (rule "unionEqualsEmpty" (formula "25"))
       (builtin "One Step Simplification" (formula "25"))
      (rule "andLeft" (formula "25"))
      (rule "notLeft" (formula "25"))
      (rule "notLeft" (formula "25"))
      (rule "eqSymm" (formula "38"))
      (rule "eqSymm" (formula "37"))
      (rule "unionEqualsEmpty" (formula "25"))
       (builtin "One Step Simplification" (formula "25"))
      (rule "andLeft" (formula "25"))
      (rule "notLeft" (formula "25"))
      (rule "notLeft" (formula "25"))
      (rule "eqSymm" (formula "37"))
      (rule "eqSymm" (formula "36"))
      (rule "unionEqualsEmpty" (formula "25"))
       (builtin "One Step Simplification" (formula "25"))
      (rule "andLeft" (formula "25"))
      (rule "notLeft" (formula "26"))
      (rule "notLeft" (formula "25"))
      (rule "eqSymm" (formula "36"))
      (rule "eqSymm" (formula "35"))
      (rule "unionEqualsEmpty" (formula "25"))
       (builtin "One Step Simplification" (formula "25"))
      (rule "andLeft" (formula "25"))
      (rule "notLeft" (formula "25"))
      (rule "notLeft" (formula "25"))
      (rule "eqSymm" (formula "35"))
      (rule "eqSymm" (formula "34"))
      (rule "commuteUnion" (formula "33") (term "0,0,1"))
      (rule "commuteUnion" (formula "33") (term "1,1,1"))
      (rule "commuteUnion_2" (formula "33") (term "0,1"))
      (rule "commuteUnion" (formula "33") (term "0,0,1"))
      (rule "commuteUnion_2" (formula "33") (term "1"))
      (rule "Definition_axiom_for_smallBucketsInRangeSorted_in_de_wiesler_Sorter" (formula "22") (term "0") (inst "b=b"))
       (builtin "One Step Simplification" (formula "22"))
      (rule "expand_inInt" (formula "22") (term "1,0,0"))
      (rule "replace_int_MAX" (formula "22") (term "1,0,1,0,0"))
      (rule "replace_int_MIN" (formula "22") (term "0,1,1,0,0"))
      (rule "translateJavaAddInt" (formula "22") (term "0,2,5,0,1,0"))
      (rule "polySimp_addComm0" (formula "22") (term "0,2,5,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "22") (term "1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,0"))
      (rule "mul_literals" (formula "22") (term "0,1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,0"))
      (rule "Definition_axiom_for_isValidBucketStarts_in_de_wiesler_Functions" (formula "18") (term "0"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "andLeft" (formula "18"))
      (rule "andLeft" (formula "18"))
      (rule "andLeft" (formula "18"))
      (rule "translateJavaAddInt" (formula "20") (term "3,0"))
      (rule "translateJavaAddInt" (formula "19") (term "0"))
      (rule "polySimp_addComm0" (formula "20") (term "3,0"))
      (rule "polySimp_addComm0" (formula "19") (term "0"))
      (rule "inEqSimp_commuteLeq" (formula "18"))
      (rule "inEqSimp_commuteLeq" (formula "19"))
      (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "18"))
      (rule "leq_literals" (formula "9") (term "0"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "true_left" (formula "9"))
      (rule "Definition_axiom_for_allBucketsPartitioned_in_de_wiesler_Sorter" (formula "23") (term "0") (inst "b=b"))
       (builtin "One Step Simplification" (formula "23"))
      (rule "expand_inInt" (formula "23") (term "1,0,0"))
      (rule "replace_int_MAX" (formula "23") (term "1,0,1,0,0"))
      (rule "replace_int_MIN" (formula "23") (term "0,1,1,0,0"))
      (rule "translateJavaAddInt" (formula "23") (term "0,2,5,0,1,0"))
      (rule "polySimp_addComm0" (formula "23") (term "0,2,5,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "23") (term "1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,0"))
      (rule "mul_literals" (formula "23") (term "0,1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,0"))
      (rule "Definition_axiom_for_allBucketsInRangeSorted_in_de_wiesler_Sorter" (formula "22") (term "0") (inst "b=b"))
       (builtin "One Step Simplification" (formula "22"))
      (rule "expand_inInt" (formula "22") (term "1,0,0"))
      (rule "replace_int_MAX" (formula "22") (term "1,0,1,0,0"))
      (rule "replace_int_MIN" (formula "22") (term "0,1,1,0,0"))
      (rule "translateJavaAddInt" (formula "22") (term "2,0,1,0"))
      (rule "translateJavaAddInt" (formula "22") (term "0,2,1,3,0,1,0"))
      (rule "translateJavaAddInt" (formula "22") (term "3,0,1,0"))
      (rule "polySimp_addComm0" (formula "22") (term "0,2,1,3,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "22") (term "1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,0"))
      (rule "mul_literals" (formula "22") (term "0,1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,0"))
      (rule "Definition_axiom_for_equalityBucketsInRange_in_de_wiesler_Sorter" (formula "25") (term "0,0,1") (inst "b=b"))
       (builtin "One Step Simplification" (formula "25"))
      (rule "expand_inInt" (formula "25") (term "1,0,0,0,1"))
      (rule "replace_int_MIN" (formula "25") (term "0,1,1,0,0,0,1"))
      (rule "replace_int_MAX" (formula "25") (term "1,0,1,0,0,0,1"))
      (rule "translateJavaAddInt" (formula "25") (term "3,0,1,0,0,1"))
      (rule "translateJavaMod" (formula "25") (term "0,1,0,0,0,0,1"))
      (rule "translateJavaAddInt" (formula "25") (term "2,0,1,0,0,1"))
      (rule "translateJavaAddInt" (formula "25") (term "0,2,1,3,0,1,0,0,1"))
      (rule "polySimp_addComm0" (formula "25") (term "0,2,1,3,0,1,0,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,0,0,0,1"))
      (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,0,0,0,1"))
      (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0,0,0,0,1"))
      (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,0,0,0,1"))
      (rule "add_literals" (formula "25") (term "0,0,0,1,0,0,0,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,0,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "25") (term "1,1,0,0,0,1"))
      (rule "jmod_axiom" (formula "25") (term "0,1,0,0,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "25") (term "1,0,1,0,0,0,0,1"))
      (rule "polySimp_homoEq" (formula "25") (term "1,0,0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "25") (term "1,0,1,0,0,0,0,1"))
      (rule "polySimp_rightDist" (formula "25") (term "1,0,1,0,0,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,1,0,0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "25") (term "0,1,0,1,0,0,0,0,1"))
      (rule "polySimp_addAssoc" (formula "25") (term "0,1,0,0,0,0,1"))
      (rule "polySimp_sepPosMonomial" (formula "25") (term "1,0,0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,0,0,1"))
      (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,0,0,1"))
      (rule "mul_literals" (formula "25") (term "0,1,1,0,0,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,0,0,1"))
      (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,0,0,0,1"))
      (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,0,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,0,0,0,1"))
      (rule "mul_literals" (formula "25") (term "0,1,1,0,0,0,0,0,1"))
      (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,0,0,0,1"))
      (rule "Definition_axiom_for_notAllValuesInOneBucket_in_de_wiesler_Sorter" (formula "26") (term "0") (inst "b=b"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "expand_inInt" (formula "26") (term "1,0,0"))
      (rule "replace_int_MAX" (formula "26") (term "1,0,1,0,0"))
      (rule "replace_int_MIN" (formula "26") (term "0,1,1,0,0"))
      (rule "translateJavaSubInt" (formula "26") (term "0,1,0"))
      (rule "translateJavaAddInt" (formula "26") (term "0,2,0,0,1,0"))
      (rule "polySimp_elimSub" (formula "26") (term "0,1,0"))
      (rule "polySimp_addComm0" (formula "26") (term "0,1,0"))
      (rule "polySimp_addComm0" (formula "26") (term "0,2,1,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0"))
      (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0"))
      (rule "polySimp_mulAssoc" (formula "26") (term "0,1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "26") (term "0,0,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "26") (term "0,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "26") (term "0,1,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "26") (term "0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "26") (term "1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,0"))
      (rule "mul_literals" (formula "26") (term "0,1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0"))
      (rule "polySimp_mulComm0" (formula "26") (term "1,1,0"))
      (rule "polySimp_rightDist" (formula "26") (term "1,1,0"))
      (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0"))
      (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0"))
      (rule "polySimp_rightDist" (formula "26") (term "0,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "26") (term "1,0,1,1,0"))
      (rule "polySimp_elimOne" (formula "26") (term "1,0,1,1,0"))
      (rule "polySimp_rightDist" (formula "26") (term "0,0,1,1,0"))
      (rule "mul_literals" (formula "26") (term "0,0,0,1,1,0"))
      (rule "commute_and" (formula "92"))
      (rule "nnf_imp2or" (formula "24") (term "0"))
      (rule "nnf_imp2or" (formula "23") (term "0"))
      (rule "nnf_imp2or" (formula "22") (term "0"))
      (rule "nnf_imp2or" (formula "25") (term "0,0,1"))
      (rule "nnf_imp2or" (formula "26") (term "0"))
      (rule "nnf_notAnd" (formula "24") (term "0,0"))
      (rule "nnf_notAnd" (formula "23") (term "0,0"))
      (rule "nnf_notAnd" (formula "22") (term "0,0"))
      (rule "nnf_notAnd" (formula "26") (term "0,0"))
      (rule "nnf_notAnd" (formula "24") (term "0,0,0"))
      (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,0"))
      (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,0"))
      (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,0"))
      (rule "add_zero_left" (formula "24") (term "0,0,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0,0"))
      (rule "mul_literals" (formula "24") (term "0,1,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0,0"))
      (rule "nnf_notAnd" (formula "24") (term "1,0,0"))
      (rule "inEqSimp_notGeq" (formula "24") (term "1,1,0,0"))
      (rule "mul_literals" (formula "24") (term "1,0,0,1,1,0,0"))
      (rule "add_literals" (formula "24") (term "0,0,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,1,0,0"))
      (rule "mul_literals" (formula "24") (term "1,1,1,0,0"))
      (rule "inEqSimp_notLeq" (formula "24") (term "0,1,0,0"))
      (rule "mul_literals" (formula "24") (term "1,0,0,0,1,0,0"))
      (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "0,1,0,0"))
      (rule "mul_literals" (formula "24") (term "1,0,1,0,0"))
      (rule "nnf_notAnd" (formula "23") (term "1,0,0"))
      (rule "inEqSimp_notLeq" (formula "23") (term "0,1,0,0"))
      (rule "mul_literals" (formula "23") (term "1,0,0,0,1,0,0"))
      (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "0,1,0,0"))
      (rule "mul_literals" (formula "23") (term "1,0,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "23") (term "1,1,0,0"))
      (rule "mul_literals" (formula "23") (term "1,0,0,1,1,0,0"))
      (rule "add_literals" (formula "23") (term "0,0,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,1,0,0"))
      (rule "mul_literals" (formula "23") (term "1,1,1,0,0"))
      (rule "nnf_notAnd" (formula "23") (term "0,0,0"))
      (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0,0"))
      (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0,0"))
      (rule "add_literals" (formula "23") (term "0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0,0"))
      (rule "mul_literals" (formula "23") (term "1,0,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0,0"))
      (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,0"))
      (rule "add_literals" (formula "23") (term "0,0,0,1,0,0,0"))
      (rule "add_zero_left" (formula "23") (term "0,0,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0,0"))
      (rule "nnf_notAnd" (formula "22") (term "1,0,0"))
      (rule "inEqSimp_notLeq" (formula "22") (term "0,1,0,0"))
      (rule "mul_literals" (formula "22") (term "1,0,0,0,1,0,0"))
      (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "0,1,0,0"))
      (rule "mul_literals" (formula "22") (term "1,0,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "22") (term "1,1,0,0"))
      (rule "mul_literals" (formula "22") (term "1,0,0,1,1,0,0"))
      (rule "add_literals" (formula "22") (term "0,0,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,1,0,0"))
      (rule "mul_literals" (formula "22") (term "1,1,1,0,0"))
      (rule "nnf_notAnd" (formula "22") (term "0,0,0"))
      (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0,0"))
      (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0,0"))
      (rule "add_literals" (formula "22") (term "0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0,0"))
      (rule "mul_literals" (formula "22") (term "1,0,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0,0"))
      (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0,0"))
      (rule "add_literals" (formula "22") (term "0,0,0,1,0,0,0"))
      (rule "add_zero_left" (formula "22") (term "0,0,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0"))
      (rule "nnf_notAnd" (formula "26") (term "0,0,0"))
      (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,0"))
      (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0,0"))
      (rule "add_literals" (formula "26") (term "0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,0"))
      (rule "mul_literals" (formula "26") (term "1,0,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,0"))
      (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,0"))
      (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,0"))
      (rule "add_zero_left" (formula "26") (term "0,0,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0"))
      (rule "nnf_notAnd" (formula "26") (term "1,0,0"))
      (rule "inEqSimp_notGeq" (formula "26") (term "1,1,0,0"))
      (rule "mul_literals" (formula "26") (term "1,0,0,1,1,0,0"))
      (rule "add_literals" (formula "26") (term "0,0,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,1,0,0"))
      (rule "mul_literals" (formula "26") (term "1,1,1,0,0"))
      (rule "inEqSimp_notLeq" (formula "26") (term "0,1,0,0"))
      (rule "mul_literals" (formula "26") (term "1,0,0,0,1,0,0"))
      (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "0,1,0,0"))
      (rule "mul_literals" (formula "26") (term "1,0,1,0,0"))
      (rule "nnf_notAnd" (formula "25") (term "0,0,0,1"))
      (rule "arrayLengthNotNegative" (formula "12") (term "0"))
      (rule "arrayLengthIsAShort" (formula "13") (term "0"))
      (rule "expand_inShort" (formula "13"))
      (rule "replace_short_MIN" (formula "13") (term "0,1"))
      (rule "replace_short_MAX" (formula "13") (term "1,0"))
      (rule "andLeft" (formula "13"))
      (rule "inEqSimp_commuteLeq" (formula "14"))
      (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "12"))
      (rule "leq_literals" (formula "14") (term "0"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "true_left" (formula "14"))
      (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "13"))
      (rule "polySimp_mulComm0" (formula "14") (term "0,0"))
      (rule "polySimp_addComm0" (formula "14") (term "0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "14"))
      (rule "polySimp_mulLiterals" (formula "14") (term "0"))
      (rule "polySimp_elimOne" (formula "14") (term "0"))
      (rule "inEqSimp_subsumption0" (formula "4") (ifseqformula "14"))
      (rule "leq_literals" (formula "4") (term "0"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "true_left" (formula "4"))
      (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "13"))
      (rule "polySimp_mulComm0" (formula "10") (term "0,0"))
      (rule "polySimp_addComm0" (formula "10") (term "0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "10"))
      (rule "polySimp_mulLiterals" (formula "10") (term "0"))
      (rule "polySimp_elimOne" (formula "10") (term "0"))
      (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "10"))
      (rule "leq_literals" (formula "3") (term "0"))
       (builtin "One Step Simplification" (formula "3"))
      (rule "true_left" (formula "3"))
      (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "21") (term "0") (inst "j=j") (inst "i=i"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "expand_inInt" (formula "21") (term "1,0,0"))
      (rule "expand_inInt" (formula "21") (term "1,0,0,1,0"))
      (rule "replace_int_MAX" (formula "21") (term "1,0,1,0,0"))
      (rule "replace_int_MIN" (formula "21") (term "0,1,1,0,0"))
      (rule "replace_int_MAX" (formula "21") (term "1,0,1,0,0,1,0"))
      (rule "replace_int_MIN" (formula "21") (term "0,1,1,0,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,0,1,0"))
      (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,0,1,0"))
      (rule "add_literals" (formula "21") (term "0,0,0,1,0,0,0,1,0"))
      (rule "add_zero_left" (formula "21") (term "0,0,1,0,0,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,0"))
      (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,0"))
      (rule "add_literals" (formula "21") (term "0,0,0,1,0,0,0"))
      (rule "add_zero_left" (formula "21") (term "0,0,1,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "21") (term "1,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "21") (term "1,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "21") (term "1,1,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0"))
      (rule "nnf_notAnd" (formula "27") (term "0,0,0,0,1"))
      (rule "nnf_notAnd" (formula "27") (term "1,0,0,0,1"))
      (rule "inEqSimp_notLeq" (formula "27") (term "0,1,0,0,0,1"))
      (rule "mul_literals" (formula "27") (term "1,0,0,0,1,0,0,0,1"))
      (rule "add_literals" (formula "27") (term "0,0,0,1,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "0,1,0,0,0,1"))
      (rule "mul_literals" (formula "27") (term "1,0,1,0,0,0,1"))
      (rule "inEqSimp_notGeq" (formula "27") (term "1,1,0,0,0,1"))
      (rule "mul_literals" (formula "27") (term "1,0,0,1,1,0,0,0,1"))
      (rule "add_literals" (formula "27") (term "0,0,1,1,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,1,0,0,0,1"))
      (rule "mul_literals" (formula "27") (term "1,1,1,0,0,0,1"))
      (rule "nnf_imp2or" (formula "21") (term "0"))
      (rule "nnf_notAnd" (formula "21") (term "0,0"))
      (rule "commute_or" (formula "27") (term "1,1"))
      (rule "nnf_imp2or" (formula "21") (term "0,1,0"))
      (rule "nnf_notAnd" (formula "21") (term "0,0,0"))
      (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0,0"))
      (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0,0"))
      (rule "add_zero_right" (formula "21") (term "0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,0"))
      (rule "mul_literals" (formula "21") (term "1,0,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0,0"))
      (rule "mul_literals" (formula "21") (term "0,1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0,0"))
      (rule "nnf_notAnd" (formula "21") (term "1,0,0"))
      (rule "inEqSimp_notGeq" (formula "21") (term "1,1,0,0"))
      (rule "mul_literals" (formula "21") (term "1,0,0,1,1,0,0"))
      (rule "add_literals" (formula "21") (term "0,0,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,1,0,0"))
      (rule "mul_literals" (formula "21") (term "1,1,1,0,0"))
      (rule "inEqSimp_notLeq" (formula "21") (term "0,1,0,0"))
      (rule "mul_literals" (formula "21") (term "1,0,0,0,1,0,0"))
      (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "0,1,0,0"))
      (rule "mul_literals" (formula "21") (term "1,0,1,0,0"))
      (rule "arrayLengthIsAShort" (formula "36") (term "0"))
      (rule "expand_inShort" (formula "36"))
      (rule "replace_short_MIN" (formula "36") (term "0,1"))
      (rule "replace_short_MAX" (formula "36") (term "1,0"))
      (rule "andLeft" (formula "36"))
      (rule "inEqSimp_commuteLeq" (formula "37"))
      (rule "applyEq" (formula "37") (term "0") (ifseqformula "38"))
      (rule "qeq_literals" (formula "37"))
      (rule "true_left" (formula "37"))
      (rule "applyEq" (formula "36") (term "0") (ifseqformula "37"))
      (rule "leq_literals" (formula "36"))
      (rule "true_left" (formula "36"))
      (rule "arrayLengthNotNegative" (formula "36") (term "0"))
      (rule "applyEq" (formula "36") (term "0") (ifseqformula "37"))
      (rule "qeq_literals" (formula "36"))
      (rule "true_left" (formula "36"))
      (rule "arrayLengthIsAShort" (formula "35") (term "0"))
      (rule "expand_inShort" (formula "35"))
      (rule "replace_short_MIN" (formula "35") (term "0,1"))
      (rule "replace_short_MAX" (formula "35") (term "1,0"))
      (rule "andLeft" (formula "35"))
      (rule "inEqSimp_commuteLeq" (formula "36"))
      (rule "applyEq" (formula "36") (term "0") (ifseqformula "37"))
      (rule "qeq_literals" (formula "36"))
      (rule "true_left" (formula "36"))
      (rule "applyEq" (formula "35") (term "0") (ifseqformula "36"))
      (rule "leq_literals" (formula "35"))
      (rule "true_left" (formula "35"))
      (rule "arrayLengthNotNegative" (formula "35") (term "0"))
      (rule "applyEq" (formula "35") (term "0") (ifseqformula "36"))
      (rule "qeq_literals" (formula "35"))
      (rule "true_left" (formula "35"))
      (rule "nnf_notAnd" (formula "21") (term "0,0,1,0"))
      (rule "arrayLengthNotNegative" (formula "34") (term "0"))
      (rule "applyEq" (formula "34") (term "0") (ifseqformula "35"))
      (rule "qeq_literals" (formula "34"))
      (rule "true_left" (formula "34"))
      (rule "arrayLengthIsAShort" (formula "34") (term "0"))
      (rule "expand_inShort" (formula "34"))
      (rule "replace_short_MIN" (formula "34") (term "0,1"))
      (rule "replace_short_MAX" (formula "34") (term "1,0"))
      (rule "andLeft" (formula "34"))
      (rule "inEqSimp_commuteLeq" (formula "35"))
      (rule "applyEq" (formula "35") (term "0") (ifseqformula "36"))
      (rule "qeq_literals" (formula "35"))
      (rule "true_left" (formula "35"))
      (rule "applyEq" (formula "34") (term "0") (ifseqformula "35"))
      (rule "leq_literals" (formula "34"))
      (rule "true_left" (formula "34"))
      (rule "arrayLengthIsAShort" (formula "33") (term "0"))
      (rule "expand_inShort" (formula "33"))
      (rule "replace_short_MIN" (formula "33") (term "0,1"))
      (rule "replace_short_MAX" (formula "33") (term "1,0"))
      (rule "andLeft" (formula "33"))
      (rule "inEqSimp_commuteLeq" (formula "34"))
      (rule "applyEq" (formula "34") (term "0") (ifseqformula "35"))
      (rule "qeq_literals" (formula "34"))
      (rule "true_left" (formula "34"))
      (rule "applyEq" (formula "33") (term "0") (ifseqformula "34"))
      (rule "leq_literals" (formula "33"))
      (rule "true_left" (formula "33"))
      (rule "arrayLengthNotNegative" (formula "33") (term "0"))
      (rule "applyEq" (formula "33") (term "0") (ifseqformula "34"))
      (rule "qeq_literals" (formula "33"))
      (rule "true_left" (formula "33"))
      (rule "nnf_notAnd" (formula "27") (term "0,0,0,0,0,1"))
      (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0,0,0,0,1"))
      (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0,0,0,0,0,0,1"))
      (rule "mul_literals" (formula "27") (term "0,1,0,0,0,0,0,0,0,0,1"))
      (rule "polySimp_addAssoc" (formula "27") (term "0,0,0,0,0,0,0,0,1"))
      (rule "add_literals" (formula "27") (term "0,0,0,0,0,0,0,0,0,1"))
      (rule "add_zero_left" (formula "27") (term "0,0,0,0,0,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0,0,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "27") (term "1,0,0,0,0,0,0,1"))
      (rule "polySimp_elimOne" (formula "27") (term "1,0,0,0,0,0,0,1"))
      (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0,0,0,0,1"))
      (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,0,0,0,1"))
      (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0,0,0,0,1"))
      (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,0,0,0,1"))
      (rule "add_literals" (formula "27") (term "0,0,0,1,0,0,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0,0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,0,0,0,1"))
      (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,0,0,0,1"))
      (rule "mul_literals" (formula "27") (term "0,1,1,0,0,0,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,0,0,0,1"))
      (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,0,0,0,1"))
      (rule "arrayLengthIsAShort" (formula "32") (term "0"))
      (rule "expand_inShort" (formula "32"))
      (rule "replace_short_MIN" (formula "32") (term "0,1"))
      (rule "replace_short_MAX" (formula "32") (term "1,0"))
      (rule "andLeft" (formula "32"))
      (rule "inEqSimp_commuteLeq" (formula "33"))
      (rule "applyEq" (formula "33") (term "0") (ifseqformula "34"))
      (rule "qeq_literals" (formula "33"))
      (rule "true_left" (formula "33"))
      (rule "applyEq" (formula "32") (term "0") (ifseqformula "33"))
      (rule "leq_literals" (formula "32"))
      (rule "closeFalse" (formula "32"))
   )
   (branch "Usage"
       (builtin "One Step Simplification" (formula "35"))
      (rule "translateJavaAddInt" (formula "35") (term "0,1,0"))
      (rule "variableDeclarationAssign" (formula "35") (term "1"))
      (rule "variableDeclaration" (formula "35") (term "1") (newnames "inner_end"))
      (rule "compound_addition_2" (formula "35") (term "1") (inst "#v0=x") (inst "#v1=x_1"))
      (rule "variableDeclarationAssign" (formula "35") (term "1"))
      (rule "variableDeclaration" (formula "35") (term "1") (newnames "x_2"))
      (rule "assignment" (formula "35") (term "1"))
       (builtin "One Step Simplification" (formula "35"))
      (rule "variableDeclarationAssign" (formula "35") (term "1"))
      (rule "variableDeclaration" (formula "35") (term "1") (newnames "x_3"))
      (rule "eval_order_array_access5" (formula "35") (term "1") (inst "#ar1=x_arr") (inst "#v1=x_4"))
      (rule "variableDeclarationAssign" (formula "35") (term "1"))
      (rule "variableDeclaration" (formula "35") (term "1") (newnames "x_arr"))
      (rule "assignment" (formula "35") (term "1"))
       (builtin "One Step Simplification" (formula "35"))
      (rule "variableDeclarationAssign" (formula "35") (term "1"))
      (rule "variableDeclaration" (formula "35") (term "1") (newnames "x_4"))
      (rule "assignmentAdditionInt" (formula "35") (term "1"))
      (branch "Overflow check"
          (builtin "One Step Simplification" (formula "35"))
         (rule "expand_inInt" (formula "35"))
         (rule "replace_int_MIN" (formula "35") (term "0,1"))
         (rule "replace_int_MAX" (formula "35") (term "1,0"))
         (rule "polySimp_homoEq" (formula "26") (term "0,1,1"))
         (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,1"))
         (rule "polySimp_addComm0" (formula "35") (term "1,1"))
         (rule "polySimp_addComm0" (formula "35") (term "0,0"))
         (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,1"))
         (rule "mul_literals" (formula "26") (term "0,1,0,0,1,1"))
         (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,1"))
         (rule "polySimp_addComm0" (formula "26") (term "0,0,0,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "20"))
         (rule "polySimp_mulComm0" (formula "20") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "20") (term "0"))
         (rule "inEqSimp_homoInEq0" (formula "18"))
         (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
         (rule "polySimp_rightDist" (formula "18") (term "1,0"))
         (rule "polySimp_mulAssoc" (formula "18") (term "0,1,0"))
         (rule "polySimp_mulComm0" (formula "18") (term "0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "18") (term "0,1,0"))
         (rule "polySimp_elimOne" (formula "18") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "18") (term "0"))
         (rule "inEqSimp_homoInEq0" (formula "35") (term "1"))
         (rule "mul_literals" (formula "35") (term "1,0,1"))
         (rule "polySimp_addComm1" (formula "35") (term "0,1"))
         (rule "add_literals" (formula "35") (term "0,0,1"))
         (rule "inEqSimp_homoInEq0" (formula "35") (term "0"))
         (rule "polySimp_mulComm0" (formula "35") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "35") (term "1,0,0"))
         (rule "mul_literals" (formula "35") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "35") (term "0,0"))
         (rule "add_literals" (formula "35") (term "0,0,0"))
         (rule "jmod_axiom" (formula "26") (term "0,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "26") (term "1,0,1,1,1"))
         (rule "polySimp_sepNegMonomial" (formula "26") (term "0,1,1"))
         (rule "polySimp_mulLiterals" (formula "26") (term "0,0,1,1"))
         (rule "polySimp_elimOne" (formula "26") (term "0,0,1,1"))
         (rule "polySimp_sepNegMonomial" (formula "26") (term "1,1,1"))
         (rule "polySimp_mulLiterals" (formula "26") (term "0,1,1,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "20"))
         (rule "polySimp_mulLiterals" (formula "20") (term "0"))
         (rule "polySimp_elimOne" (formula "20") (term "0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "18"))
         (rule "polySimp_mulLiterals" (formula "18") (term "0"))
         (rule "polySimp_elimOne" (formula "18") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1"))
         (rule "mul_literals" (formula "35") (term "1,1"))
         (rule "inEqSimp_sepNegMonomial1" (formula "35") (term "0"))
         (rule "polySimp_mulLiterals" (formula "35") (term "0,0"))
         (rule "polySimp_elimOne" (formula "35") (term "0,0"))
         (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "19"))
         (rule "leq_literals" (formula "12") (term "0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "true_left" (formula "12"))
         (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "14"))
         (rule "leq_literals" (formula "4") (term "0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "true_left" (formula "4"))
         (rule "inEqSimp_subsumption1" (formula "33") (term "1") (ifseqformula "17"))
         (rule "leq_literals" (formula "33") (term "0,1"))
          (builtin "One Step Simplification" (formula "33"))
         (rule "inEqSimp_leqRight" (formula "33"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1"))
         (rule "mul_literals" (formula "1") (term "1"))
         (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "1"))
         (rule "leq_literals" (formula "18") (term "0"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "true_left" (formula "18"))
         (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "11"))
         (rule "applyEq" (formula "19") (term "1,1") (ifseqformula "1"))
         (rule "add_literals" (formula "19") (term "1"))
         (rule "applyEq" (formula "12") (term "0") (ifseqformula "1"))
         (rule "leq_literals" (formula "12"))
         (rule "true_left" (formula "12"))
         (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
         (rule "qeq_literals" (formula "2"))
         (rule "true_left" (formula "2"))
         (rule "applyEq" (formula "23") (term "0,0,0,1,1,1") (ifseqformula "1"))
         (rule "eqSymm" (formula "23") (term "1,1,1"))
         (rule "jdiv_axiom_inline" (formula "23") (term "0,1,1,1,1"))
         (rule "mul_literals" (formula "23") (term "0,0,2,0,1,1,1,1"))
         (rule "qeq_literals" (formula "23") (term "0,0,1,1,1,1"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "div_literals" (formula "23") (term "0,1,1,1,1"))
         (rule "mul_literals" (formula "23") (term "1,1,1,1"))
         (rule "applyEq" (formula "20") (term "7,0") (ifseqformula "1"))
         (rule "applyEq" (formula "22") (term "6,0") (ifseqformula "1"))
         (rule "applyEq" (formula "23") (term "1,6,0,0,1") (ifseqformula "1"))
         (rule "add_literals" (formula "23") (term "6,0,0,1"))
         (rule "applyEq" (formula "23") (term "0,1,1,1") (ifseqformula "1"))
         (rule "equal_literals" (formula "23") (term "1,1,1"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "applyEq" (formula "23") (term "1,1,1,1") (ifseqformula "1"))
         (rule "add_literals" (formula "23") (term "1,1,1"))
         (rule "inEqSimp_contradEq3" (formula "23") (term "1,1") (ifseqformula "9"))
         (rule "mul_literals" (formula "23") (term "1,0,0,1,1"))
         (rule "add_literals" (formula "23") (term "0,0,1,1"))
         (rule "qeq_literals" (formula "23") (term "0,1,1"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "notLeft" (formula "23"))
         (rule "inEqSimp_contradInEq1" (formula "9") (ifseqformula "17"))
         (rule "qeq_literals" (formula "9") (term "0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "closeFalse" (formula "9"))
      )
      (branch "Usage"
          (builtin "One Step Simplification" (formula "35"))
         (rule "translateJavaAddInt" (formula "35") (term "0,1,0"))
         (rule "polySimp_addComm0" (formula "35") (term "0,1,0"))
         (rule "assignment_array2" (formula "35"))
         (branch "Normal Execution (x_arr != null)"
             (builtin "One Step Simplification" (formula "35"))
            (rule "assignmentAdditionInt" (formula "35") (term "1"))
            (branch "Overflow check"
                (builtin "One Step Simplification" (formula "35"))
               (rule "expand_inInt" (formula "35"))
               (rule "replace_int_MIN" (formula "35") (term "0,1"))
               (rule "replace_int_MAX" (formula "35") (term "1,0"))
               (rule "polySimp_homoEq" (formula "26") (term "0,1,1"))
               (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,1"))
               (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,1"))
               (rule "mul_literals" (formula "26") (term "0,1,0,0,1,1"))
               (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,1"))
               (rule "polySimp_addComm0" (formula "26") (term "0,0,0,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "20"))
               (rule "polySimp_mulComm0" (formula "20") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "20") (term "0"))
               (rule "inEqSimp_homoInEq0" (formula "18"))
               (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
               (rule "polySimp_rightDist" (formula "18") (term "1,0"))
               (rule "polySimp_mulAssoc" (formula "18") (term "0,1,0"))
               (rule "polySimp_mulComm0" (formula "18") (term "0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "18") (term "0,1,0"))
               (rule "polySimp_elimOne" (formula "18") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "18") (term "0"))
               (rule "inEqSimp_homoInEq0" (formula "35") (term "1"))
               (rule "mul_literals" (formula "35") (term "1,0,1"))
               (rule "polySimp_addComm1" (formula "35") (term "0,1"))
               (rule "polySimp_addComm0" (formula "35") (term "0,0,1"))
               (rule "inEqSimp_homoInEq0" (formula "35") (term "0"))
               (rule "polySimp_mulComm0" (formula "35") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "35") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "35") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "35") (term "0,0"))
               (rule "jmod_axiom" (formula "26") (term "0,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "26") (term "1,0,1,1,1"))
               (rule "polySimp_sepNegMonomial" (formula "26") (term "0,1,1"))
               (rule "polySimp_mulLiterals" (formula "26") (term "0,0,1,1"))
               (rule "polySimp_elimOne" (formula "26") (term "0,0,1,1"))
               (rule "polySimp_sepNegMonomial" (formula "26") (term "1,1,1"))
               (rule "polySimp_mulLiterals" (formula "26") (term "0,1,1,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "20"))
               (rule "polySimp_mulLiterals" (formula "20") (term "0"))
               (rule "polySimp_elimOne" (formula "20") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "18"))
               (rule "polySimp_mulLiterals" (formula "18") (term "0"))
               (rule "polySimp_elimOne" (formula "18") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1"))
               (rule "polySimp_mulComm0" (formula "35") (term "1,1"))
               (rule "polySimp_rightDist" (formula "35") (term "1,1"))
               (rule "mul_literals" (formula "35") (term "0,1,1"))
               (rule "inEqSimp_sepNegMonomial1" (formula "35") (term "0"))
               (rule "polySimp_mulLiterals" (formula "35") (term "0,0"))
               (rule "polySimp_elimOne" (formula "35") (term "0,0"))
               (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "15"))
               (rule "leq_literals" (formula "4") (term "0"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "true_left" (formula "4"))
               (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "18"))
               (rule "leq_literals" (formula "11") (term "0"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "true_left" (formula "11"))
               (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "16"))
               (rule "mul_literals" (formula "5") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "5") (term "0"))
               (rule "add_literals" (formula "5") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "5"))
               (rule "mul_literals" (formula "5") (term "1"))
               (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "14"))
               (rule "leq_literals" (formula "5") (term "0"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "true_left" (formula "5"))
               (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "4"))
               (rule "polySimp_mulComm0" (formula "14") (term "0,0"))
               (rule "polySimp_addComm0" (formula "14") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "14"))
               (rule "polySimp_mulLiterals" (formula "14") (term "0"))
               (rule "polySimp_elimOne" (formula "14") (term "0"))
               (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "8"))
               (rule "polySimp_rightDist" (formula "18") (term "0,0"))
               (rule "mul_literals" (formula "18") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "18") (term "0"))
               (rule "add_literals" (formula "18") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "18"))
               (rule "polySimp_mulLiterals" (formula "18") (term "0"))
               (rule "polySimp_elimOne" (formula "18") (term "0"))
               (rule "inEqSimp_subsumption0" (formula "10") (ifseqformula "18"))
               (rule "leq_literals" (formula "10") (term "0"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "true_left" (formula "10"))
               (rule "Definition_axiom_for_smallBucketsInRangeSorted_in_de_wiesler_Sorter" (formula "23") (term "0") (inst "b=b"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "expand_inInt" (formula "23") (term "1,0,0"))
               (rule "replace_int_MAX" (formula "23") (term "1,0,1,0,0"))
               (rule "replace_int_MIN" (formula "23") (term "0,1,1,0,0"))
               (rule "translateJavaAddInt" (formula "23") (term "0,2,5,0,1,0"))
               (rule "polySimp_addComm0" (formula "23") (term "0,2,5,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "23") (term "1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,0"))
               (rule "mul_literals" (formula "23") (term "0,1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,0"))
               (rule "nnf_imp2or" (formula "23") (term "0"))
               (rule "nnf_notAnd" (formula "23") (term "0,0"))
               (rule "nnf_notAnd" (formula "23") (term "1,0,0"))
               (rule "inEqSimp_notGeq" (formula "23") (term "1,1,0,0"))
               (rule "mul_literals" (formula "23") (term "1,0,0,1,1,0,0"))
               (rule "add_literals" (formula "23") (term "0,0,1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,1,0,0"))
               (rule "mul_literals" (formula "23") (term "1,1,1,0,0"))
               (rule "inEqSimp_notLeq" (formula "23") (term "0,1,0,0"))
               (rule "mul_literals" (formula "23") (term "1,0,0,0,1,0,0"))
               (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "0,1,0,0"))
               (rule "mul_literals" (formula "23") (term "1,0,1,0,0"))
               (rule "nnf_notAnd" (formula "23") (term "0,0,0"))
               (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0,0"))
               (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,0"))
               (rule "add_literals" (formula "23") (term "0,0,0,1,0,0,0"))
               (rule "add_zero_left" (formula "23") (term "0,0,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0,0"))
               (rule "mul_literals" (formula "23") (term "0,1,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0,0,0"))
               (rule "Definition_axiom_for_allBucketsInRangeSorted_in_de_wiesler_Sorter" (formula "21") (term "0") (inst "b=b"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "expand_inInt" (formula "21") (term "1,0,0"))
               (rule "replace_int_MAX" (formula "21") (term "1,0,1,0,0"))
               (rule "replace_int_MIN" (formula "21") (term "0,1,1,0,0"))
               (rule "translateJavaAddInt" (formula "21") (term "0,2,1,3,0,1,0"))
               (rule "translateJavaAddInt" (formula "21") (term "2,0,1,0"))
               (rule "translateJavaAddInt" (formula "21") (term "3,0,1,0"))
               (rule "polySimp_addComm0" (formula "21") (term "0,2,1,3,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "21") (term "1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0,0"))
               (rule "mul_literals" (formula "21") (term "0,1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0,0"))
               (rule "nnf_imp2or" (formula "21") (term "0"))
               (rule "nnf_notAnd" (formula "21") (term "0,0"))
               (rule "nnf_notAnd" (formula "21") (term "1,0,0"))
               (rule "inEqSimp_notGeq" (formula "21") (term "1,1,0,0"))
               (rule "mul_literals" (formula "21") (term "1,0,0,1,1,0,0"))
               (rule "add_literals" (formula "21") (term "0,0,1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,1,0,0"))
               (rule "mul_literals" (formula "21") (term "1,1,1,0,0"))
               (rule "inEqSimp_notLeq" (formula "21") (term "0,1,0,0"))
               (rule "mul_literals" (formula "21") (term "1,0,0,0,1,0,0"))
               (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "0,1,0,0"))
               (rule "mul_literals" (formula "21") (term "1,0,1,0,0"))
               (rule "nnf_notAnd" (formula "21") (term "0,0,0"))
               (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,0"))
               (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,0"))
               (rule "add_literals" (formula "21") (term "0,0,0,1,0,0,0"))
               (rule "add_zero_left" (formula "21") (term "0,0,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0,0"))
               (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0,0"))
               (rule "add_zero_right" (formula "21") (term "0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,0"))
               (rule "mul_literals" (formula "21") (term "1,0,0,0,0"))
               (rule "Definition_axiom_for_equalityBucketsInRange_in_de_wiesler_Sorter" (formula "24") (term "0,0,1") (inst "b=b"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "expand_inInt" (formula "24") (term "1,0,0,0,1"))
               (rule "replace_int_MIN" (formula "24") (term "0,1,1,0,0,0,1"))
               (rule "replace_int_MAX" (formula "24") (term "1,0,1,0,0,0,1"))
               (rule "translateJavaAddInt" (formula "24") (term "0,2,1,3,0,1,0,0,1"))
               (rule "translateJavaAddInt" (formula "24") (term "2,0,1,0,0,1"))
               (rule "translateJavaMod" (formula "24") (term "0,1,0,0,0,0,1"))
               (rule "translateJavaAddInt" (formula "24") (term "3,0,1,0,0,1"))
               (rule "polySimp_addComm0" (formula "24") (term "0,2,1,3,0,1,0,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,0,0,0,1"))
               (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,0,0,0,1"))
               (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,0,0,0,1"))
               (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,0,0,0,1"))
               (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "24") (term "1,1,0,0,0,1"))
               (rule "jmod_axiom" (formula "24") (term "0,1,0,0,0,0,1"))
               (rule "polySimp_mulLiterals" (formula "24") (term "1,0,1,0,0,0,0,1"))
               (rule "polySimp_homoEq" (formula "24") (term "1,0,0,0,0,1"))
               (rule "polySimp_mulComm0" (formula "24") (term "1,0,1,0,0,0,0,1"))
               (rule "polySimp_rightDist" (formula "24") (term "1,0,1,0,0,0,0,1"))
               (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,1,0,0,0,0,1"))
               (rule "polySimp_mulComm0" (formula "24") (term "0,1,0,1,0,0,0,0,1"))
               (rule "polySimp_addAssoc" (formula "24") (term "0,1,0,0,0,0,1"))
               (rule "polySimp_sepPosMonomial" (formula "24") (term "1,0,0,0,0,1"))
               (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,0,0,1"))
               (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,0,0,1"))
               (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,0,0,1"))
               (rule "mul_literals" (formula "24") (term "0,1,1,0,0,0,0,1"))
               (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,0,0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,0,0,0,1"))
               (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,0,0,0,1"))
               (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,0,0,0,1"))
               (rule "mul_literals" (formula "24") (term "0,1,1,0,0,0,0,0,1"))
               (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,0,0,0,1"))
               (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,0,0,0,1"))
               (rule "nnf_imp2or" (formula "24") (term "0,0,1"))
               (rule "Definition_axiom_for_allBucketsPartitioned_in_de_wiesler_Sorter" (formula "22") (term "0") (inst "b=b"))
                (builtin "One Step Simplification" (formula "22"))
               (rule "expand_inInt" (formula "22") (term "1,0,0"))
               (rule "replace_int_MAX" (formula "22") (term "1,0,1,0,0"))
               (rule "replace_int_MIN" (formula "22") (term "0,1,1,0,0"))
               (rule "translateJavaAddInt" (formula "22") (term "0,2,5,0,1,0"))
               (rule "polySimp_addComm0" (formula "22") (term "0,2,5,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "22") (term "1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,0"))
               (rule "mul_literals" (formula "22") (term "0,1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,0"))
               (rule "nnf_imp2or" (formula "22") (term "0"))
               (rule "Definition_axiom_for_notAllValuesInOneBucket_in_de_wiesler_Sorter" (formula "25") (term "0") (inst "b=b"))
                (builtin "One Step Simplification" (formula "25"))
               (rule "expand_inInt" (formula "25") (term "1,0,0"))
               (rule "replace_int_MAX" (formula "25") (term "1,0,1,0,0"))
               (rule "replace_int_MIN" (formula "25") (term "0,1,1,0,0"))
               (rule "translateJavaSubInt" (formula "25") (term "0,1,0"))
               (rule "translateJavaAddInt" (formula "25") (term "0,2,0,0,1,0"))
               (rule "polySimp_elimSub" (formula "25") (term "0,1,0"))
               (rule "polySimp_addComm0" (formula "25") (term "0,1,0"))
               (rule "polySimp_addComm0" (formula "25") (term "0,2,1,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0"))
               (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0"))
               (rule "polySimp_mulAssoc" (formula "25") (term "0,1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "25") (term "0,0,1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "25") (term "0,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "25") (term "0,1,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "25") (term "0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "25") (term "1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,0"))
               (rule "mul_literals" (formula "25") (term "0,1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "25") (term "1,1,0"))
               (rule "polySimp_rightDist" (formula "25") (term "1,1,0"))
               (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0"))
               (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0"))
               (rule "polySimp_rightDist" (formula "25") (term "0,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "25") (term "1,0,1,1,0"))
               (rule "polySimp_elimOne" (formula "25") (term "1,0,1,1,0"))
               (rule "polySimp_rightDist" (formula "25") (term "0,0,1,1,0"))
               (rule "mul_literals" (formula "25") (term "0,0,0,1,1,0"))
               (rule "Free_class_invariant_axiom_for_de_wiesler_Storage" (formula "28"))
                (builtin "One Step Simplification" (formula "28"))
               (rule "andLeft" (formula "28"))
               (rule "andLeft" (formula "28"))
               (rule "andLeft" (formula "30"))
               (rule "andLeft" (formula "28"))
               (rule "andLeft" (formula "31"))
               (rule "andLeft" (formula "28"))
               (rule "andLeft" (formula "32"))
               (rule "andLeft" (formula "28"))
               (rule "andLeft" (formula "33"))
               (rule "andLeft" (formula "28"))
               (rule "andLeft" (formula "34"))
               (rule "andLeft" (formula "28"))
               (rule "andLeft" (formula "35"))
               (rule "andLeft" (formula "28"))
               (rule "andLeft" (formula "36"))
               (rule "andLeft" (formula "28"))
               (rule "andLeft" (formula "37"))
               (rule "andLeft" (formula "37"))
               (rule "andLeft" (formula "37"))
               (rule "andLeft" (formula "37"))
               (rule "andLeft" (formula "37"))
               (rule "andLeft" (formula "37"))
               (rule "andLeft" (formula "37"))
               (rule "andLeft" (formula "37"))
               (rule "andLeft" (formula "37"))
               (rule "andLeft" (formula "37"))
               (rule "andLeft" (formula "37"))
               (rule "andLeft" (formula "37"))
               (rule "andLeft" (formula "37"))
               (rule "andLeft" (formula "37"))
               (rule "andLeft" (formula "37"))
               (rule "andLeft" (formula "37"))
               (rule "andLeft" (formula "37"))
               (rule "andLeft" (formula "37"))
               (rule "andLeft" (formula "37"))
               (rule "andLeft" (formula "37"))
               (rule "translateJavaMulInt" (formula "31") (term "1"))
               (rule "mul_literals" (formula "31") (term "1"))
               (rule "translateJavaMulInt" (formula "30") (term "1"))
               (rule "mul_literals" (formula "30") (term "1"))
               (rule "disjointDefinition" (formula "64"))
                (builtin "One Step Simplification" (formula "64"))
               (rule "notLeft" (formula "64"))
               (rule "disjointDefinition" (formula "63"))
                (builtin "One Step Simplification" (formula "63"))
               (rule "notLeft" (formula "63"))
               (rule "disjointDefinition" (formula "62"))
                (builtin "One Step Simplification" (formula "62"))
               (rule "notLeft" (formula "62"))
               (rule "eqSymm" (formula "62"))
               (rule "disjointDefinition" (formula "61"))
                (builtin "One Step Simplification" (formula "61"))
               (rule "notLeft" (formula "61"))
               (rule "eqSymm" (formula "61"))
               (rule "disjointDefinition" (formula "60"))
                (builtin "One Step Simplification" (formula "60"))
               (rule "notLeft" (formula "60"))
               (rule "eqSymm" (formula "60"))
               (rule "disjointDefinition" (formula "59"))
                (builtin "One Step Simplification" (formula "59"))
               (rule "notLeft" (formula "59"))
               (rule "eqSymm" (formula "59"))
               (rule "disjointDefinition" (formula "58"))
                (builtin "One Step Simplification" (formula "58"))
               (rule "notLeft" (formula "58"))
               (rule "eqSymm" (formula "58"))
               (rule "disjointDefinition" (formula "57"))
                (builtin "One Step Simplification" (formula "57"))
               (rule "notLeft" (formula "57"))
               (rule "eqSymm" (formula "57"))
               (rule "disjointDefinition" (formula "56"))
                (builtin "One Step Simplification" (formula "56"))
               (rule "notLeft" (formula "56"))
               (rule "eqSymm" (formula "56"))
               (rule "disjointDefinition" (formula "55"))
                (builtin "One Step Simplification" (formula "55"))
               (rule "notLeft" (formula "55"))
               (rule "eqSymm" (formula "55"))
               (rule "disjointDefinition" (formula "54"))
                (builtin "One Step Simplification" (formula "54"))
               (rule "notLeft" (formula "54"))
               (rule "eqSymm" (formula "54"))
               (rule "disjointDefinition" (formula "53"))
                (builtin "One Step Simplification" (formula "53"))
               (rule "notLeft" (formula "53"))
               (rule "eqSymm" (formula "53"))
               (rule "disjointDefinition" (formula "52"))
                (builtin "One Step Simplification" (formula "52"))
               (rule "notLeft" (formula "52"))
               (rule "eqSymm" (formula "52"))
               (rule "disjointDefinition" (formula "51"))
                (builtin "One Step Simplification" (formula "51"))
               (rule "notLeft" (formula "51"))
               (rule "eqSymm" (formula "51"))
               (rule "disjointDefinition" (formula "50"))
                (builtin "One Step Simplification" (formula "50"))
               (rule "notLeft" (formula "50"))
               (rule "eqSymm" (formula "50"))
               (rule "disjointDefinition" (formula "49"))
                (builtin "One Step Simplification" (formula "49"))
               (rule "notLeft" (formula "49"))
               (rule "disjointDefinition" (formula "48"))
                (builtin "One Step Simplification" (formula "48"))
               (rule "notLeft" (formula "48"))
               (rule "eqSymm" (formula "48"))
               (rule "disjointDefinition" (formula "47"))
                (builtin "One Step Simplification" (formula "47"))
               (rule "notLeft" (formula "47"))
               (rule "eqSymm" (formula "47"))
               (rule "disjointDefinition" (formula "46"))
                (builtin "One Step Simplification" (formula "46"))
               (rule "notLeft" (formula "46"))
               (rule "disjointDefinition" (formula "45"))
                (builtin "One Step Simplification" (formula "45"))
               (rule "notLeft" (formula "45"))
               (rule "disjointDefinition" (formula "44"))
                (builtin "One Step Simplification" (formula "44"))
               (rule "notLeft" (formula "44"))
               (rule "disjointDefinition" (formula "43"))
                (builtin "One Step Simplification" (formula "43"))
               (rule "notLeft" (formula "43"))
               (rule "disjointDefinition" (formula "42"))
                (builtin "One Step Simplification" (formula "42"))
               (rule "notLeft" (formula "42"))
               (rule "disjointDefinition" (formula "41"))
                (builtin "One Step Simplification" (formula "41"))
               (rule "notLeft" (formula "41"))
               (rule "disjointDefinition" (formula "40"))
                (builtin "One Step Simplification" (formula "40"))
               (rule "notLeft" (formula "40"))
               (rule "disjointDefinition" (formula "39"))
                (builtin "One Step Simplification" (formula "39"))
               (rule "notLeft" (formula "39"))
               (rule "disjointDefinition" (formula "37"))
                (builtin "One Step Simplification" (formula "37"))
               (rule "notLeft" (formula "37"))
               (rule "disjointDefinition" (formula "37"))
                (builtin "One Step Simplification" (formula "37"))
               (rule "notLeft" (formula "37"))
               (rule "applyEq" (formula "26") (term "1,0") (ifseqformula "36"))
               (rule "applyEq" (formula "27") (term "1,0") (ifseqformula "36"))
               (rule "distributeIntersection" (formula "26") (term "0"))
               (rule "distributeIntersection" (formula "27") (term "0"))
               (rule "distributeIntersection" (formula "26") (term "1,0"))
               (rule "distributeIntersection" (formula "26") (term "0,0"))
               (rule "unionEqualsEmpty" (formula "27"))
               (rule "andLeft" (formula "27"))
               (rule "distributeIntersection" (formula "26") (term "1,1,0"))
               (rule "distributeIntersection" (formula "26") (term "0,1,0"))
               (rule "distributeIntersection" (formula "26") (term "0,0,0"))
               (rule "distributeIntersection" (formula "26") (term "1,0,0"))
               (rule "distributeIntersection" (formula "27") (term "0"))
               (rule "distributeIntersection" (formula "28") (term "0"))
               (rule "unionEqualsEmpty" (formula "26"))
               (rule "andLeft" (formula "26"))
               (rule "distributeIntersection" (formula "28") (term "0,0"))
               (rule "distributeIntersection" (formula "28") (term "1,0"))
               (rule "distributeIntersection" (formula "29") (term "0,0"))
               (rule "distributeIntersection" (formula "29") (term "1,0"))
               (rule "unionEqualsEmpty" (formula "26"))
               (rule "andLeft" (formula "26"))
               (rule "unionEqualsEmpty" (formula "28"))
               (rule "andLeft" (formula "28"))
               (rule "unionEqualsEmpty" (formula "30"))
               (rule "andLeft" (formula "30"))
               (rule "unionEqualsEmpty" (formula "32"))
               (rule "andLeft" (formula "32"))
               (rule "unionEqualsEmpty" (formula "26"))
                (builtin "One Step Simplification" (formula "26"))
               (rule "andLeft" (formula "26"))
               (rule "notLeft" (formula "27"))
               (rule "notLeft" (formula "26"))
               (rule "eqSymm" (formula "43"))
               (rule "eqSymm" (formula "42"))
               (rule "unionEqualsEmpty" (formula "26"))
                (builtin "One Step Simplification" (formula "26"))
               (rule "andLeft" (formula "26"))
               (rule "notLeft" (formula "26"))
               (rule "notLeft" (formula "26"))
               (rule "eqSymm" (formula "42"))
               (rule "eqSymm" (formula "41"))
               (rule "unionEqualsEmpty" (formula "26"))
                (builtin "One Step Simplification" (formula "26"))
               (rule "andLeft" (formula "26"))
               (rule "notLeft" (formula "26"))
               (rule "notLeft" (formula "26"))
               (rule "eqSymm" (formula "41"))
               (rule "eqSymm" (formula "40"))
               (rule "unionEqualsEmpty" (formula "26"))
                (builtin "One Step Simplification" (formula "26"))
               (rule "andLeft" (formula "26"))
               (rule "notLeft" (formula "27"))
               (rule "notLeft" (formula "26"))
               (rule "eqSymm" (formula "40"))
               (rule "eqSymm" (formula "39"))
               (rule "unionEqualsEmpty" (formula "26"))
                (builtin "One Step Simplification" (formula "26"))
               (rule "andLeft" (formula "26"))
               (rule "notLeft" (formula "27"))
               (rule "notLeft" (formula "26"))
               (rule "eqSymm" (formula "39"))
               (rule "eqSymm" (formula "38"))
               (rule "unionEqualsEmpty" (formula "26"))
                (builtin "One Step Simplification" (formula "26"))
               (rule "andLeft" (formula "26"))
               (rule "notLeft" (formula "27"))
               (rule "notLeft" (formula "26"))
               (rule "eqSymm" (formula "38"))
               (rule "eqSymm" (formula "37"))
               (rule "unionEqualsEmpty" (formula "26"))
                (builtin "One Step Simplification" (formula "26"))
               (rule "andLeft" (formula "26"))
               (rule "notLeft" (formula "26"))
               (rule "notLeft" (formula "26"))
               (rule "eqSymm" (formula "37"))
               (rule "eqSymm" (formula "36"))
               (rule "unionEqualsEmpty" (formula "26"))
                (builtin "One Step Simplification" (formula "26"))
               (rule "andLeft" (formula "26"))
               (rule "notLeft" (formula "27"))
               (rule "notLeft" (formula "26"))
               (rule "eqSymm" (formula "36"))
               (rule "eqSymm" (formula "35"))
               (rule "commuteUnion" (formula "34") (term "1,1,1"))
               (rule "commuteUnion_2" (formula "34") (term "0,1"))
               (rule "commuteUnion" (formula "34") (term "0,0,1"))
               (rule "commuteUnion_2" (formula "34") (term "0,1"))
               (rule "commuteUnion_2" (formula "34") (term "1"))
               (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "11"))
               (rule "andLeft" (formula "11"))
               (rule "andLeft" (formula "11"))
               (rule "notLeft" (formula "13"))
               (rule "notLeft" (formula "12"))
               (rule "andLeft" (formula "11"))
               (rule "notLeft" (formula "12"))
               (rule "andLeft" (formula "11"))
               (rule "andLeft" (formula "11"))
               (rule "notLeft" (formula "13"))
               (rule "andLeft" (formula "11"))
               (rule "notLeft" (formula "13"))
               (rule "andLeft" (formula "11"))
               (rule "notLeft" (formula "13"))
               (rule "notLeft" (formula "11"))
               (rule "notLeft" (formula "11"))
               (rule "Definition_axiom_for_isValidBucketStarts_in_de_wiesler_Functions" (formula "18") (term "0"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "andLeft" (formula "18"))
               (rule "andLeft" (formula "18"))
               (rule "andLeft" (formula "18"))
               (rule "translateJavaAddInt" (formula "20") (term "3,0"))
               (rule "translateJavaAddInt" (formula "19") (term "0"))
               (rule "polySimp_addComm0" (formula "20") (term "3,0"))
               (rule "polySimp_addComm0" (formula "19") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "18"))
               (rule "inEqSimp_commuteLeq" (formula "19"))
               (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "18"))
               (rule "leq_literals" (formula "9") (term "0"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "true_left" (formula "9"))
               (rule "nnf_notAnd" (formula "23") (term "0,0"))
               (rule "nnf_notAnd" (formula "25") (term "0,0,0,1"))
               (rule "nnf_imp2or" (formula "26") (term "0"))
               (rule "commute_and" (formula "92"))
               (rule "Definition_axiom_for_smallBucketIsSorted_in_de_wiesler_Sorter" (formula "24") (term "0,1,0"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "true_left" (formula "24"))
               (rule "nnf_notAnd" (formula "25") (term "0,0"))
               (rule "nnf_notAnd" (formula "23") (term "0,0,0"))
               (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0,0"))
               (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,0"))
               (rule "add_literals" (formula "23") (term "0,0,0,1,0,0,0"))
               (rule "add_zero_left" (formula "23") (term "0,0,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0,0"))
               (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0,0"))
               (rule "add_literals" (formula "23") (term "0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0,0"))
               (rule "mul_literals" (formula "23") (term "1,0,0,0,0"))
               (rule "nnf_notAnd" (formula "23") (term "1,0,0"))
               (rule "inEqSimp_notGeq" (formula "23") (term "1,1,0,0"))
               (rule "mul_literals" (formula "23") (term "1,0,0,1,1,0,0"))
               (rule "add_literals" (formula "23") (term "0,0,1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,1,0,0"))
               (rule "mul_literals" (formula "23") (term "1,1,1,0,0"))
               (rule "inEqSimp_notLeq" (formula "23") (term "0,1,0,0"))
               (rule "mul_literals" (formula "23") (term "1,0,0,0,1,0,0"))
               (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "0,1,0,0"))
               (rule "mul_literals" (formula "23") (term "1,0,1,0,0"))
               (rule "nnf_notAnd" (formula "25") (term "0,0,0"))
               (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,0"))
               (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,0"))
               (rule "add_literals" (formula "25") (term "0,0,0,1,0,0,0"))
               (rule "add_zero_left" (formula "25") (term "0,0,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0,0"))
               (rule "mul_literals" (formula "25") (term "1,0,0,0,0,0,0"))
               (rule "add_literals" (formula "25") (term "0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0,0"))
               (rule "mul_literals" (formula "25") (term "1,0,0,0,0"))
               (rule "nnf_notAnd" (formula "25") (term "1,0,0"))
               (rule "inEqSimp_notLeq" (formula "25") (term "0,1,0,0"))
               (rule "mul_literals" (formula "25") (term "1,0,0,0,1,0,0"))
               (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "0,1,0,0"))
               (rule "mul_literals" (formula "25") (term "1,0,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "25") (term "1,1,0,0"))
               (rule "mul_literals" (formula "25") (term "1,0,0,1,1,0,0"))
               (rule "add_literals" (formula "25") (term "0,0,1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,1,0,0"))
               (rule "mul_literals" (formula "25") (term "1,1,1,0,0"))
               (rule "nnf_notAnd" (formula "24") (term "0,0,0,0,1"))
               (rule "nnf_notAnd" (formula "24") (term "1,0,0,0,1"))
               (rule "inEqSimp_notGeq" (formula "24") (term "1,1,0,0,0,1"))
               (rule "mul_literals" (formula "24") (term "1,0,0,1,1,0,0,0,1"))
               (rule "add_literals" (formula "24") (term "0,0,1,1,0,0,0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,1,0,0,0,1"))
               (rule "mul_literals" (formula "24") (term "1,1,1,0,0,0,1"))
               (rule "inEqSimp_notLeq" (formula "24") (term "0,1,0,0,0,1"))
               (rule "mul_literals" (formula "24") (term "1,0,0,0,1,0,0,0,1"))
               (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,0,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "0,1,0,0,0,1"))
               (rule "mul_literals" (formula "24") (term "1,0,1,0,0,0,1"))
               (rule "nnf_notAnd" (formula "24") (term "0,0,0,0,0,1"))
               (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,0,0,0,1"))
               (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,0,0,0,1"))
               (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,0,0,0,1"))
               (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,0,0,0,1"))
               (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,0,0,0,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,0,0,0,1"))
               (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,0,0,0,1"))
               (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,0,0,0,1"))
               (rule "mul_literals" (formula "24") (term "0,1,1,0,0,0,0,0,1"))
               (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,0,0,0,1"))
               (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,0,0,0,1"))
               (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,0,0,0,1"))
               (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0,0,0,0,0,0,1"))
               (rule "mul_literals" (formula "24") (term "0,1,0,0,0,0,0,0,0,0,1"))
               (rule "polySimp_addAssoc" (formula "24") (term "0,0,0,0,0,0,0,0,1"))
               (rule "add_literals" (formula "24") (term "0,0,0,0,0,0,0,0,0,1"))
               (rule "add_zero_left" (formula "24") (term "0,0,0,0,0,0,0,0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,0,0,0,1"))
               (rule "polySimp_mulLiterals" (formula "24") (term "1,0,0,0,0,0,0,1"))
               (rule "polySimp_elimOne" (formula "24") (term "1,0,0,0,0,0,0,1"))
               (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "19") (term "0") (inst "i=i") (inst "j=j"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "expand_inInt" (formula "19") (term "1,0,0"))
               (rule "expand_inInt" (formula "19") (term "1,0,0,1,0"))
               (rule "replace_int_MAX" (formula "19") (term "1,0,1,0,0"))
               (rule "replace_int_MIN" (formula "19") (term "0,1,1,0,0"))
               (rule "replace_int_MIN" (formula "19") (term "0,1,1,0,0,1,0"))
               (rule "replace_int_MAX" (formula "19") (term "1,0,1,0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0,0,1,0"))
               (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0,0,1,0"))
               (rule "add_literals" (formula "19") (term "0,0,0,1,0,0,0,1,0"))
               (rule "add_zero_left" (formula "19") (term "0,0,1,0,0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0,0"))
               (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0,0"))
               (rule "add_literals" (formula "19") (term "0,0,0,1,0,0,0"))
               (rule "add_zero_left" (formula "19") (term "0,0,1,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "19") (term "1,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "19") (term "1,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "19") (term "1,1,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,0"))
               (rule "nnf_imp2or" (formula "19") (term "0"))
               (rule "nnf_notAnd" (formula "19") (term "0,0"))
               (rule "nnf_imp2or" (formula "19") (term "0,1,0"))
               (rule "nnf_notAnd" (formula "19") (term "1,0,0"))
               (rule "inEqSimp_notLeq" (formula "19") (term "0,1,0,0"))
               (rule "mul_literals" (formula "19") (term "1,0,0,0,1,0,0"))
               (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "0,1,0,0"))
               (rule "mul_literals" (formula "19") (term "1,0,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "19") (term "1,1,0,0"))
               (rule "mul_literals" (formula "19") (term "1,0,0,1,1,0,0"))
               (rule "add_literals" (formula "19") (term "0,0,1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,1,0,0"))
               (rule "mul_literals" (formula "19") (term "1,1,1,0,0"))
               (rule "nnf_notAnd" (formula "19") (term "0,0,0"))
               (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0,0"))
               (rule "mul_literals" (formula "19") (term "0,1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0,0"))
               (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0,0"))
               (rule "add_literals" (formula "19") (term "0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0,0"))
               (rule "mul_literals" (formula "19") (term "1,0,0,0,0"))
               (rule "nnf_notAnd" (formula "19") (term "0,0,1,0"))
               (rule "nnf_notAnd" (formula "19") (term "1,0,0,1,0"))
               (rule "inEqSimp_notGeq" (formula "19") (term "1,1,0,0,1,0"))
               (rule "mul_literals" (formula "19") (term "1,0,0,1,1,0,0,1,0"))
               (rule "add_literals" (formula "19") (term "0,0,1,1,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,1,0,0,1,0"))
               (rule "mul_literals" (formula "19") (term "1,1,1,0,0,1,0"))
               (rule "inEqSimp_notLeq" (formula "19") (term "0,1,0,0,1,0"))
               (rule "mul_literals" (formula "19") (term "1,0,0,0,1,0,0,1,0"))
               (rule "add_literals" (formula "19") (term "0,0,0,1,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "0,1,0,0,1,0"))
               (rule "mul_literals" (formula "19") (term "1,0,1,0,0,1,0"))
               (rule "nnf_notAnd" (formula "19") (term "0,0,0,1,0"))
               (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,0,0,1,0"))
               (rule "mul_literals" (formula "19") (term "0,1,0,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,0,0,1,0"))
               (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0,0,1,0"))
               (rule "mul_literals" (formula "19") (term "0,1,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0,0,1,0"))
               (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "22") (term "0,1,0") (inst "i=i"))
                (builtin "One Step Simplification" (formula "22"))
               (rule "expand_inInt" (formula "22") (term "1,0,0,1,0"))
               (rule "replace_int_MIN" (formula "22") (term "0,1,1,0,0,1,0"))
               (rule "replace_int_MAX" (formula "22") (term "1,0,1,0,0,1,0"))
               (rule "translateJavaAddInt" (formula "22") (term "0,2,1,1,0,1,0"))
               (rule "translateJavaSubInt" (formula "22") (term "1,1,0,0,0,1,0"))
               (rule "polySimp_elimSub" (formula "22") (term "1,1,0,0,0,1,0"))
               (rule "mul_literals" (formula "22") (term "1,1,1,0,0,0,1,0"))
               (rule "polySimp_addComm0" (formula "22") (term "0,2,1,1,0,1,0"))
               (rule "polySimp_addComm1" (formula "22") (term "1,1,0,0,0,1,0"))
               (rule "polySimp_addComm0" (formula "22") (term "0,1,1,0,0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "22") (term "0,1,0,0,1,0,0,0,1,0"))
               (rule "mul_literals" (formula "22") (term "0,0,1,0,0,1,0,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "22") (term "0,0,0,1,0,0,0,1,0"))
               (rule "add_literals" (formula "22") (term "0,0,0,0,1,0,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "22") (term "1,1,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "22") (term "1,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "22") (term "0,1,1,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "22") (term "1,0,1,1,0,0,0,1,0"))
               (rule "mul_literals" (formula "22") (term "0,0,1,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "22") (term "1,0,1,1,0,0,0,1,0"))
               (rule "nnf_imp2or" (formula "22") (term "0,1,0"))
               (rule "nnf_notAnd" (formula "22") (term "0,0,1,0"))
               (rule "Definition_axiom_for_isEqualityBucket_in_de_wiesler_Sorter" (formula "24") (term "0,1,0,0,1") (inst "i=i"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "expand_inInt" (formula "24") (term "1,0,0,1,0,0,1"))
               (rule "replace_int_MIN" (formula "24") (term "0,1,1,0,0,1,0,0,1"))
               (rule "replace_int_MAX" (formula "24") (term "1,0,1,0,0,1,0,0,1"))
               (rule "translateJavaAddInt" (formula "24") (term "0,2,1,1,0,1,0,0,1"))
               (rule "translateJavaSubInt" (formula "24") (term "1,1,0,0,0,1,0,0,1"))
               (rule "eqSymm" (formula "24") (term "1,0,1,0,0,1"))
               (rule "polySimp_elimSub" (formula "24") (term "1,1,0,0,0,1,0,0,1"))
               (rule "mul_literals" (formula "24") (term "1,1,1,0,0,0,1,0,0,1"))
               (rule "polySimp_addComm0" (formula "24") (term "0,2,0,1,0,1,0,0,1"))
               (rule "polySimp_addComm1" (formula "24") (term "1,1,0,0,0,1,0,0,1"))
               (rule "polySimp_addComm0" (formula "24") (term "0,1,1,0,0,0,1,0,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,0,1,0,0,1"))
               (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,0,1,0,0,1"))
               (rule "polySimp_rightDist" (formula "24") (term "0,1,0,0,1,0,0,0,1,0,0,1"))
               (rule "mul_literals" (formula "24") (term "0,0,1,0,0,1,0,0,0,1,0,0,1"))
               (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,0,1,0,0,1"))
               (rule "polySimp_addAssoc" (formula "24") (term "0,0,0,1,0,0,0,1,0,0,1"))
               (rule "add_literals" (formula "24") (term "0,0,0,0,1,0,0,0,1,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,0,1,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "24") (term "1,1,0,0,1,0,0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,0,1,0,0,1"))
               (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,0,1,0,0,1"))
               (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,0,1,0,0,1"))
               (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,0,1,0,0,1"))
               (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,0,1,0,0,1"))
               (rule "polySimp_rightDist" (formula "24") (term "0,1,1,0,0,0,1,0,0,1"))
               (rule "polySimp_mulLiterals" (formula "24") (term "1,0,1,1,0,0,0,1,0,0,1"))
               (rule "mul_literals" (formula "24") (term "0,0,1,1,0,0,0,1,0,0,1"))
               (rule "polySimp_elimOne" (formula "24") (term "1,0,1,1,0,0,0,1,0,0,1"))
               (rule "Definition_axiom_for_isBucketPartitioned_in_de_wiesler_Sorter" (formula "23") (term "0,1,0") (inst "i=i") (inst "j=j"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "expand_inInt" (formula "23") (term "1,0,0,1,0"))
               (rule "expand_inInt" (formula "23") (term "1,0,0,1,0,1,0"))
               (rule "replace_int_MIN" (formula "23") (term "0,1,1,0,0,1,0"))
               (rule "replace_int_MAX" (formula "23") (term "1,0,1,0,0,1,0"))
               (rule "replace_int_MIN" (formula "23") (term "0,1,1,0,0,1,0,1,0"))
               (rule "replace_int_MAX" (formula "23") (term "1,0,1,0,0,1,0,1,0"))
               (rule "translateJavaAddInt" (formula "23") (term "0,0,0,0,0,1,0"))
               (rule "translateJavaAddInt" (formula "23") (term "1,1,0,0,0,1,0"))
               (rule "translateJavaAddInt" (formula "23") (term "0,0,0,0,0,1,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,0,1,0,1,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,0,1,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,1,0,1,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,1,0,1,0"))
               (rule "polySimp_addComm1" (formula "23") (term "0,1,0,1,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "0,1,0,0,1,0,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "23") (term "1,1,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "23") (term "1,1,0,0,1,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,0,1,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,0,1,0,1,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,0,1,0,1,0"))
               (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,0,1,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,0,1,0,1,0"))
               (rule "mul_literals" (formula "23") (term "0,1,1,0,0,0,1,0,1,0"))
               (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,0,1,0,1,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "1,0,1,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "23") (term "0,1,0,1,0,1,0"))
               (rule "polySimp_elimOne" (formula "23") (term "0,1,0,1,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "23") (term "0,1,1,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,1,0,0,0,1,0"))
               (rule "mul_literals" (formula "23") (term "0,0,1,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "23") (term "1,0,1,1,0,0,0,1,0"))
               (rule "nnf_notAnd" (formula "22") (term "0,0,0,1,0"))
               (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0,0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "22") (term "0,1,0,0,0,0,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "22") (term "0,0,0,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "22") (term "0,1,0,0,0,0,1,0"))
               (rule "mul_literals" (formula "22") (term "0,0,1,0,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "22") (term "1,0,1,0,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "22") (term "1,0,1,0,0,0,0,1,0"))
               (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "22") (term "0,1,0,0,1,0,0,0,1,0"))
               (rule "mul_literals" (formula "22") (term "0,0,1,0,0,1,0,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "22") (term "0,0,0,1,0,0,0,1,0"))
               (rule "add_literals" (formula "22") (term "0,0,0,0,1,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "22") (term "0,1,1,0,0,0,1,0"))
               (rule "mul_literals" (formula "22") (term "0,0,1,1,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "22") (term "1,0,1,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "22") (term "1,0,1,1,0,0,0,1,0"))
               (rule "nnf_notAnd" (formula "22") (term "1,0,0,1,0"))
               (rule "inEqSimp_notGeq" (formula "22") (term "1,1,0,0,1,0"))
               (rule "mul_literals" (formula "22") (term "1,0,0,1,1,0,0,1,0"))
               (rule "add_literals" (formula "22") (term "0,0,1,1,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,1,0,0,1,0"))
               (rule "mul_literals" (formula "22") (term "1,1,1,0,0,1,0"))
               (rule "inEqSimp_notLeq" (formula "22") (term "0,1,0,0,1,0"))
               (rule "mul_literals" (formula "22") (term "1,0,0,0,1,0,0,1,0"))
               (rule "add_literals" (formula "22") (term "0,0,0,1,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "0,1,0,0,1,0"))
               (rule "mul_literals" (formula "22") (term "1,0,1,0,0,1,0"))
               (rule "nnf_imp2or" (formula "24") (term "0,1,0,0,1"))
               (rule "nnf_imp2or" (formula "23") (term "0,1,0"))
               (rule "commute_or_2" (formula "25") (term "0,0"))
               (rule "nnf_notAnd" (formula "23") (term "0,0,1,0"))
               (rule "nnf_imp2or" (formula "23") (term "0,1,0,1,0"))
               (rule "nnf_notAnd" (formula "23") (term "0,0,0,1,0"))
               (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0,0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "0,1,0,0,0,0,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "23") (term "0,1,0,0,0,0,1,0"))
               (rule "mul_literals" (formula "23") (term "0,0,1,0,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,0,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "23") (term "1,0,1,0,0,0,0,1,0"))
               (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "23") (term "0,1,0,0,1,0,0,0,1,0"))
               (rule "mul_literals" (formula "23") (term "0,0,1,0,0,1,0,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,1,0,0,0,1,0"))
               (rule "add_literals" (formula "23") (term "0,0,0,0,1,0,0,0,1,0"))
               (rule "add_zero_left" (formula "23") (term "0,0,0,1,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,0,1,0"))
               (rule "polySimp_mulAssoc" (formula "23") (term "0,1,1,0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "0,0,1,1,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "23") (term "0,1,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "23") (term "0,1,1,0,0,0,1,0"))
               (rule "nnf_notAnd" (formula "23") (term "1,0,0,1,0"))
               (rule "inEqSimp_notGeq" (formula "23") (term "1,1,0,0,1,0"))
               (rule "mul_literals" (formula "23") (term "1,0,0,1,1,0,0,1,0"))
               (rule "add_literals" (formula "23") (term "0,0,1,1,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,1,0,0,1,0"))
               (rule "mul_literals" (formula "23") (term "1,1,1,0,0,1,0"))
               (rule "inEqSimp_notLeq" (formula "23") (term "0,1,0,0,1,0"))
               (rule "mul_literals" (formula "23") (term "1,0,0,0,1,0,0,1,0"))
               (rule "add_literals" (formula "23") (term "0,0,0,1,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "0,1,0,0,1,0"))
               (rule "mul_literals" (formula "23") (term "1,0,1,0,0,1,0"))
               (rule "nnf_notAnd" (formula "24") (term "0,0,1,0,0,1"))
               (rule "nnf_notAnd" (formula "23") (term "0,0,1,0,1,0"))
               (rule "associativeLawUnion" (formula "34") (term "0,1"))
               (rule "commute_or_2" (formula "19") (term "0,0"))
               (rule "nnf_notAnd" (formula "24") (term "1,0,0,1,0,0,1"))
               (rule "inEqSimp_notGeq" (formula "24") (term "1,1,0,0,1,0,0,1"))
               (rule "mul_literals" (formula "24") (term "1,0,0,1,1,0,0,1,0,0,1"))
               (rule "add_literals" (formula "24") (term "0,0,1,1,0,0,1,0,0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,1,0,0,1,0,0,1"))
               (rule "mul_literals" (formula "24") (term "1,1,1,0,0,1,0,0,1"))
               (rule "inEqSimp_notLeq" (formula "24") (term "0,1,0,0,1,0,0,1"))
               (rule "mul_literals" (formula "24") (term "1,0,0,0,1,0,0,1,0,0,1"))
               (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,1,0,0,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "0,1,0,0,1,0,0,1"))
               (rule "mul_literals" (formula "24") (term "1,0,1,0,0,1,0,0,1"))
               (rule "nnf_notAnd" (formula "24") (term "0,0,0,1,0,0,1"))
               (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,0,1,0,0,1"))
               (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,0,1,0,0,1"))
               (rule "polySimp_rightDist" (formula "24") (term "0,1,0,0,1,0,0,0,1,0,0,1"))
               (rule "mul_literals" (formula "24") (term "0,0,1,0,0,1,0,0,0,1,0,0,1"))
               (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,0,1,0,0,1"))
               (rule "polySimp_addAssoc" (formula "24") (term "0,0,0,1,0,0,0,1,0,0,1"))
               (rule "add_literals" (formula "24") (term "0,0,0,0,1,0,0,0,1,0,0,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,0,1,0,0,1"))
               (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,0,1,0,0,1"))
               (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,0,1,0,0,1"))
               (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,0,1,0,0,1"))
               (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,0,1,0,0,1"))
               (rule "polySimp_rightDist" (formula "24") (term "0,1,1,0,0,0,1,0,0,1"))
               (rule "polySimp_mulLiterals" (formula "24") (term "1,0,1,1,0,0,0,1,0,0,1"))
               (rule "mul_literals" (formula "24") (term "0,0,1,1,0,0,0,1,0,0,1"))
               (rule "polySimp_elimOne" (formula "24") (term "1,0,1,1,0,0,0,1,0,0,1"))
               (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,0,1,0,0,1"))
               (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0,0,0,0,1,0,0,1"))
               (rule "polySimp_mulComm0" (formula "24") (term "0,1,0,0,0,0,0,0,1,0,0,1"))
               (rule "polySimp_addAssoc" (formula "24") (term "0,0,0,0,0,0,1,0,0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,0,1,0,0,1"))
               (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0,1,0,0,1"))
               (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0,0,1,0,0,1"))
               (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0,0,1,0,0,1"))
               (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0,0,1,0,0,1"))
               (rule "polySimp_rightDist" (formula "24") (term "0,1,0,0,0,0,1,0,0,1"))
               (rule "mul_literals" (formula "24") (term "0,0,1,0,0,0,0,1,0,0,1"))
               (rule "polySimp_mulLiterals" (formula "24") (term "1,0,1,0,0,0,0,1,0,0,1"))
               (rule "polySimp_elimOne" (formula "24") (term "1,0,1,0,0,0,0,1,0,0,1"))
               (rule "nnf_notAnd" (formula "23") (term "0,0,0,1,0,1,0"))
               (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0,0,1,0,1,0"))
               (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0,0,1,0,1,0"))
               (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0,0,1,0,1,0"))
               (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,0,1,0,1,0"))
               (rule "add_literals" (formula "23") (term "0,0,0,1,0,0,0,1,0,1,0"))
               (rule "add_zero_left" (formula "23") (term "0,0,1,0,0,0,1,0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0,0,1,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,0,1,0,1,0"))
               (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0,0,1,0,1,0"))
               (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0,0,1,0,1,0"))
               (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0,0,0,0,1,0,1,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "0,1,0,0,0,0,0,0,1,0,1,0"))
               (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,0,0,0,1,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0,0,1,0,1,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0,1,0,1,0"))
               (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0,0,1,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,0,0,1,0,1,0"))
               (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0,0,0,1,0,1,0"))
               (rule "polySimp_rightDist" (formula "23") (term "0,1,0,0,0,0,1,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,0,0,0,0,1,0,1,0"))
               (rule "mul_literals" (formula "23") (term "0,0,1,0,0,0,0,1,0,1,0"))
               (rule "polySimp_elimOne" (formula "23") (term "1,0,1,0,0,0,0,1,0,1,0"))
               (rule "nnf_notAnd" (formula "23") (term "1,0,0,1,0,1,0"))
               (rule "inEqSimp_notGeq" (formula "23") (term "1,1,0,0,1,0,1,0"))
               (rule "mul_literals" (formula "23") (term "1,0,0,1,1,0,0,1,0,1,0"))
               (rule "add_literals" (formula "23") (term "0,0,1,1,0,0,1,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,1,0,0,1,0,1,0"))
               (rule "mul_literals" (formula "23") (term "1,1,1,0,0,1,0,1,0"))
               (rule "inEqSimp_notLeq" (formula "23") (term "0,1,0,0,1,0,1,0"))
               (rule "mul_literals" (formula "23") (term "1,0,0,0,1,0,0,1,0,1,0"))
               (rule "add_literals" (formula "23") (term "0,0,0,1,0,0,1,0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "0,1,0,0,1,0,1,0"))
               (rule "mul_literals" (formula "23") (term "1,0,1,0,0,1,0,1,0"))
               (rule "commute_or_2" (formula "22") (term "0,0"))
               (rule "commute_or" (formula "24") (term "1,1"))
               (rule "commute_or_2" (formula "19") (term "0,0,1,0"))
               (rule "commute_or_2" (formula "23") (term "0,0"))
               (rule "commute_or_2" (formula "24") (term "0,0,0,1"))
               (rule "arrayLengthNotNegative" (formula "31") (term "0"))
               (rule "applyEq" (formula "31") (term "0") (ifseqformula "32"))
               (rule "qeq_literals" (formula "31"))
               (rule "true_left" (formula "31"))
               (rule "arrayLengthNotNegative" (formula "18") (term "0"))
               (rule "arrayLengthNotNegative" (formula "29") (term "0"))
               (rule "applyEq" (formula "29") (term "0") (ifseqformula "30"))
               (rule "qeq_literals" (formula "29"))
               (rule "true_left" (formula "29"))
               (rule "arrayLengthNotNegative" (formula "34") (term "0"))
               (rule "applyEq" (formula "34") (term "0") (ifseqformula "35"))
               (rule "qeq_literals" (formula "34"))
               (rule "true_left" (formula "34"))
               (rule "arrayLengthIsAShort" (formula "28") (term "0"))
               (rule "expand_inShort" (formula "28"))
               (rule "replace_short_MAX" (formula "28") (term "1,0"))
               (rule "replace_short_MIN" (formula "28") (term "0,1"))
               (rule "andLeft" (formula "28"))
               (rule "inEqSimp_commuteLeq" (formula "29"))
               (rule "applyEq" (formula "29") (term "0") (ifseqformula "30"))
               (rule "qeq_literals" (formula "29"))
               (rule "true_left" (formula "29"))
               (rule "applyEq" (formula "28") (term "0") (ifseqformula "29"))
               (rule "leq_literals" (formula "28"))
               (rule "true_left" (formula "28"))
               (rule "arrayLengthNotNegative" (formula "12") (term "0"))
               (rule "arrayLengthIsAShort" (formula "28") (term "0"))
               (rule "expand_inShort" (formula "28"))
               (rule "replace_short_MAX" (formula "28") (term "1,0"))
               (rule "replace_short_MIN" (formula "28") (term "0,1"))
               (rule "andLeft" (formula "28"))
               (rule "inEqSimp_commuteLeq" (formula "29"))
               (rule "applyEq" (formula "29") (term "0") (ifseqformula "30"))
               (rule "qeq_literals" (formula "29"))
               (rule "true_left" (formula "29"))
               (rule "applyEq" (formula "28") (term "0") (ifseqformula "29"))
               (rule "leq_literals" (formula "28"))
               (rule "true_left" (formula "28"))
               (rule "arrayLengthNotNegative" (formula "31") (term "0"))
               (rule "applyEq" (formula "31") (term "0") (ifseqformula "32"))
               (rule "qeq_literals" (formula "31"))
               (rule "true_left" (formula "31"))
               (rule "cut_direct" (formula "93") (term "1"))
               (branch "CUT: bucket_starts[1 + bucket] <= 2147483647 + begin * -1 TRUE"
                   (builtin "One Step Simplification" (formula "94"))
                  (rule "inEqSimp_geqRight" (formula "94"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "mul_literals" (formula "1") (term "0,1"))
                  (rule "inEqSimp_subsumption0" (formula "2") (ifseqformula "1"))
                  (rule "inEqSimp_homoInEq0" (formula "2") (term "0"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "2") (term "1,0,0"))
                  (rule "mul_literals" (formula "2") (term "0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "2") (term "0,0,0"))
                  (rule "add_literals" (formula "2") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor2b" (formula "2") (term "0,0"))
                  (rule "add_literals" (formula "2") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "2") (term "1,0,0"))
                  (rule "add_zero_right" (formula "2") (term "0,0"))
                  (rule "qeq_literals" (formula "2") (term "0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "arrayLengthIsAShort" (formula "14") (term "0"))
                  (rule "expand_inShort" (formula "14"))
                  (rule "replace_short_MAX" (formula "14") (term "1,0"))
                  (rule "replace_short_MIN" (formula "14") (term "0,1"))
                  (rule "andLeft" (formula "14"))
                  (rule "inEqSimp_commuteLeq" (formula "15"))
                  (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "13"))
                  (rule "leq_literals" (formula "15") (term "0"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "true_left" (formula "15"))
                  (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "14"))
                  (rule "polySimp_mulComm0" (formula "15") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "15") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "15"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                  (rule "polySimp_elimOne" (formula "15") (term "0"))
                  (rule "inEqSimp_subsumption0" (formula "5") (ifseqformula "15"))
                  (rule "leq_literals" (formula "5") (term "0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "14"))
                  (rule "polySimp_mulComm0" (formula "11") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "11") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "11"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                  (rule "polySimp_elimOne" (formula "11") (term "0"))
                  (rule "inEqSimp_subsumption0" (formula "4") (ifseqformula "11"))
                  (rule "leq_literals" (formula "4") (term "0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "arrayLengthIsAShort" (formula "37") (term "0"))
                  (rule "expand_inShort" (formula "37"))
                  (rule "replace_short_MAX" (formula "37") (term "1,0"))
                  (rule "replace_short_MIN" (formula "37") (term "0,1"))
                  (rule "andLeft" (formula "37"))
                  (rule "inEqSimp_commuteLeq" (formula "38"))
                  (rule "applyEq" (formula "37") (term "0") (ifseqformula "39"))
                  (rule "leq_literals" (formula "37"))
                  (rule "true_left" (formula "37"))
                  (rule "applyEq" (formula "37") (term "0") (ifseqformula "38"))
                  (rule "qeq_literals" (formula "37"))
                  (rule "true_left" (formula "37"))
                  (rule "arrayLengthIsAShort" (formula "35") (term "0"))
                  (rule "expand_inShort" (formula "35"))
                  (rule "replace_short_MAX" (formula "35") (term "1,0"))
                  (rule "replace_short_MIN" (formula "35") (term "0,1"))
                  (rule "andLeft" (formula "35"))
                  (rule "inEqSimp_commuteLeq" (formula "36"))
                  (rule "applyEq" (formula "35") (term "0") (ifseqformula "37"))
                  (rule "leq_literals" (formula "35"))
                  (rule "true_left" (formula "35"))
                  (rule "applyEq" (formula "35") (term "0") (ifseqformula "36"))
                  (rule "qeq_literals" (formula "35"))
                  (rule "true_left" (formula "35"))
                  (rule "arrayLengthIsAShort" (formula "34") (term "0"))
                  (rule "expand_inShort" (formula "34"))
                  (rule "replace_short_MIN" (formula "34") (term "0,1"))
                  (rule "replace_short_MAX" (formula "34") (term "1,0"))
                  (rule "andLeft" (formula "34"))
                  (rule "inEqSimp_commuteLeq" (formula "35"))
                  (rule "applyEq" (formula "35") (term "0") (ifseqformula "36"))
                  (rule "qeq_literals" (formula "35"))
                  (rule "true_left" (formula "35"))
                  (rule "applyEq" (formula "34") (term "0") (ifseqformula "35"))
                  (rule "leq_literals" (formula "34"))
                  (rule "true_left" (formula "34"))
                  (rule "arrayLengthIsAShort" (formula "22") (term "0"))
                  (rule "expand_inShort" (formula "22"))
                  (rule "replace_short_MIN" (formula "22") (term "0,1"))
                  (rule "replace_short_MAX" (formula "22") (term "1,0"))
                  (rule "andLeft" (formula "22"))
                  (rule "inEqSimp_commuteLeq" (formula "23"))
                  (rule "inEqSimp_subsumption1" (formula "23") (ifseqformula "21"))
                  (rule "leq_literals" (formula "23") (term "0"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "true_left" (formula "23"))
                  (rule "inEqSimp_exactShadow3" (formula "23") (ifseqformula "22"))
                  (rule "polySimp_rightDist" (formula "23") (term "0,0"))
                  (rule "mul_literals" (formula "23") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "23") (term "0"))
                  (rule "add_literals" (formula "23") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "23"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "0"))
                  (rule "polySimp_elimOne" (formula "23") (term "0"))
                  (rule "inEqSimp_subsumption0" (formula "7") (ifseqformula "23"))
                  (rule "leq_literals" (formula "7") (term "0"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "true_left" (formula "7"))
                  (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "22"))
                  (rule "polySimp_rightDist" (formula "18") (term "0,0"))
                  (rule "mul_literals" (formula "18") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "18") (term "0"))
                  (rule "add_literals" (formula "18") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "18"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "0"))
                  (rule "polySimp_elimOne" (formula "18") (term "0"))
                  (rule "inEqSimp_subsumption0" (formula "17") (ifseqformula "18"))
                  (rule "leq_literals" (formula "17") (term "0"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "true_left" (formula "17"))
                  (rule "arrayLengthNotNegative" (formula "31") (term "0"))
                  (rule "applyEq" (formula "31") (term "0") (ifseqformula "32"))
                  (rule "qeq_literals" (formula "31"))
                  (rule "true_left" (formula "31"))
                  (rule "arrayLengthNotNegative" (formula "32") (term "0"))
                  (rule "applyEq" (formula "32") (term "0") (ifseqformula "33"))
                  (rule "qeq_literals" (formula "32"))
                  (rule "true_left" (formula "32"))
                  (rule "arrayLengthNotNegative" (formula "37") (term "0"))
                  (rule "applyEq" (formula "37") (term "0") (ifseqformula "38"))
                  (rule "qeq_literals" (formula "37"))
                  (rule "true_left" (formula "37"))
                  (rule "arrayLengthNotNegative" (formula "35") (term "0"))
                  (rule "applyEq" (formula "35") (term "0") (ifseqformula "36"))
                  (rule "qeq_literals" (formula "35"))
                  (rule "true_left" (formula "35"))
                  (rule "arrayLengthIsAShort" (formula "37") (term "0"))
                  (rule "expand_inShort" (formula "37"))
                  (rule "replace_short_MIN" (formula "37") (term "0,1"))
                  (rule "replace_short_MAX" (formula "37") (term "1,0"))
                  (rule "andLeft" (formula "37"))
                  (rule "inEqSimp_commuteLeq" (formula "38"))
                  (rule "applyEq" (formula "37") (term "0") (ifseqformula "39"))
                  (rule "leq_literals" (formula "37"))
                  (rule "true_left" (formula "37"))
                  (rule "applyEq" (formula "37") (term "0") (ifseqformula "38"))
                  (rule "qeq_literals" (formula "37"))
                  (rule "true_left" (formula "37"))
                  (rule "arrayLengthIsAShort" (formula "33") (term "0"))
                  (rule "expand_inShort" (formula "33"))
                  (rule "replace_short_MIN" (formula "33") (term "0,1"))
                  (rule "replace_short_MAX" (formula "33") (term "1,0"))
                  (rule "andLeft" (formula "33"))
                  (rule "inEqSimp_commuteLeq" (formula "34"))
                  (rule "applyEq" (formula "33") (term "0") (ifseqformula "35"))
                  (rule "leq_literals" (formula "33"))
                  (rule "true_left" (formula "33"))
                  (rule "applyEq" (formula "33") (term "0") (ifseqformula "34"))
                  (rule "qeq_literals" (formula "33"))
                  (rule "true_left" (formula "33"))
                  (rule "arrayLengthIsAShort" (formula "34") (term "0"))
                  (rule "expand_inShort" (formula "34"))
                  (rule "replace_short_MAX" (formula "34") (term "1,0"))
                  (rule "replace_short_MIN" (formula "34") (term "0,1"))
                  (rule "andLeft" (formula "34"))
                  (rule "inEqSimp_commuteLeq" (formula "35"))
                  (rule "applyEq" (formula "34") (term "0") (ifseqformula "36"))
                  (rule "leq_literals" (formula "34"))
                  (rule "closeFalse" (formula "34"))
               )
               (branch "CUT: bucket_starts[1 + bucket] <= 2147483647 + begin * -1 FALSE"
                   (builtin "One Step Simplification" (formula "94"))
                  (rule "false_right" (formula "94"))
                  (rule "inEqSimp_leqRight" (formula "93"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "mul_literals" (formula "1") (term "0,1"))
                  (rule "arrayLengthIsAShort" (formula "14") (term "0"))
                  (rule "expand_inShort" (formula "14"))
                  (rule "replace_short_MIN" (formula "14") (term "0,1"))
                  (rule "replace_short_MAX" (formula "14") (term "1,0"))
                  (rule "andLeft" (formula "14"))
                  (rule "inEqSimp_commuteLeq" (formula "15"))
                  (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "13"))
                  (rule "leq_literals" (formula "15") (term "0"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "true_left" (formula "15"))
                  (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "14"))
                  (rule "polySimp_mulComm0" (formula "15") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "15") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "15"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                  (rule "polySimp_elimOne" (formula "15") (term "0"))
                  (rule "inEqSimp_subsumption0" (formula "5") (ifseqformula "15"))
                  (rule "leq_literals" (formula "5") (term "0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "14"))
                  (rule "polySimp_mulComm0" (formula "11") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "11") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "11"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                  (rule "polySimp_elimOne" (formula "11") (term "0"))
                  (rule "inEqSimp_subsumption0" (formula "4") (ifseqformula "11"))
                  (rule "leq_literals" (formula "4") (term "0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "arrayLengthIsAShort" (formula "37") (term "0"))
                  (rule "expand_inShort" (formula "37"))
                  (rule "replace_short_MAX" (formula "37") (term "1,0"))
                  (rule "replace_short_MIN" (formula "37") (term "0,1"))
                  (rule "andLeft" (formula "37"))
                  (rule "inEqSimp_commuteLeq" (formula "38"))
                  (rule "applyEq" (formula "37") (term "0") (ifseqformula "39"))
                  (rule "leq_literals" (formula "37"))
                  (rule "true_left" (formula "37"))
                  (rule "applyEq" (formula "37") (term "0") (ifseqformula "38"))
                  (rule "qeq_literals" (formula "37"))
                  (rule "true_left" (formula "37"))
                  (rule "arrayLengthIsAShort" (formula "35") (term "0"))
                  (rule "expand_inShort" (formula "35"))
                  (rule "replace_short_MAX" (formula "35") (term "1,0"))
                  (rule "replace_short_MIN" (formula "35") (term "0,1"))
                  (rule "andLeft" (formula "35"))
                  (rule "inEqSimp_commuteLeq" (formula "36"))
                  (rule "applyEq" (formula "35") (term "0") (ifseqformula "37"))
                  (rule "leq_literals" (formula "35"))
                  (rule "true_left" (formula "35"))
                  (rule "applyEq" (formula "35") (term "0") (ifseqformula "36"))
                  (rule "qeq_literals" (formula "35"))
                  (rule "true_left" (formula "35"))
                  (rule "arrayLengthIsAShort" (formula "34") (term "0"))
                  (rule "expand_inShort" (formula "34"))
                  (rule "replace_short_MIN" (formula "34") (term "0,1"))
                  (rule "replace_short_MAX" (formula "34") (term "1,0"))
                  (rule "andLeft" (formula "34"))
                  (rule "inEqSimp_commuteLeq" (formula "35"))
                  (rule "applyEq" (formula "35") (term "0") (ifseqformula "36"))
                  (rule "qeq_literals" (formula "35"))
                  (rule "true_left" (formula "35"))
                  (rule "applyEq" (formula "34") (term "0") (ifseqformula "35"))
                  (rule "leq_literals" (formula "34"))
                  (rule "true_left" (formula "34"))
                  (rule "arrayLengthNotNegative" (formula "30") (term "0"))
                  (rule "applyEq" (formula "30") (term "0") (ifseqformula "31"))
                  (rule "qeq_literals" (formula "30"))
                  (rule "true_left" (formula "30"))
                  (rule "arrayLengthNotNegative" (formula "31") (term "0"))
                  (rule "applyEq" (formula "31") (term "0") (ifseqformula "32"))
                  (rule "qeq_literals" (formula "31"))
                  (rule "true_left" (formula "31"))
                  (rule "arrayLengthIsAShort" (formula "22") (term "0"))
                  (rule "expand_inShort" (formula "22"))
                  (rule "replace_short_MIN" (formula "22") (term "0,1"))
                  (rule "replace_short_MAX" (formula "22") (term "1,0"))
                  (rule "andLeft" (formula "22"))
                  (rule "inEqSimp_commuteLeq" (formula "23"))
                  (rule "inEqSimp_subsumption1" (formula "23") (ifseqformula "21"))
                  (rule "leq_literals" (formula "23") (term "0"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "true_left" (formula "23"))
                  (rule "inEqSimp_exactShadow3" (formula "23") (ifseqformula "22"))
                  (rule "polySimp_rightDist" (formula "23") (term "0,0"))
                  (rule "mul_literals" (formula "23") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "23") (term "0"))
                  (rule "add_literals" (formula "23") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "23"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "0"))
                  (rule "polySimp_elimOne" (formula "23") (term "0"))
                  (rule "inEqSimp_subsumption0" (formula "7") (ifseqformula "23"))
                  (rule "leq_literals" (formula "7") (term "0"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "true_left" (formula "7"))
                  (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "22"))
                  (rule "polySimp_rightDist" (formula "18") (term "0,0"))
                  (rule "mul_literals" (formula "18") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "18") (term "0"))
                  (rule "add_literals" (formula "18") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "18"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "0"))
                  (rule "polySimp_elimOne" (formula "18") (term "0"))
                  (rule "inEqSimp_subsumption0" (formula "17") (ifseqformula "18"))
                  (rule "leq_literals" (formula "17") (term "0"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "true_left" (formula "17"))
                  (rule "arrayLengthNotNegative" (formula "37") (term "0"))
                  (rule "applyEq" (formula "37") (term "0") (ifseqformula "38"))
                  (rule "qeq_literals" (formula "37"))
                  (rule "true_left" (formula "37"))
                  (rule "arrayLengthNotNegative" (formula "35") (term "0"))
                  (rule "applyEq" (formula "35") (term "0") (ifseqformula "36"))
                  (rule "qeq_literals" (formula "35"))
                  (rule "true_left" (formula "35"))
                  (rule "arrayLengthIsAShort" (formula "34") (term "0"))
                  (rule "expand_inShort" (formula "34"))
                  (rule "replace_short_MAX" (formula "34") (term "1,0"))
                  (rule "replace_short_MIN" (formula "34") (term "0,1"))
                  (rule "andLeft" (formula "34"))
                  (rule "inEqSimp_commuteLeq" (formula "35"))
                  (rule "applyEq" (formula "34") (term "0") (ifseqformula "36"))
                  (rule "leq_literals" (formula "34"))
                  (rule "closeFalse" (formula "34"))
               )
            )
            (branch "Usage"
                (builtin "One Step Simplification" (formula "35"))
               (rule "translateJavaAddInt" (formula "35") (term "0,1,0"))
                (builtin "Block Contract (Internal)" (formula "35") (newnames "anonOut_heap,exc_0,heap_Before_BLOCK,savedHeap_Before_BLOCK,o,f"))
               (branch "Validity"
                   (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "1")))
                   (builtin "One Step Simplification" (formula "36"))
                  (rule "translateJavaSubInt" (formula "31") (term "0,0"))
                  (rule "polySimp_homoEq" (formula "26") (term "0,1,1"))
                  (rule "polySimp_elimSub" (formula "31") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,1"))
                  (rule "polySimp_addComm0" (formula "31") (term "0,0"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,1"))
                  (rule "mul_literals" (formula "26") (term "0,1,0,0,1,1"))
                  (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,1"))
                  (rule "polySimp_addComm0" (formula "26") (term "0,0,0,1,1"))
                  (rule "inEqSimp_ltToLeq" (formula "20"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "20") (term "0"))
                  (rule "inEqSimp_homoInEq0" (formula "18"))
                  (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                  (rule "polySimp_mulAssoc" (formula "18") (term "0,1,0"))
                  (rule "polySimp_mulComm0" (formula "18") (term "0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "0,1,0"))
                  (rule "polySimp_elimOne" (formula "18") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "18") (term "0"))
                  (rule "variableDeclarationAssign" (formula "35") (term "1"))
                  (rule "variableDeclaration" (formula "35") (term "1") (newnames "exc_0_1"))
                  (rule "assignment" (formula "35") (term "1"))
                   (builtin "One Step Simplification" (formula "35"))
                  (rule "emptyStatement" (formula "35") (term "1"))
                   (builtin "One Step Simplification" (formula "35"))
                  (rule "emptyStatement" (formula "35") (term "1"))
                  (rule "jmod_axiom" (formula "26") (term "0,1,1,1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,0,1,1,1"))
                  (rule "polySimp_sepNegMonomial" (formula "26") (term "0,1,1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "0,0,1,1"))
                  (rule "polySimp_elimOne" (formula "26") (term "0,0,1,1"))
                  (rule "polySimp_sepNegMonomial" (formula "26") (term "1,1,1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "0,1,1,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "20"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "0"))
                  (rule "polySimp_elimOne" (formula "20") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "18"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "0"))
                  (rule "polySimp_elimOne" (formula "18") (term "0"))
                  (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "19"))
                  (rule "leq_literals" (formula "12") (term "0"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "true_left" (formula "12"))
                  (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "14"))
                  (rule "leq_literals" (formula "4") (term "0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "4"))
                  (rule "polySimp_mulComm0" (formula "14") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "14") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "14"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                  (rule "polySimp_elimOne" (formula "14") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "16"))
                  (rule "mul_literals" (formula "5") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "5") (term "0"))
                  (rule "add_literals" (formula "5") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                  (rule "mul_literals" (formula "5") (term "1"))
                  (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "14"))
                  (rule "leq_literals" (formula "5") (term "0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "8"))
                  (rule "polySimp_rightDist" (formula "18") (term "0,0"))
                  (rule "mul_literals" (formula "18") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "18") (term "0"))
                  (rule "add_literals" (formula "18") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "18"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "0"))
                  (rule "polySimp_elimOne" (formula "18") (term "0"))
                  (rule "inEqSimp_subsumption0" (formula "10") (ifseqformula "18"))
                  (rule "leq_literals" (formula "10") (term "0"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "true_left" (formula "10"))
                  (rule "commute_or" (formula "24") (term "1,1"))
                  (rule "tryEmpty" (formula "33") (term "1"))
                  (rule "blockEmptyLabel" (formula "33") (term "1"))
                  (rule "blockEmpty" (formula "33") (term "1"))
                  (rule "methodCallEmpty" (formula "33") (term "1"))
                  (rule "emptyModality" (formula "33") (term "1"))
                   (builtin "One Step Simplification" (formula "33"))
                  (rule "closeTrue" (formula "33"))
               )
               (branch "Precondition"
                   (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "1")))
                  (rule "translateJavaSubInt" (formula "35") (term "0,0"))
                  (rule "polySimp_homoEq" (formula "26") (term "0,1,1"))
                  (rule "polySimp_elimSub" (formula "35") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,1"))
                  (rule "polySimp_addComm0" (formula "35") (term "0,0"))
                  (rule "close" (formula "35") (ifseqformula "13"))
               )
               (branch "Usage"
                   (builtin "One Step Simplification" (formula "31"))
                   (builtin "One Step Simplification" (formula "36"))
                  (rule "andLeft" (formula "31"))
                  (rule "andLeft" (formula "31"))
                  (rule "andLeft" (formula "31"))
                  (rule "replace_known_left" (formula "33") (term "0") (ifseqformula "31"))
                   (builtin "One Step Simplification" (formula "33"))
                  (rule "true_left" (formula "33"))
                  (rule "polySimp_homoEq" (formula "26") (term "0,1,1"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,1"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,1"))
                  (rule "mul_literals" (formula "26") (term "0,1,0,0,1,1"))
                  (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,1"))
                  (rule "polySimp_addComm0" (formula "26") (term "0,0,0,1,1"))
                  (rule "inEqSimp_ltToLeq" (formula "20"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "20") (term "0"))
                  (rule "inEqSimp_homoInEq0" (formula "18"))
                  (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                  (rule "polySimp_mulAssoc" (formula "18") (term "0,1,0"))
                  (rule "polySimp_mulComm0" (formula "18") (term "0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "0,1,0"))
                  (rule "polySimp_elimOne" (formula "18") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "18") (term "0"))
                  (rule "jmod_axiom" (formula "26") (term "0,1,1,1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,0,1,1,1"))
                  (rule "polySimp_sepNegMonomial" (formula "26") (term "0,1,1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "0,0,1,1"))
                  (rule "polySimp_elimOne" (formula "26") (term "0,0,1,1"))
                  (rule "polySimp_sepNegMonomial" (formula "26") (term "1,1,1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "0,1,1,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "20"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "0"))
                  (rule "polySimp_elimOne" (formula "20") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "18"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "0"))
                  (rule "polySimp_elimOne" (formula "18") (term "0"))
                  (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "15"))
                  (rule "leq_literals" (formula "4") (term "0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "18"))
                  (rule "leq_literals" (formula "11") (term "0"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "true_left" (formula "11"))
                  (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "16"))
                  (rule "mul_literals" (formula "5") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "5") (term "0"))
                  (rule "add_literals" (formula "5") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                  (rule "mul_literals" (formula "5") (term "1"))
                  (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "14"))
                  (rule "leq_literals" (formula "5") (term "0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "4"))
                  (rule "polySimp_mulComm0" (formula "14") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "14") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "14"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                  (rule "polySimp_elimOne" (formula "14") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "8"))
                  (rule "polySimp_rightDist" (formula "18") (term "0,0"))
                  (rule "mul_literals" (formula "18") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "18") (term "0"))
                  (rule "add_literals" (formula "18") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "18"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "0"))
                  (rule "polySimp_elimOne" (formula "18") (term "0"))
                  (rule "inEqSimp_subsumption0" (formula "10") (ifseqformula "18"))
                  (rule "leq_literals" (formula "10") (term "0"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "true_left" (formula "10"))
                  (rule "commute_or" (formula "24") (term "1,1"))
                  (rule "ifUnfold" (formula "36") (term "1") (inst "#boolv=x"))
                  (rule "variableDeclaration" (formula "36") (term "1") (newnames "x_5"))
                  (rule "inequality_comparison_simple" (formula "36") (term "1"))
                   (builtin "One Step Simplification" (formula "36"))
                  (rule "replace_known_left" (formula "36") (term "0,0,1,0") (ifseqformula "29"))
                   (builtin "One Step Simplification" (formula "36"))
                  (rule "jdiv_axiom" (formula "24") (term "0,0,0,1,1"))
                  (rule "eqSymm" (formula "24"))
                  (rule "replace_known_left" (formula "24") (term "0,0") (ifseqformula "16"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "eqSymm" (formula "24"))
                  (rule "applyEq" (formula "25") (term "0,0,0,1,1") (ifseqformula "24"))
                  (rule "div_axiom" (formula "24") (term "1") (inst "quotient=quotient_0"))
                  (rule "mul_literals" (formula "24") (term "1,1,1,1,1"))
                  (rule "qeq_literals" (formula "24") (term "0,1,1"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "equal_literals" (formula "24") (term "0"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "andLeft" (formula "24"))
                  (rule "andLeft" (formula "24"))
                  (rule "polySimp_addComm1" (formula "26") (term "1"))
                  (rule "add_literals" (formula "26") (term "0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "25"))
                  (rule "inEqSimp_homoInEq1" (formula "26"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "26") (term "0"))
                  (rule "applyEq" (formula "28") (term "0,0,0,1,1") (ifseqformula "24"))
                  (rule "eqSymm" (formula "28") (term "0,1,1"))
                  (rule "applyEq" (formula "27") (term "1") (ifseqformula "24"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "26"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1"))
                  (rule "polySimp_rightDist" (formula "26") (term "1"))
                  (rule "mul_literals" (formula "26") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,1"))
                  (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "26"))
                  (rule "times_zero_1" (formula "16") (term "0,0"))
                  (rule "add_zero_left" (formula "16") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                  (rule "mul_literals" (formula "16") (term "1"))
                  (rule "elimGcdGeq_antec" (formula "16") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(2(#))"))
                  (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,1,0"))
                  (rule "leq_literals" (formula "16") (term "0,0"))
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0"))
                  (rule "polySimp_addLiterals" (formula "16") (term "0,0,0,0"))
                  (rule "add_literals" (formula "16") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,0"))
                  (rule "add_literals" (formula "16") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "16") (term "1,0,0"))
                  (rule "add_zero_right" (formula "16") (term "0,0"))
                  (rule "leq_literals" (formula "16") (term "0"))
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "inEqSimp_exactShadow3" (formula "26") (ifseqformula "18"))
                  (rule "polySimp_mulAssoc" (formula "26") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "26") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "26") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "26"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "0"))
                  (rule "elimGcdLeq_antec" (formula "26") (inst "elimGcdRightDiv=Z(3(2(8(1(4(7(3(7(0(1(#)))))))))))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(2(#))"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,0,0,0,0,1,0"))
                  (rule "neg_literal" (formula "26") (term "0,0,0,0,0,1,0"))
                  (rule "leq_literals" (formula "26") (term "0,0"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0"))
                  (rule "polySimp_addLiterals" (formula "26") (term "0,0,0,0"))
                  (rule "add_zero_right" (formula "26") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "26") (term "0,0"))
                  (rule "add_literals" (formula "26") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "26") (term "1,0,0"))
                  (rule "add_zero_right" (formula "26") (term "0,0"))
                  (rule "qeq_literals" (formula "26") (term "0"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "arrayLengthNotNegative" (formula "14") (term "0"))
                  (rule "arrayLengthIsAShort" (formula "15") (term "0"))
                  (rule "expand_inShort" (formula "15"))
                  (rule "replace_short_MIN" (formula "15") (term "0,1"))
                  (rule "replace_short_MAX" (formula "15") (term "1,0"))
                  (rule "andLeft" (formula "15"))
                  (rule "inEqSimp_commuteLeq" (formula "16"))
                  (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "14"))
                  (rule "leq_literals" (formula "16") (term "0"))
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "true_left" (formula "16"))
                  (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "15"))
                  (rule "polySimp_mulComm0" (formula "16") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "16") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "16"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                  (rule "polySimp_elimOne" (formula "16") (term "0"))
                  (rule "inEqSimp_subsumption0" (formula "4") (ifseqformula "16"))
                  (rule "leq_literals" (formula "4") (term "0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "15"))
                  (rule "polySimp_mulComm0" (formula "12") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "12") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "12"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                  (rule "polySimp_elimOne" (formula "12") (term "0"))
                  (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "12"))
                  (rule "leq_literals" (formula "3") (term "0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "ifSplit" (formula "44"))
                  (branch "if x_5 true"
                      (builtin "One Step Simplification" (formula "45"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "if x_5 false"
                      (builtin "One Step Simplification" (formula "45"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "blockEmpty" (formula "44") (term "1"))
                      (builtin "Block Contract (Internal)" (formula "44") (newnames "anonOut_heap_0,exc_1,heap_Before_BLOCK_0,savedHeap_Before_BLOCK_0,o,f"))
                     (branch "Validity"
                         (builtin "One Step Simplification" (formula "45"))
                         (builtin "One Step Simplification" (formula "40"))
                        (rule "andLeft" (formula "40"))
                        (rule "translateJavaSubInt" (formula "40") (term "0,0"))
                        (rule "polySimp_elimSub" (formula "40") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "40") (term "0,0"))
                        (rule "variableDeclarationAssign" (formula "45") (term "1"))
                        (rule "variableDeclaration" (formula "45") (term "1") (newnames "exc_1_1"))
                        (rule "assignment" (formula "45") (term "1"))
                         (builtin "One Step Simplification" (formula "45"))
                        (rule "emptyStatement" (formula "45") (term "1"))
                         (builtin "One Step Simplification" (formula "45"))
                        (rule "emptyStatement" (formula "45") (term "1"))
                        (rule "tryEmpty" (formula "45") (term "1"))
                        (rule "blockEmptyLabel" (formula "45") (term "1"))
                        (rule "blockEmpty" (formula "45") (term "1"))
                        (rule "methodCallEmpty" (formula "45") (term "1"))
                         (builtin "One Step Simplification" (formula "45"))
                        (rule "emptyModality" (formula "45") (term "1"))
                         (builtin "One Step Simplification" (formula "45"))
                        (rule "closeTrue" (formula "45"))
                     )
                     (branch "Precondition"
                         (builtin "One Step Simplification" (formula "44"))
                        (rule "wellFormedAnon" (formula "44") (term "1"))
                        (rule "translateJavaSubInt" (formula "44") (term "0,0,0"))
                        (rule "replace_known_left" (formula "44") (term "0,1") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "38")))
                        (rule "polySimp_elimSub" (formula "44") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "44") (term "0,0"))
                        (rule "close" (formula "44") (ifseqformula "8"))
                     )
                     (branch "Usage"
                         (builtin "One Step Simplification" (formula "40"))
                         (builtin "One Step Simplification" (formula "45"))
                        (rule "expand_inInt" (formula "40") (term "1,0,0,1,1"))
                        (rule "replace_int_MAX" (formula "40") (term "1,0,1,0,0,1,1"))
                        (rule "replace_int_MIN" (formula "40") (term "0,1,1,0,0,1,1"))
                        (rule "andLeft" (formula "40"))
                        (rule "andLeft" (formula "40"))
                        (rule "andLeft" (formula "42"))
                        (rule "andLeft" (formula "40"))
                        (rule "andLeft" (formula "43"))
                        (rule "andLeft" (formula "43"))
                        (rule "translateJavaAddInt" (formula "46") (term "0,2,0,0,0,1,1,1,0"))
                        (rule "translateJavaAddInt" (formula "46") (term "0,2,1,1,0,1,0,1,0"))
                        (rule "translateJavaAddInt" (formula "46") (term "0,2,0,1,1,0,1,0"))
                        (rule "translateJavaAddInt" (formula "46") (term "0,2,0,1,1,1,1,0"))
                        (rule "translateJavaAddInt" (formula "46") (term "0,2,1,1,0,1,1,1,0"))
                        (rule "translateJavaAddInt" (formula "45") (term "0,2,0"))
                        (rule "translateJavaAddInt" (formula "44") (term "0,2,1"))
                        (rule "replace_known_left" (formula "42") (term "0") (ifseqformula "40"))
                         (builtin "One Step Simplification" (formula "42"))
                        (rule "true_left" (formula "42"))
                        (rule "polySimp_addComm0" (formula "45") (term "0,2,0,0,0,1,1,1,0"))
                        (rule "polySimp_addComm0" (formula "45") (term "0,2,1,1,0,1,0,1,0"))
                        (rule "polySimp_addComm0" (formula "45") (term "0,2,0,1,1,0,1,0"))
                        (rule "polySimp_addComm0" (formula "45") (term "0,2,0,1,1,1,1,0"))
                        (rule "polySimp_addComm0" (formula "45") (term "0,2,1,1,0,1,1,1,0"))
                        (rule "polySimp_addComm0" (formula "44") (term "0,2,0"))
                        (rule "polySimp_addComm0" (formula "43") (term "0,2,1"))
                        (rule "inEqSimp_ltToLeq" (formula "45") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "45") (term "1,0,0,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "45") (term "1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "45") (term "1,0,0,1,0,0,0,0"))
                        (rule "inEqSimp_gtToGeq" (formula "45") (term "0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "45") (term "1,0,0,0,1,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "45") (term "0,0,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "45") (term "1,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "45") (term "0,0,1,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "42"))
                        (rule "inEqSimp_commuteLeq" (formula "45") (term "0,0,1,1,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "45") (term "1,0,1,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "45") (term "1,0,1,1,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "44"))
                        (rule "inEqSimp_commuteLeq" (formula "43"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "45") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "45") (term "1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "45") (term "1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "45") (term "1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "45") (term "0,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "45") (term "1,1,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "45") (term "1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "45") (term "1,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "45") (term "1,1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "45") (term "1,1,1,0,0,0,0"))
                        (rule "mul_literals" (formula "45") (term "0,1,1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "45") (term "1,1,1,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "45") (term "0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "45") (term "1,0,1,1,0"))
                        (rule "polySimp_rightDist" (formula "45") (term "1,0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "45") (term "1,1,0,1,1,0"))
                        (rule "mul_literals" (formula "45") (term "0,1,0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "45") (term "1,1,0,1,1,0"))
                        (rule "pullOutSelect" (formula "45") (term "1,1,1,0,1,0") (inst "selectSK=arr_0"))
                        (rule "applyEq" (formula "42") (term "0") (ifseqformula "45"))
                        (rule "applyEq" (formula "43") (term "1") (ifseqformula "45"))
                        (rule "simplifySelectOfAnon" (formula "45"))
                         (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "49")) (ifInst ""  (formula "5")))
                        (rule "simplifySelectOfAnon" (formula "45"))
                         (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "49")) (ifInst ""  (formula "5")))
                        (rule "applyEqReverse" (formula "46") (term "1,1,1,0,1,0") (ifseqformula "45"))
                        (rule "applyEqReverse" (formula "42") (term "0") (ifseqformula "45"))
                        (rule "applyEqReverse" (formula "43") (term "1") (ifseqformula "45"))
                        (rule "hideAuxiliaryEq" (formula "45"))
                        (rule "pullOutSelect" (formula "45") (term "1,1,1,1,1,0") (inst "selectSK=arr_1"))
                        (rule "applyEq" (formula "44") (term "0") (ifseqformula "45"))
                        (rule "simplifySelectOfAnon" (formula "45"))
                         (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "49")) (ifInst ""  (formula "5")))
                        (rule "simplifySelectOfAnon" (formula "45"))
                         (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "49")) (ifInst ""  (formula "5")))
                        (rule "applyEqReverse" (formula "46") (term "1,1,1,1,1,0") (ifseqformula "45"))
                        (rule "applyEqReverse" (formula "44") (term "0") (ifseqformula "45"))
                        (rule "hideAuxiliaryEq" (formula "45"))
                        (rule "inEqSimp_commuteGeq" (formula "44"))
                        (rule "applyEq" (formula "44") (term "1") (ifseqformula "23"))
                        (rule "applyEq" (formula "45") (term "1,1,1,1,1,0") (ifseqformula "23"))
                        (rule "pullOutSelect" (formula "45") (term "1,0,0,1,1,1,0") (inst "selectSK=arr_2"))
                        (rule "applyEq" (formula "44") (term "0") (ifseqformula "45"))
                        (rule "applyEq" (formula "43") (term "0") (ifseqformula "45"))
                        (rule "simplifySelectOfAnon" (formula "45"))
                         (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "49")) (ifInst ""  (formula "5")))
                        (rule "simplifySelectOfAnon" (formula "45"))
                         (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "49")) (ifInst ""  (formula "5")))
                        (rule "applyEqReverse" (formula "46") (term "1,0,0,1,1,1,0") (ifseqformula "45"))
                        (rule "applyEqReverse" (formula "44") (term "0") (ifseqformula "45"))
                        (rule "applyEqReverse" (formula "43") (term "0") (ifseqformula "45"))
                        (rule "hideAuxiliaryEq" (formula "45"))
                        (rule "inEqSimp_exactShadow3" (formula "43") (ifseqformula "44"))
                        (rule "polySimp_mulComm0" (formula "43") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "43") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "43"))
                        (rule "polySimp_mulLiterals" (formula "43") (term "0"))
                        (rule "polySimp_elimOne" (formula "43") (term "0"))
                        (rule "inEqSimp_exactShadow3" (formula "42") (ifseqformula "43"))
                        (rule "mul_literals" (formula "42") (term "0,0"))
                        (rule "add_zero_left" (formula "42") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "42"))
                        (rule "polySimp_mulLiterals" (formula "42") (term "1"))
                        (rule "polySimp_elimOne" (formula "42") (term "1"))
                        (rule "nnf_imp2or" (formula "46") (term "0,1,0"))
                        (rule "inEqSimp_notLeq" (formula "46") (term "0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "46") (term "1,0,0,0,0,1,0"))
                        (rule "mul_literals" (formula "46") (term "0,1,0,0,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "46") (term "0,0,0,0,1,0"))
                        (rule "add_literals" (formula "46") (term "0,0,0,0,0,1,0"))
                        (rule "add_zero_left" (formula "46") (term "0,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "46") (term "0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "46") (term "1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "46") (term "1,0,0,1,0"))
                        (rule "nnf_imp2or" (formula "46") (term "1,1,0"))
                        (rule "inEqSimp_notGeq" (formula "46") (term "0,1,1,0"))
                        (rule "polySimp_rightDist" (formula "46") (term "1,0,0,0,1,1,0"))
                        (rule "mul_literals" (formula "46") (term "0,1,0,0,0,1,1,0"))
                        (rule "polySimp_addAssoc" (formula "46") (term "0,0,0,1,1,0"))
                        (rule "add_literals" (formula "46") (term "0,0,0,0,1,1,0"))
                        (rule "add_zero_left" (formula "46") (term "0,0,0,1,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "46") (term "0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "46") (term "1,0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "46") (term "1,0,1,1,0"))
                        (rule "nnf_imp2or" (formula "46") (term "0"))
                        (rule "nnf_notAnd" (formula "46") (term "0,0"))
                        (rule "nnf_notAnd" (formula "46") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "46"))
                        (rule "nnf_notAnd" (formula "46") (term "1,0,0"))
                        (rule "inEqSimp_notLeq" (formula "46") (term "0,1,0,0"))
                        (rule "mul_literals" (formula "46") (term "1,0,0,0,1,0,0"))
                        (rule "add_literals" (formula "46") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "46") (term "0,1,0,0"))
                        (rule "mul_literals" (formula "46") (term "1,0,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "46") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "46") (term "1,0,0,1,1,0,0"))
                        (rule "add_literals" (formula "46") (term "0,0,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "46") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "46") (term "1,1,1,0,0"))
                        (rule "nnf_notAnd" (formula "46") (term "0,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "46") (term "0,0,0,0,0"))
                        (rule "mul_literals" (formula "46") (term "1,0,0,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "46") (term "0,0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "46") (term "0,0,0,0,0"))
                        (rule "mul_literals" (formula "46") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "46") (term "1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "46") (term "1,0,0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "46") (term "0,1,0,0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "46") (term "0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "46") (term "0,0,0,1,0,0,0,0"))
                        (rule "add_zero_left" (formula "46") (term "0,0,1,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "46") (term "1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "46") (term "1,1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "46") (term "1,1,0,0,0,0"))
                        (rule "commute_or_2" (formula "46") (term "0,0"))
                        (rule "commute_or_2" (formula "46") (term "0,0,0"))
                        (rule "cnf_rightDist" (formula "46") (term "1,1,0"))
                        (rule "commute_or" (formula "46") (term "1,1,1,0"))
                        (rule "cnf_rightDist" (formula "46") (term "0,1,0"))
                        (rule "commute_or" (formula "46") (term "1,0,1,0"))
                        (rule "ifUnfold" (formula "51") (term "1") (inst "#boolv=x"))
                        (rule "variableDeclaration" (formula "51") (term "1") (newnames "x_6"))
                        (rule "shift_paren_or" (formula "46") (term "0,0,0,0"))
                        (rule "commute_or_2" (formula "46") (term "0,0"))
                        (rule "commute_or_2" (formula "46") (term "0,0,0,0"))
                        (rule "commute_or" (formula "46") (term "0,0,0,0,0"))
                        (rule "inEqSimp_or_subsumption0" (formula "46") (term "0,0,0,0,0"))
                        (rule "qeq_literals" (formula "46") (term "0,0,0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "46"))
                        (rule "cnf_rightDist" (formula "46") (term "0,1,1,0"))
                        (rule "commute_or" (formula "46") (term "1,0,1,1,0"))
                        (rule "cnf_rightDist" (formula "46") (term "0,0,1,0"))
                        (rule "cnf_rightDist" (formula "46") (term "0"))
                        (rule "distr_forallAnd" (formula "46"))
                        (rule "andLeft" (formula "46"))
                        (rule "commute_or" (formula "47") (term "0"))
                        (rule "cnf_rightDist" (formula "46") (term "0"))
                        (rule "distr_forallAnd" (formula "46"))
                        (rule "andLeft" (formula "46"))
                        (rule "commute_or_2" (formula "47") (term "0"))
                        (rule "commute_or" (formula "46") (term "1,1,0"))
                        (rule "shift_paren_or" (formula "47") (term "0,0"))
                        (rule "cnf_rightDist" (formula "48") (term "0"))
                        (rule "distr_forallAnd" (formula "48"))
                        (rule "andLeft" (formula "48"))
                        (rule "commute_or_2" (formula "49") (term "0"))
                        (rule "shift_paren_or" (formula "49") (term "0,0"))
                        (rule "cnf_rightDist" (formula "46") (term "0"))
                        (rule "distr_forallAnd" (formula "46"))
                        (rule "andLeft" (formula "46"))
                        (rule "commute_or_2" (formula "47") (term "0"))
                        (rule "shift_paren_or" (formula "46") (term "0"))
                        (rule "commute_or_2" (formula "46") (term "0,0"))
                        (rule "shift_paren_or" (formula "47") (term "0,0"))
                        (rule "commute_or_2" (formula "46") (term "0,0,0"))
                        (rule "inEqSimp_or_subsumption7" (formula "46") (term "0,0,0"))
                        (rule "inEqSimp_gtToGeq" (formula "46") (term "0,1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "46") (term "1,0,0,0,1,0,0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "46") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "46") (term "1,1,0,0,1,0,0,0"))
                        (rule "times_zero_1" (formula "46") (term "1,0,0,1,0,0,0"))
                        (rule "add_zero_right" (formula "46") (term "0,0,1,0,0,0"))
                        (rule "qeq_literals" (formula "46") (term "0,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "46"))
                        (rule "cnf_rightDist" (formula "49") (term "0"))
                        (rule "distr_forallAnd" (formula "49"))
                        (rule "andLeft" (formula "49"))
                        (rule "commute_or_2" (formula "50") (term "0"))
                        (rule "shift_paren_or" (formula "49") (term "0"))
                        (rule "commute_or_2" (formula "49") (term "0,0"))
                        (rule "inEqSimp_or_subsumption5" (formula "49") (term "0,0,0"))
                        (rule "inEqSimp_gtToGeq" (formula "49") (term "0,1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "49") (term "1,0,0,0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "49") (term "0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "49") (term "1,1,0,0,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "49") (term "1,0,0,1,0,0,0,0"))
                        (rule "add_zero_right" (formula "49") (term "0,0,1,0,0,0,0"))
                        (rule "qeq_literals" (formula "49") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "49"))
                        (rule "shift_paren_or" (formula "48") (term "0,0,0"))
                        (rule "shift_paren_or" (formula "51") (term "0,0,0"))
                        (rule "shift_paren_or" (formula "50") (term "0,0"))
                        (rule "shift_paren_or" (formula "47") (term "0,0,0"))
                        (rule "commute_or" (formula "48") (term "0,0,0,0"))
                        (rule "inEqSimp_or_subsumption7" (formula "48") (term "0,0,0"))
                        (rule "inEqSimp_gtToGeq" (formula "48") (term "0,1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "48") (term "1,0,0,0,1,0,0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "48") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "48") (term "1,1,0,0,1,0,0,0"))
                        (rule "times_zero_1" (formula "48") (term "1,0,0,1,0,0,0"))
                        (rule "add_zero_right" (formula "48") (term "0,0,1,0,0,0"))
                        (rule "qeq_literals" (formula "48") (term "0,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "48"))
                        (rule "commute_or" (formula "51") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "50") (term "0,0,0"))
                        (rule "commute_or" (formula "47") (term "0,0,0,0"))
                        (rule "inEqSimp_or_subsumption7" (formula "47") (term "0,0,0"))
                        (rule "inEqSimp_gtToGeq" (formula "47") (term "0,1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "47") (term "1,0,0,0,1,0,0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "47") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "47") (term "1,1,0,0,1,0,0,0"))
                        (rule "times_zero_1" (formula "47") (term "1,0,0,1,0,0,0"))
                        (rule "add_zero_right" (formula "47") (term "0,0,1,0,0,0"))
                        (rule "qeq_literals" (formula "47") (term "0,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "47"))
                        (rule "inequality_comparison_simple" (formula "56") (term "1"))
                         (builtin "One Step Simplification" (formula "56"))
                        (rule "replace_known_left" (formula "56") (term "0,0,1,0") (ifseqformula "40"))
                         (builtin "One Step Simplification" (formula "56"))
                        (rule "commute_or" (formula "50") (term "0,0,0,0"))
                        (rule "ifSplit" (formula "56"))
                        (branch "if x_6 true"
                            (builtin "One Step Simplification" (formula "57"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "if x_6 false"
                            (builtin "One Step Simplification" (formula "57"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "blockEmpty" (formula "56") (term "1"))
                            (builtin "Block Contract (Internal)" (formula "56") (newnames "anonOut_heap_1,exc_2,heap_Before_BLOCK_1,savedHeap_Before_BLOCK_1,o,f"))
                           (branch "Validity"
                               (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "54")) (ifInst ""  (formula "4")) (ifInst ""  (formula "56")) (ifInst ""  (formula "2")))
                               (builtin "One Step Simplification" (formula "57"))
                              (rule "expand_inInt" (formula "52") (term "0,1"))
                              (rule "expand_inInt" (formula "52") (term "1,1"))
                              (rule "replace_int_MIN" (formula "52") (term "0,1,0,1"))
                              (rule "replace_int_MAX" (formula "52") (term "1,0,0,1"))
                              (rule "replace_int_MIN" (formula "52") (term "0,1,1,1"))
                              (rule "replace_int_MAX" (formula "52") (term "1,0,1,1"))
                              (rule "andLeft" (formula "52"))
                              (rule "andLeft" (formula "53"))
                              (rule "andLeft" (formula "52"))
                              (rule "andLeft" (formula "54"))
                              (rule "andLeft" (formula "56"))
                              (rule "translateJavaSubInt" (formula "52") (term "0,0"))
                              (rule "polySimp_elimSub" (formula "52") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "52") (term "0,0"))
                              (rule "inEqSimp_homoInEq0" (formula "54"))
                              (rule "mul_literals" (formula "54") (term "1,0"))
                              (rule "polySimp_addComm1" (formula "54") (term "0"))
                              (rule "polySimp_addComm0" (formula "54") (term "0,0"))
                              (rule "inEqSimp_homoInEq0" (formula "53"))
                              (rule "polySimp_mulComm0" (formula "53") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "53") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "53") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "53") (term "0"))
                              (rule "inEqSimp_homoInEq0" (formula "56"))
                              (rule "mul_literals" (formula "56") (term "1,0"))
                              (rule "polySimp_addComm1" (formula "56") (term "0"))
                              (rule "polySimp_addComm0" (formula "56") (term "0,0"))
                              (rule "inEqSimp_homoInEq0" (formula "55"))
                              (rule "polySimp_mulComm0" (formula "55") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "55") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "55") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "55") (term "0"))
                              (rule "variableDeclarationAssign" (formula "61") (term "1"))
                              (rule "variableDeclaration" (formula "61") (term "1") (newnames "exc_2_1"))
                              (rule "assignment" (formula "61") (term "1"))
                               (builtin "One Step Simplification" (formula "61"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "54"))
                              (rule "polySimp_mulComm0" (formula "54") (term "1"))
                              (rule "polySimp_rightDist" (formula "54") (term "1"))
                              (rule "mul_literals" (formula "54") (term "0,1"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "53"))
                              (rule "polySimp_mulLiterals" (formula "53") (term "0"))
                              (rule "polySimp_elimOne" (formula "53") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "56"))
                              (rule "polySimp_mulComm0" (formula "56") (term "1"))
                              (rule "polySimp_rightDist" (formula "56") (term "1"))
                              (rule "mul_literals" (formula "56") (term "0,1"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "55"))
                              (rule "polySimp_mulLiterals" (formula "55") (term "0"))
                              (rule "polySimp_elimOne" (formula "55") (term "0"))
                              (rule "inEqSimp_exactShadow3" (formula "54") (ifseqformula "43"))
                              (rule "polySimp_rightDist" (formula "54") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "54") (term "1,0,0"))
                              (rule "mul_literals" (formula "54") (term "0,0,0"))
                              (rule "polySimp_elimOne" (formula "54") (term "1,0,0"))
                              (rule "polySimp_addAssoc" (formula "54") (term "0"))
                              (rule "polySimp_pullOutFactor1b" (formula "54") (term "0,0"))
                              (rule "add_literals" (formula "54") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "54") (term "1,0,0"))
                              (rule "add_zero_right" (formula "54") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "54"))
                              (rule "mul_literals" (formula "54") (term "1"))
                              (rule "inEqSimp_exactShadow3" (formula "56") (ifseqformula "45"))
                              (rule "polySimp_rightDist" (formula "56") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "56") (term "1,0,0"))
                              (rule "mul_literals" (formula "56") (term "0,0,0"))
                              (rule "polySimp_elimOne" (formula "56") (term "1,0,0"))
                              (rule "polySimp_addAssoc" (formula "56") (term "0"))
                              (rule "polySimp_pullOutFactor1b" (formula "56") (term "0,0"))
                              (rule "add_literals" (formula "56") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "56") (term "1,0,0"))
                              (rule "add_zero_right" (formula "56") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "56"))
                              (rule "mul_literals" (formula "56") (term "1"))
                              (rule "inEqSimp_exactShadow3" (formula "44") (ifseqformula "55"))
                              (rule "polySimp_mulComm0" (formula "44") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "44") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "44"))
                              (rule "polySimp_mulLiterals" (formula "44") (term "0"))
                              (rule "polySimp_elimOne" (formula "44") (term "0"))
                              (rule "inEqSimp_exactShadow3" (formula "42") (ifseqformula "53"))
                              (rule "mul_literals" (formula "42") (term "0,0"))
                              (rule "add_zero_left" (formula "42") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "42"))
                              (rule "polySimp_mulLiterals" (formula "42") (term "0"))
                              (rule "polySimp_elimOne" (formula "42") (term "0"))
                              (rule "inEqSimp_subsumption0" (formula "42") (ifseqformula "11"))
                              (rule "leq_literals" (formula "42") (term "0"))
                               (builtin "One Step Simplification" (formula "42"))
                              (rule "true_left" (formula "42"))
                              (rule "ifElseUnfold" (formula "61") (term "1") (inst "#boolv=x"))
                               (builtin "One Step Simplification" (formula "61"))
                              (rule "variableDeclaration" (formula "61") (term "1") (newnames "x_7"))
                              (rule "compound_greater_than_comparison_1" (formula "61") (term "1") (inst "#v0=x_8"))
                              (rule "variableDeclarationAssign" (formula "61") (term "1"))
                              (rule "variableDeclaration" (formula "61") (term "1") (newnames "x_8"))
                              (rule "assignmentSubtractionInt" (formula "61") (term "1"))
                              (branch "Overflow check"
                                  (builtin "One Step Simplification" (formula "61"))
                                 (rule "expand_inInt" (formula "61"))
                                 (rule "replace_int_MAX" (formula "61") (term "1,0"))
                                 (rule "replace_int_MIN" (formula "61") (term "0,1"))
                                 (rule "polySimp_elimSub" (formula "61") (term "0,0"))
                                 (rule "polySimp_elimSub" (formula "61") (term "1,1"))
                                 (rule "polySimp_mulComm0" (formula "61") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "61") (term "1,1,1"))
                                 (rule "polySimp_rightDist" (formula "61") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "61") (term "0,1,0,0"))
                                 (rule "polySimp_addComm1" (formula "61") (term "0,0"))
                                 (rule "polySimp_rightDist" (formula "61") (term "1,1,1"))
                                 (rule "polySimp_mulComm0" (formula "61") (term "0,1,1,1"))
                                 (rule "polySimp_addComm1" (formula "61") (term "1,1"))
                                 (rule "polySimp_addAssoc" (formula "61") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "61") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "61") (term "1,0,0,0,0"))
                                 (rule "times_zero_1" (formula "61") (term "0,0,0,0"))
                                 (rule "add_zero_left" (formula "61") (term "0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "61") (term "0,1,1"))
                                 (rule "polySimp_pullOutFactor1" (formula "61") (term "0,0,1,1"))
                                 (rule "add_literals" (formula "61") (term "1,0,0,1,1"))
                                 (rule "times_zero_1" (formula "61") (term "0,0,1,1"))
                                 (rule "add_zero_left" (formula "61") (term "0,1,1"))
                                 (rule "inEqSimp_homoInEq0" (formula "61") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "61") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "61") (term "1,0,0"))
                                 (rule "polySimp_mulAssoc" (formula "61") (term "0,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "61") (term "0,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "61") (term "0,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "61") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "61") (term "0,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "61") (term "1"))
                                 (rule "mul_literals" (formula "61") (term "1,0,1"))
                                 (rule "polySimp_addComm1" (formula "61") (term "0,1"))
                                 (rule "polySimp_addComm0" (formula "61") (term "0,0,1"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "61") (term "0"))
                                 (rule "polySimp_mulLiterals" (formula "61") (term "0,0"))
                                 (rule "polySimp_elimOne" (formula "61") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "61") (term "1"))
                                 (rule "polySimp_mulComm0" (formula "61") (term "1,1"))
                                 (rule "polySimp_rightDist" (formula "61") (term "1,1"))
                                 (rule "polySimp_mulLiterals" (formula "61") (term "1,1,1"))
                                 (rule "mul_literals" (formula "61") (term "0,1,1"))
                                 (rule "polySimp_elimOne" (formula "61") (term "1,1,1"))
                                 (rule "inEqSimp_subsumption1" (formula "61") (term "1") (ifseqformula "44"))
                                 (rule "inEqSimp_homoInEq0" (formula "61") (term "0,1"))
                                 (rule "polySimp_mulComm0" (formula "61") (term "1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "61") (term "1,0,0,1"))
                                 (rule "mul_literals" (formula "61") (term "0,1,0,0,1"))
                                 (rule "polySimp_addAssoc" (formula "61") (term "0,0,1"))
                                 (rule "polySimp_addComm0" (formula "61") (term "0,0,0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "61") (term "0,0,1"))
                                 (rule "add_literals" (formula "61") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "61") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "61") (term "0,0,1"))
                                 (rule "qeq_literals" (formula "61") (term "0,1"))
                                  (builtin "One Step Simplification" (formula "61"))
                                 (rule "inEqSimp_leqRight" (formula "61"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                 (rule "mul_literals" (formula "1") (term "0,1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                 (rule "inEqSimp_subsumption1" (formula "45") (ifseqformula "1"))
                                 (rule "inEqSimp_homoInEq0" (formula "45") (term "0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "45") (term "0,0"))
                                 (rule "add_literals" (formula "45") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "45") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "45") (term "0,0"))
                                 (rule "qeq_literals" (formula "45") (term "0"))
                                  (builtin "One Step Simplification" (formula "45"))
                                 (rule "true_left" (formula "45"))
                                 (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "55"))
                                 (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "0"))
                                 (rule "inEqSimp_subsumption0" (formula "54") (ifseqformula "1"))
                                 (rule "inEqSimp_homoInEq0" (formula "54") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "54") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "54") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "54") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "54") (term "0,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "54") (term "1,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "54") (term "0,0"))
                                 (rule "polySimp_addComm1" (formula "54") (term "0,0,0"))
                                 (rule "add_literals" (formula "54") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor2b" (formula "54") (term "0,0"))
                                 (rule "add_literals" (formula "54") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "54") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "54") (term "0,0"))
                                 (rule "qeq_literals" (formula "54") (term "0"))
                                  (builtin "One Step Simplification" (formula "54"))
                                 (rule "true_left" (formula "54"))
                                 (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "46"))
                                 (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                 (rule "mul_literals" (formula "2") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "2") (term "0"))
                                 (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "0"))
                                 (rule "inEqSimp_subsumption0" (formula "46") (ifseqformula "2"))
                                 (rule "inEqSimp_homoInEq0" (formula "46") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "46") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "46") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "46") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "46") (term "0,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "46") (term "1,0,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "46") (term "1,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "46") (term "0,0"))
                                 (rule "polySimp_addComm1" (formula "46") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "46") (term "0,0"))
                                 (rule "add_literals" (formula "46") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "46") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "46") (term "0,0"))
                                 (rule "polySimp_addAssoc" (formula "46") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "46") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor2b" (formula "46") (term "0,0"))
                                 (rule "add_literals" (formula "46") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "46") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "46") (term "0,0"))
                                 (rule "qeq_literals" (formula "46") (term "0"))
                                  (builtin "One Step Simplification" (formula "46"))
                                 (rule "true_left" (formula "46"))
                                 (rule "inEqSimp_exactShadow3" (formula "45") (ifseqformula "1"))
                                 (rule "mul_literals" (formula "45") (term "0,0"))
                                 (rule "add_zero_left" (formula "45") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "45"))
                                 (rule "polySimp_mulLiterals" (formula "45") (term "0"))
                                 (rule "polySimp_elimOne" (formula "45") (term "0"))
                                 (rule "inEqSimp_subsumption0" (formula "14") (ifseqformula "45"))
                                 (rule "leq_literals" (formula "14") (term "0"))
                                  (builtin "One Step Simplification" (formula "14"))
                                 (rule "true_left" (formula "14"))
                                 (rule "inEqSimp_contradInEq0" (formula "13") (ifseqformula "44"))
                                 (rule "qeq_literals" (formula "13") (term "0"))
                                  (builtin "One Step Simplification" (formula "13"))
                                 (rule "closeFalse" (formula "13"))
                              )
                              (branch "Usage"
                                  (builtin "One Step Simplification" (formula "61"))
                                 (rule "translateJavaSubInt" (formula "61") (term "0,1,0"))
                                 (rule "polySimp_elimSub" (formula "61") (term "0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "61") (term "1,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "61") (term "1,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "61") (term "0,1,0,1,0"))
                                 (rule "polySimp_addComm1" (formula "61") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "61") (term "0,0,1,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "61") (term "0,0,0,1,0"))
                                 (rule "add_literals" (formula "61") (term "1,0,0,0,1,0"))
                                 (rule "times_zero_1" (formula "61") (term "0,0,0,1,0"))
                                 (rule "add_zero_left" (formula "61") (term "0,0,1,0"))
                                 (rule "greater_than_comparison_simple" (formula "61") (term "1"))
                                  (builtin "One Step Simplification" (formula "61"))
                                 (rule "inEqSimp_gtToGeq" (formula "61") (term "0,0,1,0"))
                                 (rule "mul_literals" (formula "61") (term "1,0,0,0,0,1,0"))
                                 (rule "add_literals" (formula "61") (term "0,0,0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "61") (term "0,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "61") (term "0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "61") (term "1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "61") (term "1,0,0,1,0"))
                                 (rule "mul_literals" (formula "61") (term "0,1,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "61") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "61") (term "1,1,0,0,1,0"))
                                 (rule "ifElseSplit" (formula "61"))
                                 (branch "if x_7 true"
                                     (builtin "One Step Simplification" (formula "62"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "inEqSimp_subsumption1" (formula "45") (ifseqformula "1"))
                                    (rule "inEqSimp_homoInEq0" (formula "45") (term "0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "45") (term "0,0"))
                                    (rule "add_literals" (formula "45") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "45") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "45") (term "0,0"))
                                    (rule "qeq_literals" (formula "45") (term "0"))
                                     (builtin "One Step Simplification" (formula "45"))
                                    (rule "true_left" (formula "45"))
                                    (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "45"))
                                    (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "0"))
                                    (rule "inEqSimp_subsumption0" (formula "45") (ifseqformula "1"))
                                    (rule "inEqSimp_homoInEq0" (formula "45") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "45") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "45") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "45") (term "0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "45") (term "1,0,1,0,0"))
                                    (rule "mul_literals" (formula "45") (term "0,0,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "45") (term "1,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "45") (term "0,0"))
                                    (rule "polySimp_addComm1" (formula "45") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "45") (term "0,0"))
                                    (rule "add_literals" (formula "45") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "45") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "45") (term "0,0"))
                                    (rule "polySimp_addAssoc" (formula "45") (term "0,0"))
                                    (rule "polySimp_addComm0" (formula "45") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor2b" (formula "45") (term "0,0"))
                                    (rule "add_literals" (formula "45") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "45") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "45") (term "0,0"))
                                    (rule "qeq_literals" (formula "45") (term "0"))
                                     (builtin "One Step Simplification" (formula "45"))
                                    (rule "true_left" (formula "45"))
                                    (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "55"))
                                    (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                    (rule "mul_literals" (formula "2") (term "0,0,0"))
                                    (rule "polySimp_addComm1" (formula "2") (term "0"))
                                    (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                    (rule "add_literals" (formula "2") (term "0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                    (rule "polySimp_elimOne" (formula "2") (term "0"))
                                    (rule "inEqSimp_subsumption0" (formula "54") (ifseqformula "2"))
                                    (rule "inEqSimp_homoInEq0" (formula "54") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "54") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "54") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "54") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "54") (term "0,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "54") (term "1,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "54") (term "0,0"))
                                    (rule "polySimp_addComm1" (formula "54") (term "0,0,0"))
                                    (rule "add_literals" (formula "54") (term "0,0,0,0"))
                                    (rule "polySimp_pullOutFactor2b" (formula "54") (term "0,0"))
                                    (rule "add_literals" (formula "54") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "54") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "54") (term "0,0"))
                                    (rule "qeq_literals" (formula "54") (term "0"))
                                     (builtin "One Step Simplification" (formula "54"))
                                    (rule "true_left" (formula "54"))
                                    (rule "inEqSimp_exactShadow3" (formula "45") (ifseqformula "1"))
                                    (rule "mul_literals" (formula "45") (term "0,0"))
                                    (rule "add_zero_left" (formula "45") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "45"))
                                    (rule "polySimp_mulComm0" (formula "45") (term "1"))
                                    (rule "polySimp_rightDist" (formula "45") (term "1"))
                                    (rule "mul_literals" (formula "45") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "45") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "45") (term "1,1"))
                                    (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "45"))
                                    (rule "inEqSimp_homoInEq0" (formula "15") (term "0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0"))
                                    (rule "add_literals" (formula "15") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "15") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "15") (term "0,0"))
                                    (rule "qeq_literals" (formula "15") (term "0"))
                                     (builtin "One Step Simplification" (formula "15"))
                                    (rule "true_left" (formula "15"))
                                    (rule "inEqSimp_exactShadow3" (formula "54") (ifseqformula "1"))
                                    (rule "polySimp_rightDist" (formula "54") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "54") (term "1,0,0"))
                                    (rule "mul_literals" (formula "54") (term "0,0,0"))
                                    (rule "polySimp_elimOne" (formula "54") (term "1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "54") (term "0"))
                                    (rule "polySimp_addAssoc" (formula "54") (term "0,0"))
                                    (rule "polySimp_addComm1" (formula "54") (term "0,0,0"))
                                    (rule "add_literals" (formula "54") (term "0,0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "54") (term "0,0"))
                                    (rule "add_literals" (formula "54") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "54") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "54") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "54"))
                                    (rule "mul_literals" (formula "54") (term "1"))
                                    (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "54"))
                                    (rule "leq_literals" (formula "6") (term "0"))
                                     (builtin "One Step Simplification" (formula "6"))
                                    (rule "true_left" (formula "6"))
                                    (rule "inEqSimp_exactShadow3" (formula "44") (ifseqformula "2"))
                                    (rule "mul_literals" (formula "44") (term "0,0"))
                                    (rule "add_zero_left" (formula "44") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "44"))
                                    (rule "polySimp_mulLiterals" (formula "44") (term "0"))
                                    (rule "polySimp_elimOne" (formula "44") (term "0"))
                                    (rule "inEqSimp_subsumption0" (formula "44") (ifseqformula "13"))
                                    (rule "leq_literals" (formula "44") (term "0"))
                                     (builtin "One Step Simplification" (formula "44"))
                                    (rule "true_left" (formula "44"))
                                    (rule "inEqSimp_exactShadow3" (formula "53") (ifseqformula "18"))
                                    (rule "mul_literals" (formula "53") (term "0,0"))
                                    (rule "polySimp_addAssoc" (formula "53") (term "0"))
                                    (rule "add_literals" (formula "53") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "53"))
                                    (rule "mul_literals" (formula "53") (term "1"))
                                    (rule "inEqSimp_subsumption1" (formula "53") (ifseqformula "12"))
                                    (rule "leq_literals" (formula "53") (term "0"))
                                     (builtin "One Step Simplification" (formula "53"))
                                    (rule "true_left" (formula "53"))
                                    (rule "inEqSimp_exactShadow3" (formula "43") (ifseqformula "16"))
                                    (rule "polySimp_rightDist" (formula "43") (term "0,0"))
                                    (rule "mul_literals" (formula "43") (term "0,0,0"))
                                    (rule "polySimp_addComm1" (formula "43") (term "0"))
                                    (rule "add_literals" (formula "43") (term "0,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "43"))
                                    (rule "polySimp_mulLiterals" (formula "43") (term "0"))
                                    (rule "polySimp_elimOne" (formula "43") (term "0"))
                                    (rule "inEqSimp_subsumption0" (formula "13") (ifseqformula "43"))
                                    (rule "leq_literals" (formula "13") (term "0"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "true_left" (formula "13"))
                                     (builtin "Use Operation Contract" (formula "61") (newnames "heapBefore_sample_sort,exc_3,heapAfter_sample_sort,anon_heap_sample_sort") (contract "de.wiesler.Sorter[de.wiesler.Sorter::sample_sort([I,int,int,de.wiesler.Storage)].JML normal_behavior operation contract.0"))
                                    (branch "Post (sample_sort)"
                                        (builtin "One Step Simplification" (formula "63"))
                                        (builtin "One Step Simplification" (formula "58"))
                                       (rule "andLeft" (formula "58"))
                                       (rule "andLeft" (formula "59"))
                                       (rule "andLeft" (formula "60"))
                                       (rule "andLeft" (formula "59"))
                                       (rule "andLeft" (formula "59"))
                                       (rule "andLeft" (formula "60"))
                                       (rule "translateJavaSubInt" (formula "58") (term "2,0,1,0"))
                                       (rule "polySimp_elimSub" (formula "58") (term "2,0,1,0"))
                                       (rule "mul_literals" (formula "58") (term "1,2,0,1,0"))
                                       (rule "polySimp_addComm1" (formula "58") (term "2,0,1,0"))
                                       (rule "polySimp_addComm0" (formula "58") (term "0,2,0,1,0"))
                                       (rule "narrowSelectArrayType" (formula "59") (term "2,1") (ifseqformula "52") (ifseqformula "67"))
                                       (rule "commuteUnion" (formula "58") (term "1,0"))
                                       (rule "tryEmpty" (formula "68") (term "1"))
                                       (rule "blockEmptyLabel" (formula "68") (term "1"))
                                       (rule "blockEmpty" (formula "68") (term "1"))
                                       (rule "methodCallEmpty" (formula "68") (term "1"))
                                        (builtin "One Step Simplification" (formula "68"))
                                       (rule "emptyModality" (formula "68") (term "1"))
                                        (builtin "One Step Simplification" (formula "68"))
                                       (rule "closeTrue" (formula "68"))
                                    )
                                    (branch "Exceptional Post (sample_sort)"
                                        (builtin "One Step Simplification" (formula "63"))
                                        (builtin "One Step Simplification" (formula "58"))
                                       (rule "andLeft" (formula "58"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "59") (term "1,0") (ifseqformula "58"))
                                        (builtin "One Step Simplification" (formula "59"))
                                       (rule "andLeft" (formula "59"))
                                       (rule "andLeft" (formula "60"))
                                       (rule "andLeft" (formula "59"))
                                       (rule "notLeft" (formula "59"))
                                       (rule "close" (formula "62") (ifseqformula "61"))
                                    )
                                    (branch "Pre (sample_sort)"
                                        (builtin "One Step Simplification" (formula "61") (ifInst ""  (formula "60")) (ifInst ""  (formula "58")) (ifInst ""  (formula "52")) (ifInst ""  (formula "60")) (ifInst ""  (formula "5")) (ifInst ""  (formula "58")) (ifInst ""  (formula "6")))
                                       (rule "expand_inInt" (formula "61") (term "1,1,0"))
                                       (rule "expand_inInt" (formula "61") (term "0,1,0"))
                                       (rule "replace_int_MAX" (formula "61") (term "1,0,1,1,0"))
                                       (rule "replace_int_MIN" (formula "61") (term "0,1,1,1,0"))
                                       (rule "replace_int_MAX" (formula "61") (term "1,0,0,1,0"))
                                       (rule "replace_int_MIN" (formula "61") (term "0,1,0,1,0"))
                                       (rule "translateJavaSubInt" (formula "61") (term "0,0,1"))
                                       (rule "polySimp_elimSub" (formula "61") (term "0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "61") (term "1,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "61") (term "1,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "61") (term "0,1,0,0,1"))
                                       (rule "polySimp_addComm1" (formula "61") (term "0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "61") (term "0,0,0,1"))
                                       (rule "polySimp_pullOutFactor1" (formula "61") (term "0,0,0,0,1"))
                                       (rule "add_literals" (formula "61") (term "1,0,0,0,0,1"))
                                       (rule "times_zero_1" (formula "61") (term "0,0,0,0,1"))
                                       (rule "add_zero_left" (formula "61") (term "0,0,0,1"))
                                       (rule "measuredByCheck" (formula "61") (term "1") (ifseqformula "10"))
                                       (rule "precOfPair" (formula "61") (term "1"))
                                       (rule "polySimp_homoEq" (formula "61") (term "0,1,1"))
                                       (rule "polySimp_mulComm0" (formula "61") (term "1,0,0,1,1"))
                                       (rule "polySimp_rightDist" (formula "61") (term "1,0,0,1,1"))
                                       (rule "polySimp_mulAssoc" (formula "61") (term "0,1,0,0,1,1"))
                                       (rule "polySimp_mulComm0" (formula "61") (term "0,0,1,0,0,1,1"))
                                       (rule "polySimp_mulLiterals" (formula "61") (term "0,1,0,0,1,1"))
                                       (rule "polySimp_elimOne" (formula "61") (term "0,1,0,0,1,1"))
                                       (rule "polySimp_addAssoc" (formula "61") (term "0,0,1,1"))
                                       (rule "precOfInt" (formula "61") (term "0,1"))
                                       (rule "precOfInt" (formula "61") (term "1,1,1"))
                                       (rule "less_literals" (formula "61") (term "1,1,1,1"))
                                        (builtin "One Step Simplification" (formula "61"))
                                       (rule "inEqSimp_ltToLeq" (formula "61") (term "1,1"))
                                       (rule "polySimp_rightDist" (formula "61") (term "1,0,0,1,1"))
                                       (rule "polySimp_mulAssoc" (formula "61") (term "0,1,0,0,1,1"))
                                       (rule "polySimp_mulComm0" (formula "61") (term "0,0,1,0,0,1,1"))
                                       (rule "polySimp_mulLiterals" (formula "61") (term "0,1,0,0,1,1"))
                                       (rule "polySimp_elimOne" (formula "61") (term "0,1,0,0,1,1"))
                                       (rule "polySimp_addAssoc" (formula "61") (term "0,0,1,1"))
                                       (rule "polySimp_addAssoc" (formula "61") (term "0,1,1"))
                                       (rule "inEqSimp_homoInEq0" (formula "61") (term "0,1"))
                                       (rule "mul_literals" (formula "61") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "61") (term "0,0,1"))
                                       (rule "inEqSimp_homoInEq0" (formula "61") (term "1,0,1,0"))
                                       (rule "mul_literals" (formula "61") (term "1,0,1,0,1,0"))
                                       (rule "polySimp_addComm1" (formula "61") (term "0,1,0,1,0"))
                                       (rule "polySimp_addComm0" (formula "61") (term "0,0,1,0,1,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "61") (term "0,1,1,0"))
                                       (rule "polySimp_mulComm0" (formula "61") (term "1,0,0,1,1,0"))
                                       (rule "polySimp_rightDist" (formula "61") (term "1,0,0,1,1,0"))
                                       (rule "polySimp_mulComm0" (formula "61") (term "0,1,0,0,1,1,0"))
                                       (rule "polySimp_addAssoc" (formula "61") (term "0,0,1,1,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "61") (term "1,1,1,0"))
                                       (rule "mul_literals" (formula "61") (term "1,0,1,1,1,0"))
                                       (rule "polySimp_addComm1" (formula "61") (term "0,1,1,1,0"))
                                       (rule "polySimp_addComm0" (formula "61") (term "0,0,1,1,1,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "61") (term "0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "61") (term "1,0,0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "61") (term "1,0,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "61") (term "0,1,0,0,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "61") (term "0,0,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "61") (term "1,1"))
                                       (rule "polySimp_mulComm0" (formula "61") (term "1,1,1"))
                                       (rule "polySimp_rightDist" (formula "61") (term "1,1,1"))
                                       (rule "polySimp_mulLiterals" (formula "61") (term "1,1,1,1"))
                                       (rule "polySimp_elimOne" (formula "61") (term "1,1,1,1"))
                                       (rule "polySimp_rightDist" (formula "61") (term "0,1,1,1"))
                                       (rule "polySimp_mulLiterals" (formula "61") (term "1,0,1,1,1"))
                                       (rule "polySimp_elimOne" (formula "61") (term "1,0,1,1,1"))
                                       (rule "polySimp_rightDist" (formula "61") (term "0,0,1,1,1"))
                                       (rule "mul_literals" (formula "61") (term "0,0,0,1,1,1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "61") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "61") (term "1,0,1"))
                                       (rule "polySimp_elimOne" (formula "61") (term "1,0,1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "61") (term "1,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "61") (term "1,1,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "61") (term "1,1,0,1,0"))
                                       (rule "mul_literals" (formula "61") (term "0,1,1,0,1,0"))
                                       (rule "replace_known_left" (formula "61") (term "1,0,1,0") (ifseqformula "54"))
                                        (builtin "One Step Simplification" (formula "61"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "61") (term "0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "61") (term "0,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "61") (term "0,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "61") (term "1,1,1,0"))
                                       (rule "polySimp_mulComm0" (formula "61") (term "1,1,1,1,0"))
                                       (rule "polySimp_rightDist" (formula "61") (term "1,1,1,1,0"))
                                       (rule "mul_literals" (formula "61") (term "0,1,1,1,1,0"))
                                       (rule "replace_known_left" (formula "61") (term "1,1,1,0") (ifseqformula "56"))
                                        (builtin "One Step Simplification" (formula "61"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "61") (term "1,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "61") (term "0,1,1,0"))
                                       (rule "polySimp_elimOne" (formula "61") (term "0,1,1,0"))
                                       (rule "replace_known_left" (formula "61") (term "1,1,0") (ifseqformula "55"))
                                        (builtin "One Step Simplification" (formula "61"))
                                       (rule "inEqSimp_subsumption1" (formula "61") (term "0,1") (ifseqformula "3"))
                                       (rule "inEqSimp_homoInEq0" (formula "61") (term "0,0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "61") (term "0,0,0,1"))
                                       (rule "add_literals" (formula "61") (term "1,1,0,0,0,1"))
                                       (rule "times_zero_1" (formula "61") (term "1,0,0,0,1"))
                                       (rule "add_zero_right" (formula "61") (term "0,0,0,1"))
                                       (rule "qeq_literals" (formula "61") (term "0,0,1"))
                                        (builtin "One Step Simplification" (formula "61"))
                                       (rule "inEqSimp_subsumption0" (formula "61") (term "1,0") (ifseqformula "2"))
                                       (rule "inEqSimp_homoInEq0" (formula "61") (term "0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "61") (term "1,0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "61") (term "1,0,0,1,0"))
                                       (rule "mul_literals" (formula "61") (term "0,1,0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "61") (term "1,1,0,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "61") (term "1,1,0,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "61") (term "0,0,1,0"))
                                       (rule "polySimp_addComm1" (formula "61") (term "0,0,0,1,0"))
                                       (rule "add_literals" (formula "61") (term "0,0,0,0,1,0"))
                                       (rule "polySimp_pullOutFactor2b" (formula "61") (term "0,0,1,0"))
                                       (rule "add_literals" (formula "61") (term "1,1,0,0,1,0"))
                                       (rule "times_zero_1" (formula "61") (term "1,0,0,1,0"))
                                       (rule "add_zero_right" (formula "61") (term "0,0,1,0"))
                                       (rule "qeq_literals" (formula "61") (term "0,1,0"))
                                        (builtin "One Step Simplification" (formula "61"))
                                       (rule "Definition_axiom_for_isValidBucketStarts_in_de_wiesler_Functions" (formula "22") (term "0"))
                                        (builtin "One Step Simplification" (formula "22"))
                                       (rule "andLeft" (formula "22"))
                                       (rule "andLeft" (formula "22"))
                                       (rule "andLeft" (formula "22"))
                                       (rule "translateJavaAddInt" (formula "24") (term "3,0"))
                                       (rule "translateJavaAddInt" (formula "23") (term "0"))
                                       (rule "polySimp_addComm0" (formula "24") (term "3,0"))
                                       (rule "polySimp_addComm0" (formula "23") (term "0"))
                                       (rule "inEqSimp_commuteLeq" (formula "22"))
                                       (rule "inEqSimp_commuteLeq" (formula "23"))
                                       (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "22"))
                                       (rule "leq_literals" (formula "9") (term "0"))
                                        (builtin "One Step Simplification" (formula "9"))
                                       (rule "true_left" (formula "9"))
                                       (rule "Free_class_invariant_axiom_for_de_wiesler_Storage" (formula "38"))
                                        (builtin "One Step Simplification" (formula "38"))
                                       (rule "andLeft" (formula "38"))
                                       (rule "andLeft" (formula "38"))
                                       (rule "andLeft" (formula "40"))
                                       (rule "andLeft" (formula "38"))
                                       (rule "andLeft" (formula "41"))
                                       (rule "andLeft" (formula "38"))
                                       (rule "andLeft" (formula "42"))
                                       (rule "andLeft" (formula "38"))
                                       (rule "andLeft" (formula "43"))
                                       (rule "andLeft" (formula "38"))
                                       (rule "andLeft" (formula "44"))
                                       (rule "andLeft" (formula "38"))
                                       (rule "andLeft" (formula "45"))
                                       (rule "andLeft" (formula "38"))
                                       (rule "andLeft" (formula "46"))
                                       (rule "andLeft" (formula "38"))
                                       (rule "andLeft" (formula "47"))
                                       (rule "andLeft" (formula "47"))
                                       (rule "andLeft" (formula "47"))
                                       (rule "andLeft" (formula "47"))
                                       (rule "andLeft" (formula "47"))
                                       (rule "andLeft" (formula "47"))
                                       (rule "andLeft" (formula "47"))
                                       (rule "andLeft" (formula "47"))
                                       (rule "andLeft" (formula "47"))
                                       (rule "andLeft" (formula "47"))
                                       (rule "andLeft" (formula "47"))
                                       (rule "andLeft" (formula "47"))
                                       (rule "andLeft" (formula "47"))
                                       (rule "andLeft" (formula "47"))
                                       (rule "andLeft" (formula "47"))
                                       (rule "andLeft" (formula "47"))
                                       (rule "andLeft" (formula "47"))
                                       (rule "andLeft" (formula "47"))
                                       (rule "andLeft" (formula "47"))
                                       (rule "andLeft" (formula "47"))
                                       (rule "translateJavaMulInt" (formula "41") (term "1"))
                                       (rule "mul_literals" (formula "41") (term "1"))
                                       (rule "translateJavaMulInt" (formula "40") (term "1"))
                                       (rule "mul_literals" (formula "40") (term "1"))
                                       (rule "disjointDefinition" (formula "74"))
                                        (builtin "One Step Simplification" (formula "74"))
                                       (rule "notLeft" (formula "74"))
                                       (rule "disjointDefinition" (formula "73"))
                                        (builtin "One Step Simplification" (formula "73"))
                                       (rule "notLeft" (formula "73"))
                                       (rule "disjointDefinition" (formula "72"))
                                        (builtin "One Step Simplification" (formula "72"))
                                       (rule "notLeft" (formula "72"))
                                       (rule "eqSymm" (formula "92"))
                                       (rule "disjointDefinition" (formula "71"))
                                        (builtin "One Step Simplification" (formula "71"))
                                       (rule "notLeft" (formula "71"))
                                       (rule "eqSymm" (formula "91"))
                                       (rule "disjointDefinition" (formula "70"))
                                        (builtin "One Step Simplification" (formula "70"))
                                       (rule "notLeft" (formula "70"))
                                       (rule "eqSymm" (formula "90"))
                                       (rule "disjointDefinition" (formula "69"))
                                        (builtin "One Step Simplification" (formula "69"))
                                       (rule "notLeft" (formula "69"))
                                       (rule "eqSymm" (formula "89"))
                                       (rule "disjointDefinition" (formula "68"))
                                        (builtin "One Step Simplification" (formula "68"))
                                       (rule "notLeft" (formula "68"))
                                       (rule "eqSymm" (formula "88"))
                                       (rule "disjointDefinition" (formula "67"))
                                        (builtin "One Step Simplification" (formula "67"))
                                       (rule "notLeft" (formula "67"))
                                       (rule "eqSymm" (formula "87"))
                                       (rule "disjointDefinition" (formula "66"))
                                        (builtin "One Step Simplification" (formula "66"))
                                       (rule "notLeft" (formula "66"))
                                       (rule "eqSymm" (formula "86"))
                                       (rule "disjointDefinition" (formula "65"))
                                        (builtin "One Step Simplification" (formula "65"))
                                       (rule "notLeft" (formula "65"))
                                       (rule "eqSymm" (formula "85"))
                                       (rule "disjointDefinition" (formula "64"))
                                        (builtin "One Step Simplification" (formula "64"))
                                       (rule "notLeft" (formula "64"))
                                       (rule "eqSymm" (formula "84"))
                                       (rule "disjointDefinition" (formula "63"))
                                        (builtin "One Step Simplification" (formula "63"))
                                       (rule "notLeft" (formula "63"))
                                       (rule "eqSymm" (formula "83"))
                                       (rule "disjointDefinition" (formula "62"))
                                        (builtin "One Step Simplification" (formula "62"))
                                       (rule "notLeft" (formula "62"))
                                       (rule "eqSymm" (formula "82"))
                                       (rule "disjointDefinition" (formula "61"))
                                        (builtin "One Step Simplification" (formula "61"))
                                       (rule "notLeft" (formula "61"))
                                       (rule "eqSymm" (formula "81"))
                                       (rule "disjointDefinition" (formula "60"))
                                        (builtin "One Step Simplification" (formula "60"))
                                       (rule "notLeft" (formula "60"))
                                       (rule "eqSymm" (formula "80"))
                                       (rule "disjointDefinition" (formula "59"))
                                        (builtin "One Step Simplification" (formula "59"))
                                       (rule "notLeft" (formula "59"))
                                       (rule "disjointDefinition" (formula "58"))
                                        (builtin "One Step Simplification" (formula "58"))
                                       (rule "notLeft" (formula "58"))
                                       (rule "eqSymm" (formula "78"))
                                       (rule "disjointDefinition" (formula "57"))
                                        (builtin "One Step Simplification" (formula "57"))
                                       (rule "notLeft" (formula "57"))
                                       (rule "eqSymm" (formula "77"))
                                       (rule "disjointDefinition" (formula "56"))
                                        (builtin "One Step Simplification" (formula "56"))
                                       (rule "notLeft" (formula "56"))
                                       (rule "disjointDefinition" (formula "55"))
                                        (builtin "One Step Simplification" (formula "55"))
                                       (rule "notLeft" (formula "55"))
                                       (rule "disjointDefinition" (formula "54"))
                                        (builtin "One Step Simplification" (formula "54"))
                                       (rule "notLeft" (formula "54"))
                                       (rule "disjointDefinition" (formula "53"))
                                        (builtin "One Step Simplification" (formula "53"))
                                       (rule "notLeft" (formula "53"))
                                       (rule "disjointDefinition" (formula "52"))
                                        (builtin "One Step Simplification" (formula "52"))
                                       (rule "notLeft" (formula "52"))
                                       (rule "disjointDefinition" (formula "51"))
                                        (builtin "One Step Simplification" (formula "51"))
                                       (rule "notLeft" (formula "51"))
                                       (rule "disjointDefinition" (formula "50"))
                                        (builtin "One Step Simplification" (formula "50"))
                                       (rule "notLeft" (formula "50"))
                                       (rule "disjointDefinition" (formula "49"))
                                        (builtin "One Step Simplification" (formula "49"))
                                       (rule "notLeft" (formula "49"))
                                       (rule "disjointDefinition" (formula "48"))
                                        (builtin "One Step Simplification" (formula "48"))
                                       (rule "notLeft" (formula "48"))
                                       (rule "disjointDefinition" (formula "47"))
                                        (builtin "One Step Simplification" (formula "47"))
                                       (rule "notLeft" (formula "47"))
                                       (rule "applyEq" (formula "36") (term "1,0") (ifseqformula "46"))
                                       (rule "applyEq" (formula "37") (term "1,0") (ifseqformula "46"))
                                       (rule "distributeIntersection" (formula "36") (term "0"))
                                       (rule "distributeIntersection" (formula "37") (term "0"))
                                       (rule "distributeIntersection" (formula "36") (term "1,0"))
                                       (rule "distributeIntersection" (formula "36") (term "0,0"))
                                       (rule "distributeIntersection" (formula "37") (term "1,0"))
                                       (rule "distributeIntersection" (formula "37") (term "0,0"))
                                       (rule "distributeIntersection" (formula "36") (term "1,1,0"))
                                       (rule "distributeIntersection" (formula "36") (term "0,1,0"))
                                       (rule "distributeIntersection" (formula "36") (term "1,0,0"))
                                       (rule "distributeIntersection" (formula "36") (term "0,0,0"))
                                       (rule "distributeIntersection" (formula "37") (term "1,1,0"))
                                       (rule "distributeIntersection" (formula "37") (term "0,1,0"))
                                       (rule "distributeIntersection" (formula "37") (term "0,0,0"))
                                       (rule "distributeIntersection" (formula "37") (term "1,0,0"))
                                       (rule "unionEqualsEmpty" (formula "36"))
                                       (rule "andLeft" (formula "36"))
                                       (rule "unionEqualsEmpty" (formula "38"))
                                       (rule "andLeft" (formula "38"))
                                       (rule "unionEqualsEmpty" (formula "36"))
                                       (rule "andLeft" (formula "36"))
                                       (rule "unionEqualsEmpty" (formula "38"))
                                       (rule "andLeft" (formula "38"))
                                       (rule "unionEqualsEmpty" (formula "41"))
                                       (rule "andLeft" (formula "41"))
                                       (rule "unionEqualsEmpty" (formula "40"))
                                       (rule "andLeft" (formula "40"))
                                       (rule "unionEqualsEmpty" (formula "37"))
                                        (builtin "One Step Simplification" (formula "37"))
                                       (rule "andLeft" (formula "37"))
                                       (rule "notLeft" (formula "38"))
                                       (rule "notLeft" (formula "37"))
                                       (rule "eqSymm" (formula "73"))
                                       (rule "eqSymm" (formula "72"))
                                       (rule "unionEqualsEmpty" (formula "36"))
                                        (builtin "One Step Simplification" (formula "36"))
                                       (rule "andLeft" (formula "36"))
                                       (rule "notLeft" (formula "37"))
                                       (rule "notLeft" (formula "36"))
                                       (rule "eqSymm" (formula "72"))
                                       (rule "eqSymm" (formula "71"))
                                       (rule "unionEqualsEmpty" (formula "36"))
                                        (builtin "One Step Simplification" (formula "36"))
                                       (rule "andLeft" (formula "36"))
                                       (rule "notLeft" (formula "37"))
                                       (rule "notLeft" (formula "36"))
                                       (rule "eqSymm" (formula "71"))
                                       (rule "eqSymm" (formula "70"))
                                       (rule "unionEqualsEmpty" (formula "36"))
                                        (builtin "One Step Simplification" (formula "36"))
                                       (rule "andLeft" (formula "36"))
                                       (rule "notLeft" (formula "36"))
                                       (rule "notLeft" (formula "36"))
                                       (rule "eqSymm" (formula "70"))
                                       (rule "eqSymm" (formula "69"))
                                       (rule "unionEqualsEmpty" (formula "38"))
                                        (builtin "One Step Simplification" (formula "38"))
                                       (rule "andLeft" (formula "38"))
                                       (rule "notLeft" (formula "39"))
                                       (rule "notLeft" (formula "38"))
                                       (rule "eqSymm" (formula "69"))
                                       (rule "eqSymm" (formula "68"))
                                       (rule "unionEqualsEmpty" (formula "38"))
                                        (builtin "One Step Simplification" (formula "38"))
                                       (rule "andLeft" (formula "38"))
                                       (rule "notLeft" (formula "38"))
                                       (rule "notLeft" (formula "38"))
                                       (rule "eqSymm" (formula "68"))
                                       (rule "eqSymm" (formula "67"))
                                       (rule "unionEqualsEmpty" (formula "37"))
                                        (builtin "One Step Simplification" (formula "37"))
                                       (rule "andLeft" (formula "37"))
                                       (rule "notLeft" (formula "38"))
                                       (rule "notLeft" (formula "37"))
                                       (rule "eqSymm" (formula "67"))
                                       (rule "eqSymm" (formula "66"))
                                       (rule "unionEqualsEmpty" (formula "36"))
                                        (builtin "One Step Simplification" (formula "36"))
                                       (rule "andLeft" (formula "36"))
                                       (rule "notLeft" (formula "36"))
                                       (rule "notLeft" (formula "36"))
                                       (rule "eqSymm" (formula "66"))
                                       (rule "eqSymm" (formula "65"))
                                       (rule "commuteUnion" (formula "44") (term "0,1"))
                                       (rule "commuteUnion" (formula "44") (term "1,1,1"))
                                       (rule "commuteUnion" (formula "44") (term "1,0,1"))
                                       (rule "Definition_axiom_for_equalityBucketsInRange_in_de_wiesler_Sorter" (formula "34") (term "0,0,1") (inst "b=b"))
                                        (builtin "One Step Simplification" (formula "34"))
                                       (rule "expand_inInt" (formula "34") (term "1,0,0,0,1"))
                                       (rule "replace_int_MAX" (formula "34") (term "1,0,1,0,0,0,1"))
                                       (rule "replace_int_MIN" (formula "34") (term "0,1,1,0,0,0,1"))
                                       (rule "translateJavaMod" (formula "34") (term "0,1,0,0,0,0,1"))
                                       (rule "translateJavaAddInt" (formula "34") (term "2,0,1,0,0,1"))
                                       (rule "translateJavaAddInt" (formula "34") (term "3,0,1,0,0,1"))
                                       (rule "translateJavaAddInt" (formula "34") (term "0,2,1,3,0,1,0,0,1"))
                                       (rule "polySimp_addComm0" (formula "34") (term "0,2,1,3,0,1,0,0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0,0,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,0,0,0,1"))
                                       (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,0,0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,0,0,0,1"))
                                       (rule "add_literals" (formula "34") (term "0,0,0,1,0,0,0,0,0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0,0,0,0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "34") (term "1,1,0,0,0,1"))
                                       (rule "jmod_axiom" (formula "34") (term "0,1,0,0,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "34") (term "1,0,1,0,0,0,0,1"))
                                       (rule "polySimp_homoEq" (formula "34") (term "1,0,0,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "34") (term "1,0,1,0,0,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "34") (term "1,0,1,0,0,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,1,0,0,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "34") (term "0,1,0,1,0,0,0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "34") (term "0,1,0,0,0,0,1"))
                                       (rule "polySimp_sepPosMonomial" (formula "34") (term "1,0,0,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,0,0,1"))
                                       (rule "mul_literals" (formula "34") (term "0,1,1,0,0,0,0,1"))
                                       (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,0,0,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0,0,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,0,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,0,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,0,0,0,1"))
                                       (rule "mul_literals" (formula "34") (term "0,1,1,0,0,0,0,0,1"))
                                       (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,0,0,0,1"))
                                       (rule "Definition_axiom_for_allBucketsInRangeSorted_in_de_wiesler_Sorter" (formula "26") (term "0") (inst "b=b"))
                                        (builtin "One Step Simplification" (formula "26"))
                                       (rule "expand_inInt" (formula "26") (term "1,0,0"))
                                       (rule "replace_int_MIN" (formula "26") (term "0,1,1,0,0"))
                                       (rule "replace_int_MAX" (formula "26") (term "1,0,1,0,0"))
                                       (rule "translateJavaAddInt" (formula "26") (term "2,0,1,0"))
                                       (rule "translateJavaAddInt" (formula "26") (term "0,2,1,3,0,1,0"))
                                       (rule "translateJavaAddInt" (formula "26") (term "3,0,1,0"))
                                       (rule "polySimp_addComm0" (formula "26") (term "0,2,1,3,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "26") (term "1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,0"))
                                       (rule "mul_literals" (formula "26") (term "0,1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,0"))
                                       (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "10"))
                                       (rule "andLeft" (formula "10"))
                                       (rule "notLeft" (formula "11"))
                                       (rule "andLeft" (formula "10"))
                                       (rule "notLeft" (formula "11"))
                                       (rule "andLeft" (formula "10"))
                                       (rule "andLeft" (formula "10"))
                                       (rule "notLeft" (formula "12"))
                                       (rule "notLeft" (formula "11"))
                                       (rule "andLeft" (formula "10"))
                                       (rule "andLeft" (formula "10"))
                                       (rule "notLeft" (formula "12"))
                                       (rule "andLeft" (formula "10"))
                                       (rule "notLeft" (formula "12"))
                                       (rule "notLeft" (formula "11"))
                                       (rule "notLeft" (formula "10"))
                                       (rule "Definition_axiom_for_smallBucketsInRangeSorted_in_de_wiesler_Sorter" (formula "27") (term "0") (inst "b=b"))
                                        (builtin "One Step Simplification" (formula "27"))
                                       (rule "expand_inInt" (formula "27") (term "1,0,0"))
                                       (rule "replace_int_MAX" (formula "27") (term "1,0,1,0,0"))
                                       (rule "replace_int_MIN" (formula "27") (term "0,1,1,0,0"))
                                       (rule "translateJavaAddInt" (formula "27") (term "0,2,5,0,1,0"))
                                       (rule "polySimp_addComm0" (formula "27") (term "0,2,5,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "27") (term "1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,0"))
                                       (rule "mul_literals" (formula "27") (term "0,1,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,0"))
                                       (rule "Definition_axiom_for_bucketStartsOrdering_in_de_wiesler_Functions" (formula "46") (term "0") (inst "b=b"))
                                        (builtin "One Step Simplification" (formula "46"))
                                       (rule "replaceKnownSelect_taclet21210110_4" (formula "46") (term "1,1,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet21210110_5" (formula "46") (term "1,1,0"))
                                       (rule "replaceKnownSelect_taclet21210110_1" (formula "46") (term "0,1,0,0"))
                                       (rule "replaceKnownSelect_taclet21210110_1" (formula "46") (term "1,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet21210110_2" (formula "46") (term "0,1,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet21210110_2" (formula "46") (term "1,0,0,0"))
                                       (rule "replaceKnownSelect_taclet21210110_1" (formula "46") (term "1,1,1,0,1,0,1"))
                                       (rule "replaceKnownSelect_taclet21210110_4" (formula "46") (term "1,1,1,1,1,0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet21210110_2" (formula "46") (term "1,1,1,0,1,0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet21210110_5" (formula "46") (term "1,1,1,1,1,0,1"))
                                       (rule "expand_inInt" (formula "46") (term "1,0,0,1"))
                                       (rule "replace_int_MAX" (formula "46") (term "1,0,1,0,0,1"))
                                       (rule "replace_int_MIN" (formula "46") (term "0,1,1,0,0,1"))
                                       (rule "andLeft" (formula "46"))
                                       (rule "andLeft" (formula "46"))
                                       (rule "andLeft" (formula "46"))
                                       (rule "translateJavaAddInt" (formula "49") (term "0,2,1,1,0,1,0,1,0"))
                                       (rule "translateJavaAddInt" (formula "49") (term "0,2,0,0,0,1,1,1,0"))
                                       (rule "translateJavaAddInt" (formula "49") (term "0,2,0,1,1,0,1,0"))
                                       (rule "translateJavaAddInt" (formula "49") (term "0,2,1,1,0,1,1,1,0"))
                                       (rule "translateJavaAddInt" (formula "49") (term "0,2,0,1,1,1,1,0"))
                                       (rule "translateJavaAddInt" (formula "48") (term "0,2,0"))
                                       (rule "translateJavaAddInt" (formula "47") (term "0,2,1"))
                                       (rule "polySimp_addComm0" (formula "49") (term "0,2,1,1,0,1,0,1,0"))
                                       (rule "polySimp_addComm0" (formula "49") (term "0,2,0,0,0,1,1,1,0"))
                                       (rule "replaceKnownSelect_taclet21210110_7" (formula "49") (term "0,0,0,1,1,1,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet21210110_8" (formula "49") (term "0,0,0,1,1,1,0"))
                                       (rule "polySimp_addComm0" (formula "49") (term "0,2,0,1,1,0,1,0"))
                                       (rule "polySimp_addComm0" (formula "49") (term "0,2,1,1,0,1,1,1,0"))
                                       (rule "polySimp_addComm0" (formula "49") (term "0,2,0,1,1,1,1,0"))
                                       (rule "polySimp_addComm0" (formula "48") (term "0,2,0"))
                                       (rule "replaceKnownSelect_taclet21210110_7" (formula "48") (term "0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet21210110_8" (formula "48") (term "0"))
                                       (rule "polySimp_addComm0" (formula "47") (term "0,2,1"))
                                       (rule "replaceKnownSelect_taclet21210110_7" (formula "47") (term "1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet21210110_8" (formula "47") (term "1"))
                                       (rule "inEqSimp_ltToLeq" (formula "49") (term "0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "49") (term "1,0,0,0,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "49") (term "1,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "49") (term "1,0,0,1,0,0,0,0"))
                                       (rule "inEqSimp_gtToGeq" (formula "49") (term "0,1,1,0"))
                                       (rule "polySimp_mulComm0" (formula "49") (term "1,0,0,0,1,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "49") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "49") (term "0,0,1,0,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "49") (term "1,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "46"))
                                       (rule "inEqSimp_commuteLeq" (formula "48") (term "1,0,1,0,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "48") (term "0,0,1,1,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "48") (term "1,0,1,1,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "47"))
                                       (rule "inEqSimp_commuteLeq" (formula "46"))
                                       (rule "applyEq" (formula "48") (term "1,1,1,1,1,0") (ifseqformula "24"))
                                       (rule "applyEq" (formula "47") (term "0") (ifseqformula "24"))
                                       (rule "inEqSimp_commuteGeq" (formula "47"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "47") (term "0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "47") (term "1,0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "47") (term "1,0,0,1,0"))
                                       (rule "mul_literals" (formula "47") (term "0,1,0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "47") (term "1,1,0,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "47") (term "1,1,0,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "47") (term "1,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "47") (term "1,1,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "47") (term "1,1,0,0,0,0"))
                                       (rule "mul_literals" (formula "47") (term "0,1,1,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "47") (term "1,1,1,0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "47") (term "1,1,1,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "47") (term "0,1,1,0"))
                                       (rule "polySimp_mulComm0" (formula "47") (term "1,0,1,1,0"))
                                       (rule "polySimp_rightDist" (formula "47") (term "1,0,1,1,0"))
                                       (rule "mul_literals" (formula "47") (term "0,1,0,1,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "47") (term "1,1,0,1,1,0"))
                                       (rule "polySimp_elimOne" (formula "47") (term "1,1,0,1,1,0"))
                                       (rule "inEqSimp_subsumption1" (formula "46") (ifseqformula "3"))
                                       (rule "inEqSimp_homoInEq0" (formula "46") (term "0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "46") (term "0,0"))
                                       (rule "add_literals" (formula "46") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "46") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "46") (term "0,0"))
                                       (rule "qeq_literals" (formula "46") (term "0"))
                                        (builtin "One Step Simplification" (formula "46"))
                                       (rule "true_left" (formula "46"))
                                       (rule "Definition_axiom_for_allBucketsPartitioned_in_de_wiesler_Sorter" (formula "26") (term "0") (inst "b=b"))
                                        (builtin "One Step Simplification" (formula "26"))
                                       (rule "expand_inInt" (formula "26") (term "1,0,0"))
                                       (rule "replace_int_MAX" (formula "26") (term "1,0,1,0,0"))
                                       (rule "replace_int_MIN" (formula "26") (term "0,1,1,0,0"))
                                       (rule "translateJavaAddInt" (formula "26") (term "0,2,5,0,1,0"))
                                       (rule "polySimp_addComm0" (formula "26") (term "0,2,5,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "26") (term "1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,0"))
                                       (rule "mul_literals" (formula "26") (term "0,1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,0"))
                                       (rule "Definition_axiom_for_notAllValuesInOneBucket_in_de_wiesler_Sorter" (formula "34") (term "0") (inst "b=b"))
                                        (builtin "One Step Simplification" (formula "34"))
                                       (rule "expand_inInt" (formula "34") (term "1,0,0"))
                                       (rule "replace_int_MAX" (formula "34") (term "1,0,1,0,0"))
                                       (rule "replace_int_MIN" (formula "34") (term "0,1,1,0,0"))
                                       (rule "translateJavaSubInt" (formula "34") (term "0,1,0"))
                                       (rule "translateJavaAddInt" (formula "34") (term "0,2,0,0,1,0"))
                                       (rule "polySimp_elimSub" (formula "34") (term "0,1,0"))
                                       (rule "polySimp_addComm0" (formula "34") (term "0,2,0,0,1,0"))
                                       (rule "polySimp_addComm0" (formula "34") (term "0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0"))
                                       (rule "polySimp_mulAssoc" (formula "34") (term "0,1,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "34") (term "0,0,1,0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "34") (term "0,1,0,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "34") (term "0,1,0,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "34") (term "0,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "34") (term "1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,0"))
                                       (rule "mul_literals" (formula "34") (term "0,1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0"))
                                       (rule "polySimp_mulComm0" (formula "34") (term "1,1,0"))
                                       (rule "polySimp_rightDist" (formula "34") (term "1,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0"))
                                       (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0"))
                                       (rule "polySimp_rightDist" (formula "34") (term "0,1,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "34") (term "1,0,1,1,0"))
                                       (rule "polySimp_elimOne" (formula "34") (term "1,0,1,1,0"))
                                       (rule "polySimp_rightDist" (formula "34") (term "0,0,1,1,0"))
                                       (rule "mul_literals" (formula "34") (term "0,0,0,1,1,0"))
                                       (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "120") (term "0"))
                                       (rule "replace_known_right" (formula "120") (term "0,1,0,0,0,0,0") (ifseqformula "67"))
                                        (builtin "One Step Simplification" (formula "120") (ifInst ""  (formula "64")) (ifInst ""  (formula "65")) (ifInst ""  (formula "66")) (ifInst ""  (formula "68")) (ifInst ""  (formula "69")) (ifInst ""  (formula "70")) (ifInst ""  (formula "71")))
                                       (rule "inEqSimp_leqRight" (formula "120"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "1") (term "0,0,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "1") (term "0,0,0,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                       (rule "polySimp_rightDist" (formula "1") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,0,1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "0,0,1"))
                                       (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "63"))
                                       (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "polySimp_rightDist" (formula "1") (term "0,0,0"))
                                       (rule "polySimp_mulAssoc" (formula "1") (term "0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "0,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "1") (term "0,0,0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                                       (rule "polySimp_addComm0" (formula "1") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                                       (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "1") (term "0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                       (rule "polySimp_elimOne" (formula "1") (term "0"))
                                       (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "54"))
                                       (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0"))
                                       (rule "polySimp_rightDist" (formula "2") (term "0,0,0"))
                                       (rule "polySimp_mulAssoc" (formula "2") (term "0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "0,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0,0,0"))
                                       (rule "polySimp_pullOutFactor2b" (formula "2") (term "0,0"))
                                       (rule "add_literals" (formula "2") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "2") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "2") (term "0,0"))
                                       (rule "polySimp_pullOutFactor1" (formula "2") (term "0,0"))
                                       (rule "add_literals" (formula "2") (term "1,0,0"))
                                       (rule "times_zero_1" (formula "2") (term "0,0"))
                                       (rule "add_zero_left" (formula "2") (term "0"))
                                       (rule "inEqSimp_invertInEq1" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                       (rule "mul_literals" (formula "2") (term "1"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0"))
                                       (rule "inEqSimp_exactShadow3" (formula "64") (ifseqformula "1"))
                                       (rule "polySimp_rightDist" (formula "64") (term "0,0"))
                                       (rule "mul_literals" (formula "64") (term "0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "64") (term "1,0,0"))
                                       (rule "polySimp_elimOne" (formula "64") (term "1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "64") (term "0"))
                                       (rule "polySimp_addComm1" (formula "64") (term "0,0"))
                                       (rule "add_literals" (formula "64") (term "0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "64"))
                                       (rule "polySimp_mulLiterals" (formula "64") (term "0"))
                                       (rule "polySimp_elimOne" (formula "64") (term "0"))
                                       (rule "inEqSimp_subsumption0" (formula "64") (ifseqformula "18"))
                                       (rule "inEqSimp_homoInEq0" (formula "64") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "64") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "64") (term "1,0,0"))
                                       (rule "mul_literals" (formula "64") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "64") (term "0,0"))
                                       (rule "polySimp_addComm1" (formula "64") (term "0,0,0"))
                                       (rule "add_literals" (formula "64") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "64") (term "0,0"))
                                       (rule "add_literals" (formula "64") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "64") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "64") (term "0,0"))
                                       (rule "qeq_literals" (formula "64") (term "0"))
                                        (builtin "One Step Simplification" (formula "64"))
                                       (rule "true_left" (formula "64"))
                                       (rule "inEqSimp_exactShadow3" (formula "54") (ifseqformula "1"))
                                       (rule "times_zero_1" (formula "54") (term "0,0"))
                                       (rule "add_zero_left" (formula "54") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "54"))
                                       (rule "polySimp_mulLiterals" (formula "54") (term "0"))
                                       (rule "polySimp_elimOne" (formula "54") (term "0"))
                                       (rule "inEqSimp_subsumption0" (formula "54") (ifseqformula "16"))
                                       (rule "leq_literals" (formula "54") (term "0"))
                                        (builtin "One Step Simplification" (formula "54"))
                                       (rule "true_left" (formula "54"))
                                       (rule "inEqSimp_antiSymm" (formula "54") (ifseqformula "2"))
                                       (rule "applyEq" (formula "1") (term "0") (ifseqformula "54"))
                                       (rule "inEqSimp_homoInEq0" (formula "1"))
                                       (rule "mul_literals" (formula "1") (term "1,0"))
                                       (rule "add_zero_right" (formula "1") (term "0"))
                                       (rule "applyEq" (formula "2") (term "0") (ifseqformula "54"))
                                       (rule "leq_literals" (formula "2"))
                                       (rule "true_left" (formula "2"))
                                       (rule "applyEq" (formula "4") (term "0") (ifseqformula "53"))
                                       (rule "inEqSimp_homoInEq0" (formula "4"))
                                       (rule "mul_literals" (formula "4") (term "1,0"))
                                       (rule "add_zero_right" (formula "4") (term "0"))
                                       (rule "applyEq" (formula "54") (term "0") (ifseqformula "53"))
                                       (rule "qeq_literals" (formula "54"))
                                       (rule "true_left" (formula "54"))
                                       (rule "applyEq" (formula "2") (term "1,1") (ifseqformula "53"))
                                       (rule "add_zero_right" (formula "2") (term "1"))
                                       (rule "applyEq" (formula "57") (term "1,1,0") (ifseqformula "53"))
                                       (rule "applyEq" (formula "48") (term "1,1,1,0,1,0") (ifseqformula "53"))
                                       (rule "applyEq" (formula "3") (term "0") (ifseqformula "53"))
                                       (rule "inEqSimp_homoInEq0" (formula "3"))
                                       (rule "mul_literals" (formula "3") (term "1,0"))
                                       (rule "add_zero_right" (formula "3") (term "0"))
                                       (rule "applyEq" (formula "5") (term "1,1") (ifseqformula "53"))
                                       (rule "add_zero_right" (formula "5") (term "1"))
                                       (rule "applyEq" (formula "63") (term "0") (ifseqformula "53"))
                                       (rule "inEqSimp_homoInEq1" (formula "63"))
                                       (rule "mul_literals" (formula "63") (term "1,0"))
                                       (rule "add_zero_right" (formula "63") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                       (rule "polySimp_elimOne" (formula "1") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                                       (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                       (rule "polySimp_elimOne" (formula "4") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                       (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                       (rule "polySimp_rightDist" (formula "3") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                       (rule "mul_literals" (formula "3") (term "0,1"))
                                       (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "62"))
                                       (rule "polySimp_mulLiterals" (formula "62") (term "0"))
                                       (rule "polySimp_elimOne" (formula "62") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "62") (ifseqformula "11"))
                                       (rule "leq_literals" (formula "62") (term "0"))
                                        (builtin "One Step Simplification" (formula "62"))
                                       (rule "true_left" (formula "62"))
                                       (rule "inEqSimp_subsumption0" (formula "1") (ifseqformula "14"))
                                       (rule "leq_literals" (formula "1") (term "0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "inEqSimp_subsumption0" (formula "2") (ifseqformula "49"))
                                       (rule "leq_literals" (formula "2") (term "0"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "true_left" (formula "2"))
                                       (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "51"))
                                       (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
                                       (rule "inEqSimp_homoInEq1" (formula "3"))
                                       (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                       (rule "polySimp_mulAssoc" (formula "3") (term "0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "3") (term "0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "0,1,0"))
                                       (rule "polySimp_elimOne" (formula "3") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                       (rule "applyEq" (formula "56") (term "1,1,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "46") (term "1,0,0,1,1,1,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                       (rule "inEqSimp_homoInEq1" (formula "2"))
                                       (rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
                                       (rule "add_literals" (formula "2") (term "1,0"))
                                       (rule "times_zero_1" (formula "2") (term "0"))
                                       (rule "leq_literals" (formula "2"))
                                       (rule "true_left" (formula "2"))
                                       (rule "applyEq" (formula "61") (term "0") (ifseqformula "1"))
                                       (rule "inEqSimp_homoInEq1" (formula "61"))
                                       (rule "polySimp_mulComm0" (formula "61") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "61") (term "1,0"))
                                       (rule "polySimp_mulAssoc" (formula "61") (term "0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "61") (term "0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "61") (term "0,1,0"))
                                       (rule "polySimp_elimOne" (formula "61") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "61") (term "0"))
                                       (rule "polySimp_pullOutFactor2b" (formula "61") (term "0,0"))
                                       (rule "add_literals" (formula "61") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "61") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "61") (term "0,0"))
                                       (rule "applyEq" (formula "51") (term "0") (ifseqformula "1"))
                                       (rule "inEqSimp_homoInEq0" (formula "51"))
                                       (rule "polySimp_pullOutFactor1" (formula "51") (term "0"))
                                       (rule "add_literals" (formula "51") (term "1,0"))
                                       (rule "times_zero_1" (formula "51") (term "0"))
                                       (rule "qeq_literals" (formula "51"))
                                       (rule "true_left" (formula "51"))
                                       (rule "applyEq" (formula "59") (term "0") (ifseqformula "1"))
                                       (rule "inEqSimp_homoInEq0" (formula "59"))
                                       (rule "polySimp_mulComm0" (formula "59") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "59") (term "1,0"))
                                       (rule "polySimp_mulAssoc" (formula "59") (term "0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "59") (term "0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "59") (term "0,1,0"))
                                       (rule "polySimp_elimOne" (formula "59") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "59") (term "0"))
                                       (rule "polySimp_pullOutFactor2b" (formula "59") (term "0,0"))
                                       (rule "add_literals" (formula "59") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "59") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "59") (term "0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "59"))
                                       (rule "polySimp_mulLiterals" (formula "59") (term "0"))
                                       (rule "polySimp_elimOne" (formula "59") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "58"))
                                       (rule "polySimp_mulLiterals" (formula "58") (term "0"))
                                       (rule "polySimp_elimOne" (formula "58") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "59") (ifseqformula "57"))
                                       (rule "leq_literals" (formula "59") (term "0"))
                                        (builtin "One Step Simplification" (formula "59"))
                                       (rule "true_left" (formula "59"))
                                       (rule "inEqSimp_subsumption0" (formula "58") (ifseqformula "11"))
                                       (rule "leq_literals" (formula "58") (term "0"))
                                        (builtin "One Step Simplification" (formula "58"))
                                       (rule "true_left" (formula "58"))
                                       (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "20") (term "0") (inst "i=i") (inst "j=j"))
                                        (builtin "One Step Simplification" (formula "20"))
                                       (rule "expand_inInt" (formula "20") (term "1,0,0,1,0"))
                                       (rule "expand_inInt" (formula "20") (term "1,0,0"))
                                       (rule "replace_int_MIN" (formula "20") (term "0,1,1,0,0,1,0"))
                                       (rule "replace_int_MAX" (formula "20") (term "1,0,1,0,0,1,0"))
                                       (rule "replace_int_MAX" (formula "20") (term "1,0,1,0,0"))
                                       (rule "replace_int_MIN" (formula "20") (term "0,1,1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,0"))
                                       (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,0"))
                                       (rule "add_literals" (formula "20") (term "0,0,0,1,0,0,0"))
                                       (rule "add_zero_left" (formula "20") (term "0,0,1,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,0,1,0"))
                                       (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,0,1,0"))
                                       (rule "add_literals" (formula "20") (term "0,0,0,1,0,0,0,1,0"))
                                       (rule "add_zero_left" (formula "20") (term "0,0,1,0,0,0,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,0,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "20") (term "1,0,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "20") (term "1,1,0,0,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "20") (term "1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0,1,0"))
                                       (rule "nnf_imp2or" (formula "23") (term "0"))
                                       (rule "nnf_imp2or" (formula "31") (term "0,0,1"))
                                       (rule "nnf_imp2or" (formula "25") (term "0"))
                                       (rule "nnf_imp2or" (formula "24") (term "0"))
                                       (rule "nnf_imp2or" (formula "32") (term "0"))
                                       (rule "arrayLengthIsAShort" (formula "19") (term "0"))
                                       (rule "expand_inShort" (formula "19"))
                                       (rule "replace_short_MAX" (formula "19") (term "1,0"))
                                       (rule "replace_short_MIN" (formula "19") (term "0,1"))
                                       (rule "andLeft" (formula "19"))
                                       (rule "inEqSimp_commuteLeq" (formula "20"))
                                       (rule "inEqSimp_exactShadow3" (formula "21") (ifseqformula "19"))
                                       (rule "polySimp_rightDist" (formula "21") (term "0,0"))
                                       (rule "mul_literals" (formula "21") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "21") (term "0"))
                                       (rule "add_literals" (formula "21") (term "0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "21"))
                                       (rule "polySimp_mulLiterals" (formula "21") (term "0"))
                                       (rule "polySimp_elimOne" (formula "21") (term "0"))
                                       (rule "inEqSimp_subsumption0" (formula "6") (ifseqformula "21"))
                                       (rule "leq_literals" (formula "6") (term "0"))
                                        (builtin "One Step Simplification" (formula "6"))
                                       (rule "true_left" (formula "6"))
                                       (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "20"))
                                       (rule "polySimp_rightDist" (formula "16") (term "0,0"))
                                       (rule "mul_literals" (formula "16") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "16") (term "0"))
                                       (rule "add_literals" (formula "16") (term "0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "16"))
                                       (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                                       (rule "polySimp_elimOne" (formula "16") (term "0"))
                                       (rule "inEqSimp_subsumption0" (formula "15") (ifseqformula "16"))
                                       (rule "leq_literals" (formula "15") (term "0"))
                                        (builtin "One Step Simplification" (formula "15"))
                                       (rule "true_left" (formula "15"))
                                       (rule "inEqSimp_exactShadow3" (formula "30") (ifseqformula "15"))
                                       (rule "polySimp_mulAssoc" (formula "30") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "30") (term "0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "30") (term "0,0"))
                                       (rule "polySimp_addComm0" (formula "30") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "30"))
                                       (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                                       (rule "elimGcdLeq_antec" (formula "30") (inst "elimGcdRightDiv=Z(2(8(3(6(1(#))))))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(2(#))"))
                                       (rule "polySimp_mulLiterals" (formula "30") (term "1,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "30") (term "1,0,0,0,0,1,0"))
                                       (rule "leq_literals" (formula "30") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "30"))
                                       (rule "mul_literals" (formula "30") (term "1,0,0,0,0,0"))
                                       (rule "neg_literal" (formula "30") (term "0,0,0,0,0,0"))
                                       (rule "polySimp_addLiterals" (formula "30") (term "0,0,0,0"))
                                       (rule "add_literals" (formula "30") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "30") (term "0,0"))
                                       (rule "add_literals" (formula "30") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "30") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "30") (term "0,0"))
                                       (rule "qeq_literals" (formula "30") (term "0"))
                                        (builtin "One Step Simplification" (formula "30"))
                                       (rule "inEqSimp_subsumption0" (formula "29") (ifseqformula "30"))
                                       (rule "leq_literals" (formula "29") (term "0"))
                                        (builtin "One Step Simplification" (formula "29"))
                                       (rule "true_left" (formula "29"))
                                       (rule "arrayLengthNotNegative" (formula "21") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "19") (ifseqformula "21"))
                                       (rule "leq_literals" (formula "19") (term "0"))
                                        (builtin "One Step Simplification" (formula "19"))
                                       (rule "true_left" (formula "19"))
                                       (rule "associativeLawUnion" (formula "43") (term "1"))
                                       (rule "nnf_imp2or" (formula "46") (term "0,1,0"))
                                       (rule "inEqSimp_notLeq" (formula "46") (term "0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "46") (term "1,0,0,0,0,1,0"))
                                       (rule "mul_literals" (formula "46") (term "0,1,0,0,0,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "46") (term "0,0,0,0,1,0"))
                                       (rule "add_literals" (formula "46") (term "0,0,0,0,0,1,0"))
                                       (rule "add_zero_left" (formula "46") (term "0,0,0,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "46") (term "0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "46") (term "1,0,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "46") (term "1,0,0,1,0"))
                                       (rule "arrayLengthIsAShort" (formula "42") (term "0"))
                                       (rule "expand_inShort" (formula "42"))
                                       (rule "replace_short_MIN" (formula "42") (term "0,1"))
                                       (rule "replace_short_MAX" (formula "42") (term "1,0"))
                                       (rule "andLeft" (formula "42"))
                                       (rule "inEqSimp_commuteLeq" (formula "43"))
                                       (rule "applyEq" (formula "43") (term "0") (ifseqformula "44"))
                                       (rule "qeq_literals" (formula "43"))
                                       (rule "true_left" (formula "43"))
                                       (rule "applyEq" (formula "42") (term "0") (ifseqformula "43"))
                                       (rule "leq_literals" (formula "42"))
                                       (rule "true_left" (formula "42"))
                                       (rule "arrayLengthNotNegative" (formula "42") (term "0"))
                                       (rule "applyEq" (formula "42") (term "0") (ifseqformula "43"))
                                       (rule "qeq_literals" (formula "42"))
                                       (rule "true_left" (formula "42"))
                                       (rule "arrayLengthIsAShort" (formula "41") (term "0"))
                                       (rule "expand_inShort" (formula "41"))
                                       (rule "replace_short_MIN" (formula "41") (term "0,1"))
                                       (rule "replace_short_MAX" (formula "41") (term "1,0"))
                                       (rule "andLeft" (formula "41"))
                                       (rule "inEqSimp_commuteLeq" (formula "42"))
                                       (rule "applyEq" (formula "41") (term "0") (ifseqformula "43"))
                                       (rule "leq_literals" (formula "41"))
                                       (rule "true_left" (formula "41"))
                                       (rule "applyEq" (formula "41") (term "0") (ifseqformula "42"))
                                       (rule "qeq_literals" (formula "41"))
                                       (rule "true_left" (formula "41"))
                                       (rule "arrayLengthNotNegative" (formula "41") (term "0"))
                                       (rule "applyEq" (formula "41") (term "0") (ifseqformula "42"))
                                       (rule "qeq_literals" (formula "41"))
                                       (rule "true_left" (formula "41"))
                                       (rule "arrayLengthIsAShort" (formula "40") (term "0"))
                                       (rule "expand_inShort" (formula "40"))
                                       (rule "replace_short_MIN" (formula "40") (term "0,1"))
                                       (rule "replace_short_MAX" (formula "40") (term "1,0"))
                                       (rule "andLeft" (formula "40"))
                                       (rule "inEqSimp_commuteLeq" (formula "41"))
                                       (rule "applyEq" (formula "40") (term "0") (ifseqformula "42"))
                                       (rule "leq_literals" (formula "40"))
                                       (rule "true_left" (formula "40"))
                                       (rule "applyEq" (formula "40") (term "0") (ifseqformula "41"))
                                       (rule "qeq_literals" (formula "40"))
                                       (rule "true_left" (formula "40"))
                                       (rule "arrayLengthNotNegative" (formula "40") (term "0"))
                                       (rule "applyEq" (formula "40") (term "0") (ifseqformula "41"))
                                       (rule "qeq_literals" (formula "40"))
                                       (rule "true_left" (formula "40"))
                                       (rule "arrayLengthIsAShort" (formula "39") (term "0"))
                                       (rule "expand_inShort" (formula "39"))
                                       (rule "replace_short_MIN" (formula "39") (term "0,1"))
                                       (rule "replace_short_MAX" (formula "39") (term "1,0"))
                                       (rule "andLeft" (formula "39"))
                                       (rule "inEqSimp_commuteLeq" (formula "40"))
                                       (rule "applyEq" (formula "40") (term "0") (ifseqformula "41"))
                                       (rule "qeq_literals" (formula "40"))
                                       (rule "true_left" (formula "40"))
                                       (rule "applyEq" (formula "39") (term "0") (ifseqformula "40"))
                                       (rule "leq_literals" (formula "39"))
                                       (rule "true_left" (formula "39"))
                                       (rule "arrayLengthNotNegative" (formula "39") (term "0"))
                                       (rule "applyEq" (formula "39") (term "0") (ifseqformula "40"))
                                       (rule "qeq_literals" (formula "39"))
                                       (rule "true_left" (formula "39"))
                                       (rule "arrayLengthNotNegative" (formula "38") (term "0"))
                                       (rule "applyEq" (formula "38") (term "0") (ifseqformula "39"))
                                       (rule "qeq_literals" (formula "38"))
                                       (rule "true_left" (formula "38"))
                                       (rule "arrayLengthIsAShort" (formula "38") (term "0"))
                                       (rule "expand_inShort" (formula "38"))
                                       (rule "replace_short_MIN" (formula "38") (term "0,1"))
                                       (rule "replace_short_MAX" (formula "38") (term "1,0"))
                                       (rule "andLeft" (formula "38"))
                                       (rule "inEqSimp_commuteLeq" (formula "39"))
                                       (rule "applyEq" (formula "38") (term "0") (ifseqformula "40"))
                                       (rule "leq_literals" (formula "38"))
                                       (rule "closeFalse" (formula "38"))
                                    )
                                 )
                                 (branch "if x_7 false"
                                     (builtin "One Step Simplification" (formula "62"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "inEqSimp_geqRight" (formula "57"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "mul_literals" (formula "1") (term "0,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (rule "inEqSimp_exactShadow3" (formula "57") (ifseqformula "1"))
                                    (rule "polySimp_rightDist" (formula "57") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "57") (term "1,0,0"))
                                    (rule "mul_literals" (formula "57") (term "0,0,0"))
                                    (rule "polySimp_elimOne" (formula "57") (term "1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "57") (term "0"))
                                    (rule "polySimp_addComm1" (formula "57") (term "0,0"))
                                    (rule "add_literals" (formula "57") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "57"))
                                    (rule "polySimp_mulComm0" (formula "57") (term "1"))
                                    (rule "polySimp_rightDist" (formula "57") (term "1"))
                                    (rule "mul_literals" (formula "57") (term "0,1"))
                                    (rule "inEqSimp_subsumption1" (formula "57") (ifseqformula "55"))
                                    (rule "inEqSimp_homoInEq0" (formula "57") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "57") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "57") (term "1,0,0"))
                                    (rule "mul_literals" (formula "57") (term "0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "57") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "57") (term "1,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "57") (term "0,0"))
                                    (rule "polySimp_addComm1" (formula "57") (term "0,0,0"))
                                    (rule "add_literals" (formula "57") (term "0,0,0,0"))
                                    (rule "polySimp_pullOutFactor2b" (formula "57") (term "0,0"))
                                    (rule "add_literals" (formula "57") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "57") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "57") (term "0,0"))
                                    (rule "qeq_literals" (formula "57") (term "0"))
                                     (builtin "One Step Simplification" (formula "57"))
                                    (rule "true_left" (formula "57"))
                                    (rule "elim_double_block_2" (formula "62") (term "1"))
                                     (builtin "Use Operation Contract" (formula "62") (newnames "heapBefore_base_case_sort,exc_3,heapAfter_base_case_sort,anon_heap_base_case_sort") (contract "de.wiesler.Sorter[de.wiesler.Sorter::base_case_sort([I,int,int)].JML normal_behavior operation contract.0"))
                                    (branch "Post (base_case_sort)"
                                        (builtin "One Step Simplification" (formula "59"))
                                        (builtin "One Step Simplification" (formula "64"))
                                       (rule "andLeft" (formula "59"))
                                       (rule "andLeft" (formula "60"))
                                       (rule "andLeft" (formula "60"))
                                       (rule "andLeft" (formula "60"))
                                       (rule "translateJavaSubInt" (formula "59") (term "2,1,0"))
                                       (rule "polySimp_elimSub" (formula "59") (term "2,1,0"))
                                       (rule "mul_literals" (formula "59") (term "1,2,1,0"))
                                       (rule "polySimp_addComm1" (formula "59") (term "2,1,0"))
                                       (rule "polySimp_addComm0" (formula "59") (term "0,2,1,0"))
                                       (rule "narrowSelectArrayType" (formula "60") (term "2,1") (ifseqformula "53") (ifseqformula "66"))
                                       (rule "tryEmpty" (formula "67") (term "1"))
                                       (rule "blockEmptyLabel" (formula "67") (term "1"))
                                       (rule "blockEmpty" (formula "67") (term "1"))
                                       (rule "methodCallEmpty" (formula "67") (term "1"))
                                        (builtin "One Step Simplification" (formula "67"))
                                       (rule "emptyModality" (formula "67") (term "1"))
                                        (builtin "One Step Simplification" (formula "67"))
                                       (rule "closeTrue" (formula "67"))
                                    )
                                    (branch "Exceptional Post (base_case_sort)"
                                        (builtin "One Step Simplification" (formula "64"))
                                        (builtin "One Step Simplification" (formula "59"))
                                       (rule "andLeft" (formula "59"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "60") (term "1,0") (ifseqformula "59"))
                                        (builtin "One Step Simplification" (formula "60"))
                                       (rule "andLeft" (formula "60"))
                                       (rule "andLeft" (formula "60"))
                                       (rule "notLeft" (formula "60"))
                                       (rule "close" (formula "62") (ifseqformula "61"))
                                    )
                                    (branch "Pre (base_case_sort)"
                                        (builtin "One Step Simplification" (formula "62") (ifInst ""  (formula "61")) (ifInst ""  (formula "53")) (ifInst ""  (formula "61")) (ifInst ""  (formula "3")))
                                       (rule "expand_inInt" (formula "62") (term "1"))
                                       (rule "expand_inInt" (formula "62") (term "0"))
                                       (rule "replace_int_MAX" (formula "62") (term "1,0,1"))
                                       (rule "replace_int_MIN" (formula "62") (term "0,1,1"))
                                       (rule "replace_int_MAX" (formula "62") (term "1,0,0"))
                                       (rule "replace_int_MIN" (formula "62") (term "0,1,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "62") (term "0,1"))
                                       (rule "polySimp_mulComm0" (formula "62") (term "1,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "62") (term "1,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "62") (term "0,1,0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "62") (term "0,0,1"))
                                       (rule "inEqSimp_homoInEq0" (formula "62") (term "1,1"))
                                       (rule "mul_literals" (formula "62") (term "1,0,1,1"))
                                       (rule "polySimp_addComm1" (formula "62") (term "0,1,1"))
                                       (rule "polySimp_addComm0" (formula "62") (term "0,0,1,1"))
                                       (rule "inEqSimp_homoInEq0" (formula "62") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "62") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "62") (term "1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "62") (term "0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "62") (term "0,0,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "62") (term "1,0"))
                                       (rule "mul_literals" (formula "62") (term "1,0,1,0"))
                                       (rule "polySimp_addComm1" (formula "62") (term "0,1,0"))
                                       (rule "polySimp_addComm0" (formula "62") (term "0,0,1,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "62") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "62") (term "0,0,1"))
                                       (rule "polySimp_elimOne" (formula "62") (term "0,0,1"))
                                       (rule "replace_known_left" (formula "62") (term "0,1") (ifseqformula "56"))
                                        (builtin "One Step Simplification" (formula "62"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "62") (term "1,0"))
                                       (rule "polySimp_mulComm0" (formula "62") (term "1,1,0"))
                                       (rule "polySimp_rightDist" (formula "62") (term "1,1,0"))
                                       (rule "mul_literals" (formula "62") (term "0,1,1,0"))
                                       (rule "replace_known_left" (formula "62") (term "1,0") (ifseqformula "55"))
                                        (builtin "One Step Simplification" (formula "62"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "62") (term "1"))
                                       (rule "polySimp_mulComm0" (formula "62") (term "1,1"))
                                       (rule "polySimp_rightDist" (formula "62") (term "1,1"))
                                       (rule "mul_literals" (formula "62") (term "0,1,1"))
                                       (rule "replace_known_left" (formula "62") (term "1") (ifseqformula "57"))
                                        (builtin "One Step Simplification" (formula "62"))
                                       (rule "inEqSimp_geqRight" (formula "62"))
                                       (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "1") (term "0,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                       (rule "polySimp_elimOne" (formula "1") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "56") (ifseqformula "1"))
                                       (rule "inEqSimp_homoInEq0" (formula "56") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "56") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "56") (term "1,0,0"))
                                       (rule "mul_literals" (formula "56") (term "0,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "56") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "56") (term "1,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "56") (term "0,0"))
                                       (rule "polySimp_addComm1" (formula "56") (term "0,0,0"))
                                       (rule "add_literals" (formula "56") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor2b" (formula "56") (term "0,0"))
                                       (rule "add_literals" (formula "56") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "56") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "56") (term "0,0"))
                                       (rule "qeq_literals" (formula "56") (term "0"))
                                        (builtin "One Step Simplification" (formula "56"))
                                       (rule "true_left" (formula "56"))
                                       (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "55"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "inEqSimp_homoInEq1" (formula "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                                       (rule "mul_literals" (formula "1") (term "0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0"))
                                       (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
                                       (rule "add_literals" (formula "1") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "1") (term "1,0"))
                                       (rule "add_literals" (formula "1") (term "0"))
                                       (rule "leq_literals" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                 )
                              )
                           )
                           (branch "Precondition"
                               (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "53")) (ifInst ""  (formula "4")) (ifInst ""  (formula "55")) (ifInst ""  (formula "2")))
                              (rule "wellFormedAnon" (formula "56") (term "1,0"))
                              (rule "wellFormedAnon" (formula "56") (term "0,1,0"))
                              (rule "expand_inInt" (formula "56") (term "1,1"))
                              (rule "expand_inInt" (formula "56") (term "0,1"))
                              (rule "replace_int_MAX" (formula "56") (term "1,0,1,1"))
                              (rule "replace_int_MIN" (formula "56") (term "0,1,1,1"))
                              (rule "replace_int_MIN" (formula "56") (term "0,1,0,1"))
                              (rule "replace_int_MAX" (formula "56") (term "1,0,0,1"))
                              (rule "translateJavaSubInt" (formula "56") (term "0,0,0,0"))
                              (rule "replace_known_left" (formula "56") (term "1,1,0") (ifseqformula "41"))
                               (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "1")) (ifInst ""  (formula "38")))
                              (rule "polySimp_elimSub" (formula "56") (term "0,0,0"))
                              (rule "polySimp_addComm0" (formula "56") (term "0,0,0"))
                              (rule "replace_known_left" (formula "56") (term "0") (ifseqformula "8"))
                               (builtin "One Step Simplification" (formula "56"))
                              (rule "inEqSimp_homoInEq0" (formula "56") (term "1,0"))
                              (rule "mul_literals" (formula "56") (term "1,0,1,0"))
                              (rule "polySimp_addComm1" (formula "56") (term "0,1,0"))
                              (rule "polySimp_addComm0" (formula "56") (term "0,0,1,0"))
                              (rule "inEqSimp_homoInEq0" (formula "56") (term "0,1"))
                              (rule "polySimp_mulComm0" (formula "56") (term "1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "56") (term "1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "56") (term "0,1,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "56") (term "0,0,1"))
                              (rule "inEqSimp_homoInEq0" (formula "56") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "56") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "56") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "56") (term "0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "56") (term "0,0,0"))
                              (rule "inEqSimp_homoInEq0" (formula "56") (term "1,1"))
                              (rule "mul_literals" (formula "56") (term "1,0,1,1"))
                              (rule "polySimp_addComm1" (formula "56") (term "0,1,1"))
                              (rule "polySimp_addComm0" (formula "56") (term "0,0,1,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "56") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "56") (term "1,1,0"))
                              (rule "polySimp_rightDist" (formula "56") (term "1,1,0"))
                              (rule "mul_literals" (formula "56") (term "0,1,1,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "56") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "56") (term "0,0,1"))
                              (rule "polySimp_elimOne" (formula "56") (term "0,0,1"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "56") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "56") (term "0,0,0"))
                              (rule "polySimp_elimOne" (formula "56") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "56") (term "1,1"))
                              (rule "polySimp_mulComm0" (formula "56") (term "1,1,1"))
                              (rule "polySimp_rightDist" (formula "56") (term "1,1,1"))
                              (rule "mul_literals" (formula "56") (term "0,1,1,1"))
                              (rule "Definition_axiom_for_bucketStartsOrdering_in_de_wiesler_Functions" (formula "39") (term "0") (inst "b=b"))
                               (builtin "One Step Simplification" (formula "39"))
                              (rule "replaceKnownSelect_taclet21210110_4" (formula "39") (term "1,1,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet21210110_5" (formula "39") (term "1,1,0"))
                              (rule "replaceKnownSelect_taclet21210110_1" (formula "39") (term "1,0,0,0"))
                              (rule "replaceKnownSelect_taclet21210110_1" (formula "39") (term "0,1,0,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet21210110_2" (formula "39") (term "1,0,0,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet21210110_2" (formula "39") (term "0,1,0,0"))
                              (rule "replaceKnownSelect_taclet21210110_1" (formula "39") (term "1,1,1,0,1,0,1"))
                              (rule "replaceKnownSelect_taclet21210110_4" (formula "39") (term "1,1,1,1,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet21210110_2" (formula "39") (term "1,1,1,0,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet21210110_5" (formula "39") (term "1,1,1,1,1,0,1"))
                              (rule "expand_inInt" (formula "39") (term "1,0,0,1"))
                              (rule "replace_int_MAX" (formula "39") (term "1,0,1,0,0,1"))
                              (rule "replace_int_MIN" (formula "39") (term "0,1,1,0,0,1"))
                              (rule "andLeft" (formula "39"))
                              (rule "andLeft" (formula "39"))
                              (rule "andLeft" (formula "39"))
                              (rule "translateJavaAddInt" (formula "42") (term "0,2,1,1,0,1,0,1,0"))
                              (rule "translateJavaAddInt" (formula "42") (term "0,2,0,1,1,1,1,0"))
                              (rule "translateJavaAddInt" (formula "42") (term "0,2,0,1,1,0,1,0"))
                              (rule "translateJavaAddInt" (formula "42") (term "0,2,0,0,0,1,1,1,0"))
                              (rule "translateJavaAddInt" (formula "42") (term "0,2,1,1,0,1,1,1,0"))
                              (rule "translateJavaAddInt" (formula "41") (term "0,2,0"))
                              (rule "translateJavaAddInt" (formula "40") (term "0,2,1"))
                              (rule "polySimp_addComm0" (formula "42") (term "0,2,1,1,0,1,0,1,0"))
                              (rule "polySimp_addComm0" (formula "42") (term "0,2,0,1,1,1,1,0"))
                              (rule "polySimp_addComm0" (formula "42") (term "0,2,0,1,1,0,1,0"))
                              (rule "polySimp_addComm0" (formula "42") (term "0,2,0,0,0,1,1,1,0"))
                              (rule "replaceKnownSelect_taclet21210110_7" (formula "42") (term "0,0,0,1,1,1,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet21210110_8" (formula "42") (term "0,0,0,1,1,1,0"))
                              (rule "polySimp_addComm0" (formula "42") (term "0,2,1,1,0,1,1,1,0"))
                              (rule "polySimp_addComm0" (formula "41") (term "0,2,0"))
                              (rule "replaceKnownSelect_taclet21210110_7" (formula "41") (term "0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet21210110_8" (formula "41") (term "0"))
                              (rule "polySimp_addComm0" (formula "40") (term "0,2,1"))
                              (rule "replaceKnownSelect_taclet21210110_7" (formula "40") (term "1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet21210110_8" (formula "40") (term "1"))
                              (rule "inEqSimp_gtToGeq" (formula "42") (term "0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,0,1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "42") (term "0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "42") (term "1,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,1,0,0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "42") (term "0,0,0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "42") (term "1,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "42") (term "0,0,1,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "39"))
                              (rule "inEqSimp_commuteLeq" (formula "41") (term "1,0,1,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "41") (term "0,0,1,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "41") (term "1,0,1,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "40"))
                              (rule "inEqSimp_commuteLeq" (formula "39"))
                              (rule "applyEq" (formula "39") (term "0") (ifseqformula "23"))
                              (rule "inEqSimp_commuteGeq" (formula "39"))
                              (rule "applyEq" (formula "39") (term "1,1,1,1,1,0") (ifseqformula "23"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "39") (term "1,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "39") (term "1,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,1,1,0"))
                              (rule "mul_literals" (formula "39") (term "0,1,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "39") (term "1,1,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "39") (term "1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "39") (term "0,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "39") (term "1,1,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "39") (term "1,1,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "39") (term "1,1,0,0,0,0"))
                              (rule "mul_literals" (formula "39") (term "0,1,1,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "39") (term "1,1,1,0,0,0,0"))
                              (rule "nnf_imp2or" (formula "39") (term "0"))
                              (rule "nnf_notAnd" (formula "39") (term "0,0"))
                              (rule "nnf_imp2or" (formula "39") (term "1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "39") (term "0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "39") (term "1,0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "39") (term "0,1,0,0,0,1,1,0"))
                              (rule "polySimp_addAssoc" (formula "39") (term "0,0,0,1,1,0"))
                              (rule "add_literals" (formula "39") (term "0,0,0,0,1,1,0"))
                              (rule "add_zero_left" (formula "39") (term "0,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "39") (term "1,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "39") (term "1,0,1,1,0"))
                              (rule "nnf_imp2or" (formula "39") (term "0,1,0"))
                              (rule "inEqSimp_notLeq" (formula "39") (term "0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "39") (term "1,0,0,0,0,1,0"))
                              (rule "mul_literals" (formula "39") (term "0,1,0,0,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "39") (term "0,0,0,0,1,0"))
                              (rule "add_literals" (formula "39") (term "0,0,0,0,0,1,0"))
                              (rule "add_zero_left" (formula "39") (term "0,0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "39") (term "1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "39") (term "1,0,0,1,0"))
                              (rule "nnf_notAnd" (formula "39") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "39"))
                              (rule "nnf_notAnd" (formula "39") (term "1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "39") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "39") (term "1,0,0,1,1,0,0"))
                              (rule "add_literals" (formula "39") (term "0,0,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "39") (term "1,1,1,0,0"))
                              (rule "inEqSimp_notLeq" (formula "39") (term "0,1,0,0"))
                              (rule "mul_literals" (formula "39") (term "1,0,0,0,1,0,0"))
                              (rule "add_literals" (formula "39") (term "0,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "0,1,0,0"))
                              (rule "mul_literals" (formula "39") (term "1,0,1,0,0"))
                              (rule "nnf_notAnd" (formula "39") (term "0,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "39") (term "1,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "39") (term "1,0,0,1,0,0,0,0"))
                              (rule "mul_literals" (formula "39") (term "0,1,0,0,1,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "39") (term "0,0,1,0,0,0,0"))
                              (rule "add_literals" (formula "39") (term "0,0,0,1,0,0,0,0"))
                              (rule "add_zero_left" (formula "39") (term "0,0,1,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "1,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "39") (term "1,1,0,0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "39") (term "0,0,0,0,0"))
                              (rule "mul_literals" (formula "39") (term "1,0,0,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "39") (term "0,0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "0,0,0,0,0"))
                              (rule "mul_literals" (formula "39") (term "1,0,0,0,0,0"))
                              (rule "Definition_axiom_for_allBucketsInRangeSorted_in_de_wiesler_Sorter" (formula "24") (term "0") (inst "b=b"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "expand_inInt" (formula "24") (term "1,0,0"))
                              (rule "replace_int_MAX" (formula "24") (term "1,0,1,0,0"))
                              (rule "replace_int_MIN" (formula "24") (term "0,1,1,0,0"))
                              (rule "translateJavaAddInt" (formula "24") (term "3,0,1,0"))
                              (rule "translateJavaAddInt" (formula "24") (term "2,0,1,0"))
                              (rule "translateJavaAddInt" (formula "24") (term "0,2,1,3,0,1,0"))
                              (rule "polySimp_addComm0" (formula "24") (term "0,2,1,3,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "24") (term "1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,0"))
                              (rule "mul_literals" (formula "24") (term "0,1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,0"))
                              (rule "nnf_imp2or" (formula "24") (term "0"))
                              (rule "nnf_notAnd" (formula "24") (term "0,0"))
                              (rule "nnf_notAnd" (formula "24") (term "1,0,0"))
                              (rule "inEqSimp_notLeq" (formula "24") (term "0,1,0,0"))
                              (rule "mul_literals" (formula "24") (term "1,0,0,0,1,0,0"))
                              (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "0,1,0,0"))
                              (rule "mul_literals" (formula "24") (term "1,0,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "24") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "24") (term "1,0,0,1,1,0,0"))
                              (rule "add_literals" (formula "24") (term "0,0,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "24") (term "1,1,1,0,0"))
                              (rule "nnf_notAnd" (formula "24") (term "0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,0"))
                              (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,0"))
                              (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,0"))
                              (rule "add_zero_left" (formula "24") (term "0,0,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,0"))
                              (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "24") (term "0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,0"))
                              (rule "mul_literals" (formula "24") (term "1,0,0,0,0"))
                              (rule "Definition_axiom_for_smallBucketsInRangeSorted_in_de_wiesler_Sorter" (formula "26") (term "0") (inst "b=b"))
                               (builtin "One Step Simplification" (formula "26"))
                              (rule "expand_inInt" (formula "26") (term "1,0,0"))
                              (rule "replace_int_MAX" (formula "26") (term "1,0,1,0,0"))
                              (rule "replace_int_MIN" (formula "26") (term "0,1,1,0,0"))
                              (rule "translateJavaAddInt" (formula "26") (term "0,2,5,0,1,0"))
                              (rule "polySimp_addComm0" (formula "26") (term "0,2,5,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "26") (term "1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,0"))
                              (rule "mul_literals" (formula "26") (term "0,1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,0"))
                              (rule "Free_class_invariant_axiom_for_de_wiesler_Storage" (formula "36"))
                               (builtin "One Step Simplification" (formula "36"))
                              (rule "andLeft" (formula "36"))
                              (rule "andLeft" (formula "37"))
                              (rule "andLeft" (formula "36"))
                              (rule "andLeft" (formula "38"))
                              (rule "andLeft" (formula "36"))
                              (rule "andLeft" (formula "39"))
                              (rule "andLeft" (formula "36"))
                              (rule "andLeft" (formula "40"))
                              (rule "andLeft" (formula "36"))
                              (rule "andLeft" (formula "41"))
                              (rule "andLeft" (formula "36"))
                              (rule "andLeft" (formula "42"))
                              (rule "andLeft" (formula "36"))
                              (rule "andLeft" (formula "43"))
                              (rule "andLeft" (formula "36"))
                              (rule "andLeft" (formula "44"))
                              (rule "andLeft" (formula "36"))
                              (rule "andLeft" (formula "45"))
                              (rule "andLeft" (formula "45"))
                              (rule "andLeft" (formula "45"))
                              (rule "andLeft" (formula "45"))
                              (rule "andLeft" (formula "45"))
                              (rule "andLeft" (formula "45"))
                              (rule "andLeft" (formula "45"))
                              (rule "andLeft" (formula "45"))
                              (rule "andLeft" (formula "45"))
                              (rule "andLeft" (formula "45"))
                              (rule "andLeft" (formula "45"))
                              (rule "andLeft" (formula "45"))
                              (rule "andLeft" (formula "45"))
                              (rule "andLeft" (formula "45"))
                              (rule "andLeft" (formula "45"))
                              (rule "andLeft" (formula "45"))
                              (rule "andLeft" (formula "45"))
                              (rule "andLeft" (formula "45"))
                              (rule "andLeft" (formula "45"))
                              (rule "translateJavaMulInt" (formula "39") (term "1"))
                              (rule "mul_literals" (formula "39") (term "1"))
                              (rule "translateJavaMulInt" (formula "38") (term "1"))
                              (rule "mul_literals" (formula "38") (term "1"))
                              (rule "disjointDefinition" (formula "72"))
                               (builtin "One Step Simplification" (formula "72"))
                              (rule "notLeft" (formula "72"))
                              (rule "disjointDefinition" (formula "71"))
                               (builtin "One Step Simplification" (formula "71"))
                              (rule "notLeft" (formula "71"))
                              (rule "disjointDefinition" (formula "70"))
                               (builtin "One Step Simplification" (formula "70"))
                              (rule "notLeft" (formula "70"))
                              (rule "eqSymm" (formula "85"))
                              (rule "disjointDefinition" (formula "69"))
                               (builtin "One Step Simplification" (formula "69"))
                              (rule "notLeft" (formula "69"))
                              (rule "eqSymm" (formula "84"))
                              (rule "disjointDefinition" (formula "68"))
                               (builtin "One Step Simplification" (formula "68"))
                              (rule "notLeft" (formula "68"))
                              (rule "eqSymm" (formula "83"))
                              (rule "disjointDefinition" (formula "67"))
                               (builtin "One Step Simplification" (formula "67"))
                              (rule "notLeft" (formula "67"))
                              (rule "eqSymm" (formula "82"))
                              (rule "disjointDefinition" (formula "66"))
                               (builtin "One Step Simplification" (formula "66"))
                              (rule "notLeft" (formula "66"))
                              (rule "eqSymm" (formula "81"))
                              (rule "disjointDefinition" (formula "65"))
                               (builtin "One Step Simplification" (formula "65"))
                              (rule "notLeft" (formula "65"))
                              (rule "eqSymm" (formula "80"))
                              (rule "disjointDefinition" (formula "64"))
                               (builtin "One Step Simplification" (formula "64"))
                              (rule "notLeft" (formula "64"))
                              (rule "eqSymm" (formula "79"))
                              (rule "disjointDefinition" (formula "63"))
                               (builtin "One Step Simplification" (formula "63"))
                              (rule "notLeft" (formula "63"))
                              (rule "eqSymm" (formula "78"))
                              (rule "disjointDefinition" (formula "62"))
                               (builtin "One Step Simplification" (formula "62"))
                              (rule "notLeft" (formula "62"))
                              (rule "eqSymm" (formula "77"))
                              (rule "disjointDefinition" (formula "61"))
                               (builtin "One Step Simplification" (formula "61"))
                              (rule "notLeft" (formula "61"))
                              (rule "eqSymm" (formula "76"))
                              (rule "disjointDefinition" (formula "60"))
                               (builtin "One Step Simplification" (formula "60"))
                              (rule "notLeft" (formula "60"))
                              (rule "eqSymm" (formula "75"))
                              (rule "disjointDefinition" (formula "59"))
                               (builtin "One Step Simplification" (formula "59"))
                              (rule "notLeft" (formula "59"))
                              (rule "eqSymm" (formula "74"))
                              (rule "disjointDefinition" (formula "58"))
                               (builtin "One Step Simplification" (formula "58"))
                              (rule "notLeft" (formula "58"))
                              (rule "eqSymm" (formula "73"))
                              (rule "disjointDefinition" (formula "57"))
                               (builtin "One Step Simplification" (formula "57"))
                              (rule "notLeft" (formula "57"))
                              (rule "disjointDefinition" (formula "56"))
                               (builtin "One Step Simplification" (formula "56"))
                              (rule "notLeft" (formula "56"))
                              (rule "eqSymm" (formula "71"))
                              (rule "disjointDefinition" (formula "55"))
                               (builtin "One Step Simplification" (formula "55"))
                              (rule "notLeft" (formula "55"))
                              (rule "eqSymm" (formula "70"))
                              (rule "disjointDefinition" (formula "54"))
                               (builtin "One Step Simplification" (formula "54"))
                              (rule "notLeft" (formula "54"))
                              (rule "disjointDefinition" (formula "53"))
                               (builtin "One Step Simplification" (formula "53"))
                              (rule "notLeft" (formula "53"))
                              (rule "disjointDefinition" (formula "52"))
                               (builtin "One Step Simplification" (formula "52"))
                              (rule "notLeft" (formula "52"))
                              (rule "disjointDefinition" (formula "51"))
                               (builtin "One Step Simplification" (formula "51"))
                              (rule "notLeft" (formula "51"))
                              (rule "disjointDefinition" (formula "50"))
                               (builtin "One Step Simplification" (formula "50"))
                              (rule "notLeft" (formula "50"))
                              (rule "disjointDefinition" (formula "49"))
                               (builtin "One Step Simplification" (formula "49"))
                              (rule "notLeft" (formula "49"))
                              (rule "disjointDefinition" (formula "48"))
                               (builtin "One Step Simplification" (formula "48"))
                              (rule "notLeft" (formula "48"))
                              (rule "disjointDefinition" (formula "47"))
                               (builtin "One Step Simplification" (formula "47"))
                              (rule "notLeft" (formula "47"))
                              (rule "disjointDefinition" (formula "45"))
                               (builtin "One Step Simplification" (formula "45"))
                              (rule "notLeft" (formula "45"))
                              (rule "disjointDefinition" (formula "45"))
                               (builtin "One Step Simplification" (formula "45"))
                              (rule "notLeft" (formula "45"))
                              (rule "applyEq" (formula "35") (term "1,0") (ifseqformula "44"))
                              (rule "applyEq" (formula "34") (term "1,0") (ifseqformula "44"))
                              (rule "distributeIntersection" (formula "35") (term "0"))
                              (rule "distributeIntersection" (formula "34") (term "0"))
                              (rule "distributeIntersection" (formula "35") (term "0,0"))
                              (rule "distributeIntersection" (formula "35") (term "1,0"))
                              (rule "distributeIntersection" (formula "34") (term "1,0"))
                              (rule "distributeIntersection" (formula "34") (term "0,0"))
                              (rule "distributeIntersection" (formula "35") (term "0,0,0"))
                              (rule "distributeIntersection" (formula "35") (term "1,0,0"))
                              (rule "distributeIntersection" (formula "35") (term "0,1,0"))
                              (rule "distributeIntersection" (formula "35") (term "1,1,0"))
                              (rule "distributeIntersection" (formula "34") (term "0,1,0"))
                              (rule "distributeIntersection" (formula "34") (term "1,1,0"))
                              (rule "distributeIntersection" (formula "34") (term "0,0,0"))
                              (rule "distributeIntersection" (formula "34") (term "1,0,0"))
                              (rule "unionEqualsEmpty" (formula "35"))
                              (rule "andLeft" (formula "35"))
                              (rule "unionEqualsEmpty" (formula "34"))
                              (rule "andLeft" (formula "34"))
                              (rule "unionEqualsEmpty" (formula "37"))
                              (rule "andLeft" (formula "37"))
                              (rule "unionEqualsEmpty" (formula "36"))
                              (rule "andLeft" (formula "36"))
                              (rule "unionEqualsEmpty" (formula "35"))
                              (rule "andLeft" (formula "35"))
                              (rule "unionEqualsEmpty" (formula "34"))
                              (rule "andLeft" (formula "34"))
                              (rule "unionEqualsEmpty" (formula "41"))
                               (builtin "One Step Simplification" (formula "41"))
                              (rule "andLeft" (formula "41"))
                              (rule "notLeft" (formula "42"))
                              (rule "notLeft" (formula "41"))
                              (rule "eqSymm" (formula "66"))
                              (rule "eqSymm" (formula "65"))
                              (rule "unionEqualsEmpty" (formula "40"))
                               (builtin "One Step Simplification" (formula "40"))
                              (rule "andLeft" (formula "40"))
                              (rule "notLeft" (formula "40"))
                              (rule "notLeft" (formula "40"))
                              (rule "eqSymm" (formula "65"))
                              (rule "eqSymm" (formula "64"))
                              (rule "unionEqualsEmpty" (formula "38"))
                               (builtin "One Step Simplification" (formula "38"))
                              (rule "andLeft" (formula "38"))
                              (rule "notLeft" (formula "38"))
                              (rule "notLeft" (formula "38"))
                              (rule "eqSymm" (formula "64"))
                              (rule "eqSymm" (formula "63"))
                              (rule "unionEqualsEmpty" (formula "38"))
                               (builtin "One Step Simplification" (formula "38"))
                              (rule "andLeft" (formula "38"))
                              (rule "notLeft" (formula "39"))
                              (rule "notLeft" (formula "38"))
                              (rule "eqSymm" (formula "63"))
                              (rule "eqSymm" (formula "62"))
                              (rule "unionEqualsEmpty" (formula "36"))
                               (builtin "One Step Simplification" (formula "36"))
                              (rule "andLeft" (formula "36"))
                              (rule "notLeft" (formula "37"))
                              (rule "notLeft" (formula "36"))
                              (rule "eqSymm" (formula "62"))
                              (rule "eqSymm" (formula "61"))
                              (rule "unionEqualsEmpty" (formula "36"))
                               (builtin "One Step Simplification" (formula "36"))
                              (rule "andLeft" (formula "36"))
                              (rule "notLeft" (formula "36"))
                              (rule "notLeft" (formula "36"))
                              (rule "eqSymm" (formula "61"))
                              (rule "eqSymm" (formula "60"))
                              (rule "unionEqualsEmpty" (formula "35"))
                               (builtin "One Step Simplification" (formula "35"))
                              (rule "andLeft" (formula "35"))
                              (rule "notLeft" (formula "35"))
                              (rule "notLeft" (formula "35"))
                              (rule "eqSymm" (formula "60"))
                              (rule "eqSymm" (formula "59"))
                              (rule "unionEqualsEmpty" (formula "34"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "andLeft" (formula "34"))
                              (rule "notLeft" (formula "35"))
                              (rule "notLeft" (formula "34"))
                              (rule "eqSymm" (formula "59"))
                              (rule "eqSymm" (formula "58"))
                              (rule "commuteUnion" (formula "42") (term "0,0,1"))
                              (rule "commuteUnion" (formula "42") (term "1,1,1"))
                              (rule "commuteUnion" (formula "42") (term "0,1"))
                              (rule "Definition_axiom_for_allBucketsPartitioned_in_de_wiesler_Sorter" (formula "25") (term "0") (inst "b=b"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "expand_inInt" (formula "25") (term "1,0,0"))
                              (rule "replace_int_MIN" (formula "25") (term "0,1,1,0,0"))
                              (rule "replace_int_MAX" (formula "25") (term "1,0,1,0,0"))
                              (rule "translateJavaAddInt" (formula "25") (term "0,2,5,0,1,0"))
                              (rule "polySimp_addComm0" (formula "25") (term "0,2,5,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "25") (term "1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,0"))
                              (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "9"))
                              (rule "andLeft" (formula "9"))
                              (rule "andLeft" (formula "9"))
                              (rule "notLeft" (formula "11"))
                              (rule "notLeft" (formula "10"))
                              (rule "andLeft" (formula "9"))
                              (rule "notLeft" (formula "10"))
                              (rule "andLeft" (formula "9"))
                              (rule "andLeft" (formula "9"))
                              (rule "notLeft" (formula "11"))
                              (rule "andLeft" (formula "9"))
                              (rule "notLeft" (formula "11"))
                              (rule "andLeft" (formula "9"))
                              (rule "notLeft" (formula "11"))
                              (rule "notLeft" (formula "9"))
                              (rule "notLeft" (formula "9"))
                              (rule "Definition_axiom_for_notAllValuesInOneBucket_in_de_wiesler_Sorter" (formula "32") (term "0") (inst "b=b"))
                               (builtin "One Step Simplification" (formula "32"))
                              (rule "expand_inInt" (formula "32") (term "1,0,0"))
                              (rule "replace_int_MAX" (formula "32") (term "1,0,1,0,0"))
                              (rule "replace_int_MIN" (formula "32") (term "0,1,1,0,0"))
                              (rule "translateJavaSubInt" (formula "32") (term "0,1,0"))
                              (rule "translateJavaAddInt" (formula "32") (term "0,2,0,0,1,0"))
                              (rule "polySimp_elimSub" (formula "32") (term "0,1,0"))
                              (rule "polySimp_addComm0" (formula "32") (term "0,1,0"))
                              (rule "polySimp_addComm0" (formula "32") (term "0,2,1,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0"))
                              (rule "polySimp_mulAssoc" (formula "32") (term "0,1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "32") (term "0,0,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "32") (term "0,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "32") (term "0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "32") (term "0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "32") (term "1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0,0"))
                              (rule "mul_literals" (formula "32") (term "0,1,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "32") (term "1,1,0"))
                              (rule "polySimp_rightDist" (formula "32") (term "1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0"))
                              (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0"))
                              (rule "polySimp_rightDist" (formula "32") (term "0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "32") (term "1,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "32") (term "1,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "32") (term "0,0,1,1,0"))
                              (rule "mul_literals" (formula "32") (term "0,0,0,1,1,0"))
                              (rule "Definition_axiom_for_equalityBucketsInRange_in_de_wiesler_Sorter" (formula "31") (term "0,0,1") (inst "b=b"))
                               (builtin "One Step Simplification" (formula "31"))
                              (rule "expand_inInt" (formula "31") (term "1,0,0,0,1"))
                              (rule "replace_int_MIN" (formula "31") (term "0,1,1,0,0,0,1"))
                              (rule "replace_int_MAX" (formula "31") (term "1,0,1,0,0,0,1"))
                              (rule "translateJavaAddInt" (formula "31") (term "2,0,1,0,0,1"))
                              (rule "translateJavaAddInt" (formula "31") (term "0,2,1,3,0,1,0,0,1"))
                              (rule "translateJavaMod" (formula "31") (term "0,1,0,0,0,0,1"))
                              (rule "translateJavaAddInt" (formula "31") (term "3,0,1,0,0,1"))
                              (rule "polySimp_addComm0" (formula "31") (term "0,2,1,3,0,1,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,0,0,0,1"))
                              (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0,0,0,0,1"))
                              (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0,0,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0,0,0,0,1"))
                              (rule "add_literals" (formula "31") (term "0,0,0,1,0,0,0,0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0,0,0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "31") (term "1,1,0,0,0,1"))
                              (rule "jmod_axiom" (formula "31") (term "0,1,0,0,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "1,0,1,0,0,0,0,1"))
                              (rule "polySimp_homoEq" (formula "31") (term "1,0,0,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "31") (term "1,0,1,0,0,0,0,1"))
                              (rule "polySimp_rightDist" (formula "31") (term "1,0,1,0,0,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,1,0,0,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "31") (term "0,1,0,1,0,0,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "31") (term "0,1,0,0,0,0,1"))
                              (rule "polySimp_sepPosMonomial" (formula "31") (term "1,0,0,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,0,0,1"))
                              (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,0,0,1"))
                              (rule "mul_literals" (formula "31") (term "0,1,1,0,0,0,0,1"))
                              (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,0,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,0,0,0,1"))
                              (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,0,0,0,1"))
                              (rule "mul_literals" (formula "31") (term "0,1,1,0,0,0,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,0,0,0,1"))
                              (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,0,0,0,1"))
                              (rule "Definition_axiom_for_isValidBucketStarts_in_de_wiesler_Functions" (formula "21") (term "0"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "andLeft" (formula "21"))
                              (rule "andLeft" (formula "21"))
                              (rule "andLeft" (formula "21"))
                              (rule "translateJavaAddInt" (formula "23") (term "3,0"))
                              (rule "translateJavaAddInt" (formula "22") (term "0"))
                              (rule "polySimp_addComm0" (formula "23") (term "3,0"))
                              (rule "polySimp_addComm0" (formula "22") (term "0"))
                              (rule "inEqSimp_commuteLeq" (formula "21"))
                              (rule "inEqSimp_commuteLeq" (formula "22"))
                              (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "21"))
                              (rule "leq_literals" (formula "7") (term "0"))
                               (builtin "One Step Simplification" (formula "7"))
                              (rule "true_left" (formula "7"))
                              (rule "nnf_imp2or" (formula "27") (term "0"))
                              (rule "commute_and" (formula "115") (term "0"))
                              (rule "commute_and" (formula "115") (term "1"))
                              (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "25") (term "0,1,0") (inst "i=i"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "expand_inInt" (formula "25") (term "1,0,0,1,0"))
                              (rule "replace_int_MAX" (formula "25") (term "1,0,1,0,0,1,0"))
                              (rule "replace_int_MIN" (formula "25") (term "0,1,1,0,0,1,0"))
                              (rule "translateJavaSubInt" (formula "25") (term "1,1,0,0,0,1,0"))
                              (rule "translateJavaAddInt" (formula "25") (term "0,2,1,1,0,1,0"))
                              (rule "polySimp_elimSub" (formula "25") (term "1,1,0,0,0,1,0"))
                              (rule "mul_literals" (formula "25") (term "1,1,1,0,0,0,1,0"))
                              (rule "polySimp_addComm0" (formula "25") (term "0,2,1,1,0,1,0"))
                              (rule "polySimp_addComm1" (formula "25") (term "1,1,0,0,0,1,0"))
                              (rule "polySimp_addComm0" (formula "25") (term "0,1,1,0,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "0,1,0,0,1,0,0,0,1,0"))
                              (rule "mul_literals" (formula "25") (term "0,0,1,0,0,1,0,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,1,0,0,0,1,0"))
                              (rule "add_literals" (formula "25") (term "0,0,0,0,1,0,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "25") (term "1,1,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "25") (term "1,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "0,1,1,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,0,1,1,0,0,0,1,0"))
                              (rule "mul_literals" (formula "25") (term "0,0,1,1,0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,0,1,1,0,0,0,1,0"))
                              (rule "commute_or_2" (formula "46") (term "0,0"))
                              (rule "nnf_imp2or" (formula "26") (term "0"))
                              (rule "cnf_rightDist" (formula "46") (term "0,1,0"))
                              (rule "cnf_rightDist" (formula "46") (term "1,1,0"))
                              (rule "nnf_imp2or" (formula "34") (term "0"))
                              (rule "nnf_imp2or" (formula "33") (term "0,0,1"))
                              (rule "nnf_notAnd" (formula "27") (term "0,0"))
                              (rule "nnf_notAnd" (formula "26") (term "0,0"))
                              (rule "nnf_notAnd" (formula "34") (term "0,0"))
                              (rule "nnf_imp2or" (formula "25") (term "0,1,0"))
                              (rule "nnf_notAnd" (formula "27") (term "1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "27") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "27") (term "1,0,0,1,1,0,0"))
                              (rule "add_literals" (formula "27") (term "0,0,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "27") (term "1,1,1,0,0"))
                              (rule "inEqSimp_notLeq" (formula "27") (term "0,1,0,0"))
                              (rule "mul_literals" (formula "27") (term "1,0,0,0,1,0,0"))
                              (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "0,1,0,0"))
                              (rule "mul_literals" (formula "27") (term "1,0,1,0,0"))
                              (rule "nnf_notAnd" (formula "27") (term "0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,0"))
                              (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,0"))
                              (rule "add_literals" (formula "27") (term "0,0,0,1,0,0,0"))
                              (rule "add_zero_left" (formula "27") (term "0,0,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,0,0"))
                              (rule "mul_literals" (formula "27") (term "0,1,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,0,0"))
                              (rule "nnf_notAnd" (formula "26") (term "1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "26") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "26") (term "1,0,0,1,1,0,0"))
                              (rule "add_literals" (formula "26") (term "0,0,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "26") (term "1,1,1,0,0"))
                              (rule "inEqSimp_notLeq" (formula "26") (term "0,1,0,0"))
                              (rule "mul_literals" (formula "26") (term "1,0,0,0,1,0,0"))
                              (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "0,1,0,0"))
                              (rule "mul_literals" (formula "26") (term "1,0,1,0,0"))
                              (rule "nnf_notAnd" (formula "26") (term "0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,0"))
                              (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0,0"))
                              (rule "add_literals" (formula "26") (term "0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,0"))
                              (rule "mul_literals" (formula "26") (term "1,0,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,0"))
                              (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,0"))
                              (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,0"))
                              (rule "add_zero_left" (formula "26") (term "0,0,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0"))
                              (rule "nnf_notAnd" (formula "34") (term "1,0,0"))
                              (rule "inEqSimp_notLeq" (formula "34") (term "0,1,0,0"))
                              (rule "mul_literals" (formula "34") (term "1,0,0,0,1,0,0"))
                              (rule "add_literals" (formula "34") (term "0,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "0,1,0,0"))
                              (rule "mul_literals" (formula "34") (term "1,0,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "34") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "34") (term "1,0,0,1,1,0,0"))
                              (rule "add_literals" (formula "34") (term "0,0,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "34") (term "1,1,1,0,0"))
                              (rule "nnf_notAnd" (formula "34") (term "0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0,0"))
                              (rule "mul_literals" (formula "34") (term "1,0,0,0,0,0,0"))
                              (rule "add_literals" (formula "34") (term "0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0,0"))
                              (rule "mul_literals" (formula "34") (term "1,0,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,0"))
                              (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,0"))
                              (rule "add_literals" (formula "34") (term "0,0,0,1,0,0,0"))
                              (rule "add_zero_left" (formula "34") (term "0,0,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,0"))
                              (rule "nnf_notAnd" (formula "33") (term "0,0,0,1"))
                              (rule "nnf_notAnd" (formula "25") (term "0,0,1,0"))
                              (rule "nnf_notAnd" (formula "33") (term "1,0,0,0,1"))
                              (rule "inEqSimp_notLeq" (formula "33") (term "0,1,0,0,0,1"))
                              (rule "mul_literals" (formula "33") (term "1,0,0,0,1,0,0,0,1"))
                              (rule "add_literals" (formula "33") (term "0,0,0,1,0,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "0,1,0,0,0,1"))
                              (rule "mul_literals" (formula "33") (term "1,0,1,0,0,0,1"))
                              (rule "inEqSimp_notGeq" (formula "33") (term "1,1,0,0,0,1"))
                              (rule "mul_literals" (formula "33") (term "1,0,0,1,1,0,0,0,1"))
                              (rule "add_literals" (formula "33") (term "0,0,1,1,0,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,1,0,0,0,1"))
                              (rule "mul_literals" (formula "33") (term "1,1,1,0,0,0,1"))
                              (rule "nnf_notAnd" (formula "33") (term "0,0,0,0,1"))
                              (rule "nnf_notAnd" (formula "25") (term "1,0,0,1,0"))
                              (rule "inEqSimp_notLeq" (formula "25") (term "0,1,0,0,1,0"))
                              (rule "mul_literals" (formula "25") (term "1,0,0,0,1,0,0,1,0"))
                              (rule "add_literals" (formula "25") (term "0,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "0,1,0,0,1,0"))
                              (rule "mul_literals" (formula "25") (term "1,0,1,0,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "25") (term "1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "25") (term "1,0,0,1,1,0,0,1,0"))
                              (rule "add_literals" (formula "25") (term "0,0,1,1,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "25") (term "1,1,1,0,0,1,0"))
                              (rule "nnf_notAnd" (formula "25") (term "0,0,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "0,1,0,0,0,0,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "0,1,0,0,0,0,1,0"))
                              (rule "mul_literals" (formula "25") (term "0,0,1,0,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,0,1,0,0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,0,1,0,0,0,0,1,0"))
                              (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "0,1,0,0,1,0,0,0,1,0"))
                              (rule "mul_literals" (formula "25") (term "0,0,1,0,0,1,0,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,1,0,0,0,1,0"))
                              (rule "add_literals" (formula "25") (term "0,0,0,0,1,0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "0,1,1,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,0,1,1,0,0,0,1,0"))
                              (rule "mul_literals" (formula "25") (term "0,0,1,1,0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,0,1,1,0,0,0,1,0"))
                              (rule "nnf_notAnd" (formula "33") (term "0,0,0,0,0,1"))
                              (rule "inEqSimp_notGeq" (formula "33") (term "0,0,0,0,0,0,1"))
                              (rule "polySimp_rightDist" (formula "33") (term "1,0,0,0,0,0,0,0,0,1"))
                              (rule "mul_literals" (formula "33") (term "0,1,0,0,0,0,0,0,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "33") (term "0,0,0,0,0,0,0,0,1"))
                              (rule "add_literals" (formula "33") (term "0,0,0,0,0,0,0,0,0,1"))
                              (rule "add_zero_left" (formula "33") (term "0,0,0,0,0,0,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0,0,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "33") (term "1,0,0,0,0,0,0,1"))
                              (rule "polySimp_elimOne" (formula "33") (term "1,0,0,0,0,0,0,1"))
                              (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0,0,0,0,1"))
                              (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0,0,0,0,1"))
                              (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0,0,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0,0,0,0,1"))
                              (rule "add_literals" (formula "33") (term "0,0,0,1,0,0,0,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0,0,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0,0,0,0,1"))
                              (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0,0,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0,0,0,0,1"))
                              (rule "mul_literals" (formula "33") (term "0,1,1,0,0,0,0,0,1"))
                              (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0,0,0,0,1"))
                              (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "22") (term "0") (inst "i=i") (inst "j=j"))
                               (builtin "One Step Simplification" (formula "22"))
                              (rule "expand_inInt" (formula "22") (term "1,0,0"))
                              (rule "expand_inInt" (formula "22") (term "1,0,0,1,0"))
                              (rule "replace_int_MAX" (formula "22") (term "1,0,1,0,0"))
                              (rule "replace_int_MIN" (formula "22") (term "0,1,1,0,0"))
                              (rule "replace_int_MIN" (formula "22") (term "0,1,1,0,0,1,0"))
                              (rule "replace_int_MAX" (formula "22") (term "1,0,1,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0,0"))
                              (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0,0"))
                              (rule "add_literals" (formula "22") (term "0,0,0,1,0,0,0"))
                              (rule "add_zero_left" (formula "22") (term "0,0,1,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0,0,1,0"))
                              (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0,0,1,0"))
                              (rule "add_literals" (formula "22") (term "0,0,0,1,0,0,0,1,0"))
                              (rule "add_zero_left" (formula "22") (term "0,0,1,0,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "22") (term "1,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "22") (term "1,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "22") (term "1,1,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0,1,0"))
                              (rule "nnf_imp2or" (formula "22") (term "0"))
                              (rule "associativeLawUnion" (formula "43") (term "1"))
                              (rule "Definition_axiom_for_smallBucketIsSorted_in_de_wiesler_Sorter" (formula "27") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "true_left" (formula "27"))
                              (rule "nnf_notAnd" (formula "22") (term "0,0"))
                              (rule "arrayLengthNotNegative" (formula "41") (term "0"))
                              (rule "applyEq" (formula "41") (term "0") (ifseqformula "42"))
                              (rule "qeq_literals" (formula "41"))
                              (rule "true_left" (formula "41"))
                              (rule "arrayLengthIsAShort" (formula "41") (term "0"))
                              (rule "expand_inShort" (formula "41"))
                              (rule "replace_short_MIN" (formula "41") (term "0,1"))
                              (rule "replace_short_MAX" (formula "41") (term "1,0"))
                              (rule "andLeft" (formula "41"))
                              (rule "inEqSimp_commuteLeq" (formula "42"))
                              (rule "applyEq" (formula "41") (term "0") (ifseqformula "43"))
                              (rule "leq_literals" (formula "41"))
                              (rule "true_left" (formula "41"))
                              (rule "applyEq" (formula "41") (term "0") (ifseqformula "42"))
                              (rule "qeq_literals" (formula "41"))
                              (rule "true_left" (formula "41"))
                              (rule "arrayLengthNotNegative" (formula "40") (term "0"))
                              (rule "applyEq" (formula "40") (term "0") (ifseqformula "41"))
                              (rule "qeq_literals" (formula "40"))
                              (rule "true_left" (formula "40"))
                              (rule "arrayLengthIsAShort" (formula "40") (term "0"))
                              (rule "expand_inShort" (formula "40"))
                              (rule "replace_short_MIN" (formula "40") (term "0,1"))
                              (rule "replace_short_MAX" (formula "40") (term "1,0"))
                              (rule "andLeft" (formula "40"))
                              (rule "inEqSimp_commuteLeq" (formula "41"))
                              (rule "applyEq" (formula "41") (term "0") (ifseqformula "42"))
                              (rule "qeq_literals" (formula "41"))
                              (rule "true_left" (formula "41"))
                              (rule "applyEq" (formula "40") (term "0") (ifseqformula "41"))
                              (rule "leq_literals" (formula "40"))
                              (rule "true_left" (formula "40"))
                              (rule "arrayLengthIsAShort" (formula "39") (term "0"))
                              (rule "expand_inShort" (formula "39"))
                              (rule "replace_short_MIN" (formula "39") (term "0,1"))
                              (rule "replace_short_MAX" (formula "39") (term "1,0"))
                              (rule "andLeft" (formula "39"))
                              (rule "inEqSimp_commuteLeq" (formula "40"))
                              (rule "applyEq" (formula "40") (term "0") (ifseqformula "41"))
                              (rule "qeq_literals" (formula "40"))
                              (rule "true_left" (formula "40"))
                              (rule "applyEq" (formula "39") (term "0") (ifseqformula "40"))
                              (rule "leq_literals" (formula "39"))
                              (rule "true_left" (formula "39"))
                              (rule "arrayLengthNotNegative" (formula "39") (term "0"))
                              (rule "applyEq" (formula "39") (term "0") (ifseqformula "40"))
                              (rule "qeq_literals" (formula "39"))
                              (rule "true_left" (formula "39"))
                              (rule "arrayLengthNotNegative" (formula "38") (term "0"))
                              (rule "applyEq" (formula "38") (term "0") (ifseqformula "39"))
                              (rule "qeq_literals" (formula "38"))
                              (rule "true_left" (formula "38"))
                              (rule "arrayLengthIsAShort" (formula "38") (term "0"))
                              (rule "expand_inShort" (formula "38"))
                              (rule "replace_short_MIN" (formula "38") (term "0,1"))
                              (rule "replace_short_MAX" (formula "38") (term "1,0"))
                              (rule "andLeft" (formula "38"))
                              (rule "inEqSimp_commuteLeq" (formula "39"))
                              (rule "applyEq" (formula "39") (term "0") (ifseqformula "40"))
                              (rule "qeq_literals" (formula "39"))
                              (rule "true_left" (formula "39"))
                              (rule "applyEq" (formula "38") (term "0") (ifseqformula "39"))
                              (rule "leq_literals" (formula "38"))
                              (rule "true_left" (formula "38"))
                              (rule "nnf_imp2or" (formula "22") (term "0,1,0"))
                              (rule "arrayLengthNotNegative" (formula "37") (term "0"))
                              (rule "applyEq" (formula "37") (term "0") (ifseqformula "38"))
                              (rule "qeq_literals" (formula "37"))
                              (rule "true_left" (formula "37"))
                              (rule "arrayLengthIsAShort" (formula "37") (term "0"))
                              (rule "expand_inShort" (formula "37"))
                              (rule "replace_short_MIN" (formula "37") (term "0,1"))
                              (rule "replace_short_MAX" (formula "37") (term "1,0"))
                              (rule "andLeft" (formula "37"))
                              (rule "inEqSimp_commuteLeq" (formula "38"))
                              (rule "applyEq" (formula "38") (term "0") (ifseqformula "39"))
                              (rule "qeq_literals" (formula "38"))
                              (rule "true_left" (formula "38"))
                              (rule "applyEq" (formula "37") (term "0") (ifseqformula "38"))
                              (rule "leq_literals" (formula "37"))
                              (rule "closeFalse" (formula "37"))
                           )
                           (branch "Usage"
                               (builtin "One Step Simplification" (formula "57"))
                               (builtin "One Step Simplification" (formula "52"))
                              (rule "andLeft" (formula "52"))
                              (rule "andLeft" (formula "52"))
                              (rule "andLeft" (formula "54"))
                              (rule "andLeft" (formula "52"))
                              (rule "translateJavaSubInt" (formula "61") (term "2,0,1,0,1,0"))
                              (rule "translateJavaAddInt" (formula "55") (term "0,1"))
                              (rule "translateJavaAddInt" (formula "55") (term "0,0"))
                              (rule "translateJavaAddInt" (formula "55") (term "1,1"))
                              (rule "translateJavaSubInt" (formula "55") (term "2,0,1,0,2,0"))
                              (rule "translateJavaSubInt" (formula "56") (term "2,0,1,0,0"))
                              (rule "translateJavaAddInt" (formula "56") (term "2,0"))
                              (rule "translateJavaSubInt" (formula "55") (term "2,0,1,0,1,0,0"))
                              (rule "translateJavaAddInt" (formula "55") (term "0,2,1,1,1"))
                              (rule "translateJavaSubInt" (formula "56") (term "2,0,1,0,1,2,0"))
                              (rule "replace_known_left" (formula "54") (term "0") (ifseqformula "52"))
                               (builtin "One Step Simplification" (formula "54"))
                              (rule "true_left" (formula "54"))
                              (rule "polySimp_elimSub" (formula "60") (term "2,0,1,0,1,0"))
                              (rule "mul_literals" (formula "60") (term "1,2,0,1,0,1,0"))
                              (rule "polySimp_elimSub" (formula "54") (term "2,0,1,0,2,0"))
                              (rule "mul_literals" (formula "54") (term "1,2,0,1,0,2,0"))
                              (rule "polySimp_elimSub" (formula "55") (term "2,0,1,0,0"))
                              (rule "mul_literals" (formula "55") (term "1,2,0,1,0,0"))
                              (rule "polySimp_elimSub" (formula "54") (term "2,0,1,0,1,0,0"))
                              (rule "mul_literals" (formula "54") (term "1,2,0,1,0,1,0,0"))
                              (rule "polySimp_elimSub" (formula "55") (term "2,0,1,0,1,2,0"))
                              (rule "mul_literals" (formula "55") (term "1,2,0,1,0,1,2,0"))
                              (rule "polySimp_addComm0" (formula "54") (term "0,2,1,1,1"))
                              (rule "polySimp_addComm1" (formula "60") (term "2,0,1,0,1,0"))
                              (rule "polySimp_addComm1" (formula "54") (term "2,0,1,0,2,0"))
                              (rule "polySimp_addComm1" (formula "55") (term "2,0,1,0,0"))
                              (rule "polySimp_addComm1" (formula "54") (term "2,0,1,0,1,0,0"))
                              (rule "polySimp_addComm1" (formula "55") (term "2,0,1,0,1,2,0"))
                              (rule "polySimp_addComm0" (formula "60") (term "0,2,0,1,0,1,0"))
                              (rule "polySimp_addComm0" (formula "54") (term "0,2,0,1,0,2,0"))
                              (rule "polySimp_addComm0" (formula "55") (term "0,2,0,1,0,0"))
                              (rule "polySimp_addComm0" (formula "54") (term "0,2,0,1,0,1,0,0"))
                              (rule "polySimp_addComm0" (formula "55") (term "0,2,0,1,0,1,2,0"))
                              (rule "narrowSelectArrayType" (formula "54") (term "2,1") (ifseqformula "1") (ifseqformula "59"))
                              (rule "pullOutSelect" (formula "54") (term "1,0,0") (inst "selectSK=arr_3"))
                              (rule "applyEq" (formula "56") (term "1,2,0") (ifseqformula "54"))
                              (rule "simplifySelectOfAnon" (formula "54"))
                               (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "59")) (ifInst ""  (formula "5")))
                              (rule "replaceKnownSelect_taclet21210110_0" (formula "54") (term "2,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet21210110_2" (formula "54") (term "2,0"))
                              (rule "polySimp_addComm0" (formula "55") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "56") (term "2,0"))
                              (rule "elementOfUnion" (formula "54") (term "0,0"))
                              (rule "disjointAllFields" (formula "54") (term "1,0,0") (ifseqformula "35"))
                               (builtin "One Step Simplification" (formula "54"))
                              (rule "elementOfArrayRangeConcrete" (formula "54") (term "0,0"))
                              (rule "eqSymm" (formula "54") (term "0,0,0,0"))
                              (rule "replace_known_right" (formula "54") (term "0,0,0,0") (ifseqformula "57"))
                               (builtin "One Step Simplification" (formula "54"))
                              (rule "applyEqReverse" (formula "56") (term "0,2,0") (ifseqformula "54"))
                              (rule "applyEqReverse" (formula "55") (term "0,0,0") (ifseqformula "54"))
                              (rule "hideAuxiliaryEq" (formula "54"))
                              (rule "polySimp_addComm0" (formula "55") (term "2,0"))
                              (rule "polySimp_addComm0" (formula "54") (term "0,0"))
                              (rule "commuteUnion" (formula "60") (term "1,0,1,0"))
                              (rule "commuteUnion" (formula "54") (term "1,0,2,0"))
                              (rule "commuteUnion" (formula "55") (term "1,0,0"))
                              (rule "ifUnfold" (formula "60") (term "1") (inst "#boolv=x"))
                              (rule "variableDeclaration" (formula "60") (term "1") (newnames "x_7"))
                              (rule "inequality_comparison_simple" (formula "60") (term "1"))
                               (builtin "One Step Simplification" (formula "60"))
                              (rule "replace_known_left" (formula "60") (term "0,0,1,0") (ifseqformula "52"))
                               (builtin "One Step Simplification" (formula "60"))
                              (rule "ifSplit" (formula "60"))
                              (branch "if x_7 true"
                                  (builtin "One Step Simplification" (formula "61"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "if x_7 false"
                                  (builtin "One Step Simplification" (formula "61"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "blockEmpty" (formula "60") (term "1"))
                                  (builtin "Block Contract (Internal)" (formula "60") (newnames "anonOut_heap_2,exc_3,heap_Before_BLOCK_2,savedHeap_Before_BLOCK_2,o,f"))
                                 (branch "Validity"
                                     (builtin "One Step Simplification" (formula "56"))
                                     (builtin "One Step Simplification" (formula "61"))
                                    (rule "andLeft" (formula "56"))
                                    (rule "translateJavaSubInt" (formula "56") (term "0,0"))
                                    (rule "polySimp_elimSub" (formula "56") (term "0,0"))
                                    (rule "polySimp_addComm0" (formula "56") (term "0,0"))
                                    (rule "narrowSelectArrayType" (formula "54") (term "2,0") (ifseqformula "56") (ifseqformula "60"))
                                    (rule "variableDeclarationAssign" (formula "61") (term "1"))
                                    (rule "variableDeclaration" (formula "61") (term "1") (newnames "exc_3_1"))
                                    (rule "assignment" (formula "61") (term "1"))
                                     (builtin "One Step Simplification" (formula "61"))
                                    (rule "emptyStatement" (formula "61") (term "1"))
                                     (builtin "One Step Simplification" (formula "61"))
                                    (rule "emptyStatement" (formula "61") (term "1"))
                                    (rule "tryEmpty" (formula "61") (term "1"))
                                    (rule "blockEmptyLabel" (formula "61") (term "1"))
                                    (rule "blockEmpty" (formula "61") (term "1"))
                                    (rule "methodCallEmpty" (formula "61") (term "1"))
                                     (builtin "One Step Simplification" (formula "61"))
                                    (rule "emptyModality" (formula "61") (term "1"))
                                     (builtin "One Step Simplification" (formula "61"))
                                    (rule "closeTrue" (formula "61"))
                                 )
                                 (branch "Precondition"
                                     (builtin "One Step Simplification" (formula "60"))
                                    (rule "wellFormedAnon" (formula "60") (term "1"))
                                    (rule "wellFormedAnon" (formula "60") (term "0,1"))
                                    (rule "wellFormedAnon" (formula "60") (term "0,0,1"))
                                    (rule "translateJavaSubInt" (formula "60") (term "0,0,0"))
                                    (rule "replace_known_left" (formula "60") (term "1,1") (ifseqformula "53"))
                                     (builtin "One Step Simplification" (formula "60") (ifInst ""  (formula "1")) (ifInst ""  (formula "38")) (ifInst ""  (formula "41")))
                                    (rule "polySimp_elimSub" (formula "60") (term "0,0"))
                                    (rule "polySimp_addComm0" (formula "60") (term "0,0"))
                                    (rule "close" (formula "60") (ifseqformula "8"))
                                 )
                                 (branch "Usage"
                                     (builtin "One Step Simplification" (formula "56"))
                                     (builtin "One Step Simplification" (formula "61"))
                                    (rule "andLeft" (formula "56"))
                                    (rule "andLeft" (formula "57"))
                                    (rule "andLeft" (formula "56"))
                                    (rule "andLeft" (formula "56"))
                                    (rule "translateJavaAddInt" (formula "60") (term "0,1"))
                                    (rule "translateJavaAddInt" (formula "59") (term "1,1"))
                                    (rule "translateJavaAddInt" (formula "60") (term "0,2,1,0,1"))
                                    (rule "replace_known_left" (formula "58") (term "0") (ifseqformula "56"))
                                     (builtin "One Step Simplification" (formula "58"))
                                    (rule "true_left" (formula "58"))
                                    (rule "polySimp_addComm0" (formula "59") (term "0,2,1,0,1"))
                                    (rule "narrowSelectArrayType" (formula "58") (term "2,1") (ifseqformula "1") (ifseqformula "63"))
                                    (rule "narrowSelectArrayType" (formula "59") (term "2,1") (ifseqformula "1") (ifseqformula "63"))
                                    (rule "ifUnfold" (formula "64") (term "1") (inst "#boolv=x"))
                                    (rule "variableDeclaration" (formula "64") (term "1") (newnames "x_8"))
                                    (rule "inequality_comparison_simple" (formula "64") (term "1"))
                                     (builtin "One Step Simplification" (formula "64"))
                                    (rule "replace_known_left" (formula "64") (term "0,0,1,0") (ifseqformula "56"))
                                     (builtin "One Step Simplification" (formula "64"))
                                    (rule "ifSplit" (formula "64"))
                                    (branch "if x_8 true"
                                        (builtin "One Step Simplification" (formula "65"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                    (branch "if x_8 false"
                                        (builtin "One Step Simplification" (formula "65"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "blockEmpty" (formula "64") (term "1"))
                                        (builtin "Block Contract (Internal)" (formula "64") (newnames "anonOut_heap_3,exc_4,heap_Before_BLOCK_3,savedHeap_Before_BLOCK_3,o,f"))
                                       (branch "Validity"
                                           (builtin "One Step Simplification" (formula "65"))
                                           (builtin "One Step Simplification" (formula "60"))
                                          (rule "andLeft" (formula "60"))
                                          (rule "translateJavaSubInt" (formula "60") (term "0,0"))
                                          (rule "polySimp_elimSub" (formula "60") (term "0,0"))
                                          (rule "polySimp_addComm0" (formula "60") (term "0,0"))
                                          (rule "narrowSelectArrayType" (formula "58") (term "2,0") (ifseqformula "60") (ifseqformula "64"))
                                          (rule "narrowSelectArrayType" (formula "59") (term "2,0") (ifseqformula "60") (ifseqformula "64"))
                                          (rule "variableDeclarationAssign" (formula "65") (term "1"))
                                          (rule "variableDeclaration" (formula "65") (term "1") (newnames "exc_4_1"))
                                          (rule "assignment" (formula "65") (term "1"))
                                           (builtin "One Step Simplification" (formula "65"))
                                          (rule "emptyStatement" (formula "65") (term "1"))
                                           (builtin "One Step Simplification" (formula "65"))
                                          (rule "emptyStatement" (formula "65") (term "1"))
                                          (rule "tryEmpty" (formula "65") (term "1"))
                                          (rule "blockEmptyLabel" (formula "65") (term "1"))
                                          (rule "blockEmpty" (formula "65") (term "1"))
                                          (rule "methodCallEmpty" (formula "65") (term "1"))
                                           (builtin "One Step Simplification" (formula "65"))
                                          (rule "emptyModality" (formula "65") (term "1"))
                                           (builtin "One Step Simplification" (formula "65"))
                                          (rule "closeTrue" (formula "65"))
                                       )
                                       (branch "Precondition"
                                           (builtin "One Step Simplification" (formula "64"))
                                          (rule "wellFormedAnon" (formula "64") (term "1"))
                                          (rule "wellFormedAnon" (formula "64") (term "0,1"))
                                          (rule "wellFormedAnon" (formula "64") (term "0,0,1"))
                                          (rule "wellFormedAnon" (formula "64") (term "0,0,0,1"))
                                          (rule "translateJavaSubInt" (formula "64") (term "0,0,0"))
                                          (rule "replace_known_left" (formula "64") (term "1,1") (ifseqformula "57"))
                                           (builtin "One Step Simplification" (formula "64") (ifInst ""  (formula "1")) (ifInst ""  (formula "38")) (ifInst ""  (formula "41")) (ifInst ""  (formula "53")))
                                          (rule "polySimp_elimSub" (formula "64") (term "0,0"))
                                          (rule "polySimp_addComm0" (formula "64") (term "0,0"))
                                          (rule "close" (formula "64") (ifseqformula "8"))
                                       )
                                       (branch "Usage"
                                           (builtin "One Step Simplification" (formula "60"))
                                           (builtin "One Step Simplification" (formula "65"))
                                          (rule "andLeft" (formula "60"))
                                          (rule "andLeft" (formula "60"))
                                          (rule "andLeft" (formula "62"))
                                          (rule "andLeft" (formula "60"))
                                          (rule "translateJavaAddInt" (formula "64") (term "0,1"))
                                          (rule "translateJavaAddInt" (formula "63") (term "1,1"))
                                          (rule "translateJavaAddInt" (formula "64") (term "0,2,1,0,1"))
                                          (rule "replace_known_left" (formula "62") (term "0") (ifseqformula "60"))
                                           (builtin "One Step Simplification" (formula "62"))
                                          (rule "true_left" (formula "62"))
                                          (rule "polySimp_addComm0" (formula "63") (term "0,2,1,0,1"))
                                          (rule "narrowSelectArrayType" (formula "63") (term "2,1") (ifseqformula "1") (ifseqformula "67"))
                                          (rule "narrowSelectArrayType" (formula "62") (term "2,1") (ifseqformula "1") (ifseqformula "67"))
                                          (rule "ifUnfold" (formula "68") (term "1") (inst "#boolv=x"))
                                          (rule "variableDeclaration" (formula "68") (term "1") (newnames "x_9"))
                                          (rule "inequality_comparison_simple" (formula "68") (term "1"))
                                           (builtin "One Step Simplification" (formula "68"))
                                          (rule "replace_known_left" (formula "68") (term "0,0,1,0") (ifseqformula "60"))
                                           (builtin "One Step Simplification" (formula "68"))
                                          (rule "ifSplit" (formula "68"))
                                          (branch "if x_9 true"
                                              (builtin "One Step Simplification" (formula "69"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                          (branch "if x_9 false"
                                              (builtin "One Step Simplification" (formula "69"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "true_left" (formula "1"))
                                             (rule "methodCallEmpty" (formula "68") (term "1"))
                                             (rule "tryEmpty" (formula "68") (term "1"))
                                             (rule "emptyModality" (formula "68") (term "1"))
                                              (builtin "One Step Simplification" (formula "68"))
                                             (rule "Free_class_invariant_axiom_for_de_wiesler_Storage" (formula "36"))
                                              (builtin "One Step Simplification" (formula "36"))
                                             (rule "andLeft" (formula "36"))
                                             (rule "andLeft" (formula "36"))
                                             (rule "andLeft" (formula "38"))
                                             (rule "andLeft" (formula "36"))
                                             (rule "andLeft" (formula "39"))
                                             (rule "andLeft" (formula "36"))
                                             (rule "andLeft" (formula "40"))
                                             (rule "andLeft" (formula "36"))
                                             (rule "andLeft" (formula "41"))
                                             (rule "andLeft" (formula "36"))
                                             (rule "andLeft" (formula "42"))
                                             (rule "andLeft" (formula "36"))
                                             (rule "andLeft" (formula "43"))
                                             (rule "andLeft" (formula "36"))
                                             (rule "andLeft" (formula "44"))
                                             (rule "andLeft" (formula "36"))
                                             (rule "andLeft" (formula "45"))
                                             (rule "andLeft" (formula "45"))
                                             (rule "andLeft" (formula "45"))
                                             (rule "andLeft" (formula "45"))
                                             (rule "andLeft" (formula "45"))
                                             (rule "andLeft" (formula "45"))
                                             (rule "andLeft" (formula "45"))
                                             (rule "andLeft" (formula "45"))
                                             (rule "andLeft" (formula "45"))
                                             (rule "andLeft" (formula "45"))
                                             (rule "andLeft" (formula "45"))
                                             (rule "andLeft" (formula "45"))
                                             (rule "andLeft" (formula "45"))
                                             (rule "andLeft" (formula "45"))
                                             (rule "andLeft" (formula "45"))
                                             (rule "andLeft" (formula "45"))
                                             (rule "andLeft" (formula "45"))
                                             (rule "andLeft" (formula "45"))
                                             (rule "andLeft" (formula "45"))
                                             (rule "andLeft" (formula "45"))
                                             (rule "translateJavaMulInt" (formula "39") (term "1"))
                                             (rule "mul_literals" (formula "39") (term "1"))
                                             (rule "translateJavaMulInt" (formula "38") (term "1"))
                                             (rule "mul_literals" (formula "38") (term "1"))
                                             (rule "disjointDefinition" (formula "72"))
                                              (builtin "One Step Simplification" (formula "72"))
                                             (rule "notLeft" (formula "72"))
                                             (rule "disjointDefinition" (formula "71"))
                                              (builtin "One Step Simplification" (formula "71"))
                                             (rule "notLeft" (formula "71"))
                                             (rule "disjointDefinition" (formula "70"))
                                              (builtin "One Step Simplification" (formula "70"))
                                             (rule "notLeft" (formula "70"))
                                             (rule "eqSymm" (formula "97"))
                                             (rule "disjointDefinition" (formula "69"))
                                              (builtin "One Step Simplification" (formula "69"))
                                             (rule "notLeft" (formula "69"))
                                             (rule "eqSymm" (formula "96"))
                                             (rule "disjointDefinition" (formula "68"))
                                              (builtin "One Step Simplification" (formula "68"))
                                             (rule "notLeft" (formula "68"))
                                             (rule "eqSymm" (formula "95"))
                                             (rule "disjointDefinition" (formula "67"))
                                              (builtin "One Step Simplification" (formula "67"))
                                             (rule "notLeft" (formula "67"))
                                             (rule "eqSymm" (formula "94"))
                                             (rule "disjointDefinition" (formula "66"))
                                              (builtin "One Step Simplification" (formula "66"))
                                             (rule "notLeft" (formula "66"))
                                             (rule "eqSymm" (formula "93"))
                                             (rule "disjointDefinition" (formula "65"))
                                              (builtin "One Step Simplification" (formula "65"))
                                             (rule "notLeft" (formula "65"))
                                             (rule "eqSymm" (formula "92"))
                                             (rule "disjointDefinition" (formula "64"))
                                              (builtin "One Step Simplification" (formula "64"))
                                             (rule "notLeft" (formula "64"))
                                             (rule "eqSymm" (formula "91"))
                                             (rule "disjointDefinition" (formula "63"))
                                              (builtin "One Step Simplification" (formula "63"))
                                             (rule "notLeft" (formula "63"))
                                             (rule "eqSymm" (formula "90"))
                                             (rule "disjointDefinition" (formula "62"))
                                              (builtin "One Step Simplification" (formula "62"))
                                             (rule "notLeft" (formula "62"))
                                             (rule "eqSymm" (formula "89"))
                                             (rule "disjointDefinition" (formula "61"))
                                              (builtin "One Step Simplification" (formula "61"))
                                             (rule "notLeft" (formula "61"))
                                             (rule "eqSymm" (formula "88"))
                                             (rule "disjointDefinition" (formula "60"))
                                              (builtin "One Step Simplification" (formula "60"))
                                             (rule "notLeft" (formula "60"))
                                             (rule "eqSymm" (formula "87"))
                                             (rule "disjointDefinition" (formula "59"))
                                              (builtin "One Step Simplification" (formula "59"))
                                             (rule "notLeft" (formula "59"))
                                             (rule "eqSymm" (formula "86"))
                                             (rule "disjointDefinition" (formula "58"))
                                              (builtin "One Step Simplification" (formula "58"))
                                             (rule "notLeft" (formula "58"))
                                             (rule "eqSymm" (formula "85"))
                                             (rule "disjointDefinition" (formula "57"))
                                              (builtin "One Step Simplification" (formula "57"))
                                             (rule "notLeft" (formula "57"))
                                             (rule "disjointDefinition" (formula "56"))
                                              (builtin "One Step Simplification" (formula "56"))
                                             (rule "notLeft" (formula "56"))
                                             (rule "eqSymm" (formula "83"))
                                             (rule "disjointDefinition" (formula "55"))
                                              (builtin "One Step Simplification" (formula "55"))
                                             (rule "notLeft" (formula "55"))
                                             (rule "eqSymm" (formula "82"))
                                             (rule "disjointDefinition" (formula "54"))
                                              (builtin "One Step Simplification" (formula "54"))
                                             (rule "notLeft" (formula "54"))
                                             (rule "disjointDefinition" (formula "53"))
                                              (builtin "One Step Simplification" (formula "53"))
                                             (rule "notLeft" (formula "53"))
                                             (rule "disjointDefinition" (formula "52"))
                                              (builtin "One Step Simplification" (formula "52"))
                                             (rule "notLeft" (formula "52"))
                                             (rule "disjointDefinition" (formula "51"))
                                              (builtin "One Step Simplification" (formula "51"))
                                             (rule "notLeft" (formula "51"))
                                             (rule "disjointDefinition" (formula "50"))
                                              (builtin "One Step Simplification" (formula "50"))
                                             (rule "notLeft" (formula "50"))
                                             (rule "disjointDefinition" (formula "49"))
                                              (builtin "One Step Simplification" (formula "49"))
                                             (rule "notLeft" (formula "49"))
                                             (rule "disjointDefinition" (formula "48"))
                                              (builtin "One Step Simplification" (formula "48"))
                                             (rule "notLeft" (formula "48"))
                                             (rule "disjointDefinition" (formula "47"))
                                              (builtin "One Step Simplification" (formula "47"))
                                             (rule "notLeft" (formula "47"))
                                             (rule "disjointDefinition" (formula "46"))
                                              (builtin "One Step Simplification" (formula "46"))
                                             (rule "notLeft" (formula "46"))
                                             (rule "disjointDefinition" (formula "45"))
                                              (builtin "One Step Simplification" (formula "45"))
                                             (rule "notLeft" (formula "45"))
                                             (rule "applyEq" (formula "67") (term "0,1,0,0,2,0") (ifseqformula "44"))
                                             (rule "applyEq" (formula "71") (term "0,1,0,0,0,2,0") (ifseqformula "44"))
                                             (rule "applyEq" (formula "62") (term "0,1,0,2,0") (ifseqformula "44"))
                                             (rule "applyEq" (formula "70") (term "0,1,0,0,0,2,0") (ifseqformula "44"))
                                             (rule "applyEq" (formula "63") (term "0,1,0,0") (ifseqformula "44"))
                                             (rule "applyEq" (formula "66") (term "0,1,0,0,2,0") (ifseqformula "44"))
                                             (rule "applyEq" (formula "35") (term "1,0") (ifseqformula "44"))
                                             (rule "applyEq" (formula "34") (term "1,0") (ifseqformula "44"))
                                             (rule "applyEq" (formula "104") (term "0,1,0,0,0") (ifseqformula "44"))
                                             (rule "distributeIntersection" (formula "35") (term "0"))
                                             (rule "distributeIntersection" (formula "34") (term "0"))
                                             (rule "distributeIntersection" (formula "35") (term "0,0"))
                                             (rule "distributeIntersection" (formula "35") (term "1,0"))
                                             (rule "distributeIntersection" (formula "34") (term "1,0"))
                                             (rule "distributeIntersection" (formula "34") (term "0,0"))
                                             (rule "distributeIntersection" (formula "35") (term "1,0,0"))
                                             (rule "distributeIntersection" (formula "35") (term "0,0,0"))
                                             (rule "distributeIntersection" (formula "35") (term "0,1,0"))
                                             (rule "distributeIntersection" (formula "35") (term "1,1,0"))
                                             (rule "distributeIntersection" (formula "34") (term "0,1,0"))
                                             (rule "distributeIntersection" (formula "34") (term "1,1,0"))
                                             (rule "distributeIntersection" (formula "34") (term "0,0,0"))
                                             (rule "distributeIntersection" (formula "34") (term "1,0,0"))
                                             (rule "unionEqualsEmpty" (formula "35"))
                                             (rule "andLeft" (formula "35"))
                                             (rule "unionEqualsEmpty" (formula "34"))
                                             (rule "andLeft" (formula "34"))
                                             (rule "unionEqualsEmpty" (formula "37"))
                                             (rule "andLeft" (formula "37"))
                                             (rule "unionEqualsEmpty" (formula "36"))
                                             (rule "andLeft" (formula "36"))
                                             (rule "unionEqualsEmpty" (formula "35"))
                                             (rule "andLeft" (formula "35"))
                                             (rule "unionEqualsEmpty" (formula "34"))
                                             (rule "andLeft" (formula "34"))
                                             (rule "unionEqualsEmpty" (formula "41"))
                                              (builtin "One Step Simplification" (formula "41"))
                                             (rule "andLeft" (formula "41"))
                                             (rule "notLeft" (formula "42"))
                                             (rule "notLeft" (formula "41"))
                                             (rule "eqSymm" (formula "78"))
                                             (rule "eqSymm" (formula "77"))
                                             (rule "unionEqualsEmpty" (formula "40"))
                                              (builtin "One Step Simplification" (formula "40"))
                                             (rule "andLeft" (formula "40"))
                                             (rule "notLeft" (formula "41"))
                                             (rule "notLeft" (formula "40"))
                                             (rule "eqSymm" (formula "77"))
                                             (rule "eqSymm" (formula "76"))
                                             (rule "unionEqualsEmpty" (formula "39"))
                                              (builtin "One Step Simplification" (formula "39"))
                                             (rule "andLeft" (formula "39"))
                                             (rule "notLeft" (formula "40"))
                                             (rule "notLeft" (formula "39"))
                                             (rule "eqSymm" (formula "76"))
                                             (rule "eqSymm" (formula "75"))
                                             (rule "unionEqualsEmpty" (formula "38"))
                                              (builtin "One Step Simplification" (formula "38"))
                                             (rule "andLeft" (formula "38"))
                                             (rule "notLeft" (formula "38"))
                                             (rule "notLeft" (formula "38"))
                                             (rule "eqSymm" (formula "75"))
                                             (rule "eqSymm" (formula "74"))
                                             (rule "unionEqualsEmpty" (formula "37"))
                                              (builtin "One Step Simplification" (formula "37"))
                                             (rule "andLeft" (formula "37"))
                                             (rule "notLeft" (formula "38"))
                                             (rule "notLeft" (formula "37"))
                                             (rule "eqSymm" (formula "74"))
                                             (rule "eqSymm" (formula "73"))
                                             (rule "unionEqualsEmpty" (formula "36"))
                                              (builtin "One Step Simplification" (formula "36"))
                                             (rule "andLeft" (formula "36"))
                                             (rule "notLeft" (formula "36"))
                                             (rule "notLeft" (formula "36"))
                                             (rule "eqSymm" (formula "73"))
                                             (rule "eqSymm" (formula "72"))
                                             (rule "unionEqualsEmpty" (formula "35"))
                                              (builtin "One Step Simplification" (formula "35"))
                                             (rule "andLeft" (formula "35"))
                                             (rule "notLeft" (formula "35"))
                                             (rule "notLeft" (formula "35"))
                                             (rule "eqSymm" (formula "72"))
                                             (rule "eqSymm" (formula "71"))
                                             (rule "unionEqualsEmpty" (formula "34"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "andLeft" (formula "34"))
                                             (rule "notLeft" (formula "34"))
                                             (rule "notLeft" (formula "34"))
                                             (rule "eqSymm" (formula "71"))
                                             (rule "eqSymm" (formula "70"))
                                             (rule "commuteUnion_2" (formula "42") (term "0,1"))
                                             (rule "commuteUnion" (formula "42") (term "1,1,1"))
                                             (rule "commuteUnion" (formula "65") (term "0,0,1,0,0,2,0"))
                                             (rule "commuteUnion" (formula "65") (term "1,1,0,1,0,0,2,0"))
                                             (rule "commuteUnion" (formula "69") (term "1,1,0,1,0,0,0,2,0"))
                                             (rule "commuteUnion" (formula "69") (term "0,0,1,0,0,0,2,0"))
                                             (rule "commuteUnion" (formula "60") (term "0,0,1,0,2,0"))
                                             (rule "commuteUnion" (formula "60") (term "1,1,0,1,0,2,0"))
                                             (rule "commuteUnion" (formula "68") (term "0,0,1,0,0,0,2,0"))
                                             (rule "commuteUnion" (formula "68") (term "1,1,0,1,0,0,0,2,0"))
                                             (rule "commuteUnion_2" (formula "61") (term "0,0,1,0,0"))
                                             (rule "commuteUnion" (formula "61") (term "1,1,0,1,0,0"))
                                             (rule "commuteUnion" (formula "64") (term "0,0,0,1,0,0,2,0"))
                                             (rule "commuteUnion" (formula "64") (term "1,1,0,1,0,0,2,0"))
                                             (rule "commuteUnion_2" (formula "118") (term "0,0,1,0,0,0"))
                                             (rule "commuteUnion" (formula "118") (term "1,1,0,1,0,0,0"))
                                             (rule "commuteUnion" (formula "42") (term "0,0,1"))
                                             (rule "commuteUnion" (formula "65") (term "1,0,0,1,0,0,2,0"))
                                             (rule "commuteUnion" (formula "69") (term "1,0,0,1,0,0,0,2,0"))
                                             (rule "commuteUnion" (formula "60") (term "1,0,0,1,0,2,0"))
                                             (rule "commuteUnion" (formula "68") (term "1,0,0,1,0,0,0,2,0"))
                                             (rule "commuteUnion" (formula "61") (term "0,0,0,1,0,0"))
                                             (rule "commuteUnion_2" (formula "64") (term "0,0,1,0,0,2,0"))
                                             (rule "commuteUnion" (formula "118") (term "0,0,0,1,0,0,0"))
                                             (rule "commuteUnion_2" (formula "42") (term "0,1"))
                                             (rule "commuteUnion_2" (formula "61") (term "0,0,1,0,0"))
                                             (rule "commuteUnion_2" (formula "64") (term "0,1,0,0,2,0"))
                                             (rule "commuteUnion_2" (formula "118") (term "0,0,1,0,0,0"))
                                             (rule "commuteUnion_2" (formula "42") (term "1"))
                                             (rule "commuteUnion_2" (formula "61") (term "0,1,0,0"))
                                             (rule "commuteUnion" (formula "64") (term "0,0,0,1,0,0,2,0"))
                                             (rule "commuteUnion_2" (formula "118") (term "0,1,0,0,0"))
                                             (rule "Definition_axiom_for_equalityBucketsInRange_in_de_wiesler_Sorter" (formula "32") (term "0,0,1") (inst "b=b"))
                                              (builtin "One Step Simplification" (formula "32"))
                                             (rule "expand_inInt" (formula "32") (term "1,0,0,0,1"))
                                             (rule "replace_int_MAX" (formula "32") (term "1,0,1,0,0,0,1"))
                                             (rule "replace_int_MIN" (formula "32") (term "0,1,1,0,0,0,1"))
                                             (rule "translateJavaMod" (formula "32") (term "0,1,0,0,0,0,1"))
                                             (rule "translateJavaAddInt" (formula "32") (term "2,0,1,0,0,1"))
                                             (rule "translateJavaAddInt" (formula "32") (term "3,0,1,0,0,1"))
                                             (rule "translateJavaAddInt" (formula "32") (term "0,2,1,3,0,1,0,0,1"))
                                             (rule "polySimp_addComm0" (formula "32") (term "0,2,1,3,0,1,0,0,1"))
                                             (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0,0,0,0,1"))
                                             (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0,0,0,0,1"))
                                             (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0,0,0,0,1"))
                                             (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0,0,0,0,1"))
                                             (rule "add_literals" (formula "32") (term "0,0,0,1,0,0,0,0,0,1"))
                                             (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0,0,0,0,1"))
                                             (rule "inEqSimp_commuteLeq" (formula "32") (term "1,1,0,0,0,1"))
                                             (rule "jmod_axiom" (formula "32") (term "0,1,0,0,0,0,1"))
                                             (rule "polySimp_mulLiterals" (formula "32") (term "1,0,1,0,0,0,0,1"))
                                             (rule "polySimp_homoEq" (formula "32") (term "1,0,0,0,0,1"))
                                             (rule "polySimp_mulComm0" (formula "32") (term "1,0,1,0,0,0,0,1"))
                                             (rule "polySimp_rightDist" (formula "32") (term "1,0,1,0,0,0,0,1"))
                                             (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,1,0,0,0,0,1"))
                                             (rule "polySimp_mulComm0" (formula "32") (term "0,1,0,1,0,0,0,0,1"))
                                             (rule "polySimp_addAssoc" (formula "32") (term "0,1,0,0,0,0,1"))
                                             (rule "polySimp_sepPosMonomial" (formula "32") (term "1,0,0,0,0,1"))
                                             (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0,0,0,1"))
                                             (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0,0,0,1"))
                                             (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0,0,0,1"))
                                             (rule "mul_literals" (formula "32") (term "0,1,1,0,0,0,0,1"))
                                             (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0,0,0,1"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0,0,0,0,1"))
                                             (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0,0,0,0,1"))
                                             (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0,0,0,0,1"))
                                             (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0,0,0,0,1"))
                                             (rule "mul_literals" (formula "32") (term "0,1,1,0,0,0,0,0,1"))
                                             (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0,0,0,0,1"))
                                             (rule "Definition_axiom_for_allBucketsInRangeSorted_in_de_wiesler_Sorter" (formula "24") (term "0") (inst "b=b"))
                                              (builtin "One Step Simplification" (formula "24"))
                                             (rule "expand_inInt" (formula "24") (term "1,0,0"))
                                             (rule "replace_int_MIN" (formula "24") (term "0,1,1,0,0"))
                                             (rule "replace_int_MAX" (formula "24") (term "1,0,1,0,0"))
                                             (rule "translateJavaAddInt" (formula "24") (term "0,2,1,3,0,1,0"))
                                             (rule "translateJavaAddInt" (formula "24") (term "2,0,1,0"))
                                             (rule "translateJavaAddInt" (formula "24") (term "3,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "24") (term "0,2,1,3,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "24") (term "1,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,0"))
                                             (rule "mul_literals" (formula "24") (term "0,1,1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,0"))
                                             (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "9"))
                                             (rule "andLeft" (formula "9"))
                                             (rule "andLeft" (formula "9"))
                                             (rule "notLeft" (formula "11"))
                                             (rule "notLeft" (formula "10"))
                                             (rule "andLeft" (formula "9"))
                                             (rule "andLeft" (formula "9"))
                                             (rule "notLeft" (formula "11"))
                                             (rule "notLeft" (formula "10"))
                                             (rule "andLeft" (formula "9"))
                                             (rule "andLeft" (formula "9"))
                                             (rule "notLeft" (formula "11"))
                                             (rule "andLeft" (formula "9"))
                                             (rule "notLeft" (formula "11"))
                                             (rule "notLeft" (formula "10"))
                                             (rule "notLeft" (formula "9"))
                                             (rule "Definition_axiom_for_smallBucketsInRangeSorted_in_de_wiesler_Sorter" (formula "25") (term "0") (inst "b=b"))
                                              (builtin "One Step Simplification" (formula "25"))
                                             (rule "expand_inInt" (formula "25") (term "1,0,0"))
                                             (rule "replace_int_MAX" (formula "25") (term "1,0,1,0,0"))
                                             (rule "replace_int_MIN" (formula "25") (term "0,1,1,0,0"))
                                             (rule "translateJavaAddInt" (formula "25") (term "0,2,5,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "25") (term "0,2,5,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "25") (term "1,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,0"))
                                             (rule "Definition_axiom_for_bucketStartsOrdering_in_de_wiesler_Functions" (formula "44") (term "0") (inst "b=b"))
                                              (builtin "One Step Simplification" (formula "44"))
                                             (rule "replaceKnownSelect_taclet21210110_4" (formula "44") (term "1,1,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet21210110_5" (formula "44") (term "1,1,0"))
                                             (rule "replaceKnownSelect_taclet21210110_1" (formula "44") (term "0,1,0,0"))
                                             (rule "replaceKnownSelect_taclet21210110_1" (formula "44") (term "1,0,0,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet21210110_2" (formula "44") (term "0,1,0,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet21210110_2" (formula "44") (term "1,0,0,0"))
                                             (rule "replaceKnownSelect_taclet21210110_1" (formula "44") (term "1,1,1,0,1,0,1"))
                                             (rule "replaceKnownSelect_taclet21210110_4" (formula "44") (term "1,1,1,1,1,0,1"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet21210110_2" (formula "44") (term "1,1,1,0,1,0,1"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet21210110_5" (formula "44") (term "1,1,1,1,1,0,1"))
                                             (rule "expand_inInt" (formula "44") (term "1,0,0,1"))
                                             (rule "replace_int_MAX" (formula "44") (term "1,0,1,0,0,1"))
                                             (rule "replace_int_MIN" (formula "44") (term "0,1,1,0,0,1"))
                                             (rule "andLeft" (formula "44"))
                                             (rule "andLeft" (formula "44"))
                                             (rule "andLeft" (formula "44"))
                                             (rule "translateJavaAddInt" (formula "47") (term "0,2,1,1,0,1,0,1,0"))
                                             (rule "translateJavaAddInt" (formula "47") (term "0,2,0,1,1,0,1,0"))
                                             (rule "translateJavaAddInt" (formula "47") (term "0,2,1,1,0,1,1,1,0"))
                                             (rule "translateJavaAddInt" (formula "47") (term "0,2,0,0,0,1,1,1,0"))
                                             (rule "translateJavaAddInt" (formula "47") (term "0,2,0,1,1,1,1,0"))
                                             (rule "translateJavaAddInt" (formula "46") (term "0,2,0"))
                                             (rule "translateJavaAddInt" (formula "45") (term "0,2,1"))
                                             (rule "polySimp_addComm0" (formula "47") (term "0,2,1,1,0,1,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "47") (term "0,2,0,1,1,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "47") (term "0,2,1,1,0,1,1,1,0"))
                                             (rule "polySimp_addComm0" (formula "47") (term "0,2,0,0,0,1,1,1,0"))
                                             (rule "replaceKnownSelect_taclet21210110_7" (formula "47") (term "0,0,0,1,1,1,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet21210110_8" (formula "47") (term "0,0,0,1,1,1,0"))
                                             (rule "polySimp_addComm0" (formula "47") (term "0,2,0,1,1,1,1,0"))
                                             (rule "polySimp_addComm0" (formula "46") (term "0,2,0"))
                                             (rule "replaceKnownSelect_taclet21210110_7" (formula "46") (term "0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet21210110_8" (formula "46") (term "0"))
                                             (rule "polySimp_addComm0" (formula "45") (term "0,2,1"))
                                             (rule "replaceKnownSelect_taclet21210110_7" (formula "45") (term "1"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet21210110_8" (formula "45") (term "1"))
                                             (rule "inEqSimp_ltToLeq" (formula "47") (term "1,0,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "47") (term "1,0,0,1,0,0,0,0"))
                                             (rule "inEqSimp_gtToGeq" (formula "47") (term "0,1,1,0"))
                                             (rule "polySimp_mulComm0" (formula "47") (term "1,0,0,0,1,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "47") (term "0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "47") (term "1,0,0,0,0,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "47") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "47") (term "0,0,1,0,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "47") (term "1,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "44"))
                                             (rule "inEqSimp_commuteLeq" (formula "46") (term "1,0,1,0,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "46") (term "1,0,1,1,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "46") (term "0,0,1,1,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "45"))
                                             (rule "inEqSimp_commuteLeq" (formula "44"))
                                             (rule "applyEq" (formula "44") (term "0") (ifseqformula "22"))
                                             (rule "inEqSimp_commuteGeq" (formula "44"))
                                             (rule "applyEq" (formula "44") (term "1,1,1,1,1,0") (ifseqformula "22"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "1,0,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "44") (term "1,1,0,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "44") (term "1,1,0,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "44") (term "1,1,1,0,0,0,0"))
                                             (rule "mul_literals" (formula "44") (term "0,1,1,0,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "44") (term "1,1,1,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "44") (term "0,1,1,0"))
                                             (rule "polySimp_mulComm0" (formula "44") (term "1,0,1,1,0"))
                                             (rule "polySimp_rightDist" (formula "44") (term "1,0,1,1,0"))
                                             (rule "mul_literals" (formula "44") (term "0,1,0,1,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "44") (term "1,1,0,1,1,0"))
                                             (rule "polySimp_elimOne" (formula "44") (term "1,1,0,1,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "44") (term "1,0,0,1,0"))
                                             (rule "mul_literals" (formula "44") (term "0,1,0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "44") (term "1,1,0,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "44") (term "1,1,0,0,1,0"))
                                             (rule "Definition_axiom_for_notAllValuesInOneBucket_in_de_wiesler_Sorter" (formula "32") (term "0") (inst "b=b"))
                                              (builtin "One Step Simplification" (formula "32"))
                                             (rule "expand_inInt" (formula "32") (term "1,0,0"))
                                             (rule "replace_int_MAX" (formula "32") (term "1,0,1,0,0"))
                                             (rule "replace_int_MIN" (formula "32") (term "0,1,1,0,0"))
                                             (rule "translateJavaAddInt" (formula "32") (term "0,2,0,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "32") (term "0,1,0"))
                                             (rule "polySimp_elimSub" (formula "32") (term "0,1,0"))
                                             (rule "polySimp_addComm0" (formula "32") (term "0,1,0"))
                                             (rule "polySimp_addComm0" (formula "32") (term "0,2,1,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0"))
                                             (rule "polySimp_mulAssoc" (formula "32") (term "0,1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "32") (term "0,0,1,0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "32") (term "0,1,0,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "32") (term "0,1,0,0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "32") (term "0,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "32") (term "1,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0,0"))
                                             (rule "mul_literals" (formula "32") (term "0,1,1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0"))
                                             (rule "polySimp_mulComm0" (formula "32") (term "1,1,0"))
                                             (rule "polySimp_rightDist" (formula "32") (term "1,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0"))
                                             (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0"))
                                             (rule "polySimp_rightDist" (formula "32") (term "0,1,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "32") (term "1,0,1,1,0"))
                                             (rule "polySimp_elimOne" (formula "32") (term "1,0,1,1,0"))
                                             (rule "polySimp_rightDist" (formula "32") (term "0,0,1,1,0"))
                                             (rule "mul_literals" (formula "32") (term "0,0,0,1,1,0"))
                                             (rule "Definition_axiom_for_isValidBucketStarts_in_de_wiesler_Functions" (formula "21") (term "0"))
                                              (builtin "One Step Simplification" (formula "21"))
                                             (rule "andLeft" (formula "21"))
                                             (rule "andLeft" (formula "21"))
                                             (rule "andLeft" (formula "21"))
                                             (rule "translateJavaAddInt" (formula "23") (term "3,0"))
                                             (rule "translateJavaAddInt" (formula "22") (term "0"))
                                             (rule "polySimp_addComm0" (formula "23") (term "3,0"))
                                             (rule "polySimp_addComm0" (formula "22") (term "0"))
                                             (rule "inEqSimp_commuteLeq" (formula "21"))
                                             (rule "inEqSimp_commuteLeq" (formula "22"))
                                             (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "21"))
                                             (rule "leq_literals" (formula "7") (term "0"))
                                              (builtin "One Step Simplification" (formula "7"))
                                             (rule "true_left" (formula "7"))
                                             (rule "Definition_axiom_for_allBucketsPartitioned_in_de_wiesler_Sorter" (formula "26") (term "0") (inst "b=b"))
                                              (builtin "One Step Simplification" (formula "26"))
                                             (rule "expand_inInt" (formula "26") (term "1,0,0"))
                                             (rule "replace_int_MAX" (formula "26") (term "1,0,1,0,0"))
                                             (rule "replace_int_MIN" (formula "26") (term "0,1,1,0,0"))
                                             (rule "translateJavaAddInt" (formula "26") (term "0,2,5,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "26") (term "0,2,5,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "26") (term "1,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,0"))
                                             (rule "mul_literals" (formula "26") (term "0,1,1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,0"))
                                             (rule "nnf_imp2or" (formula "25") (term "0"))
                                             (rule "nnf_imp2or" (formula "33") (term "0,0,1"))
                                             (rule "nnf_imp2or" (formula "27") (term "0"))
                                             (rule "nnf_imp2or" (formula "46") (term "0"))
                                             (rule "nnf_imp2or" (formula "34") (term "0"))
                                             (rule "nnf_imp2or" (formula "26") (term "0"))
                                             (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "62") (term "0"))
                                             (rule "wellFormedAnon" (formula "62") (term "1,0"))
                                             (rule "wellFormedAnon" (formula "62") (term "0,1,0"))
                                             (rule "wellFormedAnon" (formula "62") (term "0,0,1,0"))
                                             (rule "replace_known_right" (formula "62") (term "0,0,0") (ifseqformula "127"))
                                              (builtin "One Step Simplification" (formula "62") (ifInst ""  (formula "1")) (ifInst ""  (formula "45")) (ifInst ""  (formula "48")) (ifInst ""  (formula "60")) (ifInst ""  (formula "63")))
                                             (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "63") (term "0") (inst "i=i"))
                                              (builtin "One Step Simplification" (formula "63"))
                                             (rule "expand_inInt" (formula "63") (term "1,0,0"))
                                             (rule "replace_int_MAX" (formula "63") (term "1,0,1,0,0"))
                                             (rule "replace_int_MIN" (formula "63") (term "0,1,1,0,0"))
                                             (rule "translateJavaSubInt" (formula "63") (term "1,1,0,0,0"))
                                             (rule "translateJavaAddInt" (formula "63") (term "0,2,1,1,0"))
                                             (rule "polySimp_elimSub" (formula "63") (term "1,1,0,0,0"))
                                             (rule "mul_literals" (formula "63") (term "1,1,1,0,0,0"))
                                             (rule "polySimp_addComm0" (formula "63") (term "0,2,1,1,0"))
                                             (rule "polySimp_addComm1" (formula "63") (term "1,1,0,0,0"))
                                             (rule "polySimp_addComm0" (formula "63") (term "0,1,1,0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "63") (term "1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "63") (term "1,0,0,1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "63") (term "0,1,0,0,1,0,0,0"))
                                             (rule "mul_literals" (formula "63") (term "0,0,1,0,0,1,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "63") (term "0,0,1,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "63") (term "0,0,0,1,0,0,0"))
                                             (rule "add_literals" (formula "63") (term "0,0,0,0,1,0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "63") (term "0,0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "63") (term "1,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "63") (term "1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "63") (term "1,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "63") (term "1,1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "63") (term "1,1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "63") (term "1,1,1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "63") (term "1,1,1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "63") (term "0,1,1,0,0,0"))
                                             (rule "mul_literals" (formula "63") (term "0,0,1,1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "63") (term "1,0,1,1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "63") (term "1,0,1,1,0,0,0"))
                                             (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "128"))
                                             (rule "replace_known_right" (formula "128") (term "0,1,0,0,0,0,0") (ifseqformula "74"))
                                              (builtin "One Step Simplification" (formula "128") (ifInst ""  (formula "72")) (ifInst ""  (formula "73")) (ifInst ""  (formula "75")) (ifInst ""  (formula "76")) (ifInst ""  (formula "77")) (ifInst ""  (formula "78")) (ifInst ""  (formula "79")))
                                             (rule "closeTrue" (formula "128"))
                                          )
                                       )
                                    )
                                 )
                              )
                           )
                        )
                     )
                  )
               )
            )
         )
         (branch "Null Reference (x_arr = null)"
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "34")))
            (rule "closeFalse" (formula "1"))
         )
         (branch "Index Out of Bounds (x_arr != null, but x_4 Out of Bounds!)"
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "34")))
             (builtin "One Step Simplification" (formula "36"))
            (rule "false_right" (formula "36"))
            (rule "polySimp_homoEq" (formula "27") (term "0,1,1"))
            (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,1"))
            (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,1"))
            (rule "mul_literals" (formula "27") (term "0,1,0,0,1,1"))
            (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,1"))
            (rule "polySimp_addComm0" (formula "27") (term "0,0,0,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "21"))
            (rule "polySimp_mulComm0" (formula "21") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "21") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "1") (term "0,0,1"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
            (rule "add_literals" (formula "1") (term "0,0,1"))
            (rule "inEqSimp_homoInEq0" (formula "19"))
            (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
            (rule "polySimp_rightDist" (formula "19") (term "1,0"))
            (rule "polySimp_mulAssoc" (formula "19") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "19") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "19") (term "0,1,0"))
            (rule "polySimp_elimOne" (formula "19") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "19") (term "0"))
            (rule "jmod_axiom" (formula "27") (term "0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1,1,1"))
            (rule "polySimp_sepNegMonomial" (formula "27") (term "0,1,1"))
            (rule "polySimp_mulLiterals" (formula "27") (term "0,0,1,1"))
            (rule "polySimp_elimOne" (formula "27") (term "0,0,1,1"))
            (rule "polySimp_sepNegMonomial" (formula "27") (term "1,1,1"))
            (rule "polySimp_mulLiterals" (formula "27") (term "0,1,1,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "21"))
            (rule "polySimp_mulLiterals" (formula "21") (term "0"))
            (rule "polySimp_elimOne" (formula "21") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
            (rule "mul_literals" (formula "1") (term "1,1"))
            (rule "inEqSimp_sepNegMonomial1" (formula "19"))
            (rule "polySimp_mulLiterals" (formula "19") (term "0"))
            (rule "polySimp_elimOne" (formula "19") (term "0"))
            (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "20"))
            (rule "qeq_literals" (formula "1") (term "0,1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "20"))
            (rule "leq_literals" (formula "13") (term "0"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "true_left" (formula "13"))
            (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "15"))
            (rule "leq_literals" (formula "5") (term "0"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "true_left" (formula "5"))
            (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "9"))
            (rule "polySimp_rightDist" (formula "19") (term "0,0"))
            (rule "mul_literals" (formula "19") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "19") (term "0"))
            (rule "add_literals" (formula "19") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "19"))
            (rule "polySimp_mulLiterals" (formula "19") (term "0"))
            (rule "polySimp_elimOne" (formula "19") (term "0"))
            (rule "inEqSimp_subsumption0" (formula "11") (ifseqformula "19"))
            (rule "leq_literals" (formula "11") (term "0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "5"))
            (rule "polySimp_mulComm0" (formula "14") (term "0,0"))
            (rule "polySimp_addComm0" (formula "14") (term "0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "14"))
            (rule "polySimp_mulLiterals" (formula "14") (term "0"))
            (rule "polySimp_elimOne" (formula "14") (term "0"))
            (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "16"))
            (rule "mul_literals" (formula "6") (term "0,0"))
            (rule "polySimp_addAssoc" (formula "6") (term "0"))
            (rule "add_literals" (formula "6") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "6"))
            (rule "mul_literals" (formula "6") (term "1"))
            (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "14"))
            (rule "leq_literals" (formula "6") (term "0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "true_left" (formula "6"))
            (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "12"))
            (rule "andLeft" (formula "12"))
            (rule "notLeft" (formula "13"))
            (rule "andLeft" (formula "12"))
            (rule "andLeft" (formula "12"))
            (rule "notLeft" (formula "14"))
            (rule "andLeft" (formula "12"))
            (rule "notLeft" (formula "14"))
            (rule "notLeft" (formula "13"))
            (rule "andLeft" (formula "12"))
            (rule "notLeft" (formula "13"))
            (rule "andLeft" (formula "12"))
            (rule "notLeft" (formula "13"))
            (rule "andLeft" (formula "12"))
            (rule "notLeft" (formula "13"))
            (rule "notLeft" (formula "12"))
            (rule "Definition_axiom_for_notAllValuesInOneBucket_in_de_wiesler_Sorter" (formula "25") (term "0") (inst "b=b"))
             (builtin "One Step Simplification" (formula "25"))
            (rule "expand_inInt" (formula "25") (term "1,0,0"))
            (rule "replace_int_MIN" (formula "25") (term "0,1,1,0,0"))
            (rule "replace_int_MAX" (formula "25") (term "1,0,1,0,0"))
            (rule "translateJavaAddInt" (formula "25") (term "0,2,0,0,1,0"))
            (rule "translateJavaSubInt" (formula "25") (term "0,1,0"))
            (rule "polySimp_elimSub" (formula "25") (term "0,1,0"))
            (rule "polySimp_addComm0" (formula "25") (term "0,1,0"))
            (rule "polySimp_addComm0" (formula "25") (term "0,2,1,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0"))
            (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0"))
            (rule "polySimp_mulAssoc" (formula "25") (term "0,1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "25") (term "0,0,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "25") (term "0,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "25") (term "0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "25") (term "0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "25") (term "1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,0"))
            (rule "mul_literals" (formula "25") (term "0,1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,1,0"))
            (rule "polySimp_rightDist" (formula "25") (term "1,1,0"))
            (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0"))
            (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0"))
            (rule "polySimp_rightDist" (formula "25") (term "0,1,1,0"))
            (rule "polySimp_mulLiterals" (formula "25") (term "1,0,1,1,0"))
            (rule "polySimp_elimOne" (formula "25") (term "1,0,1,1,0"))
            (rule "polySimp_rightDist" (formula "25") (term "0,0,1,1,0"))
            (rule "mul_literals" (formula "25") (term "0,0,0,1,1,0"))
            (rule "nnf_imp2or" (formula "25") (term "0"))
            (rule "nnf_notAnd" (formula "25") (term "0,0"))
            (rule "nnf_notAnd" (formula "25") (term "1,0,0"))
            (rule "inEqSimp_notGeq" (formula "25") (term "1,1,0,0"))
            (rule "mul_literals" (formula "25") (term "1,0,0,1,1,0,0"))
            (rule "add_literals" (formula "25") (term "0,0,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,1,0,0"))
            (rule "mul_literals" (formula "25") (term "1,1,1,0,0"))
            (rule "inEqSimp_notLeq" (formula "25") (term "0,1,0,0"))
            (rule "mul_literals" (formula "25") (term "1,0,0,0,1,0,0"))
            (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "0,1,0,0"))
            (rule "mul_literals" (formula "25") (term "1,0,1,0,0"))
            (rule "nnf_notAnd" (formula "25") (term "0,0,0"))
            (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,0"))
            (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,0"))
            (rule "add_literals" (formula "25") (term "0,0,0,1,0,0,0"))
            (rule "add_zero_left" (formula "25") (term "0,0,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0,0"))
            (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0,0"))
            (rule "add_zero_right" (formula "25") (term "0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0,0"))
            (rule "mul_literals" (formula "25") (term "1,0,0,0,0"))
            (rule "Definition_axiom_for_allBucketsPartitioned_in_de_wiesler_Sorter" (formula "22") (term "0") (inst "b=b"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "expand_inInt" (formula "22") (term "1,0,0"))
            (rule "replace_int_MAX" (formula "22") (term "1,0,1,0,0"))
            (rule "replace_int_MIN" (formula "22") (term "0,1,1,0,0"))
            (rule "translateJavaAddInt" (formula "22") (term "0,2,5,0,1,0"))
            (rule "polySimp_addComm0" (formula "22") (term "0,2,5,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "22") (term "1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "22") (term "0,1,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,0"))
            (rule "nnf_imp2or" (formula "22") (term "0"))
            (rule "nnf_notAnd" (formula "22") (term "0,0"))
            (rule "nnf_notAnd" (formula "22") (term "0,0,0"))
            (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0,0"))
            (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0,0"))
            (rule "add_literals" (formula "22") (term "0,0,0,1,0,0,0"))
            (rule "add_zero_left" (formula "22") (term "0,0,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0,0"))
            (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0,0"))
            (rule "add_zero_right" (formula "22") (term "0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0,0"))
            (rule "mul_literals" (formula "22") (term "1,0,0,0,0"))
            (rule "nnf_notAnd" (formula "22") (term "1,0,0"))
            (rule "inEqSimp_notGeq" (formula "22") (term "1,1,0,0"))
            (rule "mul_literals" (formula "22") (term "1,0,0,1,1,0,0"))
            (rule "add_literals" (formula "22") (term "0,0,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,1,0,0"))
            (rule "mul_literals" (formula "22") (term "1,1,1,0,0"))
            (rule "inEqSimp_notLeq" (formula "22") (term "0,1,0,0"))
            (rule "mul_literals" (formula "22") (term "1,0,0,0,1,0,0"))
            (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "0,1,0,0"))
            (rule "mul_literals" (formula "22") (term "1,0,1,0,0"))
            (rule "Definition_axiom_for_equalityBucketsInRange_in_de_wiesler_Sorter" (formula "24") (term "0,0,1") (inst "b=b"))
             (builtin "One Step Simplification" (formula "24"))
            (rule "expand_inInt" (formula "24") (term "1,0,0,0,1"))
            (rule "replace_int_MIN" (formula "24") (term "0,1,1,0,0,0,1"))
            (rule "replace_int_MAX" (formula "24") (term "1,0,1,0,0,0,1"))
            (rule "translateJavaAddInt" (formula "24") (term "3,0,1,0,0,1"))
            (rule "translateJavaMod" (formula "24") (term "0,1,0,0,0,0,1"))
            (rule "translateJavaAddInt" (formula "24") (term "2,0,1,0,0,1"))
            (rule "translateJavaAddInt" (formula "24") (term "0,2,1,3,0,1,0,0,1"))
            (rule "polySimp_addComm0" (formula "24") (term "0,2,1,3,0,1,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,0,0,0,1"))
            (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,0,0,0,1"))
            (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,0,0,0,1"))
            (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,0,0,0,1"))
            (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "24") (term "1,1,0,0,0,1"))
            (rule "jmod_axiom" (formula "24") (term "0,1,0,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "24") (term "1,0,1,0,0,0,0,1"))
            (rule "polySimp_homoEq" (formula "24") (term "1,0,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "24") (term "1,0,1,0,0,0,0,1"))
            (rule "polySimp_rightDist" (formula "24") (term "1,0,1,0,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,1,0,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "24") (term "0,1,0,1,0,0,0,0,1"))
            (rule "polySimp_addAssoc" (formula "24") (term "0,1,0,0,0,0,1"))
            (rule "polySimp_sepPosMonomial" (formula "24") (term "1,0,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,0,0,1"))
            (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,0,0,1"))
            (rule "mul_literals" (formula "24") (term "0,1,1,0,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,0,0,0,1"))
            (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,0,0,0,1"))
            (rule "mul_literals" (formula "24") (term "0,1,1,0,0,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,0,0,0,1"))
            (rule "Definition_axiom_for_smallBucketsInRangeSorted_in_de_wiesler_Sorter" (formula "23") (term "0") (inst "b=b"))
             (builtin "One Step Simplification" (formula "23"))
            (rule "expand_inInt" (formula "23") (term "1,0,0"))
            (rule "replace_int_MIN" (formula "23") (term "0,1,1,0,0"))
            (rule "replace_int_MAX" (formula "23") (term "1,0,1,0,0"))
            (rule "translateJavaAddInt" (formula "23") (term "0,2,5,0,1,0"))
            (rule "polySimp_addComm0" (formula "23") (term "0,2,5,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "23") (term "1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "23") (term "0,1,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,0"))
            (rule "Definition_axiom_for_allBucketsInRangeSorted_in_de_wiesler_Sorter" (formula "21") (term "0") (inst "b=b"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "expand_inInt" (formula "21") (term "1,0,0"))
            (rule "replace_int_MIN" (formula "21") (term "0,1,1,0,0"))
            (rule "replace_int_MAX" (formula "21") (term "1,0,1,0,0"))
            (rule "translateJavaAddInt" (formula "21") (term "0,2,1,3,0,1,0"))
            (rule "translateJavaAddInt" (formula "21") (term "2,0,1,0"))
            (rule "translateJavaAddInt" (formula "21") (term "3,0,1,0"))
            (rule "polySimp_addComm0" (formula "21") (term "0,2,1,3,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "21") (term "1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "21") (term "0,1,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0,0"))
            (rule "Definition_axiom_for_isValidBucketStarts_in_de_wiesler_Functions" (formula "19") (term "0"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "andLeft" (formula "19"))
            (rule "andLeft" (formula "19"))
            (rule "andLeft" (formula "19"))
            (rule "translateJavaAddInt" (formula "21") (term "3,0"))
            (rule "translateJavaAddInt" (formula "20") (term "0"))
            (rule "polySimp_addComm0" (formula "21") (term "3,0"))
            (rule "polySimp_addComm0" (formula "20") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "19"))
            (rule "inEqSimp_commuteLeq" (formula "20"))
            (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "19"))
            (rule "leq_literals" (formula "10") (term "0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "true_left" (formula "10"))
            (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "1"))
            (rule "polySimp_rightDist" (formula "19") (term "0,0"))
            (rule "mul_literals" (formula "19") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "19") (term "0"))
            (rule "polySimp_addAssoc" (formula "19") (term "0,0"))
            (rule "add_literals" (formula "19") (term "0,0,0"))
            (rule "add_zero_left" (formula "19") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "19"))
            (rule "polySimp_mulLiterals" (formula "19") (term "0"))
            (rule "polySimp_elimOne" (formula "19") (term "0"))
            (rule "inEqSimp_contradEq3" (formula "27") (term "0,1,1") (ifseqformula "19"))
            (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0,1,1"))
            (rule "mul_literals" (formula "27") (term "0,1,0,0,0,1,1"))
            (rule "polySimp_addAssoc" (formula "27") (term "0,0,0,1,1"))
            (rule "polySimp_addComm0" (formula "27") (term "0,0,0,0,1,1"))
            (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,0,1,1"))
            (rule "add_literals" (formula "27") (term "1,1,0,0,0,1,1"))
            (rule "times_zero_1" (formula "27") (term "1,0,0,0,1,1"))
            (rule "add_zero_right" (formula "27") (term "0,0,0,1,1"))
            (rule "qeq_literals" (formula "27") (term "0,0,1,1"))
             (builtin "One Step Simplification" (formula "27"))
            (rule "inEqSimp_contradInEq1" (formula "19") (ifseqformula "17"))
            (rule "andLeft" (formula "19"))
            (rule "inEqSimp_homoInEq1" (formula "19"))
            (rule "polySimp_pullOutFactor1b" (formula "19") (term "0"))
            (rule "add_literals" (formula "19") (term "1,1,0"))
            (rule "times_zero_1" (formula "19") (term "1,0"))
            (rule "add_zero_right" (formula "19") (term "0"))
            (rule "leq_literals" (formula "19"))
            (rule "closeFalse" (formula "19"))
         )
      )
   )
)
(branch "Null Reference (_bucket_starts = null)"
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "34")))
   (rule "closeFalse" (formula "1"))
)
(branch "Index Out of Bounds (_bucket_starts != null, but _bucket Out of Bounds!)"
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "34")))
    (builtin "One Step Simplification" (formula "36"))
   (rule "false_right" (formula "36"))
   (rule "polySimp_homoEq" (formula "27") (term "0,1,1"))
   (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,1"))
   (rule "mul_literals" (formula "27") (term "0,1,0,0,1,1"))
   (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,1"))
   (rule "polySimp_addComm0" (formula "27") (term "0,0,0,1,1"))
   (rule "inEqSimp_ltToLeq" (formula "21"))
   (rule "polySimp_mulComm0" (formula "21") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "21") (term "0"))
   (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
   (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
   (rule "add_zero_right" (formula "1") (term "0,0,1"))
   (rule "inEqSimp_homoInEq0" (formula "19"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,0"))
   (rule "polySimp_mulAssoc" (formula "19") (term "0,1,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "0,1,0"))
   (rule "polySimp_elimOne" (formula "19") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "19") (term "0"))
   (rule "jmod_axiom" (formula "27") (term "0,1,1,1"))
   (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1,1,1"))
   (rule "polySimp_sepNegMonomial" (formula "27") (term "0,1,1"))
   (rule "polySimp_mulLiterals" (formula "27") (term "0,0,1,1"))
   (rule "polySimp_elimOne" (formula "27") (term "0,0,1,1"))
   (rule "polySimp_sepNegMonomial" (formula "27") (term "1,1,1"))
   (rule "polySimp_mulLiterals" (formula "27") (term "0,1,1,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "21"))
   (rule "polySimp_mulLiterals" (formula "21") (term "0"))
   (rule "polySimp_elimOne" (formula "21") (term "0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
   (rule "mul_literals" (formula "1") (term "1,1"))
   (rule "inEqSimp_sepNegMonomial1" (formula "19"))
   (rule "polySimp_mulLiterals" (formula "19") (term "0"))
   (rule "polySimp_elimOne" (formula "19") (term "0"))
   (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "16"))
   (rule "leq_literals" (formula "5") (term "0"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "true_left" (formula "5"))
   (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "19"))
   (rule "qeq_literals" (formula "1") (term "0,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "19"))
   (rule "leq_literals" (formula "12") (term "0"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "true_left" (formula "12"))
   (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "17"))
   (rule "mul_literals" (formula "6") (term "0,0"))
   (rule "polySimp_addAssoc" (formula "6") (term "0"))
   (rule "add_literals" (formula "6") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "6"))
   (rule "mul_literals" (formula "6") (term "1"))
   (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "15"))
   (rule "leq_literals" (formula "6") (term "0"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "true_left" (formula "6"))
   (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "5"))
   (rule "polySimp_mulComm0" (formula "15") (term "0,0"))
   (rule "polySimp_addComm0" (formula "15") (term "0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "15"))
   (rule "polySimp_mulLiterals" (formula "15") (term "0"))
   (rule "polySimp_elimOne" (formula "15") (term "0"))
   (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "9"))
   (rule "polySimp_rightDist" (formula "19") (term "0,0"))
   (rule "mul_literals" (formula "19") (term "0,0,0"))
   (rule "polySimp_addComm1" (formula "19") (term "0"))
   (rule "add_literals" (formula "19") (term "0,0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "19"))
   (rule "polySimp_mulLiterals" (formula "19") (term "0"))
   (rule "polySimp_elimOne" (formula "19") (term "0"))
   (rule "inEqSimp_subsumption0" (formula "11") (ifseqformula "19"))
   (rule "leq_literals" (formula "11") (term "0"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "true_left" (formula "11"))
   (rule "Definition_axiom_for_notAllValuesInOneBucket_in_de_wiesler_Sorter" (formula "26") (term "0") (inst "b=b"))
    (builtin "One Step Simplification" (formula "26"))
   (rule "expand_inInt" (formula "26") (term "1,0,0"))
   (rule "replace_int_MIN" (formula "26") (term "0,1,1,0,0"))
   (rule "replace_int_MAX" (formula "26") (term "1,0,1,0,0"))
   (rule "translateJavaAddInt" (formula "26") (term "0,2,0,0,1,0"))
   (rule "translateJavaSubInt" (formula "26") (term "0,1,0"))
   (rule "polySimp_elimSub" (formula "26") (term "0,1,0"))
   (rule "polySimp_addComm0" (formula "26") (term "0,2,0,0,1,0"))
   (rule "polySimp_addComm0" (formula "26") (term "0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0"))
   (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0"))
   (rule "polySimp_mulAssoc" (formula "26") (term "0,1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "26") (term "0,0,1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "26") (term "0,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "26") (term "0,1,0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "26") (term "0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "26") (term "1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,0"))
   (rule "mul_literals" (formula "26") (term "0,1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0"))
   (rule "polySimp_mulComm0" (formula "26") (term "1,1,0"))
   (rule "polySimp_rightDist" (formula "26") (term "1,1,0"))
   (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0"))
   (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0"))
   (rule "polySimp_rightDist" (formula "26") (term "0,1,1,0"))
   (rule "polySimp_mulLiterals" (formula "26") (term "1,0,1,1,0"))
   (rule "polySimp_elimOne" (formula "26") (term "1,0,1,1,0"))
   (rule "polySimp_rightDist" (formula "26") (term "0,0,1,1,0"))
   (rule "mul_literals" (formula "26") (term "0,0,0,1,1,0"))
   (rule "nnf_imp2or" (formula "26") (term "0"))
   (rule "nnf_notAnd" (formula "26") (term "0,0"))
   (rule "nnf_notAnd" (formula "26") (term "0,0,0"))
   (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,0"))
   (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,0"))
   (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,0"))
   (rule "add_zero_left" (formula "26") (term "0,0,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,0"))
   (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0,0"))
   (rule "add_zero_right" (formula "26") (term "0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,0"))
   (rule "mul_literals" (formula "26") (term "1,0,0,0,0"))
   (rule "nnf_notAnd" (formula "26") (term "1,0,0"))
   (rule "inEqSimp_notLeq" (formula "26") (term "0,1,0,0"))
   (rule "mul_literals" (formula "26") (term "1,0,0,0,1,0,0"))
   (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "0,1,0,0"))
   (rule "mul_literals" (formula "26") (term "1,0,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "26") (term "1,1,0,0"))
   (rule "mul_literals" (formula "26") (term "1,0,0,1,1,0,0"))
   (rule "add_literals" (formula "26") (term "0,0,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,1,0,0"))
   (rule "mul_literals" (formula "26") (term "1,1,1,0,0"))
   (rule "Definition_axiom_for_equalityBucketsInRange_in_de_wiesler_Sorter" (formula "25") (term "0,0,1") (inst "b=b"))
    (builtin "One Step Simplification" (formula "25"))
   (rule "expand_inInt" (formula "25") (term "1,0,0,0,1"))
   (rule "replace_int_MAX" (formula "25") (term "1,0,1,0,0,0,1"))
   (rule "replace_int_MIN" (formula "25") (term "0,1,1,0,0,0,1"))
   (rule "translateJavaMod" (formula "25") (term "0,1,0,0,0,0,1"))
   (rule "translateJavaAddInt" (formula "25") (term "2,0,1,0,0,1"))
   (rule "translateJavaAddInt" (formula "25") (term "0,2,1,3,0,1,0,0,1"))
   (rule "translateJavaAddInt" (formula "25") (term "3,0,1,0,0,1"))
   (rule "polySimp_addComm0" (formula "25") (term "0,2,1,3,0,1,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,0,0,0,1"))
   (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0,0,0,0,1"))
   (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,0,0,0,1"))
   (rule "add_literals" (formula "25") (term "0,0,0,1,0,0,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "25") (term "1,1,0,0,0,1"))
   (rule "jmod_axiom" (formula "25") (term "0,1,0,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "25") (term "1,0,1,0,0,0,0,1"))
   (rule "polySimp_homoEq" (formula "25") (term "1,0,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "25") (term "1,0,1,0,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "25") (term "1,0,1,0,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,1,0,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "25") (term "0,1,0,1,0,0,0,0,1"))
   (rule "polySimp_addAssoc" (formula "25") (term "0,1,0,0,0,0,1"))
   (rule "polySimp_sepPosMonomial" (formula "25") (term "1,0,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,0,0,1"))
   (rule "mul_literals" (formula "25") (term "0,1,1,0,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,0,0,0,1"))
   (rule "mul_literals" (formula "25") (term "0,1,1,0,0,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,0,0,0,1"))
   (rule "nnf_imp2or" (formula "25") (term "0,0,1"))
   (rule "nnf_notAnd" (formula "25") (term "0,0,0,1"))
   (rule "nnf_notAnd" (formula "25") (term "0,0,0,0,1"))
   (rule "nnf_notAnd" (formula "25") (term "1,0,0,0,1"))
   (rule "inEqSimp_notGeq" (formula "25") (term "1,1,0,0,0,1"))
   (rule "mul_literals" (formula "25") (term "1,0,0,1,1,0,0,0,1"))
   (rule "add_literals" (formula "25") (term "0,0,1,1,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,1,0,0,0,1"))
   (rule "mul_literals" (formula "25") (term "1,1,1,0,0,0,1"))
   (rule "inEqSimp_notLeq" (formula "25") (term "0,1,0,0,0,1"))
   (rule "mul_literals" (formula "25") (term "1,0,0,0,1,0,0,0,1"))
   (rule "add_literals" (formula "25") (term "0,0,0,1,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "0,1,0,0,0,1"))
   (rule "mul_literals" (formula "25") (term "1,0,1,0,0,0,1"))
   (rule "nnf_notAnd" (formula "25") (term "0,0,0,0,0,1"))
   (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,0,0,0,1"))
   (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0,0,0,0,1"))
   (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,0,0,0,1"))
   (rule "add_literals" (formula "25") (term "0,0,0,1,0,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,0,0,0,1"))
   (rule "mul_literals" (formula "25") (term "0,1,1,0,0,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,0,0,0,1"))
   (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,0,0,0,0,0,1"))
   (rule "mul_literals" (formula "25") (term "0,1,0,0,0,0,0,0,0,0,1"))
   (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,0,0,0,0,0,1"))
   (rule "add_literals" (formula "25") (term "0,0,0,0,0,0,0,0,0,1"))
   (rule "add_zero_left" (formula "25") (term "0,0,0,0,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "25") (term "1,0,0,0,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "25") (term "1,0,0,0,0,0,0,1"))
   (rule "Definition_axiom_for_allBucketsPartitioned_in_de_wiesler_Sorter" (formula "23") (term "0") (inst "b=b"))
    (builtin "One Step Simplification" (formula "23"))
   (rule "expand_inInt" (formula "23") (term "1,0,0"))
   (rule "replace_int_MAX" (formula "23") (term "1,0,1,0,0"))
   (rule "replace_int_MIN" (formula "23") (term "0,1,1,0,0"))
   (rule "translateJavaAddInt" (formula "23") (term "0,2,5,0,1,0"))
   (rule "polySimp_addComm0" (formula "23") (term "0,2,5,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "23") (term "1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,0"))
   (rule "mul_literals" (formula "23") (term "0,1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,0"))
   (rule "nnf_imp2or" (formula "23") (term "0"))
   (rule "Definition_axiom_for_allBucketsInRangeSorted_in_de_wiesler_Sorter" (formula "22") (term "0") (inst "b=b"))
    (builtin "One Step Simplification" (formula "22"))
   (rule "expand_inInt" (formula "22") (term "1,0,0"))
   (rule "replace_int_MAX" (formula "22") (term "1,0,1,0,0"))
   (rule "replace_int_MIN" (formula "22") (term "0,1,1,0,0"))
   (rule "translateJavaAddInt" (formula "22") (term "3,0,1,0"))
   (rule "translateJavaAddInt" (formula "22") (term "2,0,1,0"))
   (rule "translateJavaAddInt" (formula "22") (term "0,2,1,3,0,1,0"))
   (rule "polySimp_addComm0" (formula "22") (term "0,2,1,3,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "22") (term "1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,0"))
   (rule "mul_literals" (formula "22") (term "0,1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,0"))
   (rule "Free_class_invariant_axiom_for_de_wiesler_Storage" (formula "29"))
    (builtin "One Step Simplification" (formula "29"))
   (rule "andLeft" (formula "29"))
   (rule "andLeft" (formula "29"))
   (rule "andLeft" (formula "31"))
   (rule "andLeft" (formula "29"))
   (rule "andLeft" (formula "32"))
   (rule "andLeft" (formula "29"))
   (rule "andLeft" (formula "33"))
   (rule "andLeft" (formula "29"))
   (rule "andLeft" (formula "34"))
   (rule "andLeft" (formula "29"))
   (rule "andLeft" (formula "35"))
   (rule "andLeft" (formula "29"))
   (rule "andLeft" (formula "36"))
   (rule "andLeft" (formula "29"))
   (rule "andLeft" (formula "37"))
   (rule "andLeft" (formula "29"))
   (rule "andLeft" (formula "38"))
   (rule "andLeft" (formula "38"))
   (rule "andLeft" (formula "38"))
   (rule "andLeft" (formula "38"))
   (rule "andLeft" (formula "38"))
   (rule "andLeft" (formula "38"))
   (rule "andLeft" (formula "38"))
   (rule "andLeft" (formula "38"))
   (rule "andLeft" (formula "38"))
   (rule "andLeft" (formula "38"))
   (rule "andLeft" (formula "38"))
   (rule "andLeft" (formula "38"))
   (rule "andLeft" (formula "38"))
   (rule "andLeft" (formula "38"))
   (rule "andLeft" (formula "38"))
   (rule "andLeft" (formula "38"))
   (rule "andLeft" (formula "38"))
   (rule "andLeft" (formula "38"))
   (rule "andLeft" (formula "38"))
   (rule "andLeft" (formula "38"))
   (rule "translateJavaMulInt" (formula "32") (term "1"))
   (rule "mul_literals" (formula "32") (term "1"))
   (rule "translateJavaMulInt" (formula "31") (term "1"))
   (rule "mul_literals" (formula "31") (term "1"))
   (rule "disjointDefinition" (formula "65"))
    (builtin "One Step Simplification" (formula "65"))
   (rule "notLeft" (formula "65"))
   (rule "disjointDefinition" (formula "64"))
    (builtin "One Step Simplification" (formula "64"))
   (rule "notLeft" (formula "64"))
   (rule "disjointDefinition" (formula "63"))
    (builtin "One Step Simplification" (formula "63"))
   (rule "notLeft" (formula "63"))
   (rule "eqSymm" (formula "63"))
   (rule "disjointDefinition" (formula "62"))
    (builtin "One Step Simplification" (formula "62"))
   (rule "notLeft" (formula "62"))
   (rule "eqSymm" (formula "62"))
   (rule "disjointDefinition" (formula "61"))
    (builtin "One Step Simplification" (formula "61"))
   (rule "notLeft" (formula "61"))
   (rule "eqSymm" (formula "61"))
   (rule "disjointDefinition" (formula "60"))
    (builtin "One Step Simplification" (formula "60"))
   (rule "notLeft" (formula "60"))
   (rule "eqSymm" (formula "60"))
   (rule "disjointDefinition" (formula "59"))
    (builtin "One Step Simplification" (formula "59"))
   (rule "notLeft" (formula "59"))
   (rule "eqSymm" (formula "59"))
   (rule "disjointDefinition" (formula "58"))
    (builtin "One Step Simplification" (formula "58"))
   (rule "notLeft" (formula "58"))
   (rule "eqSymm" (formula "58"))
   (rule "disjointDefinition" (formula "57"))
    (builtin "One Step Simplification" (formula "57"))
   (rule "notLeft" (formula "57"))
   (rule "eqSymm" (formula "57"))
   (rule "disjointDefinition" (formula "56"))
    (builtin "One Step Simplification" (formula "56"))
   (rule "notLeft" (formula "56"))
   (rule "eqSymm" (formula "56"))
   (rule "disjointDefinition" (formula "55"))
    (builtin "One Step Simplification" (formula "55"))
   (rule "notLeft" (formula "55"))
   (rule "eqSymm" (formula "55"))
   (rule "disjointDefinition" (formula "54"))
    (builtin "One Step Simplification" (formula "54"))
   (rule "notLeft" (formula "54"))
   (rule "eqSymm" (formula "54"))
   (rule "disjointDefinition" (formula "53"))
    (builtin "One Step Simplification" (formula "53"))
   (rule "notLeft" (formula "53"))
   (rule "eqSymm" (formula "53"))
   (rule "disjointDefinition" (formula "52"))
    (builtin "One Step Simplification" (formula "52"))
   (rule "notLeft" (formula "52"))
   (rule "eqSymm" (formula "52"))
   (rule "disjointDefinition" (formula "51"))
    (builtin "One Step Simplification" (formula "51"))
   (rule "notLeft" (formula "51"))
   (rule "eqSymm" (formula "51"))
   (rule "disjointDefinition" (formula "50"))
    (builtin "One Step Simplification" (formula "50"))
   (rule "notLeft" (formula "50"))
   (rule "disjointDefinition" (formula "49"))
    (builtin "One Step Simplification" (formula "49"))
   (rule "notLeft" (formula "49"))
   (rule "eqSymm" (formula "49"))
   (rule "disjointDefinition" (formula "48"))
    (builtin "One Step Simplification" (formula "48"))
   (rule "notLeft" (formula "48"))
   (rule "eqSymm" (formula "48"))
   (rule "disjointDefinition" (formula "47"))
    (builtin "One Step Simplification" (formula "47"))
   (rule "notLeft" (formula "47"))
   (rule "disjointDefinition" (formula "46"))
    (builtin "One Step Simplification" (formula "46"))
   (rule "notLeft" (formula "46"))
   (rule "disjointDefinition" (formula "45"))
    (builtin "One Step Simplification" (formula "45"))
   (rule "notLeft" (formula "45"))
   (rule "disjointDefinition" (formula "44"))
    (builtin "One Step Simplification" (formula "44"))
   (rule "notLeft" (formula "44"))
   (rule "disjointDefinition" (formula "43"))
    (builtin "One Step Simplification" (formula "43"))
   (rule "notLeft" (formula "43"))
   (rule "disjointDefinition" (formula "42"))
    (builtin "One Step Simplification" (formula "42"))
   (rule "notLeft" (formula "42"))
   (rule "disjointDefinition" (formula "41"))
    (builtin "One Step Simplification" (formula "41"))
   (rule "notLeft" (formula "41"))
   (rule "disjointDefinition" (formula "40"))
    (builtin "One Step Simplification" (formula "40"))
   (rule "notLeft" (formula "40"))
   (rule "disjointDefinition" (formula "39"))
    (builtin "One Step Simplification" (formula "39"))
   (rule "notLeft" (formula "39"))
   (rule "disjointDefinition" (formula "38"))
    (builtin "One Step Simplification" (formula "38"))
   (rule "notLeft" (formula "38"))
   (rule "applyEq" (formula "28") (term "1,0") (ifseqformula "37"))
   (rule "applyEq" (formula "27") (term "1,0") (ifseqformula "37"))
   (rule "distributeIntersection" (formula "28") (term "0"))
   (rule "distributeIntersection" (formula "27") (term "0"))
   (rule "distributeIntersection" (formula "28") (term "1,0"))
   (rule "distributeIntersection" (formula "28") (term "0,0"))
   (rule "distributeIntersection" (formula "27") (term "1,0"))
   (rule "distributeIntersection" (formula "27") (term "0,0"))
   (rule "distributeIntersection" (formula "28") (term "0,1,0"))
   (rule "distributeIntersection" (formula "28") (term "1,1,0"))
   (rule "distributeIntersection" (formula "28") (term "0,0,0"))
   (rule "distributeIntersection" (formula "28") (term "1,0,0"))
   (rule "distributeIntersection" (formula "27") (term "1,1,0"))
   (rule "distributeIntersection" (formula "27") (term "0,1,0"))
   (rule "distributeIntersection" (formula "27") (term "0,0,0"))
   (rule "distributeIntersection" (formula "27") (term "1,0,0"))
   (rule "unionEqualsEmpty" (formula "28"))
   (rule "andLeft" (formula "28"))
   (rule "unionEqualsEmpty" (formula "27"))
   (rule "andLeft" (formula "27"))
   (rule "unionEqualsEmpty" (formula "29"))
   (rule "andLeft" (formula "29"))
   (rule "unionEqualsEmpty" (formula "31"))
   (rule "andLeft" (formula "31"))
   (rule "unionEqualsEmpty" (formula "27"))
   (rule "andLeft" (formula "27"))
   (rule "unionEqualsEmpty" (formula "29"))
   (rule "andLeft" (formula "29"))
   (rule "unionEqualsEmpty" (formula "32"))
    (builtin "One Step Simplification" (formula "32"))
   (rule "andLeft" (formula "32"))
   (rule "notLeft" (formula "33"))
   (rule "notLeft" (formula "32"))
   (rule "eqSymm" (formula "44"))
   (rule "eqSymm" (formula "43"))
   (rule "unionEqualsEmpty" (formula "31"))
    (builtin "One Step Simplification" (formula "31"))
   (rule "andLeft" (formula "31"))
   (rule "notLeft" (formula "32"))
   (rule "notLeft" (formula "31"))
   (rule "eqSymm" (formula "43"))
   (rule "eqSymm" (formula "42"))
   (rule "unionEqualsEmpty" (formula "31"))
    (builtin "One Step Simplification" (formula "31"))
   (rule "andLeft" (formula "31"))
   (rule "notLeft" (formula "32"))
   (rule "notLeft" (formula "31"))
   (rule "eqSymm" (formula "42"))
   (rule "eqSymm" (formula "41"))
   (rule "unionEqualsEmpty" (formula "31"))
    (builtin "One Step Simplification" (formula "31"))
   (rule "andLeft" (formula "31"))
   (rule "notLeft" (formula "31"))
   (rule "notLeft" (formula "31"))
   (rule "eqSymm" (formula "41"))
   (rule "eqSymm" (formula "40"))
   (rule "unionEqualsEmpty" (formula "28"))
    (builtin "One Step Simplification" (formula "28"))
   (rule "andLeft" (formula "28"))
   (rule "notLeft" (formula "29"))
   (rule "notLeft" (formula "28"))
   (rule "eqSymm" (formula "40"))
   (rule "eqSymm" (formula "39"))
   (rule "unionEqualsEmpty" (formula "27"))
    (builtin "One Step Simplification" (formula "27"))
   (rule "andLeft" (formula "27"))
   (rule "notLeft" (formula "27"))
   (rule "notLeft" (formula "27"))
   (rule "eqSymm" (formula "39"))
   (rule "eqSymm" (formula "38"))
   (rule "unionEqualsEmpty" (formula "27"))
    (builtin "One Step Simplification" (formula "27"))
   (rule "andLeft" (formula "27"))
   (rule "notLeft" (formula "28"))
   (rule "notLeft" (formula "27"))
   (rule "eqSymm" (formula "38"))
   (rule "eqSymm" (formula "37"))
   (rule "unionEqualsEmpty" (formula "27"))
    (builtin "One Step Simplification" (formula "27"))
   (rule "andLeft" (formula "27"))
   (rule "notLeft" (formula "27"))
   (rule "notLeft" (formula "27"))
   (rule "eqSymm" (formula "37"))
   (rule "eqSymm" (formula "36"))
   (rule "commuteUnion" (formula "35") (term "1,1,1"))
   (rule "commuteUnion_2" (formula "35") (term "0,1"))
   (rule "commuteUnion" (formula "35") (term "0,0,1"))
   (rule "commuteUnion_2" (formula "35") (term "0,1"))
   (rule "commuteUnion_2" (formula "35") (term "1"))
   (rule "Definition_axiom_for_isValidBucketStarts_in_de_wiesler_Functions" (formula "20") (term "0"))
    (builtin "One Step Simplification" (formula "20"))
   (rule "andLeft" (formula "20"))
   (rule "andLeft" (formula "20"))
   (rule "andLeft" (formula "20"))
   (rule "translateJavaAddInt" (formula "22") (term "3,0"))
   (rule "translateJavaAddInt" (formula "21") (term "0"))
   (rule "polySimp_addComm0" (formula "22") (term "3,0"))
   (rule "polySimp_addComm0" (formula "21") (term "0"))
   (rule "inEqSimp_commuteLeq" (formula "20"))
   (rule "inEqSimp_commuteLeq" (formula "21"))
   (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "20"))
   (rule "leq_literals" (formula "10") (term "0"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "true_left" (formula "10"))
   (rule "inEqSimp_exactShadow3" (formula "20") (ifseqformula "1"))
   (rule "polySimp_rightDist" (formula "20") (term "0,0"))
   (rule "mul_literals" (formula "20") (term "0,0,0"))
   (rule "polySimp_addComm1" (formula "20") (term "0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "20"))
   (rule "polySimp_mulLiterals" (formula "20") (term "0"))
   (rule "polySimp_elimOne" (formula "20") (term "0"))
   (rule "inEqSimp_contradEq3" (formula "28") (term "0,1,1") (ifseqformula "20"))
   (rule "polySimp_rightDist" (formula "28") (term "1,0,0,0,1,1"))
   (rule "mul_literals" (formula "28") (term "0,1,0,0,0,1,1"))
   (rule "polySimp_addAssoc" (formula "28") (term "0,0,0,1,1"))
   (rule "polySimp_addComm1" (formula "28") (term "0,0,0,0,1,1"))
   (rule "add_literals" (formula "28") (term "0,0,0,0,0,1,1"))
   (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,0,1,1"))
   (rule "add_literals" (formula "28") (term "1,1,0,0,0,1,1"))
   (rule "times_zero_1" (formula "28") (term "1,0,0,0,1,1"))
   (rule "add_zero_right" (formula "28") (term "0,0,0,1,1"))
   (rule "qeq_literals" (formula "28") (term "0,0,1,1"))
    (builtin "One Step Simplification" (formula "28"))
   (rule "inEqSimp_contradInEq1" (formula "20") (ifseqformula "18"))
   (rule "andLeft" (formula "20"))
   (rule "inEqSimp_homoInEq1" (formula "20"))
   (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
   (rule "polySimp_rightDist" (formula "20") (term "1,0"))
   (rule "mul_literals" (formula "20") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "20") (term "0"))
   (rule "polySimp_addComm1" (formula "20") (term "0,0"))
   (rule "add_literals" (formula "20") (term "0,0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "20") (term "0"))
   (rule "add_literals" (formula "20") (term "1,1,0"))
   (rule "times_zero_1" (formula "20") (term "1,0"))
   (rule "add_zero_right" (formula "20") (term "0"))
   (rule "leq_literals" (formula "20"))
   (rule "closeFalse" (formula "20"))
)
)
}
