\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sun Apr 16 18:07:42 CEST 2023
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_OFF
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L , finalFields-finalFields\\:immutable
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../src";

\proofObligation "#Proof Obligation Settings
#Sun Apr 16 18:07:42 CEST 2023
contract=de.wiesler.Permute[de.wiesler.Permute\\:\\:place_block(int,[I,int,int,de.wiesler.Classifier,de.wiesler.BucketPointers,[I,[I,[I)].JML normal_behavior operation contract.0
name=de.wiesler.Permute[de.wiesler.Permute\\:\\:place_block(int,[I,int,int,de.wiesler.Classifier,de.wiesler.BucketPointers,[I,[I,[I)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "802059dea3"))
(keyLog "1" (keyUser "Julian" ) (keyVersion "802059dea3"))
(keyLog "2" (keyUser "Julian" ) (keyVersion "802059dea3"))
(keyLog "3" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))
(keyLog "4" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))
(keyLog "5" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))

(autoModeTime "714602")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "heapAtPre,o,f"))
(rule "translateJavaAddInt" (formula "1") (term "1,0,0,1,1,0,0,0,1,1"))
(rule "translateJavaSubInt" (formula "1") (term "2,0,0,2,0,0,0,0,1,0,1,1"))
(rule "translateJavaAddInt" (formula "1") (term "1,0,0,1,0,0,0,0,0,1,1"))
(rule "translateJavaAddInt" (formula "1") (term "0,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0"))
(rule "translateJavaSubInt" (formula "1") (term "1,0,1,1,1,1,1,1,1,1,1,1,0"))
(rule "translateJavaCastInt" (formula "1") (term "0,0,1,1,1,1,1,1,1,1,1,0"))
(rule "translateJavaSubInt" (formula "1") (term "1,0,1,1,1,1,1,1,1,1,1,0"))
(rule "translateJavaSubInt" (formula "1") (term "0,0,1,1,1,1,1,1,1,0"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "9"))
(rule "andLeft" (formula "11"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "15"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "14"))
(rule "andLeft" (formula "17"))
(rule "andLeft" (formula "19"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "15"))
(rule "andLeft" (formula "19"))
(rule "andLeft" (formula "23"))
(rule "andLeft" (formula "15"))
(rule "andLeft" (formula "24"))
(rule "andLeft" (formula "26"))
(rule "andLeft" (formula "15"))
(rule "andLeft" (formula "28"))
(rule "andLeft" (formula "15"))
(rule "andLeft" (formula "30"))
(rule "andLeft" (formula "15"))
(rule "andLeft" (formula "32"))
(rule "andLeft" (formula "15"))
(rule "andLeft" (formula "34"))
(rule "andLeft" (formula "15"))
(rule "notLeft" (formula "35"))
(rule "andLeft" (formula "35"))
(rule "andLeft" (formula "15"))
(rule "andLeft" (formula "37"))
(rule "notLeft" (formula "36"))
(rule "andLeft" (formula "15"))
(rule "notLeft" (formula "37"))
(rule "andLeft" (formula "37"))
(rule "andLeft" (formula "15"))
(rule "andLeft" (formula "39"))
(rule "notLeft" (formula "38"))
(rule "andLeft" (formula "15"))
(rule "notLeft" (formula "40"))
(rule "notLeft" (formula "39"))
(rule "andLeft" (formula "15"))
(rule "andLeft" (formula "15"))
(rule "andLeft" (formula "15"))
(rule "andLeft" (formula "15"))
(rule "andLeft" (formula "15"))
(rule "andLeft" (formula "15"))
(rule "andLeft" (formula "15"))
(rule "eqSymm" (formula "52") (term "1,0,0,1,0,1"))
(rule "replace_known_right" (formula "7") (term "0") (ifseqformula "47"))
 (builtin "One Step Simplification" (formula "7"))
(rule "replace_known_right" (formula "4") (term "0") (ifseqformula "49"))
 (builtin "One Step Simplification" (formula "4"))
(rule "replace_known_right" (formula "3") (term "0") (ifseqformula "50"))
 (builtin "One Step Simplification" (formula "3"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "51"))
 (builtin "One Step Simplification" (formula "2"))
(rule "replace_known_right" (formula "5") (term "0") (ifseqformula "48"))
 (builtin "One Step Simplification" (formula "5"))
(rule "replace_known_right" (formula "6") (term "0") (ifseqformula "46"))
 (builtin "One Step Simplification" (formula "6"))
(rule "polySimp_elimSub" (formula "52") (term "2,0,0,2,0,0,0,0,1,0,1"))
(rule "mul_literals" (formula "52") (term "1,2,0,0,2,0,0,0,0,1,0,1"))
(rule "polySimp_elimSub" (formula "39") (term "0"))
(rule "polySimp_elimSub" (formula "42") (term "1"))
(rule "polySimp_elimSub" (formula "43") (term "1"))
(rule "polySimp_addComm0" (formula "52") (term "1,0,0,1,1,0,0,0,1"))
(rule "polySimp_addComm0" (formula "52") (term "2,0,0,2,0,0,0,0,1,0,1"))
(rule "polySimp_addComm0" (formula "39") (term "0"))
(rule "polySimp_addComm0" (formula "42") (term "1"))
(rule "polySimp_addComm0" (formula "43") (term "1"))
(rule "disjointDefinition" (formula "35"))
 (builtin "One Step Simplification" (formula "35"))
(rule "notLeft" (formula "35"))
(rule "eqSymm" (formula "45"))
(rule "disjointDefinition" (formula "34"))
 (builtin "One Step Simplification" (formula "34"))
(rule "notLeft" (formula "34"))
(rule "eqSymm" (formula "44"))
(rule "disjointDefinition" (formula "33"))
 (builtin "One Step Simplification" (formula "33"))
(rule "notLeft" (formula "33"))
(rule "eqSymm" (formula "43"))
(rule "disjointDefinition" (formula "32"))
 (builtin "One Step Simplification" (formula "32"))
(rule "notLeft" (formula "32"))
(rule "eqSymm" (formula "42"))
(rule "castedGetAny" (formula "38") (term "0"))
(rule "disjointDefinition" (formula "31"))
 (builtin "One Step Simplification" (formula "31"))
(rule "notLeft" (formula "31"))
(rule "eqSymm" (formula "41"))
(rule "disjointDefinition" (formula "30"))
 (builtin "One Step Simplification" (formula "30"))
(rule "notLeft" (formula "30"))
(rule "eqSymm" (formula "40"))
(rule "disjointDefinition" (formula "29"))
 (builtin "One Step Simplification" (formula "29"))
(rule "notLeft" (formula "29"))
(rule "eqSymm" (formula "39"))
(rule "disjointDefinition" (formula "28"))
 (builtin "One Step Simplification" (formula "28"))
(rule "notLeft" (formula "28"))
(rule "eqSymm" (formula "38"))
(rule "disjointDefinition" (formula "27"))
 (builtin "One Step Simplification" (formula "27"))
(rule "notLeft" (formula "27"))
(rule "eqSymm" (formula "37"))
(rule "disjointDefinition" (formula "26"))
 (builtin "One Step Simplification" (formula "26"))
(rule "notLeft" (formula "26"))
(rule "disjointDefinition" (formula "25"))
 (builtin "One Step Simplification" (formula "25"))
(rule "notLeft" (formula "25"))
(rule "eqSymm" (formula "35"))
(rule "disjointDefinition" (formula "24"))
 (builtin "One Step Simplification" (formula "24"))
(rule "notLeft" (formula "24"))
(rule "eqSymm" (formula "34"))
(rule "disjointDefinition" (formula "23"))
 (builtin "One Step Simplification" (formula "23"))
(rule "notLeft" (formula "23"))
(rule "eqSymm" (formula "33"))
(rule "disjointDefinition" (formula "22"))
 (builtin "One Step Simplification" (formula "22"))
(rule "notLeft" (formula "22"))
(rule "disjointDefinition" (formula "21"))
 (builtin "One Step Simplification" (formula "21"))
(rule "notLeft" (formula "21"))
(rule "eqSymm" (formula "31"))
(rule "disjointDefinition" (formula "20"))
 (builtin "One Step Simplification" (formula "20"))
(rule "notLeft" (formula "20"))
(rule "eqSymm" (formula "30"))
(rule "disjointDefinition" (formula "19"))
 (builtin "One Step Simplification" (formula "19"))
(rule "notLeft" (formula "19"))
(rule "eqSymm" (formula "29"))
(rule "disjointDefinition" (formula "18"))
 (builtin "One Step Simplification" (formula "18"))
(rule "notLeft" (formula "18"))
(rule "eqSymm" (formula "28"))
(rule "disjointDefinition" (formula "17"))
 (builtin "One Step Simplification" (formula "17"))
(rule "notLeft" (formula "17"))
(rule "disjointDefinition" (formula "16"))
 (builtin "One Step Simplification" (formula "16"))
(rule "notLeft" (formula "16"))
(rule "disjointDefinition" (formula "15"))
 (builtin "One Step Simplification" (formula "15"))
(rule "notLeft" (formula "15"))
(rule "inEqSimp_commuteLeq" (formula "52") (term "0,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "52") (term "0,0,0,0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "52") (term "1,0,0,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "17"))
(rule "inEqSimp_commuteLeq" (formula "15"))
(rule "inEqSimp_commuteLeq" (formula "16"))
(rule "inEqSimp_commuteLeq" (formula "19"))
(rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
(rule "assignment" (formula "52") (term "1"))
 (builtin "One Step Simplification" (formula "52"))
(rule "applyEq" (formula "20") (term "1") (ifseqformula "11"))
(rule "applyEq" (formula "24") (term "1,1,0,0") (ifseqformula "11"))
(rule "applyEq" (formula "21") (term "1,0") (ifseqformula "11"))
(rule "elementOfUnion" (formula "52") (term "0,0,0,0,1,0,1"))
(rule "elementOfUnion" (formula "52") (term "0,0,0,0,0,1,0,1"))
 (builtin "One Step Simplification" (formula "52"))
(rule "elementOfUnion" (formula "52") (term "1,0,0,0,0,1,0,1"))
 (builtin "One Step Simplification" (formula "52"))
(rule "elementOfArrayRange" (formula "52") (term "0,0,0,0,0,0,1,0,1") (inst "iv=iv"))
(rule "inEqSimp_commuteLeq" (formula "52") (term "1,0,0,1,0,0,0,0,0,0,1,0,1"))
(rule "elementOfUnion" (formula "52") (term "0,1,0,0,0,0,1,0,1"))
 (builtin "One Step Simplification" (formula "52"))
(rule "commute_and" (formula "24") (term "0,1,0"))
(rule "commute_and" (formula "24") (term "0,0"))
(rule "commute_and_2" (formula "24") (term "1,0"))
(rule "methodBodyExpand" (formula "52") (term "1") (newnames "heapBefore_place_block,savedHeapBefore_place_block,_beginBefore_place_block,_bucket_pointersBefore_place_block,_classifierBefore_place_block,_endBefore_place_block,_overflowBefore_place_block,_swap_1Before_place_block,_swap_2Before_place_block,_target_bucketBefore_place_block,_valuesBefore_place_block"))
 (builtin "One Step Simplification" (formula "52"))
(rule "variableDeclarationGhostAssign" (formula "52") (term "1"))
(rule "variableDeclarationGhost" (formula "52") (term "1") (newnames "first_target_bucket"))
(rule "assignment" (formula "52") (term "1"))
 (builtin "One Step Simplification" (formula "52"))
(rule "variableDeclarationAssign" (formula "52") (term "1"))
(rule "variableDeclaration" (formula "52") (term "1") (newnames "first_is_current_swap"))
(rule "assignment" (formula "52") (term "1"))
 (builtin "One Step Simplification" (formula "52"))
(rule "arrayLengthIsAShort" (formula "14") (term "0"))
 (builtin "One Step Simplification" (formula "14"))
(rule "true_left" (formula "14"))
(rule "arrayLengthNotNegative" (formula "14") (term "0"))
(rule "applyEq" (formula "14") (term "0") (ifseqformula "15"))
(rule "qeq_literals" (formula "14"))
(rule "true_left" (formula "14"))
(rule "arrayLengthIsAShort" (formula "13") (term "0"))
 (builtin "One Step Simplification" (formula "13"))
(rule "true_left" (formula "13"))
(rule "arrayLengthNotNegative" (formula "13") (term "0"))
(rule "applyEq" (formula "13") (term "0") (ifseqformula "14"))
(rule "qeq_literals" (formula "13"))
(rule "true_left" (formula "13"))
(rule "arrayLengthNotNegative" (formula "12") (term "0"))
(rule "applyEq" (formula "12") (term "0") (ifseqformula "13"))
(rule "qeq_literals" (formula "12"))
(rule "true_left" (formula "12"))
(rule "arrayLengthIsAShort" (formula "12") (term "0"))
 (builtin "One Step Simplification" (formula "12"))
(rule "true_left" (formula "12"))
(rule "loopScopeInvDia" (formula "52") (term "1") (newnames "_target_bucket_0,first_is_current_swap_0,o,f") (inst "#x=x_1") (inst "#variant=x") (inst "#permissionsBefore_LOOP=h_2") (inst "#savedHeapBefore_LOOP=h_1") (inst "#heapBefore_LOOP=h") (inst "anon_permissions_LOOP=anon_permissions_LOOP_0") (inst "anon_savedHeap_LOOP=anon_savedHeap_LOOP_0") (inst "anon_heap_LOOP=anon_heap_LOOP_0"))
(branch "Invariant Initially Valid"
   (rule "andRight" (formula "52"))
   (branch "Case 1"
      (rule "andRight" (formula "52"))
      (branch "Case 1"
         (rule "andRight" (formula "52"))
         (branch "Case 1"
            (rule "andRight" (formula "52"))
            (branch "Case 1"
               (rule "andRight" (formula "52"))
               (branch "Case 1"
                   (builtin "SMTRule")
               )
               (branch "Case 2"
                  (rule "andRight" (formula "52"))
                  (branch "Case 1"
                      (builtin "One Step Simplification" (formula "52"))
                     (rule "inEqSimp_leqRight" (formula "52"))
                     (rule "add_zero_right" (formula "1") (term "0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "21"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "21") (term "0"))
                     (rule "inEqSimp_homoInEq0" (formula "25") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "25") (term "1,0,1,1,0"))
                     (rule "polySimp_rightDist" (formula "25") (term "1,0,1,1,0"))
                     (rule "polySimp_mulComm0" (formula "25") (term "0,1,0,1,1,0"))
                     (rule "polySimp_addAssoc" (formula "25") (term "0,1,1,0"))
                     (rule "inEqSimp_homoInEq0" (formula "19"))
                     (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "19") (term "1,0"))
                     (rule "polySimp_mulAssoc" (formula "19") (term "0,1,0"))
                     (rule "polySimp_mulComm0" (formula "19") (term "0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "19") (term "0,1,0"))
                     (rule "polySimp_elimOne" (formula "19") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "19") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "25") (term "0,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "21"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "0"))
                     (rule "polySimp_elimOne" (formula "21") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "25") (term "1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "0,1,1,0"))
                     (rule "polySimp_elimOne" (formula "25") (term "0,1,1,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "19"))
                     (rule "polySimp_mulLiterals" (formula "19") (term "0"))
                     (rule "polySimp_elimOne" (formula "19") (term "0"))
                     (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "20"))
                     (rule "qeq_literals" (formula "1") (term "0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "Case 2"
                      (builtin "One Step Simplification" (formula "52"))
                     (rule "inEqSimp_ltRight" (formula "52"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "21"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "21") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_homoInEq0" (formula "19"))
                     (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "19") (term "1,0"))
                     (rule "polySimp_mulAssoc" (formula "19") (term "0,1,0"))
                     (rule "polySimp_mulComm0" (formula "19") (term "0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "19") (term "0,1,0"))
                     (rule "polySimp_elimOne" (formula "19") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "19") (term "0"))
                     (rule "inEqSimp_homoInEq0" (formula "25") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "25") (term "1,0,1,1,0"))
                     (rule "polySimp_rightDist" (formula "25") (term "1,0,1,1,0"))
                     (rule "polySimp_mulComm0" (formula "25") (term "0,1,0,1,1,0"))
                     (rule "polySimp_addAssoc" (formula "25") (term "0,1,1,0"))
                     (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "12"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "21"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "0"))
                     (rule "polySimp_elimOne" (formula "21") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "25") (term "0,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "19"))
                     (rule "polySimp_mulLiterals" (formula "19") (term "0"))
                     (rule "polySimp_elimOne" (formula "19") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "25") (term "1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "0,1,1,0"))
                     (rule "polySimp_elimOne" (formula "25") (term "0,1,1,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "21"))
                     (rule "andLeft" (formula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "1"))
                     (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "1,1,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0"))
                     (rule "add_zero_right" (formula "1") (term "0"))
                     (rule "leq_literals" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
               )
            )
            (branch "Case 2"
                (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "23")))
               (rule "closeTrue" (formula "52"))
            )
         )
         (branch "Case 2"
             (builtin "One Step Simplification" (formula "52"))
            (rule "allRight" (formula "52") (inst "sk=b_0"))
            (rule "impRight" (formula "52"))
            (rule "andLeft" (formula "1"))
            (rule "inEqSimp_leqRight" (formula "54"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
            (rule "add_literals" (formula "1") (term "1,1,0"))
            (rule "times_zero_1" (formula "1") (term "1,0"))
            (rule "add_literals" (formula "1") (term "0"))
            (rule "qeq_literals" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "Case 2"
         (rule "andRight" (formula "52"))
         (branch "Case 1"
             (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "9")))
            (rule "closeTrue" (formula "52"))
         )
         (branch "Case 2"
             (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "10")))
            (rule "closeTrue" (formula "52"))
         )
      )
   )
   (branch "Case 2"
       (builtin "One Step Simplification" (formula "52"))
      (rule "closeTrue" (formula "52"))
   )
)
(branch "Invariant Preserved and Used"
    (builtin "One Step Simplification" (formula "53"))
   (rule "translateJavaCastInt" (formula "53") (term "0,1,1,1,0,1,1"))
   (rule "translateJavaSubInt" (formula "53") (term "2,0,0,1,0,0,1,0,0"))
   (rule "translateJavaSubInt" (formula "53") (term "2,0,0,2,0,0,0,0,1,0,1,1,0,1,1"))
   (rule "translateJavaAddInt" (formula "53") (term "1,0,1,0,0,1,1,0,1,1"))
   (rule "translateJavaAddInt" (formula "53") (term "0,0,1,0,0,1,1,0,1,1"))
   (rule "translateJavaAddInt" (formula "53") (term "1,0,0,1,0,0,0,0,0,0,0,0,1,1,0,1,1"))
   (rule "translateJavaAddInt" (formula "53") (term "0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,1,1"))
   (rule "translateJavaCastInt" (formula "53") (term "0,1,1,0,1"))
   (rule "translateJavaSubInt" (formula "53") (term "2,0,0,1,0,1,0,1,0,1"))
   (rule "translateJavaAddInt" (formula "53") (term "1,0,1,0"))
   (rule "translateJavaSubInt" (formula "53") (term "2,0,0,1,0,1,1,0,0"))
   (rule "translateJavaSubInt" (formula "53") (term "2,0,0,1,0,0,0,0,1,0"))
   (rule "translateJavaSubInt" (formula "53") (term "2,0,0,1,0,1,0,0,1,0"))
   (rule "translateJavaSubInt" (formula "53") (term "2,0,0,1,0,0,1,0,0,0,0"))
   (rule "translateJavaSubInt" (formula "53") (term "2,0,0,1,0,0,1,1,0,0,0,0,0,0,0"))
   (rule "translateJavaSubInt" (formula "53") (term "2,0,0,1,0,0,1,0,1,0,0,0"))
   (rule "translateJavaSubInt" (formula "53") (term "2,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0"))
   (rule "translateJavaAddInt" (formula "53") (term "1,0,0,1,0,0,0,0,0,0,0"))
   (rule "translateJavaAddInt" (formula "53") (term "0,0,0,1,0,0,0,0,0,0,0"))
   (rule "translateJavaSubInt" (formula "53") (term "2,0,0,1,0,2,0,1,1,0,1"))
   (rule "translateJavaAddInt" (formula "53") (term "0,0,1,0"))
   (rule "translateJavaSubInt" (formula "53") (term "2,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0"))
   (rule "impRight" (formula "53"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "3"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "2"))
   (rule "eqSymm" (formula "61") (term "1,0,0,1,0,1,1,0,1"))
   (rule "polySimp_elimSub" (formula "61") (term "2,0,0,2,0,0,0,0,1,0,1,1,0,1"))
   (rule "mul_literals" (formula "61") (term "1,2,0,0,2,0,0,0,0,1,0,1,1,0,1"))
   (rule "polySimp_elimSub" (formula "61") (term "2,0,0,1,0,2,0,1,1,0"))
   (rule "mul_literals" (formula "61") (term "1,2,0,0,1,0,2,0,1,1,0"))
   (rule "polySimp_elimSub" (formula "61") (term "2,0,0,1,0,1,0,1,0"))
   (rule "mul_literals" (formula "61") (term "1,2,0,0,1,0,1,0,1,0"))
   (rule "polySimp_elimSub" (formula "8") (term "2,0,0,1,0,0,0,0"))
   (rule "mul_literals" (formula "8") (term "1,2,0,0,1,0,0,0,0"))
   (rule "polySimp_elimSub" (formula "8") (term "2,0,0,1,0,1,0,0"))
   (rule "mul_literals" (formula "8") (term "1,2,0,0,1,0,1,0,0"))
   (rule "polySimp_elimSub" (formula "5") (term "2,0,0,1,0,0,1,0"))
   (rule "mul_literals" (formula "5") (term "1,2,0,0,1,0,0,1,0"))
   (rule "polySimp_elimSub" (formula "7") (term "2,0,0,1,0"))
   (rule "mul_literals" (formula "7") (term "1,2,0,0,1,0"))
   (rule "polySimp_elimSub" (formula "6") (term "2,0,0,1,0"))
   (rule "mul_literals" (formula "6") (term "1,2,0,0,1,0"))
   (rule "polySimp_elimSub" (formula "4") (term "2,0,0,1,0,0"))
   (rule "mul_literals" (formula "4") (term "1,2,0,0,1,0,0"))
   (rule "polySimp_elimSub" (formula "1") (term "2,0,0,1,0,0,0,0,0,1,0"))
   (rule "mul_literals" (formula "1") (term "1,2,0,0,1,0,0,0,0,0,1,0"))
   (rule "polySimp_elimSub" (formula "1") (term "2,0,0,1,0,0,1,1,0"))
   (rule "mul_literals" (formula "1") (term "1,2,0,0,1,0,0,1,1,0"))
   (rule "polySimp_elimSub" (formula "1") (term "2,0,0,1,0,0,1,0,1,0"))
   (rule "mul_literals" (formula "1") (term "1,2,0,0,1,0,0,1,0,1,0"))
   (rule "polySimp_addComm0" (formula "61") (term "1,0,1,0,0,1,1,0,1"))
   (rule "polySimp_addComm0" (formula "61") (term "0,0,1,0,0,1,1,0,1"))
   (rule "polySimp_addComm0" (formula "8") (term "1,0"))
   (rule "polySimp_addComm0" (formula "61") (term "2,0,0,2,0,0,0,0,1,0,1,1,0,1"))
   (rule "polySimp_addComm0" (formula "61") (term "2,0,0,1,0,2,0,1,1,0"))
   (rule "polySimp_addComm0" (formula "61") (term "2,0,0,1,0,1,0,1,0"))
   (rule "polySimp_addComm0" (formula "8") (term "2,0,0,1,0,0,0,0"))
   (rule "polySimp_addComm0" (formula "8") (term "2,0,0,1,0,1,0,0"))
   (rule "polySimp_addComm0" (formula "5") (term "2,0,0,1,0,0,1,0"))
   (rule "polySimp_addComm0" (formula "7") (term "2,0,0,1,0"))
   (rule "polySimp_addComm0" (formula "6") (term "2,0,0,1,0"))
   (rule "polySimp_addComm0" (formula "4") (term "2,0,0,1,0,0"))
   (rule "polySimp_addComm0" (formula "1") (term "2,0,0,1,0,0,0,0,0,1,0"))
   (rule "polySimp_addComm0" (formula "1") (term "2,0,0,1,0,0,1,1,0"))
   (rule "polySimp_addComm0" (formula "1") (term "2,0,0,1,0,0,1,0,1,0"))
   (rule "polySimp_addComm0" (formula "8") (term "0,0"))
   (rule "inEqSimp_commuteLeq" (formula "61") (term "1,0,1,0,0,0,0,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "61") (term "0,0,0,1,0,0,0,0,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "61") (term "0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "61") (term "0,1,0,0,0,0,0,0,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "2"))
   (rule "variableDeclaration" (formula "61") (term "1") (newnames "x_1"))
   (rule "applyEq" (formula "1") (term "1,1,0,0") (ifseqformula "20"))
   (rule "applyEq" (formula "3") (term "1") (ifseqformula "20"))
   (rule "applyEq" (formula "5") (term "1,1,0,0") (ifseqformula "20"))
   (rule "applyEq" (formula "61") (term "1,0,1,1,0") (ifseqformula "20"))
   (rule "elementOfUnion" (formula "61") (term "0,0,0,0,1,0,1,1,0,1"))
   (rule "elementOfUnion" (formula "61") (term "0,0,0,0,0,1,0,1,1,0,1"))
    (builtin "One Step Simplification" (formula "61"))
   (rule "elementOfUnion" (formula "61") (term "1,0,0,0,0,1,0,1,1,0,1"))
    (builtin "One Step Simplification" (formula "61"))
   (rule "elementOfArrayRange" (formula "61") (term "0,0,0,0,0,0,1,0,1,1,0,1") (inst "iv=iv"))
   (rule "inEqSimp_commuteLeq" (formula "61") (term "1,0,0,1,0,0,0,0,0,0,1,0,1,1,0,1"))
   (rule "elementOfUnion" (formula "61") (term "0,1,0,0,0,0,1,0,1,1,0,1"))
    (builtin "One Step Simplification" (formula "61"))
   (rule "commuteUnion" (formula "5") (term "1,1,0,0,1,0"))
   (rule "commuteUnion" (formula "6") (term "1,1,0"))
   (rule "commuteUnion" (formula "7") (term "1,1,0"))
   (rule "commuteUnion_2" (formula "4") (term "1,1,0,0"))
   (rule "commuteUnion" (formula "1") (term "1,1,0,0,0,0,0,1,0"))
   (rule "commuteUnion" (formula "1") (term "1,1,0,0,1,0,1,0"))
   (rule "commuteUnion_2" (formula "1") (term "1,1,0,0,1,1,0"))
   (rule "commuteUnion" (formula "5") (term "0,1,0,0,1,0"))
   (rule "commuteUnion" (formula "7") (term "0,1,0"))
   (rule "commuteUnion" (formula "6") (term "0,1,0"))
   (rule "commuteUnion" (formula "4") (term "0,1,0,0"))
   (rule "commuteUnion" (formula "1") (term "0,1,0,0,0,0,0,1,0"))
   (rule "commuteUnion" (formula "1") (term "0,1,0,0,1,1,0"))
   (rule "commuteUnion" (formula "1") (term "0,1,0,0,1,0,1,0"))
   (rule "commuteUnion" (formula "8") (term "1,0,1,0,0"))
   (rule "commuteUnion" (formula "8") (term "1,0,0,0,0"))
   (rule "commuteUnion" (formula "61") (term "1,1,0,1,0,1,0"))
   (rule "commuteUnion" (formula "61") (term "0,1,0,1,0,1,0"))
   (rule "commuteUnion_2" (formula "61") (term "1,1,0,2,0,1,1,0"))
   (rule "commuteUnion" (formula "61") (term "0,1,0,2,0,1,1,0"))
   (rule "commuteUnion" (formula "4") (term "0,1,1,0,0"))
   (rule "commuteUnion" (formula "1") (term "0,1,1,0,0,1,1,0"))
   (rule "commuteUnion" (formula "5") (term "1,0,0,1,0"))
   (rule "commuteUnion" (formula "7") (term "1,0"))
   (rule "commuteUnion_2" (formula "6") (term "1,0"))
   (rule "commuteUnion" (formula "1") (term "1,0,0,0,0,0,1,0"))
   (rule "commuteUnion" (formula "1") (term "1,0,0,1,0,1,0"))
   (rule "commuteUnion_2" (formula "8") (term "0,1,0,1,0,0"))
   (rule "commuteUnion" (formula "8") (term "1,1,0,1,0,0"))
   (rule "commuteUnion_2" (formula "8") (term "0,1,0,0,0,0"))
   (rule "commuteUnion" (formula "8") (term "1,1,0,0,0,0"))
   (rule "commuteUnion" (formula "61") (term "1,0,1,0,1,0"))
   (rule "commuteUnion" (formula "61") (term "0,1,1,0,2,0,1,1,0"))
   (rule "commuteUnion_2" (formula "4") (term "1,0,0"))
   (rule "commuteUnion" (formula "1") (term "1,0,0,1,1,0"))
   (rule "commuteUnion" (formula "6") (term "0,1,0"))
   (rule "commuteUnion" (formula "8") (term "0,0,1,0,1,0,0"))
   (rule "commuteUnion" (formula "8") (term "0,0,1,0,0,0,0"))
   (rule "commuteUnion_2" (formula "61") (term "1,0,2,0,1,1,0"))
   (rule "commuteUnion" (formula "4") (term "0,1,0,0"))
   (rule "commuteUnion" (formula "61") (term "0,1,0,2,0,1,1,0"))
   (rule "commute_and" (formula "1") (term "0,0"))
   (rule "commute_and" (formula "5") (term "0,0"))
   (rule "commute_and" (formula "1") (term "0,1,0"))
   (rule "commute_and_2" (formula "1") (term "1,0"))
   (rule "associativeLawUnion" (formula "7") (term "1,0"))
   (rule "arrayLengthIsAShort" (formula "26") (term "0"))
    (builtin "One Step Simplification" (formula "26"))
   (rule "true_left" (formula "26"))
   (rule "arrayLengthNotNegative" (formula "26") (term "0"))
   (rule "seqGetAlphaCast" (formula "31") (term "0"))
   (rule "castedGetAny" (formula "31") (term "0"))
    (builtin "One Step Simplification" (formula "31"))
   (rule "true_left" (formula "31"))
   (rule "associativeLawUnion" (formula "6") (term "0,0,1,0"))
   (rule "associativeLawUnion" (formula "5") (term "1,0,0,1,0"))
   (rule "associativeLawUnion" (formula "7") (term "0,0,1,0"))
   (rule "associativeLawUnion" (formula "8") (term "1,0,1,0,0"))
   (rule "associativeLawUnion" (formula "8") (term "1,0,0,0,0"))
   (rule "associativeLawUnion" (formula "62") (term "1,0,1,0,1,0"))
   (rule "onlyCreatedObjectsAreReferencedFinal" (formula "54") (term "1") (ifseqformula "10") (ifseqformula "13"))
   (rule "onlyCreatedObjectsAreReferencedFinal" (formula "53") (term "0,0") (ifseqformula "11") (ifseqformula "13"))
   (rule "onlyCreatedObjectsAreReferencedFinal" (formula "55") (term "0") (ifseqformula "12") (ifseqformula "14"))
   (rule "associativeLawUnion" (formula "4") (term "1,0,0,0,1,1,0"))
   (rule "associativeLawUnion" (formula "4") (term "1,0,0,1,0,1,0"))
   (rule "associativeLawUnion" (formula "4") (term "1,0,0,0,0,1,0"))
   (rule "associativeLawUnion" (formula "8") (term "0,0,1,0,0,1,0"))
   (rule "associativeLawUnion" (formula "65") (term "0,0,1,0,1,0,1,0"))
   (rule "associativeLawUnion" (formula "4") (term "0,0,1,0,0,0,1,1,0"))
   (rule "associativeLawUnion" (formula "4") (term "0,0,1,0,0,0,0,1,0"))
   (rule "ifElseSplit" (formula "65"))
   (branch "if true true"
       (builtin "One Step Simplification" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "variableDeclarationAssign" (formula "65") (term "1"))
      (rule "variableDeclaration" (formula "65") (term "1") (newnames "new_target"))
      (rule "methodCallWithAssignmentUnfoldArguments" (formula "65") (term "1"))
      (rule "variableDeclarationAssign" (formula "65") (term "1"))
      (rule "variableDeclaration" (formula "65") (term "1") (newnames "var"))
      (rule "assignment" (formula "65") (term "1"))
       (builtin "One Step Simplification" (formula "65"))
      (rule "variableDeclarationAssign" (formula "65") (term "1"))
      (rule "variableDeclaration" (formula "65") (term "1") (newnames "var_1"))
      (rule "assignment" (formula "65") (term "1"))
       (builtin "One Step Simplification" (formula "65"))
      (rule "variableDeclarationAssign" (formula "65") (term "1"))
      (rule "variableDeclaration" (formula "65") (term "1") (newnames "var_2"))
      (rule "assignment" (formula "65") (term "1"))
       (builtin "One Step Simplification" (formula "65"))
      (rule "variableDeclarationAssign" (formula "65") (term "1"))
      (rule "variableDeclaration" (formula "65") (term "1") (newnames "var_3"))
      (rule "assignment" (formula "65") (term "1"))
       (builtin "One Step Simplification" (formula "65"))
      (rule "variableDeclarationAssign" (formula "65") (term "1"))
      (rule "variableDeclaration" (formula "65") (term "1") (newnames "var_4"))
      (rule "assignment" (formula "65") (term "1"))
       (builtin "One Step Simplification" (formula "65"))
      (rule "variableDeclarationAssign" (formula "65") (term "1"))
      (rule "variableDeclaration" (formula "65") (term "1") (newnames "var_5"))
      (rule "assignment" (formula "65") (term "1"))
       (builtin "One Step Simplification" (formula "65"))
      (rule "variableDeclarationAssign" (formula "65") (term "1"))
      (rule "variableDeclaration" (formula "65") (term "1") (newnames "var_6"))
      (rule "condition_simple" (formula "65") (term "1"))
       (builtin "One Step Simplification" (formula "65"))
      (rule "variableDeclarationAssign" (formula "65") (term "1"))
      (rule "variableDeclaration" (formula "65") (term "1") (newnames "var_7"))
      (rule "condition_simple" (formula "65") (term "1"))
       (builtin "One Step Simplification" (formula "65"))
      (rule "variableDeclarationAssign" (formula "65") (term "1"))
      (rule "variableDeclaration" (formula "65") (term "1") (newnames "var_8"))
      (rule "assignment" (formula "65") (term "1"))
       (builtin "One Step Simplification" (formula "65"))
       (builtin "Use Operation Contract" (formula "65") (newnames "heapBefore_swap_block,result,exc_0,heapAfter_swap_block,anon_heap_swap_block") (contract "de.wiesler.Permute[de.wiesler.Permute::swap_block(int,[I,int,int,de.wiesler.Classifier,de.wiesler.BucketPointers,[I,[I,[I)].JML normal_behavior operation contract.0"))
      (branch "Post (swap_block)"
          (builtin "One Step Simplification" (formula "67"))
          (builtin "One Step Simplification" (formula "39"))
         (rule "translateJavaSubInt" (formula "39") (term "2,0,0,1,0,0"))
         (rule "translateJavaMulInt" (formula "39") (term "0,0,1,1,0,1,0,0"))
         (rule "translateJavaAddInt" (formula "39") (term "0,0,0,1,1,1,0,1,1"))
         (rule "translateJavaAddInt" (formula "39") (term "1,0,0,1,1,1,0,1,1"))
         (rule "translateJavaAddInt" (formula "39") (term "0,0,0,0,1,0,0,0,1,1"))
         (rule "translateJavaAddInt" (formula "39") (term "1,0,0,0,1,0,0,0,1,1"))
         (rule "translateJavaAddInt" (formula "39") (term "0,1,1,0,1,0,0"))
         (rule "andLeft" (formula "39"))
         (rule "andLeft" (formula "40"))
         (rule "andLeft" (formula "41"))
         (rule "andLeft" (formula "41"))
         (rule "andLeft" (formula "42"))
         (rule "andLeft" (formula "43"))
         (rule "andLeft" (formula "44"))
         (rule "andLeft" (formula "45"))
         (rule "polySimp_elimSub" (formula "39") (term "2,0,0,1,0"))
         (rule "mul_literals" (formula "39") (term "1,2,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "39") (term "0,0,1,1,0,1,0"))
         (rule "polySimp_addComm0" (formula "44") (term "0,0"))
         (rule "polySimp_addComm0" (formula "44") (term "1,0"))
         (rule "polySimp_addComm0" (formula "39") (term "2,0,0,1,0"))
         (rule "polySimp_addComm0" (formula "39") (term "0,1,1,0,1,0"))
         (rule "ifthenelse_negated" (formula "44") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "41") (term "1,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "41") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "43") (term "0,1,1"))
         (rule "assignment" (formula "74") (term "1"))
          (builtin "One Step Simplification" (formula "74"))
         (rule "blockEmpty" (formula "74") (term "1"))
         (rule "applyEq" (formula "43") (term "1,1,1,1") (ifseqformula "23"))
         (rule "applyEq" (formula "41") (term "1,1,0,0") (ifseqformula "23"))
         (rule "commuteUnion" (formula "39") (term "1,1,0"))
         (rule "commuteUnion" (formula "39") (term "0,1,0"))
         (rule "commute_and" (formula "43") (term "1,1"))
         (rule "commute_and_2" (formula "41") (term "0,1,0"))
         (rule "commute_and" (formula "41") (term "0,0"))
         (rule "shift_paren_and" (formula "43") (term "1"))
         (rule "commute_and" (formula "41") (term "0,0,1,0"))
         (rule "commute_and_2" (formula "41") (term "0,1,0"))
         (rule "commute_and_2" (formula "41") (term "1,0"))
         (rule "associativeLawUnion" (formula "39") (term "1,0"))
         (rule "commuteUnion_2" (formula "39") (term "0,1,0"))
         (rule "commuteUnion" (formula "39") (term "0,0,1,0"))
         (rule "ifUnfold" (formula "74") (term "1") (inst "#boolv=x_2"))
         (rule "variableDeclaration" (formula "74") (term "1") (newnames "x_2"))
         (rule "equality_comparison_simple" (formula "74") (term "1"))
          (builtin "One Step Simplification" (formula "74"))
         (rule "ifSplit" (formula "74"))
         (branch "if x_2 true"
             (builtin "One Step Simplification" (formula "1"))
             (builtin "One Step Simplification" (formula "75"))
            (rule "replace_known_left" (formula "45") (term "0,0,0,0") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "45"))
            (rule "add_zero_left" (formula "45") (term "0,0"))
            (rule "replace_known_left" (formula "44") (term "0,0") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "44"))
            (rule "true_left" (formula "44"))
            (rule "applyEq" (formula "74") (term "0,1,0") (ifseqformula "1"))
            (rule "applyEq" (formula "42") (term "1,0,1,0,1,1,0") (ifseqformula "1"))
            (rule "blockBreak" (formula "74") (term "1"))
            (rule "blockBreak" (formula "74") (term "1"))
             (builtin "One Step Simplification" (formula "74"))
            (rule "lsBreak" (formula "74") (term "1"))
            (rule "assignment" (formula "74") (term "1"))
             (builtin "One Step Simplification" (formula "74"))
            (rule "methodCallEmpty" (formula "74") (term "1"))
            (rule "tryEmpty" (formula "74") (term "1"))
            (rule "emptyModality" (formula "74") (term "1"))
            (rule "andRight" (formula "74"))
            (branch "Case 1"
               (rule "impRight" (formula "74"))
               (rule "andRight" (formula "75"))
               (branch "Case 1"
                  (rule "andRight" (formula "75"))
                  (branch "Case 1"
                     (rule "andRight" (formula "75"))
                     (branch "Case 1"
                         (builtin "One Step Simplification" (formula "1"))
                         (builtin "One Step Simplification" (formula "75"))
                        (rule "allRight" (formula "75") (inst "sk=b_0") (userinteraction))
                        (rule "impRight" (formula "75") (userinteraction))
                        (rule "allLeftHide" (formula "44") (inst "t=b_0") (userinteraction))
                        (rule "allLeftHide" (formula "7") (inst "t=b_0") (userinteraction))
                        (rule "true_left" (formula "2"))
                        (rule "andLeft" (formula "1"))
                        (rule "eqSymm" (formula "7") (term "0,1,1,1,1"))
                        (rule "eqSymm" (formula "76") (term "0,1,1,0,0"))
                        (rule "replace_known_left" (formula "44") (term "1,0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "44"))
                        (rule "replace_known_left" (formula "7") (term "1,0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "7"))
                        (rule "polySimp_homoEq" (formula "14") (term "0"))
                        (rule "polySimp_homoEq" (formula "46") (term "0"))
                        (rule "polySimp_homoEq" (formula "76") (term "0,0"))
                        (rule "polySimp_homoEq" (formula "44") (term "1,1"))
                        (rule "polySimp_homoEq" (formula "7") (term "1,1"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "44") (term "1,0,1,1"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,0,1,1"))
                        (rule "polySimp_addComm1" (formula "46") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "76") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "44") (term "1,0,1,1"))
                        (rule "polySimp_mulComm0" (formula "44") (term "0,1,0,1,1"))
                        (rule "polySimp_addComm1" (formula "44") (term "0,1,1"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,0,1,1"))
                        (rule "polySimp_mulComm0" (formula "7") (term "0,1,0,1,1"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,1,1"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "14") (term "0,0,0"))
                        (rule "polySimp_addAssoc" (formula "44") (term "0,0,1,1"))
                        (rule "polySimp_addComm0" (formula "44") (term "0,0,0,1,1"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,1"))
                        (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "9"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "9") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "36"))
                        (rule "polySimp_mulComm0" (formula "36") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "36") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "40") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "45"))
                        (rule "polySimp_mulComm0" (formula "45") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "45") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "44") (term "0"))
                        (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "44") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "7") (term "0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,0"))
                        (rule "inEqSimp_homoInEq0" (formula "34"))
                        (rule "polySimp_mulComm0" (formula "34") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "34") (term "1,0"))
                        (rule "polySimp_mulAssoc" (formula "34") (term "0,1,0"))
                        (rule "polySimp_mulComm0" (formula "34") (term "0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "34") (term "0,1,0"))
                        (rule "polySimp_elimOne" (formula "34") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "34") (term "0"))
                        (rule "inEqSimp_homoInEq0" (formula "40") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "40") (term "1,0,1,1,0"))
                        (rule "polySimp_rightDist" (formula "40") (term "1,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "40") (term "0,1,0,1,1,0"))
                        (rule "polySimp_addAssoc" (formula "40") (term "0,1,1,0"))
                        (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "26"))
                        (rule "replace_known_left" (formula "7") (term "0") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "7"))
                        (rule "andLeft" (formula "7"))
                        (rule "andLeft" (formula "7"))
                        (rule "replace_known_left" (formula "46") (term "0") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "46"))
                        (rule "andLeft" (formula "46"))
                        (rule "andLeft" (formula "46"))
                        (rule "andLeft" (formula "46"))
                        (rule "replace_known_left" (formula "81") (term "1,0") (ifseqformula "46"))
                         (builtin "One Step Simplification" (formula "81") (ifInst ""  (formula "47")))
                        (rule "polySimp_sepPosMonomial" (formula "51") (term "0"))
                        (rule "polySimp_mulComm0" (formula "51") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "51") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "51") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "51") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "51") (term "0,1,0"))
                        (rule "polySimp_sepNegMonomial" (formula "16") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "0,0"))
                        (rule "polySimp_elimOne" (formula "16") (term "0,0"))
                        (rule "polySimp_sepPosMonomial" (formula "9"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1"))
                        (rule "polySimp_rightDist" (formula "9") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "9") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,0,1"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,0,1"))
                        (rule "polySimp_mulComm0" (formula "9") (term "0,0,1"))
                        (rule "applyEq" (formula "81") (term "1,0") (ifseqformula "9"))
                        (rule "polySimp_addAssoc" (formula "81") (term "0"))
                        (rule "polySimp_addAssoc" (formula "81") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "81") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor1" (formula "81") (term "0,0,0,0"))
                        (rule "add_literals" (formula "81") (term "1,0,0,0,0"))
                        (rule "times_zero_1" (formula "81") (term "0,0,0,0"))
                        (rule "add_zero_left" (formula "81") (term "0,0,0"))
                        (rule "polySimp_sepPosMonomial" (formula "49"))
                        (rule "polySimp_mulComm0" (formula "49") (term "1"))
                        (rule "polySimp_rightDist" (formula "49") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "49") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "49") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "49") (term "0,1"))
                        (rule "polySimp_mulAssoc" (formula "49") (term "0,0,1"))
                        (rule "polySimp_mulComm0" (formula "49") (term "0,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "49") (term "0,0,1"))
                        (rule "polySimp_elimOne" (formula "49") (term "0,0,1"))
                        (rule "applyEq" (formula "81") (term "1,0") (ifseqformula "49"))
                        (rule "polySimp_addAssoc" (formula "81") (term "0"))
                        (rule "polySimp_addAssoc" (formula "81") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "81") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor2" (formula "81") (term "0,0,0,0"))
                        (rule "add_literals" (formula "81") (term "1,0,0,0,0"))
                        (rule "times_zero_1" (formula "81") (term "0,0,0,0"))
                        (rule "add_zero_left" (formula "81") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor1" (formula "81") (term "0,0"))
                        (rule "add_literals" (formula "81") (term "1,0,0"))
                        (rule "times_zero_1" (formula "81") (term "0,0"))
                        (rule "add_zero_left" (formula "81") (term "0"))
                         (builtin "One Step Simplification" (formula "81"))
                        (rule "equal_literals" (formula "81") (term "1"))
                         (builtin "One Step Simplification" (formula "81"))
                        (rule "notRight" (formula "81"))
                        (rule "replace_known_left" (formula "50") (term "0,1,1") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "50"))
                        (rule "polySimp_addComm1" (formula "50") (term "1"))
                        (rule "polySimp_addComm0" (formula "50") (term "0,1"))
                        (rule "applyEqRigid" (formula "9") (term "7,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "48") (term "7,0") (ifseqformula "1"))
                        (rule "applyEqRigid" (formula "47") (term "6,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "2"))
                        (rule "closeFalse" (formula "2"))
                     )
                     (branch "Case 2"
                        (rule "andRight" (formula "75"))
                        (branch "Case 1"
                            (builtin "SMTRule")
                        )
                        (branch "Case 2"
                           (rule "andRight" (formula "75"))
                           (branch "Case 1"
                               (builtin "SMTRule")
                           )
                           (branch "Case 2"
                              (rule "andRight" (formula "75"))
                              (branch "Case 1"
                                  (builtin "One Step Simplification" (formula "75") (ifInst ""  (formula "46")))
                                 (rule "closeTrue" (formula "75"))
                              )
                              (branch "Case 2"
                                  (builtin "One Step Simplification" (formula "75") (ifInst ""  (formula "47")))
                                 (rule "closeTrue" (formula "75"))
                              )
                           )
                        )
                     )
                  )
                  (branch "Case 2"
                      (builtin "One Step Simplification" (formula "1"))
                      (builtin "One Step Simplification" (formula "75"))
                     (rule "closeTrue" (formula "75"))
                  )
               )
               (branch "Case 2"
                   (builtin "One Step Simplification" (formula "1"))
                   (builtin "One Step Simplification" (formula "75"))
                  (rule "allRight" (formula "75") (inst "sk=f_0"))
                  (rule "allRight" (formula "75") (inst "sk=o_0"))
                  (rule "orRight" (formula "75"))
                  (rule "orRight" (formula "75"))
                  (rule "orRight" (formula "75"))
                  (rule "orRight" (formula "75"))
                  (rule "orRight" (formula "77"))
                  (rule "orRight" (formula "77"))
                  (rule "eqSymm" (formula "81"))
                  (rule "eqSymm" (formula "75") (term "0,0,0,1"))
                  (rule "pullOutSelect" (formula "81") (term "0") (inst "selectSK=f_0_0"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "42"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "eqSymm" (formula "82"))
                  (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                  (rule "elementOfUnion" (formula "1") (term "0,0,0,0,0"))
                  (rule "elementOfArrayRange" (formula "1") (term "1,0,0,0,0,0") (inst "iv=iv"))
                  (rule "eqSymm" (formula "1") (term "0,0,0,1,1,0,0,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1,1,0,0,0,0,0"))
                  (rule "replace_known_right" (formula "1") (term "1,0,0,0,0,0") (ifseqformula "76"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfUnion" (formula "1") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "80")))
                  (rule "elementOfSingleton" (formula "1") (term "0,0,0,0,0"))
                  (rule "replace_known_right" (formula "1") (term "0,0,0,0,0,0") (ifseqformula "77"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
                  (rule "simplifySelectOfAnon" (formula "1"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "82")))
                  (rule "elementOfUnion" (formula "1") (term "0,0,0"))
                  (rule "elementOfArrayRange" (formula "1") (term "1,0,0,0") (inst "iv=iv"))
                  (rule "eqSymm" (formula "1") (term "0,0,0,1,1,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1,1,0,0,0"))
                  (rule "replace_known_right" (formula "1") (term "1,0,0,0") (ifseqformula "77"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfUnion" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "78")))
                  (rule "elementOfUnion" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "80")))
                  (rule "elementOfUnion" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "81")) (ifInst ""  (formula "79")))
                  (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "commute_and" (formula "1") (term "0,0,0"))
                  (rule "ifthenelse_split" (formula "1") (term "0,1,0,0,0"))
                  (branch "first_is_current_swap_0 = TRUE TRUE"
                     (rule "eqSymm" (formula "2") (term "1,0,0,0"))
                     (rule "replace_known_right" (formula "2") (term "1,0,0,0") (ifseqformula "80"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "ifthenelse_split" (formula "2") (term "0"))
                     (branch " !o_0 = null & !( o_0.<created> = TRUE | o_0.<created>@anon_heap_LOOP_0<<anonHeapFunction>> = TRUE) TRUE"
                        (rule "andLeft" (formula "2"))
                        (rule "notLeft" (formula "3"))
                        (rule "notLeft" (formula "2"))
                        (rule "orRight" (formula "51"))
                        (rule "applyEqReverse" (formula "86") (term "1") (ifseqformula "2"))
                        (rule "hideAuxiliaryEq" (formula "2"))
                        (rule "eqSymm" (formula "85"))
                        (rule "replace_known_right" (formula "84") (term "0,1") (ifseqformula "50"))
                         (builtin "One Step Simplification" (formula "84") (ifInst ""  (formula "49")))
                        (rule "closeTrue" (formula "84"))
                     )
                     (branch " !o_0 = null & !( o_0.<created> = TRUE | o_0.<created>@anon_heap_LOOP_0<<anonHeapFunction>> = TRUE) FALSE"
                        (rule "close" (formula "84") (ifseqformula "2"))
                     )
                  )
                  (branch "first_is_current_swap_0 = TRUE FALSE"
                     (rule "eqSymm" (formula "1") (term "1,0,0,0"))
                     (rule "replace_known_right" (formula "1") (term "1,0,0,0") (ifseqformula "79"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "ifthenelse_split" (formula "1") (term "0"))
                     (branch " !o_0 = null & !( o_0.<created> = TRUE | o_0.<created>@anon_heap_LOOP_0<<anonHeapFunction>> = TRUE) TRUE"
                        (rule "andLeft" (formula "1"))
                        (rule "notLeft" (formula "2"))
                        (rule "notLeft" (formula "1"))
                        (rule "orRight" (formula "50"))
                        (rule "applyEqReverse" (formula "86") (term "1") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "eqSymm" (formula "85"))
                        (rule "replace_known_right" (formula "84") (term "0,0") (ifseqformula "48"))
                         (builtin "One Step Simplification" (formula "84") (ifInst ""  (formula "49")))
                        (rule "closeTrue" (formula "84"))
                     )
                     (branch " !o_0 = null & !( o_0.<created> = TRUE | o_0.<created>@anon_heap_LOOP_0<<anonHeapFunction>> = TRUE) FALSE"
                        (rule "close" (formula "84") (ifseqformula "1"))
                     )
                  )
               )
            )
            (branch "Case 2"
               (rule "impRight" (formula "74"))
               (rule "andRight" (formula "75"))
               (branch "Case 1"
                  (rule "andRight" (formula "75"))
                  (branch "Case 1"
                     (rule "andRight" (formula "75"))
                     (branch "Case 1"
                        (rule "andRight" (formula "75"))
                        (branch "Case 1"
                           (rule "andRight" (formula "75"))
                           (branch "Case 1"
                              (rule "andRight" (formula "75"))
                              (branch "Case 1"
                                 (rule "andRight" (formula "75"))
                                 (branch "Case 1"
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                                 (branch "Case 2"
                                    (rule "andRight" (formula "75"))
                                    (branch "Case 1"
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                    (branch "Case 2"
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                 )
                              )
                              (branch "Case 2"
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                           )
                           (branch "Case 2"
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                        )
                        (branch "Case 2"
                           (rule "andRight" (formula "75"))
                           (branch "Case 1"
                               (builtin "One Step Simplification" (formula "75") (ifInst ""  (formula "46")))
                              (rule "closeTrue" (formula "75"))
                           )
                           (branch "Case 2"
                               (builtin "One Step Simplification" (formula "75") (ifInst ""  (formula "47")))
                              (rule "closeTrue" (formula "75"))
                           )
                        )
                     )
                     (branch "Case 2"
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
                  (branch "Case 2"
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
               )
               (branch "Case 2"
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
            )
         )
         (branch "if x_2 false"
             (builtin "One Step Simplification" (formula "1"))
             (builtin "One Step Simplification" (formula "75"))
            (rule "notLeft" (formula "1"))
            (rule "replace_known_right" (formula "44") (term "0,0,0,0") (ifseqformula "47"))
             (builtin "One Step Simplification" (formula "44"))
            (rule "replace_known_right" (formula "43") (term "0,0") (ifseqformula "47"))
             (builtin "One Step Simplification" (formula "43"))
            (rule "andLeft" (formula "43"))
            (rule "andLeft" (formula "43"))
            (rule "compound_assignment_1_new" (formula "77") (term "1"))
             (builtin "One Step Simplification" (formula "77"))
            (rule "assignment" (formula "77") (term "1"))
             (builtin "One Step Simplification" (formula "77"))
            (rule "blockEmpty" (formula "77") (term "1"))
            (rule "lsContinue" (formula "77") (term "1"))
             (builtin "One Step Simplification" (formula "77") (ifInst ""  (formula "45")) (ifInst ""  (formula "47")) (ifInst ""  (formula "48")))
            (rule "andRight" (formula "77"))
            (branch "Case 1"
               (rule "andRight" (formula "77"))
               (branch "Case 1"
                  (rule "andRight" (formula "77"))
                  (branch "Case 1"
                     (rule "andRight" (formula "77"))
                     (branch "Case 1"
                        (rule "andRight" (formula "77"))
                        (branch "Case 1"
                           (rule "andRight" (formula "77"))
                           (branch "Case 1"
                              (rule "allRight" (formula "77") (inst "sk=b_0") (userinteraction))
                              (rule "allLeftHide" (formula "41") (inst "t=b_0") (userinteraction))
                              (rule "impLeft" (formula "41") (userinteraction))
                              (branch "Case 1"
                                 (rule "impRight" (formula "77"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "eqSymm" (formula "79") (term "0,1,1,0,0"))
                                 (rule "eqSymm" (formula "79") (term "0,1,0,0,0"))
                                 (rule "replace_known_left" (formula "50") (term "1") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "50"))
                                 (rule "polySimp_homoEq" (formula "47") (term "0"))
                                 (rule "polySimp_homoEq" (formula "13") (term "0"))
                                 (rule "polySimp_homoEq" (formula "6") (term "1,1,0"))
                                 (rule "polySimp_homoEq" (formula "79") (term "0,0"))
                                 (rule "polySimp_mulComm0" (formula "47") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "79") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "47") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "47") (term "0,1,0,0"))
                                 (rule "polySimp_addComm1" (formula "47") (term "0,0"))
                                 (rule "polySimp_rightDist" (formula "13") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "13") (term "0,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "6") (term "1,0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "0,1,0,1,1,0"))
                                 (rule "polySimp_addComm1" (formula "6") (term "0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "79") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "79") (term "0,1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "79") (term "0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "47") (term "0,0,0"))
                                 (rule "polySimp_addComm0" (formula "47") (term "0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "13") (term "0,0"))
                                 (rule "polySimp_addComm1" (formula "13") (term "0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "79") (term "0,0,0,0"))
                                 (rule "inEqSimp_ltRight" (formula "50"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "1") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "36"))
                                 (rule "polySimp_mulComm0" (formula "36") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "36") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "40") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "46"))
                                 (rule "polySimp_mulComm0" (formula "46") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "46") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "44"))
                                 (rule "polySimp_mulComm0" (formula "44") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "44") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "9"))
                                 (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "9") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "3"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "3") (term "0"))
                                 (rule "inEqSimp_homoInEq0" (formula "34"))
                                 (rule "polySimp_mulComm0" (formula "34") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "34") (term "1,0"))
                                 (rule "polySimp_mulAssoc" (formula "34") (term "0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "34") (term "0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "34") (term "0,1,0"))
                                 (rule "polySimp_elimOne" (formula "34") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "34") (term "0"))
                                 (rule "inEqSimp_homoInEq0" (formula "40") (term "1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "40") (term "1,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "40") (term "1,0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "40") (term "0,1,0,1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "40") (term "0,1,1,0"))
                                 (rule "applyEq" (formula "3") (term "0,1,0") (ifseqformula "26"))
                                 (rule "polySimp_sepPosMonomial" (formula "48") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "48") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "48") (term "1,0"))
                                 (rule "polySimp_mulLiterals" (formula "48") (term "1,1,0"))
                                 (rule "polySimp_elimOne" (formula "48") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "48") (term "0,1,0"))
                                 (rule "polySimp_mulAssoc" (formula "48") (term "0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "48") (term "0,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "48") (term "0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "48") (term "0,0,1,0"))
                                 (rule "polySimp_sepNegMonomial" (formula "14") (term "0"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "0,0"))
                                 (rule "polySimp_elimOne" (formula "14") (term "0,0"))
                                 (rule "polySimp_sepPosMonomial" (formula "7") (term "1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "7") (term "1,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "7") (term "1,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "7") (term "1,1,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "7") (term "0,1,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "7") (term "1,0,1,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "7") (term "0,0,1,1,1,0"))
                                 (rule "polySimp_sepPosMonomial" (formula "79") (term "0,0"))
                                 (rule "polySimp_mulComm0" (formula "79") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "79") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "79") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "79") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "79") (term "0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "79") (term "1,0,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "79") (term "1,0,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "79") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "36"))
                                 (rule "polySimp_mulLiterals" (formula "36") (term "0"))
                                 (rule "polySimp_elimOne" (formula "36") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "40") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "40") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "40") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "46"))
                                 (rule "polySimp_mulLiterals" (formula "46") (term "0"))
                                 (rule "polySimp_elimOne" (formula "46") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "44"))
                                 (rule "polySimp_mulLiterals" (formula "44") (term "0"))
                                 (rule "polySimp_elimOne" (formula "44") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "9"))
                                 (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                 (rule "polySimp_elimOne" (formula "9") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "7") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "34"))
                                 (rule "polySimp_mulLiterals" (formula "34") (term "0"))
                                 (rule "polySimp_elimOne" (formula "34") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "40") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "40") (term "0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "40") (term "0,1,1,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                 (rule "polySimp_elimOne" (formula "3") (term "0"))
                                 (rule "inEqSimp_contradEq7" (formula "51") (ifseqformula "47"))
                                 (rule "add_zero_left" (formula "51") (term "0,0"))
                                 (rule "mul_literals" (formula "51") (term "0,0"))
                                 (rule "leq_literals" (formula "51") (term "0"))
                                  (builtin "One Step Simplification" (formula "51"))
                                 (rule "false_right" (formula "51"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "3"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "inEqSimp_homoInEq1" (formula "1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0"))
                                 (rule "add_zero_right" (formula "1") (term "0"))
                                 (rule "leq_literals" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "Case 2"
                                 (rule "andLeft" (formula "41"))
                                 (rule "andLeft" (formula "41"))
                                 (rule "andLeft" (formula "41"))
                                 (rule "impRight" (formula "80"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "replace_known_left" (formula "82") (term "1,0") (ifseqformula "43") (userinteraction))
                                 (rule "replace_known_left" (formula "82") (term "1") (ifseqformula "44") (userinteraction))
                                  (builtin "One Step Simplification" (formula "82") (userinteraction))
                                 (rule "allLeftHide" (formula "6") (inst "t=b_0") (userinteraction))
                                 (rule "eqSymm" (formula "82") (term "0,1,0"))
                                 (rule "eqSymm" (formula "82") (term "0,1,1"))
                                 (rule "eqSymm" (formula "46") (term "0,1,0"))
                                 (rule "eqSymm" (formula "6") (term "0,1,1,1,1"))
                                 (rule "replace_known_left" (formula "6") (term "1,0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "6"))
                                 (rule "polySimp_homoEq" (formula "51") (term "0"))
                                 (rule "polySimp_homoEq" (formula "13") (term "0"))
                                 (rule "polySimp_homoEq" (formula "82"))
                                 (rule "polySimp_homoEq" (formula "46"))
                                 (rule "polySimp_homoEq" (formula "6") (term "1,1"))
                                 (rule "polySimp_mulComm0" (formula "51") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "82") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "46") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,0,1,1"))
                                 (rule "polySimp_rightDist" (formula "51") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "51") (term "0,1,0,0"))
                                 (rule "polySimp_addComm1" (formula "51") (term "0,0"))
                                 (rule "polySimp_rightDist" (formula "13") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "13") (term "0,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "82") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "82") (term "0,1,0"))
                                 (rule "polySimp_addComm1" (formula "82") (term "0"))
                                 (rule "polySimp_rightDist" (formula "46") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "46") (term "0,1,0"))
                                 (rule "polySimp_rightDist" (formula "6") (term "1,0,1,1"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "0,1,0,1,1"))
                                 (rule "polySimp_addComm1" (formula "6") (term "0,1,1"))
                                 (rule "polySimp_addAssoc" (formula "51") (term "0,0,0"))
                                 (rule "polySimp_addComm0" (formula "51") (term "0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "13") (term "0,0"))
                                 (rule "polySimp_addComm1" (formula "13") (term "0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "82") (term "0,0"))
                                 (rule "polySimp_addAssoc" (formula "46") (term "0"))
                                 (rule "polySimp_addComm1" (formula "46") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "46") (term "0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "39") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "8"))
                                 (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "8") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "47"))
                                 (rule "polySimp_mulComm0" (formula "47") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "47") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "49"))
                                 (rule "polySimp_mulComm0" (formula "49") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "49") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "35"))
                                 (rule "polySimp_mulComm0" (formula "35") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "35") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "2"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "2") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "6") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "6") (term "0,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "39") (term "1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "39") (term "1,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "39") (term "1,0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "39") (term "0,1,0,1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "39") (term "0,1,1,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "33"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,0"))
                                 (rule "polySimp_mulAssoc" (formula "33") (term "0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "33") (term "0,1,0"))
                                 (rule "polySimp_elimOne" (formula "33") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "33") (term "0"))
                                 (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "25"))
                                 (rule "replace_known_left" (formula "6") (term "0") (ifseqformula "2"))
                                  (builtin "One Step Simplification" (formula "6"))
                                 (rule "andLeft" (formula "6"))
                                 (rule "andLeft" (formula "6"))
                                 (rule "polySimp_sepPosMonomial" (formula "53") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "53") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "53") (term "1,0"))
                                 (rule "polySimp_mulLiterals" (formula "53") (term "1,1,0"))
                                 (rule "polySimp_elimOne" (formula "53") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "53") (term "0,1,0"))
                                 (rule "polySimp_mulAssoc" (formula "53") (term "0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "53") (term "0,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "53") (term "0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "53") (term "0,0,1,0"))
                                 (rule "polySimp_sepNegMonomial" (formula "15") (term "0"))
                                 (rule "polySimp_mulLiterals" (formula "15") (term "0,0"))
                                 (rule "polySimp_elimOne" (formula "15") (term "0,0"))
                                 (rule "polySimp_sepPosMonomial" (formula "84"))
                                 (rule "polySimp_mulComm0" (formula "84") (term "1"))
                                 (rule "polySimp_rightDist" (formula "84") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "84") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "84") (term "1,1"))
                                 (rule "polySimp_rightDist" (formula "84") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "84") (term "1,0,1"))
                                 (rule "polySimp_elimOne" (formula "84") (term "1,0,1"))
                                 (rule "polySimp_mulComm0" (formula "84") (term "0,0,1"))
                                 (rule "polySimp_sepNegMonomial" (formula "48"))
                                 (rule "polySimp_mulLiterals" (formula "48") (term "0"))
                                 (rule "polySimp_elimOne" (formula "48") (term "0"))
                                 (rule "applyEq" (formula "84") (term "1,1") (ifseqformula "48"))
                                 (rule "polySimp_addAssoc" (formula "84") (term "1"))
                                 (rule "polySimp_addAssoc" (formula "84") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "84") (term "0,0,1"))
                                 (rule "add_literals" (formula "84") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "84") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "84") (term "0,0,1"))
                                 (rule "polySimp_sepPosMonomial" (formula "8"))
                                 (rule "polySimp_mulComm0" (formula "8") (term "1"))
                                 (rule "polySimp_rightDist" (formula "8") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "8") (term "1,1"))
                                 (rule "polySimp_rightDist" (formula "8") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1"))
                                 (rule "polySimp_elimOne" (formula "8") (term "1,0,1"))
                                 (rule "polySimp_mulComm0" (formula "8") (term "0,0,1"))
                                 (rule "close" (formula "84") (ifseqformula "8"))
                              )
                           )
                           (branch "Case 2"
                              (rule "polySimp_homoEq" (formula "11") (term "0"))
                              (rule "polySimp_homoEq" (formula "4") (term "1,1,0"))
                              (rule "polySimp_homoEq" (formula "41") (term "1,1,0"))
                              (rule "polySimp_homoEq" (formula "46") (term "0"))
                              (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "41") (term "1,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "46") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
                              (rule "polySimp_rightDist" (formula "4") (term "1,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,1,1,0"))
                              (rule "polySimp_addComm1" (formula "4") (term "0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "41") (term "1,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "41") (term "0,1,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "46") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "46") (term "0,1,0,0"))
                              (rule "polySimp_addComm1" (formula "46") (term "0,0"))
                              (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "11") (term "0,0,0"))
                              (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,1,0"))
                              (rule "polySimp_addAssoc" (formula "41") (term "0,1,1,0"))
                              (rule "polySimp_addComm1" (formula "41") (term "0,0,1,1,0"))
                              (rule "polySimp_addComm0" (formula "41") (term "0,0,0,1,1,0"))
                              (rule "polySimp_addAssoc" (formula "46") (term "0,0,0"))
                              (rule "polySimp_addComm0" (formula "46") (term "0,0,0,0"))
                              (rule "inEqSimp_ltRight" (formula "77"))
                              (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "1") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "42") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "45"))
                              (rule "polySimp_mulComm0" (formula "45") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "45") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "43"))
                              (rule "polySimp_mulComm0" (formula "43") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "43") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "7"))
                              (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "7") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "38") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "34"))
                              (rule "polySimp_mulComm0" (formula "34") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "34") (term "0"))
                              (rule "inEqSimp_homoInEq0" (formula "38") (term "1,1,0"))
                              (rule "polySimp_mulComm0" (formula "38") (term "1,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "38") (term "1,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "38") (term "0,1,0,1,1,0"))
                              (rule "polySimp_addAssoc" (formula "38") (term "0,1,1,0"))
                              (rule "inEqSimp_homoInEq0" (formula "32"))
                              (rule "polySimp_mulComm0" (formula "32") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "32") (term "1,0"))
                              (rule "polySimp_mulAssoc" (formula "32") (term "0,1,0"))
                              (rule "polySimp_mulComm0" (formula "32") (term "0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "32") (term "0,1,0"))
                              (rule "polySimp_elimOne" (formula "32") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "32") (term "0"))
                              (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "24"))
                              (rule "polySimp_sepNegMonomial" (formula "12") (term "0"))
                              (rule "polySimp_mulLiterals" (formula "12") (term "0,0"))
                              (rule "polySimp_elimOne" (formula "12") (term "0,0"))
                              (rule "polySimp_sepPosMonomial" (formula "5") (term "1,1,0"))
                              (rule "polySimp_mulComm0" (formula "5") (term "1,1,1,0"))
                              (rule "polySimp_rightDist" (formula "5") (term "1,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,1,0"))
                              (rule "polySimp_elimOne" (formula "5") (term "1,1,1,1,0"))
                              (rule "polySimp_rightDist" (formula "5") (term "0,1,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "5") (term "1,0,1,1,1,0"))
                              (rule "polySimp_elimOne" (formula "5") (term "1,0,1,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "5") (term "0,0,1,1,1,0"))
                              (rule "polySimp_sepNegMonomial" (formula "42") (term "1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "42") (term "0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "42") (term "0,1,1,0"))
                              (rule "polySimp_sepPosMonomial" (formula "47") (term "0"))
                              (rule "polySimp_mulComm0" (formula "47") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "47") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "47") (term "1,1,0"))
                              (rule "polySimp_elimOne" (formula "47") (term "1,1,0"))
                              (rule "polySimp_rightDist" (formula "47") (term "0,1,0"))
                              (rule "polySimp_mulAssoc" (formula "47") (term "0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "47") (term "0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "47") (term "0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "47") (term "0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "9") (term "0,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "42") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "42") (term "0,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "42") (term "1,1,0,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "45"))
                              (rule "polySimp_mulLiterals" (formula "45") (term "0"))
                              (rule "polySimp_elimOne" (formula "45") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "5") (term "0,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "43"))
                              (rule "polySimp_mulLiterals" (formula "43") (term "0"))
                              (rule "polySimp_elimOne" (formula "43") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                              (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                              (rule "polySimp_elimOne" (formula "7") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "38") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "38") (term "0,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "34"))
                              (rule "polySimp_mulLiterals" (formula "34") (term "0"))
                              (rule "polySimp_elimOne" (formula "34") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "38") (term "1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "38") (term "0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "38") (term "0,1,1,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "32"))
                              (rule "polySimp_mulLiterals" (formula "32") (term "0"))
                              (rule "polySimp_elimOne" (formula "32") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "inEqSimp_contradEq7" (formula "50") (ifseqformula "46"))
                              (rule "add_zero_left" (formula "50") (term "0,0"))
                              (rule "mul_literals" (formula "50") (term "0,0"))
                              (rule "leq_literals" (formula "50") (term "0"))
                               (builtin "One Step Simplification" (formula "50"))
                              (rule "false_right" (formula "50"))
                              (rule "inEqSimp_contradInEq0" (formula "45") (ifseqformula "1"))
                              (rule "andLeft" (formula "45"))
                              (rule "inEqSimp_homoInEq1" (formula "45"))
                              (rule "polySimp_pullOutFactor1b" (formula "45") (term "0"))
                              (rule "add_literals" (formula "45") (term "1,1,0"))
                              (rule "times_zero_1" (formula "45") (term "1,0"))
                              (rule "add_zero_right" (formula "45") (term "0"))
                              (rule "leq_literals" (formula "45"))
                              (rule "closeFalse" (formula "45"))
                           )
                        )
                        (branch "Case 2"
                           (rule "polySimp_homoEq" (formula "4") (term "1,1,0"))
                           (rule "polySimp_homoEq" (formula "11") (term "0"))
                           (rule "polySimp_homoEq" (formula "41") (term "1,1,0"))
                           (rule "polySimp_homoEq" (formula "46") (term "0"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "41") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "46") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "4") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,1,1,0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "41") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "41") (term "0,1,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "46") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "46") (term "0,1,0,0"))
                           (rule "polySimp_addComm1" (formula "46") (term "0,0"))
                           (rule "ifthenelse_negated" (formula "77") (term "2,0"))
                           (rule "close" (formula "77") (ifseqformula "43"))
                        )
                     )
                     (branch "Case 2"
                         (builtin "SMTRule")
                     )
                  )
                  (branch "Case 2"
                     (rule "allRight" (formula "77") (inst "sk=element_0") (userinteraction))
                     (rule "allLeftHide" (formula "46") (inst "t=element_0") (userinteraction))
                     (rule "allLeftHide" (formula "11") (inst "t=element_0") (userinteraction))
                     (rule "polySimp_homoEq" (formula "46"))
                     (rule "polySimp_homoEq" (formula "4") (term "1,1,0"))
                     (rule "polySimp_homoEq" (formula "41") (term "1,1,0"))
                     (rule "polySimp_homoEq" (formula "11"))
                     (rule "polySimp_homoEq" (formula "77"))
                     (rule "polySimp_mulComm0" (formula "46") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1,0,1,1,0"))
                     (rule "polySimp_mulComm0" (formula "41") (term "1,0,1,1,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "77") (term "1,0"))
                     (rule "polySimp_addComm0" (formula "46") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "46") (term "1,1,0"))
                     (rule "polySimp_addComm0" (formula "11") (term "1,1,0"))
                     (rule "polySimp_addComm0" (formula "77") (term "1,1,0"))
                     (rule "polySimp_rightDist" (formula "4") (term "1,0,1,1,0"))
                     (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,1,1,0"))
                     (rule "polySimp_addComm1" (formula "4") (term "0,1,1,0"))
                     (rule "polySimp_rightDist" (formula "41") (term "1,0,1,1,0"))
                     (rule "polySimp_mulComm0" (formula "41") (term "0,1,0,1,1,0"))
                     (rule "polySimp_rightDist" (formula "46") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "46") (term "0,1,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "0,1,0"))
                     (rule "polySimp_rightDist" (formula "77") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "77") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,1,0"))
                     (rule "polySimp_addAssoc" (formula "41") (term "0,1,1,0"))
                     (rule "polySimp_addComm1" (formula "41") (term "0,0,1,1,0"))
                     (rule "polySimp_addComm0" (formula "41") (term "0,0,0,1,1,0"))
                     (rule "polySimp_addAssoc" (formula "46") (term "0"))
                     (rule "polySimp_addComm1" (formula "46") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "46") (term "0,0,0"))
                     (rule "polySimp_addAssoc" (formula "11") (term "0"))
                     (rule "polySimp_addAssoc" (formula "77") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "6"))
                     (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "6") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "44"))
                     (rule "polySimp_mulComm0" (formula "44") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "44") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "41") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "33"))
                     (rule "polySimp_mulComm0" (formula "33") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "33") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "37") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "42"))
                     (rule "polySimp_mulComm0" (formula "42") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "42") (term "0"))
                     (rule "ifthenelse_negated" (formula "77") (term "1,0,1,0"))
                     (rule "inEqSimp_homoInEq0" (formula "31"))
                     (rule "polySimp_mulComm0" (formula "31") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "31") (term "1,0"))
                     (rule "polySimp_mulAssoc" (formula "31") (term "0,1,0"))
                     (rule "polySimp_mulComm0" (formula "31") (term "0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "31") (term "0,1,0"))
                     (rule "polySimp_elimOne" (formula "31") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "31") (term "0"))
                     (rule "inEqSimp_homoInEq0" (formula "37") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "37") (term "1,0,1,1,0"))
                     (rule "polySimp_rightDist" (formula "37") (term "1,0,1,1,0"))
                     (rule "polySimp_mulComm0" (formula "37") (term "0,1,0,1,1,0"))
                     (rule "polySimp_addAssoc" (formula "37") (term "0,1,1,0"))
                     (rule "polySimp_sepPosMonomial" (formula "4") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1,1,1,0"))
                     (rule "polySimp_rightDist" (formula "4") (term "1,1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,1,0"))
                     (rule "polySimp_elimOne" (formula "4") (term "1,1,1,1,0"))
                     (rule "polySimp_rightDist" (formula "4") (term "0,1,1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,1,1,0"))
                     (rule "polySimp_elimOne" (formula "4") (term "1,0,1,1,1,0"))
                     (rule "polySimp_mulComm0" (formula "4") (term "0,0,1,1,1,0"))
                     (rule "polySimp_sepNegMonomial" (formula "41") (term "1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "41") (term "0,1,1,0"))
                     (rule "polySimp_elimOne" (formula "41") (term "0,1,1,0"))
                     (rule "polySimp_sepNegMonomial" (formula "46"))
                     (rule "polySimp_mulLiterals" (formula "46") (term "0"))
                     (rule "polySimp_elimOne" (formula "46") (term "0"))
                     (rule "applyEq" (formula "77") (term "0,1,0") (ifseqformula "46"))
                     (rule "polySimp_mulComm0" (formula "77") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "77") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "77") (term "0,1,0"))
                     (rule "polySimp_mulAssoc" (formula "77") (term "0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "77") (term "0,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "77") (term "0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "77") (term "0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "77") (term "0"))
                     (rule "polySimp_addAssoc" (formula "77") (term "0,0"))
                     (rule "polySimp_pullOutFactor2b" (formula "77") (term "0,0,0"))
                     (rule "add_literals" (formula "77") (term "1,1,0,0,0"))
                     (rule "times_zero_1" (formula "77") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "77") (term "0,0,0"))
                     (rule "close" (formula "77") (ifseqformula "11"))
                  )
               )
               (branch "Case 2"
                  (rule "allRight" (formula "77") (inst "sk=f_0"))
                  (rule "allRight" (formula "77") (inst "sk=o_0"))
                  (rule "orRight" (formula "77"))
                  (rule "orRight" (formula "77"))
                  (rule "orRight" (formula "77"))
                  (rule "orRight" (formula "77"))
                  (rule "orRight" (formula "79"))
                  (rule "orRight" (formula "79"))
                  (rule "eqSymm" (formula "83"))
                  (rule "eqSymm" (formula "77") (term "0,0,0,1"))
                  (rule "pullOutSelect" (formula "83") (term "0") (inst "selectSK=f_0_0"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "40"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "eqSymm" (formula "84"))
                  (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                  (rule "elementOfUnion" (formula "1") (term "0,0,0,0,0"))
                  (rule "elementOfArrayRange" (formula "1") (term "1,0,0,0,0,0") (inst "iv=iv"))
                  (rule "eqSymm" (formula "1") (term "0,0,0,1,1,0,0,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1,1,0,0,0,0,0"))
                  (rule "replace_known_right" (formula "1") (term "1,0,0,0,0,0") (ifseqformula "78"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfUnion" (formula "1") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "82")))
                  (rule "elementOfSingleton" (formula "1") (term "0,0,0,0,0"))
                  (rule "replace_known_right" (formula "1") (term "0,0,0,0,0,0") (ifseqformula "79"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
                  (rule "simplifySelectOfAnon" (formula "1"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "84")))
                  (rule "elementOfUnion" (formula "1") (term "0,0,0"))
                  (rule "elementOfArrayRange" (formula "1") (term "1,0,0,0") (inst "iv=iv"))
                  (rule "eqSymm" (formula "1") (term "0,0,0,1,1,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1,1,0,0,0"))
                  (rule "replace_known_right" (formula "1") (term "1,0,0,0") (ifseqformula "79"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfUnion" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "80")))
                  (rule "elementOfUnion" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "82")))
                  (rule "elementOfUnion" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "83")) (ifInst ""  (formula "81")))
                  (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "commute_and" (formula "1") (term "0,0,0"))
                  (rule "ifthenelse_split" (formula "1") (term "0,1,0,0,0"))
                  (branch "first_is_current_swap_0 = TRUE TRUE"
                     (rule "eqSymm" (formula "2") (term "1,0,0,0"))
                     (rule "replace_known_right" (formula "2") (term "1,0,0,0") (ifseqformula "82"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "ifthenelse_split" (formula "2") (term "0"))
                     (branch " !o_0 = null & !( o_0.<created> = TRUE | o_0.<created>@anon_heap_LOOP_0<<anonHeapFunction>> = TRUE) TRUE"
                        (rule "andLeft" (formula "2"))
                        (rule "notLeft" (formula "3"))
                        (rule "notLeft" (formula "2"))
                        (rule "orRight" (formula "52"))
                        (rule "applyEqReverse" (formula "88") (term "1") (ifseqformula "2"))
                        (rule "hideAuxiliaryEq" (formula "2"))
                        (rule "eqSymm" (formula "87"))
                        (rule "replace_known_right" (formula "86") (term "0,1") (ifseqformula "51"))
                         (builtin "One Step Simplification" (formula "86") (ifInst ""  (formula "50")))
                        (rule "closeTrue" (formula "86"))
                     )
                     (branch " !o_0 = null & !( o_0.<created> = TRUE | o_0.<created>@anon_heap_LOOP_0<<anonHeapFunction>> = TRUE) FALSE"
                        (rule "close" (formula "86") (ifseqformula "2"))
                     )
                  )
                  (branch "first_is_current_swap_0 = TRUE FALSE"
                     (rule "eqSymm" (formula "1") (term "1,0,0,0"))
                     (rule "replace_known_right" (formula "1") (term "1,0,0,0") (ifseqformula "81"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "ifthenelse_split" (formula "1") (term "0"))
                     (branch " !o_0 = null & !( o_0.<created> = TRUE | o_0.<created>@anon_heap_LOOP_0<<anonHeapFunction>> = TRUE) TRUE"
                        (rule "andLeft" (formula "1"))
                        (rule "notLeft" (formula "2"))
                        (rule "notLeft" (formula "1"))
                        (rule "orRight" (formula "51"))
                        (rule "applyEqReverse" (formula "88") (term "1") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "eqSymm" (formula "87"))
                        (rule "replace_known_right" (formula "86") (term "0,0") (ifseqformula "49"))
                         (builtin "One Step Simplification" (formula "86") (ifInst ""  (formula "50")))
                        (rule "closeTrue" (formula "86"))
                     )
                     (branch " !o_0 = null & !( o_0.<created> = TRUE | o_0.<created>@anon_heap_LOOP_0<<anonHeapFunction>> = TRUE) FALSE"
                        (rule "close" (formula "86") (ifseqformula "1"))
                     )
                  )
               )
            )
            (branch "Case 2"
               (rule "precOfInt" (formula "77") (userinteraction))
               (rule "andRight" (formula "77") (userinteraction))
               (branch "Case 1"
                  (rule "leq_to_geq" (formula "77") (userinteraction))
                  (rule "bsum_positive" (formula "77") (userinteraction))
                  (rule "allRight" (formula "77") (inst "sk=b_0") (userinteraction))
                  (rule "Definition_axiom_for_remainingWriteCountOfBucket_in_de_wiesler_BucketPointers" (formula "77") (term "0,1") (userinteraction))
                  (rule "Contract_axiom_for_nextWriteOf_in_BucketPointers" (formula "77") (term "1,0,1") (userinteraction))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0") (ifseqformula "40"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "48")) (ifInst ""  (formula "75")) (ifInst ""  (formula "48")) (ifInst ""  (formula "17")))
                  (rule "wellFormedAnonEQ" (formula "1") (term "1,0") (ifseqformula "40"))
                  (rule "wellFormedAnon" (formula "1") (term "0,1,0"))
                  (rule "translateJavaSubInt" (formula "78") (term "0,1"))
                  (rule "translateJavaAddInt" (formula "1") (term "1,0,1,0,1"))
                  (rule "translateJavaAddInt" (formula "1") (term "1,1,1,0,0,1"))
                  (rule "translateJavaAddInt" (formula "78") (term "1,0,0,1"))
                  (rule "impRight" (formula "78"))
                  (rule "andLeft" (formula "1"))
                  (rule "replace_known_left" (formula "3") (term "1,0,1,0") (ifseqformula "15"))
                   (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "16")) (ifInst ""  (formula "41")))
                  (rule "polySimp_homoEq" (formula "49") (term "0"))
                  (rule "polySimp_homoEq" (formula "44") (term "1,1,0"))
                  (rule "polySimp_homoEq" (formula "7") (term "1,1,0"))
                  (rule "polySimp_homoEq" (formula "14") (term "0"))
                  (rule "polySimp_elimSub" (formula "80") (term "0"))
                  (rule "polySimp_mulComm0" (formula "49") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "44") (term "1,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
                  (rule "polySimp_addComm0" (formula "3") (term "1,0,1,0,1"))
                  (rule "polySimp_addComm0" (formula "3") (term "1,1,1,0,0,1"))
                  (rule "polySimp_addComm0" (formula "80") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "49") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "49") (term "0,1,0,0"))
                  (rule "polySimp_addComm1" (formula "49") (term "0,0"))
                  (rule "polySimp_rightDist" (formula "44") (term "1,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "44") (term "0,1,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "0,1,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "14") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "14") (term "0,1,0,0"))
                  (rule "polySimp_addComm1" (formula "7") (term "0,1,1,0"))
                  (rule "inEqSimp_geqRight" (formula "81"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "50") (term "0,0,0"))
                  (rule "polySimp_addComm0" (formula "50") (term "0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "45") (term "0,1,1,0"))
                  (rule "polySimp_addComm1" (formula "45") (term "0,0,1,1,0"))
                  (rule "polySimp_addComm0" (formula "45") (term "0,0,0,1,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "10"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "10") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "48"))
                  (rule "polySimp_mulComm0" (formula "48") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "48") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "41") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "37"))
                  (rule "polySimp_mulComm0" (formula "37") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "37") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "45") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "45") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "46"))
                  (rule "polySimp_mulComm0" (formula "46") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "46") (term "0"))
                  (rule "polySimp_addAssoc" (formula "15") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "15") (term "0,0,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "3"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "3") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0"))
                  (rule "polySimp_addComm1" (formula "4") (term "0,1,0"))
                  (rule "inEqSimp_geqRight" (formula "81"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0"))
                  (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "3"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "inEqSimp_homoInEq0" (formula "36"))
                  (rule "polySimp_mulComm0" (formula "36") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "36") (term "1,0"))
                  (rule "polySimp_mulAssoc" (formula "36") (term "0,1,0"))
                  (rule "polySimp_mulComm0" (formula "36") (term "0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "36") (term "0,1,0"))
                  (rule "polySimp_elimOne" (formula "36") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "36") (term "0"))
                  (rule "inEqSimp_homoInEq0" (formula "42") (term "1,1,0"))
                  (rule "polySimp_mulComm0" (formula "42") (term "1,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "42") (term "1,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "42") (term "0,1,0,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "42") (term "0,1,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "5") (term "1,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "5") (term "1,0,0,0,1"))
                  (rule "applyEq" (formula "4") (term "0,1,0") (ifseqformula "28"))
                  (rule "replace_known_left" (formula "5") (term "0") (ifseqformula "4"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "andLeft" (formula "5"))
                  (rule "andLeft" (formula "5"))
                  (rule "andLeft" (formula "5"))
                  (rule "andLeft" (formula "5"))
                  (rule "applyEq" (formula "2") (term "1,1,0") (ifseqformula "32"))
                  (rule "polySimp_sepPosMonomial" (formula "55") (term "0"))
                  (rule "polySimp_mulComm0" (formula "55") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "55") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "55") (term "1,1,0"))
                  (rule "polySimp_elimOne" (formula "55") (term "1,1,0"))
                  (rule "polySimp_rightDist" (formula "55") (term "0,1,0"))
                  (rule "polySimp_mulAssoc" (formula "55") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "55") (term "0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "55") (term "0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "55") (term "0,0,1,0"))
                  (rule "polySimp_sepNegMonomial" (formula "50") (term "1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "50") (term "0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "50") (term "0,1,1,0"))
                  (rule "polySimp_sepNegMonomial" (formula "20") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "0,0"))
                  (rule "polySimp_elimOne" (formula "20") (term "0,0"))
                  (rule "polySimp_sepPosMonomial" (formula "13") (term "1,1,0"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,1,1,0"))
                  (rule "polySimp_rightDist" (formula "13") (term "1,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,1,0"))
                  (rule "polySimp_elimOne" (formula "13") (term "1,1,1,1,0"))
                  (rule "polySimp_rightDist" (formula "13") (term "0,1,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,1,1,0"))
                  (rule "polySimp_elimOne" (formula "13") (term "1,0,1,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "13") (term "0,0,1,1,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "13") (term "0,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "15"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                  (rule "polySimp_elimOne" (formula "15") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "53"))
                  (rule "polySimp_mulLiterals" (formula "53") (term "0"))
                  (rule "polySimp_elimOne" (formula "53") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "46") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "46") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "46") (term "1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "46") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "46") (term "0,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "46") (term "1,1,0,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "42"))
                  (rule "polySimp_mulLiterals" (formula "42") (term "0"))
                  (rule "polySimp_elimOne" (formula "42") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "17") (term "0,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "50") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "50") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "50") (term "1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "50") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "50") (term "0,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "50") (term "1,1,0,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "51"))
                  (rule "polySimp_mulLiterals" (formula "51") (term "0"))
                  (rule "polySimp_elimOne" (formula "51") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "40"))
                  (rule "polySimp_mulLiterals" (formula "40") (term "0"))
                  (rule "polySimp_elimOne" (formula "40") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "46") (term "1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "46") (term "0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "46") (term "0,1,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                  (rule "polySimp_elimOne" (formula "4") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                  (rule "mul_literals" (formula "2") (term "1"))
                  (rule "inEqSimp_contradEq7" (formula "58") (ifseqformula "54"))
                  (rule "mul_literals" (formula "58") (term "1,0,0"))
                  (rule "add_zero_left" (formula "58") (term "0,0"))
                  (rule "leq_literals" (formula "58") (term "0"))
                   (builtin "One Step Simplification" (formula "58"))
                  (rule "false_right" (formula "58"))
                  (rule "inEqSimp_contradInEq1" (formula "7") (ifseqformula "1"))
                  (rule "andLeft" (formula "7"))
                  (rule "inEqSimp_homoInEq1" (formula "7"))
                  (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
                  (rule "add_literals" (formula "7") (term "1,1,0"))
                  (rule "times_zero_1" (formula "7") (term "1,0"))
                  (rule "add_zero_right" (formula "7") (term "0"))
                  (rule "leq_literals" (formula "7"))
                  (rule "closeFalse" (formula "7"))
               )
               (branch "Case 2"
                  (rule "applyEq" (formula "77") (term "1,0") (ifseqformula "23") (userinteraction))
                  (rule "bsum_less_same_index" (formula "77") (userinteraction))
                  (rule "andRight" (formula "77") (userinteraction))
                  (branch "Case 1"
                     (rule "allRight" (formula "77") (inst "sk=b0_0") (userinteraction))
                     (rule "eqTermCut" (formula "77") (term "0,0,0") (inst "s=_target_bucket_0") (userinteraction))
                     (branch "Assume b0_0 = _target_bucket_0"
                        (rule "impRight" (formula "78"))
                        (rule "andLeft" (formula "1"))
                        (rule "polySimp_homoEq" (formula "14") (term "0"))
                        (rule "polySimp_homoEq" (formula "7") (term "1,1,0"))
                        (rule "polySimp_homoEq" (formula "44") (term "1,1,0"))
                        (rule "polySimp_homoEq" (formula "49") (term "0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "44") (term "1,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "49") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "0,1,0,1,1,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,1,1,0"))
                        (rule "polySimp_rightDist" (formula "44") (term "1,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "44") (term "0,1,0,1,1,0"))
                        (rule "polySimp_rightDist" (formula "49") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "49") (term "0,1,0,0"))
                        (rule "polySimp_addComm1" (formula "49") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "14") (term "0,0,0"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,1,0"))
                        (rule "polySimp_addAssoc" (formula "44") (term "0,1,1,0"))
                        (rule "polySimp_addComm1" (formula "44") (term "0,0,1,1,0"))
                        (rule "polySimp_addComm0" (formula "44") (term "0,0,0,1,1,0"))
                        (rule "polySimp_addAssoc" (formula "49") (term "0,0,0"))
                        (rule "polySimp_addComm0" (formula "49") (term "0,0,0,0"))
                        (rule "inEqSimp_ltRight" (formula "81"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "81"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "46") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "46") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "49"))
                        (rule "polySimp_mulComm0" (formula "49") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "49") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "42") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "38"))
                        (rule "polySimp_mulComm0" (formula "38") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "38") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "11"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "11") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "47"))
                        (rule "polySimp_mulComm0" (formula "47") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "47") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "4"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0"))
                        (rule "inEqSimp_homoInEq0" (formula "42") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "42") (term "1,0,1,1,0"))
                        (rule "polySimp_rightDist" (formula "42") (term "1,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "42") (term "0,1,0,1,1,0"))
                        (rule "polySimp_addAssoc" (formula "42") (term "0,1,1,0"))
                        (rule "inEqSimp_homoInEq0" (formula "36"))
                        (rule "polySimp_mulComm0" (formula "36") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "36") (term "1,0"))
                        (rule "polySimp_mulAssoc" (formula "36") (term "0,1,0"))
                        (rule "polySimp_mulComm0" (formula "36") (term "0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "36") (term "0,1,0"))
                        (rule "polySimp_elimOne" (formula "36") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "36") (term "0"))
                        (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "5"))
                        (rule "applyEqRigid" (formula "1") (term "2,0,1,0") (ifseqformula "4"))
                        (rule "applyEq" (formula "1") (term "2,1,0,0") (ifseqformula "4"))
                        (rule "applyEqRigid" (formula "3") (term "1,0,0") (ifseqformula "4"))
                        (rule "polySimp_sepNegMonomial" (formula "14") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "0,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "0,0"))
                        (rule "polySimp_sepPosMonomial" (formula "7") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,1,1,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,1,0"))
                        (rule "polySimp_elimOne" (formula "7") (term "1,1,1,1,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,1,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1,1,1,0"))
                        (rule "polySimp_elimOne" (formula "7") (term "1,0,1,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "0,0,1,1,1,0"))
                        (rule "polySimp_sepNegMonomial" (formula "44") (term "1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "44") (term "0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "44") (term "0,1,1,0"))
                        (rule "polySimp_sepPosMonomial" (formula "49") (term "0"))
                        (rule "polySimp_mulComm0" (formula "49") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "49") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "49") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "49") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "49") (term "0,1,0"))
                        (rule "polySimp_mulAssoc" (formula "49") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "49") (term "0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "49") (term "0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "49") (term "0,0,1,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "44") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "44") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "44") (term "0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "44") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "47"))
                        (rule "polySimp_mulLiterals" (formula "47") (term "0"))
                        (rule "polySimp_elimOne" (formula "47") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "7") (term "0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "40") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "40") (term "0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "40") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "36"))
                        (rule "polySimp_mulLiterals" (formula "36") (term "0"))
                        (rule "polySimp_elimOne" (formula "36") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "9"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                        (rule "polySimp_elimOne" (formula "9") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "45"))
                        (rule "polySimp_mulLiterals" (formula "45") (term "0"))
                        (rule "polySimp_elimOne" (formula "45") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "40") (term "1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "40") (term "0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "40") (term "0,1,1,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "34"))
                        (rule "polySimp_mulLiterals" (formula "34") (term "0"))
                        (rule "polySimp_elimOne" (formula "34") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "inEqSimp_contradEq7" (formula "52") (ifseqformula "48"))
                        (rule "add_zero_left" (formula "52") (term "0,0"))
                        (rule "mul_literals" (formula "52") (term "0,0"))
                        (rule "leq_literals" (formula "52") (term "0"))
                         (builtin "One Step Simplification" (formula "52"))
                        (rule "false_right" (formula "52"))
                        (rule "inEqSimp_contradInEq0" (formula "45") (ifseqformula "1"))
                        (rule "andLeft" (formula "45"))
                        (rule "inEqSimp_homoInEq1" (formula "45"))
                        (rule "polySimp_mulComm0" (formula "45") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "45") (term "1,0"))
                        (rule "mul_literals" (formula "45") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "45") (term "0"))
                        (rule "polySimp_addComm1" (formula "45") (term "0,0"))
                        (rule "add_literals" (formula "45") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "45") (term "0"))
                        (rule "add_literals" (formula "45") (term "1,1,0"))
                        (rule "times_zero_1" (formula "45") (term "1,0"))
                        (rule "add_zero_right" (formula "45") (term "0"))
                        (rule "leq_literals" (formula "45"))
                        (rule "closeFalse" (formula "45"))
                     )
                     (branch "Assume b0_0 != _target_bucket_0"
                         (builtin "Use Dependency Contract" (formula "78") (term "0,1") (ifInst ""  (formula "79") (term "2,1")) (ifInst ""  (formula "40")) (contract "de.wiesler.BucketPointers[de.wiesler.BucketPointers::remainingWriteCountOfBucket(int)].JML accessible clause.0") (userinteraction))
                         (builtin "One Step Simplification" (formula "50") (ifInst ""  (formula "76")) (ifInst ""  (formula "10")) (ifInst ""  (formula "17")))
                        (rule "wellFormedAnon" (formula "50") (term "0,0,0,0"))
                        (rule "wellFormedAnonEQ" (formula "50") (term "1,0,0,0") (ifseqformula "40"))
                        (rule "wellFormedAnon" (formula "50") (term "0,1,0,0,0"))
                        (rule "translateJavaAddInt" (formula "50") (term "0,1,1,1,0"))
                        (rule "translateJavaMulInt" (formula "50") (term "0,0,1,1,1,0"))
                        (rule "notLeft" (formula "1"))
                        (rule "impRight" (formula "79"))
                        (rule "andLeft" (formula "1"))
                        (rule "eqSymm" (formula "51") (term "1"))
                        (rule "replace_known_left" (formula "51") (term "0,0,0,0,0") (ifseqformula "15"))
                         (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "14")) (ifInst ""  (formula "15")) (ifInst ""  (formula "14")) (ifInst ""  (formula "40")) (ifInst ""  (formula "2")))
                        (rule "polySimp_homoEq" (formula "6") (term "1,1,0"))
                        (rule "polySimp_homoEq" (formula "13") (term "0"))
                        (rule "polySimp_homoEq" (formula "43") (term "1,1,0"))
                        (rule "polySimp_homoEq" (formula "48") (term "0"))
                        (rule "polySimp_mulComm0" (formula "51") (term "0,0,1,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "43") (term "1,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "48") (term "1,0,0"))
                        (rule "polySimp_addComm0" (formula "51") (term "0,1,1,1,0"))
                        (rule "polySimp_rightDist" (formula "6") (term "1,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "6") (term "0,1,0,1,1,0"))
                        (rule "polySimp_addComm1" (formula "6") (term "0,1,1,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "43") (term "1,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "43") (term "0,1,0,1,1,0"))
                        (rule "polySimp_rightDist" (formula "48") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "48") (term "0,1,0,0"))
                        (rule "polySimp_addComm1" (formula "48") (term "0,0"))
                        (rule "inEqSimp_ltRight" (formula "82"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,1,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "14") (term "0,0,0"))
                        (rule "inEqSimp_leqRight" (formula "82"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "polySimp_addAssoc" (formula "45") (term "0,1,1,0"))
                        (rule "polySimp_addComm1" (formula "45") (term "0,0,1,1,0"))
                        (rule "polySimp_addComm0" (formula "45") (term "0,0,0,1,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "48"))
                        (rule "polySimp_mulComm0" (formula "48") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "48") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "41") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "37"))
                        (rule "polySimp_mulComm0" (formula "37") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "37") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "45") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "45") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "10"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "10") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "46"))
                        (rule "polySimp_mulComm0" (formula "46") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "46") (term "0"))
                        (rule "disjointDefinition" (formula "53") (term "1,0"))
                        (rule "polySimp_addAssoc" (formula "50") (term "0,0,0"))
                        (rule "polySimp_addComm0" (formula "50") (term "0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "4"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0"))
                        (rule "disjointWithSingleton1" (formula "53") (term "1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "53") (term "0,0"))
                        (rule "replace_known_left" (formula "53") (term "0,0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "53"))
                        (rule "inEqSimp_homoInEq0" (formula "41") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "41") (term "1,0,1,1,0"))
                        (rule "polySimp_rightDist" (formula "41") (term "1,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "41") (term "0,1,0,1,1,0"))
                        (rule "polySimp_addAssoc" (formula "41") (term "0,1,1,0"))
                        (rule "inEqSimp_homoInEq0" (formula "35"))
                        (rule "polySimp_mulComm0" (formula "35") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "35") (term "1,0"))
                        (rule "polySimp_mulAssoc" (formula "35") (term "0,1,0"))
                        (rule "polySimp_mulComm0" (formula "35") (term "0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "35") (term "0,1,0"))
                        (rule "polySimp_elimOne" (formula "35") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "35") (term "0"))
                        (rule "polySimp_sepPosMonomial" (formula "8") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1,1,1,0"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,1,0"))
                        (rule "polySimp_elimOne" (formula "8") (term "1,1,1,1,0"))
                        (rule "polySimp_rightDist" (formula "8") (term "0,1,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,1,1,0"))
                        (rule "polySimp_elimOne" (formula "8") (term "1,0,1,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "8") (term "0,0,1,1,1,0"))
                        (rule "polySimp_sepNegMonomial" (formula "15") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "0,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "0,0"))
                        (rule "polySimp_sepNegMonomial" (formula "45") (term "1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "45") (term "0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "45") (term "0,1,1,0"))
                        (rule "polySimp_sepPosMonomial" (formula "50") (term "0"))
                        (rule "polySimp_mulComm0" (formula "50") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "50") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "50") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "50") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "50") (term "0,1,0"))
                        (rule "polySimp_mulAssoc" (formula "50") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "50") (term "0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "50") (term "0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "50") (term "0,0,1,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "48"))
                        (rule "polySimp_mulLiterals" (formula "48") (term "0"))
                        (rule "polySimp_elimOne" (formula "48") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "41") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "41") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "41") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "37"))
                        (rule "polySimp_mulLiterals" (formula "37") (term "0"))
                        (rule "polySimp_elimOne" (formula "37") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "45") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "45") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "45") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "45") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "45") (term "1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "45") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "10"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                        (rule "polySimp_elimOne" (formula "10") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "46"))
                        (rule "polySimp_mulLiterals" (formula "46") (term "0"))
                        (rule "polySimp_elimOne" (formula "46") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                        (rule "polySimp_elimOne" (formula "4") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "41") (term "1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "41") (term "0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "41") (term "0,1,1,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "35"))
                        (rule "polySimp_mulLiterals" (formula "35") (term "0"))
                        (rule "polySimp_elimOne" (formula "35") (term "0"))
                        (rule "inEqSimp_contradEq7" (formula "55") (ifseqformula "49"))
                        (rule "add_zero_left" (formula "55") (term "0,0"))
                        (rule "mul_literals" (formula "55") (term "0,0"))
                        (rule "leq_literals" (formula "55") (term "0"))
                         (builtin "One Step Simplification" (formula "55"))
                        (rule "false_right" (formula "55"))
                        (rule "inEqSimp_contradEq3" (formula "53") (term "1") (ifseqformula "1"))
                        (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "53") (term "0,0,1"))
                        (rule "add_literals" (formula "53") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "53") (term "1,0,0,1"))
                        (rule "add_literals" (formula "53") (term "0,0,1"))
                        (rule "qeq_literals" (formula "53") (term "0,1"))
                         (builtin "One Step Simplification" (formula "53"))
                        (rule "elementOfUnion" (formula "53"))
                         (builtin "One Step Simplification" (formula "53"))
                        (rule "eqSymm" (formula "53") (term "1"))
                        (rule "elementOfUnion" (formula "53") (term "0"))
                        (rule "elementOfArrayRangeConcrete" (formula "53") (term "1,0"))
                        (rule "replace_known_right" (formula "53") (term "0,0,1,0") (ifseqformula "58"))
                         (builtin "One Step Simplification" (formula "53"))
                        (rule "elementOfUnion" (formula "53") (term "0"))
                         (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "70")))
                        (rule "elementOfSingleton" (formula "53") (term "0"))
                         (builtin "One Step Simplification" (formula "53"))
                        (rule "polySimp_homoEq" (formula "53") (term "0"))
                        (rule "polySimp_mulComm0" (formula "53") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "53") (term "1,0,0"))
                        (rule "mul_literals" (formula "53") (term "0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "53") (term "1,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "53") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "53") (term "0,0,0"))
                        (rule "add_literals" (formula "53") (term "0,0,0,0"))
                        (rule "add_zero_left" (formula "53") (term "0,0,0"))
                        (rule "polySimp_sepNegMonomial" (formula "53") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "53") (term "0,0"))
                        (rule "elimGcdEq" (formula "53") (term "0") (inst "elimGcdRightDiv=_target_bucket_0") (inst "elimGcdLeftDiv=b0_0") (inst "elimGcd=Z(2(#))"))
                         (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "54")))
                        (rule "mul_literals" (formula "53") (term "0,1,0,1,0,0"))
                        (rule "mul_literals" (formula "53") (term "0,1,0,0,0,0"))
                        (rule "add_literals" (formula "53") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "53") (term "1,0,1,0,0"))
                        (rule "polySimp_pullOutFactor0" (formula "53") (term "0,1,0,0"))
                        (rule "add_literals" (formula "53") (term "1,0,1,0,0"))
                        (rule "times_zero_1" (formula "53") (term "0,1,0,0"))
                        (rule "qeq_literals" (formula "53") (term "1,0,0"))
                         (builtin "One Step Simplification" (formula "53"))
                        (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,0"))
                        (rule "polySimp_pullOutFactor0" (formula "53") (term "0,0,0"))
                        (rule "add_literals" (formula "53") (term "1,0,0,0"))
                        (rule "times_zero_1" (formula "53") (term "0,0,0"))
                        (rule "leq_literals" (formula "53") (term "0,0"))
                         (builtin "One Step Simplification" (formula "53"))
                        (rule "applyEq" (formula "43") (term "0,1,1,0") (ifseqformula "53"))
                        (rule "applyEq" (formula "50") (term "1,0,0,1,0") (ifseqformula "53"))
                        (rule "applyEq" (formula "47") (term "2,0") (ifseqformula "53"))
                        (rule "commuteUnion_2" (formula "43") (term "1,0"))
                        (rule "commuteUnion_2" (formula "43") (term "0,1,0"))
                        (rule "nnf_imp2or" (formula "8") (term "0"))
                        (rule "nnf_imp2or" (formula "12") (term "0"))
                        (rule "nnf_imp2or" (formula "45") (term "0"))
                        (rule "nnf_imp2or" (formula "41") (term "0"))
                        (rule "nnf_notAnd" (formula "8") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "8") (term "1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "8") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                        (rule "mul_literals" (formula "8") (term "1,1,0,0"))
                        (rule "inEqSimp_notLeq" (formula "8") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "8") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "8") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "12") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0"))
                        (rule "times_zero_1" (formula "12") (term "1,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "12") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                        (rule "mul_literals" (formula "12") (term "1,1,0,0"))
                        (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "12") (term "0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "12") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "45") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "45") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "45") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "45") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "45") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "45") (term "0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "45") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "45") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "45") (term "1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "45") (term "1,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "45") (term "1,0,0"))
                        (rule "mul_literals" (formula "45") (term "1,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "45") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "45") (term "1,0,0"))
                        (rule "mul_literals" (formula "45") (term "1,1,0,0"))
                        (rule "nnf_notAnd" (formula "41") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "41") (term "1,0,0"))
                        (rule "times_zero_1" (formula "41") (term "1,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "41") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,0,0"))
                        (rule "mul_literals" (formula "41") (term "1,1,0,0"))
                        (rule "inEqSimp_notLeq" (formula "41") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "41") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "41") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "41") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "41") (term "0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "41") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "41") (term "1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "41") (term "1,0,0,0"))
                        (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "52"))
                         (builtin "One Step Simplification" (formula "52"))
                        (rule "translateJavaSubInt" (formula "52") (term "0,2,1,1,0"))
                        (rule "translateJavaMulInt" (formula "52") (term "1,1,1,0,0,0,0"))
                        (rule "translateJavaSubInt" (formula "52") (term "0,2,0,1,0"))
                        (rule "andLeft" (formula "52"))
                        (rule "andLeft" (formula "52"))
                        (rule "andLeft" (formula "52"))
                        (rule "andLeft" (formula "52"))
                        (rule "andLeft" (formula "52"))
                        (rule "andLeft" (formula "52"))
                        (rule "andLeft" (formula "52"))
                        (rule "andLeft" (formula "54"))
                        (rule "notLeft" (formula "53"))
                        (rule "notLeft" (formula "52"))
                        (rule "eqSymm" (formula "57"))
                        (rule "eqSymm" (formula "54"))
                        (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "61"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "60"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "polySimp_elimSub" (formula "57") (term "0,2,1"))
                        (rule "mul_literals" (formula "57") (term "1,0,2,1"))
                        (rule "polySimp_elimSub" (formula "57") (term "0,2,0"))
                        (rule "mul_literals" (formula "57") (term "1,0,2,0"))
                        (rule "polySimp_mulComm0" (formula "54") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "57") (term "0,2,1"))
                        (rule "polySimp_addComm0" (formula "57") (term "0,2,0"))
                        (rule "inEqSimp_commuteLeq" (formula "52"))
                        (rule "applyEq" (formula "53") (term "0") (ifseqformula "27"))
                        (rule "applyEq" (formula "52") (term "0") (ifseqformula "27"))
                        (rule "applyEq" (formula "54") (term "1") (ifseqformula "27"))
                        (rule "pullOutSelect" (formula "57") (term "1") (inst "selectSK=arr_0"))
                        (rule "simplifySelectOfAnonEQ" (formula "57") (ifseqformula "43"))
                         (builtin "One Step Simplification" (formula "57") (ifInst ""  (formula "62")) (ifInst ""  (formula "5")))
                        (rule "simplifySelectOfAnonEQ" (formula "58") (ifseqformula "43"))
                         (builtin "One Step Simplification" (formula "58") (ifInst ""  (formula "62")) (ifInst ""  (formula "5")))
                        (rule "elementOfUnion" (formula "57") (term "0,0"))
                        (rule "elementOfArrayRangeConcrete" (formula "57") (term "1,0,0"))
                        (rule "replace_known_right" (formula "57") (term "0,0,1,0,0") (ifseqformula "68"))
                         (builtin "One Step Simplification" (formula "57"))
                        (rule "elementOfUnion" (formula "58") (term "0,0"))
                        (rule "elementOfArrayRangeConcrete" (formula "58") (term "1,0,0"))
                        (rule "replace_known_right" (formula "58") (term "0,0,1,0,0") (ifseqformula "68"))
                         (builtin "One Step Simplification" (formula "58"))
                        (rule "elementOfUnion" (formula "57") (term "0,0"))
                        (rule "elementOfSingleton" (formula "57") (term "1,0,0"))
                         (builtin "One Step Simplification" (formula "57") (ifInst ""  (formula "82")))
                        (rule "elementOfUnion" (formula "58") (term "0,0"))
                        (rule "elementOfSingleton" (formula "58") (term "1,0,0"))
                         (builtin "One Step Simplification" (formula "58") (ifInst ""  (formula "82")))
                        (rule "elementOfUnion" (formula "57") (term "0,0"))
                         (builtin "One Step Simplification" (formula "57") (ifInst ""  (formula "80")) (ifInst ""  (formula "82")))
                        (rule "simplifySelectOfAnon" (formula "57"))
                         (builtin "One Step Simplification" (formula "57") (ifInst ""  (formula "62")) (ifInst ""  (formula "5")))
                        (rule "elementOfUnion" (formula "58") (term "0,0"))
                         (builtin "One Step Simplification" (formula "58") (ifInst ""  (formula "80")) (ifInst ""  (formula "82")))
                        (rule "simplifySelectOfAnon" (formula "58"))
                         (builtin "One Step Simplification" (formula "58") (ifInst ""  (formula "62")) (ifInst ""  (formula "5")))
                        (rule "elementOfUnion" (formula "57") (term "0,0"))
                        (rule "elementOfArrayRangeConcrete" (formula "57") (term "1,0,0"))
                        (rule "replace_known_right" (formula "57") (term "0,0,1,0,0") (ifseqformula "68"))
                         (builtin "One Step Simplification" (formula "57"))
                        (rule "elementOfUnion" (formula "58") (term "0,0"))
                        (rule "elementOfArrayRangeConcrete" (formula "58") (term "1,0,0"))
                        (rule "replace_known_right" (formula "58") (term "0,0,1,0,0") (ifseqformula "68"))
                         (builtin "One Step Simplification" (formula "58"))
                        (rule "elementOfUnion" (formula "57") (term "0,0"))
                         (builtin "One Step Simplification" (formula "57") (ifInst ""  (formula "82")))
                        (rule "elementOfUnion" (formula "58") (term "0,0"))
                         (builtin "One Step Simplification" (formula "58") (ifInst ""  (formula "82")))
                        (rule "elementOfUnion" (formula "57") (term "0,0"))
                         (builtin "One Step Simplification" (formula "57") (ifInst ""  (formula "77")))
                        (rule "elementOfUnion" (formula "58") (term "0,0"))
                         (builtin "One Step Simplification" (formula "58") (ifInst ""  (formula "77")))
                        (rule "elementOfUnion" (formula "57") (term "0,0"))
                         (builtin "One Step Simplification" (formula "57") (ifInst ""  (formula "80")) (ifInst ""  (formula "73")))
                        (rule "applyEqReverse" (formula "58") (term "1") (ifseqformula "57"))
                        (rule "hideAuxiliaryEq" (formula "57"))
                        (rule "elementOfUnion" (formula "57") (term "0,0"))
                         (builtin "One Step Simplification" (formula "57") (ifInst ""  (formula "79")) (ifInst ""  (formula "72")))
                        (rule "inEqSimp_exactShadow3" (formula "37") (ifseqformula "53"))
                        (rule "polySimp_rightDist" (formula "37") (term "0,0"))
                        (rule "mul_literals" (formula "37") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "37") (term "0"))
                        (rule "add_literals" (formula "37") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "37"))
                        (rule "polySimp_mulLiterals" (formula "37") (term "0"))
                        (rule "polySimp_elimOne" (formula "37") (term "0"))
                        (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "54"))
                        (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                        (rule "mul_literals" (formula "10") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "10") (term "0"))
                        (rule "add_literals" (formula "10") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                        (rule "polySimp_elimOne" (formula "10") (term "0"))
                        (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "55"))
                        (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                        (rule "mul_literals" (formula "4") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0"))
                        (rule "add_literals" (formula "4") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                        (rule "polySimp_elimOne" (formula "4") (term "0"))
                        (rule "inEqSimp_exactShadow3" (formula "51") (ifseqformula "56"))
                        (rule "polySimp_rightDist" (formula "51") (term "0,0"))
                        (rule "mul_literals" (formula "51") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "51") (term "0"))
                        (rule "add_literals" (formula "51") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "51"))
                        (rule "polySimp_mulLiterals" (formula "51") (term "0"))
                        (rule "polySimp_elimOne" (formula "51") (term "0"))
                        (rule "Definition_axiom_for_isClassOfSlice_in_de_wiesler_Classifier" (formula "43") (term "0") (inst "i=i"))
                         (builtin "One Step Simplification" (formula "43"))
                        (rule "inEqSimp_ltToLeq" (formula "43") (term "1,0,0"))
                        (rule "mul_literals" (formula "43") (term "1,0,0,1,0,0"))
                        (rule "add_literals" (formula "43") (term "0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "43") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "1,0,0"))
                        (rule "mul_literals" (formula "43") (term "1,1,0,0"))
                        (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "27") (inst "b=b"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "translateJavaMulInt" (formula "27") (term "1,0,1,0,0,0,0"))
                        (rule "translateJavaMulInt" (formula "27") (term "0,1,1,0,0,0,0"))
                        (rule "translateJavaCastInt" (formula "27") (term "0,0,1,0"))
                        (rule "translateJavaAddInt" (formula "27") (term "1,1,0,0"))
                        (rule "translateJavaCastInt" (formula "27") (term "0,1,0,1,0,0,0"))
                        (rule "translateJavaCastInt" (formula "27") (term "1,1,0,0,1,0,0,0"))
                        (rule "andLeft" (formula "27"))
                        (rule "andLeft" (formula "27"))
                        (rule "andLeft" (formula "28"))
                        (rule "andLeft" (formula "27"))
                        (rule "andLeft" (formula "27"))
                        (rule "andLeft" (formula "27"))
                        (rule "andLeft" (formula "29"))
                        (rule "andLeft" (formula "28"))
                        (rule "notLeft" (formula "27"))
                        (rule "andLeft" (formula "29"))
                        (rule "andLeft" (formula "29"))
                        (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "73"))
                         (builtin "One Step Simplification" (formula "8"))
                        (rule "polySimp_mulComm0" (formula "28") (term "0"))
                        (rule "polySimp_mulComm0" (formula "27") (term "1"))
                        (rule "polySimp_addComm0" (formula "33") (term "1"))
                        (rule "castedGetAny" (formula "34") (term "0"))
                        (rule "castedGetAny" (formula "31") (term "0"))
                        (rule "castedGetAny" (formula "30") (term "1"))
                        (rule "inEqSimp_ltToLeq" (formula "36") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "29"))
                        (rule "inEqSimp_commuteLeq" (formula "27"))
                        (rule "inEqSimp_commuteLeq" (formula "30"))
                        (rule "applyEq" (formula "31") (term "0") (ifseqformula "50"))
                        (rule "inEqSimp_homoInEq0" (formula "31"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "31") (term "1,0"))
                        (rule "polySimp_mulAssoc" (formula "31") (term "0,1,0"))
                        (rule "polySimp_mulComm0" (formula "31") (term "0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "0,1,0"))
                        (rule "polySimp_elimOne" (formula "31") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "31") (term "0"))
                        (rule "applyEq" (formula "30") (term "0") (ifseqformula "50"))
                        (rule "inEqSimp_commuteGeq" (formula "30"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "35") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "30"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                        (rule "polySimp_elimOne" (formula "30") (term "0"))
                        (rule "inEqSimp_subsumption6" (formula "27") (ifseqformula "63"))
                        (rule "mul_literals" (formula "27") (term "1,1,0"))
                        (rule "greater_literals" (formula "27") (term "0,0"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "leq_literals" (formula "27") (term "0"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "true_left" (formula "27"))
                        (rule "inEqSimp_exactShadow2" (formula "58") (ifseqformula "27"))
                        (rule "greater_literals" (formula "58") (term "0"))
                         (builtin "One Step Simplification" (formula "58"))
                        (rule "polySimp_rightDist" (formula "58") (term "1,0,0"))
                        (rule "mul_literals" (formula "58") (term "0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "58") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "58") (term "1,0,0"))
                        (rule "mul_literals" (formula "58") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "58"))
                        (rule "polySimp_mulComm0" (formula "58") (term "1"))
                        (rule "polySimp_rightDist" (formula "58") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "58") (term "1,1"))
                        (rule "mul_literals" (formula "58") (term "0,1"))
                        (rule "inEqSimp_exactShadow2" (formula "12") (ifseqformula "27"))
                        (rule "greater_literals" (formula "12") (term "0"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "0,0"))
                        (rule "mul_literals" (formula "12") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "12"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1"))
                        (rule "polySimp_rightDist" (formula "12") (term "1"))
                        (rule "mul_literals" (formula "12") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
                        (rule "inEqSimp_exactShadow3" (formula "29") (ifseqformula "49"))
                        (rule "mul_literals" (formula "29") (term "0,0"))
                        (rule "add_zero_left" (formula "29") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "29"))
                        (rule "polySimp_mulLiterals" (formula "29") (term "1"))
                        (rule "polySimp_elimOne" (formula "29") (term "1"))
                        (rule "inEqSimp_exactShadow2" (formula "5") (ifseqformula "28"))
                        (rule "greater_literals" (formula "5") (term "0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,0,0"))
                        (rule "mul_literals" (formula "5") (term "0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "5") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0"))
                        (rule "mul_literals" (formula "5") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1"))
                        (rule "polySimp_rightDist" (formula "5") (term "1"))
                        (rule "mul_literals" (formula "5") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                        (rule "inEqSimp_exactShadow2" (formula "48") (ifseqformula "29"))
                        (rule "greater_literals" (formula "48") (term "0"))
                         (builtin "One Step Simplification" (formula "48"))
                        (rule "polySimp_rightDist" (formula "48") (term "1,0,0"))
                        (rule "mul_literals" (formula "48") (term "0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "48") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "48") (term "1,0,0"))
                        (rule "mul_literals" (formula "48") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "48"))
                        (rule "polySimp_mulComm0" (formula "48") (term "1"))
                        (rule "polySimp_rightDist" (formula "48") (term "1"))
                        (rule "mul_literals" (formula "48") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "48") (term "1,1"))
                        (rule "inEqSimp_exactShadow2" (formula "66") (ifseqformula "29"))
                        (rule "mul_literals" (formula "66") (term "1,0,0,1"))
                        (rule "greater_literals" (formula "66") (term "0"))
                         (builtin "One Step Simplification" (formula "66"))
                        (rule "mul_literals" (formula "66") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "66"))
                        (rule "mul_literals" (formula "66") (term "1"))
                        (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "18"))
                         (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "76")) (ifInst ""  (formula "77")) (ifInst ""  (formula "70")))
                        (rule "translateJavaMulInt" (formula "18") (term "1,1,1,0,0,0"))
                        (rule "translateJavaSubInt" (formula "18") (term "0,2,0,1,0"))
                        (rule "translateJavaSubInt" (formula "18") (term "0,2,1,1,0"))
                        (rule "andLeft" (formula "18"))
                        (rule "andLeft" (formula "18"))
                        (rule "andLeft" (formula "18"))
                        (rule "andLeft" (formula "18"))
                        (rule "andLeft" (formula "18"))
                        (rule "eqSymm" (formula "22"))
                        (rule "eqSymm" (formula "20"))
                        (rule "polySimp_elimSub" (formula "22") (term "0,2,0"))
                        (rule "mul_literals" (formula "22") (term "1,0,2,0"))
                        (rule "eqSymm" (formula "22"))
                        (rule "polySimp_elimSub" (formula "22") (term "0,2,0"))
                        (rule "mul_literals" (formula "22") (term "1,0,2,0"))
                        (rule "eqSymm" (formula "22"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "22") (term "0,2,0"))
                        (rule "replaceKnownSelect_taclet10111001_3" (formula "22") (term "0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet10111001_4" (formula "22") (term "0"))
                        (rule "eqSymm" (formula "22"))
                        (rule "polySimp_addComm0" (formula "22") (term "0,2,0"))
                        (rule "replaceKnownSelect_taclet10111001_2" (formula "22") (term "0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet10111001_4" (formula "22") (term "0"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "true_left" (formula "22"))
                        (rule "inEqSimp_commuteLeq" (formula "18"))
                        (rule "applyEq" (formula "18") (term "0") (ifseqformula "41"))
                        (rule "applyEq" (formula "19") (term "0") (ifseqformula "72"))
                        (rule "eqSymm" (formula "19"))
                        (rule "applyEq" (formula "18") (term "0") (ifseqformula "39"))
                        (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "66") (inst "b=b"))
                         (builtin "One Step Simplification" (formula "66") (ifInst ""  (formula "76")) (ifInst ""  (formula "32")) (ifInst ""  (formula "35")))
                        (rule "translateJavaAddInt" (formula "66") (term "1,1,0,0"))
                        (rule "translateJavaCastInt" (formula "66") (term "0,1,0"))
                        (rule "translateJavaCastInt" (formula "66") (term "0,1,1,0,0,0"))
                        (rule "translateJavaCastInt" (formula "66") (term "1,1,0,1,0,0,0"))
                        (rule "translateJavaMulInt" (formula "66") (term "0,1,0,0,0,0"))
                        (rule "translateJavaMulInt" (formula "66") (term "1,0,0,0,0,0"))
                        (rule "andLeft" (formula "66"))
                        (rule "andLeft" (formula "66"))
                        (rule "andLeft" (formula "66"))
                        (rule "andLeft" (formula "66"))
                        (rule "andLeft" (formula "67"))
                        (rule "andLeft" (formula "66"))
                        (rule "andLeft" (formula "68"))
                        (rule "polySimp_mulComm0" (formula "67") (term "0"))
                        (rule "polySimp_mulComm0" (formula "66") (term "1"))
                        (rule "polySimp_addComm0" (formula "70") (term "1"))
                        (rule "castedGetAny" (formula "70") (term "0"))
                        (rule "castedGetAny" (formula "69") (term "0"))
                        (rule "castedGetAny" (formula "68") (term "1"))
                        (rule "inEqSimp_ltToLeq" (formula "70") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "70") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "70") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "67"))
                        (rule "inEqSimp_commuteLeq" (formula "66"))
                        (rule "inEqSimp_commuteLeq" (formula "67"))
                        (rule "applyEq" (formula "68") (term "0") (ifseqformula "51"))
                        (rule "inEqSimp_homoInEq0" (formula "68"))
                        (rule "polySimp_mulComm0" (formula "68") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "68") (term "1,0"))
                        (rule "polySimp_mulAssoc" (formula "68") (term "0,1,0"))
                        (rule "polySimp_mulComm0" (formula "68") (term "0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "68") (term "0,1,0"))
                        (rule "polySimp_elimOne" (formula "68") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "68") (term "0"))
                        (rule "applyEq" (formula "67") (term "0") (ifseqformula "51"))
                        (rule "inEqSimp_commuteGeq" (formula "67"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "68") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "68") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "68") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "68") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "68") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "68") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "67"))
                        (rule "polySimp_mulLiterals" (formula "67") (term "0"))
                        (rule "polySimp_elimOne" (formula "67") (term "0"))
                        (rule "inEqSimp_subsumption6" (formula "66") (ifseqformula "69"))
                        (rule "mul_literals" (formula "66") (term "1,1,0"))
                        (rule "greater_literals" (formula "66") (term "0,0"))
                         (builtin "One Step Simplification" (formula "66"))
                        (rule "leq_literals" (formula "66") (term "0"))
                         (builtin "One Step Simplification" (formula "66"))
                        (rule "true_left" (formula "66"))
                        (rule "Definition_axiom_for_isClassOfSlice_in_de_wiesler_Classifier" (formula "15") (term "0") (inst "i=i"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                        (rule "mul_literals" (formula "15") (term "1,0,0,1,0,0"))
                        (rule "add_literals" (formula "15") (term "0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                        (rule "mul_literals" (formula "15") (term "1,1,0,0"))
                        (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "37"))
                         (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "77")) (ifInst ""  (formula "78")) (ifInst ""  (formula "71")))
                        (rule "translateJavaMulInt" (formula "37") (term "1,1,1,0,0,0"))
                        (rule "translateJavaSubInt" (formula "37") (term "0,2,1,1,0"))
                        (rule "translateJavaSubInt" (formula "37") (term "0,2,0,1,0"))
                        (rule "andLeft" (formula "37"))
                        (rule "andLeft" (formula "37"))
                        (rule "andLeft" (formula "37"))
                        (rule "andLeft" (formula "37"))
                        (rule "andLeft" (formula "37"))
                        (rule "eqSymm" (formula "41"))
                        (rule "eqSymm" (formula "39"))
                        (rule "polySimp_elimSub" (formula "41") (term "0,2,1"))
                        (rule "mul_literals" (formula "41") (term "1,0,2,1"))
                        (rule "polySimp_elimSub" (formula "41") (term "0,2,0"))
                        (rule "mul_literals" (formula "41") (term "1,0,2,0"))
                        (rule "polySimp_mulComm0" (formula "39") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "41") (term "0,2,1"))
                        (rule "polySimp_addComm0" (formula "41") (term "0,2,0"))
                        (rule "inEqSimp_commuteLeq" (formula "37"))
                        (rule "applyEq" (formula "74") (term "0") (ifseqformula "39"))
                        (rule "applyEq" (formula "39") (term "1") (ifseqformula "42"))
                        (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "17") (inst "b=b"))
                         (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "79")) (ifInst ""  (formula "32")) (ifInst ""  (formula "35")))
                        (rule "translateJavaCastInt" (formula "17") (term "0,1,0"))
                        (rule "translateJavaCastInt" (formula "17") (term "0,1,1,0,0,0"))
                        (rule "translateJavaCastInt" (formula "17") (term "1,1,0,1,0,0,0"))
                        (rule "translateJavaMulInt" (formula "17") (term "1,0,0,0,0,0"))
                        (rule "translateJavaMulInt" (formula "17") (term "0,1,0,0,0,0"))
                        (rule "translateJavaAddInt" (formula "17") (term "1,1,0,0"))
                        (rule "andLeft" (formula "17"))
                        (rule "andLeft" (formula "17"))
                        (rule "andLeft" (formula "17"))
                        (rule "andLeft" (formula "17"))
                        (rule "andLeft" (formula "18"))
                        (rule "andLeft" (formula "17"))
                        (rule "andLeft" (formula "19"))
                        (rule "polySimp_mulComm0" (formula "18") (term "0"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1"))
                        (rule "polySimp_addComm0" (formula "21") (term "1"))
                        (rule "castedGetAny" (formula "21") (term "0"))
                        (rule "castedGetAny" (formula "20") (term "0"))
                        (rule "castedGetAny" (formula "19") (term "1"))
                        (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "18"))
                        (rule "inEqSimp_commuteLeq" (formula "17"))
                        (rule "inEqSimp_commuteLeq" (formula "18"))
                        (rule "applyEq" (formula "40") (term "0") (ifseqformula "45"))
                        (rule "applyEq" (formula "40") (term "0") (ifseqformula "44"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                        (rule "inEqSimp_subsumption6" (formula "17") (ifseqformula "73"))
                        (rule "mul_literals" (formula "17") (term "1,1,0"))
                        (rule "greater_literals" (formula "17") (term "0,0"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "leq_literals" (formula "17") (term "0"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "true_left" (formula "17"))
                        (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "18"))
                        (rule "polySimp_mulComm0" (formula "17") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "17") (term "0"))
                        (rule "applyEq" (formula "19") (term "0") (ifseqformula "56"))
                        (rule "inEqSimp_homoInEq0" (formula "19"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0"))
                        (rule "polySimp_mulAssoc" (formula "19") (term "0,1,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "19") (term "0,1,0"))
                        (rule "polySimp_elimOne" (formula "19") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0"))
                        (rule "applyEq" (formula "18") (term "0") (ifseqformula "56"))
                        (rule "inEqSimp_commuteGeq" (formula "18"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "17"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "0"))
                        (rule "polySimp_elimOne" (formula "17") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "18"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "0"))
                        (rule "polySimp_elimOne" (formula "18") (term "0"))
                        (rule "Contract_axiom_for_countElement_in_BucketPointers" (formula "21") (term "1,1,0"))
                         (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "109")) (ifInst ""  (formula "105")) (ifInst ""  (formula "24")) (ifInst ""  (formula "27")) (ifInst ""  (formula "107")) (ifInst ""  (formula "45")))
                        (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0,0"))
                        (rule "replace_known_left" (formula "21") (term "0,0,0,0") (ifseqformula "46"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                        (rule "replace_known_left" (formula "21") (term "0,0,0") (ifseqformula "47"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0"))
                        (rule "replace_known_left" (formula "21") (term "0,0") (ifseqformula "49"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "true_left" (formula "21"))
                        (rule "Definition_axiom_for_countElement_in_de_wiesler_BucketPointers" (formula "21") (term "1,1,0"))
                        (rule "translateJavaAddInt" (formula "21") (term "1,1,0"))
                        (rule "polySimp_addAssoc" (formula "21") (term "1,0"))
                        (rule "polySimp_homoEq" (formula "21") (term "0"))
                        (rule "polySimp_addComm1" (formula "21") (term "0,0"))
                        (rule "polySimp_sepPosMonomial" (formula "21") (term "0"))
                        (rule "polySimp_mulComm0" (formula "21") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "21") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "21") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "21") (term "0,1,0"))
                        (rule "polySimp_rightDist" (formula "21") (term "0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "21") (term "1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "21") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "21") (term "0,0,0,1,0"))
                        (rule "Definition_axiom_for_countElement_in_de_wiesler_BucketPointers" (formula "68") (term "0,0"))
                        (rule "translateJavaAddInt" (formula "68") (term "0,0"))
                        (rule "polySimp_homoEq" (formula "68") (term "0"))
                        (rule "polySimp_mulComm0" (formula "68") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "68") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "68") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "68") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "68") (term "0,0,0"))
                        (rule "polySimp_sepNegMonomial" (formula "68") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "68") (term "0,0"))
                        (rule "polySimp_elimOne" (formula "68") (term "0,0"))
                        (rule "Definition_axiom_for_remainingWriteCountOfBucket_in_de_wiesler_BucketPointers" (formula "2") (term "2,1"))
                        (rule "translateJavaSubInt" (formula "2") (term "2,1"))
                        (rule "translateJavaAddInt" (formula "2") (term "1,0,2,1"))
                        (rule "polySimp_elimSub" (formula "2") (term "2,1"))
                        (rule "polySimp_addComm0" (formula "2") (term "1,0,2,1"))
                        (rule "Definition_axiom_for_remainingWriteCountOfBucket_in_de_wiesler_BucketPointers" (formula "2") (term "2,0"))
                        (rule "translateJavaSubInt" (formula "2") (term "2,0"))
                        (rule "translateJavaAddInt" (formula "2") (term "1,0,2,0"))
                        (rule "polySimp_elimSub" (formula "2") (term "2,0"))
                        (rule "polySimp_addComm0" (formula "2") (term "1,0,2,0"))
                        (rule "Definition_axiom_for_remainingWriteCountOfBucket_in_de_wiesler_BucketPointers" (formula "1") (term "1,1"))
                        (rule "translateJavaAddInt" (formula "1") (term "1,0,1,1"))
                        (rule "translateJavaSubInt" (formula "1") (term "1,1"))
                        (rule "polySimp_elimSub" (formula "1") (term "1,1"))
                        (rule "polySimp_addComm0" (formula "1") (term "1,0,1,1"))
                        (rule "polySimp_addAssoc" (formula "1") (term "1"))
                        (rule "Contract_axiom_for_remainingWriteCountOfBucket_in_BucketPointers" (formula "1") (term "0"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "107")) (ifInst ""  (formula "27")))
                        (rule "wellFormedAnon" (formula "1") (term "1,0"))
                        (rule "replace_known_left" (formula "1") (term "0,1,0") (ifseqformula "24"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")))
                        (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
                        (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "4"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                        (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "7"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "Definition_axiom_for_remainingWriteCountOfBucket_in_de_wiesler_BucketPointers" (formula "1") (term "0"))
                        (rule "translateJavaSubInt" (formula "1") (term "0"))
                        (rule "translateJavaAddInt" (formula "1") (term "1,0,0"))
                        (rule "polySimp_elimSub" (formula "1") (term "0"))
                        (rule "polySimp_addComm0" (formula "1") (term "1,0,0"))
                        (rule "inEqSimp_homoInEq0" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                        (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                        (rule "mul_literals" (formula "1") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                        (rule "Definition_axiom_for_remainingWriteCountOfBucket_in_de_wiesler_BucketPointers" (formula "62") (term "1,1"))
                        (rule "translateJavaSubInt" (formula "62") (term "1,1"))
                        (rule "translateJavaAddInt" (formula "62") (term "1,0,1,1"))
                        (rule "polySimp_elimSub" (formula "62") (term "1,1"))
                        (rule "polySimp_addComm0" (formula "62") (term "1,0,1,1"))
                        (rule "polySimp_addAssoc" (formula "62") (term "1"))
                        (rule "Contract_axiom_for_remainingWriteCountOfBucket_in_BucketPointers" (formula "62") (term "0"))
                         (builtin "One Step Simplification" (formula "62") (ifInst ""  (formula "107")) (ifInst ""  (formula "26")))
                        (rule "wellFormedAnon" (formula "62") (term "1,0"))
                        (rule "replace_known_left" (formula "62") (term "0,1,0") (ifseqformula "23"))
                         (builtin "One Step Simplification" (formula "62") (ifInst ""  (formula "22")))
                        (rule "inEqSimp_ltToLeq" (formula "62") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "62") (term "1,0,0,1,0,0"))
                        (rule "polySimp_addComm1" (formula "62") (term "0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "62") (term "0,0,0"))
                        (rule "replace_known_left" (formula "62") (term "0,0,0") (ifseqformula "11"))
                         (builtin "One Step Simplification" (formula "62"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "62") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "62") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "62") (term "0,0,0"))
                        (rule "replace_known_left" (formula "62") (term "0,0") (ifseqformula "14"))
                         (builtin "One Step Simplification" (formula "62"))
                        (rule "true_left" (formula "62"))
                        (rule "Definition_axiom_for_remainingWriteCountOfBucket_in_de_wiesler_BucketPointers" (formula "62") (term "0"))
                        (rule "translateJavaSubInt" (formula "62") (term "0"))
                        (rule "translateJavaAddInt" (formula "62") (term "1,0,0"))
                        (rule "polySimp_elimSub" (formula "62") (term "0"))
                        (rule "polySimp_addComm0" (formula "62") (term "1,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "62"))
                        (rule "polySimp_mulComm0" (formula "62") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "62") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "62") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "62") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "62") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "62") (term "0"))
                        (rule "polySimp_addComm1" (formula "62") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "62") (term "0,0,0"))
                        (rule "add_literals" (formula "62") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "62") (term "1,0,0,0"))
                        (rule "add_literals" (formula "62") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "62"))
                        (rule "polySimp_mulComm0" (formula "62") (term "1"))
                        (rule "polySimp_rightDist" (formula "62") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "62") (term "1,1"))
                        (rule "mul_literals" (formula "62") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "62") (term "1,1"))
                        (rule "nnf_imp2or" (formula "56") (term "0"))
                        (rule "nnf_imp2or" (formula "37") (term "0"))
                        (rule "Definition_axiom_for_isClassOfSlice_in_de_wiesler_Classifier" (formula "63") (term "0") (inst "i=i"))
                         (builtin "One Step Simplification" (formula "63"))
                        (rule "inEqSimp_ltToLeq" (formula "63") (term "1,0,0"))
                        (rule "mul_literals" (formula "63") (term "1,0,0,1,0,0"))
                        (rule "add_literals" (formula "63") (term "0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "63") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "63") (term "1,0,0"))
                        (rule "mul_literals" (formula "63") (term "1,1,0,0"))
                        (rule "Definition_axiom_for_countBucketElementsEverywhere_in_de_wiesler_Permute" (formula "10") (term "1,0,1,1,1,0"))
                        (rule "translateJavaAddInt" (formula "10") (term "1,0,1,1,1,0"))
                        (rule "polySimp_addComm0" (formula "10") (term "0,1,1,1,0"))
                        (rule "polySimp_addComm0" (formula "10") (term "0,0,1,1,1,0"))
                        (rule "Definition_axiom_for_elementsToReadOfBucketBlockClassified_in_de_wiesler_BucketPointers" (formula "10") (term "0,0,0,1,0"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "translateJavaAddInt" (formula "10") (term "4,0,1,0,0,1,0"))
                        (rule "translateJavaAddInt" (formula "10") (term "3,0,1,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,1,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,1,0"))
                        (rule "Definition_axiom_for_toReadCountOfBucket_in_de_wiesler_BucketPointers" (formula "16") (term "1,1,0"))
                        (rule "translateJavaSubInt" (formula "16") (term "1,1,1,0"))
                        (rule "polySimp_elimSub" (formula "16") (term "1,1,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "16") (term "0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,1,0"))
                        (rule "Definition_axiom_for_countBucketElementsEverywhere_in_de_wiesler_Permute" (formula "61") (term "0,0,0,1,1,1,0"))
                        (rule "translateJavaAddInt" (formula "61") (term "0,0,0,1,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "61") (term "0,0,1,1,1,0"))
                        (rule "polySimp_addComm0" (formula "61") (term "1,0,0,1,1,1,0"))
                        (rule "polySimp_rightDist" (formula "61") (term "0,0,1,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "61") (term "0,0,0,1,1,1,0"))
                        (rule "Definition_axiom_for_countBucketElementsEverywhere_in_de_wiesler_Permute" (formula "61") (term "1,0,1,1,1,0"))
                        (rule "translateJavaAddInt" (formula "61") (term "1,0,1,1,1,0"))
                        (rule "polySimp_addComm0" (formula "61") (term "1,0,1,1,1,0"))
                        (rule "polySimp_addAssoc" (formula "61") (term "0,1,1,1,0"))
                        (rule "polySimp_addComm1" (formula "61") (term "0,0,1,1,1,0"))
                        (rule "Definition_axiom_for_elementsToReadOfBucketBlockClassified_in_de_wiesler_BucketPointers" (formula "61") (term "0,0,0,0,1,0"))
                         (builtin "One Step Simplification" (formula "61"))
                        (rule "translateJavaAddInt" (formula "61") (term "3,0,1,0,0,0,1,0"))
                        (rule "translateJavaAddInt" (formula "61") (term "4,0,1,0,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "61") (term "0,0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "61") (term "1,0,0,0,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "61") (term "0,0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "61") (term "1,0,0,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "61") (term "1,0,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "61") (term "1,1,0,0,0,0,1,0"))
                        (rule "mul_literals" (formula "61") (term "0,1,0,0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "61") (term "1,1,0,0,0,0,1,0"))
                        (rule "Definition_axiom_for_countBucketElementsEverywhere_in_de_wiesler_Permute" (formula "57") (term "0,1,1,1,1,0"))
                        (rule "translateJavaAddInt" (formula "57") (term "0,1,1,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "57") (term "1,1,1,1,0"))
                        (rule "polySimp_addComm0" (formula "57") (term "1,1,1,1,1,0"))
                        (rule "polySimp_rightDist" (formula "57") (term "1,1,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "57") (term "0,1,1,1,1,0"))
                        (rule "polySimp_addAssoc" (formula "57") (term "1,1,1,0"))
                        (rule "Definition_axiom_for_elementsToReadOfBucketBlockClassified_in_de_wiesler_BucketPointers" (formula "57") (term "0,0,0,1,0"))
                         (builtin "One Step Simplification" (formula "57"))
                        (rule "translateJavaAddInt" (formula "57") (term "3,0,1,0,0,1,0"))
                        (rule "translateJavaAddInt" (formula "57") (term "4,0,1,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "57") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "57") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "57") (term "1,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "57") (term "1,1,0,0,0,1,0"))
                        (rule "mul_literals" (formula "57") (term "0,1,0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "57") (term "1,1,0,0,0,1,0"))
                        (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "76"))
                         (builtin "One Step Simplification" (formula "76"))
                        (rule "translateJavaSubInt" (formula "76") (term "3,0,1"))
                        (rule "andLeft" (formula "76"))
                        (rule "andLeft" (formula "76"))
                        (rule "andLeft" (formula "76"))
                        (rule "andLeft" (formula "77"))
                        (rule "andLeft" (formula "76"))
                        (rule "andLeft" (formula "76"))
                        (rule "andLeft" (formula "77"))
                        (rule "andLeft" (formula "76"))
                        (rule "notLeft" (formula "76"))
                        (rule "notLeft" (formula "76"))
                        (rule "polySimp_elimSub" (formula "82") (term "3,0"))
                        (rule "mul_literals" (formula "82") (term "1,3,0"))
                        (rule "polySimp_addComm0" (formula "82") (term "3,0"))
                        (rule "inEqSimp_commuteLeq" (formula "81"))
                        (rule "inEqSimp_commuteLeq" (formula "80"))
                        (rule "inEqSimp_commuteLeq" (formula "79"))
                        (rule "inEqSimp_commuteLeq" (formula "76"))
                        (rule "applyEq" (formula "74") (term "3,0") (ifseqformula "78"))
                        (rule "applyEq" (formula "81") (term "0,0") (ifseqformula "73"))
                        (rule "inEqSimp_commuteGeq" (formula "81"))
                        (rule "applyEq" (formula "80") (term "1") (ifseqformula "78"))
                        (rule "applyEq" (formula "82") (term "1,3,0") (ifseqformula "78"))
                        (rule "applyEq" (formula "79") (term "0") (ifseqformula "78"))
                        (rule "applyEq" (formula "85") (term "0") (ifseqformula "73"))
                        (rule "applyEq" (formula "19") (term "3,0") (ifseqformula "78"))
                        (rule "applyEq" (formula "39") (term "3,0") (ifseqformula "78"))
                        (rule "applyEq" (formula "82") (term "1,0") (ifseqformula "73"))
                        (rule "applyEq" (formula "38") (term "2,0") (ifseqformula "78"))
                        (rule "applyEq" (formula "75") (term "1,0,2,0") (ifseqformula "78"))
                        (rule "eqSymm" (formula "75"))
                        (rule "applyEq" (formula "38") (term "0,1,0") (ifseqformula "78"))
                        (rule "applyEq" (formula "75") (term "1,0,2,0") (ifseqformula "78"))
                        (rule "eqSymm" (formula "75"))
                        (rule "applyEq" (formula "81") (term "0") (ifseqformula "78"))
                        (rule "inEqSimp_exactShadow3" (formula "79") (ifseqformula "81"))
                        (rule "mul_literals" (formula "79") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "79"))
                        (rule "mul_literals" (formula "79") (term "1"))
                        (rule "commute_or" (formula "16") (term "0,0"))
                        (rule "nnf_imp2or" (formula "69") (term "0"))
                        (rule "nnf_imp2or" (formula "15") (term "0"))
                        (rule "Definition_axiom_for_isSortedSeqTransitive_in_de_wiesler_Functions" (formula "36") (term "0") (inst "i=i") (inst "j=j"))
                         (builtin "One Step Simplification" (formula "36"))
                        (rule "translateJavaCastInt" (formula "36") (term "0,1,0,1,0"))
                        (rule "translateJavaCastInt" (formula "36") (term "1,1,0,1,0"))
                        (rule "castedGetAny" (formula "36") (term "0,1,0,1,0"))
                        (rule "castedGetAny" (formula "36") (term "1,1,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "36") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "36") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "36") (term "1,0,1,0"))
                        (rule "applyEq" (formula "36") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "34"))
                        (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0,1,0"))
                        (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0,1,0"))
                        (rule "add_literals" (formula "36") (term "0,0,0,1,0,0,1,0"))
                        (rule "add_zero_left" (formula "36") (term "0,0,1,0,0,1,0"))
                        (rule "applyEq" (formula "36") (term "0,1,0,0,1,0,0") (ifseqformula "34"))
                        (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "36") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "36") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "36") (term "1,1,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "36") (term "1,1,0,0"))
                        (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "33") (term "0"))
                         (builtin "One Step Simplification" (formula "33"))
                        (rule "translateJavaMod" (formula "33") (term "0"))
                        (rule "jmod_axiom" (formula "33") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "1,0"))
                        (rule "polySimp_sepNegMonomial" (formula "33"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "0"))
                        (rule "newSym_eq" (formula "33") (inst "l=l_0") (inst "newSymDef=mul(int::final(bucket_pointers,
               de.wiesler.BucketPointers::$first_empty_position),
    Z(0(#)))"))
                        (rule "times_zero_1" (formula "33") (term "1,1"))
                        (rule "add_zero_right" (formula "33") (term "1"))
                        (rule "applyEq" (formula "34") (term "0,0") (ifseqformula "33"))
                        (rule "eqSymm" (formula "34"))
                        (rule "applyEq" (formula "56") (term "0") (ifseqformula "34"))
                        (rule "inEqSimp_homoInEq0" (formula "56"))
                        (rule "polySimp_mulLiterals" (formula "56") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "56") (term "0"))
                        (rule "polySimp_addComm0" (formula "56") (term "0,0"))
                        (rule "applyEq" (formula "17") (term "0") (ifseqformula "34"))
                        (rule "applyEq" (formula "32") (term "0") (ifseqformula "34"))
                        (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "34"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "56"))
                        (rule "polySimp_mulComm0" (formula "56") (term "1"))
                        (rule "polySimp_rightDist" (formula "56") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "56") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "56") (term "1,1"))
                        (rule "polySimp_mulComm0" (formula "56") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "56") (term "0,1"))
                        (rule "elimGcdGeq_antec" (formula "32") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
                        (rule "mul_literals" (formula "32") (term "0,1,0,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "1,0,1,0"))
                        (rule "leq_literals" (formula "32") (term "0,0"))
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "add_zero_right" (formula "32") (term "0,0,0,0"))
                        (rule "times_zero_1" (formula "32") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "32") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "32") (term "0,0"))
                        (rule "add_literals" (formula "32") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "32") (term "1,0,0"))
                        (rule "add_zero_right" (formula "32") (term "0,0"))
                        (rule "leq_literals" (formula "32") (term "0"))
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "elimGcdLeq_antec" (formula "17") (inst "elimGcdRightDiv=Z(7(0(6(8(8(3(8(#))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
                        (rule "mul_literals" (formula "17") (term "0,1,0,0,0,0,1,0"))
                        (rule "neg_literal" (formula "17") (term "0,0,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "1,0,1,0"))
                        (rule "leq_literals" (formula "17") (term "0,0"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "mul_literals" (formula "17") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "17") (term "0,0,0,0"))
                        (rule "add_zero_right" (formula "17") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "17") (term "0,0"))
                        (rule "add_literals" (formula "17") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "17") (term "1,0,0"))
                        (rule "add_zero_right" (formula "17") (term "0,0"))
                        (rule "qeq_literals" (formula "17") (term "0"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "inEqSimp_exactShadow3" (formula "56") (ifseqformula "50"))
                        (rule "polySimp_rightDist" (formula "56") (term "0,0"))
                        (rule "polySimp_mulAssoc" (formula "56") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "56") (term "0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "56") (term "0,0,0"))
                        (rule "polySimp_addAssoc" (formula "56") (term "0"))
                        (rule "polySimp_addComm1" (formula "56") (term "0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "56") (term "0"))
                        (rule "add_literals" (formula "56") (term "1,1,0"))
                        (rule "times_zero_1" (formula "56") (term "1,0"))
                        (rule "polySimp_addLiterals" (formula "56") (term "0"))
                        (rule "polySimp_addComm0" (formula "56") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "56"))
                        (rule "polySimp_mulLiterals" (formula "56") (term "0"))
                        (rule "inEqSimp_subsumption4" (formula "56") (ifseqformula "17"))
                        (rule "greater_literals" (formula "56") (term "0,0"))
                         (builtin "One Step Simplification" (formula "56"))
                        (rule "mul_literals" (formula "56") (term "0,0"))
                        (rule "leq_literals" (formula "56") (term "0"))
                         (builtin "One Step Simplification" (formula "56"))
                        (rule "true_left" (formula "56"))
                        (rule "ifthenelse_split" (formula "85") (term "0"))
                        (branch "first_is_current_swap_0 = TRUE TRUE"
                           (rule "eqSymm" (formula "86"))
                           (rule "close" (formula "104") (ifseqformula "86"))
                        )
                        (branch "first_is_current_swap_0 = TRUE FALSE"
                           (rule "eqSymm" (formula "85"))
                           (rule "close" (formula "100") (ifseqformula "85"))
                        )
                     )
                  )
                  (branch "Case 2"
                     (rule "instEx" (formula "42") (term "2,1") (ifseqformula "77") (userinteraction))
                     (rule "replace_known_left" (formula "49") (term "1") (ifseqformula "42"))
                      (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "5")) (ifInst ""  (formula "6")))
                     (rule "closeTrue" (formula "49"))
                  )
               )
            )
         )
      )
      (branch "Exceptional Post (swap_block)"
          (builtin "One Step Simplification" (formula "39"))
          (builtin "One Step Simplification" (formula "67"))
         (rule "translateJavaAddInt" (formula "39") (term "0,0,0,0,1,0,0,0,1,1"))
         (rule "translateJavaAddInt" (formula "39") (term "1,0,0,0,1,0,0,0,1,1"))
         (rule "translateJavaAddInt" (formula "39") (term "0,1,1,0,1,0,0"))
         (rule "translateJavaSubInt" (formula "39") (term "2,0,0,1,0,0"))
         (rule "translateJavaAddInt" (formula "39") (term "1,0,0,1,1,1,0,1,1"))
         (rule "translateJavaAddInt" (formula "39") (term "0,0,0,1,1,1,0,1,1"))
         (rule "translateJavaMulInt" (formula "39") (term "0,0,1,1,0,1,0,0"))
         (rule "andLeft" (formula "39"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (term "1,0") (ifseqformula "39"))
          (builtin "One Step Simplification" (formula "40"))
         (rule "andLeft" (formula "40"))
         (rule "andLeft" (formula "41"))
         (rule "andLeft" (formula "40"))
         (rule "andLeft" (formula "42"))
         (rule "notLeft" (formula "40"))
         (rule "close" (formula "44") (ifseqformula "43"))
      )
      (branch "Pre (swap_block)"
          (builtin "One Step Simplification" (formula "65") (ifInst ""  (formula "9")) (ifInst ""  (formula "10")) (ifInst ""  (formula "23")) (ifInst ""  (formula "26")) (ifInst ""  (formula "7")) (ifInst ""  (formula "64")) (ifInst ""  (formula "63")) (ifInst ""  (formula "62")) (ifInst ""  (formula "60")) (ifInst ""  (formula "64")) (ifInst ""  (formula "14")) (ifInst ""  (formula "63")) (ifInst ""  (formula "15")) (ifInst ""  (formula "62")) (ifInst ""  (formula "16")) (ifInst ""  (formula "60")) (ifInst ""  (formula "19")))
         (rule "andRight" (formula "65"))
         (branch "Case 1"
            (rule "andRight" (formula "65"))
            (branch "Case 1"
               (rule "andRight" (formula "65"))
               (branch "Case 1"
                   (builtin "SMTRule")
               )
               (branch "Case 2"
                   (builtin "SMTRule")
               )
            )
            (branch "Case 2"
               (rule "andRight" (formula "65"))
               (branch "Case 1"
                  (rule "andRight" (formula "65"))
                  (branch "Case 1"
                     (rule "andRight" (formula "65"))
                     (branch "Case 1"
                        (rule "polySimp_homoEq" (formula "11") (term "0"))
                        (rule "polySimp_homoEq" (formula "4") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1,0,1,1,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "4") (term "1,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,1,1,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0,1,1,0"))
                        (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "11") (term "0,0,0"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,1,0"))
                        (rule "inEqSimp_leqRight" (formula "65"))
                        (rule "add_zero_right" (formula "1") (term "0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "38") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "7"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "34"))
                        (rule "polySimp_mulComm0" (formula "34") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "34") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_homoInEq0" (formula "32"))
                        (rule "polySimp_mulComm0" (formula "32") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "32") (term "1,0"))
                        (rule "polySimp_mulAssoc" (formula "32") (term "0,1,0"))
                        (rule "polySimp_mulComm0" (formula "32") (term "0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "0,1,0"))
                        (rule "polySimp_elimOne" (formula "32") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "32") (term "0"))
                        (rule "inEqSimp_homoInEq0" (formula "38") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "38") (term "1,0,1,1,0"))
                        (rule "polySimp_rightDist" (formula "38") (term "1,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "38") (term "0,1,0,1,1,0"))
                        (rule "polySimp_addAssoc" (formula "38") (term "0,1,1,0"))
                        (rule "polySimp_sepNegMonomial" (formula "12") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "0,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "0,0"))
                        (rule "polySimp_sepPosMonomial" (formula "5") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,1,1,0"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,1,0"))
                        (rule "polySimp_elimOne" (formula "5") (term "1,1,1,1,0"))
                        (rule "polySimp_rightDist" (formula "5") (term "0,1,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0,1,1,1,0"))
                        (rule "polySimp_elimOne" (formula "5") (term "1,0,1,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "5") (term "0,0,1,1,1,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "38") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "38") (term "0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                        (rule "polySimp_elimOne" (formula "7") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "34"))
                        (rule "polySimp_mulLiterals" (formula "34") (term "0"))
                        (rule "polySimp_elimOne" (formula "34") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "5") (term "0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "32"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "0"))
                        (rule "polySimp_elimOne" (formula "32") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "38") (term "1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "38") (term "0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "38") (term "0,1,1,0"))
                        (rule "inEqSimp_contradInEq0" (formula "28") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "28") (term "0"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "closeFalse" (formula "28"))
                     )
                     (branch "Case 2"
                        (rule "polySimp_homoEq" (formula "11") (term "0"))
                        (rule "polySimp_homoEq" (formula "4") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1,0,1,1,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "4") (term "1,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,1,1,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0,1,1,0"))
                        (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "11") (term "0,0,0"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,1,0"))
                        (rule "inEqSimp_leqRight" (formula "65"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "7"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "38") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "34"))
                        (rule "polySimp_mulComm0" (formula "34") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "34") (term "0"))
                        (rule "inEqSimp_homoInEq0" (formula "38") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "38") (term "1,0,1,1,0"))
                        (rule "polySimp_rightDist" (formula "38") (term "1,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "38") (term "0,1,0,1,1,0"))
                        (rule "polySimp_addAssoc" (formula "38") (term "0,1,1,0"))
                        (rule "inEqSimp_homoInEq0" (formula "32"))
                        (rule "polySimp_mulComm0" (formula "32") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "32") (term "1,0"))
                        (rule "polySimp_mulAssoc" (formula "32") (term "0,1,0"))
                        (rule "polySimp_mulComm0" (formula "32") (term "0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "0,1,0"))
                        (rule "polySimp_elimOne" (formula "32") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "32") (term "0"))
                        (rule "polySimp_sepNegMonomial" (formula "12") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "0,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "0,0"))
                        (rule "polySimp_sepPosMonomial" (formula "5") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,1,1,0"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,1,0"))
                        (rule "polySimp_elimOne" (formula "5") (term "1,1,1,1,0"))
                        (rule "polySimp_rightDist" (formula "5") (term "0,1,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0,1,1,1,0"))
                        (rule "polySimp_elimOne" (formula "5") (term "1,0,1,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "5") (term "0,0,1,1,1,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "5") (term "0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                        (rule "polySimp_elimOne" (formula "7") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "38") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "38") (term "0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "34"))
                        (rule "polySimp_mulLiterals" (formula "34") (term "0"))
                        (rule "polySimp_elimOne" (formula "34") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "38") (term "1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "38") (term "0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "38") (term "0,1,1,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "32"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "0"))
                        (rule "polySimp_elimOne" (formula "32") (term "0"))
                        (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "29"))
                        (rule "andLeft" (formula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "1,1,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0"))
                        (rule "add_zero_right" (formula "1") (term "0"))
                        (rule "leq_literals" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
                  (branch "Case 2"
                     (rule "polySimp_homoEq" (formula "4") (term "1,1,0"))
                     (rule "polySimp_homoEq" (formula "11") (term "0"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1,0,1,1,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "4") (term "1,0,1,1,0"))
                     (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,1,1,0"))
                     (rule "polySimp_addComm1" (formula "4") (term "0,1,1,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,1,0"))
                     (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "11") (term "0,0,0"))
                     (rule "inEqSimp_leqRight" (formula "65"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "38") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "7"))
                     (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "7") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "34"))
                     (rule "polySimp_mulComm0" (formula "34") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "34") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_homoInEq0" (formula "38") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "38") (term "1,0,1,1,0"))
                     (rule "polySimp_rightDist" (formula "38") (term "1,0,1,1,0"))
                     (rule "polySimp_mulComm0" (formula "38") (term "0,1,0,1,1,0"))
                     (rule "polySimp_addAssoc" (formula "38") (term "0,1,1,0"))
                     (rule "inEqSimp_homoInEq0" (formula "32"))
                     (rule "polySimp_mulComm0" (formula "32") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "32") (term "1,0"))
                     (rule "polySimp_mulAssoc" (formula "32") (term "0,1,0"))
                     (rule "polySimp_mulComm0" (formula "32") (term "0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "32") (term "0,1,0"))
                     (rule "polySimp_elimOne" (formula "32") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "32") (term "0"))
                     (rule "polySimp_sepPosMonomial" (formula "5") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "5") (term "1,1,1,0"))
                     (rule "polySimp_rightDist" (formula "5") (term "1,1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,1,0"))
                     (rule "polySimp_elimOne" (formula "5") (term "1,1,1,1,0"))
                     (rule "polySimp_rightDist" (formula "5") (term "0,1,1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "1,0,1,1,1,0"))
                     (rule "polySimp_elimOne" (formula "5") (term "1,0,1,1,1,0"))
                     (rule "polySimp_mulComm0" (formula "5") (term "0,0,1,1,1,0"))
                     (rule "polySimp_sepNegMonomial" (formula "12") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "0,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "38") (term "1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "38") (term "0,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                     (rule "polySimp_elimOne" (formula "7") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "34"))
                     (rule "polySimp_mulLiterals" (formula "34") (term "0"))
                     (rule "polySimp_elimOne" (formula "34") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "5") (term "0,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "9") (term "0,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "38") (term "1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "38") (term "0,1,1,0"))
                     (rule "polySimp_elimOne" (formula "38") (term "0,1,1,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "32"))
                     (rule "polySimp_mulLiterals" (formula "32") (term "0"))
                     (rule "polySimp_elimOne" (formula "32") (term "0"))
                     (rule "inEqSimp_contradInEq0" (formula "31") (ifseqformula "1"))
                     (rule "andLeft" (formula "31"))
                     (rule "inEqSimp_homoInEq1" (formula "31"))
                     (rule "polySimp_mulComm0" (formula "31") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "31") (term "1,0"))
                     (rule "mul_literals" (formula "31") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "31") (term "0"))
                     (rule "polySimp_addComm0" (formula "31") (term "0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "31") (term "0"))
                     (rule "add_literals" (formula "31") (term "1,1,0"))
                     (rule "times_zero_1" (formula "31") (term "1,0"))
                     (rule "add_zero_right" (formula "31") (term "0"))
                     (rule "leq_literals" (formula "31"))
                     (rule "closeFalse" (formula "31"))
                  )
               )
               (branch "Case 2"
                  (rule "andRight" (formula "65"))
                  (branch "Case 1"
                     (rule "translateJavaSubInt" (formula "65") (term "0"))
                     (rule "polySimp_homoEq" (formula "11") (term "0"))
                     (rule "polySimp_homoEq" (formula "4") (term "1,1,0"))
                     (rule "polySimp_elimSub" (formula "65") (term "0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1,0,1,1,0"))
                     (rule "polySimp_addComm0" (formula "65") (term "0"))
                     (rule "close" (formula "65") (ifseqformula "31"))
                  )
                  (branch "Case 2"
                     (rule "andRight" (formula "65"))
                     (branch "Case 1"
                        (rule "andRight" (formula "65"))
                        (branch "Case 1"
                           (rule "polySimp_homoEq" (formula "4") (term "1,1,0"))
                           (rule "polySimp_homoEq" (formula "11") (term "0"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "4") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,1,1,0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,1,0"))
                           (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "11") (term "0,0,0"))
                           (rule "inEqSimp_leqRight" (formula "65"))
                           (rule "add_zero_right" (formula "1") (term "0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "38") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "34"))
                           (rule "polySimp_mulComm0" (formula "34") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "34") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "7"))
                           (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "7") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_homoInEq0" (formula "32"))
                           (rule "polySimp_mulComm0" (formula "32") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "32") (term "1,0"))
                           (rule "polySimp_mulAssoc" (formula "32") (term "0,1,0"))
                           (rule "polySimp_mulComm0" (formula "32") (term "0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "32") (term "0,1,0"))
                           (rule "polySimp_elimOne" (formula "32") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "32") (term "0"))
                           (rule "inEqSimp_homoInEq0" (formula "38") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "38") (term "1,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "38") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "38") (term "0,1,0,1,1,0"))
                           (rule "polySimp_addAssoc" (formula "38") (term "0,1,1,0"))
                           (rule "polySimp_sepPosMonomial" (formula "5") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1,1,1,0"))
                           (rule "polySimp_rightDist" (formula "5") (term "1,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,1,0"))
                           (rule "polySimp_elimOne" (formula "5") (term "1,1,1,1,0"))
                           (rule "polySimp_rightDist" (formula "5") (term "0,1,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "1,0,1,1,1,0"))
                           (rule "polySimp_elimOne" (formula "5") (term "1,0,1,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "5") (term "0,0,1,1,1,0"))
                           (rule "polySimp_sepNegMonomial" (formula "12") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0"))
                           (rule "mul_literals" (formula "5") (term "0,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "38") (term "1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0,0"))
                           (rule "mul_literals" (formula "38") (term "0,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "34"))
                           (rule "polySimp_mulLiterals" (formula "34") (term "0"))
                           (rule "polySimp_elimOne" (formula "34") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                           (rule "polySimp_elimOne" (formula "7") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "32"))
                           (rule "polySimp_mulLiterals" (formula "32") (term "0"))
                           (rule "polySimp_elimOne" (formula "32") (term "0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "38") (term "1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "38") (term "0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "38") (term "0,1,1,0"))
                           (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "6"))
                           (rule "qeq_literals" (formula "1") (term "0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "Case 2"
                           (rule "polySimp_homoEq" (formula "4") (term "1,1,0"))
                           (rule "polySimp_homoEq" (formula "11") (term "0"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "4") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,1,1,0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,1,0"))
                           (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "11") (term "0,0,0"))
                           (rule "inEqSimp_ltRight" (formula "65"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "1") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "38") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "34"))
                           (rule "polySimp_mulComm0" (formula "34") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "34") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "7"))
                           (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "7") (term "0"))
                           (rule "inEqSimp_homoInEq0" (formula "38") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "38") (term "1,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "38") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "38") (term "0,1,0,1,1,0"))
                           (rule "polySimp_addAssoc" (formula "38") (term "0,1,1,0"))
                           (rule "inEqSimp_homoInEq0" (formula "32"))
                           (rule "polySimp_mulComm0" (formula "32") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "32") (term "1,0"))
                           (rule "polySimp_mulAssoc" (formula "32") (term "0,1,0"))
                           (rule "polySimp_mulComm0" (formula "32") (term "0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "32") (term "0,1,0"))
                           (rule "polySimp_elimOne" (formula "32") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "32") (term "0"))
                           (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "24"))
                           (rule "polySimp_sepPosMonomial" (formula "5") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1,1,1,0"))
                           (rule "polySimp_rightDist" (formula "5") (term "1,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,1,0"))
                           (rule "polySimp_elimOne" (formula "5") (term "1,1,1,1,0"))
                           (rule "polySimp_rightDist" (formula "5") (term "0,1,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "1,0,1,1,1,0"))
                           (rule "polySimp_elimOne" (formula "5") (term "1,0,1,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "5") (term "0,0,1,1,1,0"))
                           (rule "polySimp_sepNegMonomial" (formula "12") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "38") (term "1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0,0"))
                           (rule "mul_literals" (formula "38") (term "0,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0"))
                           (rule "mul_literals" (formula "5") (term "0,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "34"))
                           (rule "polySimp_mulLiterals" (formula "34") (term "0"))
                           (rule "polySimp_elimOne" (formula "34") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                           (rule "polySimp_elimOne" (formula "7") (term "0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "38") (term "1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "38") (term "0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "38") (term "0,1,1,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "32"))
                           (rule "polySimp_mulLiterals" (formula "32") (term "0"))
                           (rule "polySimp_elimOne" (formula "32") (term "0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "7"))
                           (rule "andLeft" (formula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "1"))
                           (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "1,1,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0"))
                           (rule "add_zero_right" (formula "1") (term "0"))
                           (rule "leq_literals" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                     (branch "Case 2"
                        (rule "andRight" (formula "65"))
                        (branch "Case 1"
                           (rule "translateJavaCastInt" (formula "65") (term "0"))
                           (rule "translateJavaSubInt" (formula "65") (term "1"))
                           (rule "polySimp_homoEq" (formula "4") (term "1,1,0"))
                           (rule "polySimp_homoEq" (formula "11") (term "0"))
                           (rule "polySimp_elimSub" (formula "65") (term "1"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                           (rule "polySimp_addComm0" (formula "65") (term "1"))
                           (rule "polySimp_rightDist" (formula "4") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,1,1,0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
                           (rule "castedGetAny" (formula "65") (term "0"))
                           (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,1,0"))
                           (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "11") (term "0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "33"))
                           (rule "polySimp_mulComm0" (formula "33") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "33") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "6"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "6") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "37") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_homoInEq0" (formula "31"))
                           (rule "polySimp_mulComm0" (formula "31") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "31") (term "1,0"))
                           (rule "polySimp_mulAssoc" (formula "31") (term "0,1,0"))
                           (rule "polySimp_mulComm0" (formula "31") (term "0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "31") (term "0,1,0"))
                           (rule "polySimp_elimOne" (formula "31") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "31") (term "0"))
                           (rule "inEqSimp_homoInEq0" (formula "37") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "37") (term "1,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "37") (term "1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "37") (term "0,1,0,1,1,0"))
                           (rule "polySimp_addAssoc" (formula "37") (term "0,1,1,0"))
                           (rule "applyEq" (formula "65") (term "1,0") (ifseqformula "23"))
                           (rule "close" (formula "65") (ifseqformula "34"))
                        )
                        (branch "Case 2"
                           (rule "andRight" (formula "65"))
                           (branch "Case 1"
                              (rule "translateJavaSubInt" (formula "65") (term "1"))
                              (rule "polySimp_homoEq" (formula "11") (term "0"))
                              (rule "polySimp_homoEq" (formula "4") (term "1,1,0"))
                              (rule "polySimp_elimSub" (formula "65") (term "1"))
                              (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1,0,1,1,0"))
                              (rule "polySimp_addComm0" (formula "65") (term "1"))
                              (rule "close" (formula "65") (ifseqformula "35"))
                           )
                           (branch "Case 2"
                              (rule "andRight" (formula "65"))
                              (branch "Case 1"
                                 (rule "andRight" (formula "65"))
                                 (branch "Case 1"
                                    (rule "andRight" (formula "65"))
                                    (branch "Case 1"
                                       (rule "andRight" (formula "65"))
                                       (branch "Case 1"
                                          (rule "andRight" (formula "65"))
                                          (branch "Case 1"
                                             (rule "andRight" (formula "65"))
                                             (branch "Case 1"
                                                (rule "andRight" (formula "65"))
                                                (branch "Case 1"
                                                   (rule "andRight" (formula "65"))
                                                   (branch "Case 1"
                                                      (rule "andRight" (formula "65"))
                                                      (branch "Case 1"
                                                         (rule "andRight" (formula "65"))
                                                         (branch "Case 1"
                                                            (rule "andRight" (formula "65"))
                                                            (branch "Case 1"
                                                               (rule "andRight" (formula "65"))
                                                               (branch "Case 1"
                                                                  (rule "andRight" (formula "65"))
                                                                  (branch "Case 1"
                                                                     (rule "andRight" (formula "65"))
                                                                     (branch "Case 1"
                                                                        (rule "andRight" (formula "65"))
                                                                        (branch "Case 1"
                                                                           (rule "andRight" (formula "65"))
                                                                           (branch "Case 1"
                                                                              (rule "andRight" (formula "65"))
                                                                              (branch "Case 1"
                                                                                 (rule "andRight" (formula "65"))
                                                                                 (branch "Case 1"
                                                                                    (rule "andRight" (formula "65"))
                                                                                    (branch "Case 1"
                                                                                       (rule "andRight" (formula "65"))
                                                                                       (branch "Case 1"
                                                                                          (rule "andRight" (formula "65"))
                                                                                          (branch "Case 1"
                                                                                             (rule "ifthenelse_split" (formula "65") (term "0,1") (userinteraction))
                                                                                             (branch "first_is_current_swap_0 = TRUE TRUE"
                                                                                                (rule "replace_known_left" (formula "12") (term "0,1,0,0,0") (ifseqformula "1"))
                                                                                                 (builtin "One Step Simplification" (formula "12"))
                                                                                                (rule "replace_known_left" (formula "8") (term "0,2,0") (ifseqformula "1"))
                                                                                                 (builtin "One Step Simplification" (formula "8"))
                                                                                                (rule "polySimp_homoEq" (formula "5") (term "1,1,0"))
                                                                                                (rule "polySimp_homoEq" (formula "12") (term "0"))
                                                                                                (rule "polySimp_mulComm0" (formula "5") (term "1,0,1,1,0"))
                                                                                                (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                                                                                                (rule "polySimp_rightDist" (formula "5") (term "1,0,1,1,0"))
                                                                                                (rule "polySimp_mulComm0" (formula "5") (term "0,1,0,1,1,0"))
                                                                                                (rule "polySimp_addComm1" (formula "5") (term "0,1,1,0"))
                                                                                                (rule "polySimp_rightDist" (formula "12") (term "1,0,0"))
                                                                                                (rule "polySimp_mulComm0" (formula "12") (term "0,1,0,0"))
                                                                                                (rule "disjointDefinition" (formula "66"))
                                                                                                 (builtin "One Step Simplification" (formula "66") (ifInst ""  (formula "39")))
                                                                                                (rule "closeTrue" (formula "66"))
                                                                                             )
                                                                                             (branch "first_is_current_swap_0 = TRUE FALSE"
                                                                                                (rule "replace_known_right" (formula "7") (term "0,2,0") (ifseqformula "65"))
                                                                                                 (builtin "One Step Simplification" (formula "7"))
                                                                                                (rule "replace_known_right" (formula "11") (term "0,1,0,0,0") (ifseqformula "65"))
                                                                                                 (builtin "One Step Simplification" (formula "11"))
                                                                                                (rule "polySimp_homoEq" (formula "4") (term "1,1,0"))
                                                                                                (rule "polySimp_homoEq" (formula "11") (term "0"))
                                                                                                (rule "polySimp_mulComm0" (formula "4") (term "1,0,1,1,0"))
                                                                                                (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                                                                                                (rule "polySimp_rightDist" (formula "4") (term "1,0,1,1,0"))
                                                                                                (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,1,1,0"))
                                                                                                (rule "polySimp_addComm1" (formula "4") (term "0,1,1,0"))
                                                                                                (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
                                                                                                (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
                                                                                                (rule "disjointDefinition" (formula "66"))
                                                                                                 (builtin "One Step Simplification" (formula "66") (ifInst ""  (formula "39")))
                                                                                                (rule "closeTrue" (formula "66"))
                                                                                             )
                                                                                          )
                                                                                          (branch "Case 2"
                                                                                             (rule "ifthenelse_split" (formula "65") (term "0,1") (userinteraction))
                                                                                             (branch "first_is_current_swap_0 = TRUE TRUE"
                                                                                                (rule "replace_known_left" (formula "12") (term "0,1,0,0,0") (ifseqformula "1"))
                                                                                                 (builtin "One Step Simplification" (formula "12"))
                                                                                                (rule "replace_known_left" (formula "8") (term "0,2,0") (ifseqformula "1"))
                                                                                                 (builtin "One Step Simplification" (formula "8"))
                                                                                                (rule "polySimp_homoEq" (formula "5") (term "1,1,0"))
                                                                                                (rule "polySimp_homoEq" (formula "12") (term "0"))
                                                                                                (rule "polySimp_mulComm0" (formula "5") (term "1,0,1,1,0"))
                                                                                                (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                                                                                                (rule "polySimp_rightDist" (formula "5") (term "1,0,1,1,0"))
                                                                                                (rule "polySimp_mulComm0" (formula "5") (term "0,1,0,1,1,0"))
                                                                                                (rule "polySimp_addComm1" (formula "5") (term "0,1,1,0"))
                                                                                                (rule "polySimp_rightDist" (formula "12") (term "1,0,0"))
                                                                                                (rule "polySimp_mulComm0" (formula "12") (term "0,1,0,0"))
                                                                                                (rule "disjointDefinition" (formula "66"))
                                                                                                 (builtin "One Step Simplification" (formula "66") (ifInst ""  (formula "40")))
                                                                                                (rule "closeTrue" (formula "66"))
                                                                                             )
                                                                                             (branch "first_is_current_swap_0 = TRUE FALSE"
                                                                                                (rule "replace_known_right" (formula "7") (term "0,2,0") (ifseqformula "65"))
                                                                                                 (builtin "One Step Simplification" (formula "7"))
                                                                                                (rule "replace_known_right" (formula "11") (term "0,1,0,0,0") (ifseqformula "65"))
                                                                                                 (builtin "One Step Simplification" (formula "11"))
                                                                                                (rule "polySimp_homoEq" (formula "4") (term "1,1,0"))
                                                                                                (rule "polySimp_homoEq" (formula "11") (term "0"))
                                                                                                (rule "polySimp_mulComm0" (formula "4") (term "1,0,1,1,0"))
                                                                                                (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                                                                                                (rule "polySimp_rightDist" (formula "4") (term "1,0,1,1,0"))
                                                                                                (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,1,1,0"))
                                                                                                (rule "polySimp_addComm1" (formula "4") (term "0,1,1,0"))
                                                                                                (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
                                                                                                (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
                                                                                                (rule "disjointDefinition" (formula "66"))
                                                                                                 (builtin "One Step Simplification" (formula "66") (ifInst ""  (formula "38")))
                                                                                                (rule "closeTrue" (formula "66"))
                                                                                             )
                                                                                          )
                                                                                       )
                                                                                       (branch "Case 2"
                                                                                          (rule "polySimp_homoEq" (formula "4") (term "1,1,0"))
                                                                                          (rule "polySimp_homoEq" (formula "11") (term "0"))
                                                                                          (rule "polySimp_mulComm0" (formula "4") (term "1,0,1,1,0"))
                                                                                          (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                                                                                          (rule "polySimp_rightDist" (formula "4") (term "1,0,1,1,0"))
                                                                                          (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,1,1,0"))
                                                                                          (rule "polySimp_addComm1" (formula "4") (term "0,1,1,0"))
                                                                                          (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
                                                                                          (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
                                                                                          (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,1,0"))
                                                                                          (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
                                                                                          (rule "polySimp_addComm1" (formula "11") (term "0,0,0"))
                                                                                          (rule "disjointDefinition" (formula "65"))
                                                                                           (builtin "One Step Simplification" (formula "65") (ifInst ""  (formula "40")))
                                                                                          (rule "closeTrue" (formula "65"))
                                                                                       )
                                                                                    )
                                                                                    (branch "Case 2"
                                                                                       (rule "polySimp_homoEq" (formula "4") (term "1,1,0"))
                                                                                       (rule "polySimp_homoEq" (formula "11") (term "0"))
                                                                                       (rule "polySimp_mulComm0" (formula "4") (term "1,0,1,1,0"))
                                                                                       (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                                                                                       (rule "polySimp_rightDist" (formula "4") (term "1,0,1,1,0"))
                                                                                       (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,1,1,0"))
                                                                                       (rule "polySimp_addComm1" (formula "4") (term "0,1,1,0"))
                                                                                       (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
                                                                                       (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
                                                                                       (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,1,0"))
                                                                                       (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
                                                                                       (rule "polySimp_addComm1" (formula "11") (term "0,0,0"))
                                                                                       (rule "disjointDefinition" (formula "65"))
                                                                                        (builtin "One Step Simplification" (formula "65"))
                                                                                       (rule "notRight" (formula "65"))
                                                                                       (rule "eqSymm" (formula "1"))
                                                                                       (rule "close" (formula "42") (ifseqformula "1"))
                                                                                    )
                                                                                 )
                                                                                 (branch "Case 2"
                                                                                    (rule "polySimp_homoEq" (formula "4") (term "1,1,0"))
                                                                                    (rule "polySimp_homoEq" (formula "11") (term "0"))
                                                                                    (rule "polySimp_mulComm0" (formula "4") (term "1,0,1,1,0"))
                                                                                    (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                                                                                    (rule "polySimp_rightDist" (formula "4") (term "1,0,1,1,0"))
                                                                                    (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,1,1,0"))
                                                                                    (rule "polySimp_addComm1" (formula "4") (term "0,1,1,0"))
                                                                                    (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
                                                                                    (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
                                                                                    (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,1,0"))
                                                                                    (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
                                                                                    (rule "polySimp_addComm1" (formula "11") (term "0,0,0"))
                                                                                    (rule "disjointDefinition" (formula "65"))
                                                                                     (builtin "One Step Simplification" (formula "65"))
                                                                                    (rule "notRight" (formula "65"))
                                                                                    (rule "eqSymm" (formula "1"))
                                                                                    (rule "close" (formula "43") (ifseqformula "1"))
                                                                                 )
                                                                              )
                                                                              (branch "Case 2"
                                                                                 (rule "polySimp_homoEq" (formula "4") (term "1,1,0"))
                                                                                 (rule "polySimp_homoEq" (formula "11") (term "0"))
                                                                                 (rule "polySimp_mulComm0" (formula "4") (term "1,0,1,1,0"))
                                                                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                                                                                 (rule "polySimp_rightDist" (formula "4") (term "1,0,1,1,0"))
                                                                                 (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,1,1,0"))
                                                                                 (rule "polySimp_addComm1" (formula "4") (term "0,1,1,0"))
                                                                                 (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
                                                                                 (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
                                                                                 (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,1,0"))
                                                                                 (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
                                                                                 (rule "polySimp_addComm1" (formula "11") (term "0,0,0"))
                                                                                 (rule "disjointDefinition" (formula "65"))
                                                                                  (builtin "One Step Simplification" (formula "65"))
                                                                                 (rule "notRight" (formula "65"))
                                                                                 (rule "eqSymm" (formula "1"))
                                                                                 (rule "close" (formula "44") (ifseqformula "1"))
                                                                              )
                                                                           )
                                                                           (branch "Case 2"
                                                                              (rule "polySimp_homoEq" (formula "11") (term "0"))
                                                                              (rule "polySimp_homoEq" (formula "4") (term "1,1,0"))
                                                                              (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                                                                              (rule "polySimp_mulComm0" (formula "4") (term "1,0,1,1,0"))
                                                                              (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
                                                                              (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
                                                                              (rule "polySimp_rightDist" (formula "4") (term "1,0,1,1,0"))
                                                                              (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,1,1,0"))
                                                                              (rule "polySimp_addComm1" (formula "4") (term "0,1,1,0"))
                                                                              (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
                                                                              (rule "polySimp_addComm1" (formula "11") (term "0,0,0"))
                                                                              (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,1,0"))
                                                                              (rule "disjointDefinition" (formula "65"))
                                                                               (builtin "One Step Simplification" (formula "65"))
                                                                              (rule "notRight" (formula "65"))
                                                                              (rule "eqSymm" (formula "1"))
                                                                              (rule "inEqSimp_ltToLeq" (formula "38") (term "0,0,0"))
                                                                              (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,0,0"))
                                                                              (rule "inEqSimp_ltToLeq" (formula "34"))
                                                                              (rule "polySimp_mulComm0" (formula "34") (term "1,0,0"))
                                                                              (rule "polySimp_addComm1" (formula "34") (term "0"))
                                                                              (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0"))
                                                                              (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
                                                                              (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,0"))
                                                                              (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,0"))
                                                                              (rule "inEqSimp_ltToLeq" (formula "7"))
                                                                              (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                                                                              (rule "polySimp_addComm1" (formula "7") (term "0"))
                                                                              (rule "inEqSimp_homoInEq0" (formula "38") (term "1,1,0"))
                                                                              (rule "polySimp_mulComm0" (formula "38") (term "1,0,1,1,0"))
                                                                              (rule "polySimp_rightDist" (formula "38") (term "1,0,1,1,0"))
                                                                              (rule "polySimp_mulComm0" (formula "38") (term "0,1,0,1,1,0"))
                                                                              (rule "polySimp_addAssoc" (formula "38") (term "0,1,1,0"))
                                                                              (rule "inEqSimp_homoInEq0" (formula "32"))
                                                                              (rule "polySimp_mulComm0" (formula "32") (term "1,0"))
                                                                              (rule "polySimp_rightDist" (formula "32") (term "1,0"))
                                                                              (rule "polySimp_mulAssoc" (formula "32") (term "0,1,0"))
                                                                              (rule "polySimp_mulComm0" (formula "32") (term "0,0,1,0"))
                                                                              (rule "polySimp_mulLiterals" (formula "32") (term "0,1,0"))
                                                                              (rule "polySimp_elimOne" (formula "32") (term "0,1,0"))
                                                                              (rule "polySimp_addAssoc" (formula "32") (term "0"))
                                                                              (rule "polySimp_sepNegMonomial" (formula "12") (term "0"))
                                                                              (rule "polySimp_mulLiterals" (formula "12") (term "0,0"))
                                                                              (rule "polySimp_elimOne" (formula "12") (term "0,0"))
                                                                              (rule "polySimp_sepPosMonomial" (formula "5") (term "1,1,0"))
                                                                              (rule "polySimp_mulComm0" (formula "5") (term "1,1,1,0"))
                                                                              (rule "polySimp_rightDist" (formula "5") (term "1,1,1,0"))
                                                                              (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,1,0"))
                                                                              (rule "polySimp_elimOne" (formula "5") (term "1,1,1,1,0"))
                                                                              (rule "polySimp_rightDist" (formula "5") (term "0,1,1,1,0"))
                                                                              (rule "polySimp_mulLiterals" (formula "5") (term "1,0,1,1,1,0"))
                                                                              (rule "polySimp_elimOne" (formula "5") (term "1,0,1,1,1,0"))
                                                                              (rule "polySimp_mulComm0" (formula "5") (term "0,0,1,1,1,0"))
                                                                              (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0"))
                                                                              (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0"))
                                                                              (rule "polySimp_rightDist" (formula "38") (term "1,0,0,0"))
                                                                              (rule "mul_literals" (formula "38") (term "0,1,0,0,0"))
                                                                              (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0,0"))
                                                                              (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0,0"))
                                                                              (rule "inEqSimp_sepNegMonomial0" (formula "34"))
                                                                              (rule "polySimp_mulLiterals" (formula "34") (term "0"))
                                                                              (rule "polySimp_elimOne" (formula "34") (term "0"))
                                                                              (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                                                                              (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
                                                                              (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0"))
                                                                              (rule "mul_literals" (formula "9") (term "0,1,0,0,0"))
                                                                              (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0"))
                                                                              (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0"))
                                                                              (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
                                                                              (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0"))
                                                                              (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0"))
                                                                              (rule "mul_literals" (formula "5") (term "0,1,0,0,0"))
                                                                              (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0"))
                                                                              (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,0"))
                                                                              (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                                                                              (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                                                                              (rule "polySimp_elimOne" (formula "7") (term "0"))
                                                                              (rule "inEqSimp_sepNegMonomial1" (formula "38") (term "1,1,0"))
                                                                              (rule "polySimp_mulLiterals" (formula "38") (term "0,1,1,0"))
                                                                              (rule "polySimp_elimOne" (formula "38") (term "0,1,1,0"))
                                                                              (rule "inEqSimp_sepNegMonomial1" (formula "32"))
                                                                              (rule "polySimp_mulLiterals" (formula "32") (term "0"))
                                                                              (rule "polySimp_elimOne" (formula "32") (term "0"))
                                                                              (rule "nnf_imp2or" (formula "9") (term "0"))
                                                                              (rule "nnf_imp2or" (formula "5") (term "0"))
                                                                              (rule "nnf_imp2or" (formula "38") (term "0"))
                                                                              (rule "nnf_notAnd" (formula "9") (term "0,0"))
                                                                              (rule "inEqSimp_notLeq" (formula "9") (term "0,0,0"))
                                                                              (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0"))
                                                                              (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0"))
                                                                              (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0,0"))
                                                                              (rule "add_literals" (formula "9") (term "0,0,0,0,0,0"))
                                                                              (rule "add_zero_left" (formula "9") (term "0,0,0,0,0"))
                                                                              (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0,0"))
                                                                              (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0"))
                                                                              (rule "polySimp_elimOne" (formula "9") (term "1,0,0,0"))
                                                                              (rule "inEqSimp_notGeq" (formula "9") (term "1,0,0"))
                                                                              (rule "mul_literals" (formula "9") (term "1,0,0,1,0,0"))
                                                                              (rule "add_zero_right" (formula "9") (term "0,0,1,0,0"))
                                                                              (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                                                                              (rule "mul_literals" (formula "9") (term "1,1,0,0"))
                                                                              (rule "nnf_notAnd" (formula "5") (term "0,0"))
                                                                              (rule "inEqSimp_notLeq" (formula "5") (term "0,0,0"))
                                                                              (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,0,0"))
                                                                              (rule "mul_literals" (formula "5") (term "0,1,0,0,0,0,0"))
                                                                              (rule "polySimp_addAssoc" (formula "5") (term "0,0,0,0,0"))
                                                                              (rule "add_literals" (formula "5") (term "0,0,0,0,0,0"))
                                                                              (rule "add_zero_left" (formula "5") (term "0,0,0,0,0"))
                                                                              (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "0,0,0"))
                                                                              (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,0"))
                                                                              (rule "polySimp_elimOne" (formula "5") (term "1,0,0,0"))
                                                                              (rule "inEqSimp_notGeq" (formula "5") (term "1,0,0"))
                                                                              (rule "times_zero_1" (formula "5") (term "1,0,0,1,0,0"))
                                                                              (rule "add_zero_right" (formula "5") (term "0,0,1,0,0"))
                                                                              (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
                                                                              (rule "mul_literals" (formula "5") (term "1,1,0,0"))
                                                                              (rule "nnf_notAnd" (formula "38") (term "0,0"))
                                                                              (rule "inEqSimp_notLeq" (formula "38") (term "0,0,0"))
                                                                              (rule "polySimp_rightDist" (formula "38") (term "1,0,0,0,0,0"))
                                                                              (rule "mul_literals" (formula "38") (term "0,1,0,0,0,0,0"))
                                                                              (rule "polySimp_addAssoc" (formula "38") (term "0,0,0,0,0"))
                                                                              (rule "add_literals" (formula "38") (term "0,0,0,0,0,0"))
                                                                              (rule "add_zero_left" (formula "38") (term "0,0,0,0,0"))
                                                                              (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "0,0,0"))
                                                                              (rule "polySimp_mulLiterals" (formula "38") (term "1,0,0,0"))
                                                                              (rule "polySimp_elimOne" (formula "38") (term "1,0,0,0"))
                                                                              (rule "inEqSimp_notGeq" (formula "38") (term "1,0,0"))
                                                                              (rule "mul_literals" (formula "38") (term "1,0,0,1,0,0"))
                                                                              (rule "add_zero_right" (formula "38") (term "0,0,1,0,0"))
                                                                              (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0"))
                                                                              (rule "mul_literals" (formula "38") (term "1,1,0,0"))
                                                                              (rule "Definition_axiom_for_isClassOfSlice_in_de_wiesler_Classifier" (formula "37") (term "0") (inst "i=i"))
                                                                               (builtin "One Step Simplification" (formula "37"))
                                                                              (rule "inEqSimp_ltToLeq" (formula "37") (term "1,0,0"))
                                                                              (rule "mul_literals" (formula "37") (term "1,0,0,1,0,0"))
                                                                              (rule "add_literals" (formula "37") (term "0,0,1,0,0"))
                                                                              (rule "inEqSimp_commuteLeq" (formula "37") (term "0,0,0"))
                                                                              (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0,0"))
                                                                              (rule "mul_literals" (formula "37") (term "1,1,0,0"))
                                                                              (rule "nnf_imp2or" (formula "37") (term "0"))
                                                                              (rule "nnf_notAnd" (formula "37") (term "0,0"))
                                                                              (rule "inEqSimp_notLeq" (formula "37") (term "1,0,0"))
                                                                              (rule "mul_literals" (formula "37") (term "1,0,0,1,0,0"))
                                                                              (rule "add_literals" (formula "37") (term "0,0,1,0,0"))
                                                                              (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "1,0,0"))
                                                                              (rule "mul_literals" (formula "37") (term "1,1,0,0"))
                                                                              (rule "inEqSimp_notGeq" (formula "37") (term "0,0,0"))
                                                                              (rule "times_zero_1" (formula "37") (term "1,0,0,0,0,0"))
                                                                              (rule "add_zero_right" (formula "37") (term "0,0,0,0,0"))
                                                                              (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "0,0,0"))
                                                                              (rule "mul_literals" (formula "37") (term "1,0,0,0"))
                                                                              (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "11"))
                                                                               (builtin "One Step Simplification" (formula "11"))
                                                                              (rule "translateJavaSubInt" (formula "11") (term "0,2,1,1,0"))
                                                                              (rule "translateJavaSubInt" (formula "11") (term "0,2,0,1,0"))
                                                                              (rule "translateJavaMulInt" (formula "11") (term "1,1,1,0,0,0,0"))
                                                                              (rule "andLeft" (formula "11"))
                                                                              (rule "andLeft" (formula "11"))
                                                                              (rule "andLeft" (formula "11"))
                                                                              (rule "andLeft" (formula "11"))
                                                                              (rule "andLeft" (formula "11"))
                                                                              (rule "andLeft" (formula "11"))
                                                                              (rule "andLeft" (formula "11"))
                                                                              (rule "andLeft" (formula "13"))
                                                                              (rule "notLeft" (formula "12"))
                                                                              (rule "notLeft" (formula "11"))
                                                                              (rule "eqSymm" (formula "16"))
                                                                              (rule "eqSymm" (formula "13"))
                                                                              (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "46"))
                                                                               (builtin "One Step Simplification" (formula "2"))
                                                                              (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "45"))
                                                                               (builtin "One Step Simplification" (formula "3"))
                                                                              (rule "polySimp_elimSub" (formula "16") (term "0,2,0"))
                                                                              (rule "mul_literals" (formula "16") (term "1,0,2,0"))
                                                                              (rule "eqSymm" (formula "16"))
                                                                              (rule "polySimp_elimSub" (formula "16") (term "0,2,0"))
                                                                              (rule "mul_literals" (formula "16") (term "1,0,2,0"))
                                                                              (rule "eqSymm" (formula "16"))
                                                                              (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
                                                                              (rule "polySimp_addComm0" (formula "16") (term "0,2,1"))
                                                                              (rule "polySimp_addComm0" (formula "16") (term "0,2,0"))
                                                                              (rule "inEqSimp_commuteLeq" (formula "11"))
                                                                              (rule "applyEq" (formula "11") (term "0") (ifseqformula "30"))
                                                                              (rule "applyEq" (formula "12") (term "0") (ifseqformula "30"))
                                                                              (rule "applyEq" (formula "13") (term "1") (ifseqformula "30"))
                                                                              (rule "pullOutSelect" (formula "16") (term "1") (inst "selectSK=arr_0"))
                                                                              (rule "simplifySelectOfAnon" (formula "16"))
                                                                               (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "47")) (ifInst ""  (formula "2")))
                                                                              (rule "simplifySelectOfAnon" (formula "17"))
                                                                               (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "47")) (ifInst ""  (formula "2")))
                                                                              (rule "elementOfUnion" (formula "16") (term "0,0"))
                                                                              (rule "elementOfArrayRangeConcrete" (formula "16") (term "1,0,0"))
                                                                              (rule "replace_known_right" (formula "16") (term "0,0,1,0,0") (ifseqformula "52"))
                                                                               (builtin "One Step Simplification" (formula "16"))
                                                                              (rule "elementOfUnion" (formula "17") (term "0,0"))
                                                                              (rule "elementOfArrayRangeConcrete" (formula "17") (term "1,0,0"))
                                                                              (rule "replace_known_right" (formula "17") (term "0,0,1,0,0") (ifseqformula "52"))
                                                                               (builtin "One Step Simplification" (formula "17"))
                                                                              (rule "elementOfUnion" (formula "16") (term "0,0"))
                                                                               (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "66")))
                                                                              (rule "elementOfUnion" (formula "17") (term "0,0"))
                                                                               (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "66")))
                                                                              (rule "elementOfUnion" (formula "16") (term "0,0"))
                                                                               (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "61")))
                                                                              (rule "elementOfUnion" (formula "17") (term "0,0"))
                                                                               (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "61")))
                                                                              (rule "elementOfUnion" (formula "16") (term "0,0"))
                                                                               (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "64")) (ifInst ""  (formula "57")))
                                                                              (rule "applyEqReverse" (formula "17") (term "1") (ifseqformula "16"))
                                                                              (rule "hideAuxiliaryEq" (formula "16"))
                                                                              (rule "elementOfUnion" (formula "16") (term "0,0"))
                                                                               (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "63")) (ifInst ""  (formula "56")))
                                                                              (rule "inEqSimp_exactShadow3" (formula "40") (ifseqformula "12"))
                                                                              (rule "polySimp_rightDist" (formula "40") (term "0,0"))
                                                                              (rule "mul_literals" (formula "40") (term "0,0,0"))
                                                                              (rule "polySimp_addComm1" (formula "40") (term "0"))
                                                                              (rule "add_literals" (formula "40") (term "0,0"))
                                                                              (rule "inEqSimp_sepNegMonomial1" (formula "40"))
                                                                              (rule "polySimp_mulLiterals" (formula "40") (term "0"))
                                                                              (rule "polySimp_elimOne" (formula "40") (term "0"))
                                                                              (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "12"))
                                                                              (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                                                                              (rule "mul_literals" (formula "7") (term "0,0,0"))
                                                                              (rule "polySimp_addComm1" (formula "7") (term "0"))
                                                                              (rule "add_literals" (formula "7") (term "0,0"))
                                                                              (rule "inEqSimp_sepNegMonomial1" (formula "7"))
                                                                              (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                                                                              (rule "polySimp_elimOne" (formula "7") (term "0"))
                                                                              (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "30"))
                                                                               (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "47")) (ifInst ""  (formula "48")) (ifInst ""  (formula "15")))
                                                                              (rule "translateJavaSubInt" (formula "30") (term "0,2,1,1,0"))
                                                                              (rule "translateJavaMulInt" (formula "30") (term "1,1,1,0,0,0"))
                                                                              (rule "translateJavaSubInt" (formula "30") (term "0,2,0,1,0"))
                                                                              (rule "andLeft" (formula "30"))
                                                                              (rule "andLeft" (formula "30"))
                                                                              (rule "andLeft" (formula "30"))
                                                                              (rule "andLeft" (formula "30"))
                                                                              (rule "andLeft" (formula "30"))
                                                                              (rule "eqSymm" (formula "34"))
                                                                              (rule "eqSymm" (formula "32"))
                                                                              (rule "polySimp_elimSub" (formula "34") (term "0,2,1"))
                                                                              (rule "mul_literals" (formula "34") (term "1,0,2,1"))
                                                                              (rule "polySimp_elimSub" (formula "34") (term "0,2,0"))
                                                                              (rule "mul_literals" (formula "34") (term "1,0,2,0"))
                                                                              (rule "polySimp_mulComm0" (formula "32") (term "1,0"))
                                                                              (rule "polySimp_addComm0" (formula "34") (term "0,2,1"))
                                                                              (rule "polySimp_addComm0" (formula "34") (term "0,2,0"))
                                                                              (rule "inEqSimp_commuteLeq" (formula "30"))
                                                                              (rule "applyEq" (formula "14") (term "0") (ifseqformula "32"))
                                                                              (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "11") (inst "b=b"))
                                                                               (builtin "One Step Simplification" (formula "11"))
                                                                              (rule "translateJavaMulInt" (formula "11") (term "0,1,1,0,0,0,0"))
                                                                              (rule "translateJavaAddInt" (formula "11") (term "1,1,0,0"))
                                                                              (rule "translateJavaCastInt" (formula "11") (term "0,1,0,1,0,0,0"))
                                                                              (rule "translateJavaCastInt" (formula "11") (term "1,1,0,0,1,0,0,0"))
                                                                              (rule "translateJavaMulInt" (formula "11") (term "1,0,1,0,0,0,0"))
                                                                              (rule "translateJavaCastInt" (formula "11") (term "0,0,1,0"))
                                                                              (rule "andLeft" (formula "11"))
                                                                              (rule "andLeft" (formula "11"))
                                                                              (rule "andLeft" (formula "12"))
                                                                              (rule "andLeft" (formula "11"))
                                                                              (rule "andLeft" (formula "11"))
                                                                              (rule "andLeft" (formula "11"))
                                                                              (rule "andLeft" (formula "13"))
                                                                              (rule "andLeft" (formula "12"))
                                                                              (rule "notLeft" (formula "11"))
                                                                              (rule "andLeft" (formula "13"))
                                                                              (rule "andLeft" (formula "13"))
                                                                              (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "59"))
                                                                               (builtin "One Step Simplification" (formula "4"))
                                                                              (rule "polySimp_mulComm0" (formula "11") (term "1"))
                                                                              (rule "polySimp_mulComm0" (formula "12") (term "0"))
                                                                              (rule "polySimp_addComm0" (formula "17") (term "1"))
                                                                              (rule "castedGetAny" (formula "18") (term "0"))
                                                                              (rule "castedGetAny" (formula "15") (term "0"))
                                                                              (rule "castedGetAny" (formula "14") (term "1"))
                                                                              (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                                                                              (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                                                                              (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                                                                              (rule "inEqSimp_commuteLeq" (formula "13"))
                                                                              (rule "inEqSimp_commuteLeq" (formula "11"))
                                                                              (rule "inEqSimp_commuteLeq" (formula "14"))
                                                                              (rule "applyEq" (formula "14") (term "0") (ifseqformula "55"))
                                                                              (rule "inEqSimp_commuteGeq" (formula "14"))
                                                                              (rule "applyEq" (formula "14") (term "0") (ifseqformula "54"))
                                                                              (rule "inEqSimp_homoInEq0" (formula "14"))
                                                                              (rule "polySimp_mulComm0" (formula "14") (term "1,0"))
                                                                              (rule "polySimp_rightDist" (formula "14") (term "1,0"))
                                                                              (rule "polySimp_mulAssoc" (formula "14") (term "0,1,0"))
                                                                              (rule "polySimp_mulComm0" (formula "14") (term "0,0,1,0"))
                                                                              (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0"))
                                                                              (rule "polySimp_elimOne" (formula "14") (term "0,1,0"))
                                                                              (rule "polySimp_addAssoc" (formula "14") (term "0"))
                                                                              (rule "applyEq" (formula "37") (term "0") (ifseqformula "42"))
                                                                              (rule "applyEq" (formula "37") (term "0") (ifseqformula "41"))
                                                                              (rule "applyEq" (formula "37") (term "1") (ifseqformula "40"))
                                                                              (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                                                                              (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
                                                                              (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
                                                                              (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
                                                                              (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
                                                                              (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
                                                                              (rule "inEqSimp_sepNegMonomial1" (formula "14"))
                                                                              (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                                                                              (rule "polySimp_elimOne" (formula "14") (term "0"))
                                                                              (rule "inEqSimp_subsumption6" (formula "11") (ifseqformula "19"))
                                                                              (rule "mul_literals" (formula "11") (term "1,1,0"))
                                                                              (rule "greater_literals" (formula "11") (term "0,0"))
                                                                               (builtin "One Step Simplification" (formula "11"))
                                                                              (rule "leq_literals" (formula "11") (term "0"))
                                                                               (builtin "One Step Simplification" (formula "11"))
                                                                              (rule "true_left" (formula "11"))
                                                                              (rule "inEqSimp_exactShadow2" (formula "18") (ifseqformula "11"))
                                                                              (rule "greater_literals" (formula "18") (term "0"))
                                                                               (builtin "One Step Simplification" (formula "18"))
                                                                              (rule "mul_literals" (formula "18") (term "1,0,0"))
                                                                              (rule "mul_literals" (formula "18") (term "0,0"))
                                                                              (rule "inEqSimp_sepPosMonomial1" (formula "18"))
                                                                              (rule "mul_literals" (formula "18") (term "1"))
                                                                              (rule "inEqSimp_exactShadow2" (formula "50") (ifseqformula "11"))
                                                                              (rule "greater_literals" (formula "50") (term "0"))
                                                                               (builtin "One Step Simplification" (formula "50"))
                                                                              (rule "polySimp_rightDist" (formula "50") (term "1,0,0"))
                                                                              (rule "mul_literals" (formula "50") (term "0,1,0,0"))
                                                                              (rule "polySimp_rightDist" (formula "50") (term "0,0"))
                                                                              (rule "polySimp_mulLiterals" (formula "50") (term "1,0,0"))
                                                                              (rule "mul_literals" (formula "50") (term "0,0,0"))
                                                                              (rule "inEqSimp_sepPosMonomial1" (formula "50"))
                                                                              (rule "polySimp_mulComm0" (formula "50") (term "1"))
                                                                              (rule "polySimp_rightDist" (formula "50") (term "1"))
                                                                              (rule "mul_literals" (formula "50") (term "0,1"))
                                                                              (rule "polySimp_mulLiterals" (formula "50") (term "1,1"))
                                                                              (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "53"))
                                                                              (rule "times_zero_1" (formula "12") (term "0,0"))
                                                                              (rule "add_zero_left" (formula "12") (term "0"))
                                                                              (rule "inEqSimp_sepPosMonomial1" (formula "12"))
                                                                              (rule "polySimp_mulLiterals" (formula "12") (term "1"))
                                                                              (rule "polySimp_elimOne" (formula "12") (term "1"))
                                                                              (rule "inEqSimp_exactShadow2" (formula "8") (ifseqformula "11"))
                                                                              (rule "greater_literals" (formula "8") (term "0"))
                                                                               (builtin "One Step Simplification" (formula "8"))
                                                                              (rule "polySimp_rightDist" (formula "8") (term "1,0,0"))
                                                                              (rule "mul_literals" (formula "8") (term "0,1,0,0"))
                                                                              (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                                                              (rule "mul_literals" (formula "8") (term "0,0,0"))
                                                                              (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                                                                              (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                                                                              (rule "polySimp_mulComm0" (formula "8") (term "1"))
                                                                              (rule "polySimp_rightDist" (formula "8") (term "1"))
                                                                              (rule "mul_literals" (formula "8") (term "0,1"))
                                                                              (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
                                                                              (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "36") (inst "b=b"))
                                                                               (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "57")) (ifInst ""  (formula "14")) (ifInst ""  (formula "17")))
                                                                              (rule "translateJavaMulInt" (formula "36") (term "1,0,0,0,0,0"))
                                                                              (rule "translateJavaAddInt" (formula "36") (term "1,1,0,0"))
                                                                              (rule "translateJavaCastInt" (formula "36") (term "0,1,0"))
                                                                              (rule "translateJavaCastInt" (formula "36") (term "0,1,1,0,0,0"))
                                                                              (rule "translateJavaMulInt" (formula "36") (term "0,1,0,0,0,0"))
                                                                              (rule "translateJavaCastInt" (formula "36") (term "1,1,0,1,0,0,0"))
                                                                              (rule "andLeft" (formula "36"))
                                                                              (rule "andLeft" (formula "36"))
                                                                              (rule "andLeft" (formula "36"))
                                                                              (rule "andLeft" (formula "36"))
                                                                              (rule "andLeft" (formula "37"))
                                                                              (rule "andLeft" (formula "36"))
                                                                              (rule "andLeft" (formula "38"))
                                                                              (rule "polySimp_mulComm0" (formula "37") (term "0"))
                                                                              (rule "polySimp_mulComm0" (formula "36") (term "1"))
                                                                              (rule "polySimp_addComm0" (formula "40") (term "1"))
                                                                              (rule "castedGetAny" (formula "40") (term "0"))
                                                                              (rule "castedGetAny" (formula "39") (term "0"))
                                                                              (rule "castedGetAny" (formula "38") (term "1"))
                                                                              (rule "inEqSimp_ltToLeq" (formula "40") (term "1,0,0"))
                                                                              (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,1,0,0"))
                                                                              (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,0"))
                                                                              (rule "inEqSimp_commuteLeq" (formula "37"))
                                                                              (rule "inEqSimp_commuteLeq" (formula "36"))
                                                                              (rule "inEqSimp_commuteLeq" (formula "37"))
                                                                              (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0"))
                                                                              (rule "polySimp_mulComm0" (formula "39") (term "1,1,0,0"))
                                                                              (rule "polySimp_rightDist" (formula "39") (term "1,1,0,0"))
                                                                              (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1,0,0"))
                                                                              (rule "mul_literals" (formula "39") (term "0,1,1,0,0"))
                                                                              (rule "polySimp_elimOne" (formula "39") (term "1,1,1,0,0"))
                                                                              (rule "applyEq" (formula "37") (term "0") (ifseqformula "56"))
                                                                              (rule "inEqSimp_commuteGeq" (formula "37"))
                                                                              (rule "applyEq" (formula "37") (term "0") (ifseqformula "55"))
                                                                              (rule "inEqSimp_homoInEq0" (formula "37"))
                                                                              (rule "polySimp_mulComm0" (formula "37") (term "1,0"))
                                                                              (rule "polySimp_rightDist" (formula "37") (term "1,0"))
                                                                              (rule "polySimp_mulAssoc" (formula "37") (term "0,1,0"))
                                                                              (rule "polySimp_mulComm0" (formula "37") (term "0,0,1,0"))
                                                                              (rule "polySimp_mulLiterals" (formula "37") (term "0,1,0"))
                                                                              (rule "polySimp_elimOne" (formula "37") (term "0,1,0"))
                                                                              (rule "polySimp_addAssoc" (formula "37") (term "0"))
                                                                              (rule "inEqSimp_sepNegMonomial1" (formula "37"))
                                                                              (rule "polySimp_mulLiterals" (formula "37") (term "0"))
                                                                              (rule "polySimp_elimOne" (formula "37") (term "0"))
                                                                              (rule "inEqSimp_subsumption6" (formula "36") (ifseqformula "20"))
                                                                              (rule "mul_literals" (formula "36") (term "1,1,0"))
                                                                              (rule "greater_literals" (formula "36") (term "0,0"))
                                                                               (builtin "One Step Simplification" (formula "36"))
                                                                              (rule "leq_literals" (formula "36") (term "0"))
                                                                               (builtin "One Step Simplification" (formula "36"))
                                                                              (rule "true_left" (formula "36"))
                                                                              (rule "Definition_axiom_for_isClassOfSlice_in_de_wiesler_Classifier" (formula "10") (term "0") (inst "i=i"))
                                                                               (builtin "One Step Simplification" (formula "10"))
                                                                              (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                                                                              (rule "mul_literals" (formula "10") (term "1,0,0,1,0,0"))
                                                                              (rule "add_literals" (formula "10") (term "0,0,1,0,0"))
                                                                              (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                                                                              (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                                                                              (rule "mul_literals" (formula "10") (term "1,1,0,0"))
                                                                              (rule "Contract_axiom_for_countElement_in_BucketPointers" (formula "26") (term "1,1,0"))
                                                                               (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "87")) (ifInst ""  (formula "83")) (ifInst ""  (formula "29")) (ifInst ""  (formula "32")) (ifInst ""  (formula "85")) (ifInst ""  (formula "44")))
                                                                              (rule "inEqSimp_commuteLeq" (formula "26") (term "1,0,0"))
                                                                              (rule "replace_known_left" (formula "26") (term "1,0,0") (ifseqformula "48"))
                                                                               (builtin "One Step Simplification" (formula "26"))
                                                                              (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
                                                                              (rule "replace_known_left" (formula "26") (term "0,0,0") (ifseqformula "45"))
                                                                               (builtin "One Step Simplification" (formula "26"))
                                                                              (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0"))
                                                                              (rule "replace_known_left" (formula "26") (term "0,0") (ifseqformula "46"))
                                                                               (builtin "One Step Simplification" (formula "26"))
                                                                              (rule "true_left" (formula "26"))
                                                                              (rule "Definition_axiom_for_countElement_in_de_wiesler_BucketPointers" (formula "26") (term "1,1,0"))
                                                                              (rule "translateJavaAddInt" (formula "26") (term "1,1,0"))
                                                                              (rule "polySimp_addAssoc" (formula "26") (term "1,0"))
                                                                              (rule "polySimp_homoEq" (formula "26") (term "0"))
                                                                              (rule "polySimp_addComm1" (formula "26") (term "0,0"))
                                                                              (rule "polySimp_sepPosMonomial" (formula "26") (term "0"))
                                                                              (rule "polySimp_mulComm0" (formula "26") (term "1,0"))
                                                                              (rule "polySimp_rightDist" (formula "26") (term "1,0"))
                                                                              (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0"))
                                                                              (rule "polySimp_elimOne" (formula "26") (term "1,1,0"))
                                                                              (rule "polySimp_rightDist" (formula "26") (term "0,1,0"))
                                                                              (rule "polySimp_rightDist" (formula "26") (term "0,0,1,0"))
                                                                              (rule "polySimp_mulLiterals" (formula "26") (term "1,0,0,1,0"))
                                                                              (rule "polySimp_elimOne" (formula "26") (term "1,0,0,1,0"))
                                                                              (rule "polySimp_mulComm0" (formula "26") (term "0,0,0,1,0"))
                                                                              (rule "nnf_imp2or" (formula "18") (term "0"))
                                                                              (rule "Definition_axiom_for_toReadCountOfBucket_in_de_wiesler_BucketPointers" (formula "11") (term "1,1,0"))
                                                                              (rule "translateJavaSubInt" (formula "11") (term "1,1,1,0"))
                                                                              (rule "polySimp_elimSub" (formula "11") (term "1,1,1,0"))
                                                                              (rule "inEqSimp_ltToLeq" (formula "11") (term "0,1,1,0"))
                                                                              (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,1,0"))
                                                                              (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0"))
                                                                              (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,1,0"))
                                                                              (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0"))
                                                                              (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0"))
                                                                              (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,1,0"))
                                                                              (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0"))
                                                                              (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,1,0"))
                                                                              (rule "Definition_axiom_for_countBucketElementsEverywhere_in_de_wiesler_Permute" (formula "5") (term "1,0,1,1,1,0"))
                                                                              (rule "translateJavaAddInt" (formula "5") (term "1,0,1,1,1,0"))
                                                                              (rule "polySimp_addComm0" (formula "5") (term "0,1,1,1,0"))
                                                                              (rule "polySimp_addComm0" (formula "5") (term "0,0,1,1,1,0"))
                                                                              (rule "Definition_axiom_for_writtenElementsOfBucketClassified_in_de_wiesler_BucketPointers" (formula "5") (term "0,1,0,1,0"))
                                                                               (builtin "One Step Simplification" (formula "5"))
                                                                              (rule "translateJavaAddInt" (formula "5") (term "3,0,2,1,0,1,0"))
                                                                              (rule "translateJavaSubInt" (formula "5") (term "4,0,0,1,1,0,1,0"))
                                                                              (rule "translateJavaAddInt" (formula "5") (term "3,0,0,1,1,0,1,0"))
                                                                              (rule "translateJavaAddInt" (formula "5") (term "4,0,2,1,0,1,0"))
                                                                              (rule "translateJavaSubInt" (formula "5") (term "0,0,0,1,0,1,0"))
                                                                              (rule "translateJavaAddInt" (formula "5") (term "0,4,0,0,1,1,0,1,0"))
                                                                              (rule "polySimp_elimSub" (formula "5") (term "0,0,0,1,0,1,0"))
                                                                              (rule "polySimp_elimSub" (formula "5") (term "4,0,0,1,1,0,1,0"))
                                                                              (rule "mul_literals" (formula "5") (term "1,4,0,0,1,1,0,1,0"))
                                                                              (rule "polySimp_addComm0" (formula "5") (term "0,0,0,1,0,1,0"))
                                                                              (rule "polySimp_addComm1" (formula "5") (term "4,0,0,1,1,0,1,0"))
                                                                              (rule "polySimp_addComm0" (formula "5") (term "0,4,0,0,1,1,0,1,0"))
                                                                              (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,1,0,1,0"))
                                                                              (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,1,0,1,0"))
                                                                              (rule "polySimp_addComm1" (formula "5") (term "0,0,0,1,0,1,0"))
                                                                              (rule "polySimp_addAssoc" (formula "5") (term "0,0,0,0,1,0,1,0"))
                                                                              (rule "inEqSimp_commuteLeq" (formula "5") (term "1,0,1,0,1,0"))
                                                                              (rule "inEqSimp_sepNegMonomial0" (formula "5") (term "0,0,1,0,1,0"))
                                                                              (rule "polySimp_mulLiterals" (formula "5") (term "0,0,0,1,0,1,0"))
                                                                              (rule "polySimp_elimOne" (formula "5") (term "0,0,0,1,0,1,0"))
                                                                              (rule "Definition_axiom_for_elementsToReadOfBucketBlockClassified_in_de_wiesler_BucketPointers" (formula "56") (term "0,0,0,1,0"))
                                                                               (builtin "One Step Simplification" (formula "56"))
                                                                              (rule "translateJavaAddInt" (formula "56") (term "3,0,1,0,0,1,0"))
                                                                              (rule "translateJavaAddInt" (formula "56") (term "4,0,1,0,0,1,0"))
                                                                              (rule "inEqSimp_ltToLeq" (formula "56") (term "0,0,0,1,0"))
                                                                              (rule "polySimp_mulComm0" (formula "56") (term "1,0,0,0,0,0,1,0"))
                                                                              (rule "inEqSimp_sepPosMonomial0" (formula "56") (term "0,0,0,1,0"))
                                                                              (rule "polySimp_mulComm0" (formula "56") (term "1,0,0,0,1,0"))
                                                                              (rule "polySimp_rightDist" (formula "56") (term "1,0,0,0,1,0"))
                                                                              (rule "polySimp_mulLiterals" (formula "56") (term "1,1,0,0,0,1,0"))
                                                                              (rule "mul_literals" (formula "56") (term "0,1,0,0,0,1,0"))
                                                                              (rule "polySimp_elimOne" (formula "56") (term "1,1,0,0,0,1,0"))
                                                                              (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "55") (term "0,1,0"))
                                                                              (rule "commute_or" (formula "11") (term "0,0"))
                                                                              (rule "nnf_imp2or" (formula "36") (term "0"))
                                                                              (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "25"))
                                                                               (builtin "One Step Simplification" (formula "25"))
                                                                              (rule "translateJavaSubInt" (formula "25") (term "3,0,1"))
                                                                              (rule "andLeft" (formula "25"))
                                                                              (rule "andLeft" (formula "25"))
                                                                              (rule "andLeft" (formula "25"))
                                                                              (rule "andLeft" (formula "25"))
                                                                              (rule "andLeft" (formula "27"))
                                                                              (rule "andLeft" (formula "25"))
                                                                              (rule "andLeft" (formula "25"))
                                                                              (rule "andLeft" (formula "27"))
                                                                              (rule "notLeft" (formula "25"))
                                                                              (rule "notLeft" (formula "25"))
                                                                              (rule "polySimp_elimSub" (formula "31") (term "3,0"))
                                                                              (rule "mul_literals" (formula "31") (term "1,3,0"))
                                                                              (rule "polySimp_addComm0" (formula "31") (term "3,0"))
                                                                              (rule "inEqSimp_commuteLeq" (formula "30"))
                                                                              (rule "inEqSimp_commuteLeq" (formula "29"))
                                                                              (rule "inEqSimp_commuteLeq" (formula "28"))
                                                                              (rule "inEqSimp_commuteLeq" (formula "25"))
                                                                              (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "22"))
                                                                              (rule "inEqSimp_commuteGeq" (formula "30"))
                                                                              (rule "applyEq" (formula "23") (term "3,0") (ifseqformula "27"))
                                                                              (rule "applyEq" (formula "31") (term "1,3,0") (ifseqformula "27"))
                                                                              (rule "applyEq" (formula "29") (term "1") (ifseqformula "27"))
                                                                              (rule "applyEq" (formula "24") (term "1,0,2,0") (ifseqformula "27"))
                                                                              (rule "eqSymm" (formula "24"))
                                                                              (rule "applyEq" (formula "44") (term "3,0") (ifseqformula "27"))
                                                                              (rule "applyEq" (formula "43") (term "2,0") (ifseqformula "27"))
                                                                              (rule "applyEq" (formula "43") (term "0,1,0") (ifseqformula "27"))
                                                                              (rule "applyEq" (formula "64") (term "0") (ifseqformula "22"))
                                                                              (rule "applyEq" (formula "31") (term "1,0") (ifseqformula "22"))
                                                                              (rule "applyEq" (formula "28") (term "0") (ifseqformula "27"))
                                                                              (rule "applyEq" (formula "24") (term "1,0,2,0") (ifseqformula "27"))
                                                                              (rule "eqSymm" (formula "24"))
                                                                              (rule "applyEq" (formula "30") (term "0") (ifseqformula "27"))
                                                                              (rule "inEqSimp_exactShadow3" (formula "28") (ifseqformula "30"))
                                                                              (rule "mul_literals" (formula "28") (term "0,0"))
                                                                              (rule "inEqSimp_sepPosMonomial1" (formula "28"))
                                                                              (rule "mul_literals" (formula "28") (term "1"))
                                                                              (rule "nnf_imp2or" (formula "10") (term "0"))
                                                                              (rule "nnf_notAnd" (formula "18") (term "0,0"))
                                                                              (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
                                                                              (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
                                                                              (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
                                                                              (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
                                                                              (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
                                                                              (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
                                                                              (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
                                                                              (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
                                                                              (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
                                                                              (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
                                                                              (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0"))
                                                                              (rule "add_zero_right" (formula "18") (term "0,0,0,0,0"))
                                                                              (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
                                                                              (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                                                                              (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "46"))
                                                                               (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "64")) (ifInst ""  (formula "27")) (ifInst ""  (formula "26")))
                                                                              (rule "translateJavaSubInt" (formula "46") (term "3,0,1"))
                                                                              (rule "andLeft" (formula "46"))
                                                                              (rule "andLeft" (formula "46"))
                                                                              (rule "andLeft" (formula "46"))
                                                                              (rule "andLeft" (formula "46"))
                                                                              (rule "andLeft" (formula "48"))
                                                                              (rule "notLeft" (formula "46"))
                                                                              (rule "polySimp_elimSub" (formula "50") (term "3,0"))
                                                                              (rule "mul_literals" (formula "50") (term "1,3,0"))
                                                                              (rule "polySimp_addComm0" (formula "50") (term "3,0"))
                                                                              (rule "inEqSimp_commuteLeq" (formula "49"))
                                                                              (rule "inEqSimp_commuteLeq" (formula "46"))
                                                                              (rule "inEqSimp_commuteLeq" (formula "46"))
                                                                              (rule "inEqSimp_commuteLeq" (formula "47"))
                                                                              (rule "applyEq" (formula "49") (term "1,3,0") (ifseqformula "27"))
                                                                              (rule "applyEq" (formula "49") (term "1,0") (ifseqformula "22"))
                                                                              (rule "applyEq" (formula "48") (term "1") (ifseqformula "27"))
                                                                              (rule "applyEq" (formula "48") (term "0,0") (ifseqformula "22"))
                                                                              (rule "inEqSimp_commuteGeq" (formula "48"))
                                                                              (rule "Definition_axiom_for_isSortedSeqTransitive_in_de_wiesler_Functions" (formula "17") (term "0") (inst "i=i") (inst "j=j"))
                                                                               (builtin "One Step Simplification" (formula "17"))
                                                                              (rule "translateJavaCastInt" (formula "17") (term "0,1,0,1,0"))
                                                                              (rule "translateJavaCastInt" (formula "17") (term "1,1,0,1,0"))
                                                                              (rule "castedGetAny" (formula "17") (term "0,1,0,1,0"))
                                                                              (rule "castedGetAny" (formula "17") (term "1,1,0,1,0"))
                                                                              (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,1,0"))
                                                                              (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,1,0"))
                                                                              (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                                                                              (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                                                                              (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,1,0"))
                                                                              (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                                                                              (rule "inEqSimp_commuteLeq" (formula "17") (term "1,0,1,0"))
                                                                              (rule "applyEq" (formula "17") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
                                                                              (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                                                                              (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
                                                                              (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
                                                                              (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
                                                                              (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
                                                                              (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
                                                                              (rule "applyEq" (formula "17") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "15"))
                                                                              (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,1,0"))
                                                                              (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0,1,0"))
                                                                              (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0,1,0"))
                                                                              (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,1,0"))
                                                                              (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,1,0"))
                                                                              (rule "add_zero_left" (formula "17") (term "0,0,1,0,0,1,0"))
                                                                              (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                                                                              (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
                                                                              (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
                                                                              (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,1,0"))
                                                                              (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,1,0"))
                                                                              (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,1,0"))
                                                                              (rule "ifthenelse_split" (formula "1") (term "0"))
                                                                              (branch "first_is_current_swap_0 = TRUE TRUE"
                                                                                 (rule "eqSymm" (formula "2"))
                                                                                  (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")))
                                                                                 (rule "eqSymm" (formula "2"))
                                                                                 (rule "close" (formula "78") (ifseqformula "2"))
                                                                              )
                                                                              (branch "first_is_current_swap_0 = TRUE FALSE"
                                                                                 (rule "eqSymm" (formula "1"))
                                                                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "66")) (ifInst ""  (formula "78")))
                                                                                 (rule "closeFalse" (formula "1"))
                                                                              )
                                                                           )
                                                                        )
                                                                        (branch "Case 2"
                                                                           (rule "ifthenelse_split" (formula "65") (term "0,0") (userinteraction))
                                                                           (branch "first_is_current_swap_0 = TRUE TRUE"
                                                                              (rule "replace_known_left" (formula "12") (term "0,1,0,0,0") (ifseqformula "1"))
                                                                               (builtin "One Step Simplification" (formula "12"))
                                                                              (rule "replace_known_left" (formula "8") (term "0,2,0") (ifseqformula "1"))
                                                                               (builtin "One Step Simplification" (formula "8"))
                                                                              (rule "polySimp_homoEq" (formula "5") (term "1,1,0"))
                                                                              (rule "polySimp_homoEq" (formula "12") (term "0"))
                                                                              (rule "polySimp_mulComm0" (formula "5") (term "1,0,1,1,0"))
                                                                              (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                                                                              (rule "polySimp_rightDist" (formula "5") (term "1,0,1,1,0"))
                                                                              (rule "polySimp_mulComm0" (formula "5") (term "0,1,0,1,1,0"))
                                                                              (rule "polySimp_addComm1" (formula "5") (term "0,1,1,0"))
                                                                              (rule "polySimp_rightDist" (formula "12") (term "1,0,0"))
                                                                              (rule "polySimp_mulComm0" (formula "12") (term "0,1,0,0"))
                                                                              (rule "disjointDefinition" (formula "66"))
                                                                               (builtin "One Step Simplification" (formula "66") (ifInst ""  (formula "46")))
                                                                              (rule "closeTrue" (formula "66"))
                                                                           )
                                                                           (branch "first_is_current_swap_0 = TRUE FALSE"
                                                                              (rule "replace_known_right" (formula "7") (term "0,2,0") (ifseqformula "65"))
                                                                               (builtin "One Step Simplification" (formula "7"))
                                                                              (rule "replace_known_right" (formula "11") (term "0,1,0,0,0") (ifseqformula "65"))
                                                                               (builtin "One Step Simplification" (formula "11"))
                                                                              (rule "polySimp_homoEq" (formula "4") (term "1,1,0"))
                                                                              (rule "polySimp_homoEq" (formula "11") (term "0"))
                                                                              (rule "polySimp_mulComm0" (formula "4") (term "1,0,1,1,0"))
                                                                              (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                                                                              (rule "polySimp_rightDist" (formula "4") (term "1,0,1,1,0"))
                                                                              (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,1,1,0"))
                                                                              (rule "polySimp_addComm1" (formula "4") (term "0,1,1,0"))
                                                                              (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
                                                                              (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
                                                                              (rule "disjointDefinition" (formula "66"))
                                                                               (builtin "One Step Simplification" (formula "66") (ifInst ""  (formula "49")))
                                                                              (rule "closeTrue" (formula "66"))
                                                                           )
                                                                        )
                                                                     )
                                                                     (branch "Case 2"
                                                                        (rule "polySimp_homoEq" (formula "4") (term "1,1,0"))
                                                                        (rule "polySimp_homoEq" (formula "11") (term "0"))
                                                                        (rule "polySimp_mulComm0" (formula "4") (term "1,0,1,1,0"))
                                                                        (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                                                                        (rule "polySimp_rightDist" (formula "4") (term "1,0,1,1,0"))
                                                                        (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,1,1,0"))
                                                                        (rule "polySimp_addComm1" (formula "4") (term "0,1,1,0"))
                                                                        (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
                                                                        (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
                                                                        (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,1,0"))
                                                                        (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
                                                                        (rule "polySimp_addComm1" (formula "11") (term "0,0,0"))
                                                                        (rule "disjointDefinition" (formula "65"))
                                                                         (builtin "One Step Simplification" (formula "65"))
                                                                        (rule "notRight" (formula "65"))
                                                                        (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0"))
                                                                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
                                                                        (rule "inEqSimp_ltToLeq" (formula "7"))
                                                                        (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                                                                        (rule "polySimp_addComm1" (formula "7") (term "0"))
                                                                        (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,0"))
                                                                        (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,0"))
                                                                        (rule "inEqSimp_ltToLeq" (formula "34"))
                                                                        (rule "polySimp_mulComm0" (formula "34") (term "1,0,0"))
                                                                        (rule "polySimp_addComm1" (formula "34") (term "0"))
                                                                        (rule "inEqSimp_ltToLeq" (formula "38") (term "0,0,0"))
                                                                        (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,0,0"))
                                                                        (rule "inEqSimp_homoInEq0" (formula "32"))
                                                                        (rule "polySimp_mulComm0" (formula "32") (term "1,0"))
                                                                        (rule "polySimp_rightDist" (formula "32") (term "1,0"))
                                                                        (rule "polySimp_mulAssoc" (formula "32") (term "0,1,0"))
                                                                        (rule "polySimp_mulComm0" (formula "32") (term "0,0,1,0"))
                                                                        (rule "polySimp_mulLiterals" (formula "32") (term "0,1,0"))
                                                                        (rule "polySimp_elimOne" (formula "32") (term "0,1,0"))
                                                                        (rule "polySimp_addAssoc" (formula "32") (term "0"))
                                                                        (rule "inEqSimp_homoInEq0" (formula "38") (term "1,1,0"))
                                                                        (rule "polySimp_mulComm0" (formula "38") (term "1,0,1,1,0"))
                                                                        (rule "polySimp_rightDist" (formula "38") (term "1,0,1,1,0"))
                                                                        (rule "polySimp_mulComm0" (formula "38") (term "0,1,0,1,1,0"))
                                                                        (rule "polySimp_addAssoc" (formula "38") (term "0,1,1,0"))
                                                                        (rule "applyEq" (formula "8") (term "2,0") (ifseqformula "1"))
                                                                        (rule "applyEq" (formula "12") (term "1,0,1,0,0,0,0") (ifseqformula "1"))
                                                                        (rule "polySimp_sepPosMonomial" (formula "5") (term "1,1,0"))
                                                                        (rule "polySimp_mulComm0" (formula "5") (term "1,1,1,0"))
                                                                        (rule "polySimp_rightDist" (formula "5") (term "1,1,1,0"))
                                                                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,1,0"))
                                                                        (rule "polySimp_elimOne" (formula "5") (term "1,1,1,1,0"))
                                                                        (rule "polySimp_rightDist" (formula "5") (term "0,1,1,1,0"))
                                                                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0,1,1,1,0"))
                                                                        (rule "polySimp_elimOne" (formula "5") (term "1,0,1,1,1,0"))
                                                                        (rule "polySimp_mulComm0" (formula "5") (term "0,0,1,1,1,0"))
                                                                        (rule "polySimp_sepNegMonomial" (formula "12") (term "0"))
                                                                        (rule "polySimp_mulLiterals" (formula "12") (term "0,0"))
                                                                        (rule "polySimp_elimOne" (formula "12") (term "0,0"))
                                                                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                                                                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
                                                                        (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0"))
                                                                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0"))
                                                                        (rule "mul_literals" (formula "9") (term "0,1,0,0,0"))
                                                                        (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0"))
                                                                        (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                                                                        (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                                                                        (rule "polySimp_elimOne" (formula "7") (term "0"))
                                                                        (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
                                                                        (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0"))
                                                                        (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0"))
                                                                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0"))
                                                                        (rule "mul_literals" (formula "5") (term "0,1,0,0,0"))
                                                                        (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,0"))
                                                                        (rule "inEqSimp_sepNegMonomial0" (formula "34"))
                                                                        (rule "polySimp_mulLiterals" (formula "34") (term "0"))
                                                                        (rule "polySimp_elimOne" (formula "34") (term "0"))
                                                                        (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0"))
                                                                        (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0"))
                                                                        (rule "polySimp_rightDist" (formula "38") (term "1,0,0,0"))
                                                                        (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0,0"))
                                                                        (rule "mul_literals" (formula "38") (term "0,1,0,0,0"))
                                                                        (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0,0"))
                                                                        (rule "inEqSimp_sepNegMonomial1" (formula "32"))
                                                                        (rule "polySimp_mulLiterals" (formula "32") (term "0"))
                                                                        (rule "polySimp_elimOne" (formula "32") (term "0"))
                                                                        (rule "inEqSimp_sepNegMonomial1" (formula "38") (term "1,1,0"))
                                                                        (rule "polySimp_mulLiterals" (formula "38") (term "0,1,1,0"))
                                                                        (rule "polySimp_elimOne" (formula "38") (term "0,1,1,0"))
                                                                        (rule "nnf_imp2or" (formula "9") (term "0"))
                                                                        (rule "nnf_imp2or" (formula "5") (term "0"))
                                                                        (rule "nnf_imp2or" (formula "38") (term "0"))
                                                                        (rule "nnf_notAnd" (formula "9") (term "0,0"))
                                                                        (rule "inEqSimp_notLeq" (formula "9") (term "0,0,0"))
                                                                        (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0"))
                                                                        (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0"))
                                                                        (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0,0"))
                                                                        (rule "add_literals" (formula "9") (term "0,0,0,0,0,0"))
                                                                        (rule "add_zero_left" (formula "9") (term "0,0,0,0,0"))
                                                                        (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0,0"))
                                                                        (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0"))
                                                                        (rule "polySimp_elimOne" (formula "9") (term "1,0,0,0"))
                                                                        (rule "inEqSimp_notGeq" (formula "9") (term "1,0,0"))
                                                                        (rule "times_zero_1" (formula "9") (term "1,0,0,1,0,0"))
                                                                        (rule "add_zero_right" (formula "9") (term "0,0,1,0,0"))
                                                                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                                                                        (rule "mul_literals" (formula "9") (term "1,1,0,0"))
                                                                        (rule "nnf_notAnd" (formula "5") (term "0,0"))
                                                                        (rule "inEqSimp_notLeq" (formula "5") (term "0,0,0"))
                                                                        (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,0,0"))
                                                                        (rule "mul_literals" (formula "5") (term "0,1,0,0,0,0,0"))
                                                                        (rule "polySimp_addAssoc" (formula "5") (term "0,0,0,0,0"))
                                                                        (rule "add_literals" (formula "5") (term "0,0,0,0,0,0"))
                                                                        (rule "add_zero_left" (formula "5") (term "0,0,0,0,0"))
                                                                        (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "0,0,0"))
                                                                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,0"))
                                                                        (rule "polySimp_elimOne" (formula "5") (term "1,0,0,0"))
                                                                        (rule "inEqSimp_notGeq" (formula "5") (term "1,0,0"))
                                                                        (rule "times_zero_1" (formula "5") (term "1,0,0,1,0,0"))
                                                                        (rule "add_zero_right" (formula "5") (term "0,0,1,0,0"))
                                                                        (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
                                                                        (rule "mul_literals" (formula "5") (term "1,1,0,0"))
                                                                        (rule "nnf_notAnd" (formula "38") (term "0,0"))
                                                                        (rule "inEqSimp_notLeq" (formula "38") (term "0,0,0"))
                                                                        (rule "polySimp_rightDist" (formula "38") (term "1,0,0,0,0,0"))
                                                                        (rule "mul_literals" (formula "38") (term "0,1,0,0,0,0,0"))
                                                                        (rule "polySimp_addAssoc" (formula "38") (term "0,0,0,0,0"))
                                                                        (rule "add_literals" (formula "38") (term "0,0,0,0,0,0"))
                                                                        (rule "add_zero_left" (formula "38") (term "0,0,0,0,0"))
                                                                        (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "0,0,0"))
                                                                        (rule "polySimp_mulLiterals" (formula "38") (term "1,0,0,0"))
                                                                        (rule "polySimp_elimOne" (formula "38") (term "1,0,0,0"))
                                                                        (rule "inEqSimp_notGeq" (formula "38") (term "1,0,0"))
                                                                        (rule "mul_literals" (formula "38") (term "1,0,0,1,0,0"))
                                                                        (rule "add_zero_right" (formula "38") (term "0,0,1,0,0"))
                                                                        (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0"))
                                                                        (rule "mul_literals" (formula "38") (term "1,1,0,0"))
                                                                        (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "10") (inst "b=b"))
                                                                         (builtin "One Step Simplification" (formula "10"))
                                                                        (rule "translateJavaMulInt" (formula "10") (term "1,0,1,0,0,0,0"))
                                                                        (rule "translateJavaMulInt" (formula "10") (term "0,1,1,0,0,0,0"))
                                                                        (rule "translateJavaCastInt" (formula "10") (term "0,0,1,0"))
                                                                        (rule "translateJavaAddInt" (formula "10") (term "1,1,0,0"))
                                                                        (rule "translateJavaCastInt" (formula "10") (term "0,1,0,1,0,0,0"))
                                                                        (rule "translateJavaCastInt" (formula "10") (term "1,1,0,0,1,0,0,0"))
                                                                        (rule "andLeft" (formula "10"))
                                                                        (rule "andLeft" (formula "10"))
                                                                        (rule "andLeft" (formula "10"))
                                                                        (rule "andLeft" (formula "12"))
                                                                        (rule "andLeft" (formula "10"))
                                                                        (rule "andLeft" (formula "10"))
                                                                        (rule "andLeft" (formula "12"))
                                                                        (rule "notLeft" (formula "10"))
                                                                        (rule "andLeft" (formula "10"))
                                                                        (rule "andLeft" (formula "12"))
                                                                        (rule "andLeft" (formula "12"))
                                                                        (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "48"))
                                                                         (builtin "One Step Simplification" (formula "4"))
                                                                        (rule "polySimp_mulComm0" (formula "10") (term "1"))
                                                                        (rule "polySimp_mulComm0" (formula "11") (term "0"))
                                                                        (rule "polySimp_addComm0" (formula "16") (term "1"))
                                                                        (rule "castedGetAny" (formula "17") (term "0"))
                                                                        (rule "castedGetAny" (formula "14") (term "0"))
                                                                        (rule "castedGetAny" (formula "13") (term "1"))
                                                                        (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                                                                        (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                                                                        (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                                                                        (rule "inEqSimp_commuteLeq" (formula "12"))
                                                                        (rule "inEqSimp_commuteLeq" (formula "10"))
                                                                        (rule "inEqSimp_commuteLeq" (formula "13"))
                                                                        (rule "applyEq" (formula "14") (term "0") (ifseqformula "44"))
                                                                        (rule "inEqSimp_homoInEq0" (formula "14"))
                                                                        (rule "polySimp_mulComm0" (formula "14") (term "1,0"))
                                                                        (rule "polySimp_rightDist" (formula "14") (term "1,0"))
                                                                        (rule "polySimp_mulAssoc" (formula "14") (term "0,1,0"))
                                                                        (rule "polySimp_mulComm0" (formula "14") (term "0,0,1,0"))
                                                                        (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0"))
                                                                        (rule "polySimp_elimOne" (formula "14") (term "0,1,0"))
                                                                        (rule "polySimp_addAssoc" (formula "14") (term "0"))
                                                                        (rule "applyEq" (formula "13") (term "0") (ifseqformula "44"))
                                                                        (rule "inEqSimp_commuteGeq" (formula "13"))
                                                                        (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                                                                        (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                                                                        (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                                                                        (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                                                                        (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                                                                        (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                                                                        (rule "inEqSimp_sepNegMonomial1" (formula "13"))
                                                                        (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                                                                        (rule "polySimp_elimOne" (formula "13") (term "0"))
                                                                        (rule "elimGcdGeq_antec" (formula "10") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=int::final(bucket_pointers,
           de.wiesler.BucketPointers::$num_buckets)") (inst "elimGcd=Z(2(#))"))
                                                                        (rule "add_zero_right" (formula "10") (term "0,0,0,1,0"))
                                                                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0"))
                                                                        (rule "leq_literals" (formula "10") (term "0,0"))
                                                                         (builtin "One Step Simplification" (formula "10"))
                                                                        (rule "times_zero_1" (formula "10") (term "1,0,0,0,0"))
                                                                        (rule "add_literals" (formula "10") (term "0,0,0,0"))
                                                                        (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
                                                                        (rule "add_literals" (formula "10") (term "1,1,0,0"))
                                                                        (rule "times_zero_1" (formula "10") (term "1,0,0"))
                                                                        (rule "add_zero_right" (formula "10") (term "0,0"))
                                                                        (rule "leq_literals" (formula "10") (term "0"))
                                                                         (builtin "One Step Simplification" (formula "10"))
                                                                        (rule "inEqSimp_exactShadow2" (formula "10") (ifseqformula "11"))
                                                                        (rule "greater_literals" (formula "10") (term "0"))
                                                                         (builtin "One Step Simplification" (formula "10"))
                                                                        (rule "times_zero_1" (formula "10") (term "1,0,0"))
                                                                        (rule "mul_literals" (formula "10") (term "0,0"))
                                                                        (rule "add_zero_left" (formula "10") (term "0"))
                                                                        (rule "inEqSimp_exactShadow2" (formula "7") (ifseqformula "12"))
                                                                        (rule "greater_literals" (formula "7") (term "0"))
                                                                         (builtin "One Step Simplification" (formula "7"))
                                                                        (rule "polySimp_rightDist" (formula "7") (term "1,0,0"))
                                                                        (rule "mul_literals" (formula "7") (term "0,1,0,0"))
                                                                        (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                                                                        (rule "mul_literals" (formula "7") (term "0,0,0"))
                                                                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0"))
                                                                        (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                                                                        (rule "polySimp_mulComm0" (formula "7") (term "1"))
                                                                        (rule "polySimp_rightDist" (formula "7") (term "1"))
                                                                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                                                                        (rule "mul_literals" (formula "7") (term "0,1"))
                                                                        (rule "inEqSimp_exactShadow2" (formula "43") (ifseqformula "13"))
                                                                        (rule "greater_literals" (formula "43") (term "0"))
                                                                         (builtin "One Step Simplification" (formula "43"))
                                                                        (rule "polySimp_rightDist" (formula "43") (term "1,0,0"))
                                                                        (rule "mul_literals" (formula "43") (term "0,1,0,0"))
                                                                        (rule "polySimp_rightDist" (formula "43") (term "0,0"))
                                                                        (rule "mul_literals" (formula "43") (term "0,0,0"))
                                                                        (rule "polySimp_mulLiterals" (formula "43") (term "1,0,0"))
                                                                        (rule "inEqSimp_sepPosMonomial1" (formula "43"))
                                                                        (rule "polySimp_mulComm0" (formula "43") (term "1"))
                                                                        (rule "polySimp_rightDist" (formula "43") (term "1"))
                                                                        (rule "polySimp_mulLiterals" (formula "43") (term "1,1"))
                                                                        (rule "mul_literals" (formula "43") (term "0,1"))
                                                                        (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "46"))
                                                                        (rule "mul_literals" (formula "14") (term "0,0"))
                                                                        (rule "add_zero_left" (formula "14") (term "0"))
                                                                        (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                                                                        (rule "polySimp_mulLiterals" (formula "14") (term "1"))
                                                                        (rule "polySimp_elimOne" (formula "14") (term "1"))
                                                                        (rule "nnf_imp2or" (formula "19") (term "0"))
                                                                        (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "20"))
                                                                         (builtin "One Step Simplification" (formula "20"))
                                                                        (rule "translateJavaSubInt" (formula "20") (term "0,2,1,1,0"))
                                                                        (rule "translateJavaMulInt" (formula "20") (term "1,1,1,0,0,0,0"))
                                                                        (rule "translateJavaSubInt" (formula "20") (term "0,2,0,1,0"))
                                                                        (rule "andLeft" (formula "20"))
                                                                        (rule "andLeft" (formula "20"))
                                                                        (rule "andLeft" (formula "20"))
                                                                        (rule "andLeft" (formula "20"))
                                                                        (rule "andLeft" (formula "20"))
                                                                        (rule "andLeft" (formula "20"))
                                                                        (rule "andLeft" (formula "21"))
                                                                        (rule "andLeft" (formula "20"))
                                                                        (rule "notLeft" (formula "20"))
                                                                        (rule "notLeft" (formula "20"))
                                                                        (rule "eqSymm" (formula "25"))
                                                                        (rule "eqSymm" (formula "22"))
                                                                        (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "56"))
                                                                         (builtin "One Step Simplification" (formula "3"))
                                                                        (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "55"))
                                                                         (builtin "One Step Simplification" (formula "2"))
                                                                        (rule "polySimp_elimSub" (formula "25") (term "0,2,1"))
                                                                        (rule "mul_literals" (formula "25") (term "1,0,2,1"))
                                                                        (rule "polySimp_elimSub" (formula "25") (term "0,2,0"))
                                                                        (rule "mul_literals" (formula "25") (term "1,0,2,0"))
                                                                        (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
                                                                        (rule "polySimp_addComm0" (formula "25") (term "0,2,1"))
                                                                        (rule "polySimp_addComm0" (formula "25") (term "0,2,0"))
                                                                        (rule "inEqSimp_commuteLeq" (formula "20"))
                                                                        (rule "applyEq" (formula "21") (term "0") (ifseqformula "39"))
                                                                        (rule "applyEq" (formula "20") (term "0") (ifseqformula "39"))
                                                                        (rule "applyEq" (formula "22") (term "1") (ifseqformula "39"))
                                                                        (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "20"))
                                                                        (rule "leq_literals" (formula "12") (term "0"))
                                                                         (builtin "One Step Simplification" (formula "12"))
                                                                        (rule "true_left" (formula "12"))
                                                                        (rule "pullOutSelect" (formula "24") (term "1") (inst "selectSK=arr_0"))
                                                                        (rule "simplifySelectOfAnon" (formula "25"))
                                                                         (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "55")) (ifInst ""  (formula "2")))
                                                                        (rule "simplifySelectOfAnon" (formula "24"))
                                                                         (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "55")) (ifInst ""  (formula "2")))
                                                                        (rule "elementOfUnion" (formula "25") (term "0,0"))
                                                                        (rule "elementOfArrayRangeConcrete" (formula "25") (term "1,0,0"))
                                                                        (rule "replace_known_right" (formula "25") (term "0,0,1,0,0") (ifseqformula "62"))
                                                                         (builtin "One Step Simplification" (formula "25"))
                                                                        (rule "elementOfUnion" (formula "24") (term "0,0"))
                                                                        (rule "elementOfArrayRangeConcrete" (formula "24") (term "1,0,0"))
                                                                        (rule "replace_known_right" (formula "24") (term "0,0,1,0,0") (ifseqformula "62"))
                                                                         (builtin "One Step Simplification" (formula "24"))
                                                                        (rule "elementOfUnion" (formula "25") (term "0,0"))
                                                                         (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "76")))
                                                                        (rule "elementOfUnion" (formula "24") (term "0,0"))
                                                                         (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "76")))
                                                                        (rule "elementOfUnion" (formula "25") (term "0,0"))
                                                                         (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "71")))
                                                                        (rule "elementOfUnion" (formula "24") (term "0,0"))
                                                                         (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "71")))
                                                                        (rule "elementOfUnion" (formula "25") (term "0,0"))
                                                                         (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "74")) (ifInst ""  (formula "67")))
                                                                        (rule "applyEqReverse" (formula "24") (term "1") (ifseqformula "25"))
                                                                        (rule "hideAuxiliaryEq" (formula "25"))
                                                                        (rule "elementOfUnion" (formula "24") (term "0,0"))
                                                                         (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "73")) (ifInst ""  (formula "66")))
                                                                        (rule "eqSymm" (formula "24"))
                                                                        (rule "inEqSimp_exactShadow3" (formula "49") (ifseqformula "20"))
                                                                        (rule "polySimp_rightDist" (formula "49") (term "0,0"))
                                                                        (rule "mul_literals" (formula "49") (term "0,0,0"))
                                                                        (rule "polySimp_addComm1" (formula "49") (term "0"))
                                                                        (rule "add_literals" (formula "49") (term "0,0"))
                                                                        (rule "inEqSimp_sepNegMonomial1" (formula "49"))
                                                                        (rule "polySimp_mulLiterals" (formula "49") (term "0"))
                                                                        (rule "polySimp_elimOne" (formula "49") (term "0"))
                                                                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "20"))
                                                                        (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                                                        (rule "mul_literals" (formula "8") (term "0,0,0"))
                                                                        (rule "polySimp_addComm1" (formula "8") (term "0"))
                                                                        (rule "add_literals" (formula "8") (term "0,0"))
                                                                        (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                                                        (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                                                        (rule "polySimp_elimOne" (formula "8") (term "0"))
                                                                        (rule "inEqSimp_exactShadow2" (formula "20") (ifseqformula "13"))
                                                                        (rule "greater_literals" (formula "20") (term "0"))
                                                                         (builtin "One Step Simplification" (formula "20"))
                                                                        (rule "mul_literals" (formula "20") (term "1,0,0"))
                                                                        (rule "mul_literals" (formula "20") (term "0,0"))
                                                                        (rule "inEqSimp_sepPosMonomial1" (formula "20"))
                                                                        (rule "mul_literals" (formula "20") (term "1"))
                                                                        (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "20"))
                                                                        (rule "leq_literals" (formula "12") (term "0"))
                                                                         (builtin "One Step Simplification" (formula "12"))
                                                                        (rule "true_left" (formula "12"))
                                                                        (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "37") (inst "b=b"))
                                                                         (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "58")) (ifInst ""  (formula "14")) (ifInst ""  (formula "17")))
                                                                        (rule "translateJavaAddInt" (formula "37") (term "1,1,0,0"))
                                                                        (rule "translateJavaCastInt" (formula "37") (term "1,1,0,1,0,0,0"))
                                                                        (rule "translateJavaCastInt" (formula "37") (term "0,1,0"))
                                                                        (rule "translateJavaCastInt" (formula "37") (term "0,1,1,0,0,0"))
                                                                        (rule "translateJavaMulInt" (formula "37") (term "1,0,0,0,0,0"))
                                                                        (rule "translateJavaMulInt" (formula "37") (term "0,1,0,0,0,0"))
                                                                        (rule "andLeft" (formula "37"))
                                                                        (rule "andLeft" (formula "37"))
                                                                        (rule "andLeft" (formula "37"))
                                                                        (rule "andLeft" (formula "37"))
                                                                        (rule "andLeft" (formula "37"))
                                                                        (rule "andLeft" (formula "39"))
                                                                        (rule "andLeft" (formula "39"))
                                                                        (rule "polySimp_mulComm0" (formula "37") (term "1"))
                                                                        (rule "polySimp_mulComm0" (formula "38") (term "0"))
                                                                        (rule "polySimp_addComm0" (formula "41") (term "1"))
                                                                        (rule "castedGetAny" (formula "41") (term "0"))
                                                                        (rule "castedGetAny" (formula "40") (term "0"))
                                                                        (rule "castedGetAny" (formula "39") (term "1"))
                                                                        (rule "inEqSimp_ltToLeq" (formula "41") (term "1,0,0"))
                                                                        (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,1,0,0"))
                                                                        (rule "inEqSimp_commuteLeq" (formula "41") (term "0,0,0"))
                                                                        (rule "inEqSimp_commuteLeq" (formula "38"))
                                                                        (rule "inEqSimp_commuteLeq" (formula "37"))
                                                                        (rule "inEqSimp_commuteLeq" (formula "38"))
                                                                        (rule "applyEq" (formula "39") (term "0") (ifseqformula "55"))
                                                                        (rule "inEqSimp_homoInEq0" (formula "39"))
                                                                        (rule "polySimp_mulComm0" (formula "39") (term "1,0"))
                                                                        (rule "polySimp_rightDist" (formula "39") (term "1,0"))
                                                                        (rule "polySimp_mulAssoc" (formula "39") (term "0,1,0"))
                                                                        (rule "polySimp_mulComm0" (formula "39") (term "0,0,1,0"))
                                                                        (rule "polySimp_mulLiterals" (formula "39") (term "0,1,0"))
                                                                        (rule "polySimp_elimOne" (formula "39") (term "0,1,0"))
                                                                        (rule "polySimp_addAssoc" (formula "39") (term "0"))
                                                                        (rule "applyEq" (formula "38") (term "0") (ifseqformula "55"))
                                                                        (rule "inEqSimp_commuteGeq" (formula "38"))
                                                                        (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0"))
                                                                        (rule "polySimp_mulComm0" (formula "39") (term "1,1,0,0"))
                                                                        (rule "polySimp_rightDist" (formula "39") (term "1,1,0,0"))
                                                                        (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1,0,0"))
                                                                        (rule "mul_literals" (formula "39") (term "0,1,1,0,0"))
                                                                        (rule "polySimp_elimOne" (formula "39") (term "1,1,1,0,0"))
                                                                        (rule "inEqSimp_sepNegMonomial1" (formula "38"))
                                                                        (rule "polySimp_mulLiterals" (formula "38") (term "0"))
                                                                        (rule "polySimp_elimOne" (formula "38") (term "0"))
                                                                        (rule "inEqSimp_subsumption6" (formula "37") (ifseqformula "20"))
                                                                        (rule "greater_literals" (formula "37") (term "0,0"))
                                                                         (builtin "One Step Simplification" (formula "37"))
                                                                        (rule "mul_literals" (formula "37") (term "1,0"))
                                                                        (rule "leq_literals" (formula "37") (term "0"))
                                                                         (builtin "One Step Simplification" (formula "37"))
                                                                        (rule "true_left" (formula "37"))
                                                                        (rule "Definition_axiom_for_isClassOfSlice_in_de_wiesler_Classifier" (formula "54") (term "0") (inst "i=i"))
                                                                         (builtin "One Step Simplification" (formula "54"))
                                                                        (rule "inEqSimp_ltToLeq" (formula "54") (term "1,0,0"))
                                                                        (rule "mul_literals" (formula "54") (term "1,0,0,1,0,0"))
                                                                        (rule "add_literals" (formula "54") (term "0,0,1,0,0"))
                                                                        (rule "inEqSimp_commuteLeq" (formula "54") (term "0,0,0"))
                                                                        (rule "inEqSimp_sepPosMonomial0" (formula "54") (term "1,0,0"))
                                                                        (rule "mul_literals" (formula "54") (term "1,1,0,0"))
                                                                        (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "38"))
                                                                         (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "57")) (ifInst ""  (formula "56")) (ifInst ""  (formula "23")))
                                                                        (rule "translateJavaSubInt" (formula "38") (term "0,2,0,1,0"))
                                                                        (rule "translateJavaSubInt" (formula "38") (term "0,2,1,1,0"))
                                                                        (rule "translateJavaMulInt" (formula "38") (term "1,1,1,0,0,0"))
                                                                        (rule "andLeft" (formula "38"))
                                                                        (rule "andLeft" (formula "38"))
                                                                        (rule "andLeft" (formula "38"))
                                                                        (rule "andLeft" (formula "38"))
                                                                        (rule "andLeft" (formula "38"))
                                                                        (rule "eqSymm" (formula "42"))
                                                                        (rule "eqSymm" (formula "40"))
                                                                        (rule "polySimp_elimSub" (formula "42") (term "0,2,1"))
                                                                        (rule "mul_literals" (formula "42") (term "1,0,2,1"))
                                                                        (rule "polySimp_elimSub" (formula "42") (term "0,2,0"))
                                                                        (rule "mul_literals" (formula "42") (term "1,0,2,0"))
                                                                        (rule "polySimp_mulComm0" (formula "40") (term "1,0"))
                                                                        (rule "polySimp_addComm0" (formula "42") (term "0,2,1"))
                                                                        (rule "polySimp_addComm0" (formula "42") (term "0,2,0"))
                                                                        (rule "inEqSimp_commuteLeq" (formula "38"))
                                                                        (rule "applyEq" (formula "39") (term "0") (ifseqformula "43"))
                                                                        (rule "applyEq" (formula "22") (term "0") (ifseqformula "39"))
                                                                        (rule "applyEq" (formula "37") (term "0") (ifseqformula "41"))
                                                                        (rule "applyEq" (formula "37") (term "1") (ifseqformula "40"))
                                                                        (rule "nnf_notAnd" (formula "18") (term "0,0"))
                                                                        (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
                                                                        (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
                                                                        (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
                                                                        (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
                                                                        (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
                                                                        (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
                                                                        (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
                                                                        (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
                                                                        (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
                                                                        (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
                                                                        (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0"))
                                                                        (rule "add_zero_right" (formula "18") (term "0,0,0,0,0"))
                                                                        (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
                                                                        (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                                                                        (rule "Definition_axiom_for_isClassOfSlice_in_de_wiesler_Classifier" (formula "10") (term "0") (inst "i=i"))
                                                                         (builtin "One Step Simplification" (formula "10"))
                                                                        (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                                                                        (rule "mul_literals" (formula "10") (term "1,0,0,1,0,0"))
                                                                        (rule "add_literals" (formula "10") (term "0,0,1,0,0"))
                                                                        (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                                                                        (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                                                                        (rule "mul_literals" (formula "10") (term "1,1,0,0"))
                                                                        (rule "Definition_axiom_for_countElement_in_de_wiesler_BucketPointers" (formula "26") (term "1,1,0"))
                                                                        (rule "translateJavaAddInt" (formula "26") (term "1,1,0"))
                                                                        (rule "polySimp_addAssoc" (formula "26") (term "1,0"))
                                                                        (rule "polySimp_homoEq" (formula "26") (term "0"))
                                                                        (rule "polySimp_addComm1" (formula "26") (term "0,0"))
                                                                        (rule "polySimp_sepPosMonomial" (formula "26") (term "0"))
                                                                        (rule "polySimp_mulComm0" (formula "26") (term "1,0"))
                                                                        (rule "polySimp_rightDist" (formula "26") (term "1,0"))
                                                                        (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0"))
                                                                        (rule "polySimp_elimOne" (formula "26") (term "1,1,0"))
                                                                        (rule "polySimp_rightDist" (formula "26") (term "0,1,0"))
                                                                        (rule "polySimp_rightDist" (formula "26") (term "0,0,1,0"))
                                                                        (rule "polySimp_mulLiterals" (formula "26") (term "1,0,0,1,0"))
                                                                        (rule "polySimp_elimOne" (formula "26") (term "1,0,0,1,0"))
                                                                        (rule "polySimp_mulComm0" (formula "26") (term "0,0,0,1,0"))
                                                                        (rule "Definition_axiom_for_toReadCountOfBucket_in_de_wiesler_BucketPointers" (formula "11") (term "1,1,0"))
                                                                        (rule "translateJavaSubInt" (formula "11") (term "1,1,1,0"))
                                                                        (rule "polySimp_elimSub" (formula "11") (term "1,1,1,0"))
                                                                        (rule "inEqSimp_ltToLeq" (formula "11") (term "0,1,1,0"))
                                                                        (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,1,0"))
                                                                        (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0"))
                                                                        (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,1,0"))
                                                                        (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0"))
                                                                        (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0"))
                                                                        (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,1,0"))
                                                                        (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0"))
                                                                        (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,1,0"))
                                                                        (rule "Definition_axiom_for_elementsToReadOfBucketBlockClassified_in_de_wiesler_BucketPointers" (formula "5") (term "0,0,0,1,0"))
                                                                         (builtin "One Step Simplification" (formula "5"))
                                                                        (rule "translateJavaAddInt" (formula "5") (term "4,0,1,0,0,1,0"))
                                                                        (rule "translateJavaAddInt" (formula "5") (term "3,0,1,0,0,1,0"))
                                                                        (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,0,1,0"))
                                                                        (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,0,1,0"))
                                                                        (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0,1,0"))
                                                                        (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,1,0"))
                                                                        (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,1,0"))
                                                                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0,1,0"))
                                                                        (rule "mul_literals" (formula "5") (term "0,1,0,0,0,1,0"))
                                                                        (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,0,1,0"))
                                                                        (rule "Definition_axiom_for_elementsToReadOfBucketBlockClassified_in_de_wiesler_BucketPointers" (formula "56") (term "0,0,0,1,0"))
                                                                         (builtin "One Step Simplification" (formula "56"))
                                                                        (rule "translateJavaAddInt" (formula "56") (term "4,0,1,0,0,1,0"))
                                                                        (rule "translateJavaAddInt" (formula "56") (term "3,0,1,0,0,1,0"))
                                                                        (rule "inEqSimp_ltToLeq" (formula "56") (term "0,0,0,1,0"))
                                                                        (rule "polySimp_mulComm0" (formula "56") (term "1,0,0,0,0,0,1,0"))
                                                                        (rule "inEqSimp_sepPosMonomial0" (formula "56") (term "0,0,0,1,0"))
                                                                        (rule "polySimp_mulComm0" (formula "56") (term "1,0,0,0,1,0"))
                                                                        (rule "polySimp_rightDist" (formula "56") (term "1,0,0,0,1,0"))
                                                                        (rule "mul_literals" (formula "56") (term "0,1,0,0,0,1,0"))
                                                                        (rule "polySimp_mulLiterals" (formula "56") (term "1,1,0,0,0,1,0"))
                                                                        (rule "polySimp_elimOne" (formula "56") (term "1,1,0,0,0,1,0"))
                                                                        (rule "nnf_imp2or" (formula "36") (term "0"))
                                                                        (rule "commute_or" (formula "11") (term "0,0"))
                                                                        (rule "Definition_axiom_for_isSortedSeqTransitive_in_de_wiesler_Functions" (formula "17") (term "0") (inst "i=i") (inst "j=j"))
                                                                         (builtin "One Step Simplification" (formula "17"))
                                                                        (rule "translateJavaCastInt" (formula "17") (term "1,1,0,1,0"))
                                                                        (rule "translateJavaCastInt" (formula "17") (term "0,1,0,1,0"))
                                                                        (rule "castedGetAny" (formula "17") (term "1,1,0,1,0"))
                                                                        (rule "castedGetAny" (formula "17") (term "0,1,0,1,0"))
                                                                        (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                                                                        (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                                                                        (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,1,0"))
                                                                        (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,1,0"))
                                                                        (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                                                                        (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,1,0"))
                                                                        (rule "inEqSimp_commuteLeq" (formula "17") (term "1,0,1,0"))
                                                                        (rule "applyEq" (formula "17") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "15"))
                                                                        (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,1,0"))
                                                                        (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0,1,0"))
                                                                        (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0,1,0"))
                                                                        (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,1,0"))
                                                                        (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,1,0"))
                                                                        (rule "add_zero_left" (formula "17") (term "0,0,1,0,0,1,0"))
                                                                        (rule "applyEq" (formula "17") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
                                                                        (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                                                                        (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
                                                                        (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
                                                                        (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
                                                                        (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
                                                                        (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
                                                                        (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,1,0"))
                                                                        (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,1,0"))
                                                                        (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,1,0"))
                                                                        (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                                                                        (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
                                                                        (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
                                                                        (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "14") (term "0"))
                                                                         (builtin "One Step Simplification" (formula "14"))
                                                                        (rule "translateJavaMod" (formula "14") (term "0"))
                                                                        (rule "jmod_axiom" (formula "14") (term "0"))
                                                                        (rule "polySimp_mulLiterals" (formula "14") (term "1,0"))
                                                                        (rule "polySimp_sepNegMonomial" (formula "14"))
                                                                        (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                                                                        (rule "newSym_eq" (formula "14") (inst "l=l_0") (inst "newSymDef=mul(int::final(bucket_pointers,
               de.wiesler.BucketPointers::$first_empty_position),
    Z(0(#)))"))
                                                                        (rule "times_zero_1" (formula "14") (term "1,1"))
                                                                        (rule "add_zero_right" (formula "14") (term "1"))
                                                                        (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "14"))
                                                                        (rule "eqSymm" (formula "15"))
                                                                        (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "15"))
                                                                        (rule "applyEq" (formula "13") (term "0") (ifseqformula "15"))
                                                                        (rule "applyEq" (formula "55") (term "0") (ifseqformula "15"))
                                                                        (rule "inEqSimp_homoInEq0" (formula "55"))
                                                                        (rule "polySimp_mulLiterals" (formula "55") (term "1,0"))
                                                                        (rule "polySimp_addComm1" (formula "55") (term "0"))
                                                                        (rule "polySimp_addComm0" (formula "55") (term "0,0"))
                                                                        (rule "inEqSimp_sepPosMonomial1" (formula "55"))
                                                                        (rule "polySimp_mulComm0" (formula "55") (term "1"))
                                                                        (rule "polySimp_rightDist" (formula "55") (term "1"))
                                                                        (rule "polySimp_mulLiterals" (formula "55") (term "1,1"))
                                                                        (rule "polySimp_elimOne" (formula "55") (term "1,1"))
                                                                        (rule "polySimp_mulComm0" (formula "55") (term "0,1"))
                                                                        (rule "polySimp_mulLiterals" (formula "55") (term "0,1"))
                                                                        (rule "elimGcdGeq_antec" (formula "13") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
                                                                        (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,0"))
                                                                        (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,1,0"))
                                                                        (rule "leq_literals" (formula "13") (term "0,0"))
                                                                         (builtin "One Step Simplification" (formula "13"))
                                                                        (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
                                                                        (rule "add_zero_right" (formula "13") (term "0,0,0,0"))
                                                                        (rule "add_zero_right" (formula "13") (term "0,0,0,0"))
                                                                        (rule "polySimp_pullOutFactor0b" (formula "13") (term "0,0"))
                                                                        (rule "add_literals" (formula "13") (term "1,1,0,0"))
                                                                        (rule "times_zero_1" (formula "13") (term "1,0,0"))
                                                                        (rule "add_zero_right" (formula "13") (term "0,0"))
                                                                        (rule "leq_literals" (formula "13") (term "0"))
                                                                         (builtin "One Step Simplification" (formula "13"))
                                                                        (rule "inEqSimp_exactShadow3" (formula "55") (ifseqformula "49"))
                                                                        (rule "polySimp_rightDist" (formula "55") (term "0,0"))
                                                                        (rule "polySimp_mulAssoc" (formula "55") (term "0,0,0"))
                                                                        (rule "polySimp_mulComm0" (formula "55") (term "0,0,0,0"))
                                                                        (rule "polySimp_mulLiterals" (formula "55") (term "0,0,0"))
                                                                        (rule "polySimp_addAssoc" (formula "55") (term "0"))
                                                                        (rule "polySimp_addComm1" (formula "55") (term "0,0"))
                                                                        (rule "polySimp_pullOutFactor2b" (formula "55") (term "0"))
                                                                        (rule "add_literals" (formula "55") (term "1,1,0"))
                                                                        (rule "times_zero_1" (formula "55") (term "1,0"))
                                                                        (rule "add_zero_right" (formula "55") (term "0"))
                                                                        (rule "polySimp_addComm0" (formula "55") (term "0"))
                                                                        (rule "inEqSimp_sepNegMonomial1" (formula "55"))
                                                                        (rule "polySimp_mulLiterals" (formula "55") (term "0"))
                                                                        (rule "elimGcdLeq_antec" (formula "55") (inst "elimGcdRightDiv=Z(7(0(6(8(8(3(8(#))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
                                                                        (rule "neg_literal" (formula "55") (term "0,0,0,0,0,1,0"))
                                                                        (rule "polySimp_mulLiterals" (formula "55") (term "1,0,1,0"))
                                                                        (rule "polySimp_mulLiterals" (formula "55") (term "1,0,0,0,0,1,0"))
                                                                        (rule "leq_literals" (formula "55") (term "0,0"))
                                                                         (builtin "One Step Simplification" (formula "55"))
                                                                        (rule "mul_literals" (formula "55") (term "1,0,0,0,0,0"))
                                                                        (rule "polySimp_addLiterals" (formula "55") (term "0,0,0,0"))
                                                                        (rule "add_zero_right" (formula "55") (term "0,0,0,0"))
                                                                        (rule "polySimp_pullOutFactor0b" (formula "55") (term "0,0"))
                                                                        (rule "add_literals" (formula "55") (term "1,1,0,0"))
                                                                        (rule "times_zero_1" (formula "55") (term "1,0,0"))
                                                                        (rule "add_zero_right" (formula "55") (term "0,0"))
                                                                        (rule "qeq_literals" (formula "55") (term "0"))
                                                                         (builtin "One Step Simplification" (formula "55"))
                                                                        (rule "nnf_imp2or" (formula "57") (term "0"))
                                                                        (rule "nnf_imp2or" (formula "10") (term "0"))
                                                                        (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "26"))
                                                                         (builtin "One Step Simplification" (formula "26"))
                                                                        (rule "translateJavaSubInt" (formula "26") (term "3,0,1"))
                                                                        (rule "andLeft" (formula "26"))
                                                                        (rule "andLeft" (formula "26"))
                                                                        (rule "andLeft" (formula "26"))
                                                                        (rule "andLeft" (formula "26"))
                                                                        (rule "andLeft" (formula "28"))
                                                                        (rule "andLeft" (formula "26"))
                                                                        (rule "andLeft" (formula "26"))
                                                                        (rule "andLeft" (formula "28"))
                                                                        (rule "notLeft" (formula "26"))
                                                                        (rule "notLeft" (formula "26"))
                                                                        (rule "polySimp_elimSub" (formula "32") (term "3,0"))
                                                                        (rule "mul_literals" (formula "32") (term "1,3,0"))
                                                                        (rule "polySimp_addComm0" (formula "32") (term "3,0"))
                                                                        (rule "inEqSimp_commuteLeq" (formula "31"))
                                                                        (rule "inEqSimp_commuteLeq" (formula "29"))
                                                                        (rule "inEqSimp_commuteLeq" (formula "30"))
                                                                        (rule "inEqSimp_commuteLeq" (formula "26"))
                                                                        (rule "applyEq" (formula "45") (term "3,0") (ifseqformula "28"))
                                                                        (rule "applyEq" (formula "44") (term "2,0") (ifseqformula "28"))
                                                                        (rule "applyEq" (formula "24") (term "3,0") (ifseqformula "28"))
                                                                        (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "23"))
                                                                        (rule "inEqSimp_commuteGeq" (formula "31"))
                                                                        (rule "applyEq" (formula "25") (term "1,0,2,0") (ifseqformula "28"))
                                                                        (rule "eqSymm" (formula "25"))
                                                                        (rule "applyEq" (formula "44") (term "0,1,0") (ifseqformula "28"))
                                                                        (rule "applyEq" (formula "32") (term "1,0") (ifseqformula "23"))
                                                                        (rule "applyEq" (formula "29") (term "0") (ifseqformula "28"))
                                                                        (rule "applyEq" (formula "32") (term "1,3,0") (ifseqformula "28"))
                                                                        (rule "applyEq" (formula "66") (term "0") (ifseqformula "23"))
                                                                        (rule "applyEq" (formula "30") (term "1") (ifseqformula "28"))
                                                                        (rule "applyEq" (formula "25") (term "1,0,2,0") (ifseqformula "28"))
                                                                        (rule "eqSymm" (formula "25"))
                                                                        (rule "applyEq" (formula "31") (term "0") (ifseqformula "28"))
                                                                        (rule "inEqSimp_exactShadow3" (formula "29") (ifseqformula "31"))
                                                                        (rule "mul_literals" (formula "29") (term "0,0"))
                                                                        (rule "inEqSimp_sepPosMonomial1" (formula "29"))
                                                                        (rule "mul_literals" (formula "29") (term "1"))
                                                                        (rule "nnf_notAnd" (formula "44") (term "0,0"))
                                                                        (rule "inEqSimp_notLeq" (formula "44") (term "1,0,0"))
                                                                        (rule "polySimp_rightDist" (formula "44") (term "1,0,0,1,0,0"))
                                                                        (rule "mul_literals" (formula "44") (term "0,1,0,0,1,0,0"))
                                                                        (rule "polySimp_addAssoc" (formula "44") (term "0,0,1,0,0"))
                                                                        (rule "add_literals" (formula "44") (term "0,0,0,1,0,0"))
                                                                        (rule "add_zero_left" (formula "44") (term "0,0,1,0,0"))
                                                                        (rule "inEqSimp_sepPosMonomial1" (formula "44") (term "1,0,0"))
                                                                        (rule "polySimp_mulLiterals" (formula "44") (term "1,1,0,0"))
                                                                        (rule "polySimp_elimOne" (formula "44") (term "1,1,0,0"))
                                                                        (rule "inEqSimp_notGeq" (formula "44") (term "0,0,0"))
                                                                        (rule "times_zero_1" (formula "44") (term "1,0,0,0,0,0"))
                                                                        (rule "add_zero_right" (formula "44") (term "0,0,0,0,0"))
                                                                        (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "0,0,0"))
                                                                        (rule "mul_literals" (formula "44") (term "1,0,0,0"))
                                                                        (rule "nnf_imp2or" (formula "5") (term "0,0,1,0"))
                                                                        (rule "inEqSimp_notLeq" (formula "5") (term "0,0,0,1,0"))
                                                                        (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,0,0,1,0"))
                                                                        (rule "mul_literals" (formula "5") (term "0,1,0,0,0,0,0,1,0"))
                                                                        (rule "polySimp_addAssoc" (formula "5") (term "0,0,0,0,0,1,0"))
                                                                        (rule "add_literals" (formula "5") (term "0,0,0,0,0,0,1,0"))
                                                                        (rule "add_zero_left" (formula "5") (term "0,0,0,0,0,1,0"))
                                                                        (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "0,0,0,1,0"))
                                                                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,0,1,0"))
                                                                        (rule "polySimp_elimOne" (formula "5") (term "1,0,0,0,1,0"))
                                                                        (rule "ifthenelse_split" (formula "1") (term "0"))
                                                                        (branch "first_is_current_swap_0 = TRUE TRUE"
                                                                           (rule "eqSymm" (formula "2"))
                                                                           (rule "close" (formula "79") (ifseqformula "2"))
                                                                        )
                                                                        (branch "first_is_current_swap_0 = TRUE FALSE"
                                                                           (rule "eqSymm" (formula "1"))
                                                                           (rule "close" (formula "83") (ifseqformula "1"))
                                                                        )
                                                                     )
                                                                  )
                                                                  (branch "Case 2"
                                                                     (rule "ifthenelse_split" (formula "65") (term "0,0") (userinteraction))
                                                                     (branch "first_is_current_swap_0 = TRUE TRUE"
                                                                        (rule "replace_known_left" (formula "12") (term "0,1,0,0,0") (ifseqformula "1"))
                                                                         (builtin "One Step Simplification" (formula "12"))
                                                                        (rule "replace_known_left" (formula "8") (term "0,2,0") (ifseqformula "1"))
                                                                         (builtin "One Step Simplification" (formula "8"))
                                                                        (rule "polySimp_homoEq" (formula "5") (term "1,1,0"))
                                                                        (rule "polySimp_homoEq" (formula "12") (term "0"))
                                                                        (rule "polySimp_mulComm0" (formula "5") (term "1,0,1,1,0"))
                                                                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                                                                        (rule "polySimp_rightDist" (formula "5") (term "1,0,1,1,0"))
                                                                        (rule "polySimp_mulComm0" (formula "5") (term "0,1,0,1,1,0"))
                                                                        (rule "polySimp_addComm1" (formula "5") (term "0,1,1,0"))
                                                                        (rule "polySimp_rightDist" (formula "12") (term "1,0,0"))
                                                                        (rule "polySimp_mulComm0" (formula "12") (term "0,1,0,0"))
                                                                        (rule "disjointDefinition" (formula "66"))
                                                                         (builtin "One Step Simplification" (formula "66"))
                                                                        (rule "notRight" (formula "66"))
                                                                        (rule "eqSymm" (formula "1"))
                                                                        (rule "close" (formula "49") (ifseqformula "1"))
                                                                     )
                                                                     (branch "first_is_current_swap_0 = TRUE FALSE"
                                                                        (rule "replace_known_right" (formula "11") (term "0,1,0,0,0") (ifseqformula "65"))
                                                                         (builtin "One Step Simplification" (formula "11"))
                                                                        (rule "replace_known_right" (formula "7") (term "0,2,0") (ifseqformula "65"))
                                                                         (builtin "One Step Simplification" (formula "7"))
                                                                        (rule "polySimp_homoEq" (formula "4") (term "1,1,0"))
                                                                        (rule "polySimp_homoEq" (formula "11") (term "0"))
                                                                        (rule "polySimp_mulComm0" (formula "4") (term "1,0,1,1,0"))
                                                                        (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                                                                        (rule "polySimp_rightDist" (formula "4") (term "1,0,1,1,0"))
                                                                        (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,1,1,0"))
                                                                        (rule "polySimp_addComm1" (formula "4") (term "0,1,1,0"))
                                                                        (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
                                                                        (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
                                                                        (rule "disjointDefinition" (formula "66"))
                                                                         (builtin "One Step Simplification" (formula "66"))
                                                                        (rule "notRight" (formula "66"))
                                                                        (rule "eqSymm" (formula "1"))
                                                                        (rule "close" (formula "52") (ifseqformula "1"))
                                                                     )
                                                                  )
                                                               )
                                                               (branch "Case 2"
                                                                  (rule "ifthenelse_split" (formula "65") (term "0,0") (userinteraction))
                                                                  (branch "first_is_current_swap_0 = TRUE TRUE"
                                                                     (rule "replace_known_left" (formula "12") (term "0,1,0,0,0") (ifseqformula "1"))
                                                                      (builtin "One Step Simplification" (formula "12"))
                                                                     (rule "replace_known_left" (formula "8") (term "0,2,0") (ifseqformula "1"))
                                                                      (builtin "One Step Simplification" (formula "8"))
                                                                     (rule "polySimp_homoEq" (formula "5") (term "1,1,0"))
                                                                     (rule "polySimp_homoEq" (formula "12") (term "0"))
                                                                     (rule "polySimp_mulComm0" (formula "5") (term "1,0,1,1,0"))
                                                                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                                                                     (rule "polySimp_rightDist" (formula "5") (term "1,0,1,1,0"))
                                                                     (rule "polySimp_mulComm0" (formula "5") (term "0,1,0,1,1,0"))
                                                                     (rule "polySimp_addComm1" (formula "5") (term "0,1,1,0"))
                                                                     (rule "polySimp_rightDist" (formula "12") (term "1,0,0"))
                                                                     (rule "polySimp_mulComm0" (formula "12") (term "0,1,0,0"))
                                                                     (rule "disjointDefinition" (formula "66"))
                                                                      (builtin "One Step Simplification" (formula "66"))
                                                                     (rule "notRight" (formula "66"))
                                                                     (rule "eqSymm" (formula "1"))
                                                                     (rule "close" (formula "50") (ifseqformula "1"))
                                                                  )
                                                                  (branch "first_is_current_swap_0 = TRUE FALSE"
                                                                     (rule "replace_known_right" (formula "7") (term "0,2,0") (ifseqformula "65"))
                                                                      (builtin "One Step Simplification" (formula "7"))
                                                                     (rule "replace_known_right" (formula "11") (term "0,1,0,0,0") (ifseqformula "65"))
                                                                      (builtin "One Step Simplification" (formula "11"))
                                                                     (rule "polySimp_homoEq" (formula "4") (term "1,1,0"))
                                                                     (rule "polySimp_homoEq" (formula "11") (term "0"))
                                                                     (rule "polySimp_mulComm0" (formula "4") (term "1,0,1,1,0"))
                                                                     (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                                                                     (rule "polySimp_rightDist" (formula "4") (term "1,0,1,1,0"))
                                                                     (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,1,1,0"))
                                                                     (rule "polySimp_addComm1" (formula "4") (term "0,1,1,0"))
                                                                     (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
                                                                     (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
                                                                     (rule "disjointDefinition" (formula "66"))
                                                                      (builtin "One Step Simplification" (formula "66"))
                                                                     (rule "notRight" (formula "66"))
                                                                     (rule "eqSymm" (formula "1"))
                                                                     (rule "close" (formula "53") (ifseqformula "1"))
                                                                  )
                                                               )
                                                            )
                                                            (branch "Case 2"
                                                               (rule "ifthenelse_split" (formula "65") (term "0,0") (userinteraction))
                                                               (branch "first_is_current_swap_0 = TRUE TRUE"
                                                                  (rule "replace_known_left" (formula "12") (term "0,1,0,0,0") (ifseqformula "1"))
                                                                   (builtin "One Step Simplification" (formula "12"))
                                                                  (rule "replace_known_left" (formula "8") (term "0,2,0") (ifseqformula "1"))
                                                                   (builtin "One Step Simplification" (formula "8"))
                                                                  (rule "polySimp_homoEq" (formula "5") (term "1,1,0"))
                                                                  (rule "polySimp_homoEq" (formula "12") (term "0"))
                                                                  (rule "polySimp_mulComm0" (formula "5") (term "1,0,1,1,0"))
                                                                  (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "5") (term "1,0,1,1,0"))
                                                                  (rule "polySimp_mulComm0" (formula "5") (term "0,1,0,1,1,0"))
                                                                  (rule "polySimp_addComm1" (formula "5") (term "0,1,1,0"))
                                                                  (rule "polySimp_rightDist" (formula "12") (term "1,0,0"))
                                                                  (rule "polySimp_mulComm0" (formula "12") (term "0,1,0,0"))
                                                                  (rule "disjointDefinition" (formula "66"))
                                                                   (builtin "One Step Simplification" (formula "66") (ifInst ""  (formula "50")))
                                                                  (rule "closeTrue" (formula "66"))
                                                               )
                                                               (branch "first_is_current_swap_0 = TRUE FALSE"
                                                                  (rule "replace_known_right" (formula "7") (term "0,2,0") (ifseqformula "65"))
                                                                   (builtin "One Step Simplification" (formula "7"))
                                                                  (rule "replace_known_right" (formula "11") (term "0,1,0,0,0") (ifseqformula "65"))
                                                                   (builtin "One Step Simplification" (formula "11"))
                                                                  (rule "polySimp_homoEq" (formula "4") (term "1,1,0"))
                                                                  (rule "polySimp_homoEq" (formula "11") (term "0"))
                                                                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,1,1,0"))
                                                                  (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "4") (term "1,0,1,1,0"))
                                                                  (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,1,1,0"))
                                                                  (rule "polySimp_addComm1" (formula "4") (term "0,1,1,0"))
                                                                  (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
                                                                  (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
                                                                  (rule "disjointDefinition" (formula "66"))
                                                                   (builtin "One Step Simplification" (formula "66") (ifInst ""  (formula "45")))
                                                                  (rule "closeTrue" (formula "66"))
                                                               )
                                                            )
                                                         )
                                                         (branch "Case 2"
                                                            (rule "ifthenelse_split" (formula "65") (term "0,0") (userinteraction))
                                                            (branch "first_is_current_swap_0 = TRUE TRUE"
                                                               (rule "replace_known_left" (formula "12") (term "0,1,0,0,0") (ifseqformula "1"))
                                                                (builtin "One Step Simplification" (formula "12"))
                                                               (rule "replace_known_left" (formula "8") (term "0,2,0") (ifseqformula "1"))
                                                                (builtin "One Step Simplification" (formula "8"))
                                                               (rule "polySimp_homoEq" (formula "5") (term "1,1,0"))
                                                               (rule "polySimp_homoEq" (formula "12") (term "0"))
                                                               (rule "polySimp_mulComm0" (formula "5") (term "1,0,1,1,0"))
                                                               (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                                                               (rule "polySimp_rightDist" (formula "5") (term "1,0,1,1,0"))
                                                               (rule "polySimp_mulComm0" (formula "5") (term "0,1,0,1,1,0"))
                                                               (rule "polySimp_addComm1" (formula "5") (term "0,1,1,0"))
                                                               (rule "polySimp_rightDist" (formula "12") (term "1,0,0"))
                                                               (rule "polySimp_mulComm0" (formula "12") (term "0,1,0,0"))
                                                               (rule "disjointDefinition" (formula "66"))
                                                                (builtin "One Step Simplification" (formula "66"))
                                                               (rule "notRight" (formula "66"))
                                                               (rule "eqSymm" (formula "1"))
                                                               (rule "close" (formula "52") (ifseqformula "1"))
                                                            )
                                                            (branch "first_is_current_swap_0 = TRUE FALSE"
                                                               (rule "replace_known_right" (formula "11") (term "0,1,0,0,0") (ifseqformula "65"))
                                                                (builtin "One Step Simplification" (formula "11"))
                                                               (rule "replace_known_right" (formula "7") (term "0,2,0") (ifseqformula "65"))
                                                                (builtin "One Step Simplification" (formula "7"))
                                                               (rule "polySimp_homoEq" (formula "4") (term "1,1,0"))
                                                               (rule "polySimp_homoEq" (formula "11") (term "0"))
                                                               (rule "polySimp_mulComm0" (formula "4") (term "1,0,1,1,0"))
                                                               (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                                                               (rule "polySimp_rightDist" (formula "4") (term "1,0,1,1,0"))
                                                               (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,1,1,0"))
                                                               (rule "polySimp_addComm1" (formula "4") (term "0,1,1,0"))
                                                               (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
                                                               (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
                                                               (rule "disjointDefinition" (formula "66"))
                                                                (builtin "One Step Simplification" (formula "66"))
                                                               (rule "notRight" (formula "66"))
                                                               (rule "eqSymm" (formula "1"))
                                                               (rule "close" (formula "47") (ifseqformula "1"))
                                                            )
                                                         )
                                                      )
                                                      (branch "Case 2"
                                                         (rule "ifthenelse_split" (formula "65") (term "0,0") (userinteraction))
                                                         (branch "first_is_current_swap_0 = TRUE TRUE"
                                                            (rule "replace_known_left" (formula "12") (term "0,1,0,0,0") (ifseqformula "1"))
                                                             (builtin "One Step Simplification" (formula "12"))
                                                            (rule "replace_known_left" (formula "8") (term "0,2,0") (ifseqformula "1"))
                                                             (builtin "One Step Simplification" (formula "8"))
                                                            (rule "polySimp_homoEq" (formula "5") (term "1,1,0"))
                                                            (rule "polySimp_homoEq" (formula "12") (term "0"))
                                                            (rule "polySimp_mulComm0" (formula "5") (term "1,0,1,1,0"))
                                                            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                                                            (rule "polySimp_rightDist" (formula "5") (term "1,0,1,1,0"))
                                                            (rule "polySimp_mulComm0" (formula "5") (term "0,1,0,1,1,0"))
                                                            (rule "polySimp_addComm1" (formula "5") (term "0,1,1,0"))
                                                            (rule "polySimp_rightDist" (formula "12") (term "1,0,0"))
                                                            (rule "polySimp_mulComm0" (formula "12") (term "0,1,0,0"))
                                                            (rule "disjointDefinition" (formula "66"))
                                                             (builtin "One Step Simplification" (formula "66"))
                                                            (rule "notRight" (formula "66"))
                                                            (rule "eqSymm" (formula "1"))
                                                            (rule "close" (formula "53") (ifseqformula "1"))
                                                         )
                                                         (branch "first_is_current_swap_0 = TRUE FALSE"
                                                            (rule "replace_known_right" (formula "11") (term "0,1,0,0,0") (ifseqformula "65"))
                                                             (builtin "One Step Simplification" (formula "11"))
                                                            (rule "replace_known_right" (formula "7") (term "0,2,0") (ifseqformula "65"))
                                                             (builtin "One Step Simplification" (formula "7"))
                                                            (rule "polySimp_homoEq" (formula "4") (term "1,1,0"))
                                                            (rule "polySimp_homoEq" (formula "11") (term "0"))
                                                            (rule "polySimp_mulComm0" (formula "4") (term "1,0,1,1,0"))
                                                            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                                                            (rule "polySimp_rightDist" (formula "4") (term "1,0,1,1,0"))
                                                            (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,1,1,0"))
                                                            (rule "polySimp_addComm1" (formula "4") (term "0,1,1,0"))
                                                            (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
                                                            (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
                                                            (rule "disjointDefinition" (formula "66"))
                                                             (builtin "One Step Simplification" (formula "66"))
                                                            (rule "notRight" (formula "66"))
                                                            (rule "eqSymm" (formula "1"))
                                                            (rule "close" (formula "48") (ifseqformula "1"))
                                                         )
                                                      )
                                                   )
                                                   (branch "Case 2"
                                                      (rule "ifthenelse_split" (formula "65") (term "0,0") (userinteraction))
                                                      (branch "first_is_current_swap_0 = TRUE TRUE"
                                                         (rule "replace_known_left" (formula "12") (term "0,1,0,0,0") (ifseqformula "1"))
                                                          (builtin "One Step Simplification" (formula "12"))
                                                         (rule "replace_known_left" (formula "8") (term "0,2,0") (ifseqformula "1"))
                                                          (builtin "One Step Simplification" (formula "8"))
                                                         (rule "polySimp_homoEq" (formula "5") (term "1,1,0"))
                                                         (rule "polySimp_homoEq" (formula "12") (term "0"))
                                                         (rule "polySimp_mulComm0" (formula "5") (term "1,0,1,1,0"))
                                                         (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                                                         (rule "polySimp_rightDist" (formula "5") (term "1,0,1,1,0"))
                                                         (rule "polySimp_mulComm0" (formula "5") (term "0,1,0,1,1,0"))
                                                         (rule "polySimp_addComm1" (formula "5") (term "0,1,1,0"))
                                                         (rule "polySimp_rightDist" (formula "12") (term "1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "12") (term "0,1,0,0"))
                                                         (rule "disjointDefinition" (formula "66"))
                                                          (builtin "One Step Simplification" (formula "66"))
                                                         (rule "notRight" (formula "66"))
                                                         (rule "eqSymm" (formula "1"))
                                                         (rule "close" (formula "54") (ifseqformula "1"))
                                                      )
                                                      (branch "first_is_current_swap_0 = TRUE FALSE"
                                                         (rule "replace_known_right" (formula "7") (term "0,2,0") (ifseqformula "65"))
                                                          (builtin "One Step Simplification" (formula "7"))
                                                         (rule "replace_known_right" (formula "11") (term "0,1,0,0,0") (ifseqformula "65"))
                                                          (builtin "One Step Simplification" (formula "11"))
                                                         (rule "polySimp_homoEq" (formula "4") (term "1,1,0"))
                                                         (rule "polySimp_homoEq" (formula "11") (term "0"))
                                                         (rule "polySimp_mulComm0" (formula "4") (term "1,0,1,1,0"))
                                                         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                                                         (rule "polySimp_rightDist" (formula "4") (term "1,0,1,1,0"))
                                                         (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,1,1,0"))
                                                         (rule "polySimp_addComm1" (formula "4") (term "0,1,1,0"))
                                                         (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
                                                         (rule "disjointDefinition" (formula "66"))
                                                          (builtin "One Step Simplification" (formula "66"))
                                                         (rule "notRight" (formula "66"))
                                                         (rule "eqSymm" (formula "1"))
                                                         (rule "close" (formula "49") (ifseqformula "1"))
                                                      )
                                                   )
                                                )
                                                (branch "Case 2"
                                                   (rule "polySimp_homoEq" (formula "4") (term "1,1,0"))
                                                   (rule "polySimp_homoEq" (formula "11") (term "0"))
                                                   (rule "polySimp_mulComm0" (formula "4") (term "1,0,1,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "4") (term "1,0,1,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,1,1,0"))
                                                   (rule "polySimp_addComm1" (formula "4") (term "0,1,1,0"))
                                                   (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
                                                   (rule "polySimp_addComm1" (formula "11") (term "0,0,0"))
                                                   (rule "disjointDefinition" (formula "65"))
                                                    (builtin "One Step Simplification" (formula "65"))
                                                   (rule "notRight" (formula "65"))
                                                   (rule "eqSymm" (formula "1"))
                                                   (rule "close" (formula "54") (ifseqformula "1"))
                                                )
                                             )
                                             (branch "Case 2"
                                                (rule "polySimp_homoEq" (formula "4") (term "1,1,0"))
                                                (rule "polySimp_homoEq" (formula "11") (term "0"))
                                                (rule "polySimp_mulComm0" (formula "4") (term "1,0,1,1,0"))
                                                (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "4") (term "1,0,1,1,0"))
                                                (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,1,1,0"))
                                                (rule "polySimp_addComm1" (formula "4") (term "0,1,1,0"))
                                                (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,1,0"))
                                                (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
                                                (rule "polySimp_addComm1" (formula "11") (term "0,0,0"))
                                                (rule "disjointDefinition" (formula "65"))
                                                 (builtin "One Step Simplification" (formula "65"))
                                                (rule "notRight" (formula "65"))
                                                (rule "eqSymm" (formula "1"))
                                                (rule "close" (formula "55") (ifseqformula "1"))
                                             )
                                          )
                                          (branch "Case 2"
                                             (rule "polySimp_homoEq" (formula "4") (term "1,1,0"))
                                             (rule "polySimp_homoEq" (formula "11") (term "0"))
                                             (rule "polySimp_mulComm0" (formula "4") (term "1,0,1,1,0"))
                                             (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "4") (term "1,0,1,1,0"))
                                             (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,1,1,0"))
                                             (rule "polySimp_addComm1" (formula "4") (term "0,1,1,0"))
                                             (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,1,0"))
                                             (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
                                             (rule "polySimp_addComm1" (formula "11") (term "0,0,0"))
                                             (rule "disjointDefinition" (formula "65"))
                                              (builtin "One Step Simplification" (formula "65"))
                                             (rule "notRight" (formula "65"))
                                             (rule "eqSymm" (formula "1"))
                                             (rule "close" (formula "56") (ifseqformula "1"))
                                          )
                                       )
                                       (branch "Case 2"
                                          (rule "polySimp_homoEq" (formula "4") (term "1,1,0"))
                                          (rule "polySimp_homoEq" (formula "11") (term "0"))
                                          (rule "polySimp_mulComm0" (formula "4") (term "1,0,1,1,0"))
                                          (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "4") (term "1,0,1,1,0"))
                                          (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,1,1,0"))
                                          (rule "polySimp_addComm1" (formula "4") (term "0,1,1,0"))
                                          (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,1,0"))
                                          (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
                                          (rule "polySimp_addComm1" (formula "11") (term "0,0,0"))
                                          (rule "disjointDefinition" (formula "65"))
                                           (builtin "One Step Simplification" (formula "65"))
                                          (rule "notRight" (formula "65"))
                                          (rule "eqSymm" (formula "1"))
                                          (rule "close" (formula "57") (ifseqformula "1"))
                                       )
                                    )
                                    (branch "Case 2"
                                       (rule "polySimp_homoEq" (formula "4") (term "1,1,0"))
                                       (rule "polySimp_homoEq" (formula "11") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "4") (term "1,0,1,1,0"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "4") (term "1,0,1,1,0"))
                                       (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,1,1,0"))
                                       (rule "polySimp_addComm1" (formula "4") (term "0,1,1,0"))
                                       (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,1,0"))
                                       (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
                                       (rule "polySimp_addComm1" (formula "11") (term "0,0,0"))
                                       (rule "disjointDefinition" (formula "65"))
                                        (builtin "One Step Simplification" (formula "65"))
                                       (rule "notRight" (formula "65"))
                                       (rule "eqSymm" (formula "1"))
                                       (rule "close" (formula "58") (ifseqformula "1"))
                                    )
                                 )
                                 (branch "Case 2"
                                    (rule "polySimp_homoEq" (formula "4") (term "1,1,0"))
                                    (rule "polySimp_homoEq" (formula "11") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "4") (term "1,0,1,1,0"))
                                    (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "4") (term "1,0,1,1,0"))
                                    (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,1,1,0"))
                                    (rule "polySimp_addComm1" (formula "4") (term "0,1,1,0"))
                                    (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,1,0"))
                                    (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
                                    (rule "polySimp_addComm1" (formula "11") (term "0,0,0"))
                                    (rule "disjointDefinition" (formula "65"))
                                     (builtin "One Step Simplification" (formula "65"))
                                    (rule "notRight" (formula "65"))
                                    (rule "eqSymm" (formula "1"))
                                    (rule "close" (formula "59") (ifseqformula "1"))
                                 )
                              )
                              (branch "Case 2"
                                 (rule "andRight" (formula "65"))
                                 (branch "Case 1"
                                    (rule "allRight" (formula "65") (inst "sk=b_0") (userinteraction))
                                    (rule "impRight" (formula "65"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "allLeftHide" (formula "6") (inst "t=b_0") (userinteraction))
                                    (rule "allLeftHide" (formula "39") (inst "t=b_0") (userinteraction))
                                    (rule "translateJavaAddInt" (formula "67") (term "0,0,0"))
                                    (rule "eqSymm" (formula "6") (term "0,1,1,1,1"))
                                    (rule "eqSymm" (formula "39") (term "0,1,0,1,1"))
                                    (rule "polySimp_homoEq" (formula "13") (term "0"))
                                    (rule "polySimp_homoEq" (formula "6") (term "1,1"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "6") (term "1,0,1,1"))
                                    (rule "polySimp_rightDist" (formula "13") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "6") (term "1,0,1,1"))
                                    (rule "polySimp_mulComm0" (formula "6") (term "0,1,0,1,1"))
                                    (rule "polySimp_addComm1" (formula "6") (term "0,1,1"))
                                    (rule "polySimp_addAssoc" (formula "13") (term "0,0"))
                                    (rule "polySimp_addComm1" (formula "13") (term "0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "39") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0,0"))
                                    (rule "polySimp_addComm1" (formula "39") (term "0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "8"))
                                    (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "8") (term "0"))
                                    (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0"))
                                    (rule "polySimp_addComm1" (formula "6") (term "0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "35"))
                                    (rule "polySimp_mulComm0" (formula "35") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "35") (term "0"))
                                    (rule "inEqSimp_ltToLeq" (formula "2"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "2") (term "0"))
                                    (rule "inEqSimp_commuteLeq" (formula "1"))
                                    (rule "replace_known_left" (formula "6") (term "1,0") (ifseqformula "1"))
                                     (builtin "One Step Simplification" (formula "6"))
                                    (rule "replace_known_left" (formula "39") (term "1,0") (ifseqformula "1"))
                                     (builtin "One Step Simplification" (formula "39"))
                                    (rule "inEqSimp_homoInEq0" (formula "33"))
                                    (rule "polySimp_mulComm0" (formula "33") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "33") (term "1,0"))
                                    (rule "polySimp_mulAssoc" (formula "33") (term "0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "33") (term "0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "33") (term "0,1,0"))
                                    (rule "polySimp_elimOne" (formula "33") (term "0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "33") (term "0"))
                                    (rule "inEqSimp_homoInEq0" (formula "67") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "67") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "67") (term "1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "67") (term "0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "67") (term "0,0,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "39") (term "1,1"))
                                    (rule "polySimp_mulComm0" (formula "39") (term "1,0,1,1"))
                                    (rule "polySimp_rightDist" (formula "39") (term "1,0,1,1"))
                                    (rule "polySimp_mulComm0" (formula "39") (term "0,1,0,1,1"))
                                    (rule "polySimp_addAssoc" (formula "39") (term "0,1,1"))
                                    (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "25"))
                                    (rule "replace_known_left" (formula "6") (term "0") (ifseqformula "2"))
                                     (builtin "One Step Simplification" (formula "6"))
                                    (rule "andLeft" (formula "6"))
                                    (rule "andLeft" (formula "6"))
                                    (rule "replace_known_left" (formula "41") (term "0") (ifseqformula "2"))
                                     (builtin "One Step Simplification" (formula "41"))
                                    (rule "andLeft" (formula "41"))
                                    (rule "andLeft" (formula "41"))
                                    (rule "replace_known_left" (formula "71") (term "1") (ifseqformula "7"))
                                     (builtin "One Step Simplification" (formula "71") (ifInst ""  (formula "6")))
                                    (rule "inEqSimp_geqRight" (formula "71"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "1") (term "0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                    (rule "polySimp_sepNegMonomial" (formula "16") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "16") (term "0,0"))
                                    (rule "polySimp_elimOne" (formula "16") (term "0,0"))
                                    (rule "polySimp_sepPosMonomial" (formula "9"))
                                    (rule "polySimp_mulComm0" (formula "9") (term "1"))
                                    (rule "polySimp_rightDist" (formula "9") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "9") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "9") (term "1,1"))
                                    (rule "polySimp_rightDist" (formula "9") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "9") (term "1,0,1"))
                                    (rule "polySimp_elimOne" (formula "9") (term "1,0,1"))
                                    (rule "polySimp_mulComm0" (formula "9") (term "0,0,1"))
                                    (rule "applyEq" (formula "44") (term "0,1,0") (ifseqformula "9"))
                                    (rule "polySimp_mulComm0" (formula "44") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "44") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "44") (term "0,1,0"))
                                    (rule "polySimp_mulAssoc" (formula "44") (term "0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "44") (term "0,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "44") (term "0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "44") (term "0,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "44") (term "0"))
                                    (rule "polySimp_addAssoc" (formula "44") (term "0,0"))
                                    (rule "polySimp_pullOutFactor2b" (formula "44") (term "0,0,0"))
                                    (rule "add_literals" (formula "44") (term "1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "44") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "44") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0"))
                                    (rule "mul_literals" (formula "13") (term "0,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "11"))
                                    (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                                    (rule "polySimp_elimOne" (formula "11") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "38"))
                                    (rule "polySimp_mulLiterals" (formula "38") (term "0"))
                                    (rule "polySimp_elimOne" (formula "38") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "36"))
                                    (rule "polySimp_mulLiterals" (formula "36") (term "0"))
                                    (rule "polySimp_elimOne" (formula "36") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                    (rule "polySimp_elimOne" (formula "3") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "44"))
                                    (rule "polySimp_mulLiterals" (formula "44") (term "0"))
                                    (rule "polySimp_elimOne" (formula "44") (term "0"))
                                    (rule "inEqSimp_contradInEq1" (formula "44") (ifseqformula "1"))
                                    (rule "andLeft" (formula "44"))
                                    (rule "inEqSimp_homoInEq1" (formula "44"))
                                    (rule "polySimp_mulComm0" (formula "44") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "44") (term "1,0"))
                                    (rule "polySimp_mulLiterals" (formula "44") (term "1,1,0"))
                                    (rule "polySimp_elimOne" (formula "44") (term "1,1,0"))
                                    (rule "polySimp_mulComm0" (formula "44") (term "0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "44") (term "0"))
                                    (rule "polySimp_addComm1" (formula "44") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "44") (term "0,0,0"))
                                    (rule "add_literals" (formula "44") (term "1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "44") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "44") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor2b" (formula "44") (term "0"))
                                    (rule "add_literals" (formula "44") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "44") (term "1,0"))
                                    (rule "add_zero_right" (formula "44") (term "0"))
                                    (rule "leq_literals" (formula "44"))
                                    (rule "closeFalse" (formula "44"))
                                 )
                                 (branch "Case 2"
                                    (rule "andRight" (formula "65"))
                                    (branch "Case 1"
                                       (rule "notRight" (formula "65"))
                                       (rule "polySimp_homoEq" (formula "12") (term "0"))
                                       (rule "polySimp_homoEq" (formula "5") (term "1,1,0"))
                                       (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "5") (term "1,0,1,1,0"))
                                       (rule "polySimp_rightDist" (formula "12") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "12") (term "0,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "5") (term "1,0,1,1,0"))
                                       (rule "polySimp_mulComm0" (formula "5") (term "0,1,0,1,1,0"))
                                       (rule "polySimp_addComm1" (formula "5") (term "0,1,1,0"))
                                       (rule "polySimp_addAssoc" (formula "12") (term "0,0"))
                                       (rule "polySimp_addComm1" (formula "12") (term "0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,1,0"))
                                       (rule "ifEqualsNull" (formula "1"))
                                       (rule "replace_known_right" (formula "1") (term "1,1") (ifseqformula "60"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "62")))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                    (branch "Case 2"
                                       (rule "notRight" (formula "65"))
                                       (rule "polySimp_homoEq" (formula "5") (term "1,1,0"))
                                       (rule "polySimp_homoEq" (formula "12") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "5") (term "1,0,1,1,0"))
                                       (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "5") (term "1,0,1,1,0"))
                                       (rule "polySimp_mulComm0" (formula "5") (term "0,1,0,1,1,0"))
                                       (rule "polySimp_addComm1" (formula "5") (term "0,1,1,0"))
                                       (rule "polySimp_rightDist" (formula "12") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "12") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,1,0"))
                                       (rule "polySimp_addAssoc" (formula "12") (term "0,0"))
                                       (rule "polySimp_addComm1" (formula "12") (term "0,0,0"))
                                       (rule "ifEqualsNull" (formula "1"))
                                       (rule "replace_known_right" (formula "1") (term "1,1") (ifseqformula "62"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "60")))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                 )
                              )
                           )
                        )
                     )
                  )
               )
            )
         )
         (branch "Case 2"
            (rule "andRight" (formula "65"))
            (branch "Case 1"
               (rule "andRight" (formula "65"))
               (branch "Case 1"
                  (rule "wellFormedAnon" (formula "65"))
                  (rule "replace_known_left" (formula "65") (term "1") (ifseqformula "12"))
                   (builtin "One Step Simplification" (formula "65") (ifInst ""  (formula "13")))
                  (rule "closeTrue" (formula "65"))
               )
               (branch "Case 2"
                  (rule "orRight" (formula "65"))
                  (rule "orRight" (formula "66"))
                  (rule "polySimp_homoEq" (formula "11") (term "0"))
                  (rule "polySimp_homoEq" (formula "4") (term "1,1,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,1,1,0"))
                  (rule "polySimp_addComm1" (formula "4") (term "0,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "11") (term "0,0,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,1,0"))
                  (rule "ifEqualsNull" (formula "65"))
                  (rule "orRight" (formula "65"))
                  (rule "replace_known_right" (formula "65") (term "1") (ifseqformula "61"))
                   (builtin "One Step Simplification" (formula "65"))
                  (rule "false_right" (formula "65"))
                  (rule "replace_known_right" (formula "65") (term "1") (ifseqformula "59"))
                   (builtin "One Step Simplification" (formula "65"))
                  (rule "false_right" (formula "65"))
                  (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "33"))
                  (rule "polySimp_mulComm0" (formula "33") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "33") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "37") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "6"))
                  (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "6") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_homoInEq0" (formula "37") (term "1,1,0"))
                  (rule "polySimp_mulComm0" (formula "37") (term "1,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "37") (term "1,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "37") (term "0,1,0,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "37") (term "0,1,1,0"))
                  (rule "inEqSimp_homoInEq0" (formula "31"))
                  (rule "polySimp_mulComm0" (formula "31") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "31") (term "1,0"))
                  (rule "polySimp_mulAssoc" (formula "31") (term "0,1,0"))
                  (rule "polySimp_mulComm0" (formula "31") (term "0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "31") (term "0,1,0"))
                  (rule "polySimp_elimOne" (formula "31") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "31") (term "0"))
                  (rule "polySimp_sepNegMonomial" (formula "11") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "0,0"))
                  (rule "polySimp_elimOne" (formula "11") (term "0,0"))
                  (rule "polySimp_sepPosMonomial" (formula "4") (term "1,1,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,1,1,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,1,0"))
                  (rule "polySimp_elimOne" (formula "4") (term "1,1,1,1,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "0,1,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,1,1,0"))
                  (rule "polySimp_elimOne" (formula "4") (term "1,0,1,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "0,0,1,1,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "33"))
                  (rule "polySimp_mulLiterals" (formula "33") (term "0"))
                  (rule "polySimp_elimOne" (formula "33") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "37") (term "1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "37") (term "0,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "37") (term "1,1,0,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                  (rule "polySimp_elimOne" (formula "6") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "4") (term "0,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "37") (term "1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "37") (term "0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "37") (term "0,1,1,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "31"))
                  (rule "polySimp_mulLiterals" (formula "31") (term "0"))
                  (rule "polySimp_elimOne" (formula "31") (term "0"))
                  (rule "nnf_imp2or" (formula "8") (term "0"))
                  (rule "nnf_imp2or" (formula "4") (term "0"))
                  (rule "nnf_imp2or" (formula "37") (term "0"))
                  (rule "nnf_notAnd" (formula "8") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "8") (term "1,0,0"))
                  (rule "times_zero_1" (formula "8") (term "1,0,0,1,0,0"))
                  (rule "add_zero_right" (formula "8") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                  (rule "mul_literals" (formula "8") (term "1,1,0,0"))
                  (rule "inEqSimp_notLeq" (formula "8") (term "0,0,0"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,0,0"))
                  (rule "add_literals" (formula "8") (term "0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "8") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "8") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "4") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "4") (term "1,0,0"))
                  (rule "times_zero_1" (formula "4") (term "1,0,0,1,0,0"))
                  (rule "add_literals" (formula "4") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0"))
                  (rule "mul_literals" (formula "4") (term "1,1,0,0"))
                  (rule "inEqSimp_notLeq" (formula "4") (term "0,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "4") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,0,0"))
                  (rule "add_literals" (formula "4") (term "0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "4") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "4") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "37") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "37") (term "1,0,0"))
                  (rule "times_zero_1" (formula "37") (term "1,0,0,1,0,0"))
                  (rule "add_literals" (formula "37") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0,0"))
                  (rule "mul_literals" (formula "37") (term "1,1,0,0"))
                  (rule "inEqSimp_notLeq" (formula "37") (term "0,0,0"))
                  (rule "polySimp_rightDist" (formula "37") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "37") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "37") (term "0,0,0,0,0"))
                  (rule "add_literals" (formula "37") (term "0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "37") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "37") (term "1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "37") (term "1,0,0,0"))
                  (rule "Definition_axiom_for_isClassOfSlice_in_de_wiesler_Classifier" (formula "36") (term "0") (inst "i=i"))
                   (builtin "One Step Simplification" (formula "36"))
                  (rule "inEqSimp_ltToLeq" (formula "36") (term "1,0,0"))
                  (rule "mul_literals" (formula "36") (term "1,0,0,1,0,0"))
                  (rule "add_literals" (formula "36") (term "0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0"))
                  (rule "mul_literals" (formula "36") (term "1,1,0,0"))
                  (rule "nnf_imp2or" (formula "36") (term "0"))
                  (rule "nnf_notAnd" (formula "36") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0"))
                  (rule "mul_literals" (formula "36") (term "1,0,0,0,0,0"))
                  (rule "add_literals" (formula "36") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0"))
                  (rule "mul_literals" (formula "36") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0"))
                  (rule "mul_literals" (formula "36") (term "1,0,0,1,0,0"))
                  (rule "add_literals" (formula "36") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0"))
                  (rule "mul_literals" (formula "36") (term "1,1,0,0"))
                  (rule "Contract_axiom_for_isClassOfSlice_in_Classifier" (formula "7") (term "0"))
                   (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "11")) (ifInst ""  (formula "64")) (ifInst ""  (formula "11")))
                  (rule "true_left" (formula "7"))
                  (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "21") (inst "b=b"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "translateJavaAddInt" (formula "21") (term "1,1,0,0"))
                  (rule "translateJavaCastInt" (formula "21") (term "0,0,1,0"))
                  (rule "translateJavaCastInt" (formula "21") (term "1,1,0,0,1,0,0,0"))
                  (rule "translateJavaCastInt" (formula "21") (term "0,1,0,1,0,0,0"))
                  (rule "translateJavaMulInt" (formula "21") (term "1,0,1,0,0,0,0"))
                  (rule "translateJavaMulInt" (formula "21") (term "0,1,1,0,0,0,0"))
                  (rule "andLeft" (formula "21"))
                  (rule "andLeft" (formula "21"))
                  (rule "andLeft" (formula "21"))
                  (rule "andLeft" (formula "23"))
                  (rule "andLeft" (formula "21"))
                  (rule "andLeft" (formula "22"))
                  (rule "andLeft" (formula "21"))
                  (rule "andLeft" (formula "23"))
                  (rule "andLeft" (formula "22"))
                  (rule "notLeft" (formula "21"))
                  (rule "andLeft" (formula "23"))
                  (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "47"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "polySimp_mulComm0" (formula "21") (term "1"))
                  (rule "polySimp_mulComm0" (formula "22") (term "0"))
                  (rule "polySimp_addComm0" (formula "27") (term "1"))
                  (rule "castedGetAny" (formula "28") (term "0"))
                  (rule "castedGetAny" (formula "25") (term "0"))
                  (rule "castedGetAny" (formula "24") (term "1"))
                  (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "23"))
                  (rule "inEqSimp_commuteLeq" (formula "21"))
                  (rule "inEqSimp_commuteLeq" (formula "24"))
                  (rule "applyEq" (formula "24") (term "0") (ifseqformula "43"))
                  (rule "inEqSimp_commuteGeq" (formula "24"))
                  (rule "applyEq" (formula "24") (term "0") (ifseqformula "42"))
                  (rule "inEqSimp_homoInEq0" (formula "24"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "24") (term "1,0"))
                  (rule "polySimp_mulAssoc" (formula "24") (term "0,1,0"))
                  (rule "polySimp_mulComm0" (formula "24") (term "0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "24") (term "0,1,0"))
                  (rule "polySimp_elimOne" (formula "24") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "24") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "29") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "24"))
                  (rule "polySimp_mulLiterals" (formula "24") (term "0"))
                  (rule "polySimp_elimOne" (formula "24") (term "0"))
                  (rule "elimGcdGeq_antec" (formula "21") (inst "elimGcd=Z(2(#))") (inst "elimGcdLeftDiv=int::final(bucket_pointers,
           de.wiesler.BucketPointers::$num_buckets)") (inst "elimGcdRightDiv=Z(0(#))"))
                  (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "21") (term "1,0,1,0"))
                  (rule "leq_literals" (formula "21") (term "0,0"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "add_zero_right" (formula "21") (term "0,0,0,0"))
                  (rule "add_literals" (formula "21") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "21") (term "0,0"))
                  (rule "add_literals" (formula "21") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "21") (term "1,0,0"))
                  (rule "add_zero_right" (formula "21") (term "0,0"))
                  (rule "leq_literals" (formula "21") (term "0"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "inEqSimp_exactShadow2" (formula "6") (ifseqformula "22"))
                  (rule "greater_literals" (formula "6") (term "0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "polySimp_rightDist" (formula "6") (term "1,0,0"))
                  (rule "mul_literals" (formula "6") (term "0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0"))
                  (rule "mul_literals" (formula "6") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                  (rule "polySimp_mulComm0" (formula "6") (term "1"))
                  (rule "polySimp_rightDist" (formula "6") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                  (rule "mul_literals" (formula "6") (term "0,1"))
                  (rule "inEqSimp_exactShadow3" (formula "24") (ifseqformula "43"))
                  (rule "times_zero_1" (formula "24") (term "0,0"))
                  (rule "add_zero_left" (formula "24") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "24"))
                  (rule "polySimp_mulLiterals" (formula "24") (term "1"))
                  (rule "polySimp_elimOne" (formula "24") (term "1"))
                  (rule "inEqSimp_exactShadow2" (formula "22") (ifseqformula "23"))
                  (rule "times_zero_1" (formula "22") (term "1,0,0,1"))
                  (rule "greater_literals" (formula "22") (term "0"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "times_zero_1" (formula "22") (term "0,0"))
                  (rule "add_zero_left" (formula "22") (term "0"))
                  (rule "inEqSimp_exactShadow2" (formula "42") (ifseqformula "24"))
                  (rule "greater_literals" (formula "42") (term "0"))
                   (builtin "One Step Simplification" (formula "42"))
                  (rule "polySimp_rightDist" (formula "42") (term "1,0,0"))
                  (rule "mul_literals" (formula "42") (term "0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "42") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "42") (term "1,0,0"))
                  (rule "mul_literals" (formula "42") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "42"))
                  (rule "polySimp_mulComm0" (formula "42") (term "1"))
                  (rule "polySimp_rightDist" (formula "42") (term "1"))
                  (rule "mul_literals" (formula "42") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "42") (term "1,1"))
                  (rule "nnf_imp2or" (formula "30") (term "0"))
                  (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "11"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "translateJavaSubInt" (formula "11") (term "0,2,0,1,0"))
                  (rule "translateJavaMulInt" (formula "11") (term "1,1,1,0,0,0,0"))
                  (rule "translateJavaSubInt" (formula "11") (term "0,2,1,1,0"))
                  (rule "andLeft" (formula "11"))
                  (rule "andLeft" (formula "11"))
                  (rule "andLeft" (formula "11"))
                  (rule "andLeft" (formula "11"))
                  (rule "andLeft" (formula "11"))
                  (rule "andLeft" (formula "11"))
                  (rule "andLeft" (formula "11"))
                  (rule "andLeft" (formula "13"))
                  (rule "notLeft" (formula "11"))
                  (rule "notLeft" (formula "11"))
                  (rule "eqSymm" (formula "16"))
                  (rule "eqSymm" (formula "13"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "54"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "55"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "polySimp_elimSub" (formula "16") (term "0,2,1"))
                  (rule "mul_literals" (formula "16") (term "1,0,2,1"))
                  (rule "polySimp_elimSub" (formula "16") (term "0,2,0"))
                  (rule "mul_literals" (formula "16") (term "1,0,2,0"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
                  (rule "polySimp_addComm0" (formula "16") (term "0,2,1"))
                  (rule "polySimp_addComm0" (formula "16") (term "0,2,0"))
                  (rule "inEqSimp_commuteLeq" (formula "11"))
                  (rule "applyEq" (formula "11") (term "0") (ifseqformula "38"))
                  (rule "applyEq" (formula "12") (term "0") (ifseqformula "38"))
                  (rule "applyEq" (formula "13") (term "1") (ifseqformula "38"))
                  (rule "inEqSimp_subsumption1" (formula "29") (ifseqformula "11"))
                  (rule "leq_literals" (formula "29") (term "0"))
                   (builtin "One Step Simplification" (formula "29"))
                  (rule "true_left" (formula "29"))
                  (rule "pullOutSelect" (formula "16") (term "1") (inst "selectSK=arr_0"))
                  (rule "simplifySelectOfAnon" (formula "16"))
                   (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "54")) (ifInst ""  (formula "1")))
                  (rule "simplifySelectOfAnon" (formula "17"))
                   (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "54")) (ifInst ""  (formula "1")))
                  (rule "elementOfUnion" (formula "16") (term "0,0"))
                  (rule "elementOfArrayRangeConcrete" (formula "16") (term "1,0,0"))
                  (rule "replace_known_right" (formula "16") (term "0,0,1,0,0") (ifseqformula "61"))
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "elementOfUnion" (formula "17") (term "0,0"))
                  (rule "elementOfArrayRangeConcrete" (formula "17") (term "1,0,0"))
                  (rule "replace_known_right" (formula "17") (term "0,0,1,0,0") (ifseqformula "61"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "elementOfUnion" (formula "16") (term "0,0"))
                   (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "75")))
                  (rule "elementOfUnion" (formula "17") (term "0,0"))
                   (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "75")))
                  (rule "elementOfUnion" (formula "16") (term "0,0"))
                   (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "70")))
                  (rule "elementOfUnion" (formula "17") (term "0,0"))
                   (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "70")))
                  (rule "elementOfUnion" (formula "16") (term "0,0"))
                   (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "73")) (ifInst ""  (formula "66")))
                  (rule "applyEqReverse" (formula "17") (term "1") (ifseqformula "16"))
                  (rule "hideAuxiliaryEq" (formula "16"))
                  (rule "elementOfUnion" (formula "16") (term "0,0"))
                   (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "72")) (ifInst ""  (formula "65")))
                  (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "12"))
                  (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                  (rule "mul_literals" (formula "7") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "7") (term "0"))
                  (rule "add_literals" (formula "7") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "7"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                  (rule "polySimp_elimOne" (formula "7") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "49") (ifseqformula "13"))
                  (rule "polySimp_rightDist" (formula "49") (term "0,0"))
                  (rule "mul_literals" (formula "49") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "49") (term "0"))
                  (rule "add_literals" (formula "49") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "49"))
                  (rule "polySimp_mulLiterals" (formula "49") (term "0"))
                  (rule "polySimp_elimOne" (formula "49") (term "0"))
                  (rule "inEqSimp_exactShadow2" (formula "12") (ifseqformula "30"))
                  (rule "greater_literals" (formula "12") (term "0"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "mul_literals" (formula "12") (term "1,0,0"))
                  (rule "mul_literals" (formula "12") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "12"))
                  (rule "mul_literals" (formula "12") (term "1"))
                  (rule "inEqSimp_subsumption1" (formula "30") (ifseqformula "12"))
                  (rule "leq_literals" (formula "30") (term "0"))
                   (builtin "One Step Simplification" (formula "30"))
                  (rule "true_left" (formula "30"))
                  (rule "Definition_axiom_for_isClassOfSlice_in_de_wiesler_Classifier" (formula "9") (term "0") (inst "i=i"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                  (rule "mul_literals" (formula "9") (term "1,0,0,1,0,0"))
                  (rule "add_literals" (formula "9") (term "0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                  (rule "mul_literals" (formula "9") (term "1,1,0,0"))
                  (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "37"))
                   (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "56")) (ifInst ""  (formula "55")) (ifInst ""  (formula "16")))
                  (rule "translateJavaMulInt" (formula "37") (term "1,1,1,0,0,0"))
                  (rule "translateJavaSubInt" (formula "37") (term "0,2,1,1,0"))
                  (rule "translateJavaSubInt" (formula "37") (term "0,2,0,1,0"))
                  (rule "andLeft" (formula "37"))
                  (rule "andLeft" (formula "37"))
                  (rule "andLeft" (formula "37"))
                  (rule "andLeft" (formula "37"))
                  (rule "andLeft" (formula "37"))
                  (rule "eqSymm" (formula "41"))
                  (rule "eqSymm" (formula "39"))
                  (rule "polySimp_elimSub" (formula "41") (term "0,2,0"))
                  (rule "mul_literals" (formula "41") (term "1,0,2,0"))
                  (rule "eqSymm" (formula "41"))
                  (rule "polySimp_elimSub" (formula "41") (term "0,2,0"))
                  (rule "mul_literals" (formula "41") (term "1,0,2,0"))
                  (rule "eqSymm" (formula "41"))
                  (rule "polySimp_mulComm0" (formula "39") (term "1,0"))
                  (rule "polySimp_addComm0" (formula "41") (term "0,2,1"))
                  (rule "polySimp_addComm0" (formula "41") (term "0,2,0"))
                  (rule "inEqSimp_commuteLeq" (formula "37"))
                  (rule "applyEq" (formula "15") (term "0") (ifseqformula "39"))
                  (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "11") (inst "b=b"))
                   (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "60")) (ifInst ""  (formula "31")) (ifInst ""  (formula "34")))
                  (rule "translateJavaCastInt" (formula "11") (term "0,1,1,0,0,0"))
                  (rule "translateJavaMulInt" (formula "11") (term "1,0,0,0,0,0"))
                  (rule "translateJavaMulInt" (formula "11") (term "0,1,0,0,0,0"))
                  (rule "translateJavaCastInt" (formula "11") (term "0,1,0"))
                  (rule "translateJavaAddInt" (formula "11") (term "1,1,0,0"))
                  (rule "translateJavaCastInt" (formula "11") (term "1,1,0,1,0,0,0"))
                  (rule "andLeft" (formula "11"))
                  (rule "andLeft" (formula "11"))
                  (rule "andLeft" (formula "11"))
                  (rule "andLeft" (formula "11"))
                  (rule "andLeft" (formula "12"))
                  (rule "andLeft" (formula "11"))
                  (rule "andLeft" (formula "13"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1"))
                  (rule "polySimp_mulComm0" (formula "12") (term "0"))
                  (rule "polySimp_addComm0" (formula "15") (term "1"))
                  (rule "castedGetAny" (formula "15") (term "0"))
                  (rule "castedGetAny" (formula "14") (term "0"))
                  (rule "castedGetAny" (formula "13") (term "1"))
                  (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "12"))
                  (rule "inEqSimp_commuteLeq" (formula "11"))
                  (rule "inEqSimp_commuteLeq" (formula "12"))
                  (rule "applyEq" (formula "40") (term "0") (ifseqformula "44"))
                  (rule "applyEq" (formula "39") (term "0") (ifseqformula "43"))
                  (rule "applyEq" (formula "39") (term "1") (ifseqformula "42"))
                  (rule "applyEq" (formula "12") (term "0") (ifseqformula "55"))
                  (rule "inEqSimp_commuteGeq" (formula "12"))
                  (rule "applyEq" (formula "12") (term "0") (ifseqformula "54"))
                  (rule "inEqSimp_homoInEq0" (formula "12"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,0"))
                  (rule "polySimp_mulAssoc" (formula "12") (term "0,1,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "12"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                  (rule "polySimp_elimOne" (formula "12") (term "0"))
                  (rule "inEqSimp_subsumption6" (formula "11") (ifseqformula "14"))
                  (rule "mul_literals" (formula "11") (term "1,1,0"))
                  (rule "greater_literals" (formula "11") (term "0,0"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "leq_literals" (formula "11") (term "0"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "true_left" (formula "11"))
                  (rule "nnf_notAnd" (formula "35") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "35") (term "0,0,0"))
                  (rule "mul_literals" (formula "35") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "35") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0"))
                  (rule "mul_literals" (formula "35") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "35") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "35") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0"))
                  (rule "Definition_axiom_for_countElement_in_de_wiesler_BucketPointers" (formula "19") (term "1,1,0"))
                  (rule "translateJavaAddInt" (formula "19") (term "1,1,0"))
                  (rule "polySimp_addAssoc" (formula "19") (term "1,0"))
                  (rule "polySimp_homoEq" (formula "19") (term "0"))
                  (rule "polySimp_addComm1" (formula "19") (term "0,0"))
                  (rule "polySimp_sepPosMonomial" (formula "19") (term "0"))
                  (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "19") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0"))
                  (rule "polySimp_elimOne" (formula "19") (term "1,1,0"))
                  (rule "polySimp_rightDist" (formula "19") (term "0,1,0"))
                  (rule "polySimp_rightDist" (formula "19") (term "0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "19") (term "1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "19") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "19") (term "0,0,0,1,0"))
                  (rule "Definition_axiom_for_toReadCountOfBucket_in_de_wiesler_BucketPointers" (formula "10") (term "0,1,0"))
                  (rule "translateJavaSubInt" (formula "10") (term "1,0,1,0"))
                  (rule "polySimp_elimSub" (formula "10") (term "1,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0"))
                  (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,1,0"))
                  (rule "Definition_axiom_for_toReadCountOfBucket_in_de_wiesler_BucketPointers" (formula "10") (term "1,1,0"))
                  (rule "translateJavaSubInt" (formula "10") (term "1,1,1,0"))
                  (rule "polySimp_elimSub" (formula "10") (term "1,1,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "10") (term "0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,1,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "10") (term "1,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,1,1,0"))
                  (rule "mul_literals" (formula "10") (term "0,1,0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "10") (term "1,1,0,1,1,0"))
                  (rule "Definition_axiom_for_writtenElementsOfBucketClassified_in_de_wiesler_BucketPointers" (formula "4") (term "0,1,0,1,0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "translateJavaAddInt" (formula "4") (term "4,0,2,1,0,1,0"))
                  (rule "translateJavaSubInt" (formula "4") (term "4,0,0,1,1,0,1,0"))
                  (rule "translateJavaSubInt" (formula "4") (term "0,0,0,1,0,1,0"))
                  (rule "translateJavaAddInt" (formula "4") (term "3,0,0,1,1,0,1,0"))
                  (rule "translateJavaAddInt" (formula "4") (term "3,0,2,1,0,1,0"))
                  (rule "translateJavaAddInt" (formula "4") (term "0,4,0,0,1,1,0,1,0"))
                  (rule "polySimp_elimSub" (formula "4") (term "0,0,0,1,0,1,0"))
                  (rule "polySimp_elimSub" (formula "4") (term "4,0,0,1,1,0,1,0"))
                  (rule "mul_literals" (formula "4") (term "1,4,0,0,1,1,0,1,0"))
                  (rule "polySimp_addComm0" (formula "4") (term "0,0,0,1,0,1,0"))
                  (rule "polySimp_addComm1" (formula "4") (term "4,0,0,1,1,0,1,0"))
                  (rule "polySimp_addComm0" (formula "4") (term "0,4,0,0,1,1,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,1,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,1,0,1,0"))
                  (rule "polySimp_addComm1" (formula "4") (term "0,0,0,1,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,0,1,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,1,0,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,0,1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "0,0,0,1,0,1,0"))
                  (rule "polySimp_elimOne" (formula "4") (term "0,0,0,1,0,1,0"))
                  (rule "Definition_axiom_for_bucketSize_in_de_wiesler_BucketPointers" (formula "55") (term "0,1,1,1,0"))
                  (rule "translateJavaAddInt" (formula "55") (term "1,0,0,1,1,1,0"))
                  (rule "translateJavaSubInt" (formula "55") (term "0,1,1,1,0"))
                  (rule "polySimp_elimSub" (formula "55") (term "0,1,1,1,0"))
                  (rule "polySimp_addComm0" (formula "55") (term "1,0,0,1,1,1,0"))
                  (rule "polySimp_addComm0" (formula "55") (term "0,1,1,1,0"))
                  (rule "Definition_axiom_for_countBucketElementsEverywhere_in_de_wiesler_Permute" (formula "55") (term "0,1,1,1,1,0"))
                  (rule "translateJavaAddInt" (formula "55") (term "0,1,1,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "55") (term "1,1,1,1,0"))
                  (rule "polySimp_addComm0" (formula "55") (term "1,1,1,1,1,0"))
                  (rule "polySimp_rightDist" (formula "55") (term "1,1,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "55") (term "0,1,1,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "55") (term "1,1,1,0"))
                  (rule "Definition_axiom_for_elementsToReadOfBucketBlockClassified_in_de_wiesler_BucketPointers" (formula "55") (term "0,0,0,1,0"))
                   (builtin "One Step Simplification" (formula "55"))
                  (rule "translateJavaAddInt" (formula "55") (term "3,0,1,0,0,1,0"))
                  (rule "translateJavaAddInt" (formula "55") (term "4,0,1,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "55") (term "0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "55") (term "0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "55") (term "1,0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "55") (term "1,1,0,0,0,1,0"))
                  (rule "mul_literals" (formula "55") (term "0,1,0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "55") (term "1,1,0,0,0,1,0"))
                  (rule "nnf_imp2or" (formula "9") (term "0"))
                  (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "54") (term "0,1,0"))
                  (rule "commute_or" (formula "10") (term "0,0"))
                  (rule "Definition_axiom_for_isSortedSeqTransitive_in_de_wiesler_Functions" (formula "34") (term "0") (inst "j=j") (inst "i=i"))
                   (builtin "One Step Simplification" (formula "34"))
                  (rule "translateJavaCastInt" (formula "34") (term "0,1,0,1,0"))
                  (rule "translateJavaCastInt" (formula "34") (term "1,1,0,1,0"))
                  (rule "castedGetAny" (formula "34") (term "0,1,0,1,0"))
                  (rule "castedGetAny" (formula "34") (term "1,1,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "34") (term "1,0,1,0"))
                  (rule "applyEq" (formula "34") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "32"))
                  (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,1,0"))
                  (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,1,0"))
                  (rule "add_literals" (formula "34") (term "0,0,0,1,0,0,1,0"))
                  (rule "add_zero_left" (formula "34") (term "0,0,1,0,0,1,0"))
                  (rule "applyEq" (formula "34") (term "0,1,0,0,1,0,0") (ifseqformula "32"))
                  (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "34") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "34") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0"))
                  (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "31") (term "0"))
                   (builtin "One Step Simplification" (formula "31"))
                  (rule "translateJavaMod" (formula "31") (term "0"))
                  (rule "jmod_axiom" (formula "31") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "31") (term "1,0"))
                  (rule "polySimp_sepNegMonomial" (formula "31"))
                  (rule "polySimp_mulLiterals" (formula "31") (term "0"))
                  (rule "newSym_eq" (formula "31") (inst "newSymDef=mul(int::final(bucket_pointers,
               de.wiesler.BucketPointers::$first_empty_position),
    Z(0(#)))") (inst "l=l_0"))
                  (rule "times_zero_1" (formula "31") (term "1,1"))
                  (rule "add_zero_right" (formula "31") (term "1"))
                  (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "31"))
                  (rule "eqSymm" (formula "32"))
                  (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "32"))
                  (rule "applyEq" (formula "30") (term "0") (ifseqformula "32"))
                  (rule "applyEq" (formula "54") (term "0") (ifseqformula "32"))
                  (rule "inEqSimp_homoInEq0" (formula "54"))
                  (rule "polySimp_mulLiterals" (formula "54") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "54") (term "0"))
                  (rule "polySimp_addComm0" (formula "54") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "54"))
                  (rule "polySimp_mulComm0" (formula "54") (term "1"))
                  (rule "polySimp_rightDist" (formula "54") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "54") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "54") (term "1,1"))
                  (rule "polySimp_mulComm0" (formula "54") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "54") (term "0,1"))
                  (rule "elimGcdGeq_antec" (formula "30") (inst "elimGcd=Z(6(5(2(#))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcdRightDiv=Z(0(#))"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "1,0,1,0"))
                  (rule "leq_literals" (formula "30") (term "0,0"))
                   (builtin "One Step Simplification" (formula "30"))
                  (rule "add_zero_right" (formula "30") (term "0,0,0,0"))
                  (rule "times_zero_1" (formula "30") (term "1,0,0,0,0"))
                  (rule "add_zero_right" (formula "30") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "30") (term "0,0"))
                  (rule "add_literals" (formula "30") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "30") (term "1,0,0"))
                  (rule "add_zero_right" (formula "30") (term "0,0"))
                  (rule "leq_literals" (formula "30") (term "0"))
                   (builtin "One Step Simplification" (formula "30"))
                  (rule "inEqSimp_exactShadow3" (formula "54") (ifseqformula "48"))
                  (rule "polySimp_rightDist" (formula "54") (term "0,0"))
                  (rule "polySimp_mulAssoc" (formula "54") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "54") (term "0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "54") (term "0,0,0"))
                  (rule "polySimp_addAssoc" (formula "54") (term "0"))
                  (rule "polySimp_addComm1" (formula "54") (term "0,0"))
                  (rule "polySimp_pullOutFactor2b" (formula "54") (term "0"))
                  (rule "add_literals" (formula "54") (term "1,1,0"))
                  (rule "times_zero_1" (formula "54") (term "1,0"))
                  (rule "add_zero_right" (formula "54") (term "0"))
                  (rule "polySimp_addComm0" (formula "54") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "54"))
                  (rule "polySimp_mulLiterals" (formula "54") (term "0"))
                  (rule "elimGcdLeq_antec" (formula "54") (inst "elimGcd=Z(6(5(2(#))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcdRightDiv=Z(7(0(6(8(8(3(8(#))))))))"))
                  (rule "polySimp_mulLiterals" (formula "54") (term "1,0,1,0"))
                  (rule "mul_literals" (formula "54") (term "0,1,0,0,0,0,1,0"))
                  (rule "leq_literals" (formula "54") (term "0,0"))
                   (builtin "One Step Simplification" (formula "54"))
                  (rule "mul_literals" (formula "54") (term "1,0,0,0,0,0"))
                  (rule "neg_literal" (formula "54") (term "0,0,0,0,0,0"))
                  (rule "polySimp_addLiterals" (formula "54") (term "0,0,0,0"))
                  (rule "add_zero_right" (formula "54") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "54") (term "0,0"))
                  (rule "add_literals" (formula "54") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "54") (term "1,0,0"))
                  (rule "add_zero_right" (formula "54") (term "0,0"))
                  (rule "qeq_literals" (formula "54") (term "0"))
                   (builtin "One Step Simplification" (formula "54"))
                  (rule "nnf_imp2or" (formula "11") (term "0"))
                  (rule "ifthenelse_split" (formula "89") (term "1,0"))
                  (branch "first_is_current_swap_0 = TRUE TRUE"
                     (rule "replace_known_left" (formula "89") (term "0,1,0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "89") (ifInst ""  (formula "26")))
                     (rule "closeTrue" (formula "89"))
                  )
                  (branch "first_is_current_swap_0 = TRUE FALSE"
                     (rule "replace_known_right" (formula "88") (term "0,1,0") (ifseqformula "89"))
                      (builtin "One Step Simplification" (formula "88") (ifInst ""  (formula "26")))
                     (rule "closeTrue" (formula "88"))
                  )
               )
            )
            (branch "Case 2"
               (rule "orRight" (formula "65"))
               (rule "orRight" (formula "66"))
               (rule "polySimp_homoEq" (formula "11") (term "0"))
               (rule "polySimp_homoEq" (formula "4") (term "1,1,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "4") (term "1,0,1,1,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
               (rule "polySimp_rightDist" (formula "4") (term "1,0,1,1,0"))
               (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,1,1,0"))
               (rule "polySimp_addComm1" (formula "4") (term "0,1,1,0"))
               (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
               (rule "polySimp_addComm1" (formula "11") (term "0,0,0"))
               (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,1,0"))
               (rule "ifEqualsNull" (formula "65"))
               (rule "orRight" (formula "65"))
               (rule "replace_known_right" (formula "65") (term "1") (ifseqformula "59"))
                (builtin "One Step Simplification" (formula "65"))
               (rule "false_right" (formula "65"))
               (rule "replace_known_right" (formula "65") (term "1") (ifseqformula "61"))
                (builtin "One Step Simplification" (formula "65"))
               (rule "false_right" (formula "65"))
               (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "6"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "6") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "33"))
               (rule "polySimp_mulComm0" (formula "33") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "33") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "37") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,0,0,0"))
               (rule "inEqSimp_homoInEq0" (formula "37") (term "1,1,0"))
               (rule "polySimp_mulComm0" (formula "37") (term "1,0,1,1,0"))
               (rule "polySimp_rightDist" (formula "37") (term "1,0,1,1,0"))
               (rule "polySimp_mulComm0" (formula "37") (term "0,1,0,1,1,0"))
               (rule "polySimp_addAssoc" (formula "37") (term "0,1,1,0"))
               (rule "inEqSimp_homoInEq0" (formula "31"))
               (rule "polySimp_mulComm0" (formula "31") (term "1,0"))
               (rule "polySimp_rightDist" (formula "31") (term "1,0"))
               (rule "polySimp_mulAssoc" (formula "31") (term "0,1,0"))
               (rule "polySimp_mulComm0" (formula "31") (term "0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "31") (term "0,1,0"))
               (rule "polySimp_elimOne" (formula "31") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "31") (term "0"))
               (rule "polySimp_sepNegMonomial" (formula "11") (term "0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "0,0"))
               (rule "polySimp_elimOne" (formula "11") (term "0,0"))
               (rule "polySimp_sepPosMonomial" (formula "4") (term "1,1,0"))
               (rule "polySimp_mulComm0" (formula "4") (term "1,1,1,0"))
               (rule "polySimp_rightDist" (formula "4") (term "1,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,1,0"))
               (rule "polySimp_elimOne" (formula "4") (term "1,1,1,1,0"))
               (rule "polySimp_rightDist" (formula "4") (term "0,1,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,1,1,0"))
               (rule "polySimp_elimOne" (formula "4") (term "1,0,1,1,1,0"))
               (rule "polySimp_mulComm0" (formula "4") (term "0,0,1,1,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0"))
               (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "6"))
               (rule "polySimp_mulLiterals" (formula "6") (term "0"))
               (rule "polySimp_elimOne" (formula "6") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,0"))
               (rule "mul_literals" (formula "4") (term "0,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "33"))
               (rule "polySimp_mulLiterals" (formula "33") (term "0"))
               (rule "polySimp_elimOne" (formula "33") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "37") (term "1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0,0,0"))
               (rule "mul_literals" (formula "37") (term "0,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "37") (term "1,1,0,0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "37") (term "1,1,0"))
               (rule "polySimp_mulLiterals" (formula "37") (term "0,1,1,0"))
               (rule "polySimp_elimOne" (formula "37") (term "0,1,1,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "31"))
               (rule "polySimp_mulLiterals" (formula "31") (term "0"))
               (rule "polySimp_elimOne" (formula "31") (term "0"))
               (rule "nnf_imp2or" (formula "8") (term "0"))
               (rule "nnf_imp2or" (formula "4") (term "0"))
               (rule "nnf_imp2or" (formula "37") (term "0"))
               (rule "nnf_notAnd" (formula "8") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "8") (term "1,0,0"))
               (rule "times_zero_1" (formula "8") (term "1,0,0,1,0,0"))
               (rule "add_zero_right" (formula "8") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
               (rule "mul_literals" (formula "8") (term "1,1,0,0"))
               (rule "inEqSimp_notLeq" (formula "8") (term "0,0,0"))
               (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0,0"))
               (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,0,0"))
               (rule "add_literals" (formula "8") (term "0,0,0,0,0,0"))
               (rule "add_zero_left" (formula "8") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0"))
               (rule "polySimp_elimOne" (formula "8") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "4") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "4") (term "1,0,0"))
               (rule "times_zero_1" (formula "4") (term "1,0,0,1,0,0"))
               (rule "add_literals" (formula "4") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0"))
               (rule "mul_literals" (formula "4") (term "1,1,0,0"))
               (rule "inEqSimp_notLeq" (formula "4") (term "0,0,0"))
               (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,0,0"))
               (rule "mul_literals" (formula "4") (term "0,1,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,0,0"))
               (rule "add_literals" (formula "4") (term "0,0,0,0,0,0"))
               (rule "add_zero_left" (formula "4") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,0"))
               (rule "polySimp_elimOne" (formula "4") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "37") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "37") (term "1,0,0"))
               (rule "times_zero_1" (formula "37") (term "1,0,0,1,0,0"))
               (rule "add_literals" (formula "37") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0,0"))
               (rule "mul_literals" (formula "37") (term "1,1,0,0"))
               (rule "inEqSimp_notLeq" (formula "37") (term "0,0,0"))
               (rule "polySimp_rightDist" (formula "37") (term "1,0,0,0,0,0"))
               (rule "mul_literals" (formula "37") (term "0,1,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "37") (term "0,0,0,0,0"))
               (rule "add_literals" (formula "37") (term "0,0,0,0,0,0"))
               (rule "add_zero_left" (formula "37") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "37") (term "1,0,0,0"))
               (rule "polySimp_elimOne" (formula "37") (term "1,0,0,0"))
               (rule "Contract_axiom_for_isClassOfSlice_in_Classifier" (formula "36") (term "0"))
               (rule "replace_known_left" (formula "36") (term "1,0,0,0") (ifseqformula "13"))
                (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "22")) (ifInst ""  (formula "62")) (ifInst ""  (formula "15")) (ifInst ""  (formula "64")) (ifInst ""  (formula "22")))
               (rule "true_left" (formula "36"))
               (rule "Contract_axiom_for_isClassOfSlice_in_Classifier" (formula "7") (term "0"))
                (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "11")) (ifInst ""  (formula "64")) (ifInst ""  (formula "11")))
               (rule "true_left" (formula "7"))
               (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "10"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "translateJavaSubInt" (formula "10") (term "0,2,0,1,0"))
               (rule "translateJavaMulInt" (formula "10") (term "1,1,1,0,0,0,0"))
               (rule "translateJavaSubInt" (formula "10") (term "0,2,1,1,0"))
               (rule "andLeft" (formula "10"))
               (rule "andLeft" (formula "10"))
               (rule "andLeft" (formula "10"))
               (rule "andLeft" (formula "10"))
               (rule "andLeft" (formula "10"))
               (rule "andLeft" (formula "10"))
               (rule "andLeft" (formula "11"))
               (rule "andLeft" (formula "10"))
               (rule "notLeft" (formula "10"))
               (rule "notLeft" (formula "10"))
               (rule "eqSymm" (formula "15"))
               (rule "eqSymm" (formula "12"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "44"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "45"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "polySimp_elimSub" (formula "15") (term "0,2,0"))
               (rule "mul_literals" (formula "15") (term "1,0,2,0"))
               (rule "eqSymm" (formula "15"))
               (rule "polySimp_elimSub" (formula "15") (term "0,2,0"))
               (rule "mul_literals" (formula "15") (term "1,0,2,0"))
               (rule "eqSymm" (formula "15"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
               (rule "polySimp_addComm0" (formula "15") (term "0,2,1"))
               (rule "polySimp_addComm0" (formula "15") (term "0,2,0"))
               (rule "inEqSimp_commuteLeq" (formula "10"))
               (rule "applyEq" (formula "10") (term "0") (ifseqformula "29"))
               (rule "applyEq" (formula "11") (term "0") (ifseqformula "29"))
               (rule "applyEq" (formula "12") (term "1") (ifseqformula "29"))
               (rule "pullOutSelect" (formula "15") (term "1") (inst "selectSK=arr_0"))
               (rule "simplifySelectOfAnon" (formula "15"))
                (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "45")) (ifInst ""  (formula "1")))
               (rule "simplifySelectOfAnon" (formula "16"))
                (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "45")) (ifInst ""  (formula "1")))
               (rule "elementOfUnion" (formula "15") (term "0,0"))
               (rule "elementOfArrayRangeConcrete" (formula "15") (term "1,0,0"))
               (rule "replace_known_right" (formula "15") (term "0,0,1,0,0") (ifseqformula "51"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "elementOfUnion" (formula "16") (term "0,0"))
               (rule "elementOfArrayRangeConcrete" (formula "16") (term "1,0,0"))
               (rule "replace_known_right" (formula "16") (term "0,0,1,0,0") (ifseqformula "51"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "elementOfUnion" (formula "15") (term "0,0"))
                (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "65")))
               (rule "elementOfUnion" (formula "16") (term "0,0"))
                (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "65")))
               (rule "elementOfUnion" (formula "15") (term "0,0"))
                (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "60")))
               (rule "elementOfUnion" (formula "16") (term "0,0"))
                (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "60")))
               (rule "elementOfUnion" (formula "15") (term "0,0"))
                (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "63")) (ifInst ""  (formula "56")))
               (rule "applyEqReverse" (formula "16") (term "1") (ifseqformula "15"))
               (rule "hideAuxiliaryEq" (formula "15"))
               (rule "elementOfUnion" (formula "15") (term "0,0"))
                (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "62")) (ifInst ""  (formula "55")))
               (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "11"))
               (rule "polySimp_rightDist" (formula "6") (term "0,0"))
               (rule "mul_literals" (formula "6") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "6") (term "0"))
               (rule "add_literals" (formula "6") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "6"))
               (rule "polySimp_mulLiterals" (formula "6") (term "0"))
               (rule "polySimp_elimOne" (formula "6") (term "0"))
               (rule "inEqSimp_exactShadow3" (formula "40") (ifseqformula "12"))
               (rule "polySimp_rightDist" (formula "40") (term "0,0"))
               (rule "mul_literals" (formula "40") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "40") (term "0"))
               (rule "add_literals" (formula "40") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "40"))
               (rule "polySimp_mulLiterals" (formula "40") (term "0"))
               (rule "polySimp_elimOne" (formula "40") (term "0"))
               (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "10") (inst "b=b"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "translateJavaMulInt" (formula "10") (term "0,1,1,0,0,0,0"))
               (rule "translateJavaAddInt" (formula "10") (term "1,1,0,0"))
               (rule "translateJavaCastInt" (formula "10") (term "1,1,0,0,1,0,0,0"))
               (rule "translateJavaCastInt" (formula "10") (term "0,0,1,0"))
               (rule "translateJavaCastInt" (formula "10") (term "0,1,0,1,0,0,0"))
               (rule "translateJavaMulInt" (formula "10") (term "1,0,1,0,0,0,0"))
               (rule "andLeft" (formula "10"))
               (rule "andLeft" (formula "10"))
               (rule "andLeft" (formula "11"))
               (rule "andLeft" (formula "10"))
               (rule "andLeft" (formula "10"))
               (rule "andLeft" (formula "10"))
               (rule "andLeft" (formula "12"))
               (rule "notLeft" (formula "10"))
               (rule "andLeft" (formula "10"))
               (rule "andLeft" (formula "12"))
               (rule "andLeft" (formula "12"))
               (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "55"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "polySimp_mulComm0" (formula "11") (term "0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1"))
               (rule "polySimp_addComm0" (formula "16") (term "1"))
               (rule "castedGetAny" (formula "17") (term "0"))
               (rule "castedGetAny" (formula "14") (term "0"))
               (rule "castedGetAny" (formula "13") (term "1"))
               (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "12"))
               (rule "inEqSimp_commuteLeq" (formula "10"))
               (rule "inEqSimp_commuteLeq" (formula "13"))
               (rule "applyEq" (formula "13") (term "0") (ifseqformula "51"))
               (rule "inEqSimp_commuteGeq" (formula "13"))
               (rule "applyEq" (formula "13") (term "0") (ifseqformula "50"))
               (rule "inEqSimp_homoInEq0" (formula "13"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
               (rule "polySimp_rightDist" (formula "13") (term "1,0"))
               (rule "polySimp_mulAssoc" (formula "13") (term "0,1,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0"))
               (rule "polySimp_elimOne" (formula "13") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "13") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "13"))
               (rule "polySimp_mulLiterals" (formula "13") (term "0"))
               (rule "polySimp_elimOne" (formula "13") (term "0"))
               (rule "inEqSimp_subsumption6" (formula "10") (ifseqformula "18"))
               (rule "greater_literals" (formula "10") (term "0,0"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "mul_literals" (formula "10") (term "1,0"))
               (rule "leq_literals" (formula "10") (term "0"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "true_left" (formula "10"))
               (rule "inEqSimp_exactShadow2" (formula "47") (ifseqformula "10"))
               (rule "greater_literals" (formula "47") (term "0"))
                (builtin "One Step Simplification" (formula "47"))
               (rule "polySimp_rightDist" (formula "47") (term "1,0,0"))
               (rule "mul_literals" (formula "47") (term "0,1,0,0"))
               (rule "polySimp_rightDist" (formula "47") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "47") (term "1,0,0"))
               (rule "mul_literals" (formula "47") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "47"))
               (rule "polySimp_mulComm0" (formula "47") (term "1"))
               (rule "polySimp_rightDist" (formula "47") (term "1"))
               (rule "polySimp_mulLiterals" (formula "47") (term "1,1"))
               (rule "mul_literals" (formula "47") (term "0,1"))
               (rule "inEqSimp_exactShadow2" (formula "7") (ifseqformula "10"))
               (rule "greater_literals" (formula "7") (term "0"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "polySimp_rightDist" (formula "7") (term "1,0,0"))
               (rule "mul_literals" (formula "7") (term "0,1,0,0"))
               (rule "polySimp_rightDist" (formula "7") (term "0,0"))
               (rule "mul_literals" (formula "7") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "7"))
               (rule "polySimp_mulComm0" (formula "7") (term "1"))
               (rule "polySimp_rightDist" (formula "7") (term "1"))
               (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
               (rule "mul_literals" (formula "7") (term "0,1"))
               (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "51"))
               (rule "times_zero_1" (formula "12") (term "0,0"))
               (rule "add_zero_left" (formula "12") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "12"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1"))
               (rule "polySimp_elimOne" (formula "12") (term "1"))
               (rule "inEqSimp_exactShadow2" (formula "18") (ifseqformula "11"))
               (rule "greater_literals" (formula "18") (term "0"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "mul_literals" (formula "18") (term "1,0,0"))
               (rule "mul_literals" (formula "18") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "18"))
               (rule "mul_literals" (formula "18") (term "1"))
               (rule "Definition_axiom_for_isClassOfSlice_in_de_wiesler_Classifier" (formula "53") (term "0") (inst "i=i"))
                (builtin "One Step Simplification" (formula "53"))
               (rule "inEqSimp_ltToLeq" (formula "53") (term "1,0,0"))
               (rule "mul_literals" (formula "53") (term "1,0,0,1,0,0"))
               (rule "add_literals" (formula "53") (term "0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "53") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "53") (term "1,0,0"))
               (rule "mul_literals" (formula "53") (term "1,1,0,0"))
               (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "37"))
                (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "57")) (ifInst ""  (formula "56")) (ifInst ""  (formula "22")))
               (rule "translateJavaSubInt" (formula "37") (term "0,2,1,1,0"))
               (rule "translateJavaSubInt" (formula "37") (term "0,2,0,1,0"))
               (rule "translateJavaMulInt" (formula "37") (term "1,1,1,0,0,0"))
               (rule "andLeft" (formula "37"))
               (rule "andLeft" (formula "37"))
               (rule "andLeft" (formula "37"))
               (rule "andLeft" (formula "37"))
               (rule "andLeft" (formula "37"))
               (rule "eqSymm" (formula "41"))
               (rule "eqSymm" (formula "39"))
               (rule "polySimp_elimSub" (formula "41") (term "0,2,1"))
               (rule "mul_literals" (formula "41") (term "1,0,2,1"))
               (rule "polySimp_elimSub" (formula "41") (term "0,2,0"))
               (rule "mul_literals" (formula "41") (term "1,0,2,0"))
               (rule "polySimp_mulComm0" (formula "39") (term "1,0"))
               (rule "polySimp_addComm0" (formula "41") (term "0,2,1"))
               (rule "polySimp_addComm0" (formula "41") (term "0,2,0"))
               (rule "inEqSimp_commuteLeq" (formula "37"))
               (rule "applyEq" (formula "38") (term "0") (ifseqformula "42"))
               (rule "applyEq" (formula "21") (term "0") (ifseqformula "38"))
               (rule "applyEq" (formula "36") (term "0") (ifseqformula "40"))
               (rule "applyEq" (formula "36") (term "1") (ifseqformula "39"))
               (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "35") (inst "b=b"))
                (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "56")) (ifInst ""  (formula "13")) (ifInst ""  (formula "16")))
               (rule "translateJavaCastInt" (formula "35") (term "0,1,1,0,0,0"))
               (rule "translateJavaMulInt" (formula "35") (term "1,0,0,0,0,0"))
               (rule "translateJavaAddInt" (formula "35") (term "1,1,0,0"))
               (rule "translateJavaCastInt" (formula "35") (term "0,1,0"))
               (rule "translateJavaCastInt" (formula "35") (term "1,1,0,1,0,0,0"))
               (rule "translateJavaMulInt" (formula "35") (term "0,1,0,0,0,0"))
               (rule "andLeft" (formula "35"))
               (rule "andLeft" (formula "35"))
               (rule "andLeft" (formula "35"))
               (rule "andLeft" (formula "35"))
               (rule "andLeft" (formula "35"))
               (rule "andLeft" (formula "37"))
               (rule "andLeft" (formula "37"))
               (rule "polySimp_mulComm0" (formula "35") (term "1"))
               (rule "polySimp_mulComm0" (formula "36") (term "0"))
               (rule "polySimp_addComm0" (formula "39") (term "1"))
               (rule "castedGetAny" (formula "39") (term "0"))
               (rule "castedGetAny" (formula "38") (term "0"))
               (rule "castedGetAny" (formula "37") (term "1"))
               (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "36"))
               (rule "inEqSimp_commuteLeq" (formula "35"))
               (rule "inEqSimp_commuteLeq" (formula "36"))
               (rule "applyEq" (formula "37") (term "0") (ifseqformula "55"))
               (rule "inEqSimp_homoInEq0" (formula "37"))
               (rule "polySimp_mulComm0" (formula "37") (term "1,0"))
               (rule "polySimp_rightDist" (formula "37") (term "1,0"))
               (rule "polySimp_mulAssoc" (formula "37") (term "0,1,0"))
               (rule "polySimp_mulComm0" (formula "37") (term "0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "37") (term "0,1,0"))
               (rule "polySimp_elimOne" (formula "37") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "37") (term "0"))
               (rule "applyEq" (formula "36") (term "0") (ifseqformula "55"))
               (rule "inEqSimp_commuteGeq" (formula "36"))
               (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "37") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "37") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "37") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "37") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "37") (term "1,1,1,0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "36"))
               (rule "polySimp_mulLiterals" (formula "36") (term "0"))
               (rule "polySimp_elimOne" (formula "36") (term "0"))
               (rule "inEqSimp_subsumption6" (formula "35") (ifseqformula "19"))
               (rule "mul_literals" (formula "35") (term "1,1,0"))
               (rule "greater_literals" (formula "35") (term "0,0"))
                (builtin "One Step Simplification" (formula "35"))
               (rule "leq_literals" (formula "35") (term "0"))
                (builtin "One Step Simplification" (formula "35"))
               (rule "true_left" (formula "35"))
               (rule "Definition_axiom_for_isClassOfSlice_in_de_wiesler_Classifier" (formula "9") (term "0") (inst "i=i"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
               (rule "mul_literals" (formula "9") (term "1,0,0,1,0,0"))
               (rule "add_literals" (formula "9") (term "0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
               (rule "mul_literals" (formula "9") (term "1,1,0,0"))
               (rule "nnf_imp2or" (formula "17") (term "0"))
               (rule "Definition_axiom_for_countElement_in_de_wiesler_BucketPointers" (formula "25") (term "1,1,0"))
               (rule "translateJavaAddInt" (formula "25") (term "1,1,0"))
               (rule "polySimp_addAssoc" (formula "25") (term "1,0"))
               (rule "polySimp_homoEq" (formula "25") (term "0"))
               (rule "polySimp_addComm1" (formula "25") (term "0,0"))
               (rule "polySimp_sepPosMonomial" (formula "25") (term "0"))
               (rule "polySimp_mulComm0" (formula "25") (term "1,0"))
               (rule "polySimp_rightDist" (formula "25") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0"))
               (rule "polySimp_elimOne" (formula "25") (term "1,1,0"))
               (rule "polySimp_rightDist" (formula "25") (term "0,1,0"))
               (rule "polySimp_rightDist" (formula "25") (term "0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "25") (term "1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "25") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "25") (term "0,0,0,1,0"))
               (rule "nnf_imp2or" (formula "54") (term "0"))
               (rule "Definition_axiom_for_toReadCountOfBucket_in_de_wiesler_BucketPointers" (formula "10") (term "0,1,0"))
               (rule "translateJavaSubInt" (formula "10") (term "1,0,1,0"))
               (rule "polySimp_elimSub" (formula "10") (term "1,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0"))
               (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,1,0"))
               (rule "Definition_axiom_for_toReadCountOfBucket_in_de_wiesler_BucketPointers" (formula "10") (term "1,1,0"))
               (rule "translateJavaSubInt" (formula "10") (term "1,1,1,0"))
               (rule "polySimp_elimSub" (formula "10") (term "1,1,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "10") (term "0,1,1,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,1,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,1,1,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,1,1,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,0,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,1,1,0"))
               (rule "mul_literals" (formula "10") (term "0,1,0,1,1,0"))
               (rule "polySimp_elimOne" (formula "10") (term "1,1,0,1,1,0"))
               (rule "Definition_axiom_for_countBucketElementsEverywhere_in_de_wiesler_Permute" (formula "4") (term "1,0,1,1,1,0"))
               (rule "translateJavaAddInt" (formula "4") (term "1,0,1,1,1,0"))
               (rule "polySimp_addComm0" (formula "4") (term "0,1,1,1,0"))
               (rule "polySimp_addComm0" (formula "4") (term "0,0,1,1,1,0"))
               (rule "Definition_axiom_for_writtenElementsOfBucketClassified_in_de_wiesler_BucketPointers" (formula "4") (term "0,1,0,1,0"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "translateJavaAddInt" (formula "4") (term "0,4,0,0,1,1,0,1,0"))
               (rule "translateJavaAddInt" (formula "4") (term "4,0,2,1,0,1,0"))
               (rule "translateJavaSubInt" (formula "4") (term "0,0,0,1,0,1,0"))
               (rule "translateJavaAddInt" (formula "4") (term "3,0,2,1,0,1,0"))
               (rule "translateJavaAddInt" (formula "4") (term "3,0,0,1,1,0,1,0"))
               (rule "translateJavaSubInt" (formula "4") (term "4,0,0,1,1,0,1,0"))
               (rule "polySimp_elimSub" (formula "4") (term "0,0,0,1,0,1,0"))
               (rule "polySimp_elimSub" (formula "4") (term "4,0,0,1,1,0,1,0"))
               (rule "mul_literals" (formula "4") (term "1,4,0,0,1,1,0,1,0"))
               (rule "polySimp_addComm0" (formula "4") (term "0,0,0,1,0,1,0"))
               (rule "polySimp_addComm1" (formula "4") (term "4,0,0,1,1,0,1,0"))
               (rule "polySimp_addComm0" (formula "4") (term "0,4,0,0,1,1,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,1,0,1,0"))
               (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,1,0,1,0"))
               (rule "polySimp_addComm1" (formula "4") (term "0,0,0,1,0,1,0"))
               (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,0,1,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,1,0,1,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,0,1,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "4") (term "0,0,0,1,0,1,0"))
               (rule "polySimp_elimOne" (formula "4") (term "0,0,0,1,0,1,0"))
               (rule "Definition_axiom_for_writtenElementsOfBucketClassified_in_de_wiesler_BucketPointers" (formula "55") (term "0,1,0,1,0"))
                (builtin "One Step Simplification" (formula "55"))
               (rule "translateJavaAddInt" (formula "55") (term "3,0,2,1,0,1,0"))
               (rule "translateJavaSubInt" (formula "55") (term "0,0,0,1,0,1,0"))
               (rule "translateJavaAddInt" (formula "55") (term "3,0,0,1,1,0,1,0"))
               (rule "translateJavaAddInt" (formula "55") (term "0,4,0,0,1,1,0,1,0"))
               (rule "translateJavaAddInt" (formula "55") (term "4,0,2,1,0,1,0"))
               (rule "translateJavaSubInt" (formula "55") (term "4,0,0,1,1,0,1,0"))
               (rule "polySimp_elimSub" (formula "55") (term "0,0,0,1,0,1,0"))
               (rule "polySimp_elimSub" (formula "55") (term "4,0,0,1,1,0,1,0"))
               (rule "mul_literals" (formula "55") (term "1,4,0,0,1,1,0,1,0"))
               (rule "polySimp_addComm0" (formula "55") (term "0,0,0,1,0,1,0"))
               (rule "polySimp_addComm1" (formula "55") (term "4,0,0,1,1,0,1,0"))
               (rule "polySimp_addComm0" (formula "55") (term "0,4,0,0,1,1,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "55") (term "0,0,1,0,1,0"))
               (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,0,0,1,0,1,0"))
               (rule "polySimp_addComm1" (formula "55") (term "0,0,0,1,0,1,0"))
               (rule "polySimp_addAssoc" (formula "55") (term "0,0,0,0,1,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "55") (term "1,0,1,0,1,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "55") (term "0,0,1,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "55") (term "0,0,0,1,0,1,0"))
               (rule "polySimp_elimOne" (formula "55") (term "0,0,0,1,0,1,0"))
               (rule "commute_or" (formula "10") (term "0,0"))
               (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "24"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "translateJavaSubInt" (formula "24") (term "3,0,1"))
               (rule "andLeft" (formula "24"))
               (rule "andLeft" (formula "24"))
               (rule "andLeft" (formula "24"))
               (rule "andLeft" (formula "25"))
               (rule "andLeft" (formula "24"))
               (rule "andLeft" (formula "24"))
               (rule "andLeft" (formula "24"))
               (rule "andLeft" (formula "26"))
               (rule "notLeft" (formula "24"))
               (rule "notLeft" (formula "24"))
               (rule "polySimp_elimSub" (formula "30") (term "3,0"))
               (rule "mul_literals" (formula "30") (term "1,3,0"))
               (rule "polySimp_addComm0" (formula "30") (term "3,0"))
               (rule "inEqSimp_commuteLeq" (formula "29"))
               (rule "inEqSimp_commuteLeq" (formula "28"))
               (rule "inEqSimp_commuteLeq" (formula "27"))
               (rule "inEqSimp_commuteLeq" (formula "24"))
               (rule "applyEq" (formula "27") (term "0") (ifseqformula "26"))
               (rule "applyEq" (formula "63") (term "0") (ifseqformula "21"))
               (rule "applyEq" (formula "42") (term "0,1,0") (ifseqformula "26"))
               (rule "applyEq" (formula "29") (term "1") (ifseqformula "26"))
               (rule "applyEq" (formula "29") (term "0,0") (ifseqformula "21"))
               (rule "inEqSimp_commuteGeq" (formula "29"))
               (rule "applyEq" (formula "30") (term "1,0") (ifseqformula "21"))
               (rule "applyEq" (formula "23") (term "1,0,2,0") (ifseqformula "26"))
               (rule "eqSymm" (formula "23"))
               (rule "applyEq" (formula "22") (term "3,0") (ifseqformula "26"))
               (rule "applyEq" (formula "43") (term "3,0") (ifseqformula "26"))
               (rule "applyEq" (formula "28") (term "1") (ifseqformula "26"))
               (rule "applyEq" (formula "42") (term "2,0") (ifseqformula "26"))
               (rule "applyEq" (formula "30") (term "1,3,0") (ifseqformula "26"))
               (rule "applyEq" (formula "23") (term "1,0,2,0") (ifseqformula "26"))
               (rule "eqSymm" (formula "23"))
               (rule "inEqSimp_exactShadow3" (formula "27") (ifseqformula "29"))
               (rule "mul_literals" (formula "27") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "27"))
               (rule "mul_literals" (formula "27") (term "1"))
               (rule "nnf_imp2or" (formula "42") (term "0"))
               (rule "nnf_imp2or" (formula "9") (term "0"))
               (rule "nnf_notAnd" (formula "17") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
               (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "17") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
               (rule "mul_literals" (formula "17") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "61") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "61") (term "1,0,0"))
               (rule "mul_literals" (formula "61") (term "1,0,0,1,0,0"))
               (rule "add_literals" (formula "61") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "61") (term "1,0,0"))
               (rule "mul_literals" (formula "61") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "61") (term "0,0,0"))
               (rule "times_zero_1" (formula "61") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "61") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "61") (term "0,0,0"))
               (rule "mul_literals" (formula "61") (term "1,0,0,0"))
               (rule "Definition_axiom_for_isSortedSeqTransitive_in_de_wiesler_Functions" (formula "16") (term "0") (inst "j=j") (inst "i=i"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "translateJavaCastInt" (formula "16") (term "1,1,0,1,0"))
               (rule "translateJavaCastInt" (formula "16") (term "0,1,0,1,0"))
               (rule "castedGetAny" (formula "16") (term "1,1,0,1,0"))
               (rule "castedGetAny" (formula "16") (term "0,1,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,1,0"))
               (rule "applyEq" (formula "16") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "14"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0,1,0"))
               (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0,1,0"))
               (rule "add_literals" (formula "16") (term "0,0,0,1,0,0,1,0"))
               (rule "add_zero_left" (formula "16") (term "0,0,1,0,0,1,0"))
               (rule "applyEq" (formula "16") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
               (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "13") (term "0"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "translateJavaMod" (formula "13") (term "0"))
               (rule "jmod_axiom" (formula "13") (term "0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,0"))
               (rule "polySimp_sepNegMonomial" (formula "13"))
               (rule "polySimp_mulLiterals" (formula "13") (term "0"))
               (rule "newSym_eq" (formula "13") (inst "newSymDef=mul(int::final(bucket_pointers,
               de.wiesler.BucketPointers::$first_empty_position),
    Z(0(#)))") (inst "l=l_0"))
               (rule "times_zero_1" (formula "13") (term "1,1"))
               (rule "add_zero_right" (formula "13") (term "1"))
               (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "13"))
               (rule "eqSymm" (formula "14"))
               (rule "applyEq" (formula "61") (term "0") (ifseqformula "14"))
               (rule "inEqSimp_homoInEq0" (formula "61"))
               (rule "polySimp_mulLiterals" (formula "61") (term "1,0"))
               (rule "polySimp_addComm1" (formula "61") (term "0"))
               (rule "polySimp_addComm0" (formula "61") (term "0,0"))
               (rule "applyEq" (formula "12") (term "0") (ifseqformula "14"))
               (rule "applyEq" (formula "13") (term "0,0") (ifseqformula "14"))
               (rule "inEqSimp_sepPosMonomial1" (formula "61"))
               (rule "polySimp_mulComm0" (formula "61") (term "1"))
               (rule "polySimp_rightDist" (formula "61") (term "1"))
               (rule "polySimp_mulLiterals" (formula "61") (term "1,1"))
               (rule "polySimp_elimOne" (formula "61") (term "1,1"))
               (rule "polySimp_mulComm0" (formula "61") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "61") (term "0,1"))
               (rule "elimGcdGeq_antec" (formula "12") (inst "elimGcd=Z(6(5(2(#))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcdRightDiv=Z(0(#))"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0"))
               (rule "add_zero_right" (formula "12") (term "0,0,0,1,0"))
               (rule "leq_literals" (formula "12") (term "0,0"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "times_zero_1" (formula "12") (term "1,0,0,0,0"))
               (rule "add_zero_right" (formula "12") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "12") (term "0,0"))
               (rule "add_literals" (formula "12") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "12") (term "1,0,0"))
               (rule "add_zero_right" (formula "12") (term "0,0"))
               (rule "leq_literals" (formula "12") (term "0"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "inEqSimp_exactShadow3" (formula "61") (ifseqformula "55"))
               (rule "polySimp_rightDist" (formula "61") (term "0,0"))
               (rule "polySimp_mulAssoc" (formula "61") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "61") (term "0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "61") (term "0,0,0"))
               (rule "polySimp_addAssoc" (formula "61") (term "0"))
               (rule "polySimp_addComm1" (formula "61") (term "0,0"))
               (rule "polySimp_pullOutFactor2b" (formula "61") (term "0"))
               (rule "add_literals" (formula "61") (term "1,1,0"))
               (rule "times_zero_1" (formula "61") (term "1,0"))
               (rule "add_zero_right" (formula "61") (term "0"))
               (rule "polySimp_addComm0" (formula "61") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "61"))
               (rule "polySimp_mulLiterals" (formula "61") (term "0"))
               (rule "elimGcdLeq_antec" (formula "61") (inst "elimGcd=Z(6(5(2(#))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcdRightDiv=Z(7(0(6(8(8(3(8(#))))))))"))
               (rule "mul_literals" (formula "61") (term "0,1,0,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "61") (term "1,0,1,0"))
               (rule "neg_literal" (formula "61") (term "0,0,0,0,0,1,0"))
               (rule "leq_literals" (formula "61") (term "0,0"))
                (builtin "One Step Simplification" (formula "61"))
               (rule "mul_literals" (formula "61") (term "1,0,0,0,0,0"))
               (rule "polySimp_addLiterals" (formula "61") (term "0,0,0,0"))
               (rule "add_zero_right" (formula "61") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "61") (term "0,0"))
               (rule "add_literals" (formula "61") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "61") (term "1,0,0"))
               (rule "add_zero_right" (formula "61") (term "0,0"))
               (rule "qeq_literals" (formula "61") (term "0"))
                (builtin "One Step Simplification" (formula "61"))
               (rule "ifthenelse_split" (formula "97") (term "1,0"))
               (branch "first_is_current_swap_0 = TRUE TRUE"
                  (rule "replace_known_left" (formula "10") (term "0,1,2,0,1,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "replace_known_left" (formula "97") (term "0,1,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "97") (ifInst ""  (formula "41")))
                  (rule "closeTrue" (formula "97"))
               )
               (branch "first_is_current_swap_0 = TRUE FALSE"
                  (rule "replace_known_right" (formula "33") (term "0,1,1,0,0,1,0") (ifseqformula "97"))
                   (builtin "One Step Simplification" (formula "33"))
                  (rule "replace_known_right" (formula "96") (term "0,1,0") (ifseqformula "97"))
                   (builtin "One Step Simplification" (formula "96") (ifInst ""  (formula "39")))
                  (rule "closeTrue" (formula "96"))
               )
            )
         )
      )
   )
   (branch "if true false"
       (builtin "One Step Simplification" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
)
)
}
